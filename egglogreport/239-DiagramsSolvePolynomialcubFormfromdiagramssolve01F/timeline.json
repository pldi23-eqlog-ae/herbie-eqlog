[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.7980482098646462,0.09170725150033832,0.11024453863501549],[11,0.7687799381092191,0.12097552325576544,0.11024453863501549],[10,0.7258531395345926,0.17951206676661968,0.09463479369878769],[9,0.6712190322577953,0.23414617404341698,0.09463479369878769],[8,0.5931703075766563,0.34341438859701157,0.06341530382633209],[7,0.49951183795928955,0.43707285821437836,0.06341530382633209],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":21.77294921875,"type":"analyze"},{"outcomes":[["body",256,"invalid",4.921875,164],["body",256,"valid",259.05810546875,8256]],"time":271.7509765625,"type":"sample"},{"compiler":[[7,5]],"inputs":[["0","1"],["(*.f64 (*.f64 x 27) y)","(*.f64 (*.f64 y 27) x)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (*.f64 x 27) y)","(*.f64 (*.f64 y x) 27)","(*.f64 (*.f64 y 27) x)","(*.f64 (*.f64 y x) 27)"]],"symmetry":[[]],"time":74.0859375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (*.f64 x 27) y)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 x 27) y)","(*.f64 (*.f64 y x) 27)"]],"time":33.553955078125,"type":"simplify"},{"compiler":[[12,8]],"time":0.3330078125,"type":"eval"},{"alts":[["(*.f64 (*.f64 y x) 27)","next",0.2590700316206538],["(*.f64 (*.f64 x 27) y)","fresh",0.4921875]],"compiler":[[7,5],[7,5],[7,5],[7,5]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.10546875],"time":1.171142578125,"type":"prune"},{"compiler":[[13,6]],"locations":[["(*.f64 (*.f64 y x) 27)",0.2590700316206538,true]],"time":2.83203125,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (*.f64 y x) 27)","x","-inf",0.283935546875],["(*.f64 (*.f64 y x) 27)","x","inf",0.448974609375],["(*.f64 (*.f64 y x) 27)","x","0",0.591064453125],["(*.f64 (*.f64 y x) 27)","y","-inf",0.260009765625],["(*.f64 (*.f64 y x) 27)","y","inf",0.51806640625],["(*.f64 (*.f64 y x) 27)","y","0",0.559814453125]],"time":2.739990234375,"type":"series"},{"count":[[1,39]],"inputs":[["(*.f64 (*.f64 y x) 27)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 y x) 27))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y x) 27) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x 27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 27) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 27 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 19683 (*.f64 y x))) (pow.f64 (*.f64 y x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 x 27)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 27 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y x)) (*.f64 (pow.f64 (*.f64 y x) 2/3) 27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 y x) 2/3) 27) (cbrt.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y x) 2/3) (cbrt.f64 (*.f64 19683 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 x 27)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y x) 27)) (pow.f64 (*.f64 (*.f64 y x) 27) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 y x) 27) 2/3) (cbrt.f64 (*.f64 (*.f64 y x) 27)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -27 (*.f64 y x))) (neg.f64 (pow.f64 (*.f64 (*.f64 y x) 27) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y x) (sqrt.f64 27)) (sqrt.f64 27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 27) (*.f64 (*.f64 y x) (sqrt.f64 27)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) 27)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 27 (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -27 (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 9 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 y x) 27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y x) 27) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 9 (*.f64 y x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y x) 3) 9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 9 (*.f64 (*.f64 y x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 y x) 27) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y x) 1/27)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) 3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) 27) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -27 (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 9 (*.f64 y x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 y x) 27) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 y x) 27)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 y x) 27) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 y x) 27) 3))))))"]],"rules":[["egg-rr",39]],"time":34.807861328125,"type":"rewrite"},{"count":[[63,39]],"inputs":[["(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))"]],"time":98.39501953125,"type":"simplify"},{"compiler":[[318,183]],"time":4.692138671875,"type":"eval"},{"alts":[["(*.f64 3 (*.f64 9 (*.f64 y x)))","fresh",0.3066088011575378],["(*.f64 (*.f64 27 y) x)","next",0.2109375],["(*.f64 (*.f64 y x) 27)","done",0.2590700316206538],["(*.f64 (*.f64 x 27) y)","fresh",0.4921875],["(*.f64 (*.f64 (*.f64 y x) (sqrt.f64 27)) (sqrt.f64 27))","fresh",0.401386279305326]],"compiler":[[9,7],[7,5],[7,5],[7,5],[11,9],[9,7],[7,5],[7,5],[11,9]],"count":[[41,5]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[39,3],"picked":[1,1]}],"min-error":[0.01171875],"time":7.574951171875,"type":"prune"},{"compiler":[[13,8]],"locations":[["(*.f64 (*.f64 27 y) x)",0.2109375,true]],"time":3.137939453125,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (*.f64 27 y) x)","x","-inf",0.14697265625],["(*.f64 (*.f64 27 y) x)","x","inf",0.175048828125],["(*.f64 (*.f64 27 y) x)","x","0",0.14306640625],["(*.f64 (*.f64 27 y) x)","y","-inf",0.155029296875],["(*.f64 (*.f64 27 y) x)","y","inf",0.179931640625],["(*.f64 (*.f64 27 y) x)","y","0",0.159912109375]],"time":1.027099609375,"type":"series"},{"count":[[1,38]],"inputs":[["(*.f64 (*.f64 27 y) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 27 (*.f64 y x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 27 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 27 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 27) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x 27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 27 y)) (*.f64 (pow.f64 (*.f64 27 y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 27 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 27 y) 2/3) x) (cbrt.f64 (*.f64 27 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 27 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 27 (*.f64 y x))) (pow.f64 (*.f64 27 (*.f64 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 2/3) (cbrt.f64 (*.f64 27 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (*.f64 27 y))) (pow.f64 (*.f64 27 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 27 y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 27 y) 2/3) (*.f64 x (cbrt.f64 (*.f64 27 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 27 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -27 (*.f64 y x))) (neg.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 27) (*.f64 (sqrt.f64 27) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 27) (*.f64 y x)) (sqrt.f64 27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 27 (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) 27)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -27 (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 9 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 27 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 9 (*.f64 y x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 27 (*.f64 y x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y x) 1/27)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 27 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -27 (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 9 (*.f64 y x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 27 (*.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 27 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 3))))))"]],"rules":[["egg-rr",38]],"time":34.77294921875,"type":"rewrite"},{"count":[[62,38]],"inputs":[["(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))"]],"time":98.10400390625,"type":"simplify"},{"compiler":[[317,196]],"time":4.97509765625,"type":"eval"},{"alts":[["(*.f64 (*.f64 y x) 27)","done",0.2590700316206538],["(*.f64 (*.f64 27 y) x)","done",0.2109375],["(*.f64 (*.f64 x 27) y)","fresh",0.4921875],["(*.f64 3 (*.f64 9 (*.f64 y x)))","next",0.3066088011575378],["(*.f64 (*.f64 (*.f64 y x) (sqrt.f64 27)) (sqrt.f64 27))","fresh",0.401386279305326]],"compiler":[[7,5],[7,5],[7,5],[9,7],[11,9],[7,5],[9,7],[11,9]],"count":[[43,5]],"kept":[{"done":[1,1],"fresh":[3,2],"new":[38,1],"picked":[1,1]}],"min-error":[0.01171875],"time":6.89794921875,"type":"prune"},{"compiler":[[21,11]],"locations":[["(*.f64 9 (*.f64 y x))",0.21875,true],["(*.f64 3 (*.f64 9 (*.f64 y x)))",0.25,true]],"time":4.803955078125,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 9 (*.f64 y x))","x","-inf",0.5810546875],["(*.f64 9 (*.f64 y x))","x","inf",0.260009765625],["(*.f64 9 (*.f64 y x))","x","0",0.26708984375],["(*.f64 9 (*.f64 y x))","y","-inf",0.262939453125],["(*.f64 9 (*.f64 y x))","y","inf",0.232177734375],["(*.f64 9 (*.f64 y x))","y","0",0.2880859375],["(*.f64 3 (*.f64 9 (*.f64 y x)))","x","-inf",0.14794921875],["(*.f64 3 (*.f64 9 (*.f64 y x)))","x","inf",0.176025390625],["(*.f64 3 (*.f64 9 (*.f64 y x)))","x","0",0.14111328125],["(*.f64 3 (*.f64 9 (*.f64 y x)))","y","-inf",0.155029296875],["(*.f64 3 (*.f64 9 (*.f64 y x)))","y","inf",0.177978515625],["(*.f64 3 (*.f64 9 (*.f64 y x)))","y","0",0.175048828125]],"time":2.97900390625,"type":"series"},{"count":[[2,85]],"inputs":[["(*.f64 3 (*.f64 9 (*.f64 y x)))","(*.f64 9 (*.f64 y x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 27 (*.f64 y x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 9 y) 3) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 19683 (*.f64 y x))) (pow.f64 (*.f64 y x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 27 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 27 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 9 (*.f64 y x))) (*.f64 (pow.f64 (*.f64 9 (*.f64 y x)) 2/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 9 y) (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (*.f64 9 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 27 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 9 (*.f64 y x)) 2/3) 3) (cbrt.f64 (*.f64 9 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y x) 2/3) (cbrt.f64 (*.f64 19683 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 27 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 3) (*.f64 9 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 27 (*.f64 y x))) (pow.f64 (*.f64 27 (*.f64 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 2/3) (cbrt.f64 (*.f64 27 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (cbrt.f64 (*.f64 9 (*.f64 y x)))) (pow.f64 (*.f64 9 (*.f64 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 9 (*.f64 y x)) 2/3) (*.f64 3 (cbrt.f64 (*.f64 9 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -27 (*.f64 y x))) (neg.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 27 (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) 27)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 9 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 9 (*.f64 y x)) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 9) (*.f64 (*.f64 9 (*.f64 y x)) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 9) (*.f64 9 (*.f64 y x))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 9 (*.f64 y x)) (sqrt.f64 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 3) (*.f64 (*.f64 9 (*.f64 y x)) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -27 (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 9 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 9 (*.f64 y x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 27 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y x) 3) 9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 9 (*.f64 (*.f64 y x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 27 (*.f64 y x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) 3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y x) 1/27)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 27 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -27 (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 9 (*.f64 y x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 27 (*.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 27 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 9 (*.f64 y x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 9 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -9 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 9 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 9 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 9 y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 729 (*.f64 y x))) (pow.f64 (*.f64 y x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 9 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 9 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y x) 2/3) (cbrt.f64 (*.f64 729 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 9 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 9 (*.f64 y x))) (pow.f64 (*.f64 9 (*.f64 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 9 (*.f64 y x)) 2/3) (cbrt.f64 (*.f64 9 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y x)) (pow.f64 (*.f64 27 (*.f64 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y x) (cbrt.f64 9)) (cbrt.f64 81))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 81) (*.f64 (*.f64 y x) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 2/3) (cbrt.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -9 (*.f64 y x))) (neg.f64 (pow.f64 (*.f64 9 (*.f64 y x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 9) (*.f64 (cbrt.f64 81) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 81) (*.f64 y x)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -9 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -9 (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 9 (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) 9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 9 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 9 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y x) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 (*.f64 y x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 9 (*.f64 y x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y x) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 9 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -9 (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 9 (*.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 9 (*.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 9 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -9 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 9 (*.f64 y x)) 3))))))"]],"rules":[["egg-rr",38],["egg-rr",47]],"time":40.85888671875,"type":"rewrite"},{"count":[[109,85]],"inputs":[["(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))"]],"time":98.4921875,"type":"simplify"},{"compiler":[[803,511]],"time":11.864013671875,"type":"eval"},{"alts":[["(*.f64 (*.f64 27 y) x)","done",0.2109375],["(*.f64 y (*.f64 27 x))","fresh",0.4921875],["(*.f64 3 (*.f64 (*.f64 9 y) x))","next",0.29134750976844204],["(*.f64 (*.f64 y x) 27)","done",0.2590700316206538],["(*.f64 (*.f64 (*.f64 9 (*.f64 y x)) (cbrt.f64 3)) (cbrt.f64 9))","fresh",0.4929276367581884]],"compiler":[[7,5],[7,5],[9,7],[7,5],[13,11],[7,5],[9,7],[13,11]],"count":[[90,5]],"kept":[{"done":[2,2],"fresh":[2,0],"new":[85,3],"picked":[1,0]}],"min-error":[0],"time":16.935791015625,"type":"prune"},{"compiler":[[21,14]],"locations":[["(*.f64 (*.f64 9 y) x)",0.21875,true],["(*.f64 3 (*.f64 (*.f64 9 y) x))",0.25,true]],"time":4.858154296875,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (*.f64 9 y) x)","x","-inf",0.13916015625],["(*.f64 (*.f64 9 y) x)","x","inf",0.13916015625],["(*.f64 (*.f64 9 y) x)","x","0",0.156005859375],["(*.f64 (*.f64 9 y) x)","y","-inf",0.140869140625],["(*.f64 (*.f64 9 y) x)","y","inf",0.14501953125],["(*.f64 (*.f64 9 y) x)","y","0",0.1650390625],["(*.f64 3 (*.f64 (*.f64 9 y) x))","x","-inf",0.156982421875],["(*.f64 3 (*.f64 (*.f64 9 y) x))","x","inf",0.200927734375],["(*.f64 3 (*.f64 (*.f64 9 y) x))","x","0",0.141845703125],["(*.f64 3 (*.f64 (*.f64 9 y) x))","y","-inf",0.155029296875],["(*.f64 3 (*.f64 (*.f64 9 y) x))","y","inf",0.18798828125],["(*.f64 3 (*.f64 (*.f64 9 y) x))","y","0",0.1669921875]],"time":2.02001953125,"type":"series"},{"count":[[2,81]],"inputs":[["(*.f64 3 (*.f64 (*.f64 9 y) x))","(*.f64 (*.f64 9 y) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 27 (*.f64 y x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 27 (*.f64 y x))) (pow.f64 (*.f64 27 (*.f64 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 2/3) (cbrt.f64 (*.f64 27 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 27 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 27 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 x) (*.f64 9 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 27 y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 9 (*.f64 y x))) (*.f64 (pow.f64 (*.f64 9 (*.f64 y x)) 2/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 9 y) (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 27 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 9 (*.f64 y x)) 2/3) 3) (cbrt.f64 (*.f64 9 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (cbrt.f64 (*.f64 9 (*.f64 y x)))) (pow.f64 (*.f64 9 (*.f64 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 9 (*.f64 y x)) 2/3) (*.f64 3 (cbrt.f64 (*.f64 9 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -27 (*.f64 y x))) (neg.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 27 (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) 27)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 9 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 9) (*.f64 9 (*.f64 y x))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 9 (*.f64 y x)) (sqrt.f64 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 3) (*.f64 (*.f64 9 (*.f64 y x)) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 9 (*.f64 y x)) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 9) (*.f64 (*.f64 9 (*.f64 y x)) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -27 (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 9 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 9 (*.f64 y x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 27 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 9 (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 y x)) 9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 27 (*.f64 y x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (*.f64 y x)) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y x) 1/27)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 27 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -27 (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 9 (*.f64 y x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 27 (*.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 27 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 9 (*.f64 y x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 9 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -9 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 9 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 9 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 9 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 9) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 9 y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 9 y)) (*.f64 (pow.f64 (*.f64 9 y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 9 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 9 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 9 y) 2/3) x) (cbrt.f64 (*.f64 9 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 9 (*.f64 y x))) (pow.f64 (*.f64 9 (*.f64 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 9 (*.f64 y x)) 2/3) (cbrt.f64 (*.f64 9 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (*.f64 9 y))) (pow.f64 (*.f64 9 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 9 y) 2/3) (*.f64 x (cbrt.f64 (*.f64 9 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -9 (*.f64 y x))) (neg.f64 (pow.f64 (*.f64 9 (*.f64 y x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 9) (*.f64 (cbrt.f64 81) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 81) (*.f64 y x)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -9 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -9 (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 9 (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) 9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 9 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 9 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 y x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 9 (*.f64 y x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y x) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 9 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -9 (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (*.f64 y x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 9 (*.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 9 (*.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 9 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -9 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 9 (*.f64 y x)) 3))))))"]],"rules":[["egg-rr",38],["egg-rr",43]],"time":40.43603515625,"type":"rewrite"},{"count":[[129,81]],"inputs":[["(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))","(*.f64 9 (*.f64 y x))"]],"time":169.993896484375,"type":"simplify"},{"compiler":[[777,508]],"time":10.950927734375,"type":"eval"},{"alts":[["(*.f64 (*.f64 27 y) x)","done",0.2109375],["(*.f64 y (*.f64 27 x))","fresh",0.4921875],["(*.f64 3 (*.f64 (*.f64 9 y) x))","done",0.29134750976844204],["(*.f64 (*.f64 y x) 27)","done",0.2590700316206538],["(*.f64 (*.f64 (*.f64 9 (*.f64 y x)) (cbrt.f64 3)) (cbrt.f64 9))","fresh",0.4929276367581884]],"compiler":[[7,5],[7,5],[9,7],[7,5],[13,11]],"count":[[86,5]],"kept":[{"done":[2,2],"fresh":[2,2],"new":[81,0],"picked":[1,1]}],"min-error":[0],"time":15.712158203125,"type":"prune"},{"accuracy":[0.2109375],"baseline":[0.2109375],"branch":[["x",0.2109375,1],["y",0.2109375,1],["(*.f64 (*.f64 x 27) y)",0.2109375,1],["(*.f64 x 27)",0.2109375,1]],"compiler":[[3,2],[3,2],[7,5],[5,4],[63,41]],"count":[[9,1]],"inputs":[["(*.f64 y (*.f64 27 x))","(*.f64 3 (*.f64 (*.f64 9 y) x))","(*.f64 (*.f64 (*.f64 9 (*.f64 y x)) (cbrt.f64 3)) (cbrt.f64 9))","(*.f64 3 (*.f64 9 (*.f64 y x)))","(*.f64 3 (*.f64 9 (*.f64 y x)))","(*.f64 (*.f64 27 y) x)","(*.f64 (*.f64 (*.f64 y x) (sqrt.f64 27)) (sqrt.f64 27))","(*.f64 (*.f64 y x) 27)","(*.f64 (*.f64 x 27) y)"]],"link":["."],"name":["Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, F"],"oracle":[1.0599976562950721],"outputs":[["(*.f64 (*.f64 27 y) x)"]],"time":17.48681640625,"times":[["x",3.927001953125],["y",4.072998046875],["(*.f64 (*.f64 x 27) y)",3.76708984375],["(*.f64 x 27)",4.209228515625]],"type":"regimes"},{"compiler":[[7,5]],"inputs":[["(*.f64 (*.f64 27 y) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 27 y) x)","(*.f64 27 (*.f64 y x))"]],"stop":[["fuel",1]],"time":33.791015625,"type":"simplify"},{"time":0.01513671875,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":7.35791015625,"type":"end"}]
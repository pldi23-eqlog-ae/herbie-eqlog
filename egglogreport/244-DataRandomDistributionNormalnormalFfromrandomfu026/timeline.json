[{"compiler":[[9,6]],"method":["search"],"sampling":[[12,0.7297555757686496,0.042926798574626446,0.22731762565672398],[11,0.7258531395345926,0.054634107276797295,0.21951275318861008],[10,0.7102433945983648,0.08585359714925289,0.20390300825238228],[9,0.7024385221302509,0.10926821455359459,0.18829326331615448],[8,0.6712190322577953,0.17170719429850578,0.15707377344369888],[7,0.6556092873215675,0.21853642910718918,0.1258542835712433],[6,0.6243897974491119,0.31219489872455597,0.06341530382633209],[5,0.6243897974491119,0.37463387846946716,0.0009763240814208984],[4,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[3,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":11.9580078125,"type":"analyze"},{"outcomes":[["body",256,"invalid",8.6259765625,246],["body",256,"valid",283.6611328125,8256]],"time":300.2080078125,"type":"sample"},{"compiler":[[8,5]],"inputs":[["0","1"],["(exp.f64 (*.f64 (*.f64 x y) y))","(exp.f64 (*.f64 (*.f64 y x) x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(exp.f64 (*.f64 (*.f64 x y) y))","(exp.f64 (*.f64 (*.f64 y x) x))","(exp.f64 (*.f64 (*.f64 x y) x))"]],"symmetry":[[]],"time":73.52197265625,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(exp.f64 (*.f64 (*.f64 x y) y))"]],"method":["egg-herbie"],"outputs":[["(exp.f64 (*.f64 (*.f64 x y) y))"]],"time":32.64404296875,"type":"simplify"},{"compiler":[[8,5]],"time":0.194091796875,"type":"eval"},{"alts":[["(exp.f64 (*.f64 (*.f64 x y) y))","next",0]],"compiler":[[8,5],[8,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0],"time":0.6748046875,"type":"prune"},{"compiler":[[18,5]],"locations":[["(*.f64 (*.f64 x y) y)",0.1015625,true]],"time":4.924072265625,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (*.f64 x y) y)","y","-inf",0.201904296875],["(*.f64 (*.f64 x y) y)","y","inf",0.510009765625],["(*.f64 (*.f64 x y) y)","y","0",0.427978515625],["(*.f64 (*.f64 x y) y)","x","-inf",0.317138671875],["(*.f64 (*.f64 x y) y)","x","inf",0.390869140625],["(*.f64 (*.f64 x y) y)","x","0",0.64208984375]],"time":2.566162109375,"type":"series"},{"count":[[1,32]],"inputs":[["(*.f64 (*.f64 x y) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x y) y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (*.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (*.f64 (pow.f64 (*.f64 x y) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (pow.f64 (*.f64 y (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (*.f64 x y))) (pow.f64 (*.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x y) 2/3) y) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 x y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x y) 2/3) (*.f64 y (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) (pow.f64 (*.f64 (*.f64 x y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 x y) y) 2/3) (cbrt.f64 (*.f64 (*.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 x y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) y))) (neg.f64 (pow.f64 (*.f64 (*.f64 x y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 x y) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 x y) y) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 x y) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 x y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 x y) y) 3))))))"]],"rules":[["egg-rr",32]],"time":33.90185546875,"type":"rewrite"},{"count":[[56,33]],"inputs":[["(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)"]],"time":102.77099609375,"type":"simplify"},{"compiler":[[325,131]],"time":4.055908203125,"type":"eval"},{"alts":[["(exp.f64 (*.f64 (*.f64 x y) y))","done",0]],"compiler":[[8,5],[8,5]],"count":[[34,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[33,0],"picked":[1,1]}],"min-error":[0],"time":7.271240234375,"type":"prune"},{"compiler":[[8,5]],"inputs":[["(exp.f64 (*.f64 (*.f64 x y) y))"]],"method":["egg-herbie"],"outputs":[["(exp.f64 (*.f64 (*.f64 x y) y))"]],"stop":[["done",1]],"time":36.871826171875,"type":"simplify"},{"time":0.007080078125,"type":"soundness"},{"compiler":[[8,5]],"remove-preprocessing":[[]],"time":10.376953125,"type":"end"}]
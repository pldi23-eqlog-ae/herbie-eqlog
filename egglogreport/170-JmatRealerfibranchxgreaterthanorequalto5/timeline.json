[{"compiler":[[107,71]],"method":["search"],"sampling":[[12,0.0013440847396850586,0.00024437904357910156,0.9984115362167358],[11,0.0012218952178955078,0.0004887580871582031,0.9982893466949463],[10,0.0009775161743164063,0.0009775161743164063,0.9980449676513672],[9,0.0009775161743164063,0.0019550323486328125,0.9970674514770508],[8,0.0,0.003910064697265625,0.9960899353027344],[7,0.0,0.00782012939453125,0.9921798706054688],[6,0.0,0.0156402587890625,0.9843597412109375],[5,0.0,0.031280517578125,0.968719482421875],[4,0.0,0.06256103515625,0.93743896484375],[3,0.0,0.1251220703125,0.8748779296875],[2,0.0,0.250244140625,0.749755859375],[1,0.0,0.250244140625,0.749755859375],[0,0.0,0.250244140625,0.749755859375]],"time":6.908935546875,"type":"analyze"},{"outcomes":[["body",256,"invalid",216.429931640625,1281],["body",256,"valid",1416.93603515625,8256]],"time":1641.99609375,"type":"sample"},{"compiler":[[104,69]],"inputs":[["0"],["(*.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (exp.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))) (+.f64 (+.f64 (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 (/.f64 1 2) (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 3 4) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 15 8) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (exp.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))) (+.f64 (+.f64 (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 (/.f64 1 2) (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 3 4) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 15 8) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))))","(*.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))"]],"symmetry":[[]],"time":67.501953125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (exp.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))) (+.f64 (+.f64 (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 (/.f64 1 2) (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 3 4) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 15 8) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (exp.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))) (+.f64 (+.f64 (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 (/.f64 1 2) (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 3 4) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 15 8) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))))","(*.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))"]],"time":33.6650390625,"type":"simplify"},{"compiler":[[137,90]],"time":2.598876953125,"type":"eval"},{"alts":[["(*.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (exp.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))) (+.f64 (+.f64 (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 (/.f64 1 2) (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 3 4) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 15 8) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))))","fresh",2.7453276732938745],["(*.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","next",2.693489782371457]],"compiler":[[104,69],[34,25],[104,69],[34,25]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[2.565979456796767],"time":3.1220703125,"type":"prune"},{"compiler":[[146,88]],"locations":[["(*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))",0.3984375,true],["(sqrt.f64 (PI.f64))",1.0,true],["(pow.f64 (/.f64 1 (fabs.f64 x)) 5)",1.064382140736421,true],["(exp.f64 (*.f64 x x))",2.42318287897419,true]],"time":31.632080078125,"type":"localize"},{"count":[[4,36]],"series":[["(*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))","x","-inf",1.44677734375],["(*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))","x","inf",0.751220703125],["(*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))","x","0",0.9169921875],["(pow.f64 (/.f64 1 (fabs.f64 x)) 5)","x","-inf",1.25],["(pow.f64 (/.f64 1 (fabs.f64 x)) 5)","x","inf",1.044921875],["(pow.f64 (/.f64 1 (fabs.f64 x)) 5)","x","0",0.87109375],["(exp.f64 (*.f64 x x))","x","-inf",0.178955078125],["(exp.f64 (*.f64 x x))","x","inf",0.193115234375],["(exp.f64 (*.f64 x x))","x","0",0.363037109375]],"time":7.15283203125,"type":"series"},{"count":[[4,164]],"inputs":[["(exp.f64 (*.f64 x x))","(pow.f64 (/.f64 1 (fabs.f64 x)) 5)","(sqrt.f64 (PI.f64))","(*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (*.f64 x x)) 0) (exp.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 x x)) (*.f64 (exp.f64 (*.f64 x x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (*.f64 x x)) 1/2) (*.f64 (exp.f64 (*.f64 x x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (exp.f64 (*.f64 x x))) (exp.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 x x)) (*.f64 0 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (exp.f64 (*.f64 x x))) (*.f64 1/2 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 2 x))) (cbrt.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 x x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (neg.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (pow.f64 x 4))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (exp.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (exp.f64 (*.f64 x x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 0 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 x x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 x x) 3) 1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 0) (pow.f64 (/.f64 1 (fabs.f64 x)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 1/2) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) (pow.f64 (/.f64 1 (fabs.f64 x)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 0 (pow.f64 (/.f64 1 (fabs.f64 x)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) (*.f64 1/2 (pow.f64 (/.f64 1 (fabs.f64 x)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (/.f64 1 (fabs.f64 x)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) (*.f64 2 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) (*.f64 2 5))) (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (fabs.f64 x)) 5)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (PI.f64)) 0) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (PI.f64)) (*.f64 (sqrt.f64 (PI.f64)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (PI.f64)) 1/2) (*.f64 (sqrt.f64 (PI.f64)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (PI.f64)) (*.f64 0 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (PI.f64))) (*.f64 1/2 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64)))) (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (PI.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64)))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64)))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (PI.f64))) -1) (*.f64 (sqrt.f64 (sqrt.f64 (PI.f64))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (PI.f64))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (PI.f64))))) (*.f64 (cbrt.f64 (sqrt.f64 (PI.f64))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64))))) (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (PI.f64))) (fabs.f64 (cbrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (PI.f64)))) (fabs.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (PI.f64)) (pow.f64 (sqrt.f64 (PI.f64)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (PI.f64)) 0) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (PI.f64))) (sqrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (PI.f64))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (PI.f64)) (cbrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (PI.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (PI.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (PI.f64) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (PI.f64) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (PI.f64))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (PI.f64) (PI.f64)) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (PI.f64))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (PI.f64)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (PI.f64)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (PI.f64) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (PI.f64) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (PI.f64))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (PI.f64))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (PI.f64) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sqrt.f64 (PI.f64)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (PI.f64) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (PI.f64))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4)) 0) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4)) 1/2) (*.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4))) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4)) (*.f64 0 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) (*.f64 2 5))) (fma.f64 15/8 (pow.f64 x -2) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 15/8 (pow.f64 x -2) 3/4)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 15/8 (pow.f64 x -2) 3/4) 2)) (pow.f64 (/.f64 1 (fabs.f64 x)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 15/8 (pow.f64 x -2) 3/4) (pow.f64 (/.f64 1 (fabs.f64 x)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4))) (cbrt.f64 (pow.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4)) 2)) (cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (cbrt.f64 (fma.f64 15/8 (pow.f64 x -2) 3/4))) (cbrt.f64 (pow.f64 (fma.f64 15/8 (pow.f64 x -2) 3/4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 15/8 (pow.f64 x -2) 3/4) (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5))) (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) (*.f64 2 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) (*.f64 2 5))) (+.f64 (*.f64 (*.f64 (pow.f64 x -2) 15/8) (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5))) (*.f64 3/4 (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) (*.f64 2 5))) (+.f64 (*.f64 3/4 (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5))) (*.f64 (*.f64 (pow.f64 x -2) 15/8) (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 3375/512 (pow.f64 (pow.f64 x -2) 3) 27/64) (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) (/.f64 1 (fma.f64 (*.f64 (pow.f64 x -2) 15/8) (fma.f64 (pow.f64 x -2) 15/8 -3/4) 9/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 3375/512 (pow.f64 (pow.f64 x -2) 3) 27/64) (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) (cbrt.f64 (fma.f64 (*.f64 (pow.f64 x -2) 15/8) (fma.f64 (pow.f64 x -2) 15/8 -3/4) 9/16))) (pow.f64 (cbrt.f64 (fma.f64 (*.f64 (pow.f64 x -2) 15/8) (fma.f64 (pow.f64 x -2) 15/8 -3/4) 9/16)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 3375/512 (pow.f64 (pow.f64 x -2) 3) 27/64) (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) 1) (*.f64 (fma.f64 (*.f64 (pow.f64 x -2) 15/8) (fma.f64 (pow.f64 x -2) 15/8 -3/4) 9/16) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 3375/512 (pow.f64 (pow.f64 x -2) 3) 27/64) (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) (fma.f64 (*.f64 (pow.f64 x -2) 15/8) (fma.f64 (pow.f64 x -2) 15/8 -3/4) 9/16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (neg.f64 (fma.f64 3375/512 (pow.f64 (pow.f64 x -2) 3) 27/64))) (neg.f64 (fma.f64 (*.f64 (pow.f64 x -2) 15/8) (fma.f64 (pow.f64 x -2) 15/8 -3/4) 9/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (fma.f64 3375/512 (pow.f64 (pow.f64 x -2) 3) 27/64) (pow.f64 (/.f64 1 (fabs.f64 x)) 5))) (fma.f64 (*.f64 (pow.f64 x -2) 15/8) (fma.f64 (pow.f64 x -2) 15/8 -3/4) 9/16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 3375/512 (pow.f64 (pow.f64 x -2) 3) 27/64) (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) 1) (fma.f64 (*.f64 (pow.f64 x -2) 15/8) (fma.f64 (pow.f64 x -2) 15/8 -3/4) 9/16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 3375/512 (pow.f64 (pow.f64 x -2) 3) 27/64)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 15/8 (pow.f64 x -2) 3/4) 2)) (pow.f64 (/.f64 1 (fabs.f64 x)) 5))) (cbrt.f64 (fma.f64 (*.f64 (pow.f64 x -2) 15/8) (fma.f64 (pow.f64 x -2) 15/8 -3/4) 9/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (fma.f64 3375/512 (pow.f64 (pow.f64 x -2) 3) 27/64)) (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) (neg.f64 (fma.f64 (*.f64 (pow.f64 x -2) 15/8) (fma.f64 (pow.f64 x -2) 15/8 -3/4) 9/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 3375/512 (pow.f64 (pow.f64 x -2) 3) 27/64) (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) 1) (fma.f64 (*.f64 (pow.f64 x -2) 15/8) (fma.f64 (pow.f64 x -2) 15/8 -3/4) 9/16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fma.f64 3375/512 (pow.f64 (pow.f64 x -2) 3) 27/64) (pow.f64 (/.f64 1 (fabs.f64 x)) 5))) (neg.f64 (fma.f64 (*.f64 (pow.f64 x -2) 15/8) (fma.f64 (pow.f64 x -2) 15/8 -3/4) 9/16)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (fma.f64 15/8 (pow.f64 x -2) 3/4)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3/4 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 3/4) (*.f64 (sqrt.f64 3/4) (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (cbrt.f64 3/4)) (cbrt.f64 9/16) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (sqrt.f64 3/4)) (sqrt.f64 3/4) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3/4 (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5))) (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) (*.f64 2 5))) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) (*.f64 2 5))) 3/4) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 3/4) (*.f64 (cbrt.f64 9/16) (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4)) (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4)) 2) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) (*.f64 2 5))) (*.f64 (pow.f64 x -2) 15/8)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -2) (*.f64 15/8 (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8))) (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8))) 2) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (pow.f64 x -2) 15/8) (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5))) (cbrt.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) (*.f64 2 5))) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x -2) 15/8) (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 15/8 (*.f64 (pow.f64 x -2) (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (cbrt.f64 (*.f64 (pow.f64 x -2) 15/8))) (cbrt.f64 (*.f64 225/64 (pow.f64 x (*.f64 2 -2)))) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 15/8) (pow.f64 x -2) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 x -2) 15/8)) (*.f64 (cbrt.f64 (*.f64 225/64 (pow.f64 x (*.f64 2 -2)))) (pow.f64 (/.f64 1 (fabs.f64 x)) 5)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (pow.f64 x -2)) 15/8 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) 3/4) 1 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8)))))))"]],"rules":[["egg-rr",65],["egg-rr",45],["egg-rr",22],["egg-rr",32]],"time":40.110107421875,"type":"rewrite"},{"count":[[200,180]],"inputs":[["1","(+.f64 1 (pow.f64 x 2))","(+.f64 1 (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 x 6)) (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4)))))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(/.f64 15/8 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))","(+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))","(+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))","(+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))","(/.f64 3/4 (pow.f64 (fabs.f64 x) 5))","(+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))","(+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))","(+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))","(/.f64 3/4 (pow.f64 (fabs.f64 x) 5))","(+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))","(+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))","(+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (pow.f64 x 2))","(fma.f64 x x 1)","(+.f64 1 (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4))))","(+.f64 1 (fma.f64 1/2 (pow.f64 x 4) (*.f64 x x)))","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 x 6)) (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 1/6 (pow.f64 x 6) (fma.f64 1/2 (pow.f64 x 4) (*.f64 x x))))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(pow.f64 (fabs.f64 x) -5)","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(pow.f64 (fabs.f64 x) -5)","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(pow.f64 (fabs.f64 x) -5)","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(pow.f64 (fabs.f64 x) -5)","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(pow.f64 (fabs.f64 x) -5)","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(pow.f64 (fabs.f64 x) -5)","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(pow.f64 (fabs.f64 x) -5)","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(pow.f64 (fabs.f64 x) -5)","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(pow.f64 (fabs.f64 x) -5)","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(pow.f64 (fabs.f64 x) -5)","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(pow.f64 (fabs.f64 x) -5)","(/.f64 1 (pow.f64 (fabs.f64 x) 5))","(pow.f64 (fabs.f64 x) -5)","(/.f64 15/8 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))","(*.f64 (/.f64 15/8 (*.f64 x x)) (pow.f64 (fabs.f64 x) -5))","(+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))","(*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 (/.f64 15/8 (*.f64 x x)) 3/4))","(+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))","(*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 (/.f64 15/8 (*.f64 x x)) 3/4))","(+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))","(*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 (/.f64 15/8 (*.f64 x x)) 3/4))","(/.f64 3/4 (pow.f64 (fabs.f64 x) 5))","(*.f64 3/4 (pow.f64 (fabs.f64 x) -5))","(+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))","(*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 (/.f64 15/8 (*.f64 x x)) 3/4))","(+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))","(*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 (/.f64 15/8 (*.f64 x x)) 3/4))","(+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))","(*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 (/.f64 15/8 (*.f64 x x)) 3/4))","(/.f64 3/4 (pow.f64 (fabs.f64 x) 5))","(*.f64 3/4 (pow.f64 (fabs.f64 x) -5))","(+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))","(*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 (/.f64 15/8 (*.f64 x x)) 3/4))","(+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))","(*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 (/.f64 15/8 (*.f64 x x)) 3/4))","(+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))","(*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 (/.f64 15/8 (*.f64 x x)) 3/4))"]],"time":154.2890625,"type":"simplify"},{"compiler":[[7136,4283]],"time":68.827880859375,"type":"eval"},{"alts":[["(*.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (fma.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (cbrt.f64 3/4)) (cbrt.f64 9/16) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.669024804223669],["(*.f64 (/.f64 (pow.f64 (exp.f64 -1) (neg.f64 (*.f64 x x))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.789769024041427],["(*.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.6697657453690664],["(*.f64 (/.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 x x) 3)) 1/3) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",8.938586214048815],["(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","next",1.335273230306386],["(*.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",2.609467223760805],["(*.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (exp.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))) (+.f64 (+.f64 (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 (/.f64 1 2) (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 3 4) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 15 8) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))))","fresh",2.7453276732938745],["(*.f64 (/.f64 (pow.f64 (exp.f64 (neg.f64 x)) (neg.f64 x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",1.3522831821676742],["(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",3.146789954965347],["(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 x 4))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.9842184239479645],["(*.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 (/.f64 15/8 (*.f64 x x)) 3/4))))","fresh",2.6273772335292467],["(*.f64 (/.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 3))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",8.753896238957216],["(*.f64 (/.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 2 x)))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",5.915435137416098],["(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 (pow.f64 x 4))) (cbrt.f64 (*.f64 x x))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.9136894510040343],["(*.f64 (/.f64 (pow.f64 (E.f64) (*.f64 x x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.8718802450535956]],"compiler":[[44,33],[37,28],[36,27],[38,29],[34,26],[41,30],[104,69],[36,27],[40,29],[40,30],[32,21],[37,28],[43,32],[40,30],[35,26],[44,33],[37,28],[36,27],[38,29],[34,26],[41,30],[104,69],[36,27],[40,29],[40,30],[32,21],[37,28],[43,32],[40,30],[35,26]],"count":[[182,15]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[180,14],"picked":[1,0]}],"min-error":[0.6130633919616869],"time":41.93505859375,"type":"prune"},{"compiler":[[148,89]],"locations":[["(*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))",0.3984375,false],["(sqrt.f64 (PI.f64))",1.0,false],["(pow.f64 (exp.f64 x) x)",1.0051940709283078,true],["(pow.f64 (/.f64 1 (fabs.f64 x)) 5)",1.064382140736421,false]],"time":35.52001953125,"type":"localize"},{"count":[[1,12]],"series":[["(pow.f64 (exp.f64 x) x)","x","-inf",0.205078125],["(pow.f64 (exp.f64 x) x)","x","inf",0.202880859375],["(pow.f64 (exp.f64 x) x)","x","0",0.509033203125]],"time":0.9619140625,"type":"series"},{"count":[[1,40]],"inputs":[["(pow.f64 (exp.f64 x) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 x x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (exp.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3) (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x))))) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) 4) (cbrt.f64 (exp.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) (pow.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (pow.f64 (exp.f64 (*.f64 x x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3) (cbrt.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (exp.f64 (*.f64 x x)))) (neg.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 (*.f64 x x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3)) (cbrt.f64 (neg.f64 (exp.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (exp.f64 (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (exp.f64 (neg.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (exp.f64 (*.f64 (*.f64 x x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 5))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 x 2/3)) (pow.f64 x 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (pow.f64 x 4/3) (cbrt.f64 (pow.f64 x 2/3)))) (cbrt.f64 (pow.f64 x 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (pow.f64 x 2/3))) (*.f64 (cbrt.f64 (pow.f64 x 4/3)) (pow.f64 x 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (cbrt.f64 x))) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (pow.f64 (cbrt.f64 x) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 x x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 x 4/3)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 x) 5)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (neg.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 x x) -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (/.f64 (*.f64 (*.f64 x x) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (/.f64 (*.f64 (*.f64 x x) 3) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x x))))))"]],"rules":[["egg-rr",40]],"time":34.10595703125,"type":"rewrite"},{"count":[[52,48]],"inputs":[["1","(+.f64 1 (pow.f64 x 2))","(+.f64 1 (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 x 6)) (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4)))))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (pow.f64 x 2))","(fma.f64 x x 1)","(+.f64 1 (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4))))","(+.f64 1 (fma.f64 (pow.f64 x 4) 1/2 (*.f64 x x)))","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 x 6)) (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 1/6 (pow.f64 x 6) (fma.f64 (pow.f64 x 4) 1/2 (*.f64 x x))))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))"]],"time":57.30712890625,"type":"simplify"},{"compiler":[[7477,4496]],"time":71.73681640625,"type":"eval"},{"alts":[["(*.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (exp.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))) (+.f64 (+.f64 (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 (/.f64 1 2) (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 3 4) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 15 8) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))))","fresh",2.7453276732938745],["(*.f64 (/.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 x x) 3)) 1/3) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",8.938586214048815],["(*.f64 (/.f64 (pow.f64 (exp.f64 -1) (neg.f64 (*.f64 x x))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.789769024041427],["(*.f64 (/.f64 (pow.f64 (exp.f64 (neg.f64 x)) (neg.f64 x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",1.3522831821676742],["(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 (cbrt.f64 x))) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (pow.f64 (cbrt.f64 x) 5))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",4.314088711048247],["(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",3.146789954965347],["(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 (pow.f64 x 2/3))) (*.f64 (cbrt.f64 (pow.f64 x 4/3)) (pow.f64 x 4/3))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",4.075181445815645],["(*.f64 (/.f64 (*.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) 4)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.8776822814277208],["(*.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (fma.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (cbrt.f64 3/4)) (cbrt.f64 9/16) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.669024804223669],["(*.f64 (/.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (pow.f64 (exp.f64 (*.f64 x x)) 2/3)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.809769624962093],["(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 x 4))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.9842184239479645],["(*.f64 (/.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 2 x)))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",5.915435137416098],["(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",1.254865645041478],["(*.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.6697657453690664],["(*.f64 (/.f64 (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) (pow.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3) 4/3)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",3.4775360199928613],["(*.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) 4) (cbrt.f64 (exp.f64 (*.f64 x x))))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.8800311531163567],["(*.f64 (/.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 3))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",8.753896238957216],["(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","next",1.2235368533166402],["(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 (pow.f64 x 4))) (cbrt.f64 (*.f64 x x))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.9136894510040343],["(*.f64 (/.f64 (pow.f64 (E.f64) (*.f64 x x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.8718802450535956]],"compiler":[[104,69],[38,29],[37,28],[36,27],[44,34],[40,29],[44,35],[52,34],[44,33],[42,29],[40,30],[43,32],[36,28],[36,27],[45,32],[52,34],[37,28],[41,31],[40,30],[35,26],[104,69],[38,29],[37,28],[36,27],[44,34],[40,29],[44,35],[52,34],[44,33],[42,29],[40,30],[43,32],[36,28],[36,27],[45,32],[52,34],[37,28],[41,31],[40,30],[35,26]],"count":[[203,20]],"kept":[{"done":[0,0],"fresh":[14,10],"new":[188,10],"picked":[1,0]}],"min-error":[0.5121687475674839],"time":55.946044921875,"type":"prune"},{"compiler":[[195,121]],"locations":[["(*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2))",0.34212875976844204,true],["(/.f64 (pow.f64 (exp.f64 x) x) (sqrt.f64 (PI.f64)))",0.34765625,true],["(sqrt.f64 (PI.f64))",1.0,false],["(pow.f64 (exp.f64 x) x)",1.0051940709283078,false]],"time":49.194091796875,"type":"localize"},{"count":[[2,12]],"series":[["(*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2))","x","-inf",0.52490234375],["(*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2))","x","inf",0.4951171875],["(*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2))","x","0",0.483154296875],["(/.f64 (pow.f64 (exp.f64 x) x) (sqrt.f64 (PI.f64)))","x","-inf",0.25],["(/.f64 (pow.f64 (exp.f64 x) x) (sqrt.f64 (PI.f64)))","x","inf",0.536865234375],["(/.f64 (pow.f64 (exp.f64 x) x) (sqrt.f64 (PI.f64)))","x","0",0.47509765625]],"time":2.85205078125,"type":"series"},{"count":[[2,95]],"inputs":[["(/.f64 (pow.f64 (exp.f64 x) x) (sqrt.f64 (PI.f64)))","(*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) 1/2) (*.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) 0) (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) (*.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))) (*.f64 1/2 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))) (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) (*.f64 0 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (sqrt.f64 (PI.f64)))) (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))) (cbrt.f64 (/.f64 (pow.f64 (exp.f64 x) (+.f64 x x)) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (exp.f64 x) (+.f64 x x)) (PI.f64))) (cbrt.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (*.f64 x x))) (neg.f64 (pow.f64 (PI.f64) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (sqrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 x x))) (sqrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (/.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 x x))) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 x x)) (pow.f64 (PI.f64) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (PI.f64) -1/2) (exp.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (PI.f64)) -1/2) (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/2)) (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (PI.f64) -1/2)) (neg.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 x x))) (sqrt.f64 (PI.f64))) (cbrt.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (PI.f64))) (cbrt.f64 (pow.f64 (PI.f64) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 x x))) (sqrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (sqrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (sqrt.f64 (PI.f64)))) (pow.f64 (sqrt.f64 (PI.f64)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (sqrt.f64 (PI.f64)))) (cbrt.f64 (/.f64 1 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (exp.f64 (*.f64 x x))) (sqrt.f64 (sqrt.f64 (PI.f64)))) (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (sqrt.f64 (PI.f64)))) (pow.f64 (PI.f64) 1/8)) (pow.f64 (PI.f64) 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (sqrt.f64 (PI.f64))))) (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (exp.f64 (*.f64 x x))) (neg.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (sqrt.f64 (PI.f64)))) (sqrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (sqrt.f64 (PI.f64)))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))) (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 x x)))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/2)) (exp.f64 (*.f64 x x))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (sqrt.f64 (sqrt.f64 (PI.f64)))) (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 x x)))) (sqrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (exp.f64 x) (+.f64 x x)) (PI.f64))) (cbrt.f64 (neg.f64 (exp.f64 (*.f64 x x))))) (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (exp.f64 x) (+.f64 x x)) (PI.f64))) (cbrt.f64 (exp.f64 (*.f64 x x)))) (cbrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sqrt.f64 (PI.f64)) -1/2) (exp.f64 (*.f64 x x))) (sqrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (/.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 x x))) (sqrt.f64 (sqrt.f64 (PI.f64))))) (sqrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (PI.f64))) (cbrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (exp.f64 (*.f64 x x)))) (cbrt.f64 (/.f64 (pow.f64 (exp.f64 x) (+.f64 x x)) (PI.f64)))) (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (cbrt.f64 (/.f64 (pow.f64 (exp.f64 x) (+.f64 x x)) (PI.f64)))) (cbrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (sqrt.f64 (PI.f64)))) 1) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (sqrt.f64 (PI.f64)))) 1) (sqrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 (*.f64 x x)) -1) (neg.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 (*.f64 x x)) (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64))))) (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (exp.f64 (*.f64 x x))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (neg.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (sqrt.f64 (PI.f64)))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (PI.f64))))) (cbrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (sqrt.f64 (PI.f64)))) 1) (sqrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (sqrt.f64 (PI.f64)))) 1) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (sqrt.f64 (PI.f64)))) (cbrt.f64 (cbrt.f64 (PI.f64)))) (cbrt.f64 (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (sqrt.f64 (PI.f64))))) (neg.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x) 1/2) (*.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x) 0) (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x) (*.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x)) (*.f64 1/2 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x)) (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x) (*.f64 0 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fabs.f64 x) 5)) (*.f64 (cbrt.f64 (pow.f64 (fabs.f64 x) (*.f64 2 5))) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (cbrt.f64 (pow.f64 (fabs.f64 x) 5))) (cbrt.f64 (pow.f64 (fabs.f64 x) (*.f64 2 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (pow.f64 (fabs.f64 x) 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fabs.f64 x) (*.f64 2 5))) (*.f64 (*.f64 x x) (cbrt.f64 (pow.f64 (fabs.f64 x) 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fabs.f64 x) (*.f64 2 5))) (*.f64 x x)) (cbrt.f64 (pow.f64 (fabs.f64 x) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x)) (cbrt.f64 (*.f64 (pow.f64 x 4) (pow.f64 (fabs.f64 x) (*.f64 2 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) (pow.f64 (fabs.f64 x) (*.f64 2 5)))) (cbrt.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fabs.f64 x) 5) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (pow.f64 (fabs.f64 x) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 (pow.f64 x 4)) (pow.f64 (fabs.f64 x) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 x 4)) (pow.f64 (fabs.f64 x) 5)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) (cbrt.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 4)) (*.f64 (pow.f64 (fabs.f64 x) 5) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 6) (pow.f64 (pow.f64 (fabs.f64 x) 5) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 6) (pow.f64 (pow.f64 (fabs.f64 x) 5) 3)))))))"]],"rules":[["egg-rr",32],["egg-rr",63]],"time":27.1689453125,"type":"rewrite"},{"count":[[107,104]],"inputs":[["(sqrt.f64 (/.f64 1 (PI.f64)))","(+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 x 4) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 x 4) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (pow.f64 x 2)) (+.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (*.f64 1/6 (*.f64 (pow.f64 x 6) (sqrt.f64 (/.f64 1 (PI.f64))))))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (/.f64 1 (PI.f64)))","(+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 1 (*.f64 x x)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 x 4) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (+.f64 1 (*.f64 x x)) (*.f64 1/2 (pow.f64 x 4))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 x 4) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (pow.f64 x 2)) (+.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (*.f64 1/6 (*.f64 (pow.f64 x 6) (sqrt.f64 (/.f64 1 (PI.f64))))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (+.f64 (*.f64 x x) (*.f64 1/2 (pow.f64 x 4))) (+.f64 (*.f64 1/6 (pow.f64 x 6)) 1)))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (/.f64 1 (PI.f64))))"]],"time":60.760986328125,"type":"simplify"},{"compiler":[[9041,5369]],"time":84.0859375,"type":"eval"},{"alts":[["(*.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (exp.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))) (+.f64 (+.f64 (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 (/.f64 1 2) (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 3 4) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 15 8) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))))","fresh",2.7453276732938745],["(*.f64 (/.f64 (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) (pow.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3) 4/3)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",3.3823884734659777],["(*.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3) (cbrt.f64 (exp.f64 (*.f64 x x)))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",2.7289895468145557],["(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",3.146789954965347],["(*.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (fma.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (cbrt.f64 3/4)) (cbrt.f64 9/16) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.669024804223669],["(*.f64 (/.f64 (*.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) 4)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",2.828363513907336],["(*.f64 (*.f64 (/.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (sqrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 x x))) (sqrt.f64 (sqrt.f64 (PI.f64))))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",5.78630390249761],["(*.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.6697657453690664],["(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 (cbrt.f64 x))) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (pow.f64 (cbrt.f64 x) 5))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",4.287889928023977],["(*.f64 (/.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (cbrt.f64 (/.f64 (pow.f64 (exp.f64 x) (+.f64 x x)) (PI.f64)))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",5.777717341426817],["(*.f64 (/.f64 (/.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (sqrt.f64 (PI.f64)))) (pow.f64 (PI.f64) 1/8)) (pow.f64 (PI.f64) 1/8)) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",2.6189682445563145],["(*.f64 (/.f64 (pow.f64 (exp.f64 -1) (neg.f64 (*.f64 x x))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",2.688863933810121],["(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (pow.f64 (cbrt.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x)) 3))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",1.2570718630850821],["(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 x 4))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.9842184239479645],["(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","next",1.1799767657364042],["(*.f64 (/.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 3))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",8.670971165947465],["(*.f64 (/.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 x x) 3)) 1/3) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",8.835396114049068],["(*.f64 (*.f64 (cbrt.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))) (cbrt.f64 (/.f64 (pow.f64 (exp.f64 x) (+.f64 x x)) (PI.f64)))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",5.825271859197525],["(*.f64 (pow.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) 3) 1/3) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",8.601304340323624],["(*.f64 (/.f64 (pow.f64 (exp.f64 (neg.f64 x)) (neg.f64 x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",1.247835550547273],["(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 (pow.f64 x 4))) (cbrt.f64 (*.f64 x x))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.9136894510040343],["(*.f64 (/.f64 (pow.f64 (E.f64) (*.f64 x x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.8718802450535956]],"compiler":[[104,69],[52,37],[49,34],[40,29],[44,33],[59,39],[55,38],[36,27],[51,39],[53,38],[50,37],[44,33],[44,33],[40,30],[43,33],[44,33],[45,34],[52,37],[45,34],[43,32],[40,30],[35,26],[104,69],[52,37],[49,34],[40,29],[44,33],[59,39],[55,38],[36,27],[51,39],[53,38],[50,37],[44,33],[44,33],[40,30],[43,33],[44,33],[45,34],[52,37],[45,34],[43,32],[40,30],[35,26]],"count":[[217,22]],"kept":[{"done":[0,0],"fresh":[19,7],"new":[197,15],"picked":[1,0]}],"min-error":[0.4685362280305998],"time":61.781982421875,"type":"prune"},{"compiler":[[205,133]],"locations":[["(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))",0.33822250976844204,true],["(*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2))",0.34212875976844204,false],["(/.f64 (pow.f64 (exp.f64 x) x) (cbrt.f64 (pow.f64 (PI.f64) 3/2)))",0.34765625,true],["(pow.f64 (exp.f64 x) x)",1.0051940709283078,false]],"time":58.30517578125,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","x","-inf",2.844970703125],["(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","x","inf",1.356201171875],["(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","x","0",1.18994140625],["(/.f64 (pow.f64 (exp.f64 x) x) (cbrt.f64 (pow.f64 (PI.f64) 3/2)))","x","-inf",0.168212890625],["(/.f64 (pow.f64 (exp.f64 x) x) (cbrt.f64 (pow.f64 (PI.f64) 3/2)))","x","inf",0.191162109375],["(/.f64 (pow.f64 (exp.f64 x) x) (cbrt.f64 (pow.f64 (PI.f64) 3/2)))","x","0",0.2939453125]],"time":6.203857421875,"type":"series"},{"count":[[2,97]],"inputs":[["(/.f64 (pow.f64 (exp.f64 x) x) (cbrt.f64 (pow.f64 (PI.f64) 3/2)))","(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) 0) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (*.f64 0 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (neg.f64 (pow.f64 (PI.f64) 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (cbrt.f64 (neg.f64 (pow.f64 (PI.f64) 3/2)))) (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (neg.f64 (pow.f64 (PI.f64) 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) (/.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3) (cbrt.f64 (pow.f64 (pow.f64 (PI.f64) 3/2) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (*.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3) (cbrt.f64 (pow.f64 (PI.f64) -3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) (pow.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) 2/3) (cbrt.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (PI.f64) -3/2)) (exp.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (pow.f64 (PI.f64) 3/2) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (neg.f64 (pow.f64 (PI.f64) 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (cbrt.f64 (pow.f64 (PI.f64) 3/2)))) (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (PI.f64) 3/2))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (*.f64 x x))) (neg.f64 (cbrt.f64 (pow.f64 (PI.f64) -3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (cbrt.f64 (pow.f64 (PI.f64) 3/2)))) (cbrt.f64 (pow.f64 (pow.f64 (PI.f64) 3/2) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (cbrt.f64 (pow.f64 (PI.f64) 3/2))))) (neg.f64 (cbrt.f64 (pow.f64 (pow.f64 (PI.f64) 3/2) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (exp.f64 (*.f64 x x))) (cbrt.f64 (neg.f64 (pow.f64 (PI.f64) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (exp.f64 (*.f64 (*.f64 x x) 3)) (pow.f64 (PI.f64) -3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (neg.f64 (pow.f64 (PI.f64) 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (neg.f64 (pow.f64 (PI.f64) 3/2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (neg.f64 (pow.f64 (PI.f64) 3/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (exp.f64 (*.f64 (*.f64 x x) 3)) (pow.f64 (PI.f64) -3/2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (/.f64 15/8 (*.f64 x x)) (pow.f64 (fabs.f64 x) -5)))) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (/.f64 (pow.f64 (fabs.f64 x) 5) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (fma.f64 1/2 (pow.f64 x -2) 1)) (*.f64 (cbrt.f64 (pow.f64 (PI.f64) 3/2)) (fabs.f64 x))) (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (/.f64 15/8 (*.f64 x x)) (pow.f64 (fabs.f64 x) -5))) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) (*.f64 (*.f64 3/4 (pow.f64 (fabs.f64 x) -5)) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (fma.f64 1/2 (pow.f64 x -2) 1)) (*.f64 (cbrt.f64 (pow.f64 (PI.f64) 3/2)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3/4 (pow.f64 (fabs.f64 x) -5)) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) (*.f64 (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (/.f64 15/8 (*.f64 x x)) (pow.f64 (fabs.f64 x) -5))) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (/.f64 (pow.f64 (fabs.f64 x) 5) 3/4)) (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (/.f64 15/8 (*.f64 x x)) (pow.f64 (fabs.f64 x) -5)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (fma.f64 1/2 (pow.f64 x -2) 1)) (*.f64 (cbrt.f64 (pow.f64 (PI.f64) 3/2)) (fabs.f64 x))) (*.f64 (*.f64 3/4 (pow.f64 (fabs.f64 x) -5)) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))))) (*.f64 (*.f64 (/.f64 15/8 (*.f64 x x)) (pow.f64 (fabs.f64 x) -5)) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (fma.f64 1/2 (pow.f64 x -2) 1)) (*.f64 (cbrt.f64 (pow.f64 (PI.f64) 3/2)) (fabs.f64 x))) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (/.f64 (pow.f64 (fabs.f64 x) 5) 3/4))) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (/.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) (*.f64 x x)) 15/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (/.f64 15/8 (*.f64 x x)) (pow.f64 (fabs.f64 x) -5)))) (*.f64 (*.f64 3/4 (pow.f64 (fabs.f64 x) -5)) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 15/8 (*.f64 x x)) (pow.f64 (fabs.f64 x) -5)) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) (+.f64 (*.f64 (*.f64 3/4 (pow.f64 (fabs.f64 x) -5)) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (fma.f64 1/2 (pow.f64 x -2) 1)) (*.f64 (cbrt.f64 (pow.f64 (PI.f64) 3/2)) (fabs.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (/.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) (*.f64 x x)) 15/8)) (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (/.f64 (pow.f64 (fabs.f64 x) 5) 3/4)) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (fma.f64 1/2 (pow.f64 x -2) 1)) (*.f64 (cbrt.f64 (pow.f64 (PI.f64) 3/2)) (fabs.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3/4 (pow.f64 (fabs.f64 x) -5)) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (/.f64 15/8 (*.f64 x x)) (pow.f64 (fabs.f64 x) -5)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (/.f64 15/8 (*.f64 x x)) (pow.f64 (fabs.f64 x) -5))) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))))) (*.f64 1 (*.f64 (*.f64 3/4 (pow.f64 (fabs.f64 x) -5)) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (/.f64 15/8 (*.f64 x x)) (pow.f64 (fabs.f64 x) -5))))) (*.f64 1 (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (/.f64 (pow.f64 (fabs.f64 x) 5) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) (*.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) 0) (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (/.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) (*.f64 x x)) 15/8)) (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 3/4 (pow.f64 (fabs.f64 x) -5)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (/.f64 15/8 (*.f64 x x)) (pow.f64 (fabs.f64 x) -5))) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) 1) (*.f64 (*.f64 (*.f64 3/4 (pow.f64 (fabs.f64 x) -5)) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (/.f64 15/8 (*.f64 x x)) (pow.f64 (fabs.f64 x) -5)))) 1) (*.f64 (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (/.f64 (pow.f64 (fabs.f64 x) 5) 3/4)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) (*.f64 0 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))))) (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 15/8 (*.f64 x x)) (pow.f64 (fabs.f64 x) -5)) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) (*.f64 (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 3/4 (pow.f64 (fabs.f64 x) -5))) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 3/4 (pow.f64 (fabs.f64 x) -5)))) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (/.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) (*.f64 x x)) 15/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 3/4 (pow.f64 (fabs.f64 x) -5))) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) (*.f64 (*.f64 (/.f64 15/8 (*.f64 x x)) (pow.f64 (fabs.f64 x) -5)) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) (*.f64 (pow.f64 (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))) 2/3) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) (*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) 2/3) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (cbrt.f64 (pow.f64 (PI.f64) 3/2)))) (/.f64 (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))) (cbrt.f64 (pow.f64 (pow.f64 (PI.f64) 3/2) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))))) (pow.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) 2/3) (cbrt.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (cbrt.f64 (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))))) (pow.f64 (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))) (cbrt.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))))) (pow.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 x x)) (*.f64 (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))) (cbrt.f64 (pow.f64 (PI.f64) -3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 x x)) (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -3/2)) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) 2/3) (+.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))) (cbrt.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))))) (*.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (cbrt.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) 2/3) (+.f64 (*.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (cbrt.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))))) (*.f64 (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))) (cbrt.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) (cbrt.f64 (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (PI.f64) 3/2))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 (*.f64 x x)) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (PI.f64) -3/2)) (*.f64 (exp.f64 (*.f64 x x)) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))) (neg.f64 (exp.f64 (*.f64 x x)))) (neg.f64 (cbrt.f64 (pow.f64 (PI.f64) -3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) (cbrt.f64 (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) (cbrt.f64 (pow.f64 (pow.f64 (PI.f64) 3/2) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) (cbrt.f64 (cbrt.f64 (pow.f64 (PI.f64) -3/2))))) (neg.f64 (cbrt.f64 (pow.f64 (pow.f64 (PI.f64) 3/2) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 (*.f64 x x)) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) (cbrt.f64 (pow.f64 (PI.f64) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))) (neg.f64 (exp.f64 (*.f64 x x)))) (cbrt.f64 (neg.f64 (pow.f64 (PI.f64) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 x x)) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) 3) (pow.f64 (PI.f64) -3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (neg.f64 (pow.f64 (PI.f64) 3/2)))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))) (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (neg.f64 (pow.f64 (PI.f64) 3/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) (cbrt.f64 (neg.f64 (pow.f64 (PI.f64) 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 x x)) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))) 3) (pow.f64 (PI.f64) -3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))))))))"]],"rules":[["egg-rr",62],["egg-rr",35]],"time":45.449951171875,"type":"rewrite"},{"count":[[121,118]],"inputs":[["(sqrt.f64 (/.f64 1 (PI.f64)))","(+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 x 4) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 x 4) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (pow.f64 x 2)) (+.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (*.f64 1/6 (*.f64 (pow.f64 x 6) (sqrt.f64 (/.f64 1 (PI.f64))))))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5)))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (*.f64 3/2 (/.f64 1 (fabs.f64 x))) (*.f64 21/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (*.f64 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5)))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(+.f64 (*.f64 (*.f64 (+.f64 (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))) (+.f64 (*.f64 1/2 (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (/.f64 1 (fabs.f64 x)))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (*.f64 3/2 (/.f64 1 (fabs.f64 x))) (*.f64 21/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (*.f64 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5)))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(+.f64 (*.f64 (*.f64 (+.f64 (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))) (+.f64 (*.f64 1/2 (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (/.f64 1 (fabs.f64 x)))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (*.f64 3/2 (/.f64 1 (fabs.f64 x))) (*.f64 21/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (+.f64 (*.f64 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5)))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 (*.f64 (+.f64 (*.f64 1/2 (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (*.f64 1/6 (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5)))))) (pow.f64 x 4)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(+.f64 (*.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 (/.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(+.f64 (*.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 (/.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(+.f64 (*.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 (/.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(*.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(+.f64 (*.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 (/.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(+.f64 (*.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 (/.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(+.f64 (*.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 (/.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (/.f64 1 (PI.f64)))","(+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 1 (*.f64 x x)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 x 4) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (*.f64 1/2 (pow.f64 x 4)) (*.f64 x x))) (sqrt.f64 (/.f64 1 (PI.f64))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 x 4) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (pow.f64 x 2)) (+.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (*.f64 1/6 (*.f64 (pow.f64 x 6) (sqrt.f64 (/.f64 1 (PI.f64))))))))","(+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (*.f64 1/2 (pow.f64 x 4)) (*.f64 x x))) (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 1 (*.f64 1/6 (pow.f64 x 6)))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5)))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))","(/.f64 (*.f64 (fma.f64 15/8 (pow.f64 (fabs.f64 x) -5) (/.f64 1/2 (fabs.f64 x))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 x x))","(+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (*.f64 3/2 (/.f64 1 (fabs.f64 x))) (*.f64 21/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (*.f64 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5)))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (/.f64 (fma.f64 15/8 (pow.f64 (fabs.f64 x) -5) (/.f64 1/2 (fabs.f64 x))) (*.f64 x x)) (fma.f64 (pow.f64 (fabs.f64 x) -5) 21/8 (/.f64 3/2 (fabs.f64 x)))))","(+.f64 (*.f64 (*.f64 (+.f64 (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))) (+.f64 (*.f64 1/2 (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (/.f64 1 (fabs.f64 x)))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (*.f64 3/2 (/.f64 1 (fabs.f64 x))) (*.f64 21/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (*.f64 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5)))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(fma.f64 (*.f64 (fma.f64 (pow.f64 (fabs.f64 x) -5) 3/4 (fma.f64 1/2 (fma.f64 15/8 (pow.f64 (fabs.f64 x) -5) (/.f64 1/2 (fabs.f64 x))) (/.f64 1 (fabs.f64 x)))) (*.f64 x x)) (sqrt.f64 (/.f64 1 (PI.f64))) (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (/.f64 (fma.f64 15/8 (pow.f64 (fabs.f64 x) -5) (/.f64 1/2 (fabs.f64 x))) (*.f64 x x)) (fma.f64 (pow.f64 (fabs.f64 x) -5) 21/8 (/.f64 3/2 (fabs.f64 x))))))","(+.f64 (*.f64 (*.f64 (+.f64 (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))) (+.f64 (*.f64 1/2 (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (/.f64 1 (fabs.f64 x)))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (*.f64 3/2 (/.f64 1 (fabs.f64 x))) (*.f64 21/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (+.f64 (*.f64 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5)))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 (*.f64 (+.f64 (*.f64 1/2 (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (*.f64 1/6 (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5)))))) (pow.f64 x 4)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(fma.f64 (*.f64 (fma.f64 (pow.f64 (fabs.f64 x) -5) 3/4 (fma.f64 1/2 (fma.f64 15/8 (pow.f64 (fabs.f64 x) -5) (/.f64 1/2 (fabs.f64 x))) (/.f64 1 (fabs.f64 x)))) (*.f64 x x)) (sqrt.f64 (/.f64 1 (PI.f64))) (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (fma.f64 (fma.f64 15/8 (pow.f64 (fabs.f64 x) -5) (/.f64 1/2 (fabs.f64 x))) (pow.f64 x (neg.f64 2)) (*.f64 (fma.f64 1/2 (fma.f64 3/4 (pow.f64 (fabs.f64 x) -5) (/.f64 1 (fabs.f64 x))) (*.f64 1/6 (fma.f64 15/8 (pow.f64 (fabs.f64 x) -5) (/.f64 1/2 (fabs.f64 x))))) (pow.f64 x 4))) (fma.f64 (pow.f64 (fabs.f64 x) -5) 21/8 (/.f64 3/2 (fabs.f64 x))))))","(*.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (exp.f64 (*.f64 x x)) (fma.f64 3/4 (pow.f64 (fabs.f64 x) -5) (/.f64 1 (fabs.f64 x)))) (sqrt.f64 (/.f64 1 (PI.f64))))","(+.f64 (*.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 (/.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (fma.f64 (fma.f64 3/4 (pow.f64 (fabs.f64 x) -5) (/.f64 1 (fabs.f64 x))) (exp.f64 (*.f64 x x)) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (fma.f64 15/8 (pow.f64 (fabs.f64 x) -5) (/.f64 1/2 (fabs.f64 x)))) (*.f64 x x))))","(+.f64 (*.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 (/.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (fma.f64 (fma.f64 3/4 (pow.f64 (fabs.f64 x) -5) (/.f64 1 (fabs.f64 x))) (exp.f64 (*.f64 x x)) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (fma.f64 15/8 (pow.f64 (fabs.f64 x) -5) (/.f64 1/2 (fabs.f64 x)))) (*.f64 x x))))","(+.f64 (*.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 (/.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (fma.f64 (fma.f64 3/4 (pow.f64 (fabs.f64 x) -5) (/.f64 1 (fabs.f64 x))) (exp.f64 (*.f64 x x)) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (fma.f64 15/8 (pow.f64 (fabs.f64 x) -5) (/.f64 1/2 (fabs.f64 x)))) (*.f64 x x))))","(*.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (exp.f64 (*.f64 x x)) (fma.f64 3/4 (pow.f64 (fabs.f64 x) -5) (/.f64 1 (fabs.f64 x)))) (sqrt.f64 (/.f64 1 (PI.f64))))","(+.f64 (*.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 (/.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (fma.f64 (fma.f64 3/4 (pow.f64 (fabs.f64 x) -5) (/.f64 1 (fabs.f64 x))) (exp.f64 (*.f64 x x)) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (fma.f64 15/8 (pow.f64 (fabs.f64 x) -5) (/.f64 1/2 (fabs.f64 x)))) (*.f64 x x))))","(+.f64 (*.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 (/.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (fma.f64 (fma.f64 3/4 (pow.f64 (fabs.f64 x) -5) (/.f64 1 (fabs.f64 x))) (exp.f64 (*.f64 x x)) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (fma.f64 15/8 (pow.f64 (fabs.f64 x) -5) (/.f64 1/2 (fabs.f64 x)))) (*.f64 x x))))","(+.f64 (*.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 (/.f64 (*.f64 (exp.f64 (pow.f64 x 2)) (+.f64 (*.f64 1/2 (/.f64 1 (fabs.f64 x))) (*.f64 15/8 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (fma.f64 (fma.f64 3/4 (pow.f64 (fabs.f64 x) -5) (/.f64 1 (fabs.f64 x))) (exp.f64 (*.f64 x x)) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (fma.f64 15/8 (pow.f64 (fabs.f64 x) -5) (/.f64 1/2 (fabs.f64 x)))) (*.f64 x x))))"]],"time":87.43115234375,"type":"simplify"},{"compiler":[[9295,5989]],"time":97.14697265625,"type":"eval"},{"alts":[["(*.f64 (/.f64 (*.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) 4)) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",2.8188392433057206],["(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",3.146789954965347],["(*.f64 (*.f64 (/.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (sqrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 x x))) (sqrt.f64 (sqrt.f64 (PI.f64))))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",5.78630390249761],["(*.f64 (cbrt.f64 (pow.f64 (PI.f64) -3/2)) (*.f64 (exp.f64 (*.f64 x x)) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))))","fresh",2.548071291559652],["(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 (cbrt.f64 x))) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (pow.f64 (cbrt.f64 x) 5))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",4.287889928023977],["(*.f64 (/.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (cbrt.f64 (/.f64 (pow.f64 (exp.f64 x) (+.f64 x x)) (PI.f64)))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",5.777717341426817],["(*.f64 (/.f64 (pow.f64 (exp.f64 -1) (neg.f64 (*.f64 x x))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",2.688863933810121],["(*.f64 (cbrt.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) (*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) 2/3) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))))","fresh",2.7433226626091236],["(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (pow.f64 (cbrt.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x)) 3))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",1.2570718630850821],["(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 x 4))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.9842184239479645],["(*.f64 (/.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 3))) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",8.68846390528098],["(+.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (/.f64 15/8 (*.f64 x x)) (pow.f64 (fabs.f64 x) -5)))) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (/.f64 (pow.f64 (fabs.f64 x) 5) 3/4)))","fresh",2.578739567352505],["(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","done",1.1799767657364042],["(*.f64 (cbrt.f64 (*.f64 (exp.f64 (*.f64 (*.f64 x x) 3)) (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",8.655160705209287],["(*.f64 (/.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 x x) 3)) 1/3) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",8.835396114049068],["(+.f64 (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (fma.f64 1/2 (pow.f64 x -2) 1)) (*.f64 (cbrt.f64 (pow.f64 (PI.f64) 3/2)) (fabs.f64 x))) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (/.f64 (pow.f64 (fabs.f64 x) 5) 3/4))) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (/.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) (*.f64 x x)) 15/8)))","fresh",2.60598169251859],["(*.f64 (pow.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) 3) 1/3) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",8.601304340323624],["(*.f64 (/.f64 (pow.f64 (exp.f64 (neg.f64 x)) (neg.f64 x)) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",1.2353975554632908],["(*.f64 (/.f64 (pow.f64 (exp.f64 (neg.f64 x)) (neg.f64 x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",1.247835550547273],["(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 (pow.f64 x 4))) (cbrt.f64 (*.f64 x x))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","fresh",2.9136894510040343],["(*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3) (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x))))) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3))) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","fresh",2.8477288731563157]],"compiler":[[61,41],[40,29],[55,38],[33,24],[51,39],[53,38],[44,33],[46,32],[44,33],[40,30],[46,35],[48,32],[43,33],[45,34],[45,34],[58,37],[45,34],[45,34],[43,32],[40,30],[60,41]],"count":[[220,21]],"kept":[{"done":[0,0],"fresh":[21,11],"new":[198,9],"picked":[1,1]}],"min-error":[0.3996715537334138],"time":43.820068359375,"type":"prune"},{"accuracy":[1.1799767657364044],"baseline":[1.1799767657364042],"branch":[["x",1.1799767657364044,1],["(*.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (exp.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))) (+.f64 (+.f64 (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 (/.f64 1 2) (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 3 4) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 15 8) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))))",1.1799767657364044,1],["(fabs.f64 x)",1.1799767657364044,1]],"compiler":[[2,1],[104,69],[3,2],[2224,1332]],"count":[[50,1]],"inputs":[["(*.f64 (/.f64 (*.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) 4)) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (cbrt.f64 (pow.f64 (PI.f64) -3/2)) (*.f64 (exp.f64 (*.f64 x x)) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))))","(*.f64 (cbrt.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2)))) (*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) 2/3) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x)))))))","(*.f64 (/.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 3))) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(+.f64 (*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (/.f64 15/8 (*.f64 x x)) (pow.f64 (fabs.f64 x) -5)))) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (/.f64 (pow.f64 (fabs.f64 x) 5) 3/4)))","(*.f64 (cbrt.f64 (*.f64 (exp.f64 (*.f64 (*.f64 x x) 3)) (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(+.f64 (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (fma.f64 1/2 (pow.f64 x -2) 1)) (*.f64 (cbrt.f64 (pow.f64 (PI.f64) 3/2)) (fabs.f64 x))) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (/.f64 (pow.f64 (fabs.f64 x) 5) 3/4))) (/.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (/.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) (*.f64 x x)) 15/8)))","(*.f64 (/.f64 (pow.f64 (exp.f64 (neg.f64 x)) (neg.f64 x)) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3) (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x))))) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3))) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (/.f64 (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) (pow.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3) 4/3)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3) (cbrt.f64 (exp.f64 (*.f64 x x)))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (/.f64 (*.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) 4)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (*.f64 (/.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (sqrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 x x))) (sqrt.f64 (sqrt.f64 (PI.f64))))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 (cbrt.f64 x))) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (pow.f64 (cbrt.f64 x) 5))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (/.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (cbrt.f64 (/.f64 (pow.f64 (exp.f64 x) (+.f64 x x)) (PI.f64)))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (/.f64 (/.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (sqrt.f64 (PI.f64)))) (pow.f64 (PI.f64) 1/8)) (pow.f64 (PI.f64) 1/8)) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (/.f64 (pow.f64 (exp.f64 -1) (neg.f64 (*.f64 x x))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (pow.f64 (cbrt.f64 (*.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) x) x)) 3))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (/.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 3))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (/.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 x x) 3)) 1/3) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (*.f64 (cbrt.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64)))) (cbrt.f64 (/.f64 (pow.f64 (exp.f64 x) (+.f64 x x)) (PI.f64)))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (pow.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) 3) 1/3) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (/.f64 (pow.f64 (exp.f64 (neg.f64 x)) (neg.f64 x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (/.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 x x) 3)) 1/3) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (pow.f64 (exp.f64 -1) (neg.f64 (*.f64 x x))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 (cbrt.f64 x))) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (pow.f64 (cbrt.f64 x) 5))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 (pow.f64 x 2/3))) (*.f64 (cbrt.f64 (pow.f64 x 4/3)) (pow.f64 x 4/3))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (*.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) 4)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (pow.f64 (exp.f64 (*.f64 x x)) 2/3)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) (pow.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3) 4/3)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) 4) (cbrt.f64 (exp.f64 (*.f64 x x))))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (fma.f64 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (cbrt.f64 3/4)) (cbrt.f64 9/16) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (pow.f64 (exp.f64 -1) (neg.f64 (*.f64 x x))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 x x) 3)) 1/3) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (/.f64 (pow.f64 (exp.f64 (neg.f64 x)) (neg.f64 x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 x 4))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 (/.f64 15/8 (*.f64 x x)) 3/4))))","(*.f64 (/.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 3))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 2 x)))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (pow.f64 (exp.f64 (cbrt.f64 (pow.f64 x 4))) (cbrt.f64 (*.f64 x x))) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (pow.f64 (E.f64) (*.f64 x x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (/.f64 (exp.f64 (*.f64 x x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (*.f64 (pow.f64 (/.f64 1 (fabs.f64 x)) 5) (+.f64 3/4 (*.f64 (pow.f64 x -2) 15/8)))))","(*.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (exp.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))) (+.f64 (+.f64 (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 (/.f64 1 2) (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 3 4) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 15 8) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))))"]],"link":["."],"name":["Jmat.Real.erfi, branch x greater than or equal to 5"],"oracle":[10.469481974025868],"outputs":[["(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))"]],"time":81.27978515625,"times":[["x",13.737060546875],["(*.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (exp.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))) (+.f64 (+.f64 (+.f64 (/.f64 1 (fabs.f64 x)) (*.f64 (/.f64 1 2) (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 3 4) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))) (*.f64 (/.f64 15 8) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 1 (fabs.f64 x)) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))) (/.f64 1 (fabs.f64 x))))))",15.658935546875],["(fabs.f64 x)",14.615966796875]],"type":"regimes"},{"compiler":[[43,33]],"inputs":[["(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 (pow.f64 (exp.f64 x) x) (cbrt.f64 (pow.f64 (PI.f64) 3/2))) (+.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 x x)) 1) (fabs.f64 x)) (+.f64 (*.f64 15/8 (/.f64 1 (*.f64 (pow.f64 (fabs.f64 x) 5) (pow.f64 x 2)))) (*.f64 3/4 (/.f64 1 (pow.f64 (fabs.f64 x) 5))))))","(*.f64 (*.f64 (exp.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (PI.f64) -3/2))) (+.f64 (/.f64 (fma.f64 1/2 (pow.f64 x -2) 1) (fabs.f64 x)) (*.f64 (pow.f64 (fabs.f64 x) -5) (+.f64 3/4 (/.f64 15/8 (*.f64 x x))))))"]],"stop":[["fuel",1]],"time":30.1630859375,"type":"simplify"},{"time":0.02099609375,"type":"soundness"},{"compiler":[[43,33]],"remove-preprocessing":[[]],"time":19.31591796875,"type":"end"}]
[{"compiler":[[9,6]],"method":["search"],"sampling":[[12,0.6731702503748238,0.10634138737805188,0.22048836224712431],[11,0.6360971061512828,0.15024379501119256,0.21365909883752465],[10,0.6009751800447702,0.20682912040501833,0.19219569955021143],[9,0.5307313278317451,0.28878028132021427,0.18048839084804058],[8,0.46829234808683395,0.39024362340569496,0.14146402850747108],[7,0.34341438859701157,0.5307313278317451,0.1258542835712433],[6,0.24975591897964478,0.6868287771940231,0.06341530382633209],[5,0.12487795948982239,0.8741457164287567,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":28.27685546875,"type":"analyze"},{"outcomes":[["body",256,"invalid",10.969970703125,342],["body",256,"valid",292.1201171875,8256]],"time":311.34814453125,"type":"sample"},{"compiler":[[8,5]],"inputs":[["0","1"],["(sqrt.f64 (+.f64 (*.f64 x x) y))","(sqrt.f64 (+.f64 (*.f64 y y) x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(sqrt.f64 (+.f64 (*.f64 x x) y))","(sqrt.f64 (fma.f64 x x y))","(sqrt.f64 (+.f64 (*.f64 y y) x))","(sqrt.f64 (fma.f64 y y x))"]],"symmetry":[[]],"time":56.741943359375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(sqrt.f64 (+.f64 (*.f64 x x) y))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (+.f64 (*.f64 x x) y))","(sqrt.f64 (fma.f64 x x y))"]],"time":18.970947265625,"type":"simplify"},{"compiler":[[13,7]],"time":0.303955078125,"type":"eval"},{"alts":[["(sqrt.f64 (fma.f64 x x y))","next",24.2578125]],"compiler":[[7,4],[7,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[24.2578125],"time":0.76318359375,"type":"prune"},{"compiler":[[13,4]],"locations":[["(sqrt.f64 (fma.f64 x x y))",22.647089709685215,true]],"time":2.953857421875,"type":"localize"},{"count":[[1,16]],"series":[["(sqrt.f64 (fma.f64 x x y))","y","-inf",0.34716796875],["(sqrt.f64 (fma.f64 x x y))","y","inf",0.52099609375],["(sqrt.f64 (fma.f64 x x y))","y","0",0.366943359375],["(sqrt.f64 (fma.f64 x x y))","x","-inf",0.35107421875],["(sqrt.f64 (fma.f64 x x y))","x","inf",0.473876953125],["(sqrt.f64 (fma.f64 x x y))","x","0",0.632080078125]],"time":2.780029296875,"type":"series"},{"count":[[1,39]],"inputs":[["(sqrt.f64 (fma.f64 x x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (fma.f64 x x y) 1/4)) (sqrt.f64 (*.f64 (fma.f64 x x y) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 1/4 (fma.f64 x x y))) (sqrt.f64 (*.f64 1/4 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 x x y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (sqrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y)))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y))) (sqrt.f64 (sqrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) (cbrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x y)) (cbrt.f64 (sqrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x x y)) (pow.f64 (fma.f64 x x y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x y) 0) (sqrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x x y)) (fabs.f64 (pow.f64 (fma.f64 x x y) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (pow.f64 (fma.f64 x x y) 0)) (sqrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x y) 1/8) (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fma.f64 x x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (sqrt.f64 (*.f64 (fma.f64 x x y) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (sqrt.f64 (*.f64 1/4 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 x x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 (fma.f64 x x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 3) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (fma.f64 x x y) 2) 2) 1/8)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x y) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (fma.f64 x x y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x x y) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y)))) (sqrt.f64 (sqrt.f64 (fma.f64 x x y)))))))))"]],"rules":[["egg-rr",39]],"time":42.10693359375,"type":"rewrite"},{"count":[[55,61]],"inputs":[["(sqrt.f64 y)","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y)))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 5))) (pow.f64 x 6))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))","(*.f64 -1 x)","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3)))))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))))))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 y)","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (*.f64 x x)) (sqrt.f64 y))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y)))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 y -3)) (pow.f64 x 4)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (*.f64 x x)) (sqrt.f64 y)))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 5))) (pow.f64 x 6))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))))","(fma.f64 (*.f64 1/16 (sqrt.f64 (pow.f64 y -5))) (pow.f64 x 6) (fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 y -3)) (pow.f64 x 4)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (*.f64 x x)) (sqrt.f64 y))))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(fma.f64 (/.f64 y x) 1/2 (fma.f64 -1/8 (*.f64 (*.f64 y y) (pow.f64 x -3)) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))","(fma.f64 1/16 (*.f64 (pow.f64 y 3) (pow.f64 x -5)) (fma.f64 (/.f64 y x) 1/2 (fma.f64 -1/8 (*.f64 (*.f64 y y) (pow.f64 x -3)) x)))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3)))))","(fma.f64 (/.f64 y x) -1/2 (fma.f64 (*.f64 (*.f64 y y) (pow.f64 x -3)) 1/8 (neg.f64 x)))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))))))","(fma.f64 -1/2 (/.f64 y x) (fma.f64 (*.f64 (pow.f64 y 3) (pow.f64 x -5)) -1/16 (fma.f64 (*.f64 (*.f64 y y) (pow.f64 x -3)) 1/8 (neg.f64 x))))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(fma.f64 (/.f64 y x) 1/2 (fma.f64 -1/8 (*.f64 (*.f64 y y) (pow.f64 x -3)) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))","(fma.f64 1/16 (*.f64 (pow.f64 y 3) (pow.f64 x -5)) (fma.f64 (/.f64 y x) 1/2 (fma.f64 -1/8 (*.f64 (*.f64 y y) (pow.f64 x -3)) x)))"]],"time":55.80712890625,"type":"simplify"},{"compiler":[[734,346]],"time":8.074951171875,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))","next",24.455410009768443],["(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","fresh",42.57440799941526],["(*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) (cbrt.f64 (fma.f64 x x y)))","fresh",24.45703125],["(sqrt.f64 (fma.f64 x x y))","done",24.2578125],["(fma.f64 1/2 (/.f64 y x) x)","fresh",40.76114324794199]],"compiler":[[16,9],[9,6],[14,7],[7,4],[8,5],[16,9],[9,6],[14,7],[8,5]],"count":[[62,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[61,4],"picked":[1,1]}],"min-error":[0],"time":10.486083984375,"type":"prune"},{"compiler":[[43,18]],"locations":[["(*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))",0.296875,true],["(pow.f64 (fma.f64 x x y) 3/4)",8.511073093446317,true],["(sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))",14.322010036228471,true],["(pow.f64 (fma.f64 x x y) 1/8)",23.38865597121464,true]],"time":22.36083984375,"type":"localize"},{"count":[[4,84]],"series":[["(*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))","y","-inf",0.349853515625],["(*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))","y","inf",0.39599609375],["(*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))","y","0",10.970947265625],["(*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))","x","-inf",0.23583984375],["(*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))","x","inf",0.239990234375],["(*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))","x","0",25.39404296875],["(pow.f64 (fma.f64 x x y) 3/4)","y","-inf",0.616943359375],["(pow.f64 (fma.f64 x x y) 3/4)","y","inf",0.551025390625],["(pow.f64 (fma.f64 x x y) 3/4)","y","0",0.551025390625],["(pow.f64 (fma.f64 x x y) 3/4)","x","-inf",0.4208984375],["(pow.f64 (fma.f64 x x y) 3/4)","x","inf",0.587158203125],["(pow.f64 (fma.f64 x x y) 3/4)","x","0",0.53515625],["(sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))","y","-inf",1.39697265625],["(sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))","y","inf",2.14404296875],["(sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))","y","0",1.47705078125],["(sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))","x","-inf",1.02783203125],["(sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))","x","inf",1.80810546875],["(sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))","x","0",1.991943359375],["(pow.f64 (fma.f64 x x y) 1/8)","y","-inf",1.015869140625],["(pow.f64 (fma.f64 x x y) 1/8)","y","inf",0.66796875],["(pow.f64 (fma.f64 x x y) 1/8)","y","0",1.14306640625],["(pow.f64 (fma.f64 x x y) 1/8)","x","-inf",0.51806640625],["(pow.f64 (fma.f64 x x y) 1/8)","x","inf",0.885986328125],["(pow.f64 (fma.f64 x x y) 1/8)","x","0",1.157958984375]],"time":56.612060546875,"type":"series"},{"count":[[4,136]],"inputs":[["(pow.f64 (fma.f64 x x y) 1/8)","(sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))","(pow.f64 (fma.f64 x x y) 3/4)","(*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 x x y) 1/8) 0) (pow.f64 (fma.f64 x x y) 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 x x y) 1/8) 1/2) (*.f64 (pow.f64 (fma.f64 x x y) 1/8) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (fma.f64 x x y) 1/8) (*.f64 (pow.f64 (fma.f64 x x y) 1/8) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (fma.f64 x x y) 1/8)) (pow.f64 (fma.f64 x x y) 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (pow.f64 (fma.f64 x x y) 1/8)) (*.f64 1/2 (pow.f64 (fma.f64 x x y) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (fma.f64 x x y) 1/8) (*.f64 0 (pow.f64 (fma.f64 x x y) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 1/8)) (cbrt.f64 (pow.f64 (fma.f64 x x y) (*.f64 2 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) (*.f64 2 1/8))) (cbrt.f64 (pow.f64 (fma.f64 x x y) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (fma.f64 x x y) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 x x y) 1/8)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (fma.f64 x x y) 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x y) 1/8) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 x x y) 1/8) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (fma.f64 x x y) 1/8) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 1/8)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 1/8)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 1/8)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x y) 1/8)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 1/8) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (fma.f64 x x y) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (fma.f64 x x y) 1/8) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) 0) (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) 1/2) (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) (*.f64 1/2 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (*.f64 0 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) (cbrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (cbrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))) (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) (fabs.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))) (fabs.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) 0) (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (fma.f64 x x y) 3/4) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 3/4) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 3/4) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 3/4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) (+.f64 3/4 3/4)) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (fma.f64 x x y) 3/4) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 x x y) 3/4) 0) (pow.f64 (fma.f64 x x y) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 x x y) 3/4) 1/2) (*.f64 (pow.f64 (fma.f64 x x y) 3/4) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (fma.f64 x x y) 3/4) (*.f64 (pow.f64 (fma.f64 x x y) 3/4) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (pow.f64 (fma.f64 x x y) 3/4)) (*.f64 1/2 (pow.f64 (fma.f64 x x y) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (fma.f64 x x y) 3/4) (*.f64 0 (pow.f64 (fma.f64 x x y) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) (pow.f64 (pow.f64 (fma.f64 x x y) 3/4) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) (neg.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (fma.f64 x x y) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 x x y) 3/4)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 x x y) 3/4) (+.f64 1/3 1/2)) (cbrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) 1) (*.f64 (neg.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))) (*.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))) (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))) (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x y) 3/4) (pow.f64 (pow.f64 (fma.f64 x x y) 3/4) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 x x y) 3/4) 0) (pow.f64 (fma.f64 x x y) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (cbrt.f64 (pow.f64 (fma.f64 x x y) (+.f64 3/4 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) (+.f64 3/4 3/4))) (cbrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) 3/2) (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) (pow.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (fma.f64 x x y) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x y) 3/4) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 x x y) 3/4) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (fma.f64 x x y) 3/4) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (fma.f64 x x y) 3/4) 3/2) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (fma.f64 x x y) 3/4) 3/2) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 3/4) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 3/4) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x y) 3/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 3/4) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) (+.f64 3/4 3/4)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (fma.f64 x x y) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x x y) (+.f64 3/4 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (fma.f64 x x y) 3/4) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (pow.f64 (fma.f64 x x y) 3/4))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8)) 0) (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8)) 1/2) (*.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8)) (*.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))) (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))) (*.f64 1/2 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8)) (*.f64 0 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))) (cbrt.f64 (*.f64 (pow.f64 (fma.f64 x x y) 3/4) (pow.f64 (fma.f64 x x y) (*.f64 2 1/8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 x x y) 3/4) (pow.f64 (fma.f64 x x y) (*.f64 2 1/8)))) (cbrt.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 1/8)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) (*.f64 2 1/8))) (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (cbrt.f64 (pow.f64 (fma.f64 x x y) 1/8))) (cbrt.f64 (pow.f64 (fma.f64 x x y) (*.f64 2 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) (*.f64 2 1/8))) (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) (cbrt.f64 (pow.f64 (fma.f64 x x y) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8)) (cbrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) (*.f64 2 1/8))) (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (cbrt.f64 (pow.f64 (fma.f64 x x y) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x y) 1/8) (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 x x y) 1/8) (cbrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))) (cbrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 x x y) 1/8) (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))) (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4))) (*.f64 (pow.f64 (fma.f64 x x y) 1/8) (sqrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (*.f64 (pow.f64 (fma.f64 x x y) 1/8) (cbrt.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8)) 3))))))"]],"rules":[["egg-rr",32],["egg-rr",43],["egg-rr",40],["egg-rr",21]],"time":33.343994140625,"type":"rewrite"},{"count":[[220,275]],"inputs":[["(pow.f64 y 1/8)","(+.f64 (pow.f64 y 1/8) (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/8) (pow.f64 x 2))))","(+.f64 (pow.f64 y 1/8) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/8) (pow.f64 x 2))) (*.f64 -7/128 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 15)) 1/8) (pow.f64 x 4)))))","(+.f64 (pow.f64 y 1/8) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/8) (pow.f64 x 2))) (+.f64 (*.f64 35/1024 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 23)) 1/8) (pow.f64 x 6))) (*.f64 -7/128 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 15)) 1/8) (pow.f64 x 4))))))","(pow.f64 x 1/4)","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/4) y)) (pow.f64 x 1/4))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 15)) 1/4) (+.f64 (*.f64 1/128 (pow.f64 y 2)) (*.f64 -1/16 (pow.f64 y 2)))) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/4) y)) (pow.f64 x 1/4)))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 15)) 1/4) (+.f64 (*.f64 1/128 (pow.f64 y 2)) (*.f64 -1/16 (pow.f64 y 2)))) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/4) y)) (+.f64 (pow.f64 x 1/4) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 23)) 1/4) (+.f64 (*.f64 -1/128 (pow.f64 y 3)) (+.f64 (*.f64 1/24 (pow.f64 y 3)) (*.f64 1/3072 (pow.f64 y 3))))))))","(pow.f64 (*.f64 -1 x) 1/4)","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 7)) 1/4) y)) (pow.f64 (*.f64 -1 x) 1/4))","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 7)) 1/4) y)) (+.f64 (pow.f64 (*.f64 -1 x) 1/4) (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 15)) 1/4) (+.f64 (*.f64 1/128 (pow.f64 y 2)) (*.f64 -1/16 (pow.f64 y 2))))))","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 7)) 1/4) y)) (+.f64 (pow.f64 (*.f64 -1 x) 1/4) (+.f64 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 23)) 1/4) (+.f64 (*.f64 -1/128 (pow.f64 y 3)) (+.f64 (*.f64 1/24 (pow.f64 y 3)) (*.f64 1/3072 (pow.f64 y 3))))) (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 15)) 1/4) (+.f64 (*.f64 1/128 (pow.f64 y 2)) (*.f64 -1/16 (pow.f64 y 2)))))))","(*.f64 (pow.f64 (pow.f64 1 3) 1/8) (pow.f64 x 1/4))","(+.f64 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (pow.f64 x 1/4)) (*.f64 1/8 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/4)))))","(+.f64 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (pow.f64 x 1/4)) (+.f64 (*.f64 -7/128 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 (pow.f64 y 2) (pow.f64 (/.f64 1 (pow.f64 x 15)) 1/4)))) (*.f64 1/8 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/4))))))","(+.f64 (*.f64 35/1024 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 (pow.f64 y 3) (pow.f64 (/.f64 1 (pow.f64 x 23)) 1/4)))) (+.f64 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (pow.f64 x 1/4)) (+.f64 (*.f64 -7/128 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 (pow.f64 y 2) (pow.f64 (/.f64 1 (pow.f64 x 15)) 1/4)))) (*.f64 1/8 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/4)))))))","(pow.f64 y 1/8)","(+.f64 (pow.f64 y 1/8) (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/8) (pow.f64 x 2))))","(+.f64 (pow.f64 y 1/8) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/8) (pow.f64 x 2))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 15)) 1/8) (+.f64 (*.f64 1/128 (pow.f64 x 4)) (*.f64 -1/16 (pow.f64 x 4))))))","(+.f64 (pow.f64 y 1/8) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/8) (pow.f64 x 2))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 23)) 1/8) (+.f64 (*.f64 -1/128 (pow.f64 x 6)) (+.f64 (*.f64 1/3072 (pow.f64 x 6)) (*.f64 1/24 (pow.f64 x 6))))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 15)) 1/8) (+.f64 (*.f64 1/128 (pow.f64 x 4)) (*.f64 -1/16 (pow.f64 x 4)))))))","(exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(+.f64 (*.f64 1/8 (/.f64 (*.f64 (exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (pow.f64 x 2)) y)) (exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))","(+.f64 (*.f64 1/8 (/.f64 (*.f64 (exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (pow.f64 x 2)) y)) (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 1/128 (pow.f64 x 4)) (*.f64 -1/16 (pow.f64 x 4)))) (pow.f64 y 2)) (exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))))","(+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/128 (pow.f64 x 4)) (*.f64 -1/16 (pow.f64 x 4))) (exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1/24 (pow.f64 x 6)) (+.f64 (*.f64 1/128 (pow.f64 x 6)) (*.f64 -1/3072 (pow.f64 x 6)))) (exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) (pow.f64 y 3))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (pow.f64 x 2)) y)) (exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))","(pow.f64 (pow.f64 y 3) 1/8)","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 21)) 1/8) (*.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) (pow.f64 x 2)))) (pow.f64 (pow.f64 y 3) 1/8))","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 21)) 1/8) (*.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) (pow.f64 x 2)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 3)) 1/8) (*.f64 (+.f64 (*.f64 1/128 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) 2) (pow.f64 y 6))) (*.f64 1/192 (+.f64 (*.f64 24 (/.f64 (+.f64 (*.f64 2 y) y) (pow.f64 y 3))) (*.f64 -12 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) 2) (pow.f64 y 6)))))) (pow.f64 x 4))) (pow.f64 (pow.f64 y 3) 1/8)))","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 21)) 1/8) (*.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) (pow.f64 x 2)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 3)) 1/8) (*.f64 (+.f64 (*.f64 1/1536 (/.f64 (*.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) (+.f64 (*.f64 24 (/.f64 (+.f64 (*.f64 2 y) y) (pow.f64 y 3))) (*.f64 -12 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) 2) (pow.f64 y 6))))) (pow.f64 y 3))) (+.f64 (*.f64 1/5760 (+.f64 (*.f64 720 (/.f64 1 (pow.f64 y 3))) (+.f64 (*.f64 240 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) 3) (pow.f64 y 9))) (*.f64 -720 (/.f64 (*.f64 (+.f64 (*.f64 2 y) y) (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2)))) (pow.f64 y 6)))))) (*.f64 1/3072 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) 3) (pow.f64 y 9))))) (pow.f64 x 6))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 3)) 1/8) (*.f64 (+.f64 (*.f64 1/128 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) 2) (pow.f64 y 6))) (*.f64 1/192 (+.f64 (*.f64 24 (/.f64 (+.f64 (*.f64 2 y) y) (pow.f64 y 3))) (*.f64 -12 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) 2) (pow.f64 y 6)))))) (pow.f64 x 4))) (pow.f64 (pow.f64 y 3) 1/8))))","(pow.f64 (pow.f64 x 3) 1/4)","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/4) (+.f64 (*.f64 2 y) y))) (pow.f64 (pow.f64 x 3) 1/4))","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/4) (+.f64 (*.f64 2 y) y))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 13)) 1/4) (+.f64 (*.f64 1/192 (+.f64 (*.f64 -12 (pow.f64 (+.f64 (*.f64 2 y) y) 2)) (*.f64 24 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2)))))) (*.f64 1/128 (pow.f64 (+.f64 (*.f64 2 y) y) 2)))) (pow.f64 (pow.f64 x 3) 1/4)))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 21)) 1/4) (+.f64 (*.f64 1/5760 (+.f64 (*.f64 720 (pow.f64 y 3)) (+.f64 (*.f64 240 (pow.f64 (+.f64 (*.f64 2 y) y) 3)) (*.f64 -720 (*.f64 (+.f64 (*.f64 2 y) y) (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2)))))))) (+.f64 (*.f64 1/1536 (*.f64 (+.f64 (*.f64 2 y) y) (+.f64 (*.f64 -12 (pow.f64 (+.f64 (*.f64 2 y) y) 2)) (*.f64 24 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))))))) (*.f64 1/3072 (pow.f64 (+.f64 (*.f64 2 y) y) 3))))) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/4) (+.f64 (*.f64 2 y) y))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 13)) 1/4) (+.f64 (*.f64 1/192 (+.f64 (*.f64 -12 (pow.f64 (+.f64 (*.f64 2 y) y) 2)) (*.f64 24 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2)))))) (*.f64 1/128 (pow.f64 (+.f64 (*.f64 2 y) y) 2)))) (pow.f64 (pow.f64 x 3) 1/4))))","(pow.f64 (*.f64 -1 (pow.f64 x 3)) 1/4)","(+.f64 (pow.f64 (*.f64 -1 (pow.f64 x 3)) 1/4) (*.f64 1/8 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 5)) 1/4) (+.f64 (*.f64 2 y) y))))","(+.f64 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 13)) 1/4) (+.f64 (*.f64 1/128 (pow.f64 (+.f64 (*.f64 2 y) y) 2)) (*.f64 1/192 (+.f64 (*.f64 -12 (pow.f64 (+.f64 (*.f64 2 y) y) 2)) (*.f64 24 (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 y 2))))))) (+.f64 (pow.f64 (*.f64 -1 (pow.f64 x 3)) 1/4) (*.f64 1/8 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 5)) 1/4) (+.f64 (*.f64 2 y) y)))))","(+.f64 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 21)) 1/4) (+.f64 (*.f64 1/1536 (*.f64 (+.f64 (*.f64 2 y) y) (+.f64 (*.f64 -12 (pow.f64 (+.f64 (*.f64 2 y) y) 2)) (*.f64 24 (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 y 2)))))) (+.f64 (*.f64 1/3072 (pow.f64 (+.f64 (*.f64 2 y) y) 3)) (*.f64 1/5760 (+.f64 (*.f64 720 (pow.f64 y 3)) (+.f64 (*.f64 240 (pow.f64 (+.f64 (*.f64 2 y) y) 3)) (*.f64 -720 (*.f64 (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 y 2)) (+.f64 (*.f64 2 y) y))))))))) (+.f64 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 13)) 1/4) (+.f64 (*.f64 1/128 (pow.f64 (+.f64 (*.f64 2 y) y) 2)) (*.f64 1/192 (+.f64 (*.f64 -12 (pow.f64 (+.f64 (*.f64 2 y) y) 2)) (*.f64 24 (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 y 2))))))) (+.f64 (pow.f64 (*.f64 -1 (pow.f64 x 3)) 1/4) (*.f64 1/8 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 5)) 1/4) (+.f64 (*.f64 2 y) y))))))","(*.f64 (pow.f64 (pow.f64 1 3) 1/8) (pow.f64 (pow.f64 x 3) 1/4))","(+.f64 (*.f64 3/8 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/4)))) (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (pow.f64 (pow.f64 x 3) 1/4)))","(+.f64 (*.f64 3/8 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/4)))) (+.f64 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (pow.f64 (pow.f64 x 3) 1/4)) (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 9/128 (/.f64 1 (pow.f64 x 4))) (*.f64 1/16 (+.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (pow.f64 x 6))) (*.f64 -1 (/.f64 (pow.f64 (+.f64 (pow.f64 x 4) (*.f64 2 (pow.f64 x 4))) 2) (pow.f64 x 12))))))) (pow.f64 (pow.f64 x 3) 1/4)))))","(+.f64 (*.f64 3/8 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/4)))) (+.f64 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 1/48 (+.f64 (*.f64 2 (/.f64 (pow.f64 (+.f64 (pow.f64 x 4) (*.f64 2 (pow.f64 x 4))) 3) (pow.f64 x 18))) (+.f64 (*.f64 -6 (/.f64 (*.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (+.f64 (pow.f64 x 4) (*.f64 2 (pow.f64 x 4)))) (pow.f64 x 12))) (*.f64 6 (/.f64 1 (pow.f64 x 6)))))) (+.f64 (*.f64 3/128 (/.f64 (+.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (pow.f64 x 6))) (*.f64 -1 (/.f64 (pow.f64 (+.f64 (pow.f64 x 4) (*.f64 2 (pow.f64 x 4))) 2) (pow.f64 x 12)))) (pow.f64 x 2))) (*.f64 9/1024 (/.f64 1 (pow.f64 x 6)))))) (pow.f64 (pow.f64 x 3) 1/4))) (+.f64 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (pow.f64 (pow.f64 x 3) 1/4)) (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 9/128 (/.f64 1 (pow.f64 x 4))) (*.f64 1/16 (+.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (pow.f64 x 6))) (*.f64 -1 (/.f64 (pow.f64 (+.f64 (pow.f64 x 4) (*.f64 2 (pow.f64 x 4))) 2) (pow.f64 x 12))))))) (pow.f64 (pow.f64 x 3) 1/4))))))","(pow.f64 (pow.f64 y 3) 1/8)","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/8) (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)))) (pow.f64 (pow.f64 y 3) 1/8))","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/8) (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 13)) 1/8) (+.f64 (*.f64 1/16 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2)) (*.f64 2 (+.f64 (pow.f64 x 4) (*.f64 2 (pow.f64 x 4)))))) (*.f64 1/128 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2)))) (pow.f64 (pow.f64 y 3) 1/8)))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 21)) 1/8) (+.f64 (*.f64 1/128 (*.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2)) (*.f64 2 (+.f64 (pow.f64 x 4) (*.f64 2 (pow.f64 x 4))))))) (+.f64 (*.f64 1/48 (+.f64 (*.f64 6 (pow.f64 x 6)) (+.f64 (*.f64 2 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 3)) (*.f64 -6 (*.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (+.f64 (pow.f64 x 4) (*.f64 2 (pow.f64 x 4)))))))) (*.f64 1/3072 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 3))))) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/8) (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 13)) 1/8) (+.f64 (*.f64 1/16 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2)) (*.f64 2 (+.f64 (pow.f64 x 4) (*.f64 2 (pow.f64 x 4)))))) (*.f64 1/128 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2)))) (pow.f64 (pow.f64 y 3) 1/8))))","(exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y))))))","(+.f64 (*.f64 1/8 (/.f64 (*.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y))))))) y)) (exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y)))))))","(+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/16 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2)) (*.f64 -2 (+.f64 (*.f64 -2 (pow.f64 x 4)) (*.f64 -1 (pow.f64 x 4)))))) (*.f64 1/128 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2))) (exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y))))))) (pow.f64 y 2)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y))))))) y)) (exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y))))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1/3072 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 3)) (+.f64 (*.f64 1/48 (+.f64 (*.f64 -6 (*.f64 (+.f64 (*.f64 -2 (pow.f64 x 4)) (*.f64 -1 (pow.f64 x 4))) (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)))) (+.f64 (*.f64 -2 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 3)) (*.f64 -6 (pow.f64 x 6))))) (*.f64 -1/128 (*.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2)) (*.f64 -2 (+.f64 (*.f64 -2 (pow.f64 x 4)) (*.f64 -1 (pow.f64 x 4))))))))) (exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y))))))) (pow.f64 y 3))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y))))))) y)) (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y)))))) (+.f64 (*.f64 1/16 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2)) (*.f64 -2 (+.f64 (*.f64 -2 (pow.f64 x 4)) (*.f64 -1 (pow.f64 x 4)))))) (*.f64 1/128 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2)))) (pow.f64 y 2)) (exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y)))))))))","(pow.f64 (pow.f64 y 3) 1/4)","(+.f64 (pow.f64 (pow.f64 y 3) 1/4) (*.f64 3/4 (*.f64 (pow.f64 (/.f64 1 y) 1/4) (pow.f64 x 2))))","(+.f64 (pow.f64 (pow.f64 y 3) 1/4) (+.f64 (*.f64 -3/32 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/4) (pow.f64 x 4))) (*.f64 3/4 (*.f64 (pow.f64 (/.f64 1 y) 1/4) (pow.f64 x 2)))))","(+.f64 (pow.f64 (pow.f64 y 3) 1/4) (+.f64 (*.f64 5/128 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 9)) 1/4) (pow.f64 x 6))) (+.f64 (*.f64 -3/32 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/4) (pow.f64 x 4))) (*.f64 3/4 (*.f64 (pow.f64 (/.f64 1 y) 1/4) (pow.f64 x 2))))))","(sqrt.f64 (pow.f64 x 3))","(+.f64 (sqrt.f64 (pow.f64 x 3)) (*.f64 3/4 (*.f64 y (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 (+.f64 (*.f64 -3/8 (pow.f64 y 2)) (*.f64 9/32 (pow.f64 y 2))) (sqrt.f64 (/.f64 1 (pow.f64 x 5)))) (+.f64 (sqrt.f64 (pow.f64 x 3)) (*.f64 3/4 (*.f64 y (sqrt.f64 (/.f64 1 x))))))","(+.f64 (*.f64 (+.f64 (*.f64 -3/8 (pow.f64 y 2)) (*.f64 9/32 (pow.f64 y 2))) (sqrt.f64 (/.f64 1 (pow.f64 x 5)))) (+.f64 (sqrt.f64 (pow.f64 x 3)) (+.f64 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 x 9))) (+.f64 (*.f64 -9/32 (pow.f64 y 3)) (+.f64 (*.f64 9/128 (pow.f64 y 3)) (*.f64 1/4 (pow.f64 y 3))))) (*.f64 3/4 (*.f64 y (sqrt.f64 (/.f64 1 x)))))))","(*.f64 (pow.f64 1 1/4) (sqrt.f64 (pow.f64 x 3)))","(+.f64 (*.f64 (pow.f64 1 1/4) (sqrt.f64 (pow.f64 x 3))) (*.f64 3/4 (*.f64 (pow.f64 1 1/4) (*.f64 y (sqrt.f64 (/.f64 1 x))))))","(+.f64 (*.f64 -3/32 (*.f64 (pow.f64 1 1/4) (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 1 (pow.f64 x 5)))))) (+.f64 (*.f64 (pow.f64 1 1/4) (sqrt.f64 (pow.f64 x 3))) (*.f64 3/4 (*.f64 (pow.f64 1 1/4) (*.f64 y (sqrt.f64 (/.f64 1 x)))))))","(+.f64 (*.f64 -3/32 (*.f64 (pow.f64 1 1/4) (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 1 (pow.f64 x 5)))))) (+.f64 (*.f64 5/128 (*.f64 (pow.f64 1 1/4) (*.f64 (pow.f64 y 3) (sqrt.f64 (/.f64 1 (pow.f64 x 9)))))) (+.f64 (*.f64 (pow.f64 1 1/4) (sqrt.f64 (pow.f64 x 3))) (*.f64 3/4 (*.f64 (pow.f64 1 1/4) (*.f64 y (sqrt.f64 (/.f64 1 x))))))))","(pow.f64 (pow.f64 y 3) 1/4)","(+.f64 (pow.f64 (pow.f64 y 3) 1/4) (*.f64 3/4 (*.f64 (pow.f64 (/.f64 1 y) 1/4) (pow.f64 x 2))))","(+.f64 (pow.f64 (pow.f64 y 3) 1/4) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/4) (+.f64 (*.f64 9/32 (pow.f64 x 4)) (*.f64 -3/8 (pow.f64 x 4)))) (*.f64 3/4 (*.f64 (pow.f64 (/.f64 1 y) 1/4) (pow.f64 x 2)))))","(+.f64 (pow.f64 (pow.f64 y 3) 1/4) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 9)) 1/4) (+.f64 (*.f64 1/4 (pow.f64 x 6)) (+.f64 (*.f64 -9/32 (pow.f64 x 6)) (*.f64 9/128 (pow.f64 x 6))))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/4) (+.f64 (*.f64 9/32 (pow.f64 x 4)) (*.f64 -3/8 (pow.f64 x 4)))) (*.f64 3/4 (*.f64 (pow.f64 (/.f64 1 y) 1/4) (pow.f64 x 2))))))","(exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(+.f64 (*.f64 3/4 (/.f64 (*.f64 (exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (pow.f64 x 2)) y)) (exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))","(+.f64 (*.f64 3/4 (/.f64 (*.f64 (exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (pow.f64 x 2)) y)) (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 9/32 (pow.f64 x 4)) (*.f64 -3/8 (pow.f64 x 4)))) (pow.f64 y 2)) (exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))))","(+.f64 (*.f64 3/4 (/.f64 (*.f64 (exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (pow.f64 x 2)) y)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 9/32 (pow.f64 x 4)) (*.f64 -3/8 (pow.f64 x 4))) (exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 (exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 -1/4 (pow.f64 x 6)) (+.f64 (*.f64 9/32 (pow.f64 x 6)) (*.f64 -9/128 (pow.f64 x 6))))) (pow.f64 y 3))) (exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))","(sqrt.f64 y)","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y)))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 5))) (pow.f64 x 6))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))","(*.f64 -1 x)","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3)))))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))))))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 y 1/8)","(+.f64 (pow.f64 y 1/8) (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/8) (pow.f64 x 2))))","(+.f64 (pow.f64 y 1/8) (*.f64 (*.f64 1/8 (pow.f64 y (*.f64 -7 1/8))) (*.f64 x x)))","(+.f64 (pow.f64 y 1/8) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/8) (pow.f64 x 2))) (*.f64 -7/128 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 15)) 1/8) (pow.f64 x 4)))))","(+.f64 (pow.f64 y 1/8) (fma.f64 1/8 (*.f64 (pow.f64 y (*.f64 -7 1/8)) (*.f64 x x)) (*.f64 (*.f64 -7/128 (pow.f64 y (*.f64 -15 1/8))) (pow.f64 x 4))))","(+.f64 (pow.f64 y 1/8) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/8) (pow.f64 x 2))) (+.f64 (*.f64 35/1024 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 23)) 1/8) (pow.f64 x 6))) (*.f64 -7/128 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 15)) 1/8) (pow.f64 x 4))))))","(+.f64 (pow.f64 y 1/8) (fma.f64 1/8 (*.f64 (pow.f64 y (*.f64 -7 1/8)) (*.f64 x x)) (fma.f64 35/1024 (*.f64 (pow.f64 y (*.f64 -23 1/8)) (pow.f64 x 6)) (*.f64 (*.f64 -7/128 (pow.f64 y (*.f64 -15 1/8))) (pow.f64 x 4)))))","(pow.f64 x 1/4)","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/4) y)) (pow.f64 x 1/4))","(fma.f64 1/8 (*.f64 (pow.f64 (pow.f64 x -7) 1/4) y) (pow.f64 x 1/4))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 15)) 1/4) (+.f64 (*.f64 1/128 (pow.f64 y 2)) (*.f64 -1/16 (pow.f64 y 2)))) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/4) y)) (pow.f64 x 1/4)))","(fma.f64 (pow.f64 (pow.f64 x -15) 1/4) (*.f64 (*.f64 y y) -7/128) (fma.f64 1/8 (*.f64 (pow.f64 (pow.f64 x -7) 1/4) y) (pow.f64 x 1/4)))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 15)) 1/4) (+.f64 (*.f64 1/128 (pow.f64 y 2)) (*.f64 -1/16 (pow.f64 y 2)))) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/4) y)) (+.f64 (pow.f64 x 1/4) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 23)) 1/4) (+.f64 (*.f64 -1/128 (pow.f64 y 3)) (+.f64 (*.f64 1/24 (pow.f64 y 3)) (*.f64 1/3072 (pow.f64 y 3))))))))","(fma.f64 (pow.f64 (pow.f64 x -15) 1/4) (*.f64 (*.f64 y y) -7/128) (+.f64 (fma.f64 1/8 (*.f64 (pow.f64 (pow.f64 x -7) 1/4) y) (pow.f64 x 1/4)) (*.f64 (pow.f64 (pow.f64 x -23) 1/4) (*.f64 (pow.f64 y 3) (+.f64 -1/128 43/1024)))))","(pow.f64 (*.f64 -1 x) 1/4)","(pow.f64 (neg.f64 x) 1/4)","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 7)) 1/4) y)) (pow.f64 (*.f64 -1 x) 1/4))","(fma.f64 1/8 (*.f64 (pow.f64 (neg.f64 (pow.f64 x -7)) 1/4) y) (pow.f64 (neg.f64 x) 1/4))","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 7)) 1/4) y)) (+.f64 (pow.f64 (*.f64 -1 x) 1/4) (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 15)) 1/4) (+.f64 (*.f64 1/128 (pow.f64 y 2)) (*.f64 -1/16 (pow.f64 y 2))))))","(+.f64 (fma.f64 1/8 (*.f64 (pow.f64 (neg.f64 (pow.f64 x -7)) 1/4) y) (pow.f64 (neg.f64 x) 1/4)) (*.f64 (pow.f64 (neg.f64 (pow.f64 x -15)) 1/4) (*.f64 (*.f64 y y) -7/128)))","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 7)) 1/4) y)) (+.f64 (pow.f64 (*.f64 -1 x) 1/4) (+.f64 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 23)) 1/4) (+.f64 (*.f64 -1/128 (pow.f64 y 3)) (+.f64 (*.f64 1/24 (pow.f64 y 3)) (*.f64 1/3072 (pow.f64 y 3))))) (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 15)) 1/4) (+.f64 (*.f64 1/128 (pow.f64 y 2)) (*.f64 -1/16 (pow.f64 y 2)))))))","(+.f64 (fma.f64 1/8 (*.f64 (pow.f64 (neg.f64 (pow.f64 x -7)) 1/4) y) (pow.f64 (neg.f64 x) 1/4)) (fma.f64 (pow.f64 (neg.f64 (pow.f64 x -23)) 1/4) (*.f64 (pow.f64 y 3) (+.f64 -1/128 43/1024)) (*.f64 (pow.f64 (neg.f64 (pow.f64 x -15)) 1/4) (*.f64 (*.f64 y y) -7/128))))","(*.f64 (pow.f64 (pow.f64 1 3) 1/8) (pow.f64 x 1/4))","(pow.f64 x 1/4)","(+.f64 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (pow.f64 x 1/4)) (*.f64 1/8 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/4)))))","(fma.f64 1/8 (*.f64 (pow.f64 (pow.f64 x -7) 1/4) y) (pow.f64 x 1/4))","(+.f64 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (pow.f64 x 1/4)) (+.f64 (*.f64 -7/128 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 (pow.f64 y 2) (pow.f64 (/.f64 1 (pow.f64 x 15)) 1/4)))) (*.f64 1/8 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/4))))))","(+.f64 (pow.f64 x 1/4) (fma.f64 -7/128 (*.f64 (*.f64 y y) (pow.f64 (pow.f64 x -15) 1/4)) (*.f64 (*.f64 1/8 (pow.f64 (pow.f64 x -7) 1/4)) y)))","(+.f64 (*.f64 35/1024 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 (pow.f64 y 3) (pow.f64 (/.f64 1 (pow.f64 x 23)) 1/4)))) (+.f64 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (pow.f64 x 1/4)) (+.f64 (*.f64 -7/128 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 (pow.f64 y 2) (pow.f64 (/.f64 1 (pow.f64 x 15)) 1/4)))) (*.f64 1/8 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/4)))))))","(fma.f64 35/1024 (*.f64 (pow.f64 y 3) (pow.f64 (pow.f64 x -23) 1/4)) (+.f64 (pow.f64 x 1/4) (fma.f64 -7/128 (*.f64 (*.f64 y y) (pow.f64 (pow.f64 x -15) 1/4)) (*.f64 (*.f64 1/8 (pow.f64 (pow.f64 x -7) 1/4)) y))))","(pow.f64 y 1/8)","(+.f64 (pow.f64 y 1/8) (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/8) (pow.f64 x 2))))","(+.f64 (pow.f64 y 1/8) (*.f64 (*.f64 1/8 (pow.f64 y (*.f64 -7 1/8))) (*.f64 x x)))","(+.f64 (pow.f64 y 1/8) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/8) (pow.f64 x 2))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 15)) 1/8) (+.f64 (*.f64 1/128 (pow.f64 x 4)) (*.f64 -1/16 (pow.f64 x 4))))))","(+.f64 (pow.f64 y 1/8) (fma.f64 1/8 (*.f64 (pow.f64 y (*.f64 -7 1/8)) (*.f64 x x)) (*.f64 (pow.f64 y (*.f64 -15 1/8)) (*.f64 (pow.f64 x 4) -7/128))))","(+.f64 (pow.f64 y 1/8) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/8) (pow.f64 x 2))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 23)) 1/8) (+.f64 (*.f64 -1/128 (pow.f64 x 6)) (+.f64 (*.f64 1/3072 (pow.f64 x 6)) (*.f64 1/24 (pow.f64 x 6))))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 15)) 1/8) (+.f64 (*.f64 1/128 (pow.f64 x 4)) (*.f64 -1/16 (pow.f64 x 4)))))))","(+.f64 (pow.f64 y 1/8) (fma.f64 1/8 (*.f64 (pow.f64 y (*.f64 -7 1/8)) (*.f64 x x)) (fma.f64 (pow.f64 y (*.f64 -23 1/8)) (*.f64 (pow.f64 x 6) (+.f64 43/1024 -1/128)) (*.f64 (pow.f64 y (*.f64 -15 1/8)) (*.f64 (pow.f64 x 4) -7/128)))))","(exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(pow.f64 (exp.f64 1/8) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))","(+.f64 (*.f64 1/8 (/.f64 (*.f64 (exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (pow.f64 x 2)) y)) (exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))","(fma.f64 1/8 (/.f64 (*.f64 (pow.f64 (exp.f64 1/8) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (*.f64 x x)) y) (pow.f64 (exp.f64 1/8) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))))","(+.f64 (*.f64 1/8 (/.f64 (*.f64 (exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (pow.f64 x 2)) y)) (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 1/128 (pow.f64 x 4)) (*.f64 -1/16 (pow.f64 x 4)))) (pow.f64 y 2)) (exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))))","(+.f64 (fma.f64 1/8 (/.f64 (*.f64 (pow.f64 (exp.f64 1/8) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (*.f64 x x)) y) (pow.f64 (exp.f64 1/8) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))) (/.f64 (*.f64 (pow.f64 (exp.f64 1/8) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (*.f64 (pow.f64 x 4) -7/128)) (*.f64 y y)))","(+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/128 (pow.f64 x 4)) (*.f64 -1/16 (pow.f64 x 4))) (exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1/24 (pow.f64 x 6)) (+.f64 (*.f64 1/128 (pow.f64 x 6)) (*.f64 -1/3072 (pow.f64 x 6)))) (exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) (pow.f64 y 3))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (pow.f64 x 2)) y)) (exp.f64 (*.f64 1/8 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))","(+.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 1/8) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (*.f64 (pow.f64 x 4) -7/128)) (*.f64 y y)) (-.f64 (fma.f64 1/8 (/.f64 (*.f64 (pow.f64 (exp.f64 1/8) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (*.f64 x x)) y) (pow.f64 (exp.f64 1/8) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))) (*.f64 (*.f64 (*.f64 (pow.f64 x 6) (+.f64 23/3072 -1/24)) (pow.f64 (exp.f64 1/8) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))) (pow.f64 y -3))))","(pow.f64 (pow.f64 y 3) 1/8)","(pow.f64 y 3/8)","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 21)) 1/8) (*.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) (pow.f64 x 2)))) (pow.f64 (pow.f64 y 3) 1/8))","(fma.f64 1/8 (*.f64 (pow.f64 y (*.f64 -21 1/8)) (*.f64 (*.f64 3 (*.f64 y y)) (*.f64 x x))) (pow.f64 y 3/8))","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 21)) 1/8) (*.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) (pow.f64 x 2)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 3)) 1/8) (*.f64 (+.f64 (*.f64 1/128 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) 2) (pow.f64 y 6))) (*.f64 1/192 (+.f64 (*.f64 24 (/.f64 (+.f64 (*.f64 2 y) y) (pow.f64 y 3))) (*.f64 -12 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) 2) (pow.f64 y 6)))))) (pow.f64 x 4))) (pow.f64 (pow.f64 y 3) 1/8)))","(fma.f64 1/8 (*.f64 (pow.f64 y (*.f64 -21 1/8)) (*.f64 (*.f64 3 (*.f64 y y)) (*.f64 x x))) (*.f64 (+.f64 (*.f64 (fma.f64 1/128 (/.f64 (*.f64 9 (pow.f64 y (*.f64 2 2))) (pow.f64 y 6)) (*.f64 1/192 (fma.f64 24 (*.f64 (*.f64 3 y) (pow.f64 y -3)) (*.f64 -12 (/.f64 (*.f64 9 (pow.f64 y (*.f64 2 2))) (pow.f64 y 6)))))) (pow.f64 x 4)) 1) (pow.f64 y 3/8)))","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 21)) 1/8) (*.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) (pow.f64 x 2)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 3)) 1/8) (*.f64 (+.f64 (*.f64 1/1536 (/.f64 (*.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) (+.f64 (*.f64 24 (/.f64 (+.f64 (*.f64 2 y) y) (pow.f64 y 3))) (*.f64 -12 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) 2) (pow.f64 y 6))))) (pow.f64 y 3))) (+.f64 (*.f64 1/5760 (+.f64 (*.f64 720 (/.f64 1 (pow.f64 y 3))) (+.f64 (*.f64 240 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) 3) (pow.f64 y 9))) (*.f64 -720 (/.f64 (*.f64 (+.f64 (*.f64 2 y) y) (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2)))) (pow.f64 y 6)))))) (*.f64 1/3072 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) 3) (pow.f64 y 9))))) (pow.f64 x 6))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 3)) 1/8) (*.f64 (+.f64 (*.f64 1/128 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) 2) (pow.f64 y 6))) (*.f64 1/192 (+.f64 (*.f64 24 (/.f64 (+.f64 (*.f64 2 y) y) (pow.f64 y 3))) (*.f64 -12 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))) 2) (pow.f64 y 6)))))) (pow.f64 x 4))) (pow.f64 (pow.f64 y 3) 1/8))))","(+.f64 (*.f64 (pow.f64 y 3/8) (+.f64 (*.f64 (fma.f64 1/1536 (*.f64 (*.f64 (*.f64 3 (*.f64 y y)) (fma.f64 24 (*.f64 (*.f64 3 y) (pow.f64 y -3)) (*.f64 -12 (/.f64 (*.f64 9 (pow.f64 y (*.f64 2 2))) (pow.f64 y 6))))) (pow.f64 y -3)) (fma.f64 1/5760 (fma.f64 720 (pow.f64 y -3) (fma.f64 240 (*.f64 (pow.f64 (*.f64 3 (*.f64 y y)) 3) (pow.f64 y -9)) (*.f64 (*.f64 -720 (*.f64 (*.f64 3 (*.f64 y y)) (*.f64 3 y))) (pow.f64 y -6)))) (*.f64 (*.f64 1/3072 (pow.f64 (*.f64 3 (*.f64 y y)) 3)) (pow.f64 y -9)))) (pow.f64 x 6)) (*.f64 (fma.f64 1/128 (/.f64 (*.f64 9 (pow.f64 y (*.f64 2 2))) (pow.f64 y 6)) (*.f64 1/192 (fma.f64 24 (*.f64 (*.f64 3 y) (pow.f64 y -3)) (*.f64 -12 (/.f64 (*.f64 9 (pow.f64 y (*.f64 2 2))) (pow.f64 y 6)))))) (pow.f64 x 4)))) (fma.f64 1/8 (*.f64 (pow.f64 y (*.f64 -21 1/8)) (*.f64 (*.f64 3 (*.f64 y y)) (*.f64 x x))) (pow.f64 y 3/8)))","(pow.f64 (pow.f64 x 3) 1/4)","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/4) (+.f64 (*.f64 2 y) y))) (pow.f64 (pow.f64 x 3) 1/4))","(fma.f64 1/8 (*.f64 (pow.f64 (pow.f64 x -5) 1/4) (*.f64 3 y)) (pow.f64 (pow.f64 x 3) 1/4))","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/4) (+.f64 (*.f64 2 y) y))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 13)) 1/4) (+.f64 (*.f64 1/192 (+.f64 (*.f64 -12 (pow.f64 (+.f64 (*.f64 2 y) y) 2)) (*.f64 24 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2)))))) (*.f64 1/128 (pow.f64 (+.f64 (*.f64 2 y) y) 2)))) (pow.f64 (pow.f64 x 3) 1/4)))","(fma.f64 1/8 (*.f64 (pow.f64 (pow.f64 x -5) 1/4) (*.f64 3 y)) (fma.f64 (pow.f64 (pow.f64 x -13) 1/4) (fma.f64 1/192 (fma.f64 -12 (pow.f64 (*.f64 3 y) 2) (*.f64 24 (*.f64 3 (*.f64 y y)))) (*.f64 1/128 (pow.f64 (*.f64 3 y) 2))) (pow.f64 (pow.f64 x 3) 1/4)))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 21)) 1/4) (+.f64 (*.f64 1/5760 (+.f64 (*.f64 720 (pow.f64 y 3)) (+.f64 (*.f64 240 (pow.f64 (+.f64 (*.f64 2 y) y) 3)) (*.f64 -720 (*.f64 (+.f64 (*.f64 2 y) y) (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2)))))))) (+.f64 (*.f64 1/1536 (*.f64 (+.f64 (*.f64 2 y) y) (+.f64 (*.f64 -12 (pow.f64 (+.f64 (*.f64 2 y) y) 2)) (*.f64 24 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2))))))) (*.f64 1/3072 (pow.f64 (+.f64 (*.f64 2 y) y) 3))))) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/4) (+.f64 (*.f64 2 y) y))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 13)) 1/4) (+.f64 (*.f64 1/192 (+.f64 (*.f64 -12 (pow.f64 (+.f64 (*.f64 2 y) y) 2)) (*.f64 24 (+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2)))))) (*.f64 1/128 (pow.f64 (+.f64 (*.f64 2 y) y) 2)))) (pow.f64 (pow.f64 x 3) 1/4))))","(fma.f64 (pow.f64 (pow.f64 x -21) 1/4) (fma.f64 1/5760 (fma.f64 720 (pow.f64 y 3) (fma.f64 240 (pow.f64 (*.f64 3 y) 3) (*.f64 -720 (*.f64 (*.f64 3 (*.f64 y y)) (*.f64 3 y))))) (fma.f64 1/1536 (*.f64 (*.f64 3 y) (fma.f64 -12 (pow.f64 (*.f64 3 y) 2) (*.f64 24 (*.f64 3 (*.f64 y y))))) (*.f64 1/3072 (pow.f64 (*.f64 3 y) 3)))) (fma.f64 1/8 (*.f64 (pow.f64 (pow.f64 x -5) 1/4) (*.f64 3 y)) (fma.f64 (pow.f64 (pow.f64 x -13) 1/4) (fma.f64 1/192 (fma.f64 -12 (pow.f64 (*.f64 3 y) 2) (*.f64 24 (*.f64 3 (*.f64 y y)))) (*.f64 1/128 (pow.f64 (*.f64 3 y) 2))) (pow.f64 (pow.f64 x 3) 1/4))))","(pow.f64 (*.f64 -1 (pow.f64 x 3)) 1/4)","(pow.f64 (neg.f64 (pow.f64 x 3)) 1/4)","(+.f64 (pow.f64 (*.f64 -1 (pow.f64 x 3)) 1/4) (*.f64 1/8 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 5)) 1/4) (+.f64 (*.f64 2 y) y))))","(+.f64 (pow.f64 (neg.f64 (pow.f64 x 3)) 1/4) (*.f64 1/8 (*.f64 (pow.f64 (neg.f64 (pow.f64 x -5)) 1/4) (*.f64 3 y))))","(+.f64 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 13)) 1/4) (+.f64 (*.f64 1/128 (pow.f64 (+.f64 (*.f64 2 y) y) 2)) (*.f64 1/192 (+.f64 (*.f64 -12 (pow.f64 (+.f64 (*.f64 2 y) y) 2)) (*.f64 24 (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 y 2))))))) (+.f64 (pow.f64 (*.f64 -1 (pow.f64 x 3)) 1/4) (*.f64 1/8 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 5)) 1/4) (+.f64 (*.f64 2 y) y)))))","(fma.f64 (pow.f64 (neg.f64 (pow.f64 x -13)) 1/4) (fma.f64 1/192 (fma.f64 -12 (pow.f64 (*.f64 3 y) 2) (*.f64 24 (*.f64 3 (*.f64 y y)))) (*.f64 1/128 (pow.f64 (*.f64 3 y) 2))) (+.f64 (pow.f64 (neg.f64 (pow.f64 x 3)) 1/4) (*.f64 1/8 (*.f64 (pow.f64 (neg.f64 (pow.f64 x -5)) 1/4) (*.f64 3 y)))))","(+.f64 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 21)) 1/4) (+.f64 (*.f64 1/1536 (*.f64 (+.f64 (*.f64 2 y) y) (+.f64 (*.f64 -12 (pow.f64 (+.f64 (*.f64 2 y) y) 2)) (*.f64 24 (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 y 2)))))) (+.f64 (*.f64 1/3072 (pow.f64 (+.f64 (*.f64 2 y) y) 3)) (*.f64 1/5760 (+.f64 (*.f64 720 (pow.f64 y 3)) (+.f64 (*.f64 240 (pow.f64 (+.f64 (*.f64 2 y) y) 3)) (*.f64 -720 (*.f64 (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 y 2)) (+.f64 (*.f64 2 y) y))))))))) (+.f64 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 13)) 1/4) (+.f64 (*.f64 1/128 (pow.f64 (+.f64 (*.f64 2 y) y) 2)) (*.f64 1/192 (+.f64 (*.f64 -12 (pow.f64 (+.f64 (*.f64 2 y) y) 2)) (*.f64 24 (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 y 2))))))) (+.f64 (pow.f64 (*.f64 -1 (pow.f64 x 3)) 1/4) (*.f64 1/8 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 5)) 1/4) (+.f64 (*.f64 2 y) y))))))","(fma.f64 (pow.f64 (neg.f64 (pow.f64 x -21)) 1/4) (fma.f64 1/5760 (fma.f64 720 (pow.f64 y 3) (fma.f64 240 (pow.f64 (*.f64 3 y) 3) (*.f64 -720 (*.f64 (*.f64 3 (*.f64 y y)) (*.f64 3 y))))) (fma.f64 1/1536 (*.f64 (*.f64 3 y) (fma.f64 -12 (pow.f64 (*.f64 3 y) 2) (*.f64 24 (*.f64 3 (*.f64 y y))))) (*.f64 1/3072 (pow.f64 (*.f64 3 y) 3)))) (fma.f64 (pow.f64 (neg.f64 (pow.f64 x -13)) 1/4) (fma.f64 1/192 (fma.f64 -12 (pow.f64 (*.f64 3 y) 2) (*.f64 24 (*.f64 3 (*.f64 y y)))) (*.f64 1/128 (pow.f64 (*.f64 3 y) 2))) (+.f64 (pow.f64 (neg.f64 (pow.f64 x 3)) 1/4) (*.f64 1/8 (*.f64 (pow.f64 (neg.f64 (pow.f64 x -5)) 1/4) (*.f64 3 y))))))","(*.f64 (pow.f64 (pow.f64 1 3) 1/8) (pow.f64 (pow.f64 x 3) 1/4))","(pow.f64 (pow.f64 x 3) 1/4)","(+.f64 (*.f64 3/8 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/4)))) (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (pow.f64 (pow.f64 x 3) 1/4)))","(fma.f64 3/8 (*.f64 y (pow.f64 (pow.f64 x -5) 1/4)) (pow.f64 (pow.f64 x 3) 1/4))","(+.f64 (*.f64 3/8 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/4)))) (+.f64 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (pow.f64 (pow.f64 x 3) 1/4)) (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 9/128 (/.f64 1 (pow.f64 x 4))) (*.f64 1/16 (+.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (pow.f64 x 6))) (*.f64 -1 (/.f64 (pow.f64 (+.f64 (pow.f64 x 4) (*.f64 2 (pow.f64 x 4))) 2) (pow.f64 x 12))))))) (pow.f64 (pow.f64 x 3) 1/4)))))","(fma.f64 3/8 (*.f64 y (pow.f64 (pow.f64 x -5) 1/4)) (*.f64 (pow.f64 (pow.f64 x 3) 1/4) (+.f64 (*.f64 (*.f64 y y) (fma.f64 9/128 (pow.f64 x -4) (*.f64 1/16 (fma.f64 2 (*.f64 (*.f64 3 (*.f64 x x)) (pow.f64 x -6)) (neg.f64 (/.f64 (*.f64 9 (pow.f64 x (*.f64 2 4))) (pow.f64 x 12))))))) 1)))","(+.f64 (*.f64 3/8 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/4)))) (+.f64 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 1/48 (+.f64 (*.f64 2 (/.f64 (pow.f64 (+.f64 (pow.f64 x 4) (*.f64 2 (pow.f64 x 4))) 3) (pow.f64 x 18))) (+.f64 (*.f64 -6 (/.f64 (*.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (+.f64 (pow.f64 x 4) (*.f64 2 (pow.f64 x 4)))) (pow.f64 x 12))) (*.f64 6 (/.f64 1 (pow.f64 x 6)))))) (+.f64 (*.f64 3/128 (/.f64 (+.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (pow.f64 x 6))) (*.f64 -1 (/.f64 (pow.f64 (+.f64 (pow.f64 x 4) (*.f64 2 (pow.f64 x 4))) 2) (pow.f64 x 12)))) (pow.f64 x 2))) (*.f64 9/1024 (/.f64 1 (pow.f64 x 6)))))) (pow.f64 (pow.f64 x 3) 1/4))) (+.f64 (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (pow.f64 (pow.f64 x 3) 1/4)) (*.f64 (pow.f64 (pow.f64 1 3) 1/8) (*.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 9/128 (/.f64 1 (pow.f64 x 4))) (*.f64 1/16 (+.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (pow.f64 x 6))) (*.f64 -1 (/.f64 (pow.f64 (+.f64 (pow.f64 x 4) (*.f64 2 (pow.f64 x 4))) 2) (pow.f64 x 12))))))) (pow.f64 (pow.f64 x 3) 1/4))))))","(+.f64 (fma.f64 3/8 (*.f64 y (pow.f64 (pow.f64 x -5) 1/4)) (*.f64 (pow.f64 (pow.f64 x 3) 1/4) (+.f64 (*.f64 (*.f64 y y) (fma.f64 9/128 (pow.f64 x -4) (*.f64 1/16 (fma.f64 2 (*.f64 (*.f64 3 (*.f64 x x)) (pow.f64 x -6)) (neg.f64 (/.f64 (*.f64 9 (pow.f64 x (*.f64 2 4))) (pow.f64 x 12))))))) 1))) (*.f64 (pow.f64 y 3) (*.f64 (fma.f64 1/48 (fma.f64 2 (/.f64 (pow.f64 (*.f64 3 (pow.f64 x 4)) 3) (pow.f64 x 18)) (fma.f64 -6 (/.f64 (*.f64 (*.f64 3 (*.f64 x x)) (*.f64 3 (pow.f64 x 4))) (pow.f64 x 12)) (*.f64 6 (pow.f64 x -6)))) (fma.f64 3/128 (/.f64 (fma.f64 2 (*.f64 (*.f64 3 (*.f64 x x)) (pow.f64 x -6)) (neg.f64 (/.f64 (*.f64 9 (pow.f64 x (*.f64 2 4))) (pow.f64 x 12)))) (*.f64 x x)) (*.f64 9/1024 (pow.f64 x -6)))) (pow.f64 (pow.f64 x 3) 1/4))))","(pow.f64 (pow.f64 y 3) 1/8)","(pow.f64 y 3/8)","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/8) (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)))) (pow.f64 (pow.f64 y 3) 1/8))","(fma.f64 1/8 (*.f64 (pow.f64 y (*.f64 -5 1/8)) (*.f64 3 (*.f64 x x))) (pow.f64 y 3/8))","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/8) (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 13)) 1/8) (+.f64 (*.f64 1/16 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2)) (*.f64 2 (+.f64 (pow.f64 x 4) (*.f64 2 (pow.f64 x 4)))))) (*.f64 1/128 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2)))) (pow.f64 (pow.f64 y 3) 1/8)))","(fma.f64 1/8 (*.f64 (pow.f64 y (*.f64 -5 1/8)) (*.f64 3 (*.f64 x x))) (fma.f64 (pow.f64 y (*.f64 -13 1/8)) (fma.f64 1/16 (-.f64 (*.f64 3 (*.f64 2 (pow.f64 x 4))) (*.f64 9 (pow.f64 x 4))) (*.f64 1/128 (*.f64 9 (pow.f64 x 4)))) (pow.f64 y 3/8)))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 21)) 1/8) (+.f64 (*.f64 1/128 (*.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2)) (*.f64 2 (+.f64 (pow.f64 x 4) (*.f64 2 (pow.f64 x 4))))))) (+.f64 (*.f64 1/48 (+.f64 (*.f64 6 (pow.f64 x 6)) (+.f64 (*.f64 2 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 3)) (*.f64 -6 (*.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (+.f64 (pow.f64 x 4) (*.f64 2 (pow.f64 x 4)))))))) (*.f64 1/3072 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 3))))) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/8) (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 13)) 1/8) (+.f64 (*.f64 1/16 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2)) (*.f64 2 (+.f64 (pow.f64 x 4) (*.f64 2 (pow.f64 x 4)))))) (*.f64 1/128 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2)))) (pow.f64 (pow.f64 y 3) 1/8))))","(fma.f64 (pow.f64 y (*.f64 -21 1/8)) (fma.f64 1/128 (*.f64 (*.f64 3 (*.f64 x x)) (-.f64 (*.f64 3 (*.f64 2 (pow.f64 x 4))) (*.f64 9 (pow.f64 x 4)))) (fma.f64 1/48 (fma.f64 6 (pow.f64 x 6) (fma.f64 2 (pow.f64 (*.f64 3 (*.f64 x x)) 3) (*.f64 (*.f64 -6 (*.f64 3 (*.f64 x x))) (*.f64 3 (pow.f64 x 4))))) (*.f64 1/3072 (pow.f64 (*.f64 3 (*.f64 x x)) 3)))) (fma.f64 1/8 (*.f64 (pow.f64 y (*.f64 -5 1/8)) (*.f64 3 (*.f64 x x))) (fma.f64 (pow.f64 y (*.f64 -13 1/8)) (fma.f64 1/16 (-.f64 (*.f64 3 (*.f64 2 (pow.f64 x 4))) (*.f64 9 (pow.f64 x 4))) (*.f64 1/128 (*.f64 9 (pow.f64 x 4)))) (pow.f64 y 3/8))))","(exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y))))))","(pow.f64 (exp.f64 1/8) (+.f64 (log.f64 -1) (*.f64 -3 (neg.f64 (log.f64 (neg.f64 y))))))","(+.f64 (*.f64 1/8 (/.f64 (*.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y))))))) y)) (exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y)))))))","(fma.f64 1/8 (/.f64 (*.f64 (*.f64 3 (*.f64 x x)) (pow.f64 (exp.f64 1/8) (+.f64 (log.f64 -1) (*.f64 -3 (neg.f64 (log.f64 (neg.f64 y))))))) y) (pow.f64 (exp.f64 1/8) (+.f64 (log.f64 -1) (*.f64 -3 (neg.f64 (log.f64 (neg.f64 y)))))))","(+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/16 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2)) (*.f64 -2 (+.f64 (*.f64 -2 (pow.f64 x 4)) (*.f64 -1 (pow.f64 x 4)))))) (*.f64 1/128 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2))) (exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y))))))) (pow.f64 y 2)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y))))))) y)) (exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y))))))))","(+.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 1/8) (+.f64 (log.f64 -1) (*.f64 -3 (neg.f64 (log.f64 (neg.f64 y)))))) (fma.f64 1/16 (-.f64 (*.f64 -2 (*.f64 (pow.f64 x 4) -3)) (*.f64 9 (pow.f64 x 4))) (*.f64 1/128 (*.f64 9 (pow.f64 x 4))))) (*.f64 y y)) (fma.f64 1/8 (/.f64 (*.f64 (*.f64 3 (*.f64 x x)) (pow.f64 (exp.f64 1/8) (+.f64 (log.f64 -1) (*.f64 -3 (neg.f64 (log.f64 (neg.f64 y))))))) y) (pow.f64 (exp.f64 1/8) (+.f64 (log.f64 -1) (*.f64 -3 (neg.f64 (log.f64 (neg.f64 y))))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1/3072 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 3)) (+.f64 (*.f64 1/48 (+.f64 (*.f64 -6 (*.f64 (+.f64 (*.f64 -2 (pow.f64 x 4)) (*.f64 -1 (pow.f64 x 4))) (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)))) (+.f64 (*.f64 -2 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 3)) (*.f64 -6 (pow.f64 x 6))))) (*.f64 -1/128 (*.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2)) (*.f64 -2 (+.f64 (*.f64 -2 (pow.f64 x 4)) (*.f64 -1 (pow.f64 x 4))))))))) (exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y))))))) (pow.f64 y 3))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) (exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y))))))) y)) (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y)))))) (+.f64 (*.f64 1/16 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2)) (*.f64 -2 (+.f64 (*.f64 -2 (pow.f64 x 4)) (*.f64 -1 (pow.f64 x 4)))))) (*.f64 1/128 (pow.f64 (+.f64 (*.f64 2 (pow.f64 x 2)) (pow.f64 x 2)) 2)))) (pow.f64 y 2)) (exp.f64 (*.f64 1/8 (+.f64 (log.f64 -1) (*.f64 -3 (log.f64 (/.f64 -1 y)))))))))","(-.f64 (+.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 1/8) (+.f64 (log.f64 -1) (*.f64 -3 (neg.f64 (log.f64 (neg.f64 y)))))) (fma.f64 1/16 (-.f64 (*.f64 -2 (*.f64 (pow.f64 x 4) -3)) (*.f64 9 (pow.f64 x 4))) (*.f64 1/128 (*.f64 9 (pow.f64 x 4))))) (*.f64 y y)) (fma.f64 1/8 (/.f64 (*.f64 (*.f64 3 (*.f64 x x)) (pow.f64 (exp.f64 1/8) (+.f64 (log.f64 -1) (*.f64 -3 (neg.f64 (log.f64 (neg.f64 y))))))) y) (pow.f64 (exp.f64 1/8) (+.f64 (log.f64 -1) (*.f64 -3 (neg.f64 (log.f64 (neg.f64 y)))))))) (*.f64 (*.f64 (fma.f64 -1/3072 (pow.f64 (*.f64 3 (*.f64 x x)) 3) (fma.f64 1/48 (fma.f64 -6 (*.f64 (*.f64 (pow.f64 x 4) -3) (*.f64 3 (*.f64 x x))) (fma.f64 -2 (pow.f64 (*.f64 3 (*.f64 x x)) 3) (*.f64 -6 (pow.f64 x 6)))) (*.f64 -1/128 (*.f64 (*.f64 3 (*.f64 x x)) (-.f64 (*.f64 -2 (*.f64 (pow.f64 x 4) -3)) (*.f64 9 (pow.f64 x 4))))))) (pow.f64 (exp.f64 1/8) (+.f64 (log.f64 -1) (*.f64 -3 (neg.f64 (log.f64 (neg.f64 y))))))) (pow.f64 y -3)))","(pow.f64 (pow.f64 y 3) 1/4)","(pow.f64 y 3/4)","(+.f64 (pow.f64 (pow.f64 y 3) 1/4) (*.f64 3/4 (*.f64 (pow.f64 (/.f64 1 y) 1/4) (pow.f64 x 2))))","(+.f64 (pow.f64 y 3/4) (*.f64 (*.f64 3/4 (pow.f64 (/.f64 1 y) 1/4)) (*.f64 x x)))","(+.f64 (pow.f64 (pow.f64 y 3) 1/4) (+.f64 (*.f64 -3/32 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/4) (pow.f64 x 4))) (*.f64 3/4 (*.f64 (pow.f64 (/.f64 1 y) 1/4) (pow.f64 x 2)))))","(+.f64 (pow.f64 y 3/4) (fma.f64 -3/32 (*.f64 (pow.f64 y (*.f64 -5 1/4)) (pow.f64 x 4)) (*.f64 (*.f64 3/4 (pow.f64 (/.f64 1 y) 1/4)) (*.f64 x x))))","(+.f64 (pow.f64 (pow.f64 y 3) 1/4) (+.f64 (*.f64 5/128 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 9)) 1/4) (pow.f64 x 6))) (+.f64 (*.f64 -3/32 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/4) (pow.f64 x 4))) (*.f64 3/4 (*.f64 (pow.f64 (/.f64 1 y) 1/4) (pow.f64 x 2))))))","(+.f64 (pow.f64 y 3/4) (fma.f64 5/128 (*.f64 (pow.f64 y (*.f64 -9 1/4)) (pow.f64 x 6)) (fma.f64 -3/32 (*.f64 (pow.f64 y (*.f64 -5 1/4)) (pow.f64 x 4)) (*.f64 (*.f64 3/4 (pow.f64 (/.f64 1 y) 1/4)) (*.f64 x x)))))","(sqrt.f64 (pow.f64 x 3))","(+.f64 (sqrt.f64 (pow.f64 x 3)) (*.f64 3/4 (*.f64 y (sqrt.f64 (/.f64 1 x)))))","(+.f64 (sqrt.f64 (pow.f64 x 3)) (*.f64 (*.f64 3/4 y) (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 (+.f64 (*.f64 -3/8 (pow.f64 y 2)) (*.f64 9/32 (pow.f64 y 2))) (sqrt.f64 (/.f64 1 (pow.f64 x 5)))) (+.f64 (sqrt.f64 (pow.f64 x 3)) (*.f64 3/4 (*.f64 y (sqrt.f64 (/.f64 1 x))))))","(fma.f64 (*.f64 (*.f64 y y) -3/32) (sqrt.f64 (pow.f64 x -5)) (+.f64 (sqrt.f64 (pow.f64 x 3)) (*.f64 (*.f64 3/4 y) (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 (+.f64 (*.f64 -3/8 (pow.f64 y 2)) (*.f64 9/32 (pow.f64 y 2))) (sqrt.f64 (/.f64 1 (pow.f64 x 5)))) (+.f64 (sqrt.f64 (pow.f64 x 3)) (+.f64 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 x 9))) (+.f64 (*.f64 -9/32 (pow.f64 y 3)) (+.f64 (*.f64 9/128 (pow.f64 y 3)) (*.f64 1/4 (pow.f64 y 3))))) (*.f64 3/4 (*.f64 y (sqrt.f64 (/.f64 1 x)))))))","(fma.f64 (*.f64 (*.f64 y y) -3/32) (sqrt.f64 (pow.f64 x -5)) (+.f64 (sqrt.f64 (pow.f64 x 3)) (fma.f64 (sqrt.f64 (pow.f64 x -9)) (*.f64 (pow.f64 y 3) (+.f64 41/128 -9/32)) (*.f64 (*.f64 3/4 y) (sqrt.f64 (/.f64 1 x))))))","(*.f64 (pow.f64 1 1/4) (sqrt.f64 (pow.f64 x 3)))","(sqrt.f64 (pow.f64 x 3))","(+.f64 (*.f64 (pow.f64 1 1/4) (sqrt.f64 (pow.f64 x 3))) (*.f64 3/4 (*.f64 (pow.f64 1 1/4) (*.f64 y (sqrt.f64 (/.f64 1 x))))))","(+.f64 (sqrt.f64 (pow.f64 x 3)) (*.f64 (*.f64 3/4 y) (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 -3/32 (*.f64 (pow.f64 1 1/4) (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 1 (pow.f64 x 5)))))) (+.f64 (*.f64 (pow.f64 1 1/4) (sqrt.f64 (pow.f64 x 3))) (*.f64 3/4 (*.f64 (pow.f64 1 1/4) (*.f64 y (sqrt.f64 (/.f64 1 x)))))))","(fma.f64 -3/32 (*.f64 (*.f64 y y) (sqrt.f64 (pow.f64 x -5))) (+.f64 (sqrt.f64 (pow.f64 x 3)) (*.f64 (*.f64 3/4 y) (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 -3/32 (*.f64 (pow.f64 1 1/4) (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 1 (pow.f64 x 5)))))) (+.f64 (*.f64 5/128 (*.f64 (pow.f64 1 1/4) (*.f64 (pow.f64 y 3) (sqrt.f64 (/.f64 1 (pow.f64 x 9)))))) (+.f64 (*.f64 (pow.f64 1 1/4) (sqrt.f64 (pow.f64 x 3))) (*.f64 3/4 (*.f64 (pow.f64 1 1/4) (*.f64 y (sqrt.f64 (/.f64 1 x))))))))","(fma.f64 -3/32 (*.f64 (*.f64 y y) (sqrt.f64 (pow.f64 x -5))) (fma.f64 5/128 (*.f64 (pow.f64 y 3) (sqrt.f64 (pow.f64 x -9))) (+.f64 (sqrt.f64 (pow.f64 x 3)) (*.f64 (*.f64 3/4 y) (sqrt.f64 (/.f64 1 x))))))","(pow.f64 (pow.f64 y 3) 1/4)","(pow.f64 y 3/4)","(+.f64 (pow.f64 (pow.f64 y 3) 1/4) (*.f64 3/4 (*.f64 (pow.f64 (/.f64 1 y) 1/4) (pow.f64 x 2))))","(+.f64 (pow.f64 y 3/4) (*.f64 (*.f64 3/4 (pow.f64 (/.f64 1 y) 1/4)) (*.f64 x x)))","(+.f64 (pow.f64 (pow.f64 y 3) 1/4) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/4) (+.f64 (*.f64 9/32 (pow.f64 x 4)) (*.f64 -3/8 (pow.f64 x 4)))) (*.f64 3/4 (*.f64 (pow.f64 (/.f64 1 y) 1/4) (pow.f64 x 2)))))","(+.f64 (pow.f64 y 3/4) (fma.f64 (pow.f64 y (*.f64 -5 1/4)) (*.f64 (pow.f64 x 4) -3/32) (*.f64 (*.f64 3/4 (pow.f64 (/.f64 1 y) 1/4)) (*.f64 x x))))","(+.f64 (pow.f64 (pow.f64 y 3) 1/4) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 9)) 1/4) (+.f64 (*.f64 1/4 (pow.f64 x 6)) (+.f64 (*.f64 -9/32 (pow.f64 x 6)) (*.f64 9/128 (pow.f64 x 6))))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/4) (+.f64 (*.f64 9/32 (pow.f64 x 4)) (*.f64 -3/8 (pow.f64 x 4)))) (*.f64 3/4 (*.f64 (pow.f64 (/.f64 1 y) 1/4) (pow.f64 x 2))))))","(+.f64 (pow.f64 y 3/4) (fma.f64 (pow.f64 y (*.f64 -9 1/4)) (*.f64 (pow.f64 x 6) (+.f64 -27/128 1/4)) (fma.f64 (pow.f64 y (*.f64 -5 1/4)) (*.f64 (pow.f64 x 4) -3/32) (*.f64 (*.f64 3/4 (pow.f64 (/.f64 1 y) 1/4)) (*.f64 x x)))))","(exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(pow.f64 (exp.f64 3/4) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))","(+.f64 (*.f64 3/4 (/.f64 (*.f64 (exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (pow.f64 x 2)) y)) (exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))","(fma.f64 3/4 (/.f64 (*.f64 (pow.f64 (exp.f64 3/4) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (*.f64 x x)) y) (pow.f64 (exp.f64 3/4) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))))","(+.f64 (*.f64 3/4 (/.f64 (*.f64 (exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (pow.f64 x 2)) y)) (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 9/32 (pow.f64 x 4)) (*.f64 -3/8 (pow.f64 x 4)))) (pow.f64 y 2)) (exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))))","(+.f64 (fma.f64 3/4 (/.f64 (*.f64 (pow.f64 (exp.f64 3/4) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (*.f64 x x)) y) (pow.f64 (exp.f64 3/4) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))) (/.f64 (*.f64 (pow.f64 (exp.f64 3/4) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (*.f64 (pow.f64 x 4) -3/32)) (*.f64 y y)))","(+.f64 (*.f64 3/4 (/.f64 (*.f64 (exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (pow.f64 x 2)) y)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 9/32 (pow.f64 x 4)) (*.f64 -3/8 (pow.f64 x 4))) (exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 (exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 -1/4 (pow.f64 x 6)) (+.f64 (*.f64 9/32 (pow.f64 x 6)) (*.f64 -9/128 (pow.f64 x 6))))) (pow.f64 y 3))) (exp.f64 (*.f64 3/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))","(+.f64 (-.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 3/4) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (*.f64 (pow.f64 x 4) -3/32)) (*.f64 y y)) (*.f64 (*.f64 (pow.f64 (exp.f64 3/4) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (*.f64 (pow.f64 x 6) (+.f64 27/128 -1/4))) (pow.f64 y -3))) (fma.f64 3/4 (/.f64 (*.f64 (pow.f64 (exp.f64 3/4) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (*.f64 x x)) y) (pow.f64 (exp.f64 3/4) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))))","(sqrt.f64 y)","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (*.f64 x x)) (sqrt.f64 y))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y)))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 y -3)) (pow.f64 x 4)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (*.f64 x x)) (sqrt.f64 y)))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 5))) (pow.f64 x 6))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))))","(fma.f64 1/16 (*.f64 (sqrt.f64 (pow.f64 y -5)) (pow.f64 x 6)) (fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 y -3)) (pow.f64 x 4)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (*.f64 x x)) (sqrt.f64 y))))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (*.f64 (*.f64 y y) (pow.f64 x -3)) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))","(fma.f64 1/16 (*.f64 (pow.f64 y 3) (pow.f64 x -5)) (fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (*.f64 (*.f64 y y) (pow.f64 x -3)) x)))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3)))))","(fma.f64 -1/2 (/.f64 y x) (-.f64 (*.f64 (*.f64 1/8 (*.f64 y y)) (pow.f64 x -3)) x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))))))","(fma.f64 -1/2 (/.f64 y x) (fma.f64 -1/16 (*.f64 (pow.f64 y 3) (pow.f64 x -5)) (-.f64 (*.f64 (*.f64 1/8 (*.f64 y y)) (pow.f64 x -3)) x)))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (*.f64 (*.f64 y y) (pow.f64 x -3)) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))","(fma.f64 1/16 (*.f64 (pow.f64 y 3) (pow.f64 x -5)) (fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (*.f64 (*.f64 y y) (pow.f64 x -3)) x)))"]],"time":346.512939453125,"type":"simplify"},{"compiler":[[9527,6467]],"time":109.541015625,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))","done",24.455410009768443],["(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","fresh",42.57440799941526],["(*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) (cbrt.f64 (fma.f64 x x y)))","next",24.45703125],["(sqrt.f64 (fma.f64 x x y))","done",24.2578125],["(fma.f64 1/2 (/.f64 y x) x)","fresh",40.76114324794199]],"compiler":[[16,9],[9,6],[14,7],[7,4],[8,5],[9,6],[14,7],[8,5]],"count":[[280,5]],"kept":[{"done":[1,1],"fresh":[3,2],"new":[275,1],"picked":[1,1]}],"min-error":[0],"time":57.177001953125,"type":"prune"},{"compiler":[[36,7]],"locations":[["(cbrt.f64 (sqrt.f64 (fma.f64 x x y)))",0.109375,true],["(*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) (cbrt.f64 (fma.f64 x x y)))",0.3125,true],["(sqrt.f64 (fma.f64 x x y))",22.647089709685215,false],["(cbrt.f64 (fma.f64 x x y))",23.181386581319494,true]],"time":6.067138671875,"type":"localize"},{"count":[[3,48]],"series":[["(cbrt.f64 (sqrt.f64 (fma.f64 x x y)))","y","-inf",0.657958984375],["(cbrt.f64 (sqrt.f64 (fma.f64 x x y)))","y","inf",0.969970703125],["(cbrt.f64 (sqrt.f64 (fma.f64 x x y)))","y","0",0.53076171875],["(cbrt.f64 (sqrt.f64 (fma.f64 x x y)))","x","-inf",0.4111328125],["(cbrt.f64 (sqrt.f64 (fma.f64 x x y)))","x","inf",0.65283203125],["(cbrt.f64 (sqrt.f64 (fma.f64 x x y)))","x","0",0.568115234375],["(*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) (cbrt.f64 (fma.f64 x x y)))","y","-inf",0.23583984375],["(*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) (cbrt.f64 (fma.f64 x x y)))","y","inf",0.256103515625],["(*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) (cbrt.f64 (fma.f64 x x y)))","y","0",0.179931640625],["(*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) (cbrt.f64 (fma.f64 x x y)))","x","-inf",0.23583984375],["(*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) (cbrt.f64 (fma.f64 x x y)))","x","inf",0.216064453125],["(*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) (cbrt.f64 (fma.f64 x x y)))","x","0",0.248046875],["(cbrt.f64 (fma.f64 x x y))","y","-inf",0.27197265625],["(cbrt.f64 (fma.f64 x x y))","y","inf",0.299072265625],["(cbrt.f64 (fma.f64 x x y))","y","0",1.5830078125],["(cbrt.f64 (fma.f64 x x y))","x","-inf",0.281005859375],["(cbrt.f64 (fma.f64 x x y))","x","inf",0.35498046875],["(cbrt.f64 (fma.f64 x x y))","x","0",0.866943359375]],"time":9.091796875,"type":"series"},{"count":[[3,109]],"inputs":[["(cbrt.f64 (fma.f64 x x y))","(*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) (cbrt.f64 (fma.f64 x x y)))","(cbrt.f64 (sqrt.f64 (fma.f64 x x y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 x x y)) (*.f64 (cbrt.f64 (fma.f64 x x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (fma.f64 x x y)) 0) (cbrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (fma.f64 x x y)) 1/2) (*.f64 (cbrt.f64 (fma.f64 x x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 x x y)) (*.f64 0 (cbrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (fma.f64 x x y))) (cbrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cbrt.f64 (fma.f64 x x y))) (*.f64 1/2 (cbrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y))) (pow.f64 (fma.f64 x x y) 1/12))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) (cbrt.f64 (pow.f64 (fma.f64 x x y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x y) 1/12) (sqrt.f64 (sqrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x y) 1/18) (cbrt.f64 (pow.f64 (fma.f64 x x y) 5/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 5/6)) (pow.f64 (fma.f64 x x y) 1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y)))) (neg.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) (cbrt.f64 (sqrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y)))) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 4/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 x x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (fma.f64 x x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x x y)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 1/18) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y))) 4/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (fma.f64 x x y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 x x y)) (*.f64 (sqrt.f64 (fma.f64 x x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 x x y)) 0) (sqrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 x x y)) 1/2) (*.f64 (sqrt.f64 (fma.f64 x x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 x x y)) (*.f64 0 (sqrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (fma.f64 x x y))) (sqrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (fma.f64 x x y))) (*.f64 1/2 (sqrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y))) (sqrt.f64 (sqrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y)))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y)))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y)))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 5/6))) (fabs.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y)))) (fabs.f64 (cbrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) 7/3)) (fabs.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (pow.f64 (fma.f64 x x y) 1/18)) (fabs.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y)))) (fabs.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 x x y) 2/3) (sqrt.f64 (fma.f64 x x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (fma.f64 x x y))) (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x y) 1/12) (cbrt.f64 (pow.f64 (fma.f64 x x y) 5/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x x y)) (pow.f64 (sqrt.f64 (fma.f64 x x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 x x y)) 0) (sqrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 5/6)) (cbrt.f64 (pow.f64 (fma.f64 x x y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x y) 1/18) (cbrt.f64 (pow.f64 (fma.f64 x x y) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) 7/3) (cbrt.f64 (cbrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) (cbrt.f64 (*.f64 (pow.f64 (fma.f64 x x y) 2/3) (sqrt.f64 (fma.f64 x x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 2/3)) (cbrt.f64 (pow.f64 (fma.f64 x x y) 5/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) (pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 x x y) 2/3) (sqrt.f64 (fma.f64 x x y)))) (cbrt.f64 (cbrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 4/3)) (pow.f64 (fma.f64 x x y) 1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) (cbrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x y)) (cbrt.f64 (sqrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fma.f64 x x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 x x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x y) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (fma.f64 x x y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x x y) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (fma.f64 x x y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) 0) (cbrt.f64 (sqrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) 1/2) (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) (*.f64 0 (cbrt.f64 (sqrt.f64 (fma.f64 x x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (sqrt.f64 (fma.f64 x x y)))) (cbrt.f64 (sqrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cbrt.f64 (sqrt.f64 (fma.f64 x x y)))) (*.f64 1/2 (cbrt.f64 (sqrt.f64 (fma.f64 x x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x y) 1/12) (pow.f64 (fma.f64 x x y) 1/12))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x y) 1/18) (cbrt.f64 (cbrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) 7/3)) (cbrt.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y))))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 1/18)) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y)))) (cbrt.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 x x y) 2/3) (sqrt.f64 (fma.f64 x x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) (pow.f64 (fma.f64 x x y) 1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 x x y) 1/12) -1) (*.f64 (pow.f64 (fma.f64 x x y) 1/12) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 x x y) 1/12) 1) (*.f64 (pow.f64 (fma.f64 x x y) 1/12) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (pow.f64 (fma.f64 x x y) 1/12)) (*.f64 -1 (pow.f64 (fma.f64 x x y) 1/12)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 5/6))) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 2) 1/12)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x y) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 1/18) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x x y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x y))) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 1/12) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (sqrt.f64 (fma.f64 x x y)))))))"]],"rules":[["egg-rr",31],["egg-rr",47],["egg-rr",31]],"time":31.4970703125,"type":"rewrite"},{"count":[[157,188]],"inputs":[["(pow.f64 y 1/3)","(+.f64 (pow.f64 y 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 x 2))))","(+.f64 (pow.f64 y 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 x 2))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 4)))))","(+.f64 (pow.f64 y 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 x 2))) (+.f64 (*.f64 5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 8)) 1/3) (pow.f64 x 6))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 4))))))","(pow.f64 (pow.f64 x 2) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) y)) (pow.f64 (pow.f64 x 2) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) y)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (pow.f64 (pow.f64 x 2) 1/3)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) y)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3))) (*.f64 1/27 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3)))))))))","(sqrt.f64 y)","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y)))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 5))) (pow.f64 x 6))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))","(*.f64 -1 x)","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3)))))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))))))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))","(pow.f64 y 1/6)","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/6) (pow.f64 x 2))) (pow.f64 y 1/6))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/6) (pow.f64 x 2))) (+.f64 (*.f64 -5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 11)) 1/6) (pow.f64 x 4))) (pow.f64 y 1/6)))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/6) (pow.f64 x 2))) (+.f64 (*.f64 -5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 11)) 1/6) (pow.f64 x 4))) (+.f64 (*.f64 55/1296 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 17)) 1/6) (pow.f64 x 6))) (pow.f64 y 1/6))))","(pow.f64 x 1/3)","(+.f64 (pow.f64 x 1/3) (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/3) y)))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/3) y)) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 11)) 1/3) (+.f64 (*.f64 -1/12 (pow.f64 y 2)) (*.f64 1/72 (pow.f64 y 2))))))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/3) y)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 17)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 y 3)) (+.f64 (*.f64 1/1296 (pow.f64 y 3)) (*.f64 -1/72 (pow.f64 y 3))))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 11)) 1/3) (+.f64 (*.f64 -1/12 (pow.f64 y 2)) (*.f64 1/72 (pow.f64 y 2)))))))","(pow.f64 (*.f64 -1 x) 1/3)","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 5)) 1/3) y)) (pow.f64 (*.f64 -1 x) 1/3))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 5)) 1/3) y)) (+.f64 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 11)) 1/3) (+.f64 (*.f64 -1/12 (pow.f64 y 2)) (*.f64 1/72 (pow.f64 y 2)))) (pow.f64 (*.f64 -1 x) 1/3)))","(+.f64 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 17)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 y 3)) (+.f64 (*.f64 1/1296 (pow.f64 y 3)) (*.f64 -1/72 (pow.f64 y 3))))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 5)) 1/3) y)) (+.f64 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 11)) 1/3) (+.f64 (*.f64 -1/12 (pow.f64 y 2)) (*.f64 1/72 (pow.f64 y 2)))) (pow.f64 (*.f64 -1 x) 1/3))))","(*.f64 (sqrt.f64 1) (pow.f64 x 1/3))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/3) y)) (*.f64 (sqrt.f64 1) (pow.f64 x 1/3)))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/3) y)) (+.f64 (*.f64 (sqrt.f64 1) (pow.f64 x 1/3)) (*.f64 -5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 11)) 1/3) (pow.f64 y 2)))))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/3) y)) (+.f64 (*.f64 (sqrt.f64 1) (pow.f64 x 1/3)) (+.f64 (*.f64 55/1296 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 17)) 1/3) (pow.f64 y 3))) (*.f64 -5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 11)) 1/3) (pow.f64 y 2))))))","(pow.f64 y 1/6)","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/6) (pow.f64 x 2))) (pow.f64 y 1/6))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/6) (pow.f64 x 2))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 11)) 1/6) (+.f64 (*.f64 1/72 (pow.f64 x 4)) (*.f64 -1/12 (pow.f64 x 4)))) (pow.f64 y 1/6)))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 17)) 1/6) (+.f64 (*.f64 -1/72 (pow.f64 x 6)) (+.f64 (*.f64 1/18 (pow.f64 x 6)) (*.f64 1/1296 (pow.f64 x 6))))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/6) (pow.f64 x 2))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 11)) 1/6) (+.f64 (*.f64 1/72 (pow.f64 x 4)) (*.f64 -1/12 (pow.f64 x 4)))) (pow.f64 y 1/6))))","(exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (pow.f64 x 2)) y)) (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (pow.f64 x 2)) y)) (+.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 1/72 (pow.f64 x 4)) (*.f64 -1/12 (pow.f64 x 4)))) (pow.f64 y 2))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (pow.f64 x 2)) y)) (+.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 1/72 (pow.f64 x 6)) (+.f64 (*.f64 -1/1296 (pow.f64 x 6)) (*.f64 -1/18 (pow.f64 x 6))))) (pow.f64 y 3))) (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 1/72 (pow.f64 x 4)) (*.f64 -1/12 (pow.f64 x 4)))) (pow.f64 y 2)))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 y 1/3)","(cbrt.f64 y)","(+.f64 (pow.f64 y 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 x 2))))","(+.f64 (cbrt.f64 y) (*.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 x x))))","(+.f64 (pow.f64 y 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 x 2))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 4)))))","(+.f64 (cbrt.f64 y) (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 x x)) (*.f64 -1/9 (*.f64 (cbrt.f64 (pow.f64 y -5)) (pow.f64 x 4)))))","(+.f64 (pow.f64 y 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 x 2))) (+.f64 (*.f64 5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 8)) 1/3) (pow.f64 x 6))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 4))))))","(+.f64 (cbrt.f64 y) (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 x x)) (fma.f64 5/81 (*.f64 (cbrt.f64 (pow.f64 y -8)) (pow.f64 x 6)) (*.f64 -1/9 (*.f64 (cbrt.f64 (pow.f64 y -5)) (pow.f64 x 4))))))","(pow.f64 (pow.f64 x 2) 1/3)","(cbrt.f64 (*.f64 x x))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) y)) (pow.f64 (pow.f64 x 2) 1/3))","(fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 x -4) 1/9) y) (cbrt.f64 (*.f64 x x)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) y)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (pow.f64 (pow.f64 x 2) 1/3)))","(fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 x -4) 1/9) y) (fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x -14) 1/9) (*.f64 y y)) (cbrt.f64 (*.f64 x x))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) y)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3))) (*.f64 1/27 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3)))))))))","(+.f64 (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 x -4) 1/9) y) (fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x -14) 1/9) (*.f64 y y)) (cbrt.f64 (*.f64 x x)))) (*.f64 (*.f64 -1/3 (cbrt.f64 (pow.f64 x -4))) (*.f64 (pow.f64 y 3) (*.f64 (cbrt.f64 (pow.f64 x -4)) (+.f64 -2/9 1/27)))))","(sqrt.f64 y)","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (*.f64 x x)) (sqrt.f64 y))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y)))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 y -3)) (pow.f64 x 4)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (*.f64 x x)) (sqrt.f64 y)))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 5))) (pow.f64 x 6))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))))","(fma.f64 1/16 (*.f64 (sqrt.f64 (pow.f64 y -5)) (pow.f64 x 6)) (fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 y -3)) (pow.f64 x 4)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (*.f64 x x)) (sqrt.f64 y))))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (*.f64 (*.f64 y y) (pow.f64 x -3)) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))","(fma.f64 1/16 (*.f64 (pow.f64 y 3) (pow.f64 x -5)) (fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (*.f64 (*.f64 y y) (pow.f64 x -3)) x)))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3)))))","(fma.f64 -1/2 (/.f64 y x) (-.f64 (*.f64 (*.f64 1/8 (*.f64 y y)) (pow.f64 x -3)) x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))))))","(fma.f64 -1/2 (/.f64 y x) (fma.f64 -1/16 (*.f64 (pow.f64 y 3) (pow.f64 x -5)) (-.f64 (*.f64 (*.f64 1/8 (*.f64 y y)) (pow.f64 x -3)) x)))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (*.f64 (*.f64 y y) (pow.f64 x -3)) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))","(fma.f64 1/16 (*.f64 (pow.f64 y 3) (pow.f64 x -5)) (fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (*.f64 (*.f64 y y) (pow.f64 x -3)) x)))","(pow.f64 y 1/6)","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/6) (pow.f64 x 2))) (pow.f64 y 1/6))","(fma.f64 1/6 (*.f64 (pow.f64 y (*.f64 -5 1/6)) (*.f64 x x)) (pow.f64 y 1/6))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/6) (pow.f64 x 2))) (+.f64 (*.f64 -5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 11)) 1/6) (pow.f64 x 4))) (pow.f64 y 1/6)))","(fma.f64 1/6 (*.f64 (pow.f64 y (*.f64 -5 1/6)) (*.f64 x x)) (fma.f64 -5/72 (*.f64 (pow.f64 y (*.f64 -11 1/6)) (pow.f64 x 4)) (pow.f64 y 1/6)))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/6) (pow.f64 x 2))) (+.f64 (*.f64 -5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 11)) 1/6) (pow.f64 x 4))) (+.f64 (*.f64 55/1296 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 17)) 1/6) (pow.f64 x 6))) (pow.f64 y 1/6))))","(fma.f64 1/6 (*.f64 (pow.f64 y (*.f64 -5 1/6)) (*.f64 x x)) (fma.f64 -5/72 (*.f64 (pow.f64 y (*.f64 -11 1/6)) (pow.f64 x 4)) (fma.f64 55/1296 (*.f64 (pow.f64 y (*.f64 -17 1/6)) (pow.f64 x 6)) (pow.f64 y 1/6))))","(pow.f64 x 1/3)","(cbrt.f64 x)","(+.f64 (pow.f64 x 1/3) (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/3) y)))","(fma.f64 1/6 (*.f64 (cbrt.f64 (pow.f64 x -5)) y) (cbrt.f64 x))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/3) y)) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 11)) 1/3) (+.f64 (*.f64 -1/12 (pow.f64 y 2)) (*.f64 1/72 (pow.f64 y 2))))))","(+.f64 (cbrt.f64 x) (fma.f64 1/6 (*.f64 (cbrt.f64 (pow.f64 x -5)) y) (*.f64 (cbrt.f64 (pow.f64 x -11)) (*.f64 (*.f64 y y) -5/72))))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/3) y)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 17)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 y 3)) (+.f64 (*.f64 1/1296 (pow.f64 y 3)) (*.f64 -1/72 (pow.f64 y 3))))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 11)) 1/3) (+.f64 (*.f64 -1/12 (pow.f64 y 2)) (*.f64 1/72 (pow.f64 y 2)))))))","(+.f64 (fma.f64 1/6 (*.f64 (cbrt.f64 (pow.f64 x -5)) y) (cbrt.f64 x)) (fma.f64 (cbrt.f64 (pow.f64 x -17)) (*.f64 (pow.f64 y 3) (+.f64 -17/1296 1/18)) (*.f64 (cbrt.f64 (pow.f64 x -11)) (*.f64 (*.f64 y y) -5/72))))","(pow.f64 (*.f64 -1 x) 1/3)","(cbrt.f64 (neg.f64 x))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 5)) 1/3) y)) (pow.f64 (*.f64 -1 x) 1/3))","(fma.f64 1/6 (*.f64 (cbrt.f64 (neg.f64 (pow.f64 x -5))) y) (cbrt.f64 (neg.f64 x)))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 5)) 1/3) y)) (+.f64 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 11)) 1/3) (+.f64 (*.f64 -1/12 (pow.f64 y 2)) (*.f64 1/72 (pow.f64 y 2)))) (pow.f64 (*.f64 -1 x) 1/3)))","(fma.f64 1/6 (*.f64 (cbrt.f64 (neg.f64 (pow.f64 x -5))) y) (fma.f64 (cbrt.f64 (neg.f64 (pow.f64 x -11))) (*.f64 (*.f64 y y) -5/72) (cbrt.f64 (neg.f64 x))))","(+.f64 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 17)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 y 3)) (+.f64 (*.f64 1/1296 (pow.f64 y 3)) (*.f64 -1/72 (pow.f64 y 3))))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 5)) 1/3) y)) (+.f64 (*.f64 (pow.f64 (/.f64 -1 (pow.f64 x 11)) 1/3) (+.f64 (*.f64 -1/12 (pow.f64 y 2)) (*.f64 1/72 (pow.f64 y 2)))) (pow.f64 (*.f64 -1 x) 1/3))))","(fma.f64 (cbrt.f64 (neg.f64 (pow.f64 x -17))) (*.f64 (pow.f64 y 3) (+.f64 -17/1296 1/18)) (fma.f64 1/6 (*.f64 (cbrt.f64 (neg.f64 (pow.f64 x -5))) y) (fma.f64 (cbrt.f64 (neg.f64 (pow.f64 x -11))) (*.f64 (*.f64 y y) -5/72) (cbrt.f64 (neg.f64 x)))))","(*.f64 (sqrt.f64 1) (pow.f64 x 1/3))","(cbrt.f64 x)","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/3) y)) (*.f64 (sqrt.f64 1) (pow.f64 x 1/3)))","(fma.f64 1/6 (*.f64 (cbrt.f64 (pow.f64 x -5)) y) (cbrt.f64 x))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/3) y)) (+.f64 (*.f64 (sqrt.f64 1) (pow.f64 x 1/3)) (*.f64 -5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 11)) 1/3) (pow.f64 y 2)))))","(+.f64 (fma.f64 1/6 (*.f64 (cbrt.f64 (pow.f64 x -5)) y) (cbrt.f64 x)) (*.f64 (*.f64 -5/72 (cbrt.f64 (pow.f64 x -11))) (*.f64 y y)))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/3) y)) (+.f64 (*.f64 (sqrt.f64 1) (pow.f64 x 1/3)) (+.f64 (*.f64 55/1296 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 17)) 1/3) (pow.f64 y 3))) (*.f64 -5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 11)) 1/3) (pow.f64 y 2))))))","(+.f64 (fma.f64 1/6 (*.f64 (cbrt.f64 (pow.f64 x -5)) y) (cbrt.f64 x)) (fma.f64 55/1296 (*.f64 (cbrt.f64 (pow.f64 x -17)) (pow.f64 y 3)) (*.f64 (*.f64 -5/72 (cbrt.f64 (pow.f64 x -11))) (*.f64 y y))))","(pow.f64 y 1/6)","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/6) (pow.f64 x 2))) (pow.f64 y 1/6))","(fma.f64 1/6 (*.f64 (pow.f64 y (*.f64 -5 1/6)) (*.f64 x x)) (pow.f64 y 1/6))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/6) (pow.f64 x 2))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 11)) 1/6) (+.f64 (*.f64 1/72 (pow.f64 x 4)) (*.f64 -1/12 (pow.f64 x 4)))) (pow.f64 y 1/6)))","(fma.f64 1/6 (*.f64 (pow.f64 y (*.f64 -5 1/6)) (*.f64 x x)) (fma.f64 (pow.f64 y (*.f64 -11 1/6)) (*.f64 (pow.f64 x 4) -5/72) (pow.f64 y 1/6)))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 17)) 1/6) (+.f64 (*.f64 -1/72 (pow.f64 x 6)) (+.f64 (*.f64 1/18 (pow.f64 x 6)) (*.f64 1/1296 (pow.f64 x 6))))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/6) (pow.f64 x 2))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 11)) 1/6) (+.f64 (*.f64 1/72 (pow.f64 x 4)) (*.f64 -1/12 (pow.f64 x 4)))) (pow.f64 y 1/6))))","(fma.f64 (pow.f64 y (*.f64 -17 1/6)) (*.f64 (pow.f64 x 6) (+.f64 73/1296 -1/72)) (fma.f64 1/6 (*.f64 (pow.f64 y (*.f64 -5 1/6)) (*.f64 x x)) (fma.f64 (pow.f64 y (*.f64 -11 1/6)) (*.f64 (pow.f64 x 4) -5/72) (pow.f64 y 1/6))))","(exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(pow.f64 (exp.f64 1/6) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (pow.f64 x 2)) y)) (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))","(fma.f64 1/6 (/.f64 (*.f64 (pow.f64 (exp.f64 1/6) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (*.f64 x x)) y) (pow.f64 (exp.f64 1/6) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (pow.f64 x 2)) y)) (+.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 1/72 (pow.f64 x 4)) (*.f64 -1/12 (pow.f64 x 4)))) (pow.f64 y 2))))","(+.f64 (fma.f64 1/6 (/.f64 (*.f64 (pow.f64 (exp.f64 1/6) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (*.f64 x x)) y) (pow.f64 (exp.f64 1/6) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))) (*.f64 (*.f64 (pow.f64 (exp.f64 1/6) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (*.f64 (pow.f64 x 4) -5/72)) (pow.f64 y -2)))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (pow.f64 x 2)) y)) (+.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 1/72 (pow.f64 x 6)) (+.f64 (*.f64 -1/1296 (pow.f64 x 6)) (*.f64 -1/18 (pow.f64 x 6))))) (pow.f64 y 3))) (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 1/72 (pow.f64 x 4)) (*.f64 -1/12 (pow.f64 x 4)))) (pow.f64 y 2)))))","(+.f64 (fma.f64 1/6 (/.f64 (*.f64 (pow.f64 (exp.f64 1/6) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (*.f64 x x)) y) (pow.f64 (exp.f64 1/6) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))) (-.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 1/6) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (*.f64 (pow.f64 x 4) -5/72)) (pow.f64 y -2)) (*.f64 (*.f64 (pow.f64 (exp.f64 1/6) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (*.f64 (pow.f64 x 6) (+.f64 -73/1296 1/72))) (pow.f64 y -3))))"]],"time":197.837158203125,"type":"simplify"},{"compiler":[[5172,2412]],"time":49.871826171875,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))","done",24.455410009768443],["(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","fresh",42.57440799941526],["(*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) (cbrt.f64 (fma.f64 x x y)))","done",24.45703125],["(sqrt.f64 (fma.f64 x x y))","done",24.2578125],["(fma.f64 1/2 (/.f64 y x) x)","next",40.76114324794199]],"compiler":[[16,9],[9,6],[14,7],[7,4],[8,5],[9,6],[8,5]],"count":[[254,5]],"kept":[{"done":[2,2],"fresh":[2,1],"new":[249,1],"picked":[1,1]}],"min-error":[0],"time":54.3349609375,"type":"prune"},{"compiler":[[14,6]],"locations":[["(fma.f64 1/2 (/.f64 y x) x)",0.00390625,true]],"time":3.35009765625,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 1/2 (/.f64 y x) x)","x","-inf",0.39501953125],["(fma.f64 1/2 (/.f64 y x) x)","x","inf",0.348876953125],["(fma.f64 1/2 (/.f64 y x) x)","x","0",0.35009765625],["(fma.f64 1/2 (/.f64 y x) x)","y","-inf",0.3798828125],["(fma.f64 1/2 (/.f64 y x) x)","y","inf",0.405029296875],["(fma.f64 1/2 (/.f64 y x) x)","y","0",0.39794921875]],"time":2.35888671875,"type":"series"},{"count":[[1,36]],"inputs":[["(fma.f64 1/2 (/.f64 y x) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 1/2 (/.f64 y x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/2 (/.f64 y x) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (*.f64 2 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 y (*.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y (*.f64 2 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (/.f64 (/.f64 y -2) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 1/2 (/.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 1/2 (/.f64 y x) x)) (pow.f64 (fma.f64 1/2 (/.f64 y x) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 1/2 (/.f64 y x) x) 2/3) (cbrt.f64 (fma.f64 1/2 (/.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 1/2 (/.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 1/2 (/.f64 y x) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 (pow.f64 (/.f64 y (*.f64 2 x)) 2)) (*.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 y (*.f64 2 x)))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 y (*.f64 2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 y (*.f64 2 x)) 2)) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (/.f64 y (*.f64 2 x))) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (/.f64 y (*.f64 2 x))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 1/2 (/.f64 y x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/2 (/.f64 y x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 1/2 (/.f64 y x) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/2 (/.f64 y x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/2 (/.f64 y x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 1/2 (/.f64 y x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 1/2 (/.f64 y x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 1/2 (/.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 1/2 (/.f64 y x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (/.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/2) (*.f64 (sqrt.f64 1/2) (/.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y (*.f64 2 x))) (cbrt.f64 (pow.f64 (/.f64 y (*.f64 2 x)) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (/.f64 y x) 8)) (pow.f64 (/.f64 y x) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 y) (/.f64 1 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (/.f64 y (*.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (/.f64 y (*.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 y x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y x) 1/2 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (/.f64 y (*.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (*.f64 2 x)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y (*.f64 2 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 y (*.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 y (*.f64 2 x)))))))"]],"rules":[["egg-rr",36]],"time":40.051025390625,"type":"rewrite"},{"count":[[60,40]],"inputs":[["x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(*.f64 1/2 (/.f64 y x))","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(*.f64 1/2 (/.f64 y x))","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(*.f64 1/2 (/.f64 y x))","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(*.f64 1/2 (/.f64 y x))","(/.f64 (*.f64 1/2 y) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(*.f64 1/2 (/.f64 y x))","(/.f64 (*.f64 1/2 y) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(*.f64 1/2 (/.f64 y x))","(/.f64 (*.f64 1/2 y) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)"]],"time":77.4130859375,"type":"simplify"},{"compiler":[[397,226]],"time":6.342041015625,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))","done",24.455410009768443],["(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","fresh",42.57440799941526],["(*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) (cbrt.f64 (fma.f64 x x y)))","done",24.45703125],["(sqrt.f64 (fma.f64 x x y))","done",24.2578125],["(fma.f64 1/2 (/.f64 y x) x)","done",40.76114324794199]],"compiler":[[16,9],[9,6],[14,7],[7,4],[8,5]],"count":[[45,5]],"kept":[{"done":[3,3],"fresh":[1,1],"new":[40,0],"picked":[1,1]}],"min-error":[0],"time":5.697021484375,"type":"prune"},{"accuracy":[0.0078125],"baseline":[24.2578125],"branch":[["x",0.0078125,3],["y",19.967649875978662,4],["(sqrt.f64 (+.f64 (*.f64 x x) y))",11.9693207518519,2],["(+.f64 (*.f64 x x) y)",11.9693207518519,2],["(*.f64 x x)",11.9693207518519,2]],"compiler":[[3,2],[3,2],[8,5],[7,4],[5,3],[65,26]],"count":[[8,3]],"inputs":[["(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(fma.f64 1/2 (/.f64 y x) x)","(*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x y) 3/4)) (pow.f64 (fma.f64 x x y) 1/8))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x y))) (cbrt.f64 (fma.f64 x x y)))","(fma.f64 1/2 (/.f64 y x) x)","(sqrt.f64 (fma.f64 x x y))","(sqrt.f64 (+.f64 (*.f64 x x) y))"]],"link":["."],"name":["Linear.Quaternion:$clog from linear-1.19.1.3"],"oracle":[63.536983732745206],"outputs":[["(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(sqrt.f64 (fma.f64 x x y))","(fma.f64 1/2 (/.f64 y x) x)"]],"time":46.966064453125,"times":[["x",10.865966796875],["y",14.830078125],["(sqrt.f64 (+.f64 (*.f64 x x) y))",6.831787109375],["(+.f64 (*.f64 x x) y)",6.93994140625],["(*.f64 x x)",5.900146484375]],"type":"regimes"},{"bstep":[[4.3388556039437286e+102,7.838174516571009e+105,7.718017578125],[-1.7526032698725896e+154,-3.323693225808415e+143,8.02099609375]],"compiler":[[10,7],[3,2]],"method":["binary-search","binary-search"],"time":15.850830078125,"type":"bsearch"},{"compiler":[[28,16]],"inputs":[["(if (<=.f64 x -17526032698725895689256700331510663718745933188587571832323457144617864567579075647197785906737820459631244513836087368854631503511046326019909316050419712) (fma.f64 -1/2 (/.f64 y x) (neg.f64 x)) (if (<=.f64 x 4338855603943728557618490933942675751155321317402715674300524728367996200285463672238227240618731503616) (sqrt.f64 (fma.f64 x x y)) (fma.f64 1/2 (/.f64 y x) x)))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 x -17526032698725895689256700331510663718745933188587571832323457144617864567579075647197785906737820459631244513836087368854631503511046326019909316050419712) (fma.f64 -1/2 (/.f64 y x) (neg.f64 x)) (if (<=.f64 x 4338855603943728557618490933942675751155321317402715674300524728367996200285463672238227240618731503616) (sqrt.f64 (fma.f64 x x y)) (fma.f64 1/2 (/.f64 y x) x)))"]],"stop":[["fuel",1]],"time":20.195068359375,"type":"simplify"},{"time":0.02490234375,"type":"soundness"},{"compiler":[[28,16]],"remove-preprocessing":[[]],"time":12.443115234375,"type":"end"}]
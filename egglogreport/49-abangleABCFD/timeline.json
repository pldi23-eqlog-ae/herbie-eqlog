[{"compiler":[[11,7]],"method":["search"],"sampling":[[12,0.6497556329704821,0.09170725150033832,0.2585371155291796],[11,0.620487361215055,0.12097552325576544,0.2585371155291796],[10,0.5853654351085424,0.17951206676661968,0.23512249812483788],[9,0.5307313278317451,0.23414617404341698,0.23512249812483788],[8,0.46829234808683395,0.34341438859701157,0.18829326331615448],[7,0.37463387846946716,0.43707285821437836,0.18829326331615448],[6,0.24975591897964478,0.6243897974491119,0.1258542835712433],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":25.322998046875,"type":"analyze"},{"outcomes":[["body",256,"invalid",9.76123046875,279],["body",256,"valid",293.5986328125,8256]],"time":311.119140625,"type":"sample"},{"compiler":[[10,6]],"inputs":[["0","1"],["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))","(neg.f64 (*.f64 (*.f64 (*.f64 b b) a) a))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))","(neg.f64 (pow.f64 (*.f64 b a) 2))","(neg.f64 (*.f64 (*.f64 (*.f64 b b) a) a))","(neg.f64 (pow.f64 (*.f64 b a) 2))"]],"symmetry":[[]],"time":80.426025390625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))"]],"method":["egg-herbie"],"outputs":[["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))","(neg.f64 (pow.f64 (*.f64 a b) 2))"]],"time":36.452880859375,"type":"simplify"},{"compiler":[[16,10]],"time":0.366943359375,"type":"eval"},{"alts":[["(neg.f64 (pow.f64 (*.f64 a b) 2))","next",0.30697250976844204],["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))","fresh",14.299365513458902]],"compiler":[[8,6],[10,6],[8,6],[10,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.18359375],"time":1.189208984375,"type":"prune"},{"compiler":[[19,9]],"locations":[["(pow.f64 (*.f64 a b) 2)",0.30697250976844204,true]],"time":4.4599609375,"type":"localize"},{"count":[[1,24]],"series":[["(pow.f64 (*.f64 a b) 2)","b","-inf",0.451171875],["(pow.f64 (*.f64 a b) 2)","b","inf",0.4541015625],["(pow.f64 (*.f64 a b) 2)","b","0",0.60791015625],["(pow.f64 (*.f64 a b) 2)","a","-inf",0.473876953125],["(pow.f64 (*.f64 a b) 2)","a","inf",0.56396484375],["(pow.f64 (*.f64 a b) 2)","a","0",0.6650390625]],"time":3.294921875,"type":"series"},{"count":[[1,38]],"inputs":[["(pow.f64 (*.f64 a b) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 a b) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (*.f64 a b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a b)) (pow.f64 (cbrt.f64 (*.f64 a b)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a b) a) b)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a b) b) a)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 b (*.f64 (*.f64 a b) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 a (*.f64 (*.f64 a b) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 5) (cbrt.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 b (cbrt.f64 a)) 2) (pow.f64 (cbrt.f64 a) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a b) 2/3) (pow.f64 (*.f64 a b) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a b) 4/3) (pow.f64 (*.f64 a b) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 a 2/3) (pow.f64 (*.f64 (pow.f64 a 2/3) b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 b 2/3) (pow.f64 (*.f64 (pow.f64 b 2/3) a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a a) (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 b b) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a (cbrt.f64 b)) 2) (pow.f64 (cbrt.f64 b) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a b) (*.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 a b)) (neg.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 a b) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 a b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 a b) 2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 a b) 2/3)) (neg.f64 (pow.f64 (*.f64 a b) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (*.f64 a b) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 a b)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (*.f64 a b))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a b) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (*.f64 a b)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (*.f64 a b) 3)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 a b) 6))))))"]],"rules":[["egg-rr",38]],"time":32.93994140625,"type":"rewrite"},{"count":[[62,39]],"inputs":[["(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)"]],"time":97.02197265625,"type":"simplify"},{"compiler":[[356,197]],"time":5.55810546875,"type":"eval"},{"alts":[["(neg.f64 (*.f64 b (*.f64 (*.f64 a b) a)))","fresh",3.835462882200221],["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))","fresh",14.299365513458902],["(neg.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 6)))","fresh",24.31401997865457],["(neg.f64 (*.f64 (pow.f64 (*.f64 a (cbrt.f64 b)) 2) (pow.f64 (cbrt.f64 b) 4)))","fresh",11.442602953696564],["(neg.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 6))","next",0.7946632471380012],["(neg.f64 (*.f64 (pow.f64 (*.f64 b (cbrt.f64 a)) 2) (pow.f64 (cbrt.f64 a) 4)))","fresh",11.932070095644987],["(neg.f64 (pow.f64 (*.f64 a b) 2))","done",0.30697250976844204],["(neg.f64 (*.f64 a (*.f64 (*.f64 a b) b)))","fresh",5.264508805582663]],"compiler":[[10,6],[10,6],[9,7],[14,10],[9,7],[14,10],[8,6],[10,6],[10,6],[10,6],[9,7],[14,10],[9,7],[14,10],[10,6]],"count":[[41,8]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[39,6],"picked":[1,1]}],"min-error":[0.02734375],"time":9.595947265625,"type":"prune"},{"compiler":[[25,10]],"locations":[["(pow.f64 (cbrt.f64 (*.f64 a b)) 6)",0.7546345690277366,true],["(cbrt.f64 (*.f64 a b))",11.42552050727512,true]],"time":5.552001953125,"type":"localize"},{"count":[[2,0]],"series":[["(pow.f64 (cbrt.f64 (*.f64 a b)) 6)","b","-inf",0.678955078125],["(pow.f64 (cbrt.f64 (*.f64 a b)) 6)","b","inf",0.721923828125],["(pow.f64 (cbrt.f64 (*.f64 a b)) 6)","b","0",0.552001953125],["(pow.f64 (cbrt.f64 (*.f64 a b)) 6)","a","-inf",1.310791015625],["(pow.f64 (cbrt.f64 (*.f64 a b)) 6)","a","inf",0.6611328125],["(pow.f64 (cbrt.f64 (*.f64 a b)) 6)","a","0",1.06787109375],["(cbrt.f64 (*.f64 a b))","b","-inf",0.3671875],["(cbrt.f64 (*.f64 a b))","b","inf",0.59814453125],["(cbrt.f64 (*.f64 a b))","b","0",0.2861328125],["(cbrt.f64 (*.f64 a b))","a","-inf",0.474853515625],["(cbrt.f64 (*.f64 a b))","a","inf",0.291015625],["(cbrt.f64 (*.f64 a b))","a","0",0.4580078125]],"time":7.59912109375,"type":"series"},{"count":[[2,62]],"inputs":[["(cbrt.f64 (*.f64 a b))","(pow.f64 (cbrt.f64 (*.f64 a b)) 6)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 a b)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 a) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 b) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 a b))) (cbrt.f64 (pow.f64 (*.f64 a b) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a (cbrt.f64 b))) (cbrt.f64 (pow.f64 b 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 a b)))) (cbrt.f64 (pow.f64 (pow.f64 (*.f64 a b) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 b (cbrt.f64 a))) (cbrt.f64 (pow.f64 a 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 b)) (cbrt.f64 (*.f64 (pow.f64 b 2/3) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 a)) (cbrt.f64 (*.f64 (pow.f64 a 2/3) b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 a)) (cbrt.f64 (*.f64 (cbrt.f64 b) (pow.f64 (*.f64 a b) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (*.f64 a b)))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 a b))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 a b)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (*.f64 a b))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 a b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a b))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a b) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 a b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 a b))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 a b) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (*.f64 a b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 a b)) (neg.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a b) (*.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 b (cbrt.f64 a)) 2) (pow.f64 (pow.f64 a 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 b b) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a (cbrt.f64 b)) 2) (pow.f64 (pow.f64 b 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 a 2/3) (pow.f64 (*.f64 (pow.f64 a 2/3) b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 a 2/3) (pow.f64 (*.f64 (cbrt.f64 b) (pow.f64 (*.f64 a b) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a a) (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2/3)) (pow.f64 (pow.f64 (pow.f64 (*.f64 a b) 2/3) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 b 2/3) (pow.f64 (*.f64 (pow.f64 b 2/3) a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 4) (pow.f64 (*.f64 a b) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a b) 2/3) (pow.f64 (cbrt.f64 (*.f64 a b)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a b) a) b)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a b)) (pow.f64 (*.f64 a b) (+.f64 2/3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 a (*.f64 b (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 a b) 2/3)) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 a b) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 a b) 2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 a b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (*.f64 a b) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 a b)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a b) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (*.f64 a b))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (*.f64 a b)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (*.f64 a b) 3) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (*.f64 a b) 3) 2))))))"]],"rules":[["egg-rr",36],["egg-rr",26]],"time":43.975830078125,"type":"rewrite"},{"count":[[62,62]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"time":27.239013671875,"type":"simplify"},{"compiler":[[641,365]],"time":9.0771484375,"type":"eval"},{"alts":[["(neg.f64 (*.f64 (pow.f64 (*.f64 a (cbrt.f64 b)) 2) (pow.f64 (cbrt.f64 b) 4)))","fresh",11.442602953696564],["(neg.f64 (*.f64 a (*.f64 b (*.f64 a b))))","fresh",5.264508805582663],["(neg.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 6)))","fresh",24.31401997865457],["(neg.f64 (*.f64 (*.f64 (*.f64 a b) a) b))","next",3.835462882200221],["(neg.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 6))","done",0.7946632471380012],["(neg.f64 (*.f64 (pow.f64 (*.f64 b (cbrt.f64 a)) 2) (pow.f64 (cbrt.f64 a) 4)))","fresh",11.932070095644987],["(neg.f64 (pow.f64 (*.f64 a b) 2))","done",0.30697250976844204],["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))","fresh",14.299365513458902]],"compiler":[[14,10],[10,6],[9,7],[10,6],[9,7],[14,10],[8,6],[10,6],[14,10],[10,6],[9,7],[10,6],[14,10],[10,6]],"count":[[70,8]],"kept":[{"done":[1,1],"fresh":[6,4],"new":[62,2],"picked":[1,1]}],"min-error":[0.02734375],"time":13.121826171875,"type":"prune"},{"compiler":[[27,6]],"locations":[["(*.f64 (*.f64 a b) a)",0.140625,true],["(*.f64 (*.f64 (*.f64 a b) a) b)",3.7220171264115964,true]],"time":4.551025390625,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (*.f64 a b) a)","b","-inf",0.268798828125],["(*.f64 (*.f64 a b) a)","b","inf",0.262939453125],["(*.f64 (*.f64 a b) a)","b","0",0.258056640625],["(*.f64 (*.f64 a b) a)","a","-inf",0.173828125],["(*.f64 (*.f64 a b) a)","a","inf",0.2529296875],["(*.f64 (*.f64 a b) a)","a","0",0.240966796875],["(*.f64 (*.f64 (*.f64 a b) a) b)","b","-inf",0.430908203125],["(*.f64 (*.f64 (*.f64 a b) a) b)","b","inf",0.996826171875],["(*.f64 (*.f64 (*.f64 a b) a) b)","b","0",0.43701171875],["(*.f64 (*.f64 (*.f64 a b) a) b)","a","-inf",0.179931640625],["(*.f64 (*.f64 (*.f64 a b) a) b)","a","inf",0.373046875],["(*.f64 (*.f64 (*.f64 a b) a) b)","a","0",0.55517578125]],"time":4.590087890625,"type":"series"},{"count":[[2,76]],"inputs":[["(*.f64 (*.f64 (*.f64 a b) a) b)","(*.f64 (*.f64 a b) a)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 a b) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (*.f64 a b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a a) b) b)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 b (*.f64 (*.f64 a a) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 b (*.f64 a b)) a)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 a a) b)) (*.f64 (pow.f64 (*.f64 (*.f64 a a) b) 2/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 a (*.f64 b (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a b)) (pow.f64 (cbrt.f64 (*.f64 a b)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 b) (*.f64 (pow.f64 b 2/3) (*.f64 (*.f64 a a) b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 b 2/3) (*.f64 (*.f64 a a) b)) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (*.f64 a a) b) 2/3) b) (cbrt.f64 (*.f64 (*.f64 a a) b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 5) (cbrt.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 b (cbrt.f64 a)) 2) (pow.f64 (cbrt.f64 a) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a b) 2/3) (pow.f64 (*.f64 a b) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a b) 4/3) (pow.f64 (*.f64 a b) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 b (cbrt.f64 (*.f64 (*.f64 a a) b))) (pow.f64 (*.f64 (*.f64 a a) b) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 a a) b) (cbrt.f64 b)) (pow.f64 b 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 a a) b) 2/3) (*.f64 b (cbrt.f64 (*.f64 (*.f64 a a) b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 b 2/3) (*.f64 (*.f64 (*.f64 a a) b) (cbrt.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 a 2/3) (pow.f64 (*.f64 (pow.f64 a 2/3) b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 b 2/3) (pow.f64 (*.f64 (pow.f64 b 2/3) a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 b b) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a a) (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 a b)) (neg.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a (cbrt.f64 b)) 2) (pow.f64 (cbrt.f64 b) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 a b) 2/3)) (neg.f64 (pow.f64 (*.f64 a b) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a b) (*.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 a b) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 a b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 a b) 2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (*.f64 a b) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 a b)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (*.f64 a b))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a b) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (*.f64 a b)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (*.f64 a b) 3)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 a b) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 a a) b) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 a a) b))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (*.f64 a a) b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 a) (*.f64 (pow.f64 a 2/3) (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a b)) (*.f64 (pow.f64 (*.f64 a b) 2/3) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 a b) 2/3) a) (cbrt.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 a 2/3) (*.f64 a b)) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 a a) b)) (pow.f64 (*.f64 (*.f64 a a) b) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 a a) b) 2/3) (cbrt.f64 (*.f64 (*.f64 a a) b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a b) (cbrt.f64 a)) (pow.f64 a 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a (cbrt.f64 (*.f64 a b))) (pow.f64 (*.f64 a b) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a b) 2/3) (*.f64 a (cbrt.f64 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 a 2/3) (*.f64 (*.f64 a b) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a a) b)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 b (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 a a) b))) (neg.f64 (pow.f64 (*.f64 (*.f64 a a) b) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a b) a)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 a (*.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 a a) b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 a a) b)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 a a) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a a) b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 a a) b) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 a a) b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 a a) b)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 a a) b) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 a a) b)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 a a) b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 a a) b)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 a a) b) 3))))))"]],"rules":[["egg-rr",30],["egg-rr",46]],"time":38.634033203125,"type":"rewrite"},{"count":[[124,78]],"inputs":[["(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)"]],"time":165.81201171875,"type":"simplify"},{"compiler":[[841,378]],"time":9.531005859375,"type":"eval"},{"alts":[["(neg.f64 (*.f64 a (*.f64 b (*.f64 a b))))","next",5.264508805582663],["(neg.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 a a) b)) 3) b))","fresh",14.479413274620756],["(neg.f64 (*.f64 (*.f64 (*.f64 a b) a) b))","done",3.835462882200221],["(neg.f64 (*.f64 (*.f64 (pow.f64 a 2) b) b))","fresh",14.299365513458902],["(neg.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 6))","done",0.7946632471380012],["(neg.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 6)))","fresh",24.31401997865457],["(neg.f64 (*.f64 (pow.f64 (*.f64 b (cbrt.f64 a)) 2) (pow.f64 (cbrt.f64 a) 4)))","fresh",11.932070095644987],["(neg.f64 (pow.f64 (*.f64 a b) 2))","done",0.30697250976844204],["(neg.f64 (*.f64 (pow.f64 (*.f64 a (cbrt.f64 b)) 2) (pow.f64 (cbrt.f64 b) 4)))","fresh",11.442602953696564]],"compiler":[[10,6],[13,9],[10,6],[10,7],[9,7],[9,7],[14,10],[8,6],[14,10],[10,6],[13,9],[10,7],[9,7],[14,10],[14,10]],"count":[[86,9]],"kept":[{"done":[2,2],"fresh":[5,1],"new":[78,5],"picked":[1,1]}],"min-error":[0.0234375],"time":17.864990234375,"type":"prune"},{"compiler":[[27,6]],"locations":[["(*.f64 b (*.f64 a b))",0.16015625,true],["(*.f64 a (*.f64 b (*.f64 a b)))",5.05320181583566,true]],"time":4.573974609375,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 b (*.f64 a b))","a","-inf",0.2509765625],["(*.f64 b (*.f64 a b))","a","inf",0.27490234375],["(*.f64 b (*.f64 a b))","a","0",0.296875],["(*.f64 b (*.f64 a b))","b","-inf",0.14501953125],["(*.f64 b (*.f64 a b))","b","inf",0.258056640625],["(*.f64 b (*.f64 a b))","b","0",0.297119140625],["(*.f64 a (*.f64 b (*.f64 a b)))","b","-inf",0.15283203125],["(*.f64 a (*.f64 b (*.f64 a b)))","b","inf",0.181884765625],["(*.f64 a (*.f64 b (*.f64 a b)))","b","0",0.16796875],["(*.f64 a (*.f64 b (*.f64 a b)))","a","-inf",0.19091796875],["(*.f64 a (*.f64 b (*.f64 a b)))","a","inf",0.1640625],["(*.f64 a (*.f64 b (*.f64 a b)))","a","0",0.18701171875]],"time":2.7119140625,"type":"series"},{"count":[[2,76]],"inputs":[["(*.f64 a (*.f64 b (*.f64 a b)))","(*.f64 b (*.f64 a b))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 a b) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (*.f64 a b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 a (*.f64 (*.f64 b b) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 b b) a) a)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a (*.f64 a b)) b)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 a) (*.f64 (pow.f64 a 2/3) (*.f64 (*.f64 b b) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 b b) a)) (*.f64 (pow.f64 (*.f64 (*.f64 b b) a) 2/3) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 b (*.f64 a (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a b)) (pow.f64 (cbrt.f64 (*.f64 a b)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 b b) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a a) (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 5) (cbrt.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (*.f64 b b) a) 2/3) a) (cbrt.f64 (*.f64 (*.f64 b b) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 a 2/3) (*.f64 (*.f64 b b) a)) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 b (cbrt.f64 a)) 2) (pow.f64 (cbrt.f64 a) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a b) 2/3) (pow.f64 (*.f64 a b) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a b) 4/3) (pow.f64 (*.f64 a b) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 b b) a) (cbrt.f64 a)) (pow.f64 a 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a (cbrt.f64 (*.f64 (*.f64 b b) a))) (pow.f64 (*.f64 (*.f64 b b) a) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 b b) a) 2/3) (*.f64 a (cbrt.f64 (*.f64 (*.f64 b b) a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 a 2/3) (*.f64 (*.f64 (*.f64 b b) a) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 a 2/3) (pow.f64 (*.f64 (pow.f64 a 2/3) b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 b 2/3) (pow.f64 (*.f64 (pow.f64 b 2/3) a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 a b)) (neg.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a (cbrt.f64 b)) 2) (pow.f64 (cbrt.f64 b) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 a b) 2/3)) (neg.f64 (pow.f64 (*.f64 a b) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a b) (*.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 a b) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 a b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 a b) 2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (*.f64 a b) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 a b)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (*.f64 a b))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a b) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (*.f64 a b)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (*.f64 a b) 3)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 a b) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 b b) a) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 b b) a))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (*.f64 b b) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 b) (*.f64 (pow.f64 b 2/3) (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a b)) (*.f64 (pow.f64 (*.f64 a b) 2/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 b b) a)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 a (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 b 2/3) (*.f64 a b)) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 a b) 2/3) b) (cbrt.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 b b) a)) (pow.f64 (*.f64 (*.f64 b b) a) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 b b) a) 2/3) (cbrt.f64 (*.f64 (*.f64 b b) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a b) (cbrt.f64 b)) (pow.f64 b 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 b (cbrt.f64 (*.f64 a b))) (pow.f64 (*.f64 a b) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 b 2/3) (*.f64 (*.f64 a b) (cbrt.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a b) 2/3) (*.f64 b (cbrt.f64 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 b b) a))) (neg.f64 (pow.f64 (*.f64 (*.f64 b b) a) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 b (*.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a b) b)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 b b) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 b b) a)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 b b) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 b b) a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 b b) a) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 b b) a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 b b) a)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 b b) a) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 b b) a)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 b b) a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 b b) a)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 b b) a) 3))))))"]],"rules":[["egg-rr",30],["egg-rr",46]],"time":38.282958984375,"type":"rewrite"},{"count":[[124,78]],"inputs":[["(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))","(*.f64 a (pow.f64 b 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(pow.f64 (*.f64 a b) 2)","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))","(*.f64 a (pow.f64 b 2))","(*.f64 a (*.f64 b b))"]],"time":165.68212890625,"type":"simplify"},{"compiler":[[841,378]],"time":9.69287109375,"type":"eval"},{"alts":[["(neg.f64 (*.f64 (*.f64 (*.f64 b b) a) a))","fresh",13.842127075155567],["(neg.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 6))","done",0.7946632471380012],["(neg.f64 (*.f64 a (*.f64 b (*.f64 a b))))","done",5.264508805582663],["(neg.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 a a) b)) 3) b))","fresh",14.479413274620756],["(neg.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 6)))","fresh",24.31401997865457],["(neg.f64 (*.f64 (pow.f64 (*.f64 a (cbrt.f64 b)) 2) (pow.f64 (cbrt.f64 b) 4)))","fresh",11.442602953696564],["(neg.f64 (*.f64 (*.f64 (*.f64 a b) a) b))","done",3.835462882200221],["(neg.f64 (pow.f64 (*.f64 a b) 2))","done",0.30697250976844204],["(neg.f64 (*.f64 (pow.f64 (*.f64 b (cbrt.f64 a)) 2) (pow.f64 (cbrt.f64 a) 4)))","fresh",11.932070095644987]],"compiler":[[10,6],[9,7],[10,6],[13,9],[9,7],[14,10],[10,6],[8,6],[14,10]],"count":[[87,9]],"kept":[{"done":[3,3],"fresh":[5,1],"new":[78,4],"picked":[1,1]}],"min-error":[0.015625],"time":15.572021484375,"type":"prune"},{"accuracy":[0.30697250976844204],"baseline":[0.30697250976844204],"branch":[["a",0.30697250976844204,1],["b",0.30697250976844204,1],["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))",0.30697250976844204,1],["(*.f64 (*.f64 (*.f64 a a) b) b)",0.30697250976844204,1],["(*.f64 a a)",0.30697250976844204,1],["(*.f64 a a)",0.30697250976844204,1]],"compiler":[[3,2],[3,2],[10,6],[9,5],[5,3],[5,3],[171,85]],"count":[[19,1]],"inputs":[["(neg.f64 (*.f64 (*.f64 (*.f64 b b) a) a))","(neg.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 6)))","(neg.f64 (*.f64 (pow.f64 (*.f64 a (cbrt.f64 b)) 2) (pow.f64 (cbrt.f64 b) 4)))","(neg.f64 (*.f64 (pow.f64 (*.f64 b (cbrt.f64 a)) 2) (pow.f64 (cbrt.f64 a) 4)))","(neg.f64 (*.f64 a (*.f64 b (*.f64 a b))))","(neg.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 a a) b)) 3) b))","(neg.f64 (*.f64 (*.f64 (pow.f64 a 2) b) b))","(neg.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 6)))","(neg.f64 (*.f64 (pow.f64 (*.f64 a (cbrt.f64 b)) 2) (pow.f64 (cbrt.f64 b) 4)))","(neg.f64 (*.f64 a (*.f64 b (*.f64 a b))))","(neg.f64 (*.f64 (*.f64 (*.f64 a b) a) b))","(neg.f64 (*.f64 b (*.f64 (*.f64 a b) a)))","(neg.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 6)))","(neg.f64 (*.f64 (pow.f64 (*.f64 a (cbrt.f64 b)) 2) (pow.f64 (cbrt.f64 b) 4)))","(neg.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 6))","(neg.f64 (*.f64 (pow.f64 (*.f64 b (cbrt.f64 a)) 2) (pow.f64 (cbrt.f64 a) 4)))","(neg.f64 (*.f64 a (*.f64 (*.f64 a b) b)))","(neg.f64 (pow.f64 (*.f64 a b) 2))","(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))"]],"link":["."],"name":["ab-angle->ABCF D"],"oracle":[31.346212003467375],"outputs":[["(neg.f64 (pow.f64 (*.f64 a b) 2))"]],"time":32.330078125,"times":[["a",6.416015625],["b",6.421142578125],["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))",4.464111328125],["(*.f64 (*.f64 (*.f64 a a) b) b)",3.3291015625],["(*.f64 a a)",3.85302734375],["(*.f64 a a)",4.31884765625]],"type":"regimes"},{"compiler":[[8,6]],"inputs":[["(neg.f64 (pow.f64 (*.f64 a b) 2))"]],"method":["egg-herbie"],"outputs":[["(neg.f64 (pow.f64 (*.f64 a b) 2))"]],"stop":[["fuel",1]],"time":34.19091796875,"type":"simplify"},{"time":0.01708984375,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":7.9599609375,"type":"end"}]
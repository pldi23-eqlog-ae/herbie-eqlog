[{"compiler":[[30,21]],"method":["search"],"sampling":[[12,0.0,0.7247019651442149,0.2752980348557851],[11,0.0,0.7276202280911044,0.2723797719088956],[10,0.0,0.9766453328923379,0.023354667107662097],[9,0.0,0.9961004192049343,0.0038995807950656936],[8,0.0,0.9961004192049343,0.0038995807950656936],[7,0.0,0.9961004192049343,0.0038995807950656936],[6,0.0,0.9961004192049343,0.0038995807950656936],[5,0.0,0.9961004192049343,0.0038995807950656936],[4,0.0,0.9961004192049343,0.0038995807950656936],[3,0.0,0.9961004192049343,0.0038995807950656936],[2,0.0,0.9961004192049343,0.0038995807950656936],[1,0.0,0.9961004192049343,0.0038995807950656936],[0,0.0,0.9961004192049343,0.0038995807950656936]],"time":244.205078125,"type":"analyze"},{"outcomes":[["body",256,"invalid",1626.35986328125,19278],["body",1024,"valid",0.579833984375,2],["body",256,"valid",788.680419921875,8254]],"time":2440.56103515625,"type":"sample"},{"compiler":[[29,20]],"inputs":[["0","1","2","3","4","5","6","7"],["(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 y (log.f64 x)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 x i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 z (log.f64 y)) x) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 t (log.f64 y)) z) x) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 a (log.f64 y)) z) t) x) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 b (log.f64 y)) z) t) a) (*.f64 (-.f64 x 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 c (log.f64 y)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 x))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 i (log.f64 y)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y x))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 z)) y) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 z i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 t)) z) y) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 t i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 a)) z) t) y) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 a i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 b)) z) t) a) (*.f64 (-.f64 y 1/2) (log.f64 c))) (*.f64 b i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 c)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 y))) (*.f64 c i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 i)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 i y))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) t) z) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) a) t) z) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) b) t) a) (*.f64 (-.f64 z 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) c) t) a) (*.f64 (-.f64 b 1/2) (log.f64 z))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) i) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y z))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) a) t) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) b) a) (*.f64 (-.f64 t 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) c) a) (*.f64 (-.f64 b 1/2) (log.f64 t))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) i) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y t))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) b) (*.f64 (-.f64 a 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) c) (*.f64 (-.f64 b 1/2) (log.f64 a))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) i) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y a))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) a) (*.f64 (-.f64 c 1/2) (log.f64 b))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) a) (*.f64 (-.f64 i 1/2) (log.f64 c))) (*.f64 y b))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 i))) (*.f64 y c))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3","4","5","6","7"],["(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 y) t) z) a) (+.f64 (*.f64 (+.f64 b -1/2) (log.f64 c)) (*.f64 y i)))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 y (log.f64 x)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 x i))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 y (log.f64 x) z) t) a) (*.f64 (+.f64 b -1/2) (log.f64 c))) (*.f64 x i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 z (log.f64 y)) x) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 z (log.f64 y) x) t) a) (*.f64 (+.f64 b -1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 t (log.f64 y)) z) x) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 t (log.f64 y) z) x) a) (*.f64 (+.f64 b -1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 a (log.f64 y)) z) t) x) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 a (log.f64 y) z) t) x) (*.f64 (+.f64 b -1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 b (log.f64 y)) z) t) a) (*.f64 (-.f64 x 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 b (log.f64 y) z) t) a) (*.f64 (+.f64 x -1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 c (log.f64 y)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 x))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 c (log.f64 y) z) t) a) (*.f64 (+.f64 b -1/2) (log.f64 x))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 i (log.f64 y)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y x))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 i (log.f64 y) z) t) a) (*.f64 (+.f64 b -1/2) (log.f64 c))) (*.f64 y x))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 z)) y) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 z i))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 z) y) t) a) (*.f64 (+.f64 b -1/2) (log.f64 c))) (*.f64 z i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 t)) z) y) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 t i))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 t) z) y) a) (*.f64 (+.f64 b -1/2) (log.f64 c))) (*.f64 t i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 a)) z) t) y) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 a i))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 a) z) t) y) (*.f64 (+.f64 b -1/2) (log.f64 c))) (*.f64 a i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 b)) z) t) a) (*.f64 (-.f64 y 1/2) (log.f64 c))) (*.f64 b i))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 b) z) t) a) (*.f64 (+.f64 y -1/2) (log.f64 c))) (*.f64 b i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 c)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 y))) (*.f64 c i))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 c) z) t) a) (*.f64 (+.f64 b -1/2) (log.f64 y))) (*.f64 c i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 i)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 i y))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 i) z) t) a) (*.f64 (+.f64 b -1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) t) z) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 y) t) z) a) (+.f64 (*.f64 (+.f64 b -1/2) (log.f64 c)) (*.f64 y i)))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) a) t) z) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 y) t) z) a) (+.f64 (*.f64 (+.f64 b -1/2) (log.f64 c)) (*.f64 y i)))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) b) t) a) (*.f64 (-.f64 z 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 y) b) t) a) (*.f64 (+.f64 z -1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) c) t) a) (*.f64 (-.f64 b 1/2) (log.f64 z))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 y) c) t) a) (*.f64 (+.f64 b -1/2) (log.f64 z))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) i) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y z))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 y) i) t) a) (*.f64 (+.f64 b -1/2) (log.f64 c))) (*.f64 y z))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) a) t) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 y) t) z) a) (+.f64 (*.f64 (+.f64 b -1/2) (log.f64 c)) (*.f64 y i)))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) b) a) (*.f64 (-.f64 t 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 y) z) b) a) (*.f64 (+.f64 t -1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) c) a) (*.f64 (-.f64 b 1/2) (log.f64 t))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 y) z) c) a) (*.f64 (+.f64 b -1/2) (log.f64 t))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) i) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y t))","(+.f64 (+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 y) z) i) a) (*.f64 (+.f64 b -1/2) (log.f64 c))) (*.f64 y t))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) b) (*.f64 (-.f64 a 1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 y) z) (+.f64 t b)) (*.f64 (+.f64 a -1/2) (log.f64 c))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) c) (*.f64 (-.f64 b 1/2) (log.f64 a))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 y) z) (+.f64 t c)) (*.f64 (+.f64 b -1/2) (log.f64 a))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) i) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y a))","(+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 y) z) (+.f64 t i)) (*.f64 (+.f64 b -1/2) (log.f64 c))) (*.f64 y a))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) a) (*.f64 (-.f64 c 1/2) (log.f64 b))) (*.f64 y i))","(+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 y) t) z) a) (+.f64 (*.f64 (+.f64 c -1/2) (log.f64 b)) (*.f64 y i)))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) a) (*.f64 (-.f64 i 1/2) (log.f64 c))) (*.f64 y b))","(+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 y) t) z) a) (+.f64 (*.f64 (+.f64 i -1/2) (log.f64 c)) (*.f64 y b)))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 i))) (*.f64 y c))","(+.f64 (+.f64 (+.f64 (fma.f64 x (log.f64 y) t) z) a) (+.f64 (*.f64 (+.f64 b -1/2) (log.f64 i)) (*.f64 y c)))"]],"symmetry":[[]],"time":171.130859375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))","(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)))"]],"time":24.131103515625,"type":"simplify"},{"compiler":[[47,27]],"time":0.52197265625,"type":"eval"},{"alts":[["(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)))","next",0.09375]],"compiler":[[26,17],[26,17]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.09375],"time":1.132080078125,"type":"prune"},{"compiler":[[76,23]],"locations":[["(+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)",0.00390625,true],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))",0.05859375,true],["(fma.f64 (log.f64 y) x (+.f64 z t))",0.08203125,true]],"time":14.992919921875,"type":"localize"},{"count":[[3,192]],"series":[["(+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)","a","-inf",0.170166015625],["(+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)","a","inf",0.151123046875],["(+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)","a","0",0.1591796875],["(+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)","t","-inf",0.172119140625],["(+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)","t","inf",0.16015625],["(+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)","t","0",0.18017578125],["(+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)","z","-inf",0.16015625],["(+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)","z","inf",0.156005859375],["(+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)","z","0",0.181884765625],["(+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)","x","-inf",0.155029296875],["(+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)","x","inf",0.173095703125],["(+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)","x","0",0.161865234375],["(+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)","y","-inf",0.18408203125],["(+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)","y","inf",0.19921875],["(+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)","y","0",0.173095703125],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","a","-inf",0.23193359375],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","a","inf",0.260986328125],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","a","0",1.932861328125],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","t","-inf",0.197998046875],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","t","inf",0.242919921875],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","t","0",1.114990234375],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","z","-inf",0.19287109375],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","z","inf",0.22314453125],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","z","0",1.0888671875],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","x","-inf",0.22412109375],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","x","inf",0.2138671875],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","x","0",1.0400390625],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","y","-inf",0.283935546875],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","y","inf",0.3388671875],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","y","0",13.62890625],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","c","-inf",4.572021484375],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","c","inf",4.53515625],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","c","0",11.3740234375],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","b","-inf",0.302001953125],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","b","inf",0.35791015625],["(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","b","0",2.718994140625],["(fma.f64 (log.f64 y) x (+.f64 z t))","t","-inf",0.204833984375],["(fma.f64 (log.f64 y) x (+.f64 z t))","t","inf",0.223876953125],["(fma.f64 (log.f64 y) x (+.f64 z t))","t","0",0.97216796875],["(fma.f64 (log.f64 y) x (+.f64 z t))","z","-inf",0.205078125],["(fma.f64 (log.f64 y) x (+.f64 z t))","z","inf",0.225830078125],["(fma.f64 (log.f64 y) x (+.f64 z t))","z","0",0.964111328125],["(fma.f64 (log.f64 y) x (+.f64 z t))","x","-inf",0.31884765625],["(fma.f64 (log.f64 y) x (+.f64 z t))","x","inf",0.287109375],["(fma.f64 (log.f64 y) x (+.f64 z t))","x","0",1.81884765625],["(fma.f64 (log.f64 y) x (+.f64 z t))","y","-inf",10.9111328125],["(fma.f64 (log.f64 y) x (+.f64 z t))","y","inf",4.0859375],["(fma.f64 (log.f64 y) x (+.f64 z t))","y","0",13.869140625]],"time":82.41796875,"type":"series"},{"count":[[3,135]],"inputs":[["(fma.f64 (log.f64 y) x (+.f64 z t))","(fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a))","(+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) x) (+.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 z t) (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 y) x z) t)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 y) x t) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 z (fma.f64 (log.f64 y) x t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 t (fma.f64 (log.f64 y) x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) (*.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) 0) (fma.f64 (log.f64 y) x (+.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (log.f64 y) x t) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (log.f64 y) x z) 1) t)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) (*.f64 0 (fma.f64 (log.f64 y) x (+.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (log.f64 y) x (+.f64 z t))) (fma.f64 (log.f64 y) x (+.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (log.f64 y) x (+.f64 z t))) (cbrt.f64 (pow.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) 2)) (cbrt.f64 (fma.f64 (log.f64 y) x (+.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (log.f64 y) x (+.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (log.f64 y) x (+.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (log.f64 y) x (+.f64 z t))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (log.f64 y) x (+.f64 z t))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (log.f64 y) x (+.f64 z t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (log.f64 y) x (+.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (+.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (+.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) (pow.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) 2) (+.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x) (+.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (+.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (log.f64 y) x) (+.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 z t) (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z t) 1 (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 z t)) (cbrt.f64 (pow.f64 (+.f64 z t) 2)) (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 z t) 2)) (cbrt.f64 (+.f64 z t)) (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (+.f64 z t)) (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) x) 1 (+.f64 z t))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 b -1/2) (log.f64 c)) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)) (*.f64 (+.f64 b -1/2) (log.f64 c)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 b -1/2) (log.f64 c) a) (fma.f64 (log.f64 y) x (+.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 b -1/2) (log.f64 c) (fma.f64 (log.f64 y) x (+.f64 z t))) a)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 a (fma.f64 (+.f64 b -1/2) (log.f64 c) (fma.f64 (log.f64 y) x (+.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) (fma.f64 (+.f64 b -1/2) (log.f64 c) a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (+.f64 b -1/2) (log.f64 c) a) (*.f64 (log.f64 y) x)) (+.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (+.f64 b -1/2) (log.f64 c) a) (fma.f64 (log.f64 y) x z)) t)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (+.f64 b -1/2) (log.f64 c) a) (fma.f64 (log.f64 y) x t)) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (+.f64 b -1/2) (log.f64 c) a) (+.f64 z t)) (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (+.f64 b -1/2) (log.f64 c)) (+.f64 a (*.f64 (log.f64 y) x))) (+.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (+.f64 b -1/2) (log.f64 c)) (*.f64 (log.f64 y) x)) (+.f64 (+.f64 z t) a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) x) (+.f64 (+.f64 (+.f64 z t) a) (*.f64 (+.f64 b -1/2) (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 a (*.f64 (log.f64 y) x)) (+.f64 (+.f64 z t) (*.f64 (+.f64 b -1/2) (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) (*.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) 0) (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) (*.f64 0 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))) (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 b -1/2) (log.f64 c) (fma.f64 (log.f64 y) x (+.f64 z t))) 1) a)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 b -1/2) (log.f64 c) a) 1) (fma.f64 (log.f64 y) x (+.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))) (cbrt.f64 (pow.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) 2)) (cbrt.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 b -1/2) (log.f64 c) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 b -1/2) (log.f64 c)) 1 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)) 2)) (cbrt.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) (*.f64 (+.f64 b -1/2) (log.f64 c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) (*.f64 (+.f64 b -1/2) (log.f64 c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) (cbrt.f64 (pow.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)) 2)) (*.f64 (+.f64 b -1/2) (log.f64 c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)) (*.f64 (+.f64 b -1/2) (log.f64 c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)) 1 (*.f64 (+.f64 b -1/2) (log.f64 c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 b -1/2) (log.f64 c)) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (log.f64 c))) (pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (log.f64 c))) 2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) (cbrt.f64 (pow.f64 (log.f64 c) 2)) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 b -1/2)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 b -1/2) 2)) (log.f64 c)) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 a (fma.f64 (log.f64 y) x (+.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 a (*.f64 (log.f64 y) x)) (+.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) x) (+.f64 (+.f64 z t) a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 z t) a) (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 z t) (+.f64 a (*.f64 (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 a (fma.f64 (log.f64 y) x z)) t)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 a (fma.f64 (log.f64 y) x t)) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 a (*.f64 (log.f64 y) x)) z) t)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 a (*.f64 (log.f64 y) x)) t) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 y) x t) (+.f64 z a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 y) x z) (+.f64 t a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)) (*.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)) 0) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) x) (*.f64 (+.f64 (+.f64 z t) a) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 a (*.f64 (log.f64 y) x)) 1) (+.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)) (*.f64 0 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) (cbrt.f64 (pow.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) 2)) (-.f64 (cbrt.f64 (*.f64 a a)) (cbrt.f64 (*.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)))) (+.f64 (cbrt.f64 (fma.f64 (log.f64 y) x (+.f64 z t))) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 a a)) (-.f64 (cbrt.f64 (pow.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) 2)) (cbrt.f64 (*.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)))) (+.f64 (cbrt.f64 a) (cbrt.f64 (fma.f64 (log.f64 y) x (+.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)) 2)) (cbrt.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (log.f64 y) x (+.f64 z t))) (cbrt.f64 (pow.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) 2)) a)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 a (fma.f64 (log.f64 y) x (+.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (log.f64 y) x (+.f64 z t)) a)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 a) (cbrt.f64 (*.f64 a a)) (fma.f64 (log.f64 y) x (+.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) 2)) (cbrt.f64 (fma.f64 (log.f64 y) x (+.f64 z t))) a)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 (log.f64 y) x (+.f64 z t))) a)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) 1 a)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (+.f64 (+.f64 z t) a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) (pow.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) 2) (+.f64 (+.f64 z t) a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x) (+.f64 (+.f64 z t) a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (+.f64 (+.f64 z t) a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (log.f64 y) x) (+.f64 (+.f64 z t) a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a 1 (fma.f64 (log.f64 y) x (+.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 a a)) (cbrt.f64 a) (fma.f64 (log.f64 y) x (+.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 a) (fma.f64 (log.f64 y) x (+.f64 z t)))))))"]],"rules":[["egg-rr",51],["egg-rr",47],["egg-rr",37]],"time":36.43994140625,"type":"rewrite"},{"count":[[327,184]],"inputs":[["(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))))","(+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))))","(+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))))","(+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 t z))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 t z))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 t z))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 t z))","(+.f64 t z)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) t)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","z","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","z","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","t","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","t","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t (+.f64 z (*.f64 -1/2 (log.f64 c))))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t (+.f64 (*.f64 (log.f64 c) b) (+.f64 z (*.f64 -1/2 (log.f64 c)))))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t (+.f64 (*.f64 (log.f64 c) b) (+.f64 z (*.f64 -1/2 (log.f64 c)))))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t (+.f64 (*.f64 (log.f64 c) b) (+.f64 z (*.f64 -1/2 (log.f64 c)))))))","(*.f64 (log.f64 c) b)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t (+.f64 (*.f64 (log.f64 c) b) (+.f64 z (*.f64 -1/2 (log.f64 c)))))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t (+.f64 (*.f64 (log.f64 c) b) (+.f64 z (*.f64 -1/2 (log.f64 c)))))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t (+.f64 (*.f64 (log.f64 c) b) (+.f64 z (*.f64 -1/2 (log.f64 c)))))))","(*.f64 (log.f64 c) b)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t (+.f64 (*.f64 (log.f64 c) b) (+.f64 z (*.f64 -1/2 (log.f64 c)))))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t (+.f64 (*.f64 (log.f64 c) b) (+.f64 z (*.f64 -1/2 (log.f64 c)))))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t (+.f64 (*.f64 (log.f64 c) b) (+.f64 z (*.f64 -1/2 (log.f64 c)))))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 b 1/2) (log.f64 (/.f64 1 c)))) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 b 1/2) (log.f64 (/.f64 1 c)))) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 b 1/2) (log.f64 (/.f64 1 c)))) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 b 1/2) (log.f64 (/.f64 1 c)))) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t (+.f64 z (*.f64 (-.f64 b 1/2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))))))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t (+.f64 z (*.f64 (-.f64 b 1/2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))))))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t (+.f64 z (*.f64 (-.f64 b 1/2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))))))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t (+.f64 z (*.f64 (-.f64 b 1/2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))))))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))))))","(+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))))))","(+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))))))","(+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))))))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 t z))))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) t)))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","z","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","z","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) z)))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","t","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","t","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","a","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","a","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(+.f64 a (+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))))","(+.f64 a (+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))))","(+.f64 a (+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))))","(+.f64 a (+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(*.f64 (log.f64 y) x)","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(*.f64 (log.f64 y) x)","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) t))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","z","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","z","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","t","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","t","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","a","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","a","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 t z))","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (+.f64 t z))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 t z))","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (+.f64 t z))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 t z))","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (+.f64 t z))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 t z))","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (+.f64 t z))","(+.f64 t z)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) t)","(fma.f64 (log.f64 y) x t)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","z","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","z","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x z)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","t","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","t","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t (+.f64 z (*.f64 -1/2 (log.f64 c))))))","(+.f64 (fma.f64 (log.f64 y) x a) (+.f64 t (fma.f64 (log.f64 c) -1/2 z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t (+.f64 (*.f64 (log.f64 c) b) (+.f64 z (*.f64 -1/2 (log.f64 c)))))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t (+.f64 (*.f64 (log.f64 c) b) (+.f64 z (*.f64 -1/2 (log.f64 c)))))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t (+.f64 (*.f64 (log.f64 c) b) (+.f64 z (*.f64 -1/2 (log.f64 c)))))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(*.f64 (log.f64 c) b)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t (+.f64 (*.f64 (log.f64 c) b) (+.f64 z (*.f64 -1/2 (log.f64 c)))))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t (+.f64 (*.f64 (log.f64 c) b) (+.f64 z (*.f64 -1/2 (log.f64 c)))))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t (+.f64 (*.f64 (log.f64 c) b) (+.f64 z (*.f64 -1/2 (log.f64 c)))))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(*.f64 (log.f64 c) b)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t (+.f64 (*.f64 (log.f64 c) b) (+.f64 z (*.f64 -1/2 (log.f64 c)))))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t (+.f64 (*.f64 (log.f64 c) b) (+.f64 z (*.f64 -1/2 (log.f64 c)))))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t (+.f64 (*.f64 (log.f64 c) b) (+.f64 z (*.f64 -1/2 (log.f64 c)))))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 b 1/2) (log.f64 (/.f64 1 c)))) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 b 1/2) (log.f64 (/.f64 1 c)))) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 b 1/2) (log.f64 (/.f64 1 c)))) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 b 1/2) (log.f64 (/.f64 1 c)))) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t (+.f64 z (*.f64 (-.f64 b 1/2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))))))))","(+.f64 (fma.f64 (log.f64 y) x a) (+.f64 t (fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 c)))) (+.f64 b -1/2) z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t (+.f64 z (*.f64 (-.f64 b 1/2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))))))))","(+.f64 (fma.f64 (log.f64 y) x a) (+.f64 t (fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 c)))) (+.f64 b -1/2) z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t (+.f64 z (*.f64 (-.f64 b 1/2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))))))))","(+.f64 (fma.f64 (log.f64 y) x a) (+.f64 t (fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 c)))) (+.f64 b -1/2) z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t (+.f64 z (*.f64 (-.f64 b 1/2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))))))))","(+.f64 (fma.f64 (log.f64 y) x a) (+.f64 t (fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 c)))) (+.f64 b -1/2) z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z))))","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z)))","(fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) t)))","(+.f64 a (fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) t)))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","z","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","z","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) z)))","(+.f64 a (fma.f64 x (log.f64 y) (fma.f64 (log.f64 c) (+.f64 b -1/2) z)))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","t","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","t","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 t z)))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","a","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","a","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 (*.f64 (log.f64 c) (-.f64 b 1/2)) (+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z))))","(fma.f64 (log.f64 y) x (fma.f64 (log.f64 c) (+.f64 b -1/2) (+.f64 a (+.f64 t z))))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 t (+.f64 z (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 a (+.f64 t z)))","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 a (+.f64 t z)))","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 a (+.f64 t z)))","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 a (+.f64 t z)))","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 t z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(*.f64 (log.f64 y) x)","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(*.f64 (log.f64 y) x)","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) t))","(+.f64 a (fma.f64 (log.f64 y) x t))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","z","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","z","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) z))","(+.f64 a (fma.f64 (log.f64 y) x z))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","t","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","t","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 t z))","(fma.f64 (log.f64 y) x (+.f64 t z))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 a (+.f64 (*.f64 (log.f64 y) x) (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","a","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","a","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 a (+.f64 t z)))","(fma.f64 (log.f64 y) x (+.f64 a (+.f64 t z)))"]],"time":545.337158203125,"type":"simplify"},{"compiler":[[3974,1319]],"time":31.845947265625,"type":"eval"},{"alts":[["(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x) (+.f64 (+.f64 z t) a))))","fresh",0.15072250976844204],["(fma.f64 y i (fma.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (log.f64 c))) (pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (log.f64 c))) 2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))","fresh",0.17446007069442182],["(fma.f64 y i (pow.f64 (cbrt.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))) 3))","fresh",0.6932565918954711],["(fma.f64 y i (fma.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) (cbrt.f64 (pow.f64 (log.f64 c) 2)) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))","next",0.12013627930532605],["(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) (pow.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) 2) (+.f64 z t)) a)))","fresh",0.19568256837909412]],"compiler":[[33,22],[37,25],[29,20],[33,22],[35,21],[33,22],[37,25],[29,20],[33,22],[35,21]],"count":[[185,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[184,5],"picked":[1,0]}],"min-error":[0.03515625],"time":71.5,"type":"prune"},{"compiler":[[108,41]],"locations":[["(cbrt.f64 (log.f64 c))",0.109375,true],["(*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))",0.15234375,true],["(cbrt.f64 (pow.f64 (log.f64 c) 2))",0.15234375,true],["(pow.f64 (log.f64 c) 2)",0.5123825195368841,true]],"time":24.075927734375,"type":"localize"},{"count":[[4,56]],"series":[["(cbrt.f64 (log.f64 c))","c","-inf",0.77294921875],["(cbrt.f64 (log.f64 c))","c","inf",0.781005859375],["(cbrt.f64 (log.f64 c))","c","0",0.781982421875],["(*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))","c","-inf",1.302978515625],["(*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))","c","inf",1.280029296875],["(*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))","c","0",1.049072265625],["(*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))","b","-inf",0.3701171875],["(*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))","b","inf",0.2548828125],["(*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))","b","0",0.77294921875],["(cbrt.f64 (pow.f64 (log.f64 c) 2))","c","-inf",1.02685546875],["(cbrt.f64 (pow.f64 (log.f64 c) 2))","c","inf",0.80908203125],["(cbrt.f64 (pow.f64 (log.f64 c) 2))","c","0",1.15283203125],["(pow.f64 (log.f64 c) 2)","c","-inf",0.389892578125],["(pow.f64 (log.f64 c) 2)","c","inf",0.348876953125],["(pow.f64 (log.f64 c) 2)","c","0",0.399169921875]],"time":11.72509765625,"type":"series"},{"count":[[4,126]],"inputs":[["(pow.f64 (log.f64 c) 2)","(cbrt.f64 (pow.f64 (log.f64 c) 2))","(*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))","(cbrt.f64 (log.f64 c))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 c) 2) (*.f64 (pow.f64 (log.f64 c) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 c) 2) 0) (pow.f64 (log.f64 c) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 c) 2) (*.f64 0 (pow.f64 (log.f64 c) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (log.f64 c) 2)) (pow.f64 (log.f64 c) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 c) (log.f64 c))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 c)) (pow.f64 (log.f64 c) (+.f64 2/3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 c)) (neg.f64 (log.f64 c)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 c) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 c) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 c) (+.f64 2/3 1)) (cbrt.f64 (log.f64 c)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (log.f64 c)) 1) (*.f64 (neg.f64 (log.f64 c)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 c)) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 c) (+.f64 2/3 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (neg.f64 (pow.f64 (log.f64 c) 2/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 c) 4)) (pow.f64 (log.f64 c) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 c) 2/3) (cbrt.f64 (pow.f64 (log.f64 c) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 c) 2/3)) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 c) 4)) (pow.f64 (log.f64 c) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 c) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 c) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 c) 4)) (pow.f64 (log.f64 c) 4))) (cbrt.f64 (pow.f64 (log.f64 c) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 c) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 c) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 c)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 c) 2/3) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 c) 2) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 c) 2) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 c) 2/3) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 c) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 c) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 c) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 c) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log.f64 c)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 c) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 c) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 c) 2/3) (*.f64 (pow.f64 (log.f64 c) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 c) 2/3) 0) (pow.f64 (log.f64 c) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 c) 2/3) (*.f64 0 (pow.f64 (log.f64 c) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (log.f64 c) 2/3)) (pow.f64 (log.f64 c) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 c)) (cbrt.f64 (log.f64 c)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 c))) (cbrt.f64 (pow.f64 (log.f64 c) (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 c) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 c) (+.f64 2/3 1))) (cbrt.f64 (cbrt.f64 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 c) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 c))) (cbrt.f64 (neg.f64 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 c) 2/3))) (cbrt.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 c) 4)) (pow.f64 (log.f64 c) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 c) 2/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 c))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 c))) 4) (cbrt.f64 (pow.f64 (log.f64 c) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 c) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 c) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 c) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 c) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 c))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 c)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 c) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 c) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 c) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 c) 2/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 c) 2/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 c) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 c) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (log.f64 c)) b) (cbrt.f64 (*.f64 -1/8 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 -1/8 (log.f64 c))) (*.f64 (cbrt.f64 (log.f64 c)) b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) (*.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 0) (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 c)) b) 1) (*.f64 (cbrt.f64 (*.f64 -1/8 (log.f64 c))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 -1/8 (log.f64 c))) 1) (*.f64 (*.f64 (cbrt.f64 (log.f64 c)) b) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) (*.f64 0 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 c))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 c) 2/3)) (+.f64 b -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 b -1/2)) (cbrt.f64 (*.f64 (pow.f64 (+.f64 b -1/2) 2) (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 b -1/2) 2) (log.f64 c))) (cbrt.f64 (+.f64 b -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 c) 2/3)) (+.f64 b -1/2)) (cbrt.f64 (cbrt.f64 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 c)) (cbrt.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2))))) (/.f64 (+.f64 (pow.f64 b 3) -1/8) (pow.f64 (cbrt.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 b 3) -1/8) (cbrt.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2))))) (/.f64 (cbrt.f64 (log.f64 c)) (pow.f64 (cbrt.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) (pow.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 2/3) (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 c) (+.f64 b -1/2))) (pow.f64 (+.f64 b -1/2) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (cbrt.f64 (log.f64 c)))) (cbrt.f64 (pow.f64 (log.f64 c) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 c) 2/3)) (*.f64 (+.f64 b -1/2) (cbrt.f64 (cbrt.f64 (log.f64 c)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 b -1/2) 2/3) (cbrt.f64 (*.f64 (log.f64 c) (+.f64 b -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (log.f64 c)) (+.f64 (pow.f64 b 3) -1/8)) (/.f64 1 (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 b 3) -1/8) (/.f64 (cbrt.f64 (log.f64 c)) (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (log.f64 c)) (+.f64 (pow.f64 b 3) -1/8)) (cbrt.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2))))) (pow.f64 (cbrt.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (log.f64 c)) (+.f64 (pow.f64 b 3) -1/8)) (+.f64 1/4 (*.f64 b (+.f64 b 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (log.f64 c)) (neg.f64 (+.f64 (pow.f64 b 3) -1/8))) (neg.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 b 3) -1/8)) (cbrt.f64 (*.f64 (pow.f64 (+.f64 b -1/2) 2) (log.f64 c)))) (cbrt.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 b 3) -1/8)) (cbrt.f64 (log.f64 c))) (neg.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 c)) (+.f64 (pow.f64 b 3) -1/8)) 1) (+.f64 1/4 (*.f64 b (+.f64 b 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (log.f64 c)) (+.f64 (pow.f64 b 3) -1/8)) 1) (+.f64 1/4 (*.f64 b (+.f64 b 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (log.f64 c)) (+.f64 (pow.f64 b 3) -1/8))) (neg.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 c) (pow.f64 (+.f64 b -1/2) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (log.f64 c) (pow.f64 (+.f64 b -1/2) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 c)) -1/2 (*.f64 (cbrt.f64 (log.f64 c)) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 b (cbrt.f64 (log.f64 c)) (cbrt.f64 (*.f64 -1/8 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 c)) b (cbrt.f64 (*.f64 -1/8 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 (cbrt.f64 (log.f64 c)) (*.f64 (cbrt.f64 (log.f64 c)) b))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (log.f64 c)) (*.f64 (cbrt.f64 (log.f64 c)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (log.f64 c)) 0) (cbrt.f64 (log.f64 c)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (log.f64 c)) (*.f64 0 (cbrt.f64 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (log.f64 c))) (cbrt.f64 (log.f64 c)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 c))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 c))) (cbrt.f64 (pow.f64 (log.f64 c) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 c)))) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (log.f64 c) 2/3)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 c) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (log.f64 c)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 c)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (log.f64 c)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 c))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 c))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 c) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 c))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 c)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (log.f64 c))))))"]],"rules":[["egg-rr",19],["egg-rr",48],["egg-rr",26],["egg-rr",33]],"time":32.376953125,"type":"rewrite"},{"count":[[182,140]],"inputs":[["(pow.f64 (log.f64 (/.f64 1 c)) 2)","(pow.f64 (log.f64 (/.f64 1 c)) 2)","(pow.f64 (log.f64 (/.f64 1 c)) 2)","(pow.f64 (log.f64 (/.f64 1 c)) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 2)","(pow.f64 (pow.f64 (log.f64 c) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 c) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 c) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 c) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 c)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 c)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 c)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 c)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 2) 1/3)","(*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3)) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3)) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3)) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b))","(*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b)","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3)) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3)) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3)) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b))","(*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b)","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3)) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3)) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3)) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b))","(*.f64 (-.f64 b 1/2) (pow.f64 (*.f64 (log.f64 c) 1) 1/3))","(*.f64 (-.f64 b 1/2) (pow.f64 (*.f64 (log.f64 c) 1) 1/3))","(*.f64 (-.f64 b 1/2) (pow.f64 (*.f64 (log.f64 c) 1) 1/3))","(*.f64 (-.f64 b 1/2) (pow.f64 (*.f64 (log.f64 c) 1) 1/3))","(*.f64 (*.f64 (-.f64 b 1/2) (cbrt.f64 -1)) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3))","(*.f64 (*.f64 (-.f64 b 1/2) (cbrt.f64 -1)) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3))","(*.f64 (*.f64 (-.f64 b 1/2) (cbrt.f64 -1)) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3))","(*.f64 (*.f64 (-.f64 b 1/2) (cbrt.f64 -1)) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3))","(*.f64 (pow.f64 (*.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1) 1/3) (-.f64 b 1/2))","(*.f64 (pow.f64 (*.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1) 1/3) (-.f64 b 1/2))","(*.f64 (pow.f64 (*.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1) 1/3) (-.f64 b 1/2))","(*.f64 (pow.f64 (*.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1) 1/3) (-.f64 b 1/2))","(pow.f64 (log.f64 c) 1/3)","(pow.f64 (log.f64 c) 1/3)","(pow.f64 (log.f64 c) 1/3)","(pow.f64 (log.f64 c) 1/3)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3) (cbrt.f64 -1))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1/3)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1/3)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1/3)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1/3)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (log.f64 (/.f64 1 c)) 2)","(pow.f64 (log.f64 c) 2)","(pow.f64 (log.f64 (/.f64 1 c)) 2)","(pow.f64 (log.f64 c) 2)","(pow.f64 (log.f64 (/.f64 1 c)) 2)","(pow.f64 (log.f64 c) 2)","(pow.f64 (log.f64 (/.f64 1 c)) 2)","(pow.f64 (log.f64 c) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 2)","(pow.f64 (log.f64 c) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 2)","(pow.f64 (log.f64 c) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 2)","(pow.f64 (log.f64 c) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 2)","(pow.f64 (log.f64 c) 2)","(pow.f64 (pow.f64 (log.f64 c) 2) 1/3)","(pow.f64 (log.f64 c) 2/3)","(pow.f64 (pow.f64 (log.f64 c) 2) 1/3)","(pow.f64 (log.f64 c) 2/3)","(pow.f64 (pow.f64 (log.f64 c) 2) 1/3)","(pow.f64 (log.f64 c) 2/3)","(pow.f64 (pow.f64 (log.f64 c) 2) 1/3)","(pow.f64 (log.f64 c) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 c)) 2) 1/3)","(pow.f64 (log.f64 c) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 c)) 2) 1/3)","(pow.f64 (log.f64 c) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 c)) 2) 1/3)","(pow.f64 (log.f64 c) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 c)) 2) 1/3)","(pow.f64 (log.f64 c) 2/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 2) 1/3)","(pow.f64 (log.f64 c) 2/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 2) 1/3)","(pow.f64 (log.f64 c) 2/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 2) 1/3)","(pow.f64 (log.f64 c) 2/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 2) 1/3)","(pow.f64 (log.f64 c) 2/3)","(*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3))","(cbrt.f64 (*.f64 -1/8 (log.f64 c)))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3)) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3)) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3)) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b)","(*.f64 (cbrt.f64 (log.f64 c)) b)","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3)) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3)) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3)) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b)","(*.f64 (cbrt.f64 (log.f64 c)) b)","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3)) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3)) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 (log.f64 c) 1) 1/3)) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/3) b))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(*.f64 (-.f64 b 1/2) (pow.f64 (*.f64 (log.f64 c) 1) 1/3))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(*.f64 (-.f64 b 1/2) (pow.f64 (*.f64 (log.f64 c) 1) 1/3))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(*.f64 (-.f64 b 1/2) (pow.f64 (*.f64 (log.f64 c) 1) 1/3))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(*.f64 (-.f64 b 1/2) (pow.f64 (*.f64 (log.f64 c) 1) 1/3))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(*.f64 (*.f64 (-.f64 b 1/2) (cbrt.f64 -1)) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(*.f64 (*.f64 (-.f64 b 1/2) (cbrt.f64 -1)) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(*.f64 (*.f64 (-.f64 b 1/2) (cbrt.f64 -1)) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(*.f64 (*.f64 (-.f64 b 1/2) (cbrt.f64 -1)) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(*.f64 (pow.f64 (*.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1) 1/3) (-.f64 b 1/2))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(*.f64 (pow.f64 (*.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1) 1/3) (-.f64 b 1/2))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(*.f64 (pow.f64 (*.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1) 1/3) (-.f64 b 1/2))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(*.f64 (pow.f64 (*.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1) 1/3) (-.f64 b 1/2))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(pow.f64 (log.f64 c) 1/3)","(cbrt.f64 (log.f64 c))","(pow.f64 (log.f64 c) 1/3)","(cbrt.f64 (log.f64 c))","(pow.f64 (log.f64 c) 1/3)","(cbrt.f64 (log.f64 c))","(pow.f64 (log.f64 c) 1/3)","(cbrt.f64 (log.f64 c))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 c))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 c))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 c))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 c))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1/3)","(cbrt.f64 (log.f64 c))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1/3)","(cbrt.f64 (log.f64 c))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1/3)","(cbrt.f64 (log.f64 c))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1/3)","(cbrt.f64 (log.f64 c))"]],"time":189.238037109375,"type":"simplify"},{"compiler":[[4250,1700]],"time":35.212890625,"type":"eval"},{"alts":[["(fma.f64 y i (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) 3) (cbrt.f64 (pow.f64 (log.f64 c) 2)) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))","fresh",0.15426505115753777],["(fma.f64 y i (pow.f64 (cbrt.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))) 3))","fresh",0.6932565918954711],["(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x) (+.f64 (+.f64 z t) a))))","next",0.15072250976844204],["(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) (pow.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) 2) (+.f64 z t)) a)))","fresh",0.19568256837909412],["(fma.f64 y i (fma.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) (pow.f64 (cbrt.f64 (log.f64 c)) 2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))","fresh",0.1676750488422101],["(fma.f64 y i (fma.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 c))) 6) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))","fresh",0.23653271439859316]],"compiler":[[36,25],[29,20],[33,22],[35,21],[33,21],[34,22],[36,25],[29,20],[33,22],[35,21],[33,21],[34,22]],"count":[[145,6]],"kept":[{"done":[0,0],"fresh":[4,3],"new":[140,3],"picked":[1,0]}],"min-error":[0.01953125],"time":47.97900390625,"type":"prune"},{"compiler":[[115,48]],"locations":[["(cbrt.f64 (log.f64 y))",0.109375,true],["(cbrt.f64 (pow.f64 (log.f64 y) 2))",0.1171875,true],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)",0.23828125,true],["(pow.f64 (log.f64 y) 2)",0.49447250976844204,true]],"time":27.755126953125,"type":"localize"},{"count":[[4,56]],"series":[["(cbrt.f64 (log.f64 y))","y","-inf",1.012939453125],["(cbrt.f64 (log.f64 y))","y","inf",1.02392578125],["(cbrt.f64 (log.f64 y))","y","0",0.930908203125],["(cbrt.f64 (pow.f64 (log.f64 y) 2))","y","-inf",0.816162109375],["(cbrt.f64 (pow.f64 (log.f64 y) 2))","y","inf",1.537841796875],["(cbrt.f64 (pow.f64 (log.f64 y) 2))","y","0",0.81494140625],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","x","-inf",0.333984375],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","x","inf",0.385986328125],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","x","0",8.534912109375],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","y","-inf",1.31494140625],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","y","inf",0.97216796875],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","y","0",1.423828125],["(pow.f64 (log.f64 y) 2)","y","-inf",0.39794921875],["(pow.f64 (log.f64 y) 2)","y","inf",0.3740234375],["(pow.f64 (log.f64 y) 2)","y","0",0.39501953125]],"time":20.492919921875,"type":"series"},{"count":[[4,102]],"inputs":[["(pow.f64 (log.f64 y) 2)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(cbrt.f64 (log.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 y) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (pow.f64 (log.f64 y) 5/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 5/3) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2/3) (pow.f64 (log.f64 y) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 4/3) (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (pow.f64 (pow.f64 (log.f64 y) 4/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (log.f64 y) 4/3) 4/3) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 y)) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) (neg.f64 (pow.f64 (log.f64 y) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 y) 2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 y) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (pow.f64 (log.f64 y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2/3))) (cbrt.f64 (pow.f64 (log.f64 y) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (log.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (log.f64 y))) 2) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4/3)) (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x)) (pow.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) 2/3) (cbrt.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (pow.f64 (log.f64 y) 2/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4/3)) x) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) x)) (neg.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (log.f64 y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 y) 2/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 5/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 5/3)) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (cbrt.f64 (pow.f64 (log.f64 y) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4/3)) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 4/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 y) 2/3) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 y) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 y) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (log.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 y) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (log.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 y)))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 y)))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (log.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (log.f64 y))))))"]],"rules":[["egg-rr",19],["egg-rr",27],["egg-rr",28],["egg-rr",28]],"time":49.906982421875,"type":"rewrite"},{"count":[[158,111]],"inputs":[["(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (log.f64 y) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))"]],"time":169.009033203125,"type":"simplify"},{"compiler":[[3147,1288]],"time":27.948974609375,"type":"eval"},{"alts":[["(fma.f64 y i (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) 3) (cbrt.f64 (pow.f64 (log.f64 c) 2)) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))","next",0.15426505115753777],["(fma.f64 y i (pow.f64 (cbrt.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))) 3))","fresh",0.6932565918954711],["(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x) (+.f64 (+.f64 z t) a))))","done",0.15072250976844204],["(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x) (+.f64 (+.f64 z t) a))))","fresh",0.25140390629507225],["(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) (pow.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) 2) (+.f64 z t)) a)))","fresh",0.19568256837909412],["(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 6) 1/3)) x) (+.f64 (+.f64 z t) a))))","fresh",0.24911889652663022],["(fma.f64 y i (fma.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) (pow.f64 (cbrt.f64 (log.f64 c)) 2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))","fresh",0.1676750488422101],["(fma.f64 y i (fma.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 c))) 6) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))","fresh",0.23653271439859316]],"compiler":[[36,25],[29,20],[33,22],[36,25],[35,21],[35,24],[33,21],[34,22],[36,25],[29,20],[36,25],[35,21],[35,24],[33,21],[34,22]],"count":[[117,8]],"kept":[{"done":[0,0],"fresh":[5,5],"new":[111,2],"picked":[1,1]}],"min-error":[0.0078125],"time":33.491943359375,"type":"prune"},{"compiler":[[133,58]],"locations":[["(*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))",0.15234375,false],["(cbrt.f64 (pow.f64 (log.f64 c) 2))",0.15234375,false],["(pow.f64 (log.f64 c) 2)",0.5123825195368841,false],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) 3)",0.7459527832848188,true]],"time":33.606201171875,"type":"localize"},{"count":[[1,16]],"series":[["(pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) 3)","c","-inf",8.7451171875],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) 3)","c","inf",8.156005859375],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) 3)","c","0",10.6669921875],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) 3)","b","-inf",1.56103515625],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) 3)","b","inf",1.455078125],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) 3)","b","0",2.81591796875]],"time":33.546875,"type":"series"},{"count":[[1,59]],"inputs":[["(pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (log.f64 c)) b) (cbrt.f64 (*.f64 -1/8 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 -1/8 (log.f64 c))) (*.f64 (cbrt.f64 (log.f64 c)) b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 0) (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) (*.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 c)) b) 1) (*.f64 (cbrt.f64 (*.f64 -1/8 (log.f64 c))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 -1/8 (log.f64 c))) 1) (*.f64 (*.f64 (cbrt.f64 (log.f64 c)) b) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) (*.f64 0 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 b -1/2)) (*.f64 (cbrt.f64 (cbrt.f64 (log.f64 c))) (pow.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))))) 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 b -1/2)) (cbrt.f64 (*.f64 (pow.f64 (+.f64 b -1/2) 2) (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 c))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 c) 2/3)) (+.f64 b -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 2/3) (cbrt.f64 (+.f64 b -1/2))) (cbrt.f64 (cbrt.f64 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))))) 4) 2) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 b -1/2) 2) (log.f64 c))) (cbrt.f64 (+.f64 b -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 c))) (*.f64 (pow.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 2/3) (cbrt.f64 (+.f64 b -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (log.f64 c))) (pow.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 2/3)) (cbrt.f64 (+.f64 b -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 c) 2/3)) (+.f64 b -1/2)) (cbrt.f64 (cbrt.f64 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 c)) (cbrt.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2))))) (/.f64 (+.f64 (pow.f64 b 3) -1/8) (pow.f64 (cbrt.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 b 3) -1/8) (cbrt.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2))))) (/.f64 (cbrt.f64 (log.f64 c)) (pow.f64 (cbrt.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) (pow.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 2/3) (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 c) (+.f64 b -1/2))) (pow.f64 (+.f64 b -1/2) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (cbrt.f64 (log.f64 c)))) (cbrt.f64 (pow.f64 (log.f64 c) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 b -1/2) 2/3) (cbrt.f64 (*.f64 (log.f64 c) (+.f64 b -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 c) 2/3)) (*.f64 (+.f64 b -1/2) (cbrt.f64 (cbrt.f64 (log.f64 c)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 2/3)) (pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (log.f64 c)) (+.f64 (pow.f64 b 3) -1/8)) (/.f64 1 (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 b 3) -1/8) (/.f64 (cbrt.f64 (log.f64 c)) (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (log.f64 c)) (+.f64 (pow.f64 b 3) -1/8)) (cbrt.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2))))) (pow.f64 (cbrt.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (log.f64 c)) (+.f64 (pow.f64 b 3) -1/8)) (+.f64 1/4 (*.f64 b (+.f64 b 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (log.f64 c)) (neg.f64 (+.f64 (pow.f64 b 3) -1/8))) (neg.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 b 3) -1/8)) (*.f64 (cbrt.f64 (cbrt.f64 (log.f64 c))) (pow.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 2/3))) (cbrt.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 b 3) -1/8)) (cbrt.f64 (*.f64 (pow.f64 (+.f64 b -1/2) 2) (log.f64 c)))) (cbrt.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 b 3) -1/8)) (cbrt.f64 (log.f64 c))) (neg.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 c)) (+.f64 (pow.f64 b 3) -1/8)) 1) (+.f64 1/4 (*.f64 b (+.f64 b 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (log.f64 c)) (+.f64 (pow.f64 b 3) -1/8)) 1) (+.f64 1/4 (*.f64 b (+.f64 b 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (log.f64 c)) (+.f64 (pow.f64 b 3) -1/8))) (neg.f64 (+.f64 1/4 (*.f64 b (+.f64 b 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (+.f64 b -1/2) 3) (log.f64 c)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 b -1/2) 3) (log.f64 c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 c)) -1/2 (*.f64 (cbrt.f64 (log.f64 c)) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 b (cbrt.f64 (log.f64 c)) (cbrt.f64 (*.f64 -1/8 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 c)) b (cbrt.f64 (*.f64 -1/8 (log.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 (cbrt.f64 (log.f64 c)) (*.f64 (cbrt.f64 (log.f64 c)) b))))))"]],"rules":[["egg-rr",59]],"time":21.791015625,"type":"rewrite"},{"count":[[75,72]],"inputs":[["(*.f64 -1/2 (*.f64 (pow.f64 (log.f64 c) 1/3) (pow.f64 (pow.f64 1 4) 1/9)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 (log.f64 c) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (*.f64 b (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (log.f64 c) (pow.f64 (cbrt.f64 -1/2) 4)) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (log.f64 c) (pow.f64 (cbrt.f64 -1/2) 4)) 1/3) (pow.f64 (pow.f64 1 4) 1/9))))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 (log.f64 c) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (+.f64 (*.f64 (pow.f64 b 2) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (log.f64 c) (cbrt.f64 -1/2)) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (log.f64 c) (cbrt.f64 -1/2)) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/9) (*.f64 (cbrt.f64 -1/2) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 c) 2) (pow.f64 1 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 c) 2) (pow.f64 1 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 4)) 1/3))))))))) (*.f64 b (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (log.f64 c) (pow.f64 (cbrt.f64 -1/2) 4)) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (log.f64 c) (pow.f64 (cbrt.f64 -1/2) 4)) 1/3) (pow.f64 (pow.f64 1 4) 1/9)))))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 (log.f64 c) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (+.f64 (*.f64 (pow.f64 b 2) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (log.f64 c) (cbrt.f64 -1/2)) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (log.f64 c) (cbrt.f64 -1/2)) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/9) (*.f64 (cbrt.f64 -1/2) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 c) 2) (pow.f64 1 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 c) 2) (pow.f64 1 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 4)) 1/3))))))))) (+.f64 (*.f64 b (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (log.f64 c) (pow.f64 (cbrt.f64 -1/2) 4)) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (log.f64 c) (pow.f64 (cbrt.f64 -1/2) 4)) 1/3) (pow.f64 (pow.f64 1 4) 1/9))))) (*.f64 (pow.f64 b 3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (log.f64 c) 1/3) (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (+.f64 (*.f64 -2/27 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 2)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 2))) (*.f64 -4/27 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 2))))))))) (+.f64 (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/9) (*.f64 (cbrt.f64 -1/2) (+.f64 (*.f64 4/27 (pow.f64 (*.f64 (pow.f64 (log.f64 c) 2) 1) 1/9)) (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 c) 2) 1) 1/9) (/.f64 (+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 2))) (+.f64 (*.f64 -2/27 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 2)) (pow.f64 1 1/3))) (*.f64 -4/27 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 2)))))) (cbrt.f64 -1/2))))))) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (log.f64 c) 1/3) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 2)) (pow.f64 (pow.f64 1 4) 1/9)))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (log.f64 c) (pow.f64 1 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 2)) 1/3) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 c) 2) (pow.f64 1 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 c) 2) (pow.f64 1 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 4)) 1/3))))))))))))))","(*.f64 (pow.f64 (log.f64 c) 1/3) (*.f64 (-.f64 b 1/2) (pow.f64 (pow.f64 1 4) 1/9)))","(*.f64 (pow.f64 (log.f64 c) 1/3) (*.f64 (-.f64 b 1/2) (pow.f64 (pow.f64 1 4) 1/9)))","(*.f64 (pow.f64 (log.f64 c) 1/3) (*.f64 (-.f64 b 1/2) (pow.f64 (pow.f64 1 4) 1/9)))","(*.f64 (pow.f64 (log.f64 c) 1/3) (*.f64 (-.f64 b 1/2) (pow.f64 (pow.f64 1 4) 1/9)))","(*.f64 (-.f64 b 1/2) (*.f64 (pow.f64 -1 1/9) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3)))","(*.f64 (-.f64 b 1/2) (*.f64 (pow.f64 -1 1/9) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3)))","(*.f64 (-.f64 b 1/2) (*.f64 (pow.f64 -1 1/9) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3)))","(*.f64 (-.f64 b 1/2) (*.f64 (pow.f64 -1 1/9) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3)))","(*.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1/3) (*.f64 (-.f64 b 1/2) (pow.f64 (pow.f64 1 4) 1/9)))","(*.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1/3) (*.f64 (-.f64 b 1/2) (pow.f64 (pow.f64 1 4) 1/9)))","(*.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1/3) (*.f64 (-.f64 b 1/2) (pow.f64 (pow.f64 1 4) 1/9)))","(*.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1/3) (*.f64 (-.f64 b 1/2) (pow.f64 (pow.f64 1 4) 1/9)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/2 (*.f64 (pow.f64 (log.f64 c) 1/3) (pow.f64 (pow.f64 1 4) 1/9)))","(cbrt.f64 (*.f64 (log.f64 c) -1/8))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 (log.f64 c) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (*.f64 b (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (log.f64 c) (pow.f64 (cbrt.f64 -1/2) 4)) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (log.f64 c) (pow.f64 (cbrt.f64 -1/2) 4)) 1/3) (pow.f64 (pow.f64 1 4) 1/9))))))","(fma.f64 b (cbrt.f64 (*.f64 (log.f64 c) (pow.f64 (cbrt.f64 -1/2) 4))) (cbrt.f64 (*.f64 (log.f64 c) -1/8)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 (log.f64 c) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (+.f64 (*.f64 (pow.f64 b 2) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (log.f64 c) (cbrt.f64 -1/2)) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (log.f64 c) (cbrt.f64 -1/2)) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/9) (*.f64 (cbrt.f64 -1/2) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 c) 2) (pow.f64 1 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 c) 2) (pow.f64 1 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 4)) 1/3))))))))) (*.f64 b (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (log.f64 c) (pow.f64 (cbrt.f64 -1/2) 4)) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (log.f64 c) (pow.f64 (cbrt.f64 -1/2) 4)) 1/3) (pow.f64 (pow.f64 1 4) 1/9)))))))","(fma.f64 -1/2 (cbrt.f64 (log.f64 c)) (fma.f64 (*.f64 b b) (+.f64 (*.f64 (cbrt.f64 (/.f64 (log.f64 c) (cbrt.f64 -1/2))) (+.f64 -1/9 2/9)) (*.f64 (pow.f64 (log.f64 c) 1/9) (*.f64 (cbrt.f64 -1/2) (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 c) 2) 1/9) (cbrt.f64 (pow.f64 (cbrt.f64 -1/2) -4))) -1/9)))) (*.f64 b (cbrt.f64 (*.f64 (log.f64 c) (pow.f64 (cbrt.f64 -1/2) 4))))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 (log.f64 c) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (+.f64 (*.f64 (pow.f64 b 2) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (log.f64 c) (cbrt.f64 -1/2)) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (log.f64 c) (cbrt.f64 -1/2)) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/9) (*.f64 (cbrt.f64 -1/2) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 c) 2) (pow.f64 1 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 c) 2) (pow.f64 1 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 4)) 1/3))))))))) (+.f64 (*.f64 b (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (log.f64 c) (pow.f64 (cbrt.f64 -1/2) 4)) 1/3) (pow.f64 (pow.f64 1 4) 1/9))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (log.f64 c) (pow.f64 (cbrt.f64 -1/2) 4)) 1/3) (pow.f64 (pow.f64 1 4) 1/9))))) (*.f64 (pow.f64 b 3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (log.f64 c) 1/3) (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (+.f64 (*.f64 -2/27 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 2)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 2))) (*.f64 -4/27 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 2))))))))) (+.f64 (*.f64 (pow.f64 (*.f64 (log.f64 c) 1) 1/9) (*.f64 (cbrt.f64 -1/2) (+.f64 (*.f64 4/27 (pow.f64 (*.f64 (pow.f64 (log.f64 c) 2) 1) 1/9)) (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 c) 2) 1) 1/9) (/.f64 (+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 2))) (+.f64 (*.f64 -2/27 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 2)) (pow.f64 1 1/3))) (*.f64 -4/27 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 2)))))) (cbrt.f64 -1/2))))))) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (log.f64 c) 1/3) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 2)) (pow.f64 (pow.f64 1 4) 1/9)))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (log.f64 c) (pow.f64 1 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 2)) 1/3) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 c) 2) (pow.f64 1 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 c) 2) (pow.f64 1 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/2) 4)) 1/3))))))))))))))","(fma.f64 (cbrt.f64 (log.f64 c)) -1/2 (fma.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 (log.f64 c) (cbrt.f64 -1/2))) (+.f64 -1/9 2/9)) (*.f64 (pow.f64 (log.f64 c) 1/9) (*.f64 (cbrt.f64 -1/2) (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 c) 2) 1/9) (cbrt.f64 (pow.f64 (cbrt.f64 -1/2) -4))) -1/9)))) (*.f64 b b) (fma.f64 b (cbrt.f64 (*.f64 (log.f64 c) (pow.f64 (cbrt.f64 -1/2) 4))) (*.f64 (pow.f64 b 3) (fma.f64 (*.f64 (cbrt.f64 (log.f64 c)) (fma.f64 -2/27 (pow.f64 (cbrt.f64 -1/2) -2) (*.f64 (pow.f64 (cbrt.f64 -1/2) -2) (+.f64 -4/27 1/27)))) -1/3 (fma.f64 (pow.f64 (log.f64 c) 1/9) (*.f64 (cbrt.f64 -1/2) (fma.f64 4/27 (pow.f64 (pow.f64 (log.f64 c) 2) 1/9) (/.f64 (*.f64 (*.f64 -2/3 (pow.f64 (pow.f64 (log.f64 c) 2) 1/9)) (fma.f64 -2/27 (pow.f64 (cbrt.f64 -1/2) -2) (*.f64 (pow.f64 (cbrt.f64 -1/2) -2) (+.f64 -4/27 1/27)))) (cbrt.f64 -1/2)))) (fma.f64 (*.f64 1/3 (pow.f64 (log.f64 c) 1/9)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -1/2) -2)) (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 c) 2) 1/9) (cbrt.f64 (pow.f64 (cbrt.f64 -1/2) -4))) -1/9)) (*.f64 (cbrt.f64 (*.f64 -8/19683 (log.f64 c))) (pow.f64 (cbrt.f64 -1/2) -2)))))))))","(*.f64 (pow.f64 (log.f64 c) 1/3) (*.f64 (-.f64 b 1/2) (pow.f64 (pow.f64 1 4) 1/9)))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(*.f64 (pow.f64 (log.f64 c) 1/3) (*.f64 (-.f64 b 1/2) (pow.f64 (pow.f64 1 4) 1/9)))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(*.f64 (pow.f64 (log.f64 c) 1/3) (*.f64 (-.f64 b 1/2) (pow.f64 (pow.f64 1 4) 1/9)))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(*.f64 (pow.f64 (log.f64 c) 1/3) (*.f64 (-.f64 b 1/2) (pow.f64 (pow.f64 1 4) 1/9)))","(*.f64 (cbrt.f64 (log.f64 c)) (+.f64 b -1/2))","(*.f64 (-.f64 b 1/2) (*.f64 (pow.f64 -1 1/9) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3)))","(*.f64 (*.f64 (+.f64 b -1/2) (pow.f64 -1 1/9)) (cbrt.f64 (neg.f64 (log.f64 c))))","(*.f64 (-.f64 b 1/2) (*.f64 (pow.f64 -1 1/9) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3)))","(*.f64 (*.f64 (+.f64 b -1/2) (pow.f64 -1 1/9)) (cbrt.f64 (neg.f64 (log.f64 c))))","(*.f64 (-.f64 b 1/2) (*.f64 (pow.f64 -1 1/9) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3)))","(*.f64 (*.f64 (+.f64 b -1/2) (pow.f64 -1 1/9)) (cbrt.f64 (neg.f64 (log.f64 c))))","(*.f64 (-.f64 b 1/2) (*.f64 (pow.f64 -1 1/9) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 c))) 1/3)))","(*.f64 (*.f64 (+.f64 b -1/2) (pow.f64 -1 1/9)) (cbrt.f64 (neg.f64 (log.f64 c))))","(*.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1/3) (*.f64 (-.f64 b 1/2) (pow.f64 (pow.f64 1 4) 1/9)))","(*.f64 (cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 c))))) (+.f64 b -1/2))","(*.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1/3) (*.f64 (-.f64 b 1/2) (pow.f64 (pow.f64 1 4) 1/9)))","(*.f64 (cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 c))))) (+.f64 b -1/2))","(*.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1/3) (*.f64 (-.f64 b 1/2) (pow.f64 (pow.f64 1 4) 1/9)))","(*.f64 (cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 c))))) (+.f64 b -1/2))","(*.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 c)))) 1/3) (*.f64 (-.f64 b 1/2) (pow.f64 (pow.f64 1 4) 1/9)))","(*.f64 (cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 c))))) (+.f64 b -1/2))"]],"time":70.840087890625,"type":"simplify"},{"compiler":[[7051,3449]],"time":66.10986328125,"type":"eval"},{"alts":[["(fma.f64 y i (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) 3) (cbrt.f64 (pow.f64 (log.f64 c) 2)) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))","done",0.15426505115753777],["(fma.f64 y i (pow.f64 (cbrt.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))) 3))","fresh",0.6932565918954711],["(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x) (+.f64 (+.f64 z t) a))))","done",0.15072250976844204],["(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x) (+.f64 (+.f64 z t) a))))","fresh",0.25140390629507225],["(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) (pow.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) 2) (+.f64 z t)) a)))","fresh",0.19568256837909412],["(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 6) 1/3)) x) (+.f64 (+.f64 z t) a))))","fresh",0.24911889652663022],["(fma.f64 y i (fma.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) (pow.f64 (cbrt.f64 (log.f64 c)) 2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))","fresh",0.1676750488422101],["(fma.f64 y i (fma.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 c))) 6) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))","fresh",0.23653271439859316]],"compiler":[[36,25],[29,20],[33,22],[36,25],[35,21],[35,24],[33,21],[34,22]],"count":[[199,8]],"kept":[{"done":[1,1],"fresh":[6,6],"new":[191,0],"picked":[1,1]}],"min-error":[0.0078125],"time":66.423095703125,"type":"prune"},{"accuracy":[0.09375],"baseline":[0.09375],"branch":[["x",0.09375,1],["y",0.09375,1],["z",0.09375,1],["t",0.09375,1],["a",0.09375,1],["b",0.09375,1],["c",0.09375,1],["i",0.09375,1],["(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))",0.09375,1],["(*.f64 (-.f64 b 1/2) (log.f64 c))",0.09375,1],["(-.f64 b 1/2)",0.09375,1],["(log.f64 c)",0.09375,1]],"compiler":[[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[29,20],[14,12],[11,10],[10,9],[308,126]],"count":[[12,1]],"inputs":[["(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x) (+.f64 (+.f64 z t) a))))","(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 6) 1/3)) x) (+.f64 (+.f64 z t) a))))","(fma.f64 y i (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c)))) 3) (cbrt.f64 (pow.f64 (log.f64 c) 2)) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))","(fma.f64 y i (fma.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) (pow.f64 (cbrt.f64 (log.f64 c)) 2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))","(fma.f64 y i (fma.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 c))) 6) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))","(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x) (+.f64 (+.f64 z t) a))))","(fma.f64 y i (fma.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (log.f64 c))) (pow.f64 (cbrt.f64 (*.f64 (+.f64 b -1/2) (log.f64 c))) 2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))","(fma.f64 y i (pow.f64 (cbrt.f64 (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a)))) 3))","(fma.f64 y i (fma.f64 (*.f64 (+.f64 b -1/2) (cbrt.f64 (log.f64 c))) (cbrt.f64 (pow.f64 (log.f64 c) 2)) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))","(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) (pow.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) 2) (+.f64 z t)) a)))","(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))"]],"link":["."],"name":["Numeric.SpecFunctions:logBeta from math-functions-0.1.5.2, B"],"oracle":[0.9154982051360226],"outputs":[["(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)))"]],"time":73.18408203125,"times":[["x",4.816162109375],["y",13.427001953125],["z",4.973876953125],["t",4.80810546875],["a",4.947998046875],["b",4.7470703125],["c",4.992919921875],["i",5.069091796875],["(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) a) (*.f64 (-.f64 b 1/2) (log.f64 c))) (*.f64 y i))",5.06103515625],["(*.f64 (-.f64 b 1/2) (log.f64 c))",5.041015625],["(-.f64 b 1/2)",3.4970703125],["(log.f64 c)",5.2958984375]],"type":"regimes"},{"compiler":[[26,17]],"inputs":[["(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 y i (fma.f64 (+.f64 b -1/2) (log.f64 c) (+.f64 (fma.f64 (log.f64 y) x (+.f64 z t)) a)))","(fma.f64 i y (fma.f64 (log.f64 c) (+.f64 b -1/2) (fma.f64 (log.f64 y) x (+.f64 (+.f64 z t) a))))"]],"stop":[["fuel",1]],"time":20.68701171875,"type":"simplify"},{"time":0.016845703125,"type":"soundness"},{"compiler":[[26,17]],"remove-preprocessing":[[]],"time":11.4990234375,"type":"end"}]
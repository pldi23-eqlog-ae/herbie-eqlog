[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.6552891655992426,0.34324670579007943,0.0014641286106780171],[11,0.6552891655992426,0.34324670579007943,0.0014641286106780171],[10,0.5616764276564936,0.43685944373282837,0.0014641286106780171],[9,0.37445095177099574,0.6240849196183262,0.0014641286106780171],[8,0.37445095177099574,0.6240849196183262,0.0014641286106780171],[7,0.2496339678473305,0.7489019035419915,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":118.945068359375,"type":"analyze"},{"outcomes":[["body",1024,"valid",347.12890625,1296],["body",512,"valid",108.212646484375,699],["body",2048,"valid",1.157958984375,2],["body",256,"valid",456.961669921875,6259]],"time":921.609130859375,"type":"sample"},{"compiler":[[12,8]],"inputs":[["0","1","2"],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","(+.f64 (+.f64 y (sin.f64 x)) (*.f64 z (cos.f64 x)))","(+.f64 (+.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(+.f64 (+.f64 x (sin.f64 z)) (*.f64 y (cos.f64 z)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","(fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y)))","(+.f64 (+.f64 y (sin.f64 x)) (*.f64 z (cos.f64 x)))","(fma.f64 z (cos.f64 x) (+.f64 y (sin.f64 x)))","(+.f64 (+.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(fma.f64 x (cos.f64 y) (+.f64 z (sin.f64 y)))","(+.f64 (+.f64 x (sin.f64 z)) (*.f64 y (cos.f64 z)))","(fma.f64 y (cos.f64 z) (+.f64 x (sin.f64 z)))"]],"symmetry":[[]],"time":72.56201171875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","(fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y)))"]],"time":18.19384765625,"type":"simplify"},{"compiler":[[20,9]],"time":0.338134765625,"type":"eval"},{"alts":[["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","next",0.05078125]],"compiler":[[12,8],[12,8]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[0.05078125],"time":0.843994140625,"type":"prune"},{"compiler":[[27,8]],"locations":[["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))",0.0078125,true],["(cos.f64 y)",0.015625,true],["(sin.f64 y)",0.015625,true],["(*.f64 z (cos.f64 y))",0.109375,true]],"time":6.789794921875,"type":"localize"},{"count":[[4,60]],"series":[["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","z","-inf",0.193115234375],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","z","inf",0.171142578125],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","z","0",0.273193359375],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","y","-inf",0.197998046875],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","y","inf",0.243896484375],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","y","0",0.205078125],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","x","-inf",0.451904296875],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","x","inf",0.323974609375],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","x","0",0.4580078125],["(cos.f64 y)","y","-inf",0.135986328125],["(cos.f64 y)","y","inf",0.154052734375],["(cos.f64 y)","y","0",0.183837890625],["(sin.f64 y)","y","-inf",0.14306640625],["(sin.f64 y)","y","inf",0.164794921875],["(sin.f64 y)","y","0",0.257080078125],["(*.f64 z (cos.f64 y))","y","-inf",0.278076171875],["(*.f64 z (cos.f64 y))","y","inf",0.2900390625],["(*.f64 z (cos.f64 y))","y","0",0.512939453125],["(*.f64 z (cos.f64 y))","z","-inf",0.31298828125],["(*.f64 z (cos.f64 y))","z","inf",0.4150390625],["(*.f64 z (cos.f64 y))","z","0",0.779052734375]],"time":6.3740234375,"type":"series"},{"count":[[4,122]],"inputs":[["(*.f64 z (cos.f64 y))","(sin.f64 y)","(cos.f64 y)","(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (cos.f64 y)) (*.f64 (*.f64 z (cos.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z (cos.f64 y)) 0) (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (cos.f64 y)) (*.f64 0 (*.f64 z (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 z (cos.f64 y))) (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) z) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 z z)) (cos.f64 y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (cos.f64 y))) (cbrt.f64 (pow.f64 (*.f64 z (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 z (cos.f64 y)) 2)) (cbrt.f64 (*.f64 z (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 y) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 z) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 z (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 z) (cos.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (cos.f64 y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (cos.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (cos.f64 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (cos.f64 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 z) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (cos.f64 y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) (*.f64 (sin.f64 y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) 0) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) (*.f64 0 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sin.f64 y)) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 y)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 y) (*.f64 (cos.f64 y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 y) 0) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 y) (*.f64 0 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 y)) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (pow.f64 (cos.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 y)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (cos.f64 y)) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (cos.f64 y) x) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) (fma.f64 z (cos.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y))) (*.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y))) 0) (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z (cos.f64 y) x) 1) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y))) (*.f64 0 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y)))) (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) (*.f64 (fma.f64 z (cos.f64 y) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y)))) (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 x (sin.f64 y)) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 z (cos.f64 y)) 2)) (cbrt.f64 (*.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))))) (+.f64 (cbrt.f64 (+.f64 x (sin.f64 y))) (cbrt.f64 (*.f64 z (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 z (cos.f64 y)) 2)) (-.f64 (cbrt.f64 (pow.f64 (+.f64 x (sin.f64 y)) 2)) (cbrt.f64 (*.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))))) (+.f64 (cbrt.f64 (*.f64 z (cos.f64 y))) (cbrt.f64 (+.f64 x (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y))) 2)) (cbrt.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z (cos.f64 y))) (cbrt.f64 (pow.f64 (*.f64 z (cos.f64 y)) 2)) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (fma.f64 z (cos.f64 y) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x (sin.f64 y))) (cbrt.f64 (pow.f64 (+.f64 x (sin.f64 y)) 2)) (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) z) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (neg.f64 z) (cos.f64 y)) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) (cos.f64 y)) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 y) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 z (cos.f64 y)) 2)) (cbrt.f64 (*.f64 z (cos.f64 y))) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (fma.f64 z (cos.f64 y) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (fma.f64 z (cos.f64 y) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (cbrt.f64 (sin.f64 y)) (fma.f64 z (cos.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (fma.f64 z (cos.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (sin.f64 y)) (fma.f64 z (cos.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (+.f64 x (sin.f64 y))) (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x (sin.f64 y)) 2)) (cbrt.f64 (+.f64 x (sin.f64 y))) (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) (cbrt.f64 (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z (cos.f64 y)) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (fma.f64 z (cos.f64 y) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cos.f64 y)) 1 (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (fma.f64 z (cos.f64 y) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sin.f64 y) (fma.f64 z (cos.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 y) 1 (fma.f64 z (cos.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x (sin.f64 y)) 1 (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)))))"]],"rules":[["egg-rr",56],["egg-rr",19],["egg-rr",19],["egg-rr",28]],"time":31.37109375,"type":"rewrite"},{"count":[[182,156]],"inputs":[["(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","z","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 z (*.f64 1/24 (*.f64 (pow.f64 y 4) z))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) z)) (+.f64 z (*.f64 1/24 (*.f64 (pow.f64 y 4) z)))))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (*.f64 z (cos.f64 y)) (sin.f64 y))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","x","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","x","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 z x)","(+.f64 y (+.f64 z x))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y (+.f64 z x)))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y (+.f64 z x))))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","z","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) z)","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 z (*.f64 1/24 (*.f64 (pow.f64 y 4) z))))","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) (fma.f64 1/24 (*.f64 (pow.f64 y 4) z) z))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) z)) (+.f64 z (*.f64 1/24 (*.f64 (pow.f64 y 4) z)))))","(+.f64 (*.f64 z (+.f64 (*.f64 -1/2 (*.f64 y y)) (*.f64 -1/720 (pow.f64 y 6)))) (fma.f64 1/24 (*.f64 (pow.f64 y 4) z) z))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(fma.f64 -1/6 (pow.f64 y 3) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) (fma.f64 (pow.f64 y 7) -1/5040 y)))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(fma.f64 -1/2 (*.f64 y y) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 1/24 (pow.f64 y 4) (*.f64 -1/2 (*.f64 y y))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (fma.f64 (pow.f64 y 6) -1/720 1) (fma.f64 1/24 (pow.f64 y 4) (*.f64 -1/2 (*.f64 y y))))","(+.f64 (*.f64 z (cos.f64 y)) (sin.f64 y))","(fma.f64 z (cos.f64 y) (sin.f64 y))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","x","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","x","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 z x)","(+.f64 y (+.f64 z x))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y (+.f64 z x)))","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) (+.f64 y (+.f64 z x)))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y (+.f64 z x))))","(fma.f64 (pow.f64 y 3) -1/6 (fma.f64 -1/2 (*.f64 (*.f64 y y) z) (+.f64 y (+.f64 z x))))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (+.f64 (sin.f64 y) x))"]],"time":176.39501953125,"type":"simplify"},{"compiler":[[2099,695]],"time":20.248046875,"type":"eval"},{"alts":[["(fma.f64 (*.f64 (cos.f64 y) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) (+.f64 x (sin.f64 y)))","fresh",17.844887246912908],["(+.f64 (+.f64 x (sin.f64 y)) (+.f64 (*.f64 z (+.f64 (*.f64 -1/2 (*.f64 y y)) (*.f64 -1/720 (pow.f64 y 6)))) (fma.f64 1/24 (*.f64 (pow.f64 y 4) z) z)))","fresh",27.86280089142189],["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (+.f64 x (sin.f64 y)))","next",0.10384750976844201],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","done",0.05078125],["(+.f64 (+.f64 x (sin.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (cos.f64 y))) 3))","fresh",0.3910714356003984]],"compiler":[[17,11],[30,21],[18,12],[12,8],[15,11],[17,11],[30,21],[18,12],[15,11]],"count":[[157,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[156,4],"picked":[1,1]}],"min-error":[0.015625],"time":46.251953125,"type":"prune"},{"compiler":[[47,18]],"locations":[["(cbrt.f64 (pow.f64 (cos.f64 y) 2))",0.05859375,true],["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (+.f64 x (sin.f64 y)))",0.0625,true],["(*.f64 z (cbrt.f64 (cos.f64 y)))",0.12890625,true],["(pow.f64 (cos.f64 y) 2)",0.240566259768442,true]],"time":11.320068359375,"type":"localize"},{"count":[[4,76]],"series":[["(cbrt.f64 (pow.f64 (cos.f64 y) 2))","y","-inf",0.1669921875],["(cbrt.f64 (pow.f64 (cos.f64 y) 2))","y","inf",0.158935546875],["(cbrt.f64 (pow.f64 (cos.f64 y) 2))","y","0",0.368896484375],["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (+.f64 x (sin.f64 y)))","x","-inf",0.18603515625],["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (+.f64 x (sin.f64 y)))","x","inf",0.200927734375],["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (+.f64 x (sin.f64 y)))","x","0",0.93701171875],["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (+.f64 x (sin.f64 y)))","y","-inf",1.18798828125],["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (+.f64 x (sin.f64 y)))","y","inf",1.216064453125],["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (+.f64 x (sin.f64 y)))","y","0",0.258056640625],["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (+.f64 x (sin.f64 y)))","z","-inf",0.326904296875],["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (+.f64 x (sin.f64 y)))","z","inf",0.2490234375],["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (+.f64 x (sin.f64 y)))","z","0",1.238037109375],["(*.f64 z (cbrt.f64 (cos.f64 y)))","y","-inf",1.8720703125],["(*.f64 z (cbrt.f64 (cos.f64 y)))","y","inf",1.1728515625],["(*.f64 z (cbrt.f64 (cos.f64 y)))","y","0",0.35498046875],["(*.f64 z (cbrt.f64 (cos.f64 y)))","z","-inf",0.35400390625],["(*.f64 z (cbrt.f64 (cos.f64 y)))","z","inf",0.388916015625],["(*.f64 z (cbrt.f64 (cos.f64 y)))","z","0",1.514892578125],["(pow.f64 (cos.f64 y) 2)","y","-inf",0.30078125],["(pow.f64 (cos.f64 y) 2)","y","inf",0.343017578125],["(pow.f64 (cos.f64 y) 2)","y","0",0.346923828125]],"time":13.44091796875,"type":"series"},{"count":[[4,161]],"inputs":[["(pow.f64 (cos.f64 y) 2)","(*.f64 z (cbrt.f64 (cos.f64 y)))","(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (+.f64 x (sin.f64 y)))","(cbrt.f64 (pow.f64 (cos.f64 y) 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 1) (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cos.f64 y) 2) 0) (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 y) 2) (*.f64 (pow.f64 (cos.f64 y) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (cos.f64 y) 2)) (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 y) 2) (*.f64 0 (pow.f64 (cos.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cos.f64 (+.f64 y y))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 1/2) (*.f64 1/2 (cos.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 (*.f64 1/2 (cos.f64 (+.f64 y y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (-.f64 0 (pow.f64 (sin.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 -1 (pow.f64 (sin.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (pow.f64 (sin.f64 y) 2/3)) (cbrt.f64 (pow.f64 (sin.f64 y) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 4))) (pow.f64 (sin.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (sin.f64 y)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 (pow.f64 (sin.f64 y) 2/3) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (sin.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (sin.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 -1 (pow.f64 (sin.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cos.f64 y) (+.f64 2/3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 y)) (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cos.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) (+.f64 2/3 1)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (cos.f64 y)) 1) (*.f64 (neg.f64 (cos.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (sin.f64 y)) (-.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 4)) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (neg.f64 (pow.f64 (cos.f64 y) 2/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 y) (+.f64 2/3 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 2/3) (cbrt.f64 (pow.f64 (cos.f64 y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 4)) (pow.f64 (cos.f64 y) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 4)) (pow.f64 (cos.f64 y) 4))) (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0)) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0)) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0)) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 1/2 3) (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 y y))) 3)) (+.f64 (*.f64 1/2 1/2) (-.f64 (*.f64 (*.f64 1/2 (cos.f64 (+.f64 y y))) (*.f64 1/2 (cos.f64 (+.f64 y y)))) (*.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 y y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (sin.f64 y) 6)) (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 4) (pow.f64 (sin.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cos.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0)) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0)) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0)) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0)) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 2 (-.f64 (cos.f64 0) (cos.f64 (+.f64 y y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 2/3) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 2) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 2/3) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 2) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (cos.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cos.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (pow.f64 (sin.f64 y) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (pow.f64 (sin.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (pow.f64 (sin.f64 y) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) 0) (*.f64 z (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (*.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 z (cbrt.f64 (cos.f64 y)))) (*.f64 z (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (*.f64 0 (*.f64 z (cbrt.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (cbrt.f64 (cos.f64 y)))) (pow.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) 2/3) (cbrt.f64 (*.f64 z (cbrt.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (cbrt.f64 (*.f64 (*.f64 z z) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 z (cbrt.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) z) (cbrt.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 z z) (cos.f64 y))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 z (cbrt.f64 (cos.f64 y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (cos.f64 y))) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (cbrt.f64 (cos.f64 y)))) (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 z (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (cbrt.f64 (*.f64 z (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) (*.f64 z (cbrt.f64 (cbrt.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (cbrt.f64 (cos.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (cbrt.f64 (cos.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 z 3) (cos.f64 y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (cbrt.f64 (cos.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 z (cbrt.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 z 3) (cos.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (cos.f64 y) x) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y))) 0) (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y))) (*.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z (cos.f64 y) x) 1) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (cos.f64 y)) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y)))) (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y))) (*.f64 0 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) (fma.f64 z (cos.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y)))) (pow.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y))) 2/3) (cbrt.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z (cos.f64 y))) (cbrt.f64 (pow.f64 (*.f64 z (cos.f64 y)) 2)) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cos.f64 y) 2/3) (*.f64 z (cbrt.f64 (cos.f64 y))) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 z (pow.f64 (cos.f64 y) 2/3)) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 4) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z (cbrt.f64 (cos.f64 y)))) (*.f64 (pow.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) 2/3) (pow.f64 (cos.f64 y) 2/3)) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (+.f64 x (sin.f64 y))) (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x (sin.f64 y)) 2/3) (cbrt.f64 (+.f64 x (sin.f64 y))) (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x (sin.f64 y))) (pow.f64 (+.f64 x (sin.f64 y)) 2/3) (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cos.f64 y)) 1 (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z (cos.f64 y)) (+.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x (sin.f64 y)) 1 (*.f64 z (cos.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cos.f64 y) 2/3) 0) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 y) 2/3) (*.f64 (pow.f64 (cos.f64 y) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (cos.f64 y) 2/3)) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 y) 2/3) (*.f64 0 (pow.f64 (cos.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cos.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 y) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 y) (+.f64 2/3 1))) (cbrt.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 y))) (cbrt.f64 (neg.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3))) (cbrt.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 4)) (pow.f64 (cos.f64 y) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 4) (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cos.f64 y) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cos.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 2))))))"]],"rules":[["egg-rr",27],["egg-rr",40],["egg-rr",28],["egg-rr",66]],"time":33.51611328125,"type":"rewrite"},{"count":[[237,197]],"inputs":[["1","(+.f64 (*.f64 -1 (pow.f64 y 2)) 1)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (*.f64 1/3 (pow.f64 y 4))))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -2/45 (pow.f64 y 6)) (*.f64 1/3 (pow.f64 y 4)))))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","z","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) z)) z)","(+.f64 (*.f64 -1/72 (*.f64 (pow.f64 y 4) z)) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) z)) z))","(+.f64 (*.f64 -1/72 (*.f64 (pow.f64 y 4) z)) (+.f64 (*.f64 -23/6480 (*.f64 (pow.f64 y 6) z)) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) z)) z)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(+.f64 (sin.f64 y) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y)))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y)))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(+.f64 z x)","(+.f64 y (+.f64 z x))","(+.f64 y (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/6 z) (*.f64 -1/3 z))) (+.f64 z x)))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 y (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/6 z) (*.f64 -1/3 z))) (+.f64 z x))))","(+.f64 (sin.f64 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) x))","(+.f64 (sin.f64 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) x))","(+.f64 (sin.f64 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) x))","(+.f64 (sin.f64 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) x))","(+.f64 (sin.f64 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) x))","(+.f64 (sin.f64 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) x))","(+.f64 (sin.f64 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) x))","(+.f64 (sin.f64 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","1","(+.f64 1 (*.f64 -1/3 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/3 (pow.f64 y 2)) (*.f64 -1/405 (pow.f64 y 6))))","(+.f64 1 (+.f64 (*.f64 -1/1701 (pow.f64 y 8)) (+.f64 (*.f64 -1/3 (pow.f64 y 2)) (*.f64 -1/405 (pow.f64 y 6)))))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 (*.f64 -1 (pow.f64 y 2)) 1)","(-.f64 1 (*.f64 y y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (*.f64 1/3 (pow.f64 y 4))))","(-.f64 (fma.f64 1/3 (pow.f64 y 4) 1) (*.f64 y y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -2/45 (pow.f64 y 6)) (*.f64 1/3 (pow.f64 y 4)))))","(+.f64 (-.f64 1 (*.f64 y y)) (fma.f64 -2/45 (pow.f64 y 6) (*.f64 1/3 (pow.f64 y 4))))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","z","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) z)) z)","(fma.f64 -1/6 (*.f64 (*.f64 y y) z) z)","(+.f64 (*.f64 -1/72 (*.f64 (pow.f64 y 4) z)) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) z)) z))","(+.f64 (*.f64 z (+.f64 (*.f64 -1/72 (pow.f64 y 4)) (*.f64 -1/6 (*.f64 y y)))) z)","(+.f64 (*.f64 -1/72 (*.f64 (pow.f64 y 4) z)) (+.f64 (*.f64 -23/6480 (*.f64 (pow.f64 y 6) z)) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) z)) z)))","(+.f64 (*.f64 z (+.f64 (*.f64 -1/72 (pow.f64 y 4)) (*.f64 -23/6480 (pow.f64 y 6)))) (fma.f64 -1/6 (*.f64 (*.f64 y y) z) z))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) z)","(*.f64 (cbrt.f64 (cos.f64 y)) z)","(+.f64 (sin.f64 y) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y)))","(*.f64 z (cos.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y)))","(*.f64 z (cos.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 z x)","(+.f64 y (+.f64 z x))","(+.f64 y (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/6 z) (*.f64 -1/3 z))) (+.f64 z x)))","(+.f64 (fma.f64 (*.f64 y y) (*.f64 z -1/2) z) (+.f64 x y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 y (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/6 z) (*.f64 -1/3 z))) (+.f64 z x))))","(+.f64 (fma.f64 (pow.f64 y 3) -1/6 y) (fma.f64 (*.f64 y y) (*.f64 z -1/2) (+.f64 z x)))","(+.f64 (sin.f64 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (sin.f64 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (sin.f64 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (sin.f64 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (sin.f64 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (sin.f64 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (sin.f64 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (sin.f64 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(fma.f64 z (cos.f64 y) (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (+.f64 (sin.f64 y) x))","(fma.f64 z (cos.f64 y) (+.f64 (sin.f64 y) x))","1","(+.f64 1 (*.f64 -1/3 (pow.f64 y 2)))","(fma.f64 (*.f64 y y) -1/3 1)","(+.f64 1 (+.f64 (*.f64 -1/3 (pow.f64 y 2)) (*.f64 -1/405 (pow.f64 y 6))))","(+.f64 1 (fma.f64 (pow.f64 y 6) -1/405 (*.f64 -1/3 (*.f64 y y))))","(+.f64 1 (+.f64 (*.f64 -1/1701 (pow.f64 y 8)) (+.f64 (*.f64 -1/3 (pow.f64 y 2)) (*.f64 -1/405 (pow.f64 y 6)))))","(+.f64 1 (fma.f64 -1/1701 (pow.f64 y 8) (fma.f64 (pow.f64 y 6) -1/405 (*.f64 -1/3 (*.f64 y y)))))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))"]],"time":224.532958984375,"type":"simplify"},{"compiler":[[3542,1307]],"time":32.325927734375,"type":"eval"},{"alts":[["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (+.f64 x (sin.f64 y)))","done",0.10384750976844201],["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) (+.f64 2/3 1))) (cbrt.f64 (cbrt.f64 (cos.f64 y)))) (+.f64 x (sin.f64 y)))","fresh",16.58173754884221],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","done",0.05078125],["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))) (+.f64 x (sin.f64 y)))","next",0.20693089370931525],["(+.f64 (+.f64 x (sin.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (cos.f64 y))) 3))","fresh",0.3910714356003984]],"compiler":[[18,12],[25,16],[12,8],[23,15],[15,11],[25,16],[23,15],[15,11]],"count":[[202,5]],"kept":[{"done":[1,1],"fresh":[3,1],"new":[197,2],"picked":[1,1]}],"min-error":[0.00390625],"time":75.75390625,"type":"prune"},{"compiler":[[70,31]],"locations":[["(*.f64 z (cbrt.f64 (cos.f64 y)))",0.12890625,false],["(*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))",0.23046875,true],["(+.f64 -1 (sin.f64 y))",0.37225572681679653,true],["(-.f64 -1 (sin.f64 y))",0.43592821316615005,true]],"time":15.777099609375,"type":"localize"},{"count":[[3,36]],"series":[["(*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))","y","-inf",0.48486328125],["(*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))","y","inf",0.51708984375],["(*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))","y","0",0.237060546875],["(+.f64 -1 (sin.f64 y))","y","-inf",0.156982421875],["(+.f64 -1 (sin.f64 y))","y","inf",0.1650390625],["(+.f64 -1 (sin.f64 y))","y","0",0.18408203125],["(-.f64 -1 (sin.f64 y))","y","-inf",0.169921875],["(-.f64 -1 (sin.f64 y))","y","inf",0.208984375],["(-.f64 -1 (sin.f64 y))","y","0",0.240966796875]],"time":2.47705078125,"type":"series"},{"count":[[3,203]],"inputs":[["(-.f64 -1 (sin.f64 y))","(+.f64 -1 (sin.f64 y))","(*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (sin.f64 y)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 -1 (sin.f64 y)) (*.f64 (-.f64 -1 (sin.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 -1 (sin.f64 y)) 0) (-.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 -1 (sin.f64 y)) (*.f64 0 (-.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 -1 (sin.f64 y))) (-.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)) (neg.f64 (/.f64 (pow.f64 (sin.f64 y) 3) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)) (/.f64 (pow.f64 (sin.f64 y) 3) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (sin.f64 y)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)) (+.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1) 1) (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1) (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))) (/.f64 (-.f64 -1 (sin.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))) (/.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)) (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3))) 1) (/.f64 (pow.f64 (cbrt.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3))) 2) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (cbrt.f64 (neg.f64 (sin.f64 y))))) (-.f64 -1 (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 -1 (sin.f64 y))) (cbrt.f64 (pow.f64 (-.f64 -1 (sin.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 -1 (sin.f64 y)) 2)) (cbrt.f64 (-.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)) (/.f64 1 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)) (-.f64 -1 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 1 (sin.f64 y)))) (cbrt.f64 (pow.f64 (-.f64 -1 (sin.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (sin.f64 y) 3) 1) (/.f64 -1 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 1 (sin.f64 y))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 -1 (sin.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (pow.f64 (pow.f64 (sin.f64 y) 3) 3)) (/.f64 1 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))) (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (neg.f64 (pow.f64 (sin.f64 y) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)) (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))) (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)) (*.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1) (pow.f64 (sin.f64 y) 3))) (*.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (pow.f64 (pow.f64 (sin.f64 y) 3) 3)) 1) (*.f64 (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (neg.f64 (pow.f64 (sin.f64 y) 3)))) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (sin.f64 y) 3) 1) (neg.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 (sin.f64 y)) 2)) (cbrt.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)))) (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (sin.f64 y) 3) 1) 1) (neg.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3))) (cbrt.f64 (pow.f64 (-.f64 -1 (sin.f64 y)) 2))) (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)) 1) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 -1 (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 -1 (sin.f64 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 -1 (sin.f64 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 -1 (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 -1 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 -1 (sin.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 y)) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (sin.f64 y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 y) -1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 1 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -1 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (cbrt.f64 (pow.f64 (sin.f64 y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 -1 (sin.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 -1 (sin.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 -1 (sin.f64 y)) (*.f64 (+.f64 -1 (sin.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 -1 (sin.f64 y)) 0) (+.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 -1 (sin.f64 y)) (*.f64 0 (+.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 -1 (sin.f64 y))) (+.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 -1 (sin.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1)) (-.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (sin.f64 y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (/.f64 1 (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1))) (/.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)) (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3))) 1) (/.f64 (pow.f64 (cbrt.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3))) 2) (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1) (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1))) (/.f64 (+.f64 -1 (sin.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1) 1) (/.f64 (+.f64 -1 (sin.f64 y)) (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (cbrt.f64 (neg.f64 (sin.f64 y))))) (+.f64 -1 (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (-.f64 1 (cbrt.f64 (neg.f64 (sin.f64 y))))) (+.f64 (cbrt.f64 (sin.f64 y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (+.f64 1 (cbrt.f64 (sin.f64 y)))) (-.f64 (cbrt.f64 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)) (/.f64 1 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 -1 (sin.f64 y))) (cbrt.f64 (pow.f64 (+.f64 -1 (sin.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 -1 (sin.f64 y)) 2)) (cbrt.f64 (+.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1)) (+.f64 -1 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (pow.f64 (sin.f64 y) 3) 3)) (/.f64 1 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1))) (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)) (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1))) (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)) (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (pow.f64 (sin.f64 y) 3) 3)) 1) (*.f64 (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3))) (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 (sin.f64 y)) 2)) (cbrt.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)))) (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) 1) (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3))) (cbrt.f64 (pow.f64 (+.f64 -1 (sin.f64 y)) 2))) (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (neg.f64 (pow.f64 (sin.f64 y) 3))) (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)) 1) (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 -1 (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 -1 (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 -1 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 -1 (sin.f64 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 -1 (sin.f64 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)) (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 1 (sin.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (sin.f64 y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 -1 (sin.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (+.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (+.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (+.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sin.f64 y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 y) 1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (cbrt.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (+.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (+.f64 -1 (sin.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) (*.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) 0) (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) (*.f64 0 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))) (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (sin.f64 y)) 1) (*.f64 (neg.f64 (*.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y)) (+.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (sin.f64 y)) (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y)) 1) (+.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (sin.f64 y)) (*.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (sin.f64 y)) (neg.f64 (*.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)))) (-.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 1 (sin.f64 y)) (+.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 -1 (sin.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 (sin.f64 y)) 2)) (+.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 (sin.f64 y)) 2)) (+.f64 -1 (sin.f64 y))) (cbrt.f64 (-.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)) (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1))) (/.f64 (-.f64 -1 (sin.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)) 1) (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 -1 (sin.f64 y)) (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1))) (/.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)) (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)) 1) (/.f64 (+.f64 -1 (sin.f64 y)) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)) (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))) (/.f64 (+.f64 -1 (sin.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 (sin.f64 y)) (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))) (/.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)) (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) 2)) (cbrt.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (sin.f64 y)) (+.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (cbrt.f64 (+.f64 -1 (sin.f64 y)))) (cbrt.f64 (pow.f64 (+.f64 -1 (sin.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (cbrt.f64 (-.f64 -1 (sin.f64 y)))) (cbrt.f64 (pow.f64 (-.f64 -1 (sin.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 -1 (sin.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 (sin.f64 y)) 2)) (-.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (+.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 -1 (sin.f64 y)) 2)) (*.f64 (-.f64 -1 (sin.f64 y)) (cbrt.f64 (+.f64 -1 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 (sin.f64 y)) 2)) (-.f64 -1 (sin.f64 y))) (cbrt.f64 (+.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 1 (sin.f64 y)) (+.f64 -1 (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 -1 (sin.f64 y)) 2)) (*.f64 (+.f64 -1 (sin.f64 y)) (cbrt.f64 (-.f64 -1 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (sin.f64 y)) (+.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (sin.f64 y)) (-.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)) (-.f64 -1 (pow.f64 (sin.f64 y) 3))) (/.f64 1 (*.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (+.f64 -1 (pow.f64 (sin.f64 y) 3))) (/.f64 1 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (pow.f64 (sin.f64 y) 3))) (/.f64 1 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)) (-.f64 -1 (pow.f64 (sin.f64 y) 3))) (*.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)) (-.f64 -1 (pow.f64 (sin.f64 y) 3))) 1) (*.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (+.f64 -1 (pow.f64 (sin.f64 y) 3))) (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1))) (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (pow.f64 (sin.f64 y) 3))) (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))) (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)) (-.f64 1 (pow.f64 (sin.f64 y) 3))) (*.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1) (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (sin.f64 y) 3) 1) (-.f64 1 (pow.f64 (sin.f64 y) 3))) (*.f64 (neg.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)) (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (sin.f64 y) 3) 1) (+.f64 -1 (pow.f64 (sin.f64 y) 3))) (*.f64 (neg.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)) (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)) (+.f64 (pow.f64 (sin.f64 y) 3) 1)) (*.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1) (neg.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (-.f64 -1 (pow.f64 (sin.f64 y) 3))) (*.f64 (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y))) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 (pow.f64 (sin.f64 y) 3) 1)) (*.f64 (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y))) (neg.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)) (-.f64 -1 (pow.f64 (sin.f64 y) 3)))) (neg.f64 (*.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (pow.f64 (sin.f64 y) 3))) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (+.f64 (pow.f64 (sin.f64 y) 3) 1)) (neg.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (-.f64 1 (pow.f64 (sin.f64 y) 3))) (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (-.f64 -1 (sin.f64 y))) (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 (sin.f64 y)) 2)) (-.f64 -1 (sin.f64 y)))) (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (sin.f64 y) 3) 1) (+.f64 -1 (sin.f64 y))) (neg.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (pow.f64 (sin.f64 y) 3))) 1) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 (sin.f64 y)) 2)) (+.f64 -1 (sin.f64 y)))) (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (pow.f64 (sin.f64 y) 3))) 1) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (+.f64 -1 (pow.f64 (sin.f64 y) 3)))) (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (pow.f64 (sin.f64 y) 3)))) (neg.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (+.f64 -1 (pow.f64 (sin.f64 y) 3))) (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (+.f64 -1 (pow.f64 (sin.f64 y) 3))) 1) (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (+.f64 -1 (pow.f64 (sin.f64 y) 3))) 1) (fma.f64 (sin.f64 y) (+.f64 1 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 1 (sin.f64 y)) (+.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 1 (sin.f64 y)) (+.f64 -1 (sin.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 -1 (sin.f64 y)) -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 y) (-.f64 -1 (sin.f64 y)) (+.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (-.f64 -1 (sin.f64 y)) (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 -1 (sin.f64 y)) (neg.f64 (*.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) (+.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 -1 (sin.f64 y)) -1 (neg.f64 (*.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)))))))))"]],"rules":[["egg-rr",79],["egg-rr",63],["egg-rr",61]],"time":35.742919921875,"type":"rewrite"},{"count":[[239,225]],"inputs":[["-1","(-.f64 (*.f64 -1 y) 1)","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 1/6 (pow.f64 y 3))) 1)","(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 y 5)) (+.f64 (*.f64 -1 y) (*.f64 1/6 (pow.f64 y 3)))) 1)","(*.f64 -1 (+.f64 1 (sin.f64 y)))","(*.f64 -1 (+.f64 1 (sin.f64 y)))","(*.f64 -1 (+.f64 1 (sin.f64 y)))","(*.f64 -1 (+.f64 1 (sin.f64 y)))","(*.f64 -1 (+.f64 1 (sin.f64 y)))","(*.f64 -1 (+.f64 1 (sin.f64 y)))","(*.f64 -1 (+.f64 1 (sin.f64 y)))","(*.f64 -1 (+.f64 1 (sin.f64 y)))","-1","(-.f64 y 1)","(-.f64 (+.f64 (*.f64 -1/6 (pow.f64 y 3)) y) 1)","(-.f64 (+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 y (*.f64 1/120 (pow.f64 y 5)))) 1)","(-.f64 (sin.f64 y) 1)","(-.f64 (sin.f64 y) 1)","(-.f64 (sin.f64 y) 1)","(-.f64 (sin.f64 y) 1)","(-.f64 (sin.f64 y) 1)","(-.f64 (sin.f64 y) 1)","(-.f64 (sin.f64 y) 1)","(-.f64 (sin.f64 y) 1)","1","(+.f64 (*.f64 -1 (pow.f64 y 2)) 1)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (*.f64 1/3 (pow.f64 y 4))))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -2/45 (pow.f64 y 6)) (*.f64 1/3 (pow.f64 y 4)))))","(*.f64 -1 (*.f64 (-.f64 (sin.f64 y) 1) (+.f64 1 (sin.f64 y))))","(*.f64 -1 (*.f64 (-.f64 (sin.f64 y) 1) (+.f64 1 (sin.f64 y))))","(*.f64 -1 (*.f64 (-.f64 (sin.f64 y) 1) (+.f64 1 (sin.f64 y))))","(*.f64 -1 (*.f64 (-.f64 (sin.f64 y) 1) (+.f64 1 (sin.f64 y))))","(*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (-.f64 (sin.f64 y) 1)))","(*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (-.f64 (sin.f64 y) 1)))","(*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (-.f64 (sin.f64 y) 1)))","(*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (-.f64 (sin.f64 y) 1)))"]],"method":["egg-herbie"],"outputs":[["-1","(-.f64 (*.f64 -1 y) 1)","(neg.f64 (+.f64 y 1))","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 1/6 (pow.f64 y 3))) 1)","(+.f64 (neg.f64 y) (fma.f64 (pow.f64 y 3) 1/6 -1))","(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 y 5)) (+.f64 (*.f64 -1 y) (*.f64 1/6 (pow.f64 y 3)))) 1)","(+.f64 (fma.f64 (pow.f64 y 5) -1/120 (neg.f64 y)) (fma.f64 (pow.f64 y 3) 1/6 -1))","(*.f64 -1 (+.f64 1 (sin.f64 y)))","(neg.f64 (+.f64 1 (sin.f64 y)))","(*.f64 -1 (+.f64 1 (sin.f64 y)))","(neg.f64 (+.f64 1 (sin.f64 y)))","(*.f64 -1 (+.f64 1 (sin.f64 y)))","(neg.f64 (+.f64 1 (sin.f64 y)))","(*.f64 -1 (+.f64 1 (sin.f64 y)))","(neg.f64 (+.f64 1 (sin.f64 y)))","(*.f64 -1 (+.f64 1 (sin.f64 y)))","(neg.f64 (+.f64 1 (sin.f64 y)))","(*.f64 -1 (+.f64 1 (sin.f64 y)))","(neg.f64 (+.f64 1 (sin.f64 y)))","(*.f64 -1 (+.f64 1 (sin.f64 y)))","(neg.f64 (+.f64 1 (sin.f64 y)))","(*.f64 -1 (+.f64 1 (sin.f64 y)))","(neg.f64 (+.f64 1 (sin.f64 y)))","-1","(-.f64 y 1)","(+.f64 y -1)","(-.f64 (+.f64 (*.f64 -1/6 (pow.f64 y 3)) y) 1)","(fma.f64 -1/6 (pow.f64 y 3) (+.f64 y -1))","(-.f64 (+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 y (*.f64 1/120 (pow.f64 y 5)))) 1)","(+.f64 (fma.f64 (pow.f64 y 3) -1/6 (fma.f64 (pow.f64 y 5) 1/120 y)) -1)","(-.f64 (sin.f64 y) 1)","(+.f64 (sin.f64 y) -1)","(-.f64 (sin.f64 y) 1)","(+.f64 (sin.f64 y) -1)","(-.f64 (sin.f64 y) 1)","(+.f64 (sin.f64 y) -1)","(-.f64 (sin.f64 y) 1)","(+.f64 (sin.f64 y) -1)","(-.f64 (sin.f64 y) 1)","(+.f64 (sin.f64 y) -1)","(-.f64 (sin.f64 y) 1)","(+.f64 (sin.f64 y) -1)","(-.f64 (sin.f64 y) 1)","(+.f64 (sin.f64 y) -1)","(-.f64 (sin.f64 y) 1)","(+.f64 (sin.f64 y) -1)","1","(+.f64 (*.f64 -1 (pow.f64 y 2)) 1)","(-.f64 1 (*.f64 y y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (*.f64 1/3 (pow.f64 y 4))))","(-.f64 (fma.f64 1/3 (pow.f64 y 4) 1) (*.f64 y y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -2/45 (pow.f64 y 6)) (*.f64 1/3 (pow.f64 y 4)))))","(+.f64 (-.f64 1 (*.f64 y y)) (fma.f64 -2/45 (pow.f64 y 6) (*.f64 1/3 (pow.f64 y 4))))","(*.f64 -1 (*.f64 (-.f64 (sin.f64 y) 1) (+.f64 1 (sin.f64 y))))","(*.f64 (-.f64 1 (sin.f64 y)) (+.f64 1 (sin.f64 y)))","(*.f64 -1 (*.f64 (-.f64 (sin.f64 y) 1) (+.f64 1 (sin.f64 y))))","(*.f64 (-.f64 1 (sin.f64 y)) (+.f64 1 (sin.f64 y)))","(*.f64 -1 (*.f64 (-.f64 (sin.f64 y) 1) (+.f64 1 (sin.f64 y))))","(*.f64 (-.f64 1 (sin.f64 y)) (+.f64 1 (sin.f64 y)))","(*.f64 -1 (*.f64 (-.f64 (sin.f64 y) 1) (+.f64 1 (sin.f64 y))))","(*.f64 (-.f64 1 (sin.f64 y)) (+.f64 1 (sin.f64 y)))","(*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (-.f64 (sin.f64 y) 1)))","(*.f64 (-.f64 1 (sin.f64 y)) (+.f64 1 (sin.f64 y)))","(*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (-.f64 (sin.f64 y) 1)))","(*.f64 (-.f64 1 (sin.f64 y)) (+.f64 1 (sin.f64 y)))","(*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (-.f64 (sin.f64 y) 1)))","(*.f64 (-.f64 1 (sin.f64 y)) (+.f64 1 (sin.f64 y)))","(*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (-.f64 (sin.f64 y) 1)))","(*.f64 (-.f64 1 (sin.f64 y)) (+.f64 1 (sin.f64 y)))"]],"time":109.222900390625,"type":"simplify"},{"compiler":[[7431,3422]],"time":65.626220703125,"type":"eval"},{"alts":[["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (+.f64 x (sin.f64 y)))","done",0.10384750976844201],["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 -1 (sin.f64 y))) 3) (-.f64 -1 (sin.f64 y)))) (+.f64 x (sin.f64 y)))","fresh",0.2238834327830833],["(+.f64 (+.f64 x (sin.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (cos.f64 y))) 3))","fresh",0.3910714356003984],["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (/.f64 1 (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y))))) (-.f64 -1 (sin.f64 y)))) (+.f64 x (sin.f64 y)))","next",0.1983698322957463],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","done",0.05078125]],"compiler":[[18,12],[26,18],[15,11],[37,25],[12,8],[26,18],[15,11],[37,25]],"count":[[266,5]],"kept":[{"done":[2,2],"fresh":[2,1],"new":[261,2],"picked":[1,0]}],"min-error":[0],"time":120.472900390625,"type":"prune"},{"compiler":[[165,94]],"locations":[["(-.f64 1 (pow.f64 (sin.f64 y) 3))",0.21350051380715174,true],["(*.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (/.f64 1 (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y))))) (-.f64 -1 (sin.f64 y)))",0.23046875,true],["(pow.f64 (sin.f64 y) 3)",0.31972509768442015,true],["(-.f64 -1 (sin.f64 y))",0.43592821316615005,false]],"time":34.77392578125,"type":"localize"},{"count":[[3,20]],"series":[["(-.f64 1 (pow.f64 (sin.f64 y) 3))","y","-inf",0.162109375],["(-.f64 1 (pow.f64 (sin.f64 y) 3))","y","inf",0.155029296875],["(-.f64 1 (pow.f64 (sin.f64 y) 3))","y","0",0.2099609375],["(*.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (/.f64 1 (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y))))) (-.f64 -1 (sin.f64 y)))","y","-inf",1.147216796875],["(*.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (/.f64 1 (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y))))) (-.f64 -1 (sin.f64 y)))","y","inf",1.27099609375],["(*.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (/.f64 1 (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y))))) (-.f64 -1 (sin.f64 y)))","y","0",0.3330078125],["(pow.f64 (sin.f64 y) 3)","y","-inf",2.359130859375],["(pow.f64 (sin.f64 y) 3)","y","inf",0.48876953125],["(pow.f64 (sin.f64 y) 3)","y","0",0.399169921875]],"time":6.677001953125,"type":"series"},{"count":[[3,169]],"inputs":[["(pow.f64 (sin.f64 y) 3)","(*.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (/.f64 1 (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y))))) (-.f64 -1 (sin.f64 y)))","(-.f64 1 (pow.f64 (sin.f64 y) 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (sin.f64 y) 3) 0) (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (sin.f64 y) 3) (*.f64 (pow.f64 (sin.f64 y) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (sin.f64 y) 3)) (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (sin.f64 y) 3) (*.f64 0 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (pow.f64 (sin.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (pow.f64 (sin.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 y) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (sin.f64 y) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (sin.f64 y) 3) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (sin.f64 y)) (neg.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (sin.f64 y))) (-.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) 0) (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) (*.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (sin.f64 y)) (*.f64 1 (neg.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (sin.f64 y)) (*.f64 1 (neg.f64 (*.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1)) (neg.f64 (pow.f64 (sin.f64 y) 3))) (*.f64 (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1)) 1) (*.f64 (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1)) (neg.f64 (pow.f64 (sin.f64 y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (/.f64 1 (fma.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y) 1))) (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (/.f64 (neg.f64 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (/.f64 1 (fma.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y) 1))) (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (*.f64 (/.f64 -1 (fma.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y) 1)) (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1)) (*.f64 (-.f64 -1 (sin.f64 y)) (/.f64 (neg.f64 (pow.f64 (sin.f64 y) 3)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))) (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) (*.f64 0 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (sin.f64 y)) 1) (*.f64 (neg.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (sin.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (sin.f64 y)) 1) (*.f64 (neg.f64 (*.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 y) 3)) (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1))) (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1)) (*.f64 (neg.f64 (pow.f64 (sin.f64 y) 3)) (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (fma.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y) 1)) (-.f64 1 (pow.f64 (sin.f64 y) 3))) (*.f64 (/.f64 (neg.f64 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1)) (-.f64 1 (pow.f64 (sin.f64 y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (fma.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y) 1)) (-.f64 1 (pow.f64 (sin.f64 y) 3))) (*.f64 (*.f64 (/.f64 -1 (fma.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y) 1)) (neg.f64 (sin.f64 y))) (-.f64 1 (pow.f64 (sin.f64 y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1)) (*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 y) 3)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1)) (-.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (sin.f64 y)) (neg.f64 (*.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)))) (-.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 1 (sin.f64 y)) (+.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (-.f64 1 (pow.f64 (sin.f64 y) 3))) (/.f64 -1 (fma.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)) (-.f64 1 (pow.f64 (sin.f64 y) 3))) (/.f64 1 (*.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (-.f64 -1 (pow.f64 (sin.f64 y) 3))) (/.f64 1 (*.f64 (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 -1 (sin.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 (sin.f64 y)) 2)) (+.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 -1 (sin.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 (sin.f64 y)) 2)) (-.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (sin.f64 y)) (+.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) 2)) (cbrt.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (cbrt.f64 (-.f64 -1 (sin.f64 y)))) (cbrt.f64 (pow.f64 (-.f64 -1 (sin.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fma.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y) 1)) (*.f64 (-.f64 -1 (sin.f64 y)) (-.f64 1 (pow.f64 (sin.f64 y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1)) (-.f64 1 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) 2)) (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (+.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (sin.f64 y)) (+.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (sin.f64 y)) (-.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)) (neg.f64 (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)) (+.f64 -1 (sin.f64 y))) (/.f64 1 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (cbrt.f64 (+.f64 -1 (sin.f64 y)))) (cbrt.f64 (pow.f64 (+.f64 -1 (sin.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (sin.f64 y) 3) 3)) (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1))) (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)) (-.f64 1 (pow.f64 (sin.f64 y) 3))) (*.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (-.f64 -1 (pow.f64 (sin.f64 y) 3))) (*.f64 (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (sin.f64 y) 3) 3)) (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1))) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3))))) (pow.f64 (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)) (+.f64 -1 (sin.f64 y))) (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))) (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)) (-.f64 1 (pow.f64 (sin.f64 y) 3)))) (neg.f64 (*.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (-.f64 -1 (pow.f64 (sin.f64 y) 3)))) (*.f64 (fma.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y) 1) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (-.f64 1 (pow.f64 (sin.f64 y) 3))) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)) (-.f64 1 (pow.f64 (sin.f64 y) 3))) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (-.f64 1 (pow.f64 (sin.f64 y) 3))) -1) (fma.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (-.f64 1 (pow.f64 (sin.f64 y) 3))) (cbrt.f64 (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1))) (cbrt.f64 (pow.f64 (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (-.f64 1 (pow.f64 (sin.f64 y) 3))) (cbrt.f64 (pow.f64 (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1) 2))) (cbrt.f64 (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (-.f64 1 (pow.f64 (sin.f64 y) 3))) (+.f64 -1 (pow.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y)) 3))) (/.f64 1 (fma.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (-.f64 1 (pow.f64 (sin.f64 y) 3))) 1) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)) (+.f64 -1 (sin.f64 y)))) (neg.f64 (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (-.f64 1 (pow.f64 (sin.f64 y) 3)))) (fma.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)) (+.f64 -1 (sin.f64 y))) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (sin.f64 y) 3) 3)) (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1))) (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (-.f64 -1 (pow.f64 (sin.f64 y) 3))) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1)) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (sin.f64 y) 3) 3)) (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1))) 1) (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 -1 (pow.f64 (sin.f64 y) 3)) (+.f64 -1 (sin.f64 y))) 1) (fma.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (sin.f64 y) 3) 3)) (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1)))) (neg.f64 (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 1 (sin.f64 y)) (+.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 1 (sin.f64 y)) (+.f64 -1 (sin.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1))) (-.f64 1 (pow.f64 (sin.f64 y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (fma.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y) 1)) (*.f64 (-.f64 -1 (sin.f64 y)) (-.f64 1 (pow.f64 (sin.f64 y) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (*.f64 (+.f64 1 (sin.f64 y)) (+.f64 -1 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (-.f64 1 (pow.f64 (sin.f64 y) 3))) (/.f64 1 (fma.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1)) (+.f64 -1 (pow.f64 (sin.f64 y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 -1 (sin.f64 y)) (-.f64 1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (neg.f64 (/.f64 (-.f64 -1 (sin.f64 y)) (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 -1 (sin.f64 y)) -1 (neg.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 -1 (sin.f64 y)) (neg.f64 (*.f64 (sin.f64 y) (+.f64 -1 (sin.f64 y)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 (sin.f64 y) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (pow.f64 (sin.f64 y) 3)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) 0) (-.f64 1 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)) 0) (-.f64 1 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 1 (pow.f64 (sin.f64 y) 3))) (-.f64 1 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (*.f64 0 (-.f64 1 (pow.f64 (sin.f64 y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 -1 (pow.f64 (sin.f64 y) 3))) (-.f64 1 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3)))) (neg.f64 (/.f64 (pow.f64 (pow.f64 (sin.f64 y) 3) 3) (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 -1 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (pow.f64 (sin.f64 y) 3)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (neg.f64 (pow.f64 (sin.f64 y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (neg.f64 (pow.f64 (sin.f64 y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (pow.f64 (sin.f64 y) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3)))) 1) (/.f64 (/.f64 (pow.f64 (pow.f64 (sin.f64 y) 3) 3) (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3)))) (/.f64 (pow.f64 (pow.f64 (sin.f64 y) 3) 3) (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y) 1) (-.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 -1 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (neg.f64 (pow.f64 (sin.f64 y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y) -1) (+.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (pow.f64 (sin.f64 y) 3) 3)) (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (pow.f64 (sin.f64 y) 3) 3)) (/.f64 1 (neg.f64 (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (sin.f64 y) 3) 3)) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3))))) (pow.f64 (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (sin.f64 y) 3) 3)) (/.f64 (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (sin.f64 y) 3) 3)) (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3))) (*.f64 (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3))) (pow.f64 (pow.f64 (sin.f64 y) 3) 3))) (*.f64 (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3))) (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (pow.f64 (sin.f64 y) 3) 3)) (neg.f64 (+.f64 1 (+.f64 (pow.f64 (sin.f64 y) 6) (pow.f64 (sin.f64 y) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 -1 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (sin.f64 y) 2)) (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 y) (neg.f64 (pow.f64 (sin.f64 y) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (pow.f64 (sin.f64 y) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sin.f64 y)) (pow.f64 (sin.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (sin.f64 y) 2) (neg.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 1 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 1 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 1 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 1 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 1 (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 (sin.f64 y) 3) 1)))))"]],"rules":[["egg-rr",63],["egg-rr",87],["egg-rr",19]],"time":39.593017578125,"type":"rewrite"},{"count":[[189,191]],"inputs":[["(pow.f64 y 3)","(+.f64 (pow.f64 y 3) (*.f64 -1/2 (pow.f64 y 5)))","(+.f64 (pow.f64 y 3) (+.f64 (*.f64 -1/2 (pow.f64 y 5)) (*.f64 13/120 (pow.f64 y 7))))","(+.f64 (pow.f64 y 3) (+.f64 (*.f64 -1/2 (pow.f64 y 5)) (+.f64 (*.f64 -41/3024 (pow.f64 y 9)) (*.f64 13/120 (pow.f64 y 7)))))","1","(+.f64 (*.f64 -1 (pow.f64 y 2)) 1)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (*.f64 1/3 (pow.f64 y 4))))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -2/45 (pow.f64 y 6)) (*.f64 1/3 (pow.f64 y 4)))))","(*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (-.f64 (*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))) 1)))","(*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (-.f64 (*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))) 1)))","(*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (-.f64 (*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))) 1)))","(*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (-.f64 (*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))) 1)))","(*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (-.f64 (*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))) 1)))","(*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (-.f64 (*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))) 1)))","(*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (-.f64 (*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))) 1)))","(*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (-.f64 (*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))) 1)))","1","(+.f64 1 (*.f64 -1 (pow.f64 y 3)))","(+.f64 (*.f64 1/2 (pow.f64 y 5)) (+.f64 1 (*.f64 -1 (pow.f64 y 3))))","(+.f64 (*.f64 1/2 (pow.f64 y 5)) (+.f64 1 (+.f64 (*.f64 -1 (pow.f64 y 3)) (*.f64 -13/120 (pow.f64 y 7)))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 y 3)","(+.f64 (pow.f64 y 3) (*.f64 -1/2 (pow.f64 y 5)))","(fma.f64 -1/2 (pow.f64 y 5) (pow.f64 y 3))","(+.f64 (pow.f64 y 3) (+.f64 (*.f64 -1/2 (pow.f64 y 5)) (*.f64 13/120 (pow.f64 y 7))))","(+.f64 (pow.f64 y 3) (fma.f64 -1/2 (pow.f64 y 5) (*.f64 13/120 (pow.f64 y 7))))","(+.f64 (pow.f64 y 3) (+.f64 (*.f64 -1/2 (pow.f64 y 5)) (+.f64 (*.f64 -41/3024 (pow.f64 y 9)) (*.f64 13/120 (pow.f64 y 7)))))","(+.f64 (pow.f64 y 3) (fma.f64 (pow.f64 y 5) -1/2 (fma.f64 -41/3024 (pow.f64 y 9) (*.f64 13/120 (pow.f64 y 7)))))","1","(+.f64 (*.f64 -1 (pow.f64 y 2)) 1)","(-.f64 1 (*.f64 y y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (*.f64 1/3 (pow.f64 y 4))))","(-.f64 (fma.f64 1/3 (pow.f64 y 4) 1) (*.f64 y y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -2/45 (pow.f64 y 6)) (*.f64 1/3 (pow.f64 y 4)))))","(+.f64 (-.f64 1 (*.f64 y y)) (fma.f64 -2/45 (pow.f64 y 6) (*.f64 1/3 (pow.f64 y 4))))","(*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (-.f64 (*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))) 1)))","(/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (+.f64 1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))))","(*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (-.f64 (*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))) 1)))","(/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (+.f64 1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))))","(*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (-.f64 (*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))) 1)))","(/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (+.f64 1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))))","(*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (-.f64 (*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))) 1)))","(/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (+.f64 1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))))","(*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (-.f64 (*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))) 1)))","(/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (+.f64 1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))))","(*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (-.f64 (*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))) 1)))","(/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (+.f64 1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))))","(*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (-.f64 (*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))) 1)))","(/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (+.f64 1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))))","(*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (-.f64 (*.f64 -1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))) 1)))","(/.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (+.f64 1 (sin.f64 y))) (+.f64 1 (*.f64 (+.f64 1 (sin.f64 y)) (sin.f64 y))))","1","(+.f64 1 (*.f64 -1 (pow.f64 y 3)))","(-.f64 1 (pow.f64 y 3))","(+.f64 (*.f64 1/2 (pow.f64 y 5)) (+.f64 1 (*.f64 -1 (pow.f64 y 3))))","(-.f64 (fma.f64 (pow.f64 y 5) 1/2 1) (pow.f64 y 3))","(+.f64 (*.f64 1/2 (pow.f64 y 5)) (+.f64 1 (+.f64 (*.f64 -1 (pow.f64 y 3)) (*.f64 -13/120 (pow.f64 y 7)))))","(+.f64 (fma.f64 (pow.f64 y 5) 1/2 1) (fma.f64 -13/120 (pow.f64 y 7) (neg.f64 (pow.f64 y 3))))"]],"time":71.446044921875,"type":"simplify"},{"compiler":[[12789,6774]],"time":122.02490234375,"type":"eval"},{"alts":[["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (+.f64 x (sin.f64 y)))","done",0.10384750976844201],["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 -1 (sin.f64 y))) 3) (-.f64 -1 (sin.f64 y)))) (+.f64 x (sin.f64 y)))","fresh",0.2238834327830833],["(+.f64 (+.f64 x (sin.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (cos.f64 y))) 3))","fresh",0.3910714356003984],["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (/.f64 1 (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y))))) (-.f64 -1 (sin.f64 y)))) (+.f64 x (sin.f64 y)))","done",0.1983698322957463],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","done",0.05078125]],"compiler":[[18,12],[26,18],[15,11],[37,25],[12,8]],"count":[[332,5]],"kept":[{"done":[2,2],"fresh":[2,2],"new":[327,0],"picked":[1,1]}],"min-error":[0],"time":174.877197265625,"type":"prune"},{"accuracy":[0.05078125],"baseline":[0.05078125],"branch":[["x",0.05078125,1],["y",0.05078125,1],["z",0.05078125,1],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))",0.05078125,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[179,81]],"count":[[9,1]],"inputs":[["(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 -1 (sin.f64 y))) 3) (-.f64 -1 (sin.f64 y)))) (+.f64 x (sin.f64 y)))","(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 (sin.f64 y) 3)) (/.f64 1 (+.f64 -1 (*.f64 (-.f64 -1 (sin.f64 y)) (sin.f64 y))))) (-.f64 -1 (sin.f64 y)))) (+.f64 x (sin.f64 y)))","(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) (+.f64 2/3 1))) (cbrt.f64 (cbrt.f64 (cos.f64 y)))) (+.f64 x (sin.f64 y)))","(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (*.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))) (+.f64 x (sin.f64 y)))","(fma.f64 (*.f64 (cos.f64 y) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) (+.f64 x (sin.f64 y)))","(+.f64 (+.f64 x (sin.f64 y)) (+.f64 (*.f64 z (+.f64 (*.f64 -1/2 (*.f64 y y)) (*.f64 -1/720 (pow.f64 y 6)))) (fma.f64 1/24 (*.f64 (pow.f64 y 4) z) z)))","(fma.f64 (*.f64 z (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (+.f64 x (sin.f64 y)))","(+.f64 (+.f64 x (sin.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (cos.f64 y))) 3))","(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))"]],"link":["."],"name":["Graphics.Rasterific.Svg.PathConverter:segmentToBezier from rasterific-svg-0.2.3.1, C"],"oracle":[39.31049737514437],"outputs":[["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))"]],"time":22.705810546875,"times":[["x",4.25],["y",4.072998046875],["z",4.295166015625],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))",4.376220703125]],"type":"regimes"},{"compiler":[[12,8]],"inputs":[["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","(fma.f64 (cos.f64 y) z (+.f64 x (sin.f64 y)))"]],"stop":[["fuel",1]],"time":18.607177734375,"type":"simplify"},{"time":0.0029296875,"type":"soundness"},{"compiler":[[12,8]],"remove-preprocessing":[[]],"time":8.8330078125,"type":"end"}]
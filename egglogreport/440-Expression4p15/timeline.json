[{"compiler":[[24,15]],"method":["search"],"sampling":[[1,6.0380935668945326e-5,0.0,0.999939619064331],[0,0.0,6.0380935668945326e-5,0.999939619064331]],"time":0.172119140625,"type":"analyze"},{"outcomes":[["body",256,"valid",321.263916015625,8256]],"time":329.030029296875,"type":"sample"},{"compiler":[[9,4]],"inputs":[["0","1"],["(*.f64 (+.f64 a b) (+.f64 a b))","(*.f64 (+.f64 b a) (+.f64 b a))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (+.f64 a b) (+.f64 a b))","(pow.f64 (+.f64 a b) 2)","(*.f64 (+.f64 b a) (+.f64 b a))","(pow.f64 (+.f64 a b) 2)"]],"symmetry":[[]],"time":59.1728515625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (+.f64 a b) (+.f64 a b))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 a b) (+.f64 a b))","(pow.f64 (+.f64 a b) 2)"]],"time":36.260986328125,"type":"simplify"},{"compiler":[[14,6]],"time":0.293212890625,"type":"eval"},{"alts":[["(*.f64 (+.f64 a b) (+.f64 a b))","next",0.0078125]],"compiler":[[9,4],[9,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.782958984375,"type":"prune"},{"compiler":[[14,4]],"locations":[["(*.f64 (+.f64 a b) (+.f64 a b))",0.0078125,true]],"time":2.682861328125,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (+.f64 a b) (+.f64 a b))","b","-inf",0.282958984375],["(*.f64 (+.f64 a b) (+.f64 a b))","b","inf",0.251953125],["(*.f64 (+.f64 a b) (+.f64 a b))","b","0",0.251953125],["(*.f64 (+.f64 a b) (+.f64 a b))","a","-inf",0.31884765625],["(*.f64 (+.f64 a b) (+.f64 a b))","a","inf",0.322998046875],["(*.f64 (+.f64 a b) (+.f64 a b))","a","0",0.43212890625]],"time":1.946044921875,"type":"series"},{"count":[[1,60]],"inputs":[["(*.f64 (+.f64 a b) (+.f64 a b))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (+.f64 a b) b) (*.f64 a b)) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (+.f64 a b) a) (*.f64 a b)) (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a a) (+.f64 (*.f64 (+.f64 a b) b) (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 a b) a) (*.f64 (+.f64 a b) b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 a b) b) (*.f64 (+.f64 a b) a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 b b) (+.f64 (*.f64 (+.f64 a b) a) (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a b) (fma.f64 a a (*.f64 (+.f64 a b) b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (+.f64 a b) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 a a (*.f64 (+.f64 a b) b)) (*.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (+.f64 a b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (+.f64 a b) a) (neg.f64 (*.f64 (+.f64 a b) b)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (+.f64 a b) b) (neg.f64 (*.f64 (+.f64 a b) a)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (+.f64 a b) a) (*.f64 a b)) (neg.f64 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 a a (*.f64 (+.f64 a b) b)) (neg.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (+.f64 a b) b) (*.f64 a b)) (neg.f64 (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (+.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 a b)) (pow.f64 (cbrt.f64 (+.f64 a b)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 a b)) (neg.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 a b)) 5) (cbrt.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 a b) 2/3) (+.f64 (*.f64 b (cbrt.f64 (+.f64 a b))) (*.f64 a (cbrt.f64 (+.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 a b) 2/3) (pow.f64 (+.f64 a b) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 a b) 4/3) (pow.f64 (+.f64 a b) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (+.f64 a b) 2/3)) (neg.f64 (pow.f64 (+.f64 a b) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 a b) a) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 a b) b) 2)) (*.f64 (cbrt.f64 (*.f64 (+.f64 a b) a)) (cbrt.f64 (*.f64 (+.f64 a b) b))))) (+.f64 (cbrt.f64 (*.f64 (+.f64 a b) a)) (cbrt.f64 (*.f64 (+.f64 a b) b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 a b) b) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 a b) a) 2)) (*.f64 (cbrt.f64 (*.f64 (+.f64 a b) b)) (cbrt.f64 (*.f64 (+.f64 a b) a))))) (+.f64 (cbrt.f64 (*.f64 (+.f64 a b) b)) (cbrt.f64 (*.f64 (+.f64 a b) a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 a b) (+.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (+.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (+.f64 a b) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (+.f64 a b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (+.f64 a b) 2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (+.f64 a b) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 a b) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 a b)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 a b)) (+.f64 5 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 a b) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 a b) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 a b) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (+.f64 a b)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (+.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 a b) 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a (+.f64 a b) (*.f64 (+.f64 a b) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 a b) a (*.f64 (+.f64 a b) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 b) (*.f64 (pow.f64 b 2/3) (+.f64 a b)) (*.f64 (+.f64 a b) a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 b (+.f64 a b) (*.f64 (+.f64 a b) a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 b (cbrt.f64 (+.f64 a b))) (pow.f64 (+.f64 a b) 2/3) (*.f64 (+.f64 a b) a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 a b)) (*.f64 (pow.f64 (+.f64 a b) 2/3) b) (*.f64 (+.f64 a b) a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 a b) (cbrt.f64 b)) (pow.f64 b 2/3) (*.f64 (+.f64 a b) a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 a b) b (*.f64 (+.f64 a b) a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 a b) b)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 a b) b) 2)) (*.f64 (+.f64 a b) a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (cbrt.f64 (+.f64 a b))) (pow.f64 (+.f64 a b) 2/3) (*.f64 (+.f64 a b) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 a) (*.f64 (pow.f64 a 2/3) (+.f64 a b)) (*.f64 (+.f64 a b) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 a b) a)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 a b) a) 2)) (*.f64 (+.f64 a b) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 a b) (cbrt.f64 a)) (pow.f64 a 2/3) (*.f64 (+.f64 a b) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 a b)) (*.f64 (pow.f64 (+.f64 a b) 2/3) a) (*.f64 (+.f64 a b) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 a b) b) (*.f64 (+.f64 a b) a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 a b) a) 1 (*.f64 (+.f64 a b) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 a b) a) (*.f64 (+.f64 a b) b))))))"]],"rules":[["egg-rr",60]],"time":38.636962890625,"type":"rewrite"},{"count":[[84,70]],"inputs":[["(pow.f64 b 2)","(+.f64 (*.f64 2 (*.f64 a b)) (pow.f64 b 2))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(pow.f64 a 2)","(+.f64 (*.f64 2 (*.f64 a b)) (pow.f64 a 2))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(pow.f64 a 2)","(+.f64 (*.f64 2 (*.f64 a b)) (pow.f64 a 2))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(pow.f64 a 2)","(+.f64 (*.f64 2 (*.f64 a b)) (pow.f64 a 2))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(pow.f64 b 2)","(+.f64 (*.f64 2 (*.f64 a b)) (pow.f64 b 2))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(pow.f64 b 2)","(+.f64 (*.f64 2 (*.f64 a b)) (pow.f64 b 2))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 b 2)","(*.f64 b b)","(+.f64 (*.f64 2 (*.f64 a b)) (pow.f64 b 2))","(*.f64 b (+.f64 (+.f64 a a) b))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 (*.f64 b (+.f64 (+.f64 a a) b)) (*.f64 a a))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 (*.f64 b (+.f64 (+.f64 a a) b)) (*.f64 a a))","(pow.f64 a 2)","(*.f64 a a)","(+.f64 (*.f64 2 (*.f64 a b)) (pow.f64 a 2))","(*.f64 a (+.f64 a (+.f64 b b)))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 (*.f64 b (+.f64 (+.f64 a a) b)) (*.f64 a a))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 (*.f64 b (+.f64 (+.f64 a a) b)) (*.f64 a a))","(pow.f64 a 2)","(*.f64 a a)","(+.f64 (*.f64 2 (*.f64 a b)) (pow.f64 a 2))","(*.f64 a (+.f64 a (+.f64 b b)))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 (*.f64 b (+.f64 (+.f64 a a) b)) (*.f64 a a))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 (*.f64 b (+.f64 (+.f64 a a) b)) (*.f64 a a))","(pow.f64 a 2)","(*.f64 a a)","(+.f64 (*.f64 2 (*.f64 a b)) (pow.f64 a 2))","(*.f64 a (+.f64 a (+.f64 b b)))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 (*.f64 b (+.f64 (+.f64 a a) b)) (*.f64 a a))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 (*.f64 b (+.f64 (+.f64 a a) b)) (*.f64 a a))","(pow.f64 b 2)","(*.f64 b b)","(+.f64 (*.f64 2 (*.f64 a b)) (pow.f64 b 2))","(*.f64 b (+.f64 (+.f64 a a) b))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 (*.f64 b (+.f64 (+.f64 a a) b)) (*.f64 a a))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 (*.f64 b (+.f64 (+.f64 a a) b)) (*.f64 a a))","(pow.f64 b 2)","(*.f64 b b)","(+.f64 (*.f64 2 (*.f64 a b)) (pow.f64 b 2))","(*.f64 b (+.f64 (+.f64 a a) b))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 (*.f64 b (+.f64 (+.f64 a a) b)) (*.f64 a a))","(+.f64 (*.f64 2 (*.f64 a b)) (+.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 (*.f64 b (+.f64 (+.f64 a a) b)) (*.f64 a a))"]],"time":83.282958984375,"type":"simplify"},{"compiler":[[801,244]],"time":8.72509765625,"type":"eval"},{"alts":[["(fma.f64 (+.f64 a b) a (*.f64 (+.f64 a b) b))","next",0]],"compiler":[[12,5],[12,5]],"count":[[71,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[70,1],"picked":[1,0]}],"min-error":[0],"time":12.905029296875,"type":"prune"},{"compiler":[[22,5]],"locations":[["(*.f64 (+.f64 a b) b)",0.0078125,true]],"time":4.06396484375,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (+.f64 a b) b)","b","-inf",0.296875],["(*.f64 (+.f64 a b) b)","b","inf",0.297119140625],["(*.f64 (+.f64 a b) b)","b","0",0.221923828125],["(*.f64 (+.f64 a b) b)","a","-inf",0.260009765625],["(*.f64 (+.f64 a b) b)","a","inf",0.280029296875],["(*.f64 (+.f64 a b) b)","a","0",0.349853515625]],"time":1.798095703125,"type":"series"},{"count":[[1,54]],"inputs":[["(*.f64 (+.f64 a b) b)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a b) (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 b b) (*.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 0 (*.f64 b b)) (*.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 0 (*.f64 a b)) (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 b b) (+.f64 (*.f64 a b) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a b) (+.f64 (*.f64 b b) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 b b) 0) (*.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 a b) b) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (+.f64 a b) b))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 b b) (neg.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 a b) (neg.f64 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (+.f64 a b) b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 a b) b)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 b (+.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 b) (*.f64 (pow.f64 b 2/3) (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 b (cbrt.f64 (+.f64 a b))) (pow.f64 (+.f64 a b) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 b 2/3) (+.f64 a b)) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 a b) 2/3) (*.f64 b (cbrt.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 b) (neg.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (+.f64 a b) b))) (neg.f64 (pow.f64 (*.f64 (+.f64 a b) b) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2)) (-.f64 (pow.f64 b 4/3) (*.f64 (cbrt.f64 (*.f64 a b)) (pow.f64 b 2/3)))) (+.f64 (pow.f64 b 2/3) (cbrt.f64 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 b 4/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2)) (*.f64 (pow.f64 b 2/3) (cbrt.f64 (*.f64 a b))))) (+.f64 (pow.f64 b 2/3) (cbrt.f64 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 a b)) (*.f64 (pow.f64 (+.f64 a b) 2/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 a b) 2/3) b) (cbrt.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 a b) b)) (pow.f64 (*.f64 (+.f64 a b) b) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 a b) b) 2/3) (cbrt.f64 (*.f64 (+.f64 a b) b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 a b) (cbrt.f64 b)) (pow.f64 b 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 b 2/3) (*.f64 (+.f64 a b) (cbrt.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 b 2/3) (+.f64 (pow.f64 b 4/3) (*.f64 a (cbrt.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 a b) b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 a b) b)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 a b) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 a b) b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 a b) b) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 b 2/3) (-.f64 (pow.f64 b 4/3) (*.f64 (cbrt.f64 (neg.f64 b)) a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 a b) b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 a b) b)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 a b) b) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 a b) b)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 a b) b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 a b) b)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (*.f64 a b)) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 a b) b) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 a b)) (cbrt.f64 (pow.f64 (*.f64 a b) 2)) (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (cbrt.f64 b)) (pow.f64 b 2/3) (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 a) (*.f64 (pow.f64 a 2/3) b) (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a b (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 b a (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 b 4/3) (pow.f64 b 2/3) (*.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 b 2/3) (pow.f64 b 4/3) (*.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 b) (pow.f64 (cbrt.f64 b) 5) (*.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 b b (*.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 a b) (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 b b) (*.f64 a b))))))"]],"rules":[["egg-rr",54]],"time":37.16796875,"type":"rewrite"},{"count":[[78,59]],"inputs":[["(pow.f64 b 2)","(+.f64 (*.f64 a b) (pow.f64 b 2))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 a b)","(+.f64 (*.f64 a b) (pow.f64 b 2))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 a b)","(+.f64 (*.f64 a b) (pow.f64 b 2))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 a b)","(+.f64 (*.f64 a b) (pow.f64 b 2))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(pow.f64 b 2)","(+.f64 (*.f64 a b) (pow.f64 b 2))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(pow.f64 b 2)","(+.f64 (*.f64 a b) (pow.f64 b 2))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(+.f64 (*.f64 a b) (pow.f64 b 2))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 b 2)","(*.f64 b b)","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 b (+.f64 b a))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 b (+.f64 b a))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 b (+.f64 b a))","(*.f64 a b)","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 b (+.f64 b a))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 b (+.f64 b a))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 b (+.f64 b a))","(*.f64 a b)","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 b (+.f64 b a))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 b (+.f64 b a))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 b (+.f64 b a))","(*.f64 a b)","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 b (+.f64 b a))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 b (+.f64 b a))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 b (+.f64 b a))","(pow.f64 b 2)","(*.f64 b b)","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 b (+.f64 b a))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 b (+.f64 b a))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 b (+.f64 b a))","(pow.f64 b 2)","(*.f64 b b)","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 b (+.f64 b a))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 b (+.f64 b a))","(+.f64 (*.f64 a b) (pow.f64 b 2))","(*.f64 b (+.f64 b a))"]],"time":107.43798828125,"type":"simplify"},{"compiler":[[847,254]],"time":8.472900390625,"type":"eval"},{"alts":[["(fma.f64 (+.f64 a b) a (*.f64 (+.f64 a b) b))","done",0]],"compiler":[[12,5]],"count":[[60,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[59,0],"picked":[1,1]}],"min-error":[0],"time":12.254150390625,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["a",0,1],["b",0,1],["(*.f64 (+.f64 a b) (+.f64 a b))",0,1],["(+.f64 a b)",0,1]],"compiler":[[3,2],[3,2],[9,4],[5,3],[19,6]],"count":[[2,1]],"inputs":[["(fma.f64 (+.f64 a b) a (*.f64 (+.f64 a b) b))","(*.f64 (+.f64 a b) (+.f64 a b))"]],"link":["."],"name":["Expression 4, p15"],"oracle":[0.0078125],"outputs":[["(fma.f64 (+.f64 a b) a (*.f64 (+.f64 a b) b))"]],"time":9.587890625,"times":[["a",2.27197265625],["b",2.18701171875],["(*.f64 (+.f64 a b) (+.f64 a b))",2.300048828125],["(+.f64 a b)",2.329833984375]],"type":"regimes"},{"compiler":[[12,5]],"inputs":[["(fma.f64 (+.f64 a b) a (*.f64 (+.f64 a b) b))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (+.f64 a b) a (*.f64 (+.f64 a b) b))","(pow.f64 (+.f64 a b) 2)"]],"stop":[["done",1]],"time":36.781005859375,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[12,5]],"remove-preprocessing":[[]],"time":8.627197265625,"type":"end"}]
[{"compiler":[[7,5]],"method":["search"],"sampling":[[12,0.7486577033996582,0.0009760856628417969,0.2503662109375],[11,0.7476816177368164,0.0019521713256835938,0.2503662109375],[10,0.7457294464111328,0.0039043426513671875,0.2503662109375],[9,0.7418251037597656,0.007808685302734375,0.2503662109375],[8,0.7340164184570313,0.01561737060546875,0.2503662109375],[7,0.7183990478515625,0.0312347412109375,0.2503662109375],[6,0.687164306640625,0.062469482421875,0.2503662109375],[5,0.62469482421875,0.12493896484375,0.2503662109375],[4,0.499755859375,0.2498779296875,0.2503662109375],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.2470703125,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.1708984375,6],["body",256,"valid",215.277099609375,8256]],"time":223.011962890625,"type":"sample"},{"compiler":[[6,4]],"inputs":[["0"],["(*.f64 (*.f64 x 3) x)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 (*.f64 x 3) x)","(*.f64 (*.f64 x x) 3)"]],"symmetry":[[]],"time":63.4189453125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (*.f64 x 3) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 x 3) x)","(*.f64 (*.f64 x x) 3)"]],"time":30.27197265625,"type":"simplify"},{"compiler":[[11,7]],"time":0.317138671875,"type":"eval"},{"alts":[["(*.f64 (*.f64 x x) 3)","fresh",0.234375],["(*.f64 (*.f64 x 3) x)","next",0.21875]],"compiler":[[6,4],[6,4],[6,4],[6,4]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.07421875],"time":2.117919921875,"type":"prune"},{"compiler":[[11,7]],"locations":[["(*.f64 (*.f64 x 3) x)",0.21875,true]],"time":2.734130859375,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 (*.f64 x 3) x)","x","-inf",0.2021484375],["(*.f64 (*.f64 x 3) x)","x","inf",0.336181640625],["(*.f64 (*.f64 x 3) x)","x","0",0.491943359375]],"time":1.078857421875,"type":"series"},{"count":[[1,35]],"inputs":[["(*.f64 (*.f64 x 3) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 3) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) 3)) (cbrt.f64 (*.f64 9 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) (cbrt.f64 (*.f64 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 3)) (*.f64 (pow.f64 (*.f64 x 3) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 x 3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x 3) 2/3) x) (cbrt.f64 (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 3)) (*.f64 x (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (sqrt.f64 3))) (neg.f64 (*.f64 x (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (*.f64 x 3))) (pow.f64 (*.f64 x 3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x 3) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x 3) 2/3) (*.f64 x (cbrt.f64 (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 x 3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3 (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 x x) 3) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -3 (*.f64 x x))) (neg.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -3 (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 6) 27) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) 3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (*.f64 x (sqrt.f64 3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 6) 27))))))"]],"rules":[["egg-rr",35]],"time":31.443115234375,"type":"rewrite"},{"count":[[47,36]],"inputs":[["(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))"]],"time":60.989013671875,"type":"simplify"},{"compiler":[[298,199]],"time":4.6689453125,"type":"eval"},{"alts":[["(pow.f64 (*.f64 x (sqrt.f64 3)) 2)","fresh",0.5226327637479347],["(*.f64 3 (pow.f64 x 2))","next",0.234375],["(*.f64 (*.f64 x 3) x)","done",0.21875],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) 3)) 3)","fresh",0.566635351663913],["(/.f64 (*.f64 x x) 1/3)","fresh",0.26953125]],"compiler":[[7,6],[6,5],[6,4],[9,7],[6,4],[7,6],[6,5],[9,7],[6,4]],"count":[[38,5]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[36,4],"picked":[1,1]}],"min-error":[0.01953125],"time":6.64892578125,"type":"prune"},{"compiler":[[12,9]],"locations":[["(*.f64 3 (pow.f64 x 2))",0.234375,true]],"time":3.31005859375,"type":"localize"},{"count":[[1,0]],"series":[["(*.f64 3 (pow.f64 x 2))","x","-inf",0.159912109375],["(*.f64 3 (pow.f64 x 2))","x","inf",0.180908203125],["(*.f64 3 (pow.f64 x 2))","x","0",0.18603515625]],"time":0.56103515625,"type":"series"},{"count":[[1,37]],"inputs":[["(*.f64 3 (pow.f64 x 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 x x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) (*.f64 (pow.f64 x 4/3) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 4/3) (cbrt.f64 9)) (cbrt.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (pow.f64 x 2/3)) (pow.f64 x 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (pow.f64 x 4/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 4/3) (*.f64 3 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 4/3) 3) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 3) x) (*.f64 (sqrt.f64 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (sqrt.f64 3)) (*.f64 (neg.f64 x) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 9) (*.f64 (*.f64 x x) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (sqrt.f64 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 3) (*.f64 (*.f64 x x) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 9) (*.f64 x x)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3 (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 3 (*.f64 x x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -3 (*.f64 x x))) (neg.f64 (*.f64 (pow.f64 x 4/3) (cbrt.f64 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -3 (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 6) 27) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 3) x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (neg.f64 x) (sqrt.f64 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 6) 27))))))"]],"rules":[["egg-rr",37]],"time":31.617919921875,"type":"rewrite"},{"count":[[37,37]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"time":26.070068359375,"type":"simplify"},{"compiler":[[295,196]],"time":4.7119140625,"type":"eval"},{"alts":[["(pow.f64 (*.f64 (sqrt.f64 3) x) 2)","fresh",0.5226327637479347],["(*.f64 (*.f64 x 3) x)","done",0.21875],["(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x x) (cbrt.f64 3)))","next",0.3652725586106521],["(*.f64 3 (pow.f64 x 2))","done",0.234375],["(cbrt.f64 (*.f64 (pow.f64 x 6) 27))","fresh",26.341392797850116]],"compiler":[[7,6],[6,4],[10,8],[6,5],[7,6],[7,6],[10,8],[7,6]],"count":[[42,5]],"kept":[{"done":[1,1],"fresh":[3,0],"new":[37,3],"picked":[1,1]}],"min-error":[0],"time":6.906005859375,"type":"prune"},{"compiler":[[26,17]],"locations":[["(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x x) (cbrt.f64 3)))",0.2109375,true],["(*.f64 (*.f64 x x) (cbrt.f64 3))",0.24447250976844204,true]],"time":6.649169921875,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x x) (cbrt.f64 3)))","x","-inf",0.1669921875],["(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x x) (cbrt.f64 3)))","x","inf",0.43505859375],["(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x x) (cbrt.f64 3)))","x","0",1.404052734375],["(*.f64 (*.f64 x x) (cbrt.f64 3))","x","-inf",0.18798828125],["(*.f64 (*.f64 x x) (cbrt.f64 3))","x","inf",0.35107421875],["(*.f64 (*.f64 x x) (cbrt.f64 3))","x","0",1.35693359375]],"time":3.98486328125,"type":"series"},{"count":[[2,78]],"inputs":[["(*.f64 (*.f64 x x) (cbrt.f64 3))","(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x x) (cbrt.f64 3)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) 0) (*.f64 (*.f64 x x) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 x x) (cbrt.f64 3))) (*.f64 (*.f64 x x) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) (*.f64 0 (*.f64 (*.f64 x x) (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 x (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 x (cbrt.f64 3))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 3)) x) (*.f64 (cbrt.f64 (sqrt.f64 3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 3)) (neg.f64 x)) (*.f64 (cbrt.f64 (sqrt.f64 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (sqrt.f64 3))) (*.f64 x (cbrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (cbrt.f64 (sqrt.f64 3))) (*.f64 (neg.f64 x) (cbrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))) (cbrt.f64 (*.f64 (pow.f64 x 4) (cbrt.f64 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 x (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) (cbrt.f64 9))) (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (pow.f64 x 4/3) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) (pow.f64 x 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 3)) (cbrt.f64 (*.f64 (cbrt.f64 9) (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 x 6) (cbrt.f64 3))) (cbrt.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 9)) (cbrt.f64 (*.f64 (pow.f64 x 6) (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 4/3) (cbrt.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 9) (pow.f64 x 6))) (cbrt.f64 (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 4/3) (cbrt.f64 3)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x x) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (pow.f64 x 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 3 (pow.f64 x 6)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3 (*.f64 x x)) 0) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 x x)) (*.f64 (*.f64 3 (*.f64 x x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 3 (*.f64 x x))) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 x x)) (*.f64 0 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) (cbrt.f64 (*.f64 (pow.f64 x 4) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 9)) (cbrt.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 9) (*.f64 (*.f64 x x) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 9)) (cbrt.f64 (*.f64 (cbrt.f64 81) (*.f64 3 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 9 (*.f64 (*.f64 x x) (cbrt.f64 3)))) (cbrt.f64 (*.f64 (pow.f64 x 4) (cbrt.f64 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 9) x) (*.f64 x (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (*.f64 x (cbrt.f64 3)) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))) (cbrt.f64 (*.f64 (*.f64 (pow.f64 x 4) (cbrt.f64 9)) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 9 (pow.f64 x 6)) (cbrt.f64 3))) (cbrt.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 3 (pow.f64 x 6)) (cbrt.f64 9))) (cbrt.f64 (cbrt.f64 81)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 81)) (cbrt.f64 (*.f64 (*.f64 3 (pow.f64 x 6)) (cbrt.f64 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 81) (*.f64 3 (pow.f64 x 6)))) (cbrt.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) (cbrt.f64 9))) (cbrt.f64 (*.f64 9 (*.f64 (*.f64 x x) (cbrt.f64 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (cbrt.f64 3)) (cbrt.f64 9)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 9)) (cbrt.f64 (*.f64 (*.f64 9 (pow.f64 x 6)) (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (pow.f64 x 4) (cbrt.f64 9)) 9)) (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 3)) (*.f64 (cbrt.f64 9) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 3)) (*.f64 x (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (sqrt.f64 3)) (*.f64 (neg.f64 x) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (neg.f64 (sqrt.f64 3))) (*.f64 x (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (neg.f64 (sqrt.f64 3))) (*.f64 (neg.f64 x) (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 3) x) (*.f64 (sqrt.f64 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 3)) x) (*.f64 (neg.f64 (sqrt.f64 3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 3) (neg.f64 x)) (*.f64 (sqrt.f64 3) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 3)) (neg.f64 x)) (*.f64 (neg.f64 (sqrt.f64 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 3 (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 9) x) x) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (*.f64 (cbrt.f64 9) x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 6) 27) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 6) 27))))))"]],"rules":[["egg-rr",44],["egg-rr",34]],"time":27.43896484375,"type":"rewrite"},{"count":[[102,80]],"inputs":[["(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (*.f64 x x))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (*.f64 x x))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (*.f64 x x))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (*.f64 x x))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (*.f64 x x))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (*.f64 x x))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (*.f64 x x))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (*.f64 x x))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (*.f64 x x))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (*.f64 x x))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (*.f64 x x))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))"]],"time":78.362060546875,"type":"simplify"},{"compiler":[[935,704]],"time":14.177001953125,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))) (cbrt.f64 (*.f64 (*.f64 (pow.f64 x 4) (cbrt.f64 9)) 9)))","fresh",19.081234995382637],["(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x (cbrt.f64 3)) x))","next",0.3366012695368841],["(*.f64 (cbrt.f64 9) (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 3)) x) (*.f64 (cbrt.f64 (sqrt.f64 3)) x)))","fresh",0.3997650390737681],["(*.f64 (*.f64 x 3) x)","done",0.21875],["(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x x) (cbrt.f64 3)))","done",0.3652725586106521],["(*.f64 3 (pow.f64 x 2))","done",0.234375]],"compiler":[[18,15],[10,8],[15,13],[6,4],[10,8],[6,5],[18,15],[10,8],[15,13]],"count":[[85,6]],"kept":[{"done":[2,2],"fresh":[2,0],"new":[80,3],"picked":[1,1]}],"min-error":[0],"time":16.073974609375,"type":"prune"},{"compiler":[[27,21]],"locations":[["(*.f64 (*.f64 x (cbrt.f64 3)) x)",0.19921875,true],["(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x (cbrt.f64 3)) x))",0.2109375,true],["(*.f64 x (cbrt.f64 3))",0.375,true]],"time":7.60693359375,"type":"localize"},{"count":[[3,36]],"series":[["(*.f64 (*.f64 x (cbrt.f64 3)) x)","x","-inf",0.14111328125],["(*.f64 (*.f64 x (cbrt.f64 3)) x)","x","inf",0.169921875],["(*.f64 (*.f64 x (cbrt.f64 3)) x)","x","0",0.14306640625],["(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x (cbrt.f64 3)) x))","x","-inf",0.162109375],["(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x (cbrt.f64 3)) x))","x","inf",0.19091796875],["(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x (cbrt.f64 3)) x))","x","0",0.241943359375],["(*.f64 x (cbrt.f64 3))","x","-inf",0.2919921875],["(*.f64 x (cbrt.f64 3))","x","inf",0.27001953125],["(*.f64 x (cbrt.f64 3))","x","0",0.4599609375]],"time":2.17919921875,"type":"series"},{"count":[[3,88]],"inputs":[["(*.f64 x (cbrt.f64 3))","(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x (cbrt.f64 3)) x))","(*.f64 (*.f64 x (cbrt.f64 3)) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cbrt.f64 3)) (*.f64 (*.f64 x (cbrt.f64 3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (cbrt.f64 3)) 0) (*.f64 x (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cbrt.f64 3)) (*.f64 0 (*.f64 x (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (cbrt.f64 3))) (*.f64 x (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 3))) (pow.f64 (*.f64 x (cbrt.f64 3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (cbrt.f64 3)) 2/3) (cbrt.f64 (*.f64 x (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) 3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 3)) (*.f64 (cbrt.f64 (cbrt.f64 9)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (cbrt.f64 3))) (cbrt.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 9)) x) (cbrt.f64 (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 9)) (*.f64 x (cbrt.f64 (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (cbrt.f64 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (cbrt.f64 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3 x) x) (*.f64 (*.f64 (*.f64 3 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 3 x) x) 0) (*.f64 (*.f64 3 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3 x) x) (*.f64 0 (*.f64 (*.f64 3 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 3 x) x)) (*.f64 (*.f64 3 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 9) x) (*.f64 x (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 3)) (*.f64 (cbrt.f64 9) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))) (*.f64 (pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) 2/3) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) 2/3) (cbrt.f64 9)) (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 3 x) x)) (pow.f64 (*.f64 (*.f64 3 x) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 3 x) x) 2/3) (cbrt.f64 (*.f64 (*.f64 3 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 9) (*.f64 (*.f64 x x) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 x) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 9 (*.f64 (*.f64 x x) (cbrt.f64 3)))) (pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 9)) (*.f64 (cbrt.f64 (cbrt.f64 81)) (*.f64 (*.f64 x x) (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) (cbrt.f64 (cbrt.f64 9))) (cbrt.f64 (cbrt.f64 81)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 81)) (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) (cbrt.f64 (cbrt.f64 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 3 x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) 2/3) (cbrt.f64 (*.f64 9 (*.f64 (*.f64 x x) (cbrt.f64 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 81)) (*.f64 (*.f64 x x) (cbrt.f64 3))) (cbrt.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 3 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 3 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 3 x) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 3 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 3 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 3 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 3 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 3 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 3 x) x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) 0) (*.f64 (*.f64 x x) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) (*.f64 0 (*.f64 (*.f64 x x) (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 x x) (cbrt.f64 3))) (*.f64 (*.f64 x x) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 x (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (*.f64 x (cbrt.f64 3)))) (pow.f64 (*.f64 x (cbrt.f64 3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 3))) (*.f64 (pow.f64 (*.f64 x (cbrt.f64 3)) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 x (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 x (cbrt.f64 3))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (cbrt.f64 3)) 2/3) (*.f64 x (cbrt.f64 (*.f64 x (cbrt.f64 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x (cbrt.f64 3)) 2/3) x) (cbrt.f64 (*.f64 x (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 3)) x) (*.f64 (cbrt.f64 (sqrt.f64 3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (sqrt.f64 3))) (*.f64 x (cbrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))) (pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) 2/3) (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (cbrt.f64 3)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 x (cbrt.f64 3)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x x) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (pow.f64 (*.f64 x x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 3 (pow.f64 (*.f64 x x) 3)))))))"]],"rules":[["egg-rr",30],["egg-rr",32],["egg-rr",26]],"time":29.35693359375,"type":"rewrite"},{"count":[[124,91]],"inputs":[["(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 3) x)","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 9) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 3 (*.f64 x x))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (*.f64 x x) (cbrt.f64 3))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (*.f64 x x) (cbrt.f64 3))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (*.f64 x x) (cbrt.f64 3))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (*.f64 x x) (cbrt.f64 3))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (*.f64 x x) (cbrt.f64 3))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (*.f64 x x) (cbrt.f64 3))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (*.f64 x x) (cbrt.f64 3))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (*.f64 x x) (cbrt.f64 3))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (*.f64 x x) (cbrt.f64 3))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (*.f64 x x) (cbrt.f64 3))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (*.f64 x x) (cbrt.f64 3))","(*.f64 (cbrt.f64 3) (pow.f64 x 2))","(*.f64 (*.f64 x x) (cbrt.f64 3))"]],"time":108.47705078125,"type":"simplify"},{"compiler":[[1128,847]],"time":18.39794921875,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))) (cbrt.f64 (*.f64 (*.f64 (pow.f64 x 4) (cbrt.f64 9)) 9)))","fresh",19.081234995382637],["(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x (cbrt.f64 3)) x))","done",0.3366012695368841],["(*.f64 (*.f64 x 3) x)","done",0.21875],["(*.f64 (*.f64 (cbrt.f64 (cbrt.f64 81)) (*.f64 (*.f64 x x) (cbrt.f64 3))) (cbrt.f64 (cbrt.f64 9)))","fresh",0.3301163086106521],["(*.f64 (cbrt.f64 9) (*.f64 (*.f64 (cbrt.f64 (cbrt.f64 9)) (*.f64 x (cbrt.f64 (cbrt.f64 3)))) x))","fresh",0.293632519536884],["(*.f64 3 (pow.f64 x 2))","done",0.234375]],"compiler":[[18,15],[10,8],[6,4],[15,13],[15,13],[6,5]],"count":[[97,6]],"kept":[{"done":[3,2],"fresh":[2,1],"new":[91,2],"picked":[1,1]}],"min-error":[0],"time":17.412841796875,"type":"prune"},{"accuracy":[0.21875],"baseline":[0.21875],"branch":[["x",0.21875,1],["(*.f64 (*.f64 x 3) x)",0.21875,1]],"compiler":[[2,1],[6,4],[124,94]],"count":[[14,1]],"inputs":[["(*.f64 (*.f64 (cbrt.f64 (cbrt.f64 81)) (*.f64 (*.f64 x x) (cbrt.f64 3))) (cbrt.f64 (cbrt.f64 9)))","(*.f64 (cbrt.f64 9) (*.f64 (*.f64 (cbrt.f64 (cbrt.f64 9)) (*.f64 x (cbrt.f64 (cbrt.f64 3)))) x))","(*.f64 (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 3))) (cbrt.f64 (*.f64 (*.f64 (pow.f64 x 4) (cbrt.f64 9)) 9)))","(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x (cbrt.f64 3)) x))","(*.f64 (cbrt.f64 9) (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 3)) x) (*.f64 (cbrt.f64 (sqrt.f64 3)) x)))","(pow.f64 (*.f64 (sqrt.f64 3) x) 2)","(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x x) (cbrt.f64 3)))","(cbrt.f64 (*.f64 (pow.f64 x 6) 27))","(pow.f64 (*.f64 x (sqrt.f64 3)) 2)","(*.f64 3 (pow.f64 x 2))","(pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) 3)) 3)","(/.f64 (*.f64 x x) 1/3)","(*.f64 (*.f64 x x) 3)","(*.f64 (*.f64 x 3) x)"]],"link":["."],"name":["Diagrams.Tangent:$catParam from diagrams-lib-1.3.0.3, F"],"oracle":[26.629650561598066],"outputs":[["(*.f64 (*.f64 x 3) x)"]],"time":11.951171875,"times":[["x",5.4111328125],["(*.f64 (*.f64 x 3) x)",3.890869140625]],"type":"regimes"},{"compiler":[[6,4]],"inputs":[["(*.f64 (*.f64 x 3) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 x 3) x)","(*.f64 (*.f64 x x) 3)"]],"stop":[["fuel",1]],"time":30.492919921875,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[6,4]],"remove-preprocessing":[[]],"time":7.209228515625,"type":"end"}]
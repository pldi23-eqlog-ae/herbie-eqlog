[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.24878030992113054,0.7502433659974486,0.0009763240814208984],[11,0.2478047008626163,0.7512189750559628,0.0009763240814208984],[10,0.24585348274558783,0.7531701931729913,0.0009763240814208984],[9,0.24195104651153088,0.7570726294070482,0.0009763240814208984],[8,0.23414617404341698,0.7648775018751621,0.0009763240814208984],[7,0.21853642910718918,0.7804872468113899,0.0009763240814208984],[6,0.18731693923473358,0.8117067366838455,0.0009763240814208984],[5,0.12487795948982239,0.8741457164287567,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":153.5380859375,"type":"analyze"},{"outcomes":[["body",4096,"valid",2.197021484375,2],["body",512,"valid",183.422607421875,1474],["body",1024,"valid",846.813232421875,3637],["body",2048,"valid",614.912109375,1251],["body",256,"valid",114.1669921875,1892]],"time":1771.662841796875,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 eps))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 eps))"]],"symmetry":[[]],"time":60.27001953125,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"time":18.906005859375,"type":"simplify"},{"compiler":[[9,6]],"time":0.252197265625,"type":"eval"},{"alts":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","next",37.09582113922123]],"compiler":[[9,6],[9,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[37.09582113922123],"time":0.719970703125,"type":"prune"},{"compiler":[[20,6]],"locations":[["(tan.f64 x)",0.2044525390737681,true],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",1.6763721071844737,true],["(tan.f64 (+.f64 x eps))",5.416395321971812,true]],"time":6.02392578125,"type":"localize"},{"count":[[3,60]],"series":[["(tan.f64 x)","x","-inf",0.162841796875],["(tan.f64 x)","x","inf",0.14892578125],["(tan.f64 x)","x","0",0.2900390625],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","eps","-inf",0.22607421875],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","eps","inf",0.822021484375],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","eps","0",0.919921875],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","x","-inf",1.22607421875],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","x","inf",0.85791015625],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","x","0",0.6669921875],["(tan.f64 (+.f64 x eps))","eps","-inf",0.473876953125],["(tan.f64 (+.f64 x eps))","eps","inf",0.462890625],["(tan.f64 (+.f64 x eps))","eps","0",0.797119140625],["(tan.f64 (+.f64 x eps))","x","-inf",0.695068359375],["(tan.f64 (+.f64 x eps))","x","inf",0.47998046875],["(tan.f64 (+.f64 x eps))","x","0",1.22802734375]],"time":9.73291015625,"type":"series"},{"count":[[3,149]],"inputs":[["(tan.f64 (+.f64 x eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(tan.f64 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (tan.f64 (+.f64 x eps)) 0) (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 (+.f64 x eps)) (*.f64 (tan.f64 (+.f64 x eps)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (tan.f64 (+.f64 x eps))) (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 (+.f64 x eps)) (*.f64 0 (tan.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) (cbrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2)) (cbrt.f64 (tan.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (+.f64 x eps)) (/.f64 1 (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 (+.f64 x eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (+.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 (+.f64 x eps))) (sin.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (+.f64 x eps))) (/.f64 1 (neg.f64 (cos.f64 (+.f64 x eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) 1) (/.f64 (cbrt.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) 2)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cbrt.f64 (pow.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (cos.f64 (+.f64 x eps)))) (/.f64 (sin.f64 (+.f64 x eps)) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x eps)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (sin.f64 (+.f64 x eps))) 1) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 (+.f64 x eps)) 2)) (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (tan.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (tan.f64 (+.f64 x eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 (+.f64 x eps))) (neg.f64 (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2)) (cbrt.f64 (+.f64 (tan.f64 x) (tan.f64 eps)))) (cbrt.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2)) (cbrt.f64 (sin.f64 (+.f64 x eps)))) (cbrt.f64 (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cbrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2))) (cbrt.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 (+.f64 x eps))) (cbrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2))) (cbrt.f64 (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) 1) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 x eps))) 1) (neg.f64 (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (tan.f64 (+.f64 x eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cbrt.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (cbrt.f64 (pow.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) 1) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (+.f64 x eps)) (cbrt.f64 (cos.f64 (+.f64 x eps)))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x eps)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (+.f64 x eps)) 1) (cos.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 (+.f64 x eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (tan.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 (+.f64 x eps))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 0) (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (*.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (*.f64 0 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 (+.f64 x eps)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))) (/.f64 (*.f64 (cos.f64 (+.f64 x eps)) (sin.f64 x)) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x))) (/.f64 (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (sin.f64 x)) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (tan.f64 (+.f64 x eps)) 0) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (tan.f64 x)) (neg.f64 (tan.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (tan.f64 (+.f64 x eps))) (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))))) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2)) (+.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (*.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))) (-.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) (cbrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 2)) (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (/.f64 1 (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x) (neg.f64 (*.f64 (cos.f64 (+.f64 x eps)) (sin.f64 x)))) (/.f64 1 (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (tan.f64 x) (tan.f64 (+.f64 x eps)))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x) (neg.f64 (*.f64 (cos.f64 (+.f64 x eps)) (sin.f64 x)))) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (fma.f64 (sin.f64 x) (cos.f64 (+.f64 x eps)) (neg.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x))))) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (fma.f64 (sin.f64 x) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x))))) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) 1) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x) (neg.f64 (*.f64 (cos.f64 (+.f64 x eps)) (sin.f64 x)))) 1) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (sin.f64 x)))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 x eps))) (cos.f64 x)) (*.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (sin.f64 x)))) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (sin.f64 x)))) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x))) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 (+.f64 x eps)))) (*.f64 (cos.f64 x) (neg.f64 (sin.f64 (+.f64 x eps))))) (*.f64 (cos.f64 x) (neg.f64 (cos.f64 (+.f64 x eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 (+.f64 x eps))) (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x))) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (*.f64 (cos.f64 x) (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))))) (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (cos.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (sin.f64 x)))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 x eps))) (cos.f64 x)) (*.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (sin.f64 x))) (*.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 x eps))) (neg.f64 (cos.f64 x))) (*.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sin.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (sin.f64 x)))) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (cos.f64 x))) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (sin.f64 x)))) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x) (neg.f64 (*.f64 (cos.f64 (+.f64 x eps)) (sin.f64 x)))) (cos.f64 (+.f64 x eps))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sin.f64 x) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)))) (neg.f64 (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sin.f64 x) (cos.f64 (+.f64 x eps)) (neg.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)))) (neg.f64 (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (tan.f64 x))) (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (tan.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2))) (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) (cbrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (tan.f64 (+.f64 x eps)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 (+.f64 x eps)) (/.f64 1 (cos.f64 (+.f64 x eps))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (tan.f64 (+.f64 x eps)) 1 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2)) (cbrt.f64 (tan.f64 (+.f64 x eps))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (tan.f64 (+.f64 x eps))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (tan.f64 x) (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (tan.f64 x) 0) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 x) (*.f64 (tan.f64 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (tan.f64 x)) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 x) (*.f64 0 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 x)) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 x)) (/.f64 1 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (cos.f64 x))) (/.f64 (sin.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (sin.f64 x)) 1) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (tan.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (sin.f64 x))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 x)) (cbrt.f64 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) 1) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 x) 1) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 x)))))"]],"rules":[["egg-rr",32],["egg-rr",74],["egg-rr",43]],"time":33.406982421875,"type":"rewrite"},{"count":[[209,192]],"inputs":[["(/.f64 (sin.f64 eps) (cos.f64 eps))","(+.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) x) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (*.f64 (pow.f64 x 2) (*.f64 (sin.f64 eps) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))))) (cos.f64 eps)) (+.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) x) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) x) (+.f64 (/.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (*.f64 (sin.f64 eps) (pow.f64 x 2))) (cos.f64 eps)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2))) (+.f64 (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (+.f64 1/6 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))))) (pow.f64 x 3))) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x))))","(/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x))))","(/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x))))","(/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x))))","(/.f64 (sin.f64 x) (cos.f64 x))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x))))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))))))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps))))","(/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps))))","(/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps))))","(/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps))))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) x) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (*.f64 (pow.f64 x 2) (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (sin.f64 eps))) (cos.f64 eps)) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (/.f64 (*.f64 (sin.f64 eps) (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (pow.f64 x 2))) (cos.f64 eps)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (+.f64 1/2 (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (pow.f64 (cos.f64 eps) 2)))))) (pow.f64 x 3))) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)))","(+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))))))","(+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (cos.f64 x))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))) (sin.f64 x)) (cos.f64 x)) (*.f64 1/6 (/.f64 (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (cos.f64 x))))) (pow.f64 eps 4))) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))))))))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","x","(+.f64 (*.f64 1/3 (pow.f64 x 3)) x)","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (sin.f64 eps) (cos.f64 eps))","(tan.f64 eps)","(+.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) x) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(fma.f64 (+.f64 1 (pow.f64 (tan.f64 eps) 2)) x (tan.f64 eps))","(+.f64 (/.f64 (*.f64 (pow.f64 x 2) (*.f64 (sin.f64 eps) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))))) (cos.f64 eps)) (+.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) x) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (*.f64 (/.f64 (*.f64 (+.f64 1 (pow.f64 (tan.f64 eps) 2)) (*.f64 x x)) 1) (tan.f64 eps)) (fma.f64 (+.f64 1 (pow.f64 (tan.f64 eps) 2)) x (tan.f64 eps)))","(+.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) x) (+.f64 (/.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (*.f64 (sin.f64 eps) (pow.f64 x 2))) (cos.f64 eps)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2))) (+.f64 (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (+.f64 1/6 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))))) (pow.f64 x 3))) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(+.f64 (fma.f64 (+.f64 1 (pow.f64 (tan.f64 eps) 2)) x (*.f64 (/.f64 (*.f64 (+.f64 1 (pow.f64 (tan.f64 eps) 2)) (*.f64 x x)) 1) (tan.f64 eps))) (fma.f64 (neg.f64 (-.f64 (fma.f64 -1/2 (+.f64 1 (pow.f64 (tan.f64 eps) 2)) (fma.f64 (pow.f64 (tan.f64 eps) 2) 1/6 1/6)) (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 eps) 2)) 1) (pow.f64 (tan.f64 eps) 2)))) (pow.f64 x 3) (tan.f64 eps)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(tan.f64 (+.f64 eps x))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(tan.f64 (+.f64 eps x))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(tan.f64 (+.f64 eps x))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(tan.f64 (+.f64 eps x))","(/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x))))","(tan.f64 (+.f64 eps x))","(/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x))))","(tan.f64 (+.f64 eps x))","(/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x))))","(tan.f64 (+.f64 eps x))","(/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x))))","(tan.f64 (+.f64 eps x))","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))","(fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (tan.f64 x))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x))))","(+.f64 (fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (tan.f64 x)) (/.f64 (*.f64 (*.f64 (*.f64 eps eps) (sin.f64 x)) (+.f64 1 (pow.f64 (tan.f64 x) 2))) (cos.f64 x)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))))))))","(+.f64 (fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (tan.f64 x)) (fma.f64 (neg.f64 (pow.f64 eps 3)) (+.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) 1/6 1/6) (fma.f64 -1/2 (+.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1) (pow.f64 (tan.f64 x) 2))))) (/.f64 (*.f64 (*.f64 (*.f64 eps eps) (sin.f64 x)) (+.f64 1 (pow.f64 (tan.f64 x) 2))) (cos.f64 x))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(tan.f64 (+.f64 eps x))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(tan.f64 (+.f64 eps x))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(tan.f64 (+.f64 eps x))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(tan.f64 (+.f64 eps x))","(/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps))))","(tan.f64 (+.f64 eps x))","(/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps))))","(tan.f64 (+.f64 eps x))","(/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps))))","(tan.f64 (+.f64 eps x))","(/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps))))","(tan.f64 (+.f64 eps x))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(tan.f64 eps)","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) x) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (*.f64 (/.f64 x 1) (pow.f64 (tan.f64 eps) 2)) (tan.f64 eps))","(+.f64 (/.f64 (*.f64 (pow.f64 x 2) (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (sin.f64 eps))) (cos.f64 eps)) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (*.f64 (/.f64 (*.f64 (+.f64 1 (pow.f64 (tan.f64 eps) 2)) (*.f64 x x)) 1) (tan.f64 eps)) (+.f64 (*.f64 (/.f64 x 1) (pow.f64 (tan.f64 eps) 2)) (tan.f64 eps)))","(+.f64 (/.f64 (*.f64 (sin.f64 eps) (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (pow.f64 x 2))) (cos.f64 eps)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (+.f64 1/2 (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (pow.f64 (cos.f64 eps) 2)))))) (pow.f64 x 3))) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(+.f64 (*.f64 (/.f64 (*.f64 (+.f64 1 (pow.f64 (tan.f64 eps) 2)) (*.f64 x x)) 1) (tan.f64 eps)) (fma.f64 (neg.f64 (+.f64 (fma.f64 (+.f64 1 (pow.f64 (tan.f64 eps) 2)) -1/2 1/2) (fma.f64 1/6 (pow.f64 (tan.f64 eps) 2) (neg.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 eps) 2)) 1) (pow.f64 (tan.f64 eps) 2)))))) (pow.f64 x 3) (+.f64 (*.f64 (/.f64 x 1) (pow.f64 (tan.f64 eps) 2)) (tan.f64 eps))))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(-.f64 (/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(-.f64 (/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(-.f64 (/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(-.f64 (/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(*.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)))","(+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)))","(fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (*.f64 (*.f64 (*.f64 eps eps) (sin.f64 x)) (+.f64 1 (pow.f64 (tan.f64 x) 2))) (cos.f64 x)))","(+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))))))","(-.f64 (fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (*.f64 (*.f64 (*.f64 eps eps) (sin.f64 x)) (+.f64 1 (pow.f64 (tan.f64 x) 2))) (cos.f64 x))) (*.f64 (pow.f64 eps 3) (+.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) 1/6 1/6) (fma.f64 -1/2 (+.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1) (pow.f64 (tan.f64 x) 2)))))))","(+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (cos.f64 x))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))) (sin.f64 x)) (cos.f64 x)) (*.f64 1/6 (/.f64 (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (cos.f64 x))))) (pow.f64 eps 4))) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))))))))","(+.f64 (fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (*.f64 (*.f64 (*.f64 eps eps) (sin.f64 x)) (+.f64 1 (pow.f64 (tan.f64 x) 2))) (cos.f64 x))) (neg.f64 (fma.f64 (fma.f64 -1/2 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1) (tan.f64 x)) (/.f64 (+.f64 (*.f64 1/6 (*.f64 (sin.f64 x) (+.f64 1 (pow.f64 (tan.f64 x) 2)))) (*.f64 (+.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) 1/6 1/6) (fma.f64 -1/2 (+.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1) (pow.f64 (tan.f64 x) 2))))) (sin.f64 x))) (cos.f64 x))) (pow.f64 eps 4) (*.f64 (pow.f64 eps 3) (+.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) 1/6 1/6) (fma.f64 -1/2 (+.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1) (pow.f64 (tan.f64 x) 2)))))))))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(-.f64 (/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(-.f64 (/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(-.f64 (/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(-.f64 (/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","x","(+.f64 (*.f64 1/3 (pow.f64 x 3)) x)","(fma.f64 1/3 (pow.f64 x 3) x)","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(fma.f64 (pow.f64 x 3) 1/3 (fma.f64 2/15 (pow.f64 x 5) x))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(fma.f64 17/315 (pow.f64 x 7) (fma.f64 (pow.f64 x 3) 1/3 (fma.f64 2/15 (pow.f64 x 5) x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)"]],"time":228.572021484375,"type":"simplify"},{"compiler":[[4089,1695]],"time":37.336181640625,"type":"eval"},{"alts":[["(*.f64 (+.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (/.f64 1 (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x))))","fresh",20.836742847149647],["(-.f64 (/.f64 (/.f64 (sin.f64 (+.f64 x eps)) (cbrt.f64 (cos.f64 (+.f64 x eps)))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x eps)) 2))) (tan.f64 x))","fresh",37.152575555900874],["(pow.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) 3)","fresh",37.2038746151232],["(-.f64 (*.f64 (/.f64 1 (cbrt.f64 (cos.f64 (+.f64 x eps)))) (/.f64 (sin.f64 (+.f64 x eps)) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x eps)) 2)))) (tan.f64 x))","fresh",37.20803500232086],["(/.f64 (fma.f64 (sin.f64 x) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)))) (neg.f64 (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x))))","fresh",20.784816082173915],["(-.f64 (*.f64 (/.f64 1 (cos.f64 (+.f64 x eps))) (sin.f64 (+.f64 x eps))) (tan.f64 x))","fresh",37.147182214546184],["(+.f64 (/.f64 (*.f64 (sin.f64 eps) (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (pow.f64 x 2))) (cos.f64 eps)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (+.f64 1/2 (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (pow.f64 (cos.f64 eps) 2)))))) (pow.f64 x 3))) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","fresh",32.304706679665586],["(/.f64 (/.f64 (+.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (cos.f64 x))","fresh",20.832048029608746],["(-.f64 (fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (*.f64 (*.f64 (*.f64 eps eps) (sin.f64 x)) (+.f64 1 (pow.f64 (tan.f64 x) 2))) (cos.f64 x))) (*.f64 (pow.f64 eps 3) (+.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) 1/6 1/6) (fma.f64 -1/2 (+.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1) (pow.f64 (tan.f64 x) 2)))))))","fresh",32.899542029986364],["(+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))))))","fresh",32.89202323114416],["(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (cos.f64 x)))","fresh",20.81325794212142],["(-.f64 (/.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cbrt.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (cbrt.f64 (pow.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) 2))) (tan.f64 x))","fresh",20.751624924661837],["(-.f64 (*.f64 (/.f64 (cbrt.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) 1) (/.f64 (cbrt.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) 2)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (tan.f64 x))","fresh",23.095605341585884],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","next",20.738115682083208]],"compiler":[[33,19],[23,13],[12,9],[25,15],[33,18],[16,10],[105,72],[31,17],[61,44],[103,74],[31,17],[30,17],[30,17],[19,11],[33,19],[23,13],[12,9],[25,15],[33,18],[16,10],[105,72],[31,17],[61,44],[103,74],[31,17],[30,17],[30,17],[19,11]],"count":[[193,14]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[192,14],"picked":[1,0]}],"min-error":[0.19439990957553263],"time":50.48291015625,"type":"prune"},{"compiler":[[48,18]],"locations":[["(+.f64 (tan.f64 x) (tan.f64 eps))",0.14726734264898864,true],["(tan.f64 x)",0.2044525390737681,false],["(tan.f64 eps)",0.2421875,true],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))",3.6509256344457035,true]],"time":11.594970703125,"type":"localize"},{"count":[[3,60]],"series":[["(+.f64 (tan.f64 x) (tan.f64 eps))","eps","-inf",0.162841796875],["(+.f64 (tan.f64 x) (tan.f64 eps))","eps","inf",0.178955078125],["(+.f64 (tan.f64 x) (tan.f64 eps))","eps","0",0.1728515625],["(+.f64 (tan.f64 x) (tan.f64 eps))","x","-inf",0.1640625],["(+.f64 (tan.f64 x) (tan.f64 eps))","x","inf",0.18603515625],["(+.f64 (tan.f64 x) (tan.f64 eps))","x","0",0.176025390625],["(tan.f64 eps)","eps","-inf",0.162841796875],["(tan.f64 eps)","eps","inf",0.14990234375],["(tan.f64 eps)","eps","0",0.239013671875],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","eps","-inf",1.27099609375],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","eps","inf",1.26904296875],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","eps","0",1.22900390625],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","x","-inf",1.02880859375],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","x","inf",2.822021484375],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","x","0",0.7861328125]],"time":10.282958984375,"type":"series"},{"count":[[3,139]],"inputs":[["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","(tan.f64 eps)","(+.f64 (tan.f64 x) (tan.f64 eps))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x)) (*.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x)) 0) (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x)) (*.f64 0 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))) (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (tan.f64 x)) (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (tan.f64 x) (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))) (cbrt.f64 (pow.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x)) 2)) (cbrt.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (sin.f64 x)))) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (sin.f64 x)))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (*.f64 (cos.f64 x) (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))))) (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (*.f64 (cos.f64 x) (+.f64 (tan.f64 x) (tan.f64 eps)))) (*.f64 (cos.f64 x) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (sin.f64 x))) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (cos.f64 x))) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (sin.f64 x)))) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (cos.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (sin.f64 x)))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (tan.f64 x) (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (tan.f64 x) (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (tan.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2))) (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (neg.f64 (tan.f64 x))) (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (tan.f64 x))) (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (tan.f64 x) -1 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (/.f64 (cbrt.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) 2)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1))) (pow.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) -2) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))) (cbrt.f64 (pow.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) 2)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (tan.f64 x)) (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (tan.f64 x)) 1 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) 1 (neg.f64 (tan.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 eps) (*.f64 (tan.f64 eps) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (tan.f64 eps) 0) (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 eps) (*.f64 0 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (tan.f64 eps)) (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 eps)) (/.f64 1 (neg.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (cos.f64 eps))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (cos.f64 eps) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (sin.f64 eps)) 1) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 eps) 2)) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 eps)) (cbrt.f64 (pow.f64 (tan.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (tan.f64 eps) 2)) (cbrt.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (tan.f64 eps)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 eps)) (sin.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 eps)) (neg.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (tan.f64 eps) 2)) (cbrt.f64 (sin.f64 eps))) (cbrt.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 eps)) (cbrt.f64 (pow.f64 (tan.f64 eps) 2))) (cbrt.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 eps)) 1) (neg.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 eps))) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 eps)) 1) (*.f64 (neg.f64 (cos.f64 eps)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 eps) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (tan.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (tan.f64 eps)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 eps) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 eps)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 eps)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 eps)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (tan.f64 (neg.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 eps) 3))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 eps)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 x) (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 eps) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) 0) (+.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (*.f64 0 (+.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (tan.f64 x) (tan.f64 eps))) (+.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (tan.f64 eps) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (tan.f64 x) (neg.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cbrt.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) 2)) (cbrt.f64 (+.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (*.f64 (cos.f64 eps) (sin.f64 x))) (/.f64 1 (*.f64 (cos.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (-.f64 (cbrt.f64 (pow.f64 (tan.f64 eps) 2)) (cbrt.f64 (*.f64 (tan.f64 x) (tan.f64 eps))))) (+.f64 (cbrt.f64 (tan.f64 x)) (cbrt.f64 (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (tan.f64 eps) 2)) (-.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (*.f64 (tan.f64 x) (tan.f64 eps))))) (+.f64 (cbrt.f64 (tan.f64 eps)) (cbrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (*.f64 (cos.f64 eps) (sin.f64 x))) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 eps))) (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (sin.f64 eps)))) (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 eps)) (*.f64 (neg.f64 (cos.f64 x)) (sin.f64 eps))) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (sin.f64 x) (neg.f64 (cos.f64 eps))) (*.f64 (cos.f64 x) (neg.f64 (sin.f64 eps)))) (*.f64 (cos.f64 x) (neg.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (sin.f64 eps)) (cos.f64 x)) (*.f64 (neg.f64 (cos.f64 eps)) (sin.f64 x))) (*.f64 (neg.f64 (cos.f64 eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (sin.f64 eps)) (neg.f64 (cos.f64 x))) (*.f64 (neg.f64 (cos.f64 eps)) (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (cos.f64 eps)) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (sin.f64 eps) (neg.f64 (cos.f64 x))) (*.f64 (cos.f64 eps) (neg.f64 (sin.f64 x)))) (*.f64 (cos.f64 eps) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (*.f64 (cos.f64 eps) (sin.f64 x))) 1) (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (*.f64 (cos.f64 eps) (sin.f64 x)))) (neg.f64 (*.f64 (cos.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (*.f64 (cos.f64 eps) (sin.f64 x))) 1) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (*.f64 (cos.f64 eps) (sin.f64 x))) (cos.f64 eps)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (*.f64 (cos.f64 eps) (sin.f64 x))) (cos.f64 x)) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (tan.f64 eps)) (cbrt.f64 (pow.f64 (tan.f64 eps) 2)) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (tan.f64 x)) (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (tan.f64 x)) (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (/.f64 1 (cos.f64 x)) (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (tan.f64 x)) (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (tan.f64 eps)) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (tan.f64 eps) 2)) (cbrt.f64 (tan.f64 eps)) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (tan.f64 eps) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (tan.f64 x) (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (tan.f64 x) 1 (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (tan.f64 eps) 1 (tan.f64 x))))))"]],"rules":[["egg-rr",52],["egg-rr",34],["egg-rr",53]],"time":33.59716796875,"type":"rewrite"},{"count":[[199,177]],"inputs":[["(/.f64 (sin.f64 eps) (cos.f64 eps))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) x) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3)))) (sin.f64 eps)) (cos.f64 eps))) (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (pow.f64 x 3)) (+.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))","(+.f64 (*.f64 (pow.f64 eps 4) (+.f64 (*.f64 1/3 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 -1 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 -1 (/.f64 (*.f64 (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (sin.f64 x)) (cos.f64 x)))))) (+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","eps","(+.f64 eps (*.f64 1/3 (pow.f64 eps 3)))","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (*.f64 2/15 (pow.f64 eps 5))))","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (+.f64 (*.f64 17/315 (pow.f64 eps 7)) (*.f64 2/15 (pow.f64 eps 5)))))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(+.f64 x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 x (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 x (+.f64 (*.f64 2/15 (pow.f64 x 5)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (sin.f64 x) (cos.f64 x))","(+.f64 eps (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 2/15 (pow.f64 eps 5)))))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (sin.f64 eps) (cos.f64 eps))","(tan.f64 eps)","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) x) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (*.f64 (/.f64 x 1) (pow.f64 (tan.f64 eps) 2)) (tan.f64 eps))","(+.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (fma.f64 (+.f64 (pow.f64 (tan.f64 eps) 3) (tan.f64 eps)) (*.f64 x x) (*.f64 (/.f64 x 1) (pow.f64 (tan.f64 eps) 2))) (tan.f64 eps))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3)))) (sin.f64 eps)) (cos.f64 eps))) (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (pow.f64 x 3)) (+.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(fma.f64 (-.f64 (pow.f64 (tan.f64 eps) 2) (*.f64 (/.f64 (fma.f64 -1/3 (tan.f64 eps) (neg.f64 (pow.f64 (tan.f64 eps) 3))) 1) (tan.f64 eps))) (pow.f64 x 3) (+.f64 (fma.f64 (+.f64 (pow.f64 (tan.f64 eps) 3) (tan.f64 eps)) (*.f64 x x) (*.f64 (/.f64 x 1) (pow.f64 (tan.f64 eps) 2))) (tan.f64 eps)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(*.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)))","(+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(fma.f64 (+.f64 (tan.f64 x) (pow.f64 (tan.f64 x) 3)) (*.f64 eps eps) (*.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2))))","(+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))","(fma.f64 (*.f64 eps eps) (+.f64 (tan.f64 x) (pow.f64 (tan.f64 x) 3)) (fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (-.f64 (pow.f64 (tan.f64 x) 2) (*.f64 (/.f64 (fma.f64 (tan.f64 x) -1/3 (neg.f64 (pow.f64 (tan.f64 x) 3))) 1) (tan.f64 x)))))))","(+.f64 (*.f64 (pow.f64 eps 4) (+.f64 (*.f64 1/3 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 -1 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 -1 (/.f64 (*.f64 (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (sin.f64 x)) (cos.f64 x)))))) (+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))","(fma.f64 (pow.f64 eps 4) (-.f64 (-.f64 (*.f64 1/3 (tan.f64 x)) (fma.f64 (tan.f64 x) -1/3 (neg.f64 (pow.f64 (tan.f64 x) 3)))) (*.f64 (/.f64 (fma.f64 -1/3 (pow.f64 (tan.f64 x) 2) (*.f64 (/.f64 (fma.f64 (tan.f64 x) -1/3 (neg.f64 (pow.f64 (tan.f64 x) 3))) 1) (tan.f64 x))) 1) (tan.f64 x))) (fma.f64 (*.f64 eps eps) (+.f64 (tan.f64 x) (pow.f64 (tan.f64 x) 3)) (fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (-.f64 (pow.f64 (tan.f64 x) 2) (*.f64 (/.f64 (fma.f64 (tan.f64 x) -1/3 (neg.f64 (pow.f64 (tan.f64 x) 3))) 1) (tan.f64 x))))))))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","eps","(+.f64 eps (*.f64 1/3 (pow.f64 eps 3)))","(fma.f64 (pow.f64 eps 3) 1/3 eps)","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (*.f64 2/15 (pow.f64 eps 5))))","(+.f64 (fma.f64 (pow.f64 eps 3) 1/3 eps) (*.f64 2/15 (pow.f64 eps 5)))","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (+.f64 (*.f64 17/315 (pow.f64 eps 7)) (*.f64 2/15 (pow.f64 eps 5)))))","(+.f64 (fma.f64 (pow.f64 eps 3) 1/3 eps) (fma.f64 17/315 (pow.f64 eps 7) (*.f64 2/15 (pow.f64 eps 5))))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(tan.f64 eps)","(/.f64 (sin.f64 eps) (cos.f64 eps))","(tan.f64 eps)","(/.f64 (sin.f64 eps) (cos.f64 eps))","(tan.f64 eps)","(/.f64 (sin.f64 eps) (cos.f64 eps))","(tan.f64 eps)","(/.f64 (sin.f64 eps) (cos.f64 eps))","(tan.f64 eps)","(/.f64 (sin.f64 eps) (cos.f64 eps))","(tan.f64 eps)","(/.f64 (sin.f64 eps) (cos.f64 eps))","(tan.f64 eps)","(/.f64 (sin.f64 eps) (cos.f64 eps))","(tan.f64 eps)","(/.f64 (sin.f64 eps) (cos.f64 eps))","(tan.f64 eps)","(+.f64 x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 x (tan.f64 eps))","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 x (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (fma.f64 1/3 (pow.f64 x 3) x) (tan.f64 eps))","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 x (+.f64 (*.f64 2/15 (pow.f64 x 5)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(+.f64 (fma.f64 1/3 (pow.f64 x 3) x) (fma.f64 2/15 (pow.f64 x 5) (tan.f64 eps)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (tan.f64 x) (tan.f64 eps))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (tan.f64 x) (tan.f64 eps))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (tan.f64 x) (tan.f64 eps))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (tan.f64 x) (tan.f64 eps))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (tan.f64 x) (tan.f64 eps))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (tan.f64 x) (tan.f64 eps))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (tan.f64 x) (tan.f64 eps))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(+.f64 eps (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 eps (tan.f64 x))","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (fma.f64 (pow.f64 eps 3) 1/3 eps) (tan.f64 x))","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 2/15 (pow.f64 eps 5)))))","(+.f64 (fma.f64 (pow.f64 eps 3) 1/3 eps) (fma.f64 (pow.f64 eps 5) 2/15 (tan.f64 x)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (tan.f64 x) (tan.f64 eps))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (tan.f64 x) (tan.f64 eps))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (tan.f64 x) (tan.f64 eps))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (tan.f64 x) (tan.f64 eps))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (tan.f64 x) (tan.f64 eps))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (tan.f64 x) (tan.f64 eps))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (tan.f64 x) (tan.f64 eps))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (tan.f64 x) (tan.f64 eps))"]],"time":221.412841796875,"type":"simplify"},{"compiler":[[7869,3172]],"time":69.654052734375,"type":"eval"},{"alts":[["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 3) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","fresh",20.722010119479794],["(-.f64 (fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (*.f64 (*.f64 (*.f64 eps eps) (sin.f64 x)) (+.f64 1 (pow.f64 (tan.f64 x) 2))) (cos.f64 x))) (*.f64 (pow.f64 eps 3) (+.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) 1/6 1/6) (fma.f64 -1/2 (+.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1) (pow.f64 (tan.f64 x) 2)))))))","fresh",32.899542029986364],["(fma.f64 (fma.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)) (tan.f64 x)) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","fresh",20.736858150462556],["(fma.f64 (/.f64 (/.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (*.f64 (cos.f64 eps) (sin.f64 x))) (cos.f64 eps)) (cos.f64 x)) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","fresh",20.770578266912548],["(+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))","fresh",32.88811698114416],["(fma.f64 (+.f64 (tan.f64 x) (/.f64 (/.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 eps))) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)))) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","fresh",20.78373315046255],["(fma.f64 (+.f64 (tan.f64 x) (/.f64 (*.f64 (cbrt.f64 (sin.f64 eps)) (cbrt.f64 (pow.f64 (tan.f64 eps) 2))) (cbrt.f64 (cos.f64 eps)))) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","fresh",23.047407210070013],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (tan.f64 x) (/.f64 (*.f64 (cbrt.f64 (sin.f64 eps)) (cbrt.f64 (pow.f64 (tan.f64 eps) 2))) (cbrt.f64 (cos.f64 eps))) -1)) (neg.f64 (tan.f64 x)))","fresh",20.73209783684351],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","next",20.652247507624555],["(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (cos.f64 x)))","fresh",20.81325794212142],["(-.f64 (/.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cbrt.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (cbrt.f64 (pow.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) 2))) (tan.f64 x))","fresh",20.751624924661837],["(-.f64 (*.f64 (/.f64 (cbrt.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) 1) (/.f64 (cbrt.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) 2)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (tan.f64 x))","fresh",23.095605341585884],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (cos.f64 x))) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","fresh",20.74052455458496]],"compiler":[[22,14],[61,44],[23,15],[30,18],[79,49],[29,19],[30,20],[30,20],[35,18],[31,17],[30,17],[30,17],[30,20],[22,14],[61,44],[23,15],[30,18],[79,49],[29,19],[30,20],[30,20],[35,18],[31,17],[30,17],[30,17],[30,20]],"count":[[341,13]],"kept":[{"done":[0,0],"fresh":[13,3],"new":[327,10],"picked":[1,0]}],"min-error":[0.13821970360251204],"time":122.551025390625,"type":"prune"},{"compiler":[[154,30]],"locations":[["(*.f64 (sin.f64 x) (sin.f64 eps))",0.17578125,true],["(/.f64 (sin.f64 eps) (cos.f64 eps))",0.203125,true],["(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))",0.29525375976844204,true],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))",3.6460560614387787,true]],"time":21.806884765625,"type":"localize"},{"count":[[4,44]],"series":[["(*.f64 (sin.f64 x) (sin.f64 eps))","eps","-inf",0.14404296875],["(*.f64 (sin.f64 x) (sin.f64 eps))","eps","inf",0.170166015625],["(*.f64 (sin.f64 x) (sin.f64 eps))","eps","0",0.231201171875],["(*.f64 (sin.f64 x) (sin.f64 eps))","x","-inf",0.171142578125],["(*.f64 (sin.f64 x) (sin.f64 eps))","x","inf",0.148193359375],["(*.f64 (sin.f64 x) (sin.f64 eps))","x","0",0.260986328125],["(/.f64 (sin.f64 eps) (cos.f64 eps))","eps","-inf",0.14404296875],["(/.f64 (sin.f64 eps) (cos.f64 eps))","eps","inf",0.14501953125],["(/.f64 (sin.f64 eps) (cos.f64 eps))","eps","0",0.179931640625],["(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","eps","-inf",0.166015625],["(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","eps","inf",0.198974609375],["(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","eps","0",0.7041015625],["(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","x","-inf",0.174072265625],["(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","x","inf",0.2041015625],["(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","x","0",0.719970703125],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","eps","-inf",1.3349609375],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","eps","inf",1.345947265625],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","eps","0",1.0361328125],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","x","-inf",1.302001953125],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","x","inf",3.5068359375],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","x","0",0.781982421875]],"time":13.463134765625,"type":"series"},{"count":[[4,205]],"inputs":[["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(*.f64 (sin.f64 x) (sin.f64 eps))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))) 0) (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))) (*.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)))) (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))) (*.f64 0 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)))) (*.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (neg.f64 (cos.f64 x)))) (/.f64 (*.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (neg.f64 (sin.f64 x))) (*.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (neg.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (neg.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x))) (*.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (cos.f64 x))) (/.f64 (*.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (sin.f64 x)) (*.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (tan.f64 x)) 0) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) 0) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)))) (cbrt.f64 (pow.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))) 2)) (cbrt.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))))) (pow.f64 (cbrt.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)))) (neg.f64 (pow.f64 (cbrt.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x) (*.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (neg.f64 (sin.f64 x)))) (/.f64 1 (*.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (cos.f64 x)) (neg.f64 (*.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (neg.f64 (sin.f64 x))))) (/.f64 1 (*.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (neg.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)) 2)) (+.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (*.f64 (cbrt.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (cbrt.f64 (tan.f64 x))))) (-.f64 (cbrt.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (cbrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (cos.f64 x)) (neg.f64 (*.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (neg.f64 (sin.f64 x))))) (*.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x) (*.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (neg.f64 (sin.f64 x)))) (*.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)) (neg.f64 (*.f64 (cos.f64 x) (+.f64 (tan.f64 x) (tan.f64 eps)))))) (*.f64 (neg.f64 (cos.f64 x)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (sin.f64 x) (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps)))))) (*.f64 (cos.f64 x) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x) (*.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (neg.f64 (sin.f64 x))))) (*.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (cos.f64 x)) (neg.f64 (*.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (neg.f64 (sin.f64 x)))))) (neg.f64 (*.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) (neg.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)) 2)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)) -1 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (/.f64 1 (fma.f64 (tan.f64 eps) (tan.f64 x) -1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1 (fma.f64 (tan.f64 eps) (tan.f64 x) -1))) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) 2))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (tan.f64 eps) (tan.f64 x) -1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)) 2)) (cbrt.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)) 2))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) 1 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (+.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 eps x)))) 1) (*.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (+.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 eps x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) 0) (*.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 0) (*.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) (*.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (+.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 eps x))))) (*.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (+.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 eps x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (neg.f64 (*.f64 (tan.f64 x) (tan.f64 eps)))) (*.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (tan.f64 x) (tan.f64 eps))) (*.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) (*.f64 0 (*.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (neg.f64 (*.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (cos.f64 (-.f64 eps x)) 1/2) (*.f64 (cos.f64 eps) (cos.f64 x))) (/.f64 (*.f64 (cos.f64 (+.f64 eps x)) 1/2) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 2)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (/.f64 -1 (*.f64 (cos.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 eps) (/.f64 (sin.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 eps) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 x) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (cos.f64 x)) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 2)) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (cos.f64 eps)) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 2)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (/.f64 1 (*.f64 (cos.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 (cos.f64 eps) (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 eps) (cos.f64 x)) (/.f64 (sin.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 2)) (cbrt.f64 (*.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (tan.f64 x) (sin.f64 eps)) (/.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (tan.f64 x) (cbrt.f64 (tan.f64 eps))) (cbrt.f64 (pow.f64 (tan.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (*.f64 (/.f64 1 (cos.f64 x)) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (tan.f64 eps)) (/.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 x)) (*.f64 (sin.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 eps)) (*.f64 (tan.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (neg.f64 1/3)) (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (+.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 eps x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (neg.f64 (+.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 eps x))))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (neg.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 x) (tan.f64 eps)) (cbrt.f64 (cos.f64 x))) (pow.f64 (cbrt.f64 (cos.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 x) (tan.f64 eps))) (/.f64 -1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (tan.f64 x) (sin.f64 eps))) (/.f64 -1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 1 (*.f64 2 (*.f64 (cos.f64 eps) (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (*.f64 (cos.f64 eps) (cos.f64 x))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 2)) (-.f64 0 (*.f64 (cbrt.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) 0))) (+.f64 (cbrt.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 x) (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 eps) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (tan.f64 eps)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (neg.f64 (*.f64 (cos.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (tan.f64 x) (sin.f64 eps)) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (tan.f64 x) (sin.f64 eps))) (neg.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 x) (tan.f64 eps))) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (tan.f64 eps)) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (*.f64 2 (*.f64 (cos.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (*.f64 (cos.f64 eps) (cos.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (*.f64 2 (*.f64 (cos.f64 eps) (cos.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 x) (tan.f64 eps)) (cbrt.f64 (cos.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (*.f64 (tan.f64 x) (sin.f64 eps)))) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 eps x))) (neg.f64 (*.f64 2 (*.f64 (cos.f64 eps) (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (*.f64 (cos.f64 eps) (cos.f64 x)))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x))))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (tan.f64 eps) 0) (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 eps) (*.f64 (tan.f64 eps) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (tan.f64 eps)) (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 eps) (*.f64 0 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (cos.f64 eps))) (neg.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 eps)) (/.f64 -1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 eps)) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 eps) 2)) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 eps)) (cbrt.f64 (pow.f64 (tan.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (tan.f64 eps) 2)) (cbrt.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 eps)) (sin.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 eps) (neg.f64 1/3)) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (cos.f64 eps) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 eps))) (pow.f64 (cbrt.f64 (cos.f64 eps)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 eps) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 eps)) (neg.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 eps))) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (tan.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 eps)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 eps)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 eps) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 eps)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 eps)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 eps) 3))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 eps)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 0) (*.f64 (sin.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (sin.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 0 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (-.f64 eps x)) 1/2) (neg.f64 (*.f64 (cos.f64 (+.f64 eps x)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 (-.f64 eps x)) 1/2) (*.f64 (cos.f64 (+.f64 eps x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (cos.f64 (-.f64 eps x)) 1/2) 1) (/.f64 (*.f64 (cos.f64 (+.f64 eps x)) 1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 eps) 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (sin.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 eps) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 2)) (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 eps) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (cbrt.f64 (sin.f64 eps))) (cbrt.f64 (pow.f64 (sin.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))) (pow.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 eps)) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps)))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps)))) (neg.f64 (pow.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 eps x))) (/.f64 1 -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (sqrt.f64 2)) (/.f64 1 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (cbrt.f64 2)) (/.f64 1 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 eps x))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (cbrt.f64 2))) (neg.f64 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (cos.f64 (+.f64 eps x)) 1/2) (*.f64 (cos.f64 (-.f64 eps x)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 3) 1))))))"]],"rules":[["egg-rr",45],["egg-rr",30],["egg-rr",76],["egg-rr",54]],"time":48.47998046875,"type":"rewrite"},{"count":[[249,259]],"inputs":[["(/.f64 (sin.f64 eps) (cos.f64 eps))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) x) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 (sin.f64 eps) (pow.f64 x 2))) (cos.f64 eps)) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (+.f64 (*.f64 (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (sin.f64 eps)) (cos.f64 eps))) (pow.f64 x 3)) (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 (pow.f64 x 2) (sin.f64 eps))) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (sin.f64 x))) (cos.f64 x)))","(+.f64 (*.f64 (+.f64 1/3 (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (/.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)))) (pow.f64 eps 3)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (sin.f64 x))) (cos.f64 x))))","(+.f64 (*.f64 (+.f64 1/3 (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (/.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)))) (pow.f64 eps 3)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (+.f64 (*.f64 (pow.f64 eps 4) (+.f64 (/.f64 (*.f64 (+.f64 1/3 (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (/.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)) (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (sin.f64 x))) (cos.f64 x)))))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 x (sin.f64 eps)) (cos.f64 eps))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (pow.f64 x 3)) (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps)))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/24 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))))))) (pow.f64 x 5)) (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps))))","(+.f64 (*.f64 (-.f64 (*.f64 -1/5040 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 -1/720 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/24 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))))) (*.f64 1/24 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))))) (pow.f64 x 7)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/24 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))))))) (pow.f64 x 5)) (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps)))))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (pow.f64 eps 3)) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x)))","(+.f64 (*.f64 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 1/24 (/.f64 (sin.f64 x) (cos.f64 x))))) (pow.f64 eps 5)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (pow.f64 eps 3)) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x))))","(+.f64 (*.f64 (pow.f64 eps 7) (-.f64 (*.f64 -1/5040 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 1/24 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x))))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 1/24 (/.f64 (sin.f64 x) (cos.f64 x)))))) (*.f64 -1/720 (/.f64 (sin.f64 x) (cos.f64 x))))))) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 1/24 (/.f64 (sin.f64 x) (cos.f64 x))))) (pow.f64 eps 5)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (pow.f64 eps 3)) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x)))))","eps","(+.f64 eps (*.f64 1/3 (pow.f64 eps 3)))","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (*.f64 2/15 (pow.f64 eps 5))))","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (+.f64 (*.f64 17/315 (pow.f64 eps 7)) (*.f64 2/15 (pow.f64 eps 5)))))","(*.f64 (sin.f64 eps) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (*.f64 (sin.f64 eps) x))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 x 5) (sin.f64 eps))) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (*.f64 (sin.f64 eps) x)))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 x 5) (sin.f64 eps))) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 x 7) (sin.f64 eps))) (*.f64 (sin.f64 eps) x))))","(*.f64 eps (sin.f64 x))","(+.f64 (*.f64 eps (sin.f64 x)) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))))","(+.f64 (*.f64 eps (sin.f64 x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (sin.f64 x))) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x)))))","(+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 eps 7) (sin.f64 x))) (+.f64 (*.f64 eps (sin.f64 x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (sin.f64 x))) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (sin.f64 eps) (cos.f64 eps))","(tan.f64 eps)","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) x) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (*.f64 (/.f64 x 1) (pow.f64 (tan.f64 eps) 2)) (tan.f64 eps))","(+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 (sin.f64 eps) (pow.f64 x 2))) (cos.f64 eps)) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (*.f64 (/.f64 (*.f64 (+.f64 1 (pow.f64 (tan.f64 eps) 2)) (*.f64 x x)) 1) (tan.f64 eps)) (+.f64 (*.f64 (/.f64 x 1) (pow.f64 (tan.f64 eps) 2)) (tan.f64 eps)))","(+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (+.f64 (*.f64 (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (sin.f64 eps)) (cos.f64 eps))) (pow.f64 x 3)) (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 (pow.f64 x 2) (sin.f64 eps))) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(+.f64 (*.f64 (/.f64 x 1) (pow.f64 (tan.f64 eps) 2)) (fma.f64 (+.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 eps) 2)) 1) (pow.f64 (tan.f64 eps) 2)) (*.f64 (/.f64 (*.f64 (tan.f64 eps) 1/3) 1) (tan.f64 eps))) (pow.f64 x 3) (/.f64 (*.f64 (sin.f64 eps) (+.f64 (*.f64 (+.f64 1 (pow.f64 (tan.f64 eps) 2)) (*.f64 x x)) 1)) (cos.f64 eps))))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(*.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)))","(+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (sin.f64 x))) (cos.f64 x)))","(fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (*.f64 (/.f64 (*.f64 (*.f64 eps eps) (+.f64 1 (pow.f64 (tan.f64 x) 2))) 1) (tan.f64 x)))","(+.f64 (*.f64 (+.f64 1/3 (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (/.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)))) (pow.f64 eps 3)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (sin.f64 x))) (cos.f64 x))))","(fma.f64 (+.f64 1/3 (+.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1) (pow.f64 (tan.f64 x) 2)) (*.f64 (/.f64 (*.f64 (tan.f64 x) 1/3) 1) (tan.f64 x)))) (pow.f64 eps 3) (fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (*.f64 (/.f64 (*.f64 (*.f64 eps eps) (+.f64 1 (pow.f64 (tan.f64 x) 2))) 1) (tan.f64 x))))","(+.f64 (*.f64 (+.f64 1/3 (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (/.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)))) (pow.f64 eps 3)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (+.f64 (*.f64 (pow.f64 eps 4) (+.f64 (/.f64 (*.f64 (+.f64 1/3 (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (/.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)) (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (sin.f64 x))) (cos.f64 x)))))","(fma.f64 (+.f64 1/3 (+.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1) (pow.f64 (tan.f64 x) 2)) (*.f64 (/.f64 (*.f64 (tan.f64 x) 1/3) 1) (tan.f64 x)))) (pow.f64 eps 3) (fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (pow.f64 eps 4) (+.f64 (*.f64 (/.f64 (+.f64 1/3 (+.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1) (pow.f64 (tan.f64 x) 2)) (*.f64 (/.f64 (*.f64 (tan.f64 x) 1/3) 1) (tan.f64 x)))) 1) (tan.f64 x)) (*.f64 (*.f64 (tan.f64 x) 1/3) (+.f64 1 (pow.f64 (tan.f64 x) 2)))) (*.f64 (/.f64 (*.f64 (*.f64 eps eps) (+.f64 1 (pow.f64 (tan.f64 x) 2))) 1) (tan.f64 x)))))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(/.f64 (*.f64 x (sin.f64 eps)) (cos.f64 eps))","(*.f64 (/.f64 x 1) (tan.f64 eps))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (pow.f64 x 3)) (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps)))","(fma.f64 (*.f64 (tan.f64 eps) 1/3) (pow.f64 x 3) (*.f64 (/.f64 x 1) (tan.f64 eps)))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/24 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))))))) (pow.f64 x 5)) (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps))))","(fma.f64 (*.f64 (tan.f64 eps) 1/3) (pow.f64 x 3) (fma.f64 (+.f64 (*.f64 (tan.f64 eps) (-.f64 1/120 1/24)) (*.f64 1/2 (*.f64 (tan.f64 eps) 1/3))) (pow.f64 x 5) (*.f64 (/.f64 x 1) (tan.f64 eps))))","(+.f64 (*.f64 (-.f64 (*.f64 -1/5040 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 -1/720 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/24 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))))) (*.f64 1/24 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))))) (pow.f64 x 7)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/24 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))))))) (pow.f64 x 5)) (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps)))))","(fma.f64 (-.f64 (*.f64 (tan.f64 eps) (-.f64 -1/5040 -1/720)) (fma.f64 -1/2 (+.f64 (*.f64 (tan.f64 eps) (-.f64 1/120 1/24)) (*.f64 1/2 (*.f64 (tan.f64 eps) 1/3))) (*.f64 1/24 (*.f64 (tan.f64 eps) 1/3)))) (pow.f64 x 7) (fma.f64 (*.f64 (tan.f64 eps) 1/3) (pow.f64 x 3) (fma.f64 (+.f64 (*.f64 (tan.f64 eps) (-.f64 1/120 1/24)) (*.f64 1/2 (*.f64 (tan.f64 eps) 1/3))) (pow.f64 x 5) (*.f64 (/.f64 x 1) (tan.f64 eps)))))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x))","(*.f64 (/.f64 eps 1) (tan.f64 x))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (pow.f64 eps 3)) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x)))","(fma.f64 (*.f64 (tan.f64 x) 1/3) (pow.f64 eps 3) (*.f64 (/.f64 eps 1) (tan.f64 x)))","(+.f64 (*.f64 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 1/24 (/.f64 (sin.f64 x) (cos.f64 x))))) (pow.f64 eps 5)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (pow.f64 eps 3)) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x))))","(fma.f64 (-.f64 (*.f64 1/120 (tan.f64 x)) (fma.f64 -1/2 (*.f64 (tan.f64 x) 1/3) (*.f64 1/24 (tan.f64 x)))) (pow.f64 eps 5) (fma.f64 (*.f64 (tan.f64 x) 1/3) (pow.f64 eps 3) (*.f64 (/.f64 eps 1) (tan.f64 x))))","(+.f64 (*.f64 (pow.f64 eps 7) (-.f64 (*.f64 -1/5040 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 1/24 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x))))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 1/24 (/.f64 (sin.f64 x) (cos.f64 x)))))) (*.f64 -1/720 (/.f64 (sin.f64 x) (cos.f64 x))))))) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 1/24 (/.f64 (sin.f64 x) (cos.f64 x))))) (pow.f64 eps 5)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (pow.f64 eps 3)) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x)))))","(fma.f64 (pow.f64 eps 7) (-.f64 (*.f64 -1/5040 (tan.f64 x)) (fma.f64 1/24 (*.f64 (tan.f64 x) 1/3) (fma.f64 -1/2 (-.f64 (*.f64 1/120 (tan.f64 x)) (fma.f64 -1/2 (*.f64 (tan.f64 x) 1/3) (*.f64 1/24 (tan.f64 x)))) (*.f64 -1/720 (tan.f64 x))))) (fma.f64 (-.f64 (*.f64 1/120 (tan.f64 x)) (fma.f64 -1/2 (*.f64 (tan.f64 x) 1/3) (*.f64 1/24 (tan.f64 x)))) (pow.f64 eps 5) (fma.f64 (*.f64 (tan.f64 x) 1/3) (pow.f64 eps 3) (*.f64 (/.f64 eps 1) (tan.f64 x)))))","eps","(+.f64 eps (*.f64 1/3 (pow.f64 eps 3)))","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (*.f64 2/15 (pow.f64 eps 5))))","(+.f64 eps (fma.f64 1/3 (pow.f64 eps 3) (*.f64 2/15 (pow.f64 eps 5))))","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (+.f64 (*.f64 17/315 (pow.f64 eps 7)) (*.f64 2/15 (pow.f64 eps 5)))))","(+.f64 eps (fma.f64 1/3 (pow.f64 eps 3) (fma.f64 17/315 (pow.f64 eps 7) (*.f64 2/15 (pow.f64 eps 5)))))","(*.f64 (sin.f64 eps) x)","(*.f64 x (sin.f64 eps))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (*.f64 (sin.f64 eps) x))","(*.f64 (sin.f64 eps) (+.f64 (*.f64 -1/6 (pow.f64 x 3)) x))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 x 5) (sin.f64 eps))) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (*.f64 (sin.f64 eps) x)))","(fma.f64 1/120 (*.f64 (pow.f64 x 5) (sin.f64 eps)) (*.f64 (sin.f64 eps) (+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 x 5) (sin.f64 eps))) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 x 7) (sin.f64 eps))) (*.f64 (sin.f64 eps) x))))","(+.f64 (*.f64 (sin.f64 eps) (+.f64 (*.f64 1/120 (pow.f64 x 5)) (*.f64 -1/6 (pow.f64 x 3)))) (*.f64 (sin.f64 eps) (+.f64 (*.f64 -1/5040 (pow.f64 x 7)) x)))","(*.f64 eps (sin.f64 x))","(+.f64 (*.f64 eps (sin.f64 x)) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 -1/6 (pow.f64 eps 3)) eps))","(+.f64 (*.f64 eps (sin.f64 x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (sin.f64 x))) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x)))))","(fma.f64 eps (sin.f64 x) (*.f64 (sin.f64 x) (+.f64 (*.f64 -1/6 (pow.f64 eps 3)) (*.f64 1/120 (pow.f64 eps 5)))))","(+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 eps 7) (sin.f64 x))) (+.f64 (*.f64 eps (sin.f64 x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (sin.f64 x))) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))))))","(+.f64 (*.f64 (sin.f64 x) (+.f64 (*.f64 -1/5040 (pow.f64 eps 7)) eps)) (*.f64 (sin.f64 x) (+.f64 (*.f64 -1/6 (pow.f64 eps 3)) (*.f64 1/120 (pow.f64 eps 5)))))"]],"time":191.052001953125,"type":"simplify"},{"compiler":[[9647,3195]],"time":60.796875,"type":"eval"},{"alts":[["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 3) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","fresh",20.722010119479794],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (pow.f64 (cos.f64 eps) (neg.f64 1/3)) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (cos.f64 eps) 2))))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","fresh",36.27926188487595],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (tan.f64 eps)) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","fresh",20.65777499785612],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","next",20.638733884301654],["(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (cos.f64 x)))","fresh",20.81325794212142],["(fma.f64 (cbrt.f64 (/.f64 -1 (fma.f64 (tan.f64 eps) (tan.f64 x) -1))) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) 2))) (neg.f64 (tan.f64 x)))","fresh",20.742234076391927],["(+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))","fresh",32.88811698114416],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 eps))) (pow.f64 (cbrt.f64 (cos.f64 eps)) -2))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","fresh",20.81897144554029],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","fresh",20.671778757624555],["(-.f64 (/.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cbrt.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (cbrt.f64 (pow.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) 2))) (tan.f64 x))","fresh",20.751624924661837],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (cbrt.f64 (sin.f64 eps)) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 eps) 2)) (cos.f64 eps)))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","fresh",22.935746518389806],["(fma.f64 (cbrt.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)) 2)) (neg.f64 (tan.f64 x)))","fresh",23.372755531256196],["(fma.f64 (+.f64 1/3 (+.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1) (pow.f64 (tan.f64 x) 2)) (*.f64 (/.f64 (*.f64 (tan.f64 x) 1/3) 1) (tan.f64 x)))) (pow.f64 eps 3) (fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (*.f64 (/.f64 (*.f64 (*.f64 eps eps) (+.f64 1 (pow.f64 (tan.f64 x) 2))) 1) (tan.f64 x))))","fresh",32.899542029986364]],"compiler":[[22,14],[44,25],[39,23],[45,23],[31,17],[30,18],[79,49],[42,22],[37,20],[30,17],[42,23],[35,18],[54,37],[22,14],[44,25],[39,23],[45,23],[31,17],[30,18],[79,49],[42,22],[37,20],[30,17],[42,23],[35,18],[54,37]],"count":[[272,13]],"kept":[{"done":[0,0],"fresh":[12,4],"new":[259,9],"picked":[1,0]}],"min-error":[0.12925307905748792],"time":83.8310546875,"type":"prune"},{"compiler":[[241,65]],"locations":[["(/.f64 (sin.f64 eps) (cos.f64 eps))",0.203125,false],["(*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2))))",0.28125,true],["(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)",0.38900375976844204,true],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))",3.6460560614387787,true]],"time":35.072021484375,"type":"localize"},{"count":[[3,72]],"series":[["(*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2))))","eps","-inf",0.1708984375],["(*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2))))","eps","inf",0.18896484375],["(*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2))))","eps","0",0.43115234375],["(*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2))))","x","-inf",0.1708984375],["(*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2))))","x","inf",0.174072265625],["(*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2))))","x","0",0.426025390625],["(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","x","-inf",0.35595703125],["(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","x","inf",0.370849609375],["(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","x","0",0.4921875],["(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","eps","-inf",0.35400390625],["(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","eps","inf",0.4111328125],["(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","eps","0",0.953125],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","eps","-inf",0.70703125],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","eps","inf",1.39208984375],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","eps","0",0.471923828125],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","x","-inf",0.77880859375],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","x","inf",1.72900390625],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","x","0",0.532958984375]],"time":10.554931640625,"type":"series"},{"count":[[3,171]],"inputs":[["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","(*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))) 0) (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))) (*.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))) (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))) (*.f64 0 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (neg.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (cos.f64 x))) (/.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (cos.f64 x)))) (/.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (sin.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (tan.f64 x)) 0) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) 0) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))) (pow.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))) 2/3) (cbrt.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))))) (pow.f64 (cbrt.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))) (neg.f64 (pow.f64 (cbrt.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (cos.f64 x)) (neg.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (sin.f64 x))))) (/.f64 1 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (sin.f64 x)))) (/.f64 1 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) 2/3) (+.f64 (pow.f64 (tan.f64 x) 2/3) (*.f64 (cbrt.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (cbrt.f64 (tan.f64 x))))) (-.f64 (cbrt.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (cbrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (sin.f64 x)))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (cos.f64 x)) (neg.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (sin.f64 x))))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (*.f64 (cos.f64 x) (+.f64 (tan.f64 x) (tan.f64 eps)))))) (*.f64 (neg.f64 (cos.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (sin.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps)))))) (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (cos.f64 x)) (neg.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (sin.f64 x)))))) (neg.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (sin.f64 x))))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) 2/3) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) -1 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) 1 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))) (neg.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) 2/3)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))) (*.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) 2/3) -1) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) -1/3)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) 2/3)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) 2/3) (cbrt.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2) 0) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2) (*.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2) (*.f64 0 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) 4) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 4)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (cos.f64 eps)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (cos.f64 x)) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) (*.f64 (cos.f64 eps) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x))) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (+.f64 2/3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 eps) (*.f64 (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (cos.f64 eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cos.f64 eps) (cos.f64 x))) (neg.f64 (*.f64 (cos.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (*.f64 (cos.f64 eps) (cos.f64 x))) -1) (*.f64 (neg.f64 (*.f64 (cos.f64 eps) (cos.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 eps x))) 2) (/.f64 1 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (+.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 eps x)))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (+.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 eps x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 eps x))) 2) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (+.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 eps x))) 2)) -4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (+.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 eps x))))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (*.f64 (cos.f64 eps) (cos.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) 0) (*.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 0) (*.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) (*.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (neg.f64 (*.f64 (tan.f64 x) (tan.f64 eps)))) (*.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (tan.f64 x) (tan.f64 eps))) (*.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) (*.f64 0 (*.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (tan.f64 x) (cbrt.f64 (tan.f64 eps))) (pow.f64 (tan.f64 eps) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 x)) (*.f64 (pow.f64 (tan.f64 x) 2/3) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 eps) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 2/3) (cbrt.f64 (*.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (neg.f64 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (cbrt.f64 (/.f64 (sin.f64 eps) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)))) (pow.f64 (/.f64 (sin.f64 eps) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (tan.f64 x) (sin.f64 eps)) (/.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (sin.f64 eps) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) (cbrt.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))))) (pow.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 eps) (*.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (neg.f64 2/3)) (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 eps) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3))) (*.f64 (pow.f64 (/.f64 (sin.f64 eps) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) 2/3) (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (*.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) -1/3) (/.f64 (sin.f64 eps) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x))))) (*.f64 (pow.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) 2/3) (/.f64 (sin.f64 eps) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (*.f64 (/.f64 1 (cos.f64 x)) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (/.f64 1 (*.f64 (cos.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (cbrt.f64 (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x))))) (/.f64 (/.f64 (sin.f64 eps) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 (/.f64 (sin.f64 eps) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 eps))) (/.f64 (/.f64 (sin.f64 eps) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3))) (/.f64 (sin.f64 eps) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (neg.f64 (+.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 eps x))))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (+.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 eps x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (neg.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (/.f64 1 (neg.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (tan.f64 x) (sin.f64 eps))) (/.f64 -1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 x) (tan.f64 eps))) (/.f64 -1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (neg.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (neg.f64 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x))))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (neg.f64 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) (neg.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (tan.f64 eps)) (/.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) (cbrt.f64 (cos.f64 eps))) (pow.f64 (cos.f64 x) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 2/3) (-.f64 0 (*.f64 (cbrt.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) 0))) (+.f64 (cbrt.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 x) (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 eps) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (tan.f64 x) (sin.f64 eps))) (neg.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (tan.f64 x) (sin.f64 eps)) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (tan.f64 eps)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 x) (tan.f64 eps))) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (neg.f64 (*.f64 (cos.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) (cbrt.f64 (neg.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (neg.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x))))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) (cbrt.f64 (cos.f64 eps))) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (*.f64 (tan.f64 x) (sin.f64 eps)))) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (*.f64 (sin.f64 x) (tan.f64 eps)))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2/3)) (cbrt.f64 (cos.f64 eps)))) (neg.f64 (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 3))))))"]],"rules":[["egg-rr",74],["egg-rr",42],["egg-rr",55]],"time":46.287109375,"type":"rewrite"},{"count":[[243,221]],"inputs":[["(/.f64 (sin.f64 eps) (cos.f64 eps))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) x) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 (sin.f64 eps) (pow.f64 x 2))) (cos.f64 eps)) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (+.f64 (*.f64 (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (sin.f64 eps)) (cos.f64 eps))) (pow.f64 x 3)) (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 (pow.f64 x 2) (sin.f64 eps))) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (sin.f64 x))) (cos.f64 x)))","(+.f64 (*.f64 (+.f64 1/3 (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (/.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)))) (pow.f64 eps 3)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (sin.f64 x))) (cos.f64 x))))","(+.f64 (*.f64 (+.f64 1/3 (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (/.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)))) (pow.f64 eps 3)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (+.f64 (*.f64 (pow.f64 eps 4) (+.f64 (/.f64 (*.f64 (+.f64 1/3 (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (/.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)) (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (sin.f64 x))) (cos.f64 x)))))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(pow.f64 (cos.f64 x) 2)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 eps 2) (pow.f64 (cos.f64 x) 2))) (pow.f64 (cos.f64 x) 2))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 eps 2) (pow.f64 (cos.f64 x) 2))) (+.f64 (*.f64 (pow.f64 eps 4) (+.f64 (*.f64 1/12 (pow.f64 (cos.f64 x) 2)) (*.f64 1/4 (pow.f64 (cos.f64 x) 2)))) (pow.f64 (cos.f64 x) 2)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 eps 2) (pow.f64 (cos.f64 x) 2))) (+.f64 (*.f64 (pow.f64 eps 4) (+.f64 (*.f64 1/12 (pow.f64 (cos.f64 x) 2)) (*.f64 1/4 (pow.f64 (cos.f64 x) 2)))) (+.f64 (pow.f64 (cos.f64 x) 2) (*.f64 (+.f64 (*.f64 -1/360 (pow.f64 (cos.f64 x) 2)) (*.f64 -1/24 (pow.f64 (cos.f64 x) 2))) (pow.f64 eps 6)))))","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(pow.f64 (cos.f64 eps) 2)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 x 2))) (pow.f64 (cos.f64 eps) 2))","(+.f64 (*.f64 (+.f64 (*.f64 1/12 (pow.f64 (cos.f64 eps) 2)) (*.f64 1/4 (pow.f64 (cos.f64 eps) 2))) (pow.f64 x 4)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 x 2))) (pow.f64 (cos.f64 eps) 2)))","(+.f64 (*.f64 (+.f64 (*.f64 1/12 (pow.f64 (cos.f64 eps) 2)) (*.f64 1/4 (pow.f64 (cos.f64 eps) 2))) (pow.f64 x 4)) (+.f64 (*.f64 (+.f64 (*.f64 -1/360 (pow.f64 (cos.f64 eps) 2)) (*.f64 -1/24 (pow.f64 (cos.f64 eps) 2))) (pow.f64 x 6)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 x 2))) (pow.f64 (cos.f64 eps) 2))))","(*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (cos.f64 eps) 2))","(*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (cos.f64 eps) 2))","(*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (cos.f64 eps) 2))","(*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (cos.f64 eps) 2))","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (*.f64 x (sin.f64 eps)) (cos.f64 eps))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (pow.f64 x 3)) (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps)))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/24 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))))))) (pow.f64 x 5)) (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps))))","(+.f64 (*.f64 (-.f64 (*.f64 -1/5040 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 -1/720 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/24 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))))) (*.f64 1/24 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))))) (pow.f64 x 7)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/24 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))))))) (pow.f64 x 5)) (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps)))))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (pow.f64 eps 3)) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x)))","(+.f64 (*.f64 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 1/24 (/.f64 (sin.f64 x) (cos.f64 x))))) (pow.f64 eps 5)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (pow.f64 eps 3)) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x))))","(+.f64 (*.f64 (pow.f64 eps 7) (-.f64 (*.f64 -1/5040 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 1/24 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x))))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 1/24 (/.f64 (sin.f64 x) (cos.f64 x)))))) (*.f64 -1/720 (/.f64 (sin.f64 x) (cos.f64 x))))))) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 1/24 (/.f64 (sin.f64 x) (cos.f64 x))))) (pow.f64 eps 5)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (pow.f64 eps 3)) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x)))))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (sin.f64 eps) (cos.f64 eps))","(tan.f64 eps)","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) x) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (*.f64 (/.f64 x 1) (pow.f64 (tan.f64 eps) 2)) (tan.f64 eps))","(+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 (sin.f64 eps) (pow.f64 x 2))) (cos.f64 eps)) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (*.f64 (/.f64 (*.f64 (+.f64 1 (pow.f64 (tan.f64 eps) 2)) (*.f64 x x)) 1) (tan.f64 eps)) (+.f64 (*.f64 (/.f64 x 1) (pow.f64 (tan.f64 eps) 2)) (tan.f64 eps)))","(+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (+.f64 (*.f64 (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (sin.f64 eps)) (cos.f64 eps))) (pow.f64 x 3)) (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 (pow.f64 x 2) (sin.f64 eps))) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(+.f64 (*.f64 (/.f64 x 1) (pow.f64 (tan.f64 eps) 2)) (fma.f64 (+.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 eps) 2)) 1) (pow.f64 (tan.f64 eps) 2)) (*.f64 (/.f64 (*.f64 (tan.f64 eps) 1/3) 1) (tan.f64 eps))) (pow.f64 x 3) (/.f64 (*.f64 (sin.f64 eps) (+.f64 (*.f64 (+.f64 1 (pow.f64 (tan.f64 eps) 2)) (*.f64 x x)) 1)) (cos.f64 eps))))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(*.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)))","(+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (sin.f64 x))) (cos.f64 x)))","(fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (*.f64 (/.f64 (*.f64 (*.f64 eps eps) (+.f64 1 (pow.f64 (tan.f64 x) 2))) 1) (tan.f64 x)))","(+.f64 (*.f64 (+.f64 1/3 (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (/.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)))) (pow.f64 eps 3)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (sin.f64 x))) (cos.f64 x))))","(fma.f64 (+.f64 1/3 (+.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1) (pow.f64 (tan.f64 x) 2)) (*.f64 (/.f64 (*.f64 (tan.f64 x) 1/3) 1) (tan.f64 x)))) (pow.f64 eps 3) (fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (*.f64 (/.f64 (*.f64 (*.f64 eps eps) (+.f64 1 (pow.f64 (tan.f64 x) 2))) 1) (tan.f64 x))))","(+.f64 (*.f64 (+.f64 1/3 (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (/.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)))) (pow.f64 eps 3)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (+.f64 (*.f64 (pow.f64 eps 4) (+.f64 (/.f64 (*.f64 (+.f64 1/3 (+.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (/.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)) (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (sin.f64 x))) (cos.f64 x)))))","(fma.f64 (+.f64 1/3 (+.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1) (pow.f64 (tan.f64 x) 2)) (*.f64 (/.f64 (*.f64 (tan.f64 x) 1/3) 1) (tan.f64 x)))) (pow.f64 eps 3) (fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (pow.f64 eps 4) (+.f64 (*.f64 (/.f64 (+.f64 1/3 (+.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1) (pow.f64 (tan.f64 x) 2)) (*.f64 (/.f64 (*.f64 (tan.f64 x) 1/3) 1) (tan.f64 x)))) 1) (tan.f64 x)) (*.f64 (*.f64 (tan.f64 x) 1/3) (+.f64 1 (pow.f64 (tan.f64 x) 2)))) (*.f64 (/.f64 (*.f64 (*.f64 eps eps) (+.f64 1 (pow.f64 (tan.f64 x) 2))) 1) (tan.f64 x)))))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (tan.f64 x))","(pow.f64 (cos.f64 x) 2)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 eps 2) (pow.f64 (cos.f64 x) 2))) (pow.f64 (cos.f64 x) 2))","(-.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (*.f64 eps (cos.f64 x)) 2))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 eps 2) (pow.f64 (cos.f64 x) 2))) (+.f64 (*.f64 (pow.f64 eps 4) (+.f64 (*.f64 1/12 (pow.f64 (cos.f64 x) 2)) (*.f64 1/4 (pow.f64 (cos.f64 x) 2)))) (pow.f64 (cos.f64 x) 2)))","(-.f64 (fma.f64 (pow.f64 eps 4) (*.f64 (pow.f64 (cos.f64 x) 2) 1/3) (pow.f64 (cos.f64 x) 2)) (pow.f64 (*.f64 eps (cos.f64 x)) 2))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 eps 2) (pow.f64 (cos.f64 x) 2))) (+.f64 (*.f64 (pow.f64 eps 4) (+.f64 (*.f64 1/12 (pow.f64 (cos.f64 x) 2)) (*.f64 1/4 (pow.f64 (cos.f64 x) 2)))) (+.f64 (pow.f64 (cos.f64 x) 2) (*.f64 (+.f64 (*.f64 -1/360 (pow.f64 (cos.f64 x) 2)) (*.f64 -1/24 (pow.f64 (cos.f64 x) 2))) (pow.f64 eps 6)))))","(+.f64 (-.f64 (fma.f64 (pow.f64 eps 4) (*.f64 (pow.f64 (cos.f64 x) 2) 1/3) (pow.f64 (cos.f64 x) 2)) (pow.f64 (*.f64 eps (cos.f64 x)) 2)) (*.f64 (*.f64 (pow.f64 (cos.f64 x) 2) -2/45) (pow.f64 eps 6)))","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","(pow.f64 (cos.f64 eps) 2)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 x 2))) (pow.f64 (cos.f64 eps) 2))","(-.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (*.f64 (cos.f64 eps) x) 2))","(+.f64 (*.f64 (+.f64 (*.f64 1/12 (pow.f64 (cos.f64 eps) 2)) (*.f64 1/4 (pow.f64 (cos.f64 eps) 2))) (pow.f64 x 4)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 x 2))) (pow.f64 (cos.f64 eps) 2)))","(fma.f64 (*.f64 (pow.f64 (cos.f64 eps) 2) 1/3) (pow.f64 x 4) (-.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (*.f64 (cos.f64 eps) x) 2)))","(+.f64 (*.f64 (+.f64 (*.f64 1/12 (pow.f64 (cos.f64 eps) 2)) (*.f64 1/4 (pow.f64 (cos.f64 eps) 2))) (pow.f64 x 4)) (+.f64 (*.f64 (+.f64 (*.f64 -1/360 (pow.f64 (cos.f64 eps) 2)) (*.f64 -1/24 (pow.f64 (cos.f64 eps) 2))) (pow.f64 x 6)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 x 2))) (pow.f64 (cos.f64 eps) 2))))","(fma.f64 (*.f64 (pow.f64 (cos.f64 eps) 2) 1/3) (pow.f64 x 4) (fma.f64 (*.f64 (pow.f64 (cos.f64 eps) 2) -2/45) (pow.f64 x 6) (-.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (*.f64 (cos.f64 eps) x) 2))))","(*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (cos.f64 eps) 2))","(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","(*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (cos.f64 eps) 2))","(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","(*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (cos.f64 eps) 2))","(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","(*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (cos.f64 eps) 2))","(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","(*.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 (cos.f64 x) 2))","(pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)","(/.f64 (*.f64 x (sin.f64 eps)) (cos.f64 eps))","(*.f64 (/.f64 x 1) (tan.f64 eps))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (pow.f64 x 3)) (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps)))","(fma.f64 (*.f64 (tan.f64 eps) 1/3) (pow.f64 x 3) (*.f64 (/.f64 x 1) (tan.f64 eps)))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/24 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))))))) (pow.f64 x 5)) (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps))))","(fma.f64 (*.f64 (tan.f64 eps) 1/3) (pow.f64 x 3) (fma.f64 (+.f64 (*.f64 (tan.f64 eps) (-.f64 1/120 1/24)) (*.f64 1/2 (*.f64 (tan.f64 eps) 1/3))) (pow.f64 x 5) (*.f64 (/.f64 x 1) (tan.f64 eps))))","(+.f64 (*.f64 (-.f64 (*.f64 -1/5040 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 -1/720 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/24 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))))) (*.f64 1/24 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))))) (pow.f64 x 7)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/24 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))))))) (pow.f64 x 5)) (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps)))))","(fma.f64 (-.f64 (*.f64 (tan.f64 eps) (-.f64 -1/5040 -1/720)) (fma.f64 -1/2 (+.f64 (*.f64 (tan.f64 eps) (-.f64 1/120 1/24)) (*.f64 1/2 (*.f64 (tan.f64 eps) 1/3))) (*.f64 1/24 (*.f64 (tan.f64 eps) 1/3)))) (pow.f64 x 7) (fma.f64 (*.f64 (tan.f64 eps) 1/3) (pow.f64 x 3) (fma.f64 (+.f64 (*.f64 (tan.f64 eps) (-.f64 1/120 1/24)) (*.f64 1/2 (*.f64 (tan.f64 eps) 1/3))) (pow.f64 x 5) (*.f64 (/.f64 x 1) (tan.f64 eps)))))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x))","(*.f64 (/.f64 eps 1) (tan.f64 x))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (pow.f64 eps 3)) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x)))","(fma.f64 (*.f64 (tan.f64 x) 1/3) (pow.f64 eps 3) (*.f64 (/.f64 eps 1) (tan.f64 x)))","(+.f64 (*.f64 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 1/24 (/.f64 (sin.f64 x) (cos.f64 x))))) (pow.f64 eps 5)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (pow.f64 eps 3)) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x))))","(fma.f64 (-.f64 (*.f64 1/120 (tan.f64 x)) (fma.f64 -1/2 (*.f64 (tan.f64 x) 1/3) (*.f64 1/24 (tan.f64 x)))) (pow.f64 eps 5) (fma.f64 (*.f64 (tan.f64 x) 1/3) (pow.f64 eps 3) (*.f64 (/.f64 eps 1) (tan.f64 x))))","(+.f64 (*.f64 (pow.f64 eps 7) (-.f64 (*.f64 -1/5040 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 1/24 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x))))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 1/24 (/.f64 (sin.f64 x) (cos.f64 x)))))) (*.f64 -1/720 (/.f64 (sin.f64 x) (cos.f64 x))))))) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 -1/2 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 1/24 (/.f64 (sin.f64 x) (cos.f64 x))))) (pow.f64 eps 5)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 -1/2 (/.f64 (sin.f64 x) (cos.f64 x)))) (pow.f64 eps 3)) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x)))))","(fma.f64 (pow.f64 eps 7) (-.f64 (*.f64 -1/5040 (tan.f64 x)) (fma.f64 1/24 (*.f64 (tan.f64 x) 1/3) (fma.f64 -1/2 (-.f64 (*.f64 1/120 (tan.f64 x)) (fma.f64 -1/2 (*.f64 (tan.f64 x) 1/3) (*.f64 1/24 (tan.f64 x)))) (*.f64 -1/720 (tan.f64 x))))) (fma.f64 (-.f64 (*.f64 1/120 (tan.f64 x)) (fma.f64 -1/2 (*.f64 (tan.f64 x) 1/3) (*.f64 1/24 (tan.f64 x)))) (pow.f64 eps 5) (fma.f64 (*.f64 (tan.f64 x) 1/3) (pow.f64 eps 3) (*.f64 (/.f64 eps 1) (tan.f64 x)))))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (tan.f64 x) (tan.f64 eps))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (tan.f64 x) (tan.f64 eps))"]],"time":289.72705078125,"type":"simplify"},{"compiler":[[10589,3594]],"time":65.407958984375,"type":"eval"},{"alts":[["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 3) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","fresh",20.722010119479794],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (cos.f64 eps) 2))))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","fresh",20.649298728319234],["(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (cos.f64 x)))","fresh",20.81325794212142],["(fma.f64 (cbrt.f64 (/.f64 -1 (fma.f64 (tan.f64 eps) (tan.f64 x) -1))) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) 2))) (neg.f64 (tan.f64 x)))","fresh",20.742234076391927],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","fresh",20.662171384301654],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (cbrt.f64 (sin.f64 eps)) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 eps) 2)) (cos.f64 eps)))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","fresh",22.935746518389806],["(+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))","fresh",32.88811698114416],["(fma.f64 (+.f64 1/3 (+.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1) (pow.f64 (tan.f64 x) 2)) (*.f64 (/.f64 (*.f64 (tan.f64 x) 1/3) 1) (tan.f64 x)))) (pow.f64 eps 3) (fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (*.f64 (/.f64 (*.f64 (*.f64 eps eps) (+.f64 1 (pow.f64 (tan.f64 x) 2))) 1) (tan.f64 x))))","fresh",32.899542029986364],["(-.f64 (/.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cbrt.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (cbrt.f64 (pow.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) 2))) (tan.f64 x))","fresh",20.751624924661837],["(fma.f64 (cbrt.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)) 2)) (neg.f64 (tan.f64 x)))","fresh",23.372755531256196],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (pow.f64 (cos.f64 eps) (neg.f64 1/3)) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (cos.f64 eps) 2))))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","fresh",36.28021935557062],["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 eps))) (pow.f64 (cbrt.f64 (cos.f64 eps)) -2))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","fresh",20.80936407221738]],"compiler":[[22,14],[47,26],[31,17],[30,18],[47,25],[42,23],[79,49],[54,37],[30,17],[35,18],[54,30],[52,27]],"count":[[268,12]],"kept":[{"done":[0,0],"fresh":[12,7],"new":[255,5],"picked":[1,0]}],"min-error":[0.12925307905748792],"time":72.5458984375,"type":"prune"},{"accuracy":[0.3454745994254508],"baseline":[20.638733884301654],"branch":[["x",9.964510458163002,7],["eps",0.3454745994254508,3],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",6.747675114883656,3],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",6.747675114883656,3]],"compiler":[[3,2],[3,2],[9,6],[9,6],[1446,639]],"count":[[39,3]],"inputs":[["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (cos.f64 eps) 2))))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 (+.f64 1/3 (+.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1) (pow.f64 (tan.f64 x) 2)) (*.f64 (/.f64 (*.f64 (tan.f64 x) 1/3) 1) (tan.f64 x)))) (pow.f64 eps 3) (fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (*.f64 (/.f64 (*.f64 (*.f64 eps eps) (+.f64 1 (pow.f64 (tan.f64 x) 2))) 1) (tan.f64 x))))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (pow.f64 (cos.f64 eps) (neg.f64 1/3)) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (cos.f64 eps) 2))))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 eps))) (pow.f64 (cbrt.f64 (cos.f64 eps)) -2))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (pow.f64 (cos.f64 eps) (neg.f64 1/3)) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (cos.f64 eps) 2))))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (tan.f64 eps)) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 -1 (fma.f64 (tan.f64 eps) (tan.f64 x) -1))) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 eps) (tan.f64 x) -1) 2))) (neg.f64 (tan.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 eps))) (pow.f64 (cbrt.f64 (cos.f64 eps)) -2))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (cbrt.f64 (sin.f64 eps)) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 eps) 2)) (cos.f64 eps)))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 (cbrt.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 eps) (tan.f64 x) -1)) 2)) (neg.f64 (tan.f64 x)))","(fma.f64 (+.f64 1/3 (+.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1) (pow.f64 (tan.f64 x) 2)) (*.f64 (/.f64 (*.f64 (tan.f64 x) 1/3) 1) (tan.f64 x)))) (pow.f64 eps 3) (fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (*.f64 (/.f64 (*.f64 (*.f64 eps eps) (+.f64 1 (pow.f64 (tan.f64 x) 2))) 1) (tan.f64 x))))","(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 3) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","(fma.f64 (fma.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)) (tan.f64 x)) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (*.f64 (cos.f64 eps) (sin.f64 x))) (cos.f64 eps)) (cos.f64 x)) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","(+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))","(fma.f64 (+.f64 (tan.f64 x) (/.f64 (/.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 eps))) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)))) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","(fma.f64 (+.f64 (tan.f64 x) (/.f64 (*.f64 (cbrt.f64 (sin.f64 eps)) (cbrt.f64 (pow.f64 (tan.f64 eps) 2))) (cbrt.f64 (cos.f64 eps)))) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (tan.f64 x) (/.f64 (*.f64 (cbrt.f64 (sin.f64 eps)) (cbrt.f64 (pow.f64 (tan.f64 eps) 2))) (cbrt.f64 (cos.f64 eps))) -1)) (neg.f64 (tan.f64 x)))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (cos.f64 x)))","(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (cos.f64 x))) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","(*.f64 (+.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (/.f64 1 (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x))))","(-.f64 (/.f64 (/.f64 (sin.f64 (+.f64 x eps)) (cbrt.f64 (cos.f64 (+.f64 x eps)))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x eps)) 2))) (tan.f64 x))","(pow.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) 3)","(-.f64 (*.f64 (/.f64 1 (cbrt.f64 (cos.f64 (+.f64 x eps)))) (/.f64 (sin.f64 (+.f64 x eps)) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x eps)) 2)))) (tan.f64 x))","(/.f64 (fma.f64 (sin.f64 x) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)))) (neg.f64 (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x))))","(-.f64 (*.f64 (/.f64 1 (cos.f64 (+.f64 x eps))) (sin.f64 (+.f64 x eps))) (tan.f64 x))","(+.f64 (/.f64 (*.f64 (sin.f64 eps) (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (pow.f64 x 2))) (cos.f64 eps)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (+.f64 1/2 (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (pow.f64 (cos.f64 eps) 2)))))) (pow.f64 x 3))) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(/.f64 (/.f64 (+.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (cos.f64 x))","(-.f64 (fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (*.f64 (*.f64 (*.f64 eps eps) (sin.f64 x)) (+.f64 1 (pow.f64 (tan.f64 x) 2))) (cos.f64 x))) (*.f64 (pow.f64 eps 3) (+.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) 1/6 1/6) (fma.f64 -1/2 (+.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1) (pow.f64 (tan.f64 x) 2)))))))","(+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cbrt.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (cbrt.f64 (pow.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) 2))) (tan.f64 x))","(-.f64 (*.f64 (/.f64 (cbrt.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) 1) (/.f64 (cbrt.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) 2)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (tan.f64 x))","(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"link":["."],"name":["2tan (problem 3.3.2)"],"oracle":[57.194952920315814],"outputs":[["(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))"]],"time":155.5830078125,"times":[["x",66.343017578125],["eps",29.302978515625],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",19.126953125],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",20.2919921875]],"type":"regimes"},{"bstep":[[1.3839758794450668e-5,556910.3939491732,31.199951171875],[-0.000820236557523614,-2.6775802749050807e-8,32.487060546875]],"compiler":[[11,8],[3,2]],"method":["binary-search","binary-search"],"time":64.175048828125,"type":"bsearch"},{"compiler":[[165,85]],"inputs":[["(if (<=.f64 eps -7565346928269325/9223372036854775808) (-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x))) (if (<=.f64 eps 510596977046205/36893488147419103232) (+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))) (-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 eps -7565346928269325/9223372036854775808) (-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))) 1))) (/.f64 (sin.f64 x) (cos.f64 x))) (if (<=.f64 eps 510596977046205/36893488147419103232) (+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))) (-.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)))) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x)))) (/.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))))","(if (<=.f64 eps -7565346928269325/9223372036854775808) (-.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (tan.f64 x)) (if (<=.f64 eps 510596977046205/36893488147419103232) (fma.f64 (+.f64 (tan.f64 x) (pow.f64 (tan.f64 x) 3)) (*.f64 eps eps) (fma.f64 eps (+.f64 1 (pow.f64 (tan.f64 x) 2)) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (-.f64 (pow.f64 (tan.f64 x) 2) (*.f64 (fma.f64 (tan.f64 x) -1/3 (neg.f64 (pow.f64 (tan.f64 x) 3))) (tan.f64 x))))))) (-.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (tan.f64 x))))"]],"stop":[["fuel",1]],"time":18.967041015625,"type":"simplify"},{"time":0.007080078125,"type":"soundness"},{"compiler":[[165,85]],"remove-preprocessing":[[]],"time":37.721923828125,"type":"end"}]
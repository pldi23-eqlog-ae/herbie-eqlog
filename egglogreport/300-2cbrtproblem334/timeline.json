[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.447021484375,"type":"analyze"},{"outcomes":[["body",512,"valid",59.8623046875,1020],["body",1024,"valid",174.68212890625,2013],["body",256,"valid",159.930908203125,4995],["body",2048,"valid",26.91162109375,228]],"time":429.583984375,"type":"sample"},{"compiler":[[8,6]],"inputs":[["0"],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))"]],"symmetry":[[]],"time":51.616943359375,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))"]],"time":17.743896484375,"type":"simplify"},{"compiler":[[8,6]],"time":0.214111328125,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))","next",30.197137076704923]],"compiler":[[8,6],[8,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[30.197137076704923],"time":0.7470703125,"type":"prune"},{"compiler":[[19,12]],"locations":[["(cbrt.f64 (+.f64 x 1))",0.04296875,true],["(cbrt.f64 x)",0.09765625,true],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))",3.396311816542589,true]],"time":5.183837890625,"type":"localize"},{"count":[[3,7]],"series":[["(cbrt.f64 (+.f64 x 1))","x","-inf",0.22607421875],["(cbrt.f64 (+.f64 x 1))","x","inf",0.198974609375],["(cbrt.f64 (+.f64 x 1))","x","0",0.177001953125],["(cbrt.f64 x)","x","-inf",0.302978515625],["(cbrt.f64 x)","x","inf",0.253173828125],["(cbrt.f64 x)","x","0",0.26611328125],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))","x","-inf",0.734130859375],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))","x","inf",2.671875],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))","x","0",0.442138671875]],"time":5.380126953125,"type":"series"},{"count":[[3,106]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))","(cbrt.f64 x)","(cbrt.f64 (+.f64 x 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 0) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x 1) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 x 1) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (cbrt.f64 (+.f64 x 1)) 0) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (cbrt.f64 (neg.f64 (+.f64 x 1))) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (+.f64 x 1)) (/.f64 1 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (+.f64 x 1) x)) 1) (/.f64 (pow.f64 (cbrt.f64 (-.f64 (+.f64 x 1) x)) 2) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (/.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (/.f64 (-.f64 (+.f64 x 1) x) (pow.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (+.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 x x x))))) (-.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3) (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 x 1) x) (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) (-.f64 (+.f64 x 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) (/.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x 1) x) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (pow.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 x 1) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) x)) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) 1) (*.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 x 1) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (+.f64 x 1)) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3) (cbrt.f64 (-.f64 (+.f64 x 1) x))) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) 1) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (+.f64 x 1) x)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3)) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 (neg.f64 (+.f64 x 1))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (neg.f64 x))) (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 x 2/3))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) 1 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 x) 0) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 x) (*.f64 0 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 x 4))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) 0) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 (+.f64 x 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (+.f64 x 1)) (*.f64 0 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (+.f64 x 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 1)) (/.f64 1 (cbrt.f64 (fma.f64 x x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 1)) (cbrt.f64 (/.f64 1 (fma.f64 x x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 1)) (cbrt.f64 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 1)) 1) (cbrt.f64 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 1)) 1) (*.f64 (cbrt.f64 (fma.f64 x x (-.f64 1 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 1))) (neg.f64 (cbrt.f64 (fma.f64 x x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 (neg.f64 (pow.f64 x 3)) -1)) (cbrt.f64 (neg.f64 (fma.f64 x x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x 1) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (+.f64 x 1))))))"]],"rules":[["egg-rr",26],["egg-rr",19],["egg-rr",61]],"time":29.27587890625,"type":"rewrite"},{"count":[[113,114]],"inputs":[["1","(+.f64 1 (*.f64 1/3 x))","0","1","(+.f64 1 (*.f64 1/3 x))","(+.f64 (*.f64 -1/9 (pow.f64 x 2)) (+.f64 1 (*.f64 1/3 x)))","(+.f64 (*.f64 -1/9 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 5/81 (pow.f64 x 3)) (*.f64 1/3 x))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 1/3 x))","(fma.f64 x 1/3 1)","0","1","(+.f64 1 (*.f64 1/3 x))","(fma.f64 x 1/3 1)","(+.f64 (*.f64 -1/9 (pow.f64 x 2)) (+.f64 1 (*.f64 1/3 x)))","(+.f64 1 (*.f64 x (+.f64 (*.f64 x -1/9) 1/3)))","(+.f64 (*.f64 -1/9 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 5/81 (pow.f64 x 3)) (*.f64 1/3 x))))","(+.f64 (+.f64 1 (*.f64 5/81 (pow.f64 x 3))) (*.f64 x (+.f64 (*.f64 x -1/9) 1/3)))"]],"time":42.1591796875,"type":"simplify"},{"compiler":[[1741,1159]],"time":23.348876953125,"type":"eval"},{"alts":[["(-.f64 (/.f64 (+.f64 x 1) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))","fresh",31.295304815381915],["1","fresh",32.61266442759412],["(-.f64 (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 x 4))) 2))))","fresh",31.19698317818401],["(fma.f64 (cbrt.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 x 2/3))) (cbrt.f64 (+.f64 x 1)))","fresh",47.077827478278856],["(/.f64 (-.f64 (+.f64 x 1) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))","fresh",30.95654169184793],["(/.f64 (/.f64 (-.f64 (+.f64 x 1) x) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (pow.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) 2))","fresh",30.99560419184793],["(-.f64 (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 4) 2))) (cbrt.f64 x))","fresh",30.414426359574392],["(-.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 3))","fresh",30.329029942841746],["(pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) 3)","fresh",30.248582112294677],["(pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1/3)","next",30.197137140559107]],"compiler":[[38,25],[2,2],[19,16],[14,11],[22,15],[42,29],[21,18],[11,9],[11,9],[12,10],[38,25],[2,2],[19,16],[14,11],[22,15],[42,29],[21,18],[11,9],[11,9],[12,10]],"count":[[115,10]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[114,10],"picked":[1,0]}],"min-error":[29.178814152907627],"time":28.467041015625,"type":"prune"},{"compiler":[[41,28]],"locations":[["(pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3)",0.07650375976844201,true],["(cbrt.f64 x)",0.09765625,false],["(pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1/3)",0.23620534911794946,true],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))",3.396311816542589,false]],"time":11.576904296875,"type":"localize"},{"count":[[2,4]],"series":[["(pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3)","x","-inf",0.773193359375],["(pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3)","x","inf",4.0390625],["(pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3)","x","0",0.276123046875],["(pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1/3)","x","-inf",2.453125],["(pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1/3)","x","inf",10.6240234375],["(pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1/3)","x","0",0.677001953125]],"time":18.943115234375,"type":"series"},{"count":[[2,130]],"inputs":[["(pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1/3)","(pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 0) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x 1) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 x 1) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (cbrt.f64 (+.f64 x 1)) 0) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (cbrt.f64 (neg.f64 (+.f64 x 1))) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (+.f64 x 1)) (/.f64 1 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (/.f64 (-.f64 (+.f64 x 1) x) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (+.f64 x 1) x)) 1) (/.f64 (cbrt.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 2)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (/.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (+.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 x x x))))) (-.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) 4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3) (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 x 1) x) (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) (-.f64 (+.f64 x 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) (/.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (+.f64 2 1/3))) (cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x 1) x) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 x 1) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) x)) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) 1) (*.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 x 1) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (+.f64 x 1)) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3) (cbrt.f64 (-.f64 (+.f64 x 1) x))) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) 1) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (+.f64 x 1) x)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3)) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (-.f64 (+.f64 x 1) x))) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (neg.f64 x))) (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 x 2/3))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 (neg.f64 (+.f64 x 1))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) 1 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (+.f64 x 1))) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (cbrt.f64 (+.f64 x 1)))) (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 0) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (cbrt.f64 (+.f64 x 1))) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) (*.f64 0 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (+.f64 x 1))) 1) (*.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 3) (/.f64 1 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (+.f64 x 1) x) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (/.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (/.f64 (-.f64 (+.f64 x 1) x) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 3) (pow.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (pow.f64 (pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (+.f64 2 1/3)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) 4) 2) (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (-.f64 (+.f64 x 1) x)) (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 x 1) x) (/.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (-.f64 (+.f64 x 1) x) 2)) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 2) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (-.f64 (+.f64 x 1) x)) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 x (+.f64 x 1)) 3) (pow.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (+.f64 x 1) x))) (*.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) (pow.f64 (-.f64 (+.f64 x 1) x) 2)) (*.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (+.f64 x 1) x) (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (+.f64 x 1) x))) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (+.f64 x 1) x)) (-.f64 (+.f64 x 1) x)) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (+.f64 x 1) x)) (-.f64 x (+.f64 x 1))) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 2) (-.f64 x (+.f64 x 1))) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 3) 1) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 3)) (neg.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (-.f64 (+.f64 x 1) x)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 3) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (-.f64 x (+.f64 x 1))) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (+.f64 x 1) x))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (-.f64 (+.f64 x 1) x)) 1) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 3) 1) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (+.f64 x 1) x)) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (+.f64 x 1) x)) (pow.f64 (pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) 4) 2)) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (-.f64 (+.f64 x 1) x)) 1) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (-.f64 (+.f64 x 1) x))) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (+.f64 x 1)) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))))))))"]],"rules":[["egg-rr",66],["egg-rr",64]],"time":33.5439453125,"type":"rewrite"},{"count":[[134,134]],"inputs":[["1","(+.f64 1 (*.f64 1/3 x))","1","(+.f64 1 x)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 1/3 x))","(fma.f64 x 1/3 1)","1","(+.f64 1 x)"]],"time":26.116943359375,"type":"simplify"},{"compiler":[[4704,3274]],"time":59.674072265625,"type":"eval"},{"alts":[["(pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x)))) 1/3)","next",30.177968772430567],["(-.f64 (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 4) 2))) (cbrt.f64 x))","fresh",30.414426359574392],["(pow.f64 (+.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (+.f64 x 1)))) 1/3)","fresh",30.192315002891295],["(-.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 3))","fresh",30.329029942841746],["(/.f64 (/.f64 (-.f64 (+.f64 x 1) x) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2)))","fresh",30.97607294184793],["(-.f64 (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 x 4))) 2))))","fresh",31.19698317818401],["(fma.f64 (cbrt.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 x 2/3))) (cbrt.f64 (+.f64 x 1)))","fresh",47.077827478278856],["(/.f64 (-.f64 (+.f64 x 1) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))","fresh",30.95654169184793],["(*.f64 (cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (+.f64 2 1/3))) (cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3)))","fresh",30.212762028795417],["1","fresh",32.61266442759412]],"compiler":[[30,23],[21,18],[31,24],[11,9],[42,29],[19,16],[14,11],[22,15],[24,19],[2,2],[30,23],[21,18],[31,24],[11,9],[42,29],[19,16],[14,11],[22,15],[24,19],[2,2]],"count":[[228,10]],"kept":[{"done":[0,0],"fresh":[9,5],"new":[218,5],"picked":[1,0]}],"min-error":[29.164826693412472],"time":73.680908203125,"type":"prune"},{"compiler":[[104,65]],"locations":[["(cbrt.f64 (neg.f64 x))",0.09765625,true],["(pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x)))) 1/3)",0.23594901200631938,true],["(fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))))",3.3649606763249547,true],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))",3.396311816542589,false]],"time":25.03515625,"type":"localize"},{"count":[[3,4]],"series":[["(cbrt.f64 (neg.f64 x))","x","-inf",0.177001953125],["(cbrt.f64 (neg.f64 x))","x","inf",0.282958984375],["(cbrt.f64 (neg.f64 x))","x","0",0.2939453125],["(pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x)))) 1/3)","x","-inf",3.02001953125],["(pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x)))) 1/3)","x","inf",78.388916015625],["(pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x)))) 1/3)","x","0",0.531982421875],["(fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))))","x","-inf",1.407958984375],["(fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))))","x","inf",6.2578125],["(fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))))","x","0",1.72998046875]],"time":92.261962890625,"type":"series"},{"count":[[3,170]],"inputs":[["(fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))))","(pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x)))) 1/3)","(cbrt.f64 (neg.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 0) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) (*.f64 0 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3) 4) (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 3) (/.f64 1 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 3) (pow.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 4)) (pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (-.f64 (+.f64 x 1) x) 2)) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 2) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 x (+.f64 x 1)) 3) (pow.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 3) 1) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (+.f64 x 1) x)) (-.f64 (+.f64 x 1) x)) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (+.f64 x 1) x)) (-.f64 x (+.f64 x 1))) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 2) (-.f64 x (+.f64 x 1))) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (+.f64 x 1) x) (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (+.f64 x 1) x))) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (+.f64 x 1) x))) (*.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) (pow.f64 (-.f64 (+.f64 x 1) x) 2)) (*.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 3)) (neg.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 3) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (-.f64 (+.f64 x 1) x)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (-.f64 x (+.f64 x 1))) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (+.f64 x 1) x))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (+.f64 x 1) x)) (pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3) 4)) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (+.f64 x 1) x) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 3) 1) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (+.f64 x 1) x)) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3)) (cbrt.f64 (*.f64 (pow.f64 (+.f64 x 1) 2/3) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 4))) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3)) (cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 4)) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (+.f64 x 1)) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 4) (pow.f64 x 2/3))) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3) (cbrt.f64 (cbrt.f64 (neg.f64 x)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3)) (cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 4)) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3) (cbrt.f64 (cbrt.f64 (neg.f64 x)))) (cbrt.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 4) (pow.f64 x 2/3))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (neg.f64 x))) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x)) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (cbrt.f64 (neg.f64 x)))) (cbrt.f64 (pow.f64 x 2/3)) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3) (cbrt.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 4) (neg.f64 x))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) 1 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))) 1 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 0) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x 1) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 x 1) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (cbrt.f64 (+.f64 x 1)) 0) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3) (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (cbrt.f64 (neg.f64 (+.f64 x 1))) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (+.f64 x 1)) (/.f64 1 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (+.f64 x 1) x)) 1) (/.f64 (cbrt.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 2)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (/.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (/.f64 (-.f64 (+.f64 x 1) x) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (-.f64 (cbrt.f64 (pow.f64 x 2/3)) (*.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (cbrt.f64 (neg.f64 x)))))) (+.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (cbrt.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 x 2/3)) (-.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 x))) (cbrt.f64 (cbrt.f64 (+.f64 x 1)))))) (+.f64 (cbrt.f64 (cbrt.f64 (neg.f64 x))) (cbrt.f64 (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (+.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 x x x))))) (-.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 x 1) x) (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) (-.f64 (+.f64 x 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) (/.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))) (cbrt.f64 (pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x 1) x) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 x 1) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) x)) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) 1) (*.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 x 1) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (+.f64 x 1)) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3) (cbrt.f64 (-.f64 (+.f64 x 1) x))) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (+.f64 x 1) x)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3)) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) 1) (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 (neg.f64 (+.f64 x 1))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (neg.f64 x))) (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 (neg.f64 x))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 x 2/3))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) 1 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) 1 (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 x)) (*.f64 (cbrt.f64 (neg.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (neg.f64 x)) 0) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 x)) (*.f64 0 (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (neg.f64 x))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 x 2/3))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 0 (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (cbrt.f64 (pow.f64 x 2/3)) (*.f64 0 (cbrt.f64 (cbrt.f64 x))))) (cbrt.f64 (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (neg.f64 (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (neg.f64 x)))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (cbrt.f64 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (cbrt.f64 (neg.f64 x)))))))"]],"rules":[["egg-rr",32],["egg-rr",66],["egg-rr",72]],"time":39.0849609375,"type":"rewrite"},{"count":[[174,174]],"inputs":[["1","(+.f64 1 x)","1","(+.f64 1 (*.f64 1/3 x))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 x)","1","(+.f64 1 (*.f64 1/3 x))","(fma.f64 1/3 x 1)"]],"time":26.6650390625,"type":"simplify"},{"compiler":[[9429,6343]],"time":108.626953125,"type":"eval"},{"alts":[["(pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x)))) 1/3)","done",30.177968772430567],["(-.f64 (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 4) 2))) (cbrt.f64 x))","fresh",30.414426359574392],["(fma.f64 (cbrt.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 x 2/3))) (cbrt.f64 (+.f64 x 1)))","fresh",47.077827478278856],["(pow.f64 (fma.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x)) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))) 1/3)","fresh",30.198937027230883],["(*.f64 (cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (+.f64 2 1/3))) (cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3)))","fresh",30.212762028795417],["(pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 x))) 3))) 1/3)","fresh",30.21057289044506],["(/.f64 (-.f64 (+.f64 x 1) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))","fresh",30.95654169184793],["1","fresh",32.61266442759412],["(-.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 3))","fresh",30.329029942841746],["(pow.f64 (fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))) 1/3)","next",30.175929147524492],["(/.f64 (/.f64 (-.f64 (+.f64 x 1) x) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2)))","fresh",30.97607294184793],["(-.f64 (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 x 4))) 2))))","fresh",31.19698317818401]],"compiler":[[30,23],[21,18],[14,11],[30,23],[24,19],[33,26],[22,15],[2,2],[11,9],[35,24],[42,29],[19,16],[21,18],[14,11],[30,23],[24,19],[33,26],[22,15],[2,2],[11,9],[35,24],[42,29],[19,16]],"count":[[314,12]],"kept":[{"done":[0,0],"fresh":[9,5],"new":[304,6],"picked":[1,1]}],"min-error":[29.150559762948276],"time":129.257080078125,"type":"prune"},{"compiler":[[127,81]],"locations":[["(pow.f64 (fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))) 1/3)",0.23594901200631938,true],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))",3.396311816542589,false],["(-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))",3.396311816542589,true],["(fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))",3.417519786436403,true]],"time":29.760009765625,"type":"localize"},{"count":[[3,9]],"series":[["(pow.f64 (fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))) 1/3)","x","-inf",4.35595703125],["(pow.f64 (fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))) 1/3)","x","inf",199.324951171875],["(pow.f64 (fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))) 1/3)","x","0",0.510986328125],["(-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))","x","-inf",0.35400390625],["(-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))","x","inf",0.625],["(-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))","x","0",0.232177734375],["(fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))","x","-inf",3.06298828125],["(fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))","x","inf",10.370849609375],["(fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))","x","0",0.549072265625]],"time":219.597900390625,"type":"series"},{"count":[[3,190]],"inputs":[["(fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))","(-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))","(pow.f64 (fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))) 1/3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x)) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 0) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (*.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) (*.f64 0 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (neg.f64 (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 3) (/.f64 1 (pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 3) (pow.f64 (/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (*.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (-.f64 x (+.f64 x 1))) (neg.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (-.f64 (+.f64 x 1) x) 2)) (pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (neg.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 2) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 x (+.f64 x 1)) 3) (pow.f64 (neg.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (+.f64 x 1) x) (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (+.f64 x 1) x))) (pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (+.f64 x 1) x))) (*.f64 (neg.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))) (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) (pow.f64 (-.f64 (+.f64 x 1) x) 2)) (*.f64 (neg.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))) (pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (+.f64 x 1) x)) (-.f64 (+.f64 x 1) x)) (pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (+.f64 x 1) x)) (-.f64 x (+.f64 x 1))) (*.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)) (neg.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 2) (-.f64 x (+.f64 x 1))) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)) 2) (neg.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 3)) (neg.f64 (pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 3) (pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (-.f64 (+.f64 x 1) x)) (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (+.f64 x 1) x))) (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (+.f64 x 1) x) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (+.f64 x 1) x)) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (*.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (cbrt.f64 (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))) (pow.f64 (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 2/3) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x))) (cbrt.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 4) (pow.f64 x 2/3))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3)) (pow.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) 2/3) (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 (+.f64 x 1)) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (+.f64 x 1)) (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3) (cbrt.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 4) (+.f64 x 1))) (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3)) (cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 4)) (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))) (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) 2/3) (*.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3)) (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x)) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (cbrt.f64 x)) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) 1 (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)) (cbrt.f64 x)) 1 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 x) (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 (+.f64 x 1))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 0 (/.f64 (+.f64 x 1) (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))) (/.f64 x (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 0) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (*.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (*.f64 0 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (cbrt.f64 x) 0) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 (neg.f64 (+.f64 x 1))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))) (/.f64 (+.f64 x 1) (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (+.f64 x 1)) (/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3) (*.f64 0 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (cbrt.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 x 2/3)) (+.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 x x x))))) (-.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (neg.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3) (cbrt.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3)) (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 x 1) x) (neg.f64 (/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (+.f64 x 1)) (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 x 1) x) (neg.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (+.f64 x 1) x)) (neg.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3))) (cbrt.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) 1) (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (+.f64 x 1)) 1) (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (+.f64 x 1)) (cbrt.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 x) (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) 1 (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (neg.f64 (+.f64 x 1))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 0) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x 1) (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))) (neg.f64 (/.f64 x (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 x 1) (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))) (/.f64 x (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (cbrt.f64 (+.f64 x 1)) 0) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3) (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 x 1) x) (/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (neg.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))) (-.f64 (+.f64 x 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3)) (cbrt.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (+.f64 x 1)) (/.f64 1 (neg.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)) (/.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)) (cbrt.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))) (/.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))) (/.f64 (-.f64 (+.f64 x 1) x) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (+.f64 x 1) x)) 1) (/.f64 (cbrt.f64 (pow.f64 (-.f64 (+.f64 x 1) x) 2)) (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3) (*.f64 0 (cbrt.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (+.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 x x x))))) (-.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 4))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 x 1) x) (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (+.f64 x 1)) (neg.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3) (cbrt.f64 (-.f64 (+.f64 x 1) x))) (cbrt.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) 1) (neg.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (+.f64 x 1) x)) (pow.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2/3)) (cbrt.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x 1) x) (cbrt.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 x 1) (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))) (*.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)) x)) (pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) 1) (*.f64 (neg.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 (neg.f64 (+.f64 x 1))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (neg.f64 x))) (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 x 2/3))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) 1 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))))"]],"rules":[["egg-rr",62],["egg-rr",54],["egg-rr",74]],"time":42.655029296875,"type":"rewrite"},{"count":[[199,198]],"inputs":[["1","(+.f64 1 x)","0","0","-1","(-.f64 (*.f64 -1/3 x) 1)","0","1","(+.f64 1 (*.f64 1/3 x))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 x)","0","0","-1","(-.f64 (*.f64 -1/3 x) 1)","(fma.f64 -1/3 x -1)","0","1","(+.f64 1 (*.f64 1/3 x))","(fma.f64 x 1/3 1)"]],"time":42.074951171875,"type":"simplify"},{"compiler":[[11446,7714]],"time":126.635986328125,"type":"eval"},{"alts":[["(pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x)))) 1/3)","done",30.177968772430567],["(-.f64 (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 4) 2))) (cbrt.f64 x))","fresh",30.414426359574392],["(/.f64 (-.f64 (+.f64 x 1) x) (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))","fresh",46.97054545161639],["(-.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 3))","fresh",30.329029942841746],["(pow.f64 (fma.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x)) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))) 1/3)","fresh",30.198937027230883],["(*.f64 (cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (+.f64 2 1/3))) (cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3)))","fresh",30.212762028795417],["(pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 x))) 3))) 1/3)","fresh",30.21057289044506],["(fma.f64 (cbrt.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 x 2/3))) (cbrt.f64 (+.f64 x 1)))","fresh",47.077827478278856],["(pow.f64 (fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) 3) 2))) 1/3)","fresh",30.25671621033621],["1","fresh",32.61266442759412],["(/.f64 (/.f64 (-.f64 (+.f64 x 1) x) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2)))","fresh",30.97607294184793],["(-.f64 (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 x 4))) 2))))","fresh",31.19698317818401]],"compiler":[[30,23],[21,18],[22,16],[11,9],[30,23],[24,19],[33,26],[14,11],[38,27],[2,2],[42,29],[19,16]],"count":[[340,12]],"kept":[{"done":[1,1],"fresh":[10,8],"new":[328,3],"picked":[1,0]}],"min-error":[29.148274753179834],"time":329.31298828125,"type":"prune"},{"accuracy":[30.175929147524492],"baseline":[30.175929147524492],"branch":[["x",30.1759291475245,1],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))",30.175929147524492,1],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))",30.175929147524492,1]],"compiler":[[2,1],[8,6],[8,6],[555,373]],"count":[[25,1]],"inputs":[["(/.f64 (-.f64 (+.f64 x 1) x) (fma.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 2/3)))","(fma.f64 (cbrt.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 x 2/3))) (cbrt.f64 (+.f64 x 1)))","(pow.f64 (fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) 3) 2))) 1/3)","(fma.f64 (cbrt.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 x 2/3))) (cbrt.f64 (+.f64 x 1)))","(pow.f64 (fma.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x)) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))) 1/3)","(pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 x))) 3))) 1/3)","(/.f64 (-.f64 (+.f64 x 1) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))","(pow.f64 (fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))) 1/3)","(/.f64 (/.f64 (-.f64 (+.f64 x 1) x) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2)))","(pow.f64 (fma.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x)))) 1/3)","(pow.f64 (+.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (neg.f64 x))) (*.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2) (cbrt.f64 (+.f64 x 1)))) 1/3)","(/.f64 (/.f64 (-.f64 (+.f64 x 1) x) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)) 2)))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (+.f64 2 1/3))) (cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2/3)))","1","(-.f64 (/.f64 (+.f64 x 1) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) (/.f64 x (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))))","1","(-.f64 (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 x 4))) 2))))","(fma.f64 (cbrt.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 x 2/3))) (cbrt.f64 (+.f64 x 1)))","(/.f64 (-.f64 (+.f64 x 1) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))","(/.f64 (/.f64 (-.f64 (+.f64 x 1) x) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3)))) (pow.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (+.f64 x 1) 2/3))) 2))","(-.f64 (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 4) 2))) (cbrt.f64 x))","(-.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 3))","(pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) 3)","(pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1/3)","(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))"]],"link":["."],"name":["2cbrt (problem 3.3.4)"],"oracle":[49.30498914694754],"outputs":[["(pow.f64 (fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))) 1/3)"]],"time":22.779052734375,"times":[["x",7.93017578125],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))",2.7080078125],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))",2.759033203125]],"type":"regimes"},{"compiler":[[35,24]],"inputs":[["(pow.f64 (fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))) 1/3)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (fma.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))) 1/3)","(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))"]],"stop":[["fuel",1]],"time":21.1240234375,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[35,24]],"remove-preprocessing":[[]],"time":15.47216796875,"type":"end"}]
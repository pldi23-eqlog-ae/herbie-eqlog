[{"compiler":[[14,9]],"method":["search"],"sampling":[[12,0.4936581836082041,0.08390237903222442,0.42243943735957146],[11,0.4721947843208909,0.12097552325576544,0.40682969242334366],[10,0.42926798574626446,0.16390232183039188,0.40682969242334366],[9,0.39024362340569496,0.23414617404341698,0.37561020255088806],[8,0.31219489872455597,0.31219489872455597,0.37561020255088806],[7,0.24975591897964478,0.43707285821437836,0.31317122280597687],[6,0.24975591897964478,0.6243897974491119,0.1258542835712433],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":26.14990234375,"type":"analyze"},{"outcomes":[["body",256,"invalid",9.785888671875,253],["body",256,"valid",317.25927734375,8256]],"time":334.97802734375,"type":"sample"},{"compiler":[[13,8]],"inputs":[["0","1"],["(+.f64 (+.f64 (*.f64 x 2) (*.f64 x x)) (*.f64 y y))","(+.f64 (+.f64 (*.f64 y 2) (*.f64 y y)) (*.f64 x x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 (+.f64 (*.f64 x 2) (*.f64 x x)) (*.f64 y y))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(+.f64 (+.f64 (*.f64 y 2) (*.f64 y y)) (*.f64 x x))","(fma.f64 x x (*.f64 y (+.f64 2 y)))"]],"symmetry":[[]],"time":58.490966796875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (+.f64 (*.f64 x 2) (*.f64 x x)) (*.f64 y y))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (*.f64 x 2) (*.f64 x x)) (*.f64 y y))","(fma.f64 x (+.f64 2 x) (*.f64 y y))"]],"time":18.069091796875,"type":"simplify"},{"compiler":[[21,11]],"time":0.35302734375,"type":"eval"},{"alts":[["(fma.f64 x (+.f64 2 x) (*.f64 y y))","next",0.01171875],["(+.f64 (+.f64 (*.f64 x 2) (*.f64 x x)) (*.f64 y y))","fresh",0.029628759768442016]],"compiler":[[10,6],[13,8],[10,6],[13,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0078125],"time":1.23486328125,"type":"prune"},{"compiler":[[19,9]],"locations":[["(fma.f64 x (+.f64 2 x) (*.f64 y y))",0.01171875,true]],"time":5.275146484375,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 x (+.f64 2 x) (*.f64 y y))","y","-inf",0.2001953125],["(fma.f64 x (+.f64 2 x) (*.f64 y y))","y","inf",0.28515625],["(fma.f64 x (+.f64 2 x) (*.f64 y y))","y","0",0.3408203125],["(fma.f64 x (+.f64 2 x) (*.f64 y y))","x","-inf",0.34814453125],["(fma.f64 x (+.f64 2 x) (*.f64 y y))","x","inf",0.281005859375],["(fma.f64 x (+.f64 2 x) (*.f64 y y))","x","0",0.390869140625]],"time":1.930908203125,"type":"series"},{"count":[[1,37]],"inputs":[["(fma.f64 x (+.f64 2 x) (*.f64 y y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y y) (*.f64 x x)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x x) (+.f64 (*.f64 x x) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (+.f64 2 x) (*.f64 y y)) 0) (fma.f64 x (+.f64 2 x) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (+.f64 2 x) (*.f64 y y)) (*.f64 (fma.f64 x (+.f64 2 x) (*.f64 y y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (+.f64 2 x) (*.f64 y y))) (fma.f64 x (+.f64 2 x) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (+.f64 2 x) (*.f64 y y)) (*.f64 0 (fma.f64 x (+.f64 2 x) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (*.f64 x (+.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y y) (+.f64 x x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (+.f64 (+.f64 x x) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (+.f64 2 x) (*.f64 y y))) (pow.f64 (fma.f64 x (+.f64 2 x) (*.f64 y y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (+.f64 2 x) (*.f64 y y)) 2/3) (cbrt.f64 (fma.f64 x (+.f64 2 x) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 x (+.f64 2 x) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x (+.f64 2 x) (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (+.f64 2 x) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (+.f64 2 x) (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (+.f64 2 x) (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 2 x) (*.f64 y y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (+.f64 2 x) (*.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (+.f64 2 x) (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 x (+.f64 2 x) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (+.f64 2 x) (*.f64 y y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 2 x) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y y (*.f64 x (+.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 4/3) (pow.f64 y 2/3) (*.f64 x (+.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 2/3) (pow.f64 y 4/3) (*.f64 x (+.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (neg.f64 y) (*.f64 x (+.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (*.f64 x (+.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (+.f64 2 x))) (pow.f64 (+.f64 2 x) 2/3) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (+.f64 2 x))) (cbrt.f64 (pow.f64 (*.f64 x (+.f64 2 x)) 2)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 2 x) x (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (+.f64 2 x)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 y y)) (*.f64 x (+.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y y) (*.f64 x (+.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) 1 (*.f64 x (+.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (+.f64 2 x)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (+.f64 2 x)) 1 (*.f64 y y))))))"]],"rules":[["egg-rr",37]],"time":21.589111328125,"type":"rewrite"},{"count":[[61,48]],"inputs":[["(pow.f64 y 2)","(+.f64 (*.f64 2 x) (pow.f64 y 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(*.f64 (+.f64 2 x) x)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(pow.f64 y 2)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(pow.f64 y 2)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 x) (pow.f64 y 2))","(fma.f64 y y (+.f64 x x))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 y y (*.f64 (+.f64 2 x) x))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 y y (*.f64 (+.f64 2 x) x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 (+.f64 2 x) x)","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 y y (*.f64 (+.f64 2 x) x))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 y y (*.f64 (+.f64 2 x) x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 (+.f64 2 x) x)","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 y y (*.f64 (+.f64 2 x) x))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 y y (*.f64 (+.f64 2 x) x))","(*.f64 (+.f64 2 x) x)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(fma.f64 y y (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(fma.f64 y y (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(fma.f64 y y (*.f64 (+.f64 2 x) x))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(fma.f64 y y (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(fma.f64 y y (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(fma.f64 y y (*.f64 (+.f64 2 x) x))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(fma.f64 y y (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(fma.f64 y y (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(fma.f64 y y (*.f64 (+.f64 2 x) x))"]],"time":85.905029296875,"type":"simplify"},{"compiler":[[518,260]],"time":6.6328125,"type":"eval"},{"alts":[["(fma.f64 y y (*.f64 (+.f64 2 x) x))","next",0.01171875],["(fma.f64 x (+.f64 2 x) (*.f64 y y))","done",0.01171875],["(+.f64 (+.f64 (*.f64 x 2) (*.f64 x x)) (*.f64 y y))","fresh",0.029628759768442016]],"compiler":[[10,6],[10,6],[13,8],[10,6],[13,8]],"count":[[50,3]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[48,1],"picked":[1,1]}],"min-error":[0],"time":8.695068359375,"type":"prune"},{"compiler":[[21,12]],"locations":[["(fma.f64 y y (*.f64 (+.f64 2 x) x))",0.0078125,true],["(*.f64 (+.f64 2 x) x)",0.0078125,true]],"time":5.1630859375,"type":"localize"},{"count":[[2,36]],"series":[["(fma.f64 y y (*.f64 (+.f64 2 x) x))","x","-inf",0.159912109375],["(fma.f64 y y (*.f64 (+.f64 2 x) x))","x","inf",0.159912109375],["(fma.f64 y y (*.f64 (+.f64 2 x) x))","x","0",0.18603515625],["(fma.f64 y y (*.f64 (+.f64 2 x) x))","y","-inf",0.3291015625],["(fma.f64 y y (*.f64 (+.f64 2 x) x))","y","inf",0.2578125],["(fma.f64 y y (*.f64 (+.f64 2 x) x))","y","0",0.31689453125],["(*.f64 (+.f64 2 x) x)","x","-inf",0.302978515625],["(*.f64 (+.f64 2 x) x)","x","inf",0.27001953125],["(*.f64 (+.f64 2 x) x)","x","0",0.3671875]],"time":2.454833984375,"type":"series"},{"count":[[2,93]],"inputs":[["(*.f64 (+.f64 2 x) x)","(fma.f64 y y (*.f64 (+.f64 2 x) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 2 x) x) 0) (*.f64 (+.f64 2 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 2 x) x) (*.f64 (*.f64 (+.f64 2 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 2 x) x)) (*.f64 (+.f64 2 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 2 x) x) (*.f64 0 (*.f64 (+.f64 2 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 2 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 2 x) x)) (pow.f64 (*.f64 (+.f64 2 x) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 2 x) x) 2/3) (cbrt.f64 (*.f64 (+.f64 2 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (+.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 2 x)) (*.f64 (pow.f64 (+.f64 2 x) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 2 x) 2/3) x) (cbrt.f64 (+.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (+.f64 2 x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (fma.f64 x (+.f64 x -2) 4))) (/.f64 (+.f64 8 (pow.f64 x 3)) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 x -2) 4)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 8 (pow.f64 x 3)) (cbrt.f64 (fma.f64 x (+.f64 x -2) 4))) (/.f64 x (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 x -2) 4)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 8 (pow.f64 x 3)) 1) (/.f64 x (fma.f64 x (+.f64 x -2) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 2 x) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (+.f64 2 x))) (pow.f64 (+.f64 2 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 2 x) 2/3) (*.f64 x (cbrt.f64 (+.f64 2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (+.f64 2 x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (+.f64 (cbrt.f64 (*.f64 8 x)) (pow.f64 x 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (+.f64 (pow.f64 x 4/3) (cbrt.f64 (*.f64 8 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 8 (pow.f64 x 3))) (/.f64 1 (fma.f64 x (+.f64 x -2) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 2 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 2 x) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 2 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 2 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (+.f64 8 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x (+.f64 x -2) 4))) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 x -2) 4)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 8 (pow.f64 x 3))) (fma.f64 x (+.f64 x -2) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 -8 (neg.f64 (pow.f64 x 3)))) (+.f64 (*.f64 x (-.f64 2 x)) -4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (+.f64 8 (pow.f64 x 3))) 1) (fma.f64 x (+.f64 x -2) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 8 (pow.f64 x 3))) (*.f64 (pow.f64 (+.f64 2 x) 2/3) x)) (cbrt.f64 (fma.f64 x (+.f64 x -2) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -8 (neg.f64 (pow.f64 x 3))) x) (+.f64 (*.f64 x (-.f64 2 x)) -4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (+.f64 8 (pow.f64 x 3))) 1) (fma.f64 x (+.f64 x -2) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (+.f64 8 (pow.f64 x 3)))) (+.f64 (*.f64 x (-.f64 2 x)) -4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 2 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 2 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 2 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 2 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 2 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 2 x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 5) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (pow.f64 x 4/3) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 4/3) (pow.f64 x 2/3) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x x)) (cbrt.f64 (*.f64 4 (*.f64 x x))) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 2) x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 8 x)) (pow.f64 x 2/3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 x (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 2 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x x) (*.f64 x x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y y) (*.f64 x x)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x x) (+.f64 (*.f64 x x) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y y (*.f64 (+.f64 2 x) x)) 0) (fma.f64 y y (*.f64 (+.f64 2 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y y (*.f64 (+.f64 2 x) x)) (*.f64 (fma.f64 y y (*.f64 (+.f64 2 x) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 y y (*.f64 (+.f64 2 x) x))) (fma.f64 y y (*.f64 (+.f64 2 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y y (*.f64 (+.f64 2 x) x)) (*.f64 0 (fma.f64 y y (*.f64 (+.f64 2 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (*.f64 (+.f64 2 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 2 x) x) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y y) (+.f64 x x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (+.f64 (+.f64 x x) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y y (*.f64 (+.f64 2 x) x))) (pow.f64 (fma.f64 y y (*.f64 (+.f64 2 x) x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y y (*.f64 (+.f64 2 x) x)) 2/3) (cbrt.f64 (fma.f64 y y (*.f64 (+.f64 2 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y y (*.f64 (+.f64 2 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y y (*.f64 (+.f64 2 x) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y y (*.f64 (+.f64 2 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y y (*.f64 (+.f64 2 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y y (*.f64 (+.f64 2 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y y (*.f64 (+.f64 2 x) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y y (*.f64 (+.f64 2 x) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y y (*.f64 (+.f64 2 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y y (*.f64 (+.f64 2 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y y (*.f64 (+.f64 2 x) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y y (*.f64 (+.f64 2 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 2 x)) (*.f64 (pow.f64 (+.f64 2 x) 2/3) x) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 2 x) x (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (+.f64 2 x) x) 2/3) (cbrt.f64 (*.f64 (+.f64 2 x) x)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 2 x) x)) (pow.f64 (*.f64 (+.f64 2 x) x) 2/3) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (+.f64 2 x))) (pow.f64 (+.f64 2 x) 2/3) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (+.f64 2 x)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 2 x) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 2 x) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 2/3) (pow.f64 y 4/3) (*.f64 (+.f64 2 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 4/3) (pow.f64 y 2/3) (*.f64 (+.f64 2 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (*.f64 (+.f64 2 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (+.f64 2 x) x)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 2 x) x) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 2 x) x) 1 (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y y) (*.f64 (+.f64 2 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) 1 (*.f64 (+.f64 2 x) x))))))"]],"rules":[["egg-rr",39],["egg-rr",54]],"time":27.60302734375,"type":"rewrite"},{"count":[[129,104]],"inputs":[["(*.f64 2 x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 (+.f64 2 x) x)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(pow.f64 y 2)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(pow.f64 y 2)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(pow.f64 y 2)","(+.f64 (*.f64 2 x) (pow.f64 y 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 x)","(+.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 (+.f64 2 x) x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 (+.f64 2 x) x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 (+.f64 2 x) x)","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 (+.f64 2 x) x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 (+.f64 2 x) x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 (+.f64 2 x) x)","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 (+.f64 2 x) x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 (+.f64 2 x) x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 (+.f64 2 x) x)","(*.f64 (+.f64 2 x) x)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(fma.f64 (+.f64 2 x) x (*.f64 y y))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(fma.f64 (+.f64 2 x) x (*.f64 y y))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(fma.f64 (+.f64 2 x) x (*.f64 y y))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(fma.f64 (+.f64 2 x) x (*.f64 y y))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(fma.f64 (+.f64 2 x) x (*.f64 y y))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(fma.f64 (+.f64 2 x) x (*.f64 y y))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(fma.f64 (+.f64 2 x) x (*.f64 y y))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(fma.f64 (+.f64 2 x) x (*.f64 y y))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(fma.f64 (+.f64 2 x) x (*.f64 y y))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 x) (pow.f64 y 2))","(fma.f64 y y (+.f64 x x))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 (+.f64 2 x) x (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 (+.f64 2 x) x (*.f64 y y))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 (+.f64 2 x) x)","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 (+.f64 2 x) x (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 (+.f64 2 x) x (*.f64 y y))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 (+.f64 2 x) x)","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 (+.f64 2 x) x (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 (+.f64 2 x) x (*.f64 y y))"]],"time":119.447998046875,"type":"simplify"},{"compiler":[[1346,765]],"time":17.6611328125,"type":"eval"},{"alts":[["(fma.f64 y y (fma.f64 x x (+.f64 x x)))","next",0.0078125],["(fma.f64 x (+.f64 2 x) (*.f64 y y))","done",0.01171875]],"compiler":[[11,5],[10,6],[11,5]],"count":[[107,2]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[104,1],"picked":[1,0]}],"min-error":[0],"time":22.458984375,"type":"prune"},{"compiler":[[22,5]],"locations":[["(fma.f64 y y (fma.f64 x x (+.f64 x x)))",0.0078125,true]],"time":4.35595703125,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 y y (fma.f64 x x (+.f64 x x)))","x","-inf",0.209228515625],["(fma.f64 y y (fma.f64 x x (+.f64 x x)))","x","inf",0.2080078125],["(fma.f64 y y (fma.f64 x x (+.f64 x x)))","x","0",0.217041015625],["(fma.f64 y y (fma.f64 x x (+.f64 x x)))","y","-inf",0.171875],["(fma.f64 y y (fma.f64 x x (+.f64 x x)))","y","inf",0.19091796875],["(fma.f64 y y (fma.f64 x x (+.f64 x x)))","y","0",0.383056640625]],"time":1.4599609375,"type":"series"},{"count":[[1,52]],"inputs":[["(fma.f64 y y (fma.f64 x x (+.f64 x x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (*.f64 x (+.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (+.f64 (*.f64 y y) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y y (*.f64 x x)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x x) (fma.f64 y y (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 y y (*.f64 x x)) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y y) (+.f64 x x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y y) (fma.f64 x x x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x x) (+.f64 x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (+.f64 (*.f64 y y) (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (+.f64 (fma.f64 y y (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (*.f64 y y)) (fma.f64 x x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (fma.f64 y y (*.f64 x x)))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (fma.f64 y y (*.f64 x x)) -1)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y y (*.f64 x (+.f64 x 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y y (*.f64 x (+.f64 x 2))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 y y) (+.f64 x x)) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (+.f64 x 2)) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 y y (*.f64 x x)) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 y y) (fma.f64 x x x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 y y (*.f64 x x)) x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y y) (neg.f64 (*.f64 x (+.f64 x 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 y y (*.f64 x (+.f64 x 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y y (*.f64 x (+.f64 x 2)))) (pow.f64 (fma.f64 y y (*.f64 x (+.f64 x 2))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y y (*.f64 x (+.f64 x 2))) 2/3) (cbrt.f64 (fma.f64 y y (*.f64 x (+.f64 x 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 y y (*.f64 x (+.f64 x 2))))) (neg.f64 (pow.f64 (fma.f64 y y (*.f64 x (+.f64 x 2))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x (+.f64 x 2)) 2/3) (-.f64 (pow.f64 y 4/3) (*.f64 (cbrt.f64 (*.f64 x (+.f64 x 2))) (pow.f64 y 2/3)))) (+.f64 (cbrt.f64 (*.f64 x (+.f64 x 2))) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 y 4/3) (-.f64 (pow.f64 (*.f64 x (+.f64 x 2)) 2/3) (*.f64 (pow.f64 y 2/3) (cbrt.f64 (*.f64 x (+.f64 x 2)))))) (+.f64 (pow.f64 y 2/3) (cbrt.f64 (*.f64 x (+.f64 x 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y y (*.f64 x (+.f64 x 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y y (*.f64 x (+.f64 x 2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y y (*.f64 x (+.f64 x 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y y (*.f64 x (+.f64 x 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 y y (*.f64 x (+.f64 x 2))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y y (*.f64 x (+.f64 x 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 y y (*.f64 x (+.f64 x 2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y y (*.f64 x (+.f64 x 2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y y (*.f64 x (+.f64 x 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y y (*.f64 x (+.f64 x 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y y (*.f64 x (+.f64 x 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y y (*.f64 x (+.f64 x 2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y y (*.f64 x (+.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 4/3) (pow.f64 y 2/3) (*.f64 x (+.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (*.f64 x (+.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 2/3) (pow.f64 y 4/3) (*.f64 x (+.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (+.f64 x 2))) (pow.f64 (*.f64 x (+.f64 x 2)) 2/3) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 x 2) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 x (+.f64 x 2)) 2/3) (cbrt.f64 (*.f64 x (+.f64 x 2))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x (+.f64 x 2))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y y) (*.f64 x (+.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) 1 (*.f64 x (+.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (+.f64 x 2)) 1 (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (+.f64 x 2)) (*.f64 y y))))))"]],"rules":[["egg-rr",52]],"time":39.4169921875,"type":"rewrite"},{"count":[[76,61]],"inputs":[["(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (*.f64 2 x) (pow.f64 y 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 x 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 x) (pow.f64 y 2))","(fma.f64 y y (+.f64 x x))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 x 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 x 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y))"]],"time":82.009033203125,"type":"simplify"},{"compiler":[[684,342]],"time":8.381103515625,"type":"eval"},{"alts":[["(fma.f64 y y (fma.f64 x x (+.f64 x x)))","done",0.0078125],["(fma.f64 x (+.f64 2 x) (*.f64 y y))","done",0.01171875]],"compiler":[[11,5],[10,6]],"count":[[63,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[61,0],"picked":[1,1]}],"min-error":[0],"time":10.5498046875,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["y",0.0078125,1],["(+.f64 (+.f64 (*.f64 x 2) (*.f64 x x)) (*.f64 y y))",0.0078125,1],["(+.f64 (*.f64 x 2) (*.f64 x x))",0.0078125,1],["(*.f64 y y)",0.0078125,1],["(*.f64 y y)",0.0078125,1]],"compiler":[[3,2],[3,2],[13,8],[9,6],[5,3],[5,3],[38,18]],"count":[[4,1]],"inputs":[["(fma.f64 y y (fma.f64 x x (+.f64 x x)))","(fma.f64 y y (*.f64 (+.f64 2 x) x))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(+.f64 (+.f64 (*.f64 x 2) (*.f64 x x)) (*.f64 y y))"]],"link":["."],"name":["Numeric.Log:$clog1p from log-domain-0.10.2.1, A"],"oracle":[0.033535009768442016],"outputs":[["(fma.f64 y y (fma.f64 x x (+.f64 x x)))"]],"time":17.299072265625,"times":[["x",2.875],["y",2.85888671875],["(+.f64 (+.f64 (*.f64 x 2) (*.f64 x x)) (*.f64 y y))",2.97802734375],["(+.f64 (*.f64 x 2) (*.f64 x x))",3.02392578125],["(*.f64 y y)",2.2841796875],["(*.f64 y y)",2.27490234375]],"type":"regimes"},{"compiler":[[11,5]],"inputs":[["(fma.f64 y y (fma.f64 x x (+.f64 x x)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 y y (fma.f64 x x (+.f64 x x)))","(fma.f64 y y (*.f64 x (+.f64 x 2)))"]],"stop":[["done",1]],"time":36.881103515625,"type":"simplify"},{"time":0.016845703125,"type":"soundness"},{"compiler":[[11,5]],"remove-preprocessing":[[]],"time":8.2080078125,"type":"end"}]
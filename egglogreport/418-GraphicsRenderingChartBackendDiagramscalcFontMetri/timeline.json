[{"compiler":[[14,9]],"method":["search"],"sampling":[[12,0.0389862619158543,0.9590620431300159,0.0019516949541298345],[11,0.023391757149512582,0.9746565478963576,0.0019516949541298345],[10,0.015594504766341721,0.9824538002795284,0.0019516949541298345],[9,0.0,0.9980483050458702,0.0019516949541298345],[8,0.0,0.9980483050458702,0.0019516949541298345],[7,0.0,0.9980483050458702,0.0019516949541298345],[6,0.0,0.9980483050458702,0.0019516949541298345],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":158.16796875,"type":"analyze"},{"outcomes":[["body",256,"invalid",83.5869140625,1712],["body",256,"valid",403.3251953125,8256]],"time":497.050048828125,"type":"sample"},{"compiler":[[13,8]],"inputs":[["0","1","2","3"],["(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))","(*.f64 y (/.f64 (*.f64 (/.f64 x z) t) t))","(*.f64 z (/.f64 (*.f64 (/.f64 y x) t) t))","(*.f64 t (/.f64 (*.f64 (/.f64 y z) x) x))","(*.f64 x (/.f64 (*.f64 (/.f64 z y) t) t))","(*.f64 x (/.f64 (*.f64 (/.f64 t z) y) y))","(*.f64 x (/.f64 (*.f64 (/.f64 y t) z) z))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))","(/.f64 (*.f64 y x) z)","(*.f64 y (/.f64 (*.f64 (/.f64 x z) t) t))","(/.f64 (*.f64 y x) z)","(*.f64 z (/.f64 (*.f64 (/.f64 y x) t) t))","(*.f64 z (/.f64 y x))","(*.f64 t (/.f64 (*.f64 (/.f64 y z) x) x))","(/.f64 (*.f64 y t) z)","(*.f64 x (/.f64 (*.f64 (/.f64 z y) t) t))","(*.f64 x (/.f64 z y))","(*.f64 x (/.f64 (*.f64 (/.f64 t z) y) y))","(/.f64 (*.f64 x t) z)","(*.f64 x (/.f64 (*.f64 (/.f64 y t) z) z))","(*.f64 x (/.f64 y t))"]],"symmetry":[[]],"time":82.300048828125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))","(/.f64 (*.f64 x y) z)"]],"time":17.703857421875,"type":"simplify"},{"compiler":[[18,10]],"time":0.31005859375,"type":"eval"},{"alts":[["(/.f64 (*.f64 x y) z)","next",5.3286757156839775],["(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))","fresh",14.385566746740608]],"compiler":[[9,6],[13,8],[9,6],[13,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[1.3135361988510792],"time":1.2041015625,"type":"prune"},{"compiler":[[15,6]],"locations":[["(/.f64 (*.f64 x y) z)",5.186275336421551,true]],"time":3.375,"type":"localize"},{"count":[[1,36]],"series":[["(/.f64 (*.f64 x y) z)","z","-inf",0.308837890625],["(/.f64 (*.f64 x y) z)","z","inf",0.3408203125],["(/.f64 (*.f64 x y) z)","z","0",0.426025390625],["(/.f64 (*.f64 x y) z)","y","-inf",0.31982421875],["(/.f64 (*.f64 x y) z)","y","inf",1.18408203125],["(/.f64 (*.f64 x y) z)","y","0",0.666015625],["(/.f64 (*.f64 x y) z)","x","-inf",0.399169921875],["(/.f64 (*.f64 x y) z)","x","inf",0.412841796875],["(/.f64 (*.f64 x y) z)","x","0",0.64013671875]],"time":4.81982421875,"type":"series"},{"count":[[1,51]],"inputs":[["(/.f64 (*.f64 x y) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) z) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (/.f64 (*.f64 x y) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (/.f64 (pow.f64 (*.f64 x y) 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 z)) (*.f64 y (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 z)) (*.f64 x (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (pow.f64 z -2/3)) (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) z) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 z -2/3)) (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x y)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (*.f64 (*.f64 x y) (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (pow.f64 z -2/3)) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x y) z) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))) (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 z)) (neg.f64 (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (neg.f64 (*.f64 x y)))) (neg.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (*.f64 0 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x y) z)))))) (cbrt.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 z)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3)))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 x y) (pow.f64 z -2/3))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (neg.f64 (*.f64 x y)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (/.f64 (*.f64 x y) (cbrt.f64 z)))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) (pow.f64 z -2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (neg.f64 (*.f64 x y)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (neg.f64 (*.f64 x y))))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (/.f64 (*.f64 x y) z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3))))))"]],"rules":[["egg-rr",51]],"time":37.530029296875,"type":"rewrite"},{"count":[[87,52]],"inputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"time":134.60595703125,"type":"simplify"},{"compiler":[[545,205]],"time":5.7041015625,"type":"eval"},{"alts":[["(*.f64 (/.f64 1 z) (*.f64 x y))","fresh",5.402894465361215],["(pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)","fresh",5.7279297199862285],["(/.f64 (*.f64 x y) z)","done",5.3286757156839775],["(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))","fresh",14.385566746740608],["(*.f64 (/.f64 x z) y)","next",4.6069765043264415]],"compiler":[[11,8],[12,9],[9,6],[13,8],[9,6],[11,8],[12,9],[13,8],[9,6]],"count":[[54,5]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[52,3],"picked":[1,1]}],"min-error":[0.0078125],"time":10.166015625,"type":"prune"},{"compiler":[[15,6]],"locations":[["(*.f64 (/.f64 x z) y)",4.504949507177879,true]],"time":3.348876953125,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 (/.f64 x z) y)","y","-inf",0.5361328125],["(*.f64 (/.f64 x z) y)","y","inf",0.177001953125],["(*.f64 (/.f64 x z) y)","y","0",0.140869140625],["(*.f64 (/.f64 x z) y)","z","-inf",0.152099609375],["(*.f64 (/.f64 x z) y)","z","inf",0.18896484375],["(*.f64 (/.f64 x z) y)","z","0",0.14306640625],["(*.f64 (/.f64 x z) y)","x","-inf",0.164794921875],["(*.f64 (/.f64 x z) y)","x","inf",0.18212890625],["(*.f64 (/.f64 x z) y)","x","0",0.1689453125]],"time":1.947021484375,"type":"series"},{"count":[[1,78]],"inputs":[["(*.f64 (/.f64 x z) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) z) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (/.f64 (*.f64 x y) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) z) (*.f64 (pow.f64 x 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 y)) (/.f64 (pow.f64 y 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cbrt.f64 y)) -1) (/.f64 (pow.f64 y 2/3) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cbrt.f64 y)) (cbrt.f64 z)) (/.f64 (pow.f64 y 2/3) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cbrt.f64 y)) (pow.f64 z 2/3)) (/.f64 (pow.f64 y 2/3) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x y)) -1) (/.f64 (pow.f64 (*.f64 x y) 2/3) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 z 2/3)) (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (/.f64 x z))) (pow.f64 (/.f64 x z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x z)) (*.f64 (pow.f64 (/.f64 x z) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 x z) 2/3) y) (cbrt.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (/.f64 x z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x z) 2/3) (*.f64 y (cbrt.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (/.f64 x z)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x z)) (/.f64 (*.f64 (pow.f64 x 2/3) y) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) (pow.f64 z 2/3)) (/.f64 (*.f64 (pow.f64 x 2/3) y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (/.f64 (pow.f64 (*.f64 x y) 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x y)) z) (pow.f64 (*.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (/.f64 (*.f64 (pow.f64 x 2/3) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 z -2/3)) (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 z)) (*.f64 x (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (neg.f64 z))) (/.f64 x (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (*.f64 (pow.f64 x 2/3) y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (neg.f64 z))) (/.f64 y (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 z)) (*.f64 y (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (pow.f64 z -2/3)) (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x y)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (/.f64 (*.f64 x y) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -2/3) (/.f64 (*.f64 x y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (*.f64 (pow.f64 (/.f64 x z) 2/3) y)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (/.f64 (*.f64 x y) (cbrt.f64 z)))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (neg.f64 (*.f64 x y)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (*.f64 x y)) (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) y) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (*.f64 x y))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (*.f64 (pow.f64 (/.f64 x z) 2/3) y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 y (pow.f64 z -2/3))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (/.f64 (*.f64 x y) z) 2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 z)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 y)) 3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (neg.f64 (cbrt.f64 (*.f64 x y))) 3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (neg.f64 x))) 3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 x y) 3) (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (*.f64 x y))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 x y) (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3))))))"]],"rules":[["egg-rr",78]],"time":41.003173828125,"type":"rewrite"},{"count":[[114,79]],"inputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"time":134.5087890625,"type":"simplify"},{"compiler":[[852,329]],"time":8.81005859375,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)","fresh",5.7279297199862285],["(/.f64 (*.f64 x y) z)","done",5.3286757156839775],["(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))","fresh",14.385566746740608],["(*.f64 (/.f64 1 z) (*.f64 x y))","next",5.402894465361215],["(*.f64 (/.f64 x z) y)","done",4.6069765043264415]],"compiler":[[12,9],[9,6],[13,8],[11,8],[9,6],[12,9],[13,8],[11,8]],"count":[[84,5]],"kept":[{"done":[1,1],"fresh":[3,2],"new":[79,1],"picked":[1,1]}],"min-error":[0.0078125],"time":15.532958984375,"type":"prune"},{"compiler":[[21,11]],"locations":[["(*.f64 (/.f64 1 z) (*.f64 x y))",5.260494086098789,true]],"time":4.818115234375,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 (/.f64 1 z) (*.f64 x y))","y","-inf",0.176025390625],["(*.f64 (/.f64 1 z) (*.f64 x y))","y","inf",0.14794921875],["(*.f64 (/.f64 1 z) (*.f64 x y))","y","0",0.14306640625],["(*.f64 (/.f64 1 z) (*.f64 x y))","x","-inf",0.179931640625],["(*.f64 (/.f64 1 z) (*.f64 x y))","x","inf",0.14990234375],["(*.f64 (/.f64 1 z) (*.f64 x y))","x","0",0.14501953125],["(*.f64 (/.f64 1 z) (*.f64 x y))","z","-inf",0.302001953125],["(*.f64 (/.f64 1 z) (*.f64 x y))","z","inf",0.158935546875],["(*.f64 (/.f64 1 z) (*.f64 x y))","z","0",0.22998046875]],"time":1.72607421875,"type":"series"},{"count":[[1,78]],"inputs":[["(*.f64 (/.f64 1 z) (*.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) z) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (/.f64 (*.f64 x y) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 z)) (*.f64 (pow.f64 z -2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 z)) (*.f64 y (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (pow.f64 z -2/3)) (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z -2/3) x) (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x y) z))) (neg.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))) (/.f64 1 (cbrt.f64 (pow.f64 (pow.f64 z 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (/.f64 (pow.f64 (*.f64 x y) 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x y)) z) (pow.f64 (*.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (/.f64 x z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x y) 2/3) (/.f64 (cbrt.f64 (*.f64 x y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) z) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (*.f64 (pow.f64 z -2/3) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z -2/3) (*.f64 x y)) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -2/3) (/.f64 (*.f64 x y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x y)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (pow.f64 z -2/3) (*.f64 x y))) (neg.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (*.f64 (pow.f64 z -2/3) x)) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (*.f64 x y))) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (/.f64 (*.f64 x y) z) 2/3)) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (*.f64 y (pow.f64 z -2/3))) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 z)) (neg.f64 (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (*.f64 x y) 2/3)) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x (cbrt.f64 z)) y) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y (cbrt.f64 z)) x) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))) (cbrt.f64 (pow.f64 (pow.f64 z 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 z -2/3) (*.f64 x y))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y (*.f64 (pow.f64 z -2/3) x))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (*.f64 x y)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (/.f64 (*.f64 x y) z) 2/3))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (*.f64 y (pow.f64 z -2/3)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (*.f64 x y) 2/3))) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 x (cbrt.f64 z)) y)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 z)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 y (cbrt.f64 z)) x)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3)))) (neg.f64 (cbrt.f64 (pow.f64 (pow.f64 z 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (*.f64 x y)) (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (/.f64 (*.f64 x y) (cbrt.f64 z)))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (neg.f64 (*.f64 x y)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 z)) x) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (*.f64 x y) 2/3)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) y) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (*.f64 x y))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 z -2/3) (*.f64 x y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 y (pow.f64 z -2/3))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (*.f64 (pow.f64 z -2/3) x)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (/.f64 (*.f64 x y) z) 2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (*.f64 (pow.f64 z -2/3) (*.f64 x y)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 x y) (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (*.f64 x y))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3))))))"]],"rules":[["egg-rr",78]],"time":39.98876953125,"type":"rewrite"},{"count":[[114,79]],"inputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"time":133.80712890625,"type":"simplify"},{"compiler":[[890,350]],"time":9.511962890625,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)","next",5.7279297199862285],["(/.f64 (*.f64 x y) z)","done",5.3286757156839775],["(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))","fresh",14.385566746740608],["(*.f64 (/.f64 1 z) (*.f64 x y))","done",5.402894465361215],["(*.f64 (/.f64 x z) y)","done",4.6069765043264415]],"compiler":[[12,9],[9,6],[13,8],[11,8],[9,6],[12,9],[13,8]],"count":[[84,5]],"kept":[{"done":[2,2],"fresh":[2,2],"new":[79,0],"picked":[1,1]}],"min-error":[0.0078125],"time":14.408935546875,"type":"prune"},{"compiler":[[30,10]],"locations":[["(pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)",0.5759927246741666,true],["(/.f64 (*.f64 x y) z)",5.186275336421551,false],["(cbrt.f64 (/.f64 (*.f64 x y) z))",13.338288433190751,true]],"time":5.80517578125,"type":"localize"},{"count":[[2,0]],"series":[["(pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)","z","-inf",0.536865234375],["(pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)","z","inf",0.52001953125],["(pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)","z","0",0.52197265625],["(pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)","y","-inf",0.52392578125],["(pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)","y","inf",0.48388671875],["(pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)","y","0",0.376953125],["(pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)","x","-inf",0.822021484375],["(pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)","x","inf",0.48095703125],["(pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)","x","0",0.56103515625],["(cbrt.f64 (/.f64 (*.f64 x y) z))","z","-inf",0.424072265625],["(cbrt.f64 (/.f64 (*.f64 x y) z))","z","inf",0.2978515625],["(cbrt.f64 (/.f64 (*.f64 x y) z))","z","0",0.281982421875],["(cbrt.f64 (/.f64 (*.f64 x y) z))","y","-inf",0.340087890625],["(cbrt.f64 (/.f64 (*.f64 x y) z))","y","inf",0.304931640625],["(cbrt.f64 (/.f64 (*.f64 x y) z))","y","0",0.308837890625],["(cbrt.f64 (/.f64 (*.f64 x y) z))","x","-inf",0.429931640625],["(cbrt.f64 (/.f64 (*.f64 x y) z))","x","inf",0.339111328125],["(cbrt.f64 (/.f64 (*.f64 x y) z))","x","0",0.467041015625]],"time":8.238037109375,"type":"series"},{"count":[[2,171]],"inputs":[["(cbrt.f64 (/.f64 (*.f64 x y) z))","(pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3)) (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x y) z))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (cbrt.f64 z))) (cbrt.f64 (*.f64 y (pow.f64 z -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) (cbrt.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)))) (cbrt.f64 (pow.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (cbrt.f64 z))) (cbrt.f64 (*.f64 x (pow.f64 z -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x y) z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (neg.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z -1/3)) (cbrt.f64 (*.f64 (*.f64 x y) (pow.f64 z -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) (cbrt.f64 z))) (cbrt.f64 (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3))) (cbrt.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x y) (pow.f64 z -2/3))) (cbrt.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 x y)))) (cbrt.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 x y)))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x y) z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y)))) 3) (pow.f64 (neg.f64 (cbrt.f64 (cbrt.f64 z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)))) (neg.f64 (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3)))) (neg.f64 (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (*.f64 (*.f64 x y) (pow.f64 z -2/3)))) (neg.f64 (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 x y))))) (neg.f64 (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3)))) (cbrt.f64 (cbrt.f64 (pow.f64 (pow.f64 z 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (*.f64 x y) 2/3))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 y (*.f64 x (pow.f64 z -2/3)))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 z -1/3) (*.f64 x y))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) z)))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 x (cbrt.f64 z)) y)) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 x y) (pow.f64 z -2/3)) (cbrt.f64 (cbrt.f64 z)))) (cbrt.f64 (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 x (*.f64 y (pow.f64 z -2/3)))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)))) (cbrt.f64 (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 x y) (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 z))) (cbrt.f64 (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) (pow.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) 4/3))) (cbrt.f64 (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)) (cbrt.f64 (neg.f64 (*.f64 x y))))) (cbrt.f64 (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 x y) (pow.f64 z -2/3))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)) (cbrt.f64 (*.f64 x y)))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)) (cbrt.f64 (/.f64 (*.f64 x y) z)))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 y (cbrt.f64 z)) x)) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (neg.f64 (*.f64 x y))))) (cbrt.f64 (cbrt.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (neg.f64 (*.f64 x y)) (pow.f64 z 2/3))) (cbrt.f64 (cbrt.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (pow.f64 (/.f64 (*.f64 x y) z) 2/3))) (cbrt.f64 (cbrt.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x y) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x y) z) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (*.f64 x y) z))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) z) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (/.f64 (pow.f64 (*.f64 x y) 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x y) z))) (pow.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 z)) (*.f64 y (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 z)) (*.f64 x (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 7/3) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (pow.f64 z -2/3)) (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) 4/3) (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) z) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3)) (pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 z -2/3)) (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x y)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (*.f64 (*.f64 x y) (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (pow.f64 z -2/3)) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) (pow.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) 4/3)) (cbrt.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))) (/.f64 1 (cbrt.f64 (pow.f64 (pow.f64 z 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 x y) (pow.f64 z -2/3)) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 z)) (neg.f64 (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z))) (neg.f64 (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)) (cbrt.f64 (neg.f64 (*.f64 x y)))) (neg.f64 (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (pow.f64 (/.f64 (*.f64 x y) z) 2/3)) (neg.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (*.f64 x y)) (pow.f64 z 2/3)) (neg.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (neg.f64 (*.f64 x y)))) (neg.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) z))) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z))) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (*.f64 x y) 2/3)) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x (cbrt.f64 z)) y) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)) (cbrt.f64 (*.f64 x y))) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z -1/3) (*.f64 x y)) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y (cbrt.f64 z)) x) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z))) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (*.f64 x (pow.f64 z -2/3))) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)) (cbrt.f64 (/.f64 (*.f64 x y) z))) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (*.f64 y (pow.f64 z -2/3))) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (*.f64 0 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x y) z)))))) (cbrt.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (/.f64 (*.f64 x y) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) (pow.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) 4/3))) (neg.f64 (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3)))) (neg.f64 (cbrt.f64 (pow.f64 (pow.f64 z 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (*.f64 x y) (pow.f64 z -2/3)) (cbrt.f64 (cbrt.f64 z)))) (neg.f64 (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) z)))) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)))) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (*.f64 x y) 2/3))) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 x (cbrt.f64 z)) y)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)) (cbrt.f64 (*.f64 x y)))) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 z -1/3) (*.f64 x y))) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 y (cbrt.f64 z)) x)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 z)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x y)) (pow.f64 z 2/3)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y (*.f64 x (pow.f64 z -2/3)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)) (cbrt.f64 (/.f64 (*.f64 x y) z)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (*.f64 y (pow.f64 z -2/3)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (/.f64 (*.f64 x y) (cbrt.f64 z)))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 x y) (pow.f64 z -2/3)) (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (*.f64 x y)) (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (*.f64 (*.f64 x y) (pow.f64 z -2/3)))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (neg.f64 (*.f64 x y)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) (pow.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) 4/3)) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))) (cbrt.f64 (pow.f64 (pow.f64 z 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 z)) x) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (*.f64 x y) 2/3)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 z -1/3) (*.f64 x y)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) y) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 y (pow.f64 z -2/3))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) (pow.f64 z -2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (*.f64 x (pow.f64 z -2/3))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)) (cbrt.f64 (/.f64 (*.f64 x y) z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) z))) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 x y) (pow.f64 z -2/3)) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z))) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)) (cbrt.f64 (*.f64 x y))) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (neg.f64 (*.f64 x y)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (pow.f64 (/.f64 (*.f64 x y) z) 2/3)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z))) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)) (cbrt.f64 (neg.f64 (*.f64 x y)))) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3))) 3) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 x y)))) 3) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)))) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)) (cbrt.f64 (neg.f64 (*.f64 x y))))) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (pow.f64 (/.f64 (*.f64 x y) z) 2/3))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (neg.f64 (*.f64 x y))))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (/.f64 (*.f64 x y) z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3))))))"]],"rules":[["egg-rr",109],["egg-rr",62]],"time":55.290771484375,"type":"rewrite"},{"count":[[171,171]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"time":27.47509765625,"type":"simplify"},{"compiler":[[3151,1369]],"time":31.9990234375,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)","done",5.7279297199862285],["(/.f64 (*.f64 x y) z)","done",5.3286757156839775],["(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))","fresh",14.385566746740608],["(*.f64 (/.f64 1 z) (*.f64 x y))","done",5.402894465361215],["(*.f64 (/.f64 x z) y)","done",4.6069765043264415]],"compiler":[[12,9],[9,6],[13,8],[11,8],[9,6]],"count":[[228,5]],"kept":[{"done":[3,3],"fresh":[1,1],"new":[223,0],"picked":[1,1]}],"min-error":[0.0078125],"time":55.5009765625,"type":"prune"},{"accuracy":[0.49898471919670506],"baseline":[4.6069765043264415],"branch":[["x",4.6069765043264415,1],["y",3.107302863188035,2],["z",3.4322399616623125,2],["t",3.2440023118432055,2],["(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))",0.8898958550227558,5],["(/.f64 (*.f64 (/.f64 y z) t) t)",0.49898471919670506,5],["(/.f64 y z)",2.5839636643484853,3]],"compiler":[[5,4],[5,4],[5,4],[5,4],[13,8],[11,7],[7,5],[45,21]],"count":[[6,5]],"inputs":[["(*.f64 (/.f64 1 z) (*.f64 x y))","(*.f64 (/.f64 1 z) (*.f64 x y))","(pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)","(*.f64 (/.f64 x z) y)","(/.f64 (*.f64 x y) z)","(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))"]],"link":["."],"name":["Graphics.Rendering.Chart.Backend.Diagrams:calcFontMetrics from Chart-diagrams-1.5.1, B"],"oracle":[22.8479594586965],"outputs":[["(*.f64 (/.f64 x z) y)","(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))","(*.f64 (/.f64 x z) y)","(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))","(*.f64 (/.f64 x z) y)"]],"time":61.014892578125,"times":[["x",3.4609375],["y",6.509033203125],["z",6.531005859375],["t",6.515869140625],["(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))",12.113037109375],["(/.f64 (*.f64 (/.f64 y z) t) t)",13.054931640625],["(/.f64 y z)",11.552978515625]],"type":"regimes"},{"bstep":[[1.0196538485937536e+278,{"type":"real","value":"+inf"},0.027099609375],[4.675836396042549e-72,3.4250986323759083e-59,0.031005859375],[-1.1227233072798523e-156,-6.82143829438824e-163,0.048095703125],[-1.1177622042260961e+178,-6.341255447868884e+174,0.114990234375]],"compiler":[[9,7],[11,7]],"method":["left-value","left-value","left-value","left-value"],"time":0.3291015625,"type":"bsearch"},{"compiler":[[77,22]],"inputs":[["(if (<=.f64 (/.f64 (*.f64 (/.f64 y z) t) t) -10000000000000000524381184475062837195473800154429724610566137243318061834753718863820956830887857615988724636416932177829345401680187244151732297960592357271816907060120777654272) (*.f64 (/.f64 x z) y) (if (<=.f64 (/.f64 (*.f64 (/.f64 y z) t) t) -7729075046034517/7729075046034516689390703781863974688597854659412869997314470502903038284579120849072387533163845155924927232063004354354730157322085975311485817346934161497393961629646848) (*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t)) (if (<=.f64 (/.f64 (*.f64 (/.f64 y z) t) t) 2486616182048933/497323236409786642155382248146820840100456150797347717440463976893159497012533375533056) (*.f64 (/.f64 x z) y) (if (<=.f64 (/.f64 (*.f64 (/.f64 y z) t) t) 199999999999999992701373735918357116631804549565985153064628970972443492602480411625348685741640985599675569876002408075550379507087920437583886295587576290642133049161236473317937266725516180055400670622987509956668735259751478274996752027315378862823736417652149903488970653696) (*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t)) (*.f64 (/.f64 x z) y)))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (/.f64 (*.f64 (/.f64 y z) t) t) -10000000000000000524381184475062837195473800154429724610566137243318061834753718863820956830887857615988724636416932177829345401680187244151732297960592357271816907060120777654272) (*.f64 (/.f64 x z) y) (if (<=.f64 (/.f64 (*.f64 (/.f64 y z) t) t) -7729075046034517/7729075046034516689390703781863974688597854659412869997314470502903038284579120849072387533163845155924927232063004354354730157322085975311485817346934161497393961629646848) (*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t)) (if (<=.f64 (/.f64 (*.f64 (/.f64 y z) t) t) 2486616182048933/497323236409786642155382248146820840100456150797347717440463976893159497012533375533056) (*.f64 (/.f64 x z) y) (if (<=.f64 (/.f64 (*.f64 (/.f64 y z) t) t) 199999999999999992701373735918357116631804549565985153064628970972443492602480411625348685741640985599675569876002408075550379507087920437583886295587576290642133049161236473317937266725516180055400670622987509956668735259751478274996752027315378862823736417652149903488970653696) (*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t)) (*.f64 (/.f64 x z) y)))))","(if (<=.f64 (/.f64 y z) -10000000000000000524381184475062837195473800154429724610566137243318061834753718863820956830887857615988724636416932177829345401680187244151732297960592357271816907060120777654272) (/.f64 (*.f64 x y) z) (if (<=.f64 (/.f64 y z) -7729075046034517/7729075046034516689390703781863974688597854659412869997314470502903038284579120849072387533163845155924927232063004354354730157322085975311485817346934161497393961629646848) (/.f64 (*.f64 x y) z) (if (<=.f64 (/.f64 y z) 2486616182048933/497323236409786642155382248146820840100456150797347717440463976893159497012533375533056) (/.f64 (*.f64 x y) z) (if (<=.f64 (/.f64 y z) 199999999999999992701373735918357116631804549565985153064628970972443492602480411625348685741640985599675569876002408075550379507087920437583886295587576290642133049161236473317937266725516180055400670622987509956668735259751478274996752027315378862823736417652149903488970653696) (/.f64 (*.f64 x y) z) (/.f64 (*.f64 x y) z)))))"]],"stop":[["fuel",1]],"time":21.7109375,"type":"simplify"},{"time":0.01611328125,"type":"soundness"},{"compiler":[[77,22]],"remove-preprocessing":[[]],"time":12.781005859375,"type":"end"}]
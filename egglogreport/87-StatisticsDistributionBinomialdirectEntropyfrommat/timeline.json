[{"compiler":[[6,4]],"method":["search"],"sampling":[[12,0.4973156452178955,0.0009760856628417969,0.5017082691192627],[11,0.4968276023864746,0.0019521713256835938,0.5012202262878418],[10,0.4958515167236328,0.0039043426513671875,0.500244140625],[9,0.4958515167236328,0.007808685302734375,0.4963397979736328],[8,0.4919471740722656,0.01561737060546875,0.4924354553222656],[7,0.48413848876953125,0.0312347412109375,0.48462677001953125],[6,0.4685211181640625,0.062469482421875,0.4690093994140625],[5,0.437286376953125,0.12493896484375,0.437774658203125],[4,0.37481689453125,0.2498779296875,0.37530517578125],[3,0.2498779296875,0.499755859375,0.2503662109375],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.35400390625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.264404296875,9],["body",256,"valid",294.87939453125,8256]],"time":302.7431640625,"type":"sample"},{"compiler":[[5,3]],"inputs":[["0"],["(*.f64 x (log.f64 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 x (log.f64 x))"]],"symmetry":[[]],"time":66.218017578125,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(*.f64 x (log.f64 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (log.f64 x))"]],"time":32.5009765625,"type":"simplify"},{"compiler":[[5,3]],"time":0.242919921875,"type":"eval"},{"alts":[["(*.f64 x (log.f64 x))","next",0.28125]],"compiler":[[5,3],[5,3]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.28125],"time":0.634033203125,"type":"prune"},{"compiler":[[8,3]],"locations":[["(*.f64 x (log.f64 x))",0.28125,true]],"time":2.737060546875,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 x (log.f64 x))","x","-inf",9.58203125],["(*.f64 x (log.f64 x))","x","inf",4.64892578125],["(*.f64 x (log.f64 x))","x","0",18.48583984375]],"time":32.77783203125,"type":"series"},{"count":[[1,49]],"inputs":[["(*.f64 x (log.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (log.f64 x))) (pow.f64 (*.f64 x (log.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (log.f64 x)) 2/3) (cbrt.f64 (*.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 x)) (*.f64 (pow.f64 (log.f64 x) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (log.f64 x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 x) 2/3) x) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x (log.f64 x)) 2/3) (cbrt.f64 (cbrt.f64 (*.f64 x (log.f64 x))))) (cbrt.f64 (pow.f64 (*.f64 x (log.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 x) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (log.f64 x) (cbrt.f64 x)) (cbrt.f64 x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (*.f64 (pow.f64 (log.f64 x) 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 x)) (*.f64 (cbrt.f64 x) (pow.f64 (*.f64 x (log.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (log.f64 x)))) (pow.f64 (pow.f64 (*.f64 x (log.f64 x)) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (log.f64 x)) (pow.f64 (*.f64 x (log.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (*.f64 (pow.f64 x 2/3) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 x)) 2/3)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (log.f64 x)))) 4) (cbrt.f64 (*.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (pow.f64 (log.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (log.f64 x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 2/3) (*.f64 x (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (log.f64 x) (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x (log.f64 x))) (cbrt.f64 (pow.f64 (*.f64 x (log.f64 x)) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (log.f64 x)))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (neg.f64 (*.f64 (log.f64 x) (cbrt.f64 x)))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (neg.f64 (*.f64 x (cbrt.f64 (log.f64 x))))) (pow.f64 (log.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (neg.f64 (*.f64 (pow.f64 x 2/3) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 x))) (neg.f64 (*.f64 (pow.f64 (log.f64 x) 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (log.f64 x))) (neg.f64 (pow.f64 (*.f64 x (log.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (log.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (log.f64 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (log.f64 x) (cbrt.f64 x))) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 x (log.f64 x)) 2/3)) (cbrt.f64 (*.f64 (neg.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (cbrt.f64 (log.f64 x)))) (neg.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (log.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (log.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (log.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (log.f64 x)) 3))))))"]],"rules":[["egg-rr",49]],"time":34.77001953125,"type":"rewrite"},{"count":[[61,51]],"inputs":[["(*.f64 (log.f64 x) x)","(*.f64 (log.f64 x) x)","(*.f64 (log.f64 x) x)","(*.f64 (log.f64 x) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (log.f64 x) x)","(*.f64 (log.f64 x) x)","(*.f64 (log.f64 x) x)","(*.f64 (log.f64 x) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 (log.f64 x) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 (log.f64 x) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 (log.f64 x) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 (log.f64 x) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 (log.f64 x) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 (log.f64 x) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 (log.f64 x) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 (log.f64 x) x)"]],"time":47.802001953125,"type":"simplify"},{"compiler":[[533,207]],"time":7.01416015625,"type":"eval"},{"alts":[["(*.f64 (*.f64 (pow.f64 (log.f64 x) 2/3) x) (cbrt.f64 (log.f64 x)))","fresh",32.563099170043024],["(*.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 4))","fresh",32.45910528560016],["(*.f64 (*.f64 (*.f64 (log.f64 x) (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 4))","fresh",4.465023132775096],["(*.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))","fresh",0.788634191895219],["(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","next",0.27734375],["(*.f64 (*.f64 (*.f64 (log.f64 x) (cbrt.f64 x)) (cbrt.f64 x)) (cbrt.f64 x))","fresh",0.8280604005061233],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 x))) 3)","fresh",0.8020441895798912]],"compiler":[[11,7],[19,12],[17,12],[14,6],[9,7],[12,6],[8,6],[11,7],[19,12],[17,12],[14,6],[9,7],[12,6],[8,6]],"count":[[52,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[51,7],"picked":[1,0]}],"min-error":[0.08203125],"time":8.4169921875,"type":"prune"},{"compiler":[[25,18]],"locations":[["(log.f64 (/.f64 1 x))",0.01171875,true],["(*.f64 (log.f64 (/.f64 1 x)) x)",0.28125,true]],"time":7.954833984375,"type":"localize"},{"count":[[2,16]],"series":[["(log.f64 (/.f64 1 x))","x","-inf",0.15185546875],["(log.f64 (/.f64 1 x))","x","inf",0.1650390625],["(log.f64 (/.f64 1 x))","x","0",0.150146484375],["(*.f64 (log.f64 (/.f64 1 x)) x)","x","-inf",4.72802734375],["(*.f64 (log.f64 (/.f64 1 x)) x)","x","inf",0.339111328125],["(*.f64 (log.f64 (/.f64 1 x)) x)","x","0",1.920166015625]],"time":7.529052734375,"type":"series"},{"count":[[2,65]],"inputs":[["(*.f64 (log.f64 (/.f64 1 x)) x)","(log.f64 (/.f64 1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 x) (log.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (neg.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (log.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (neg.f64 x) (log.f64 x)))) (pow.f64 (pow.f64 (*.f64 (neg.f64 x) (log.f64 x)) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (neg.f64 x) (log.f64 x)) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (log.f64 x) x)) 4)) (cbrt.f64 (*.f64 (neg.f64 x) (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (log.f64 x))) (pow.f64 (*.f64 (neg.f64 x) (log.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (neg.f64 x) (log.f64 x)) 2/3) (cbrt.f64 (*.f64 (neg.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (log.f64 x) (cbrt.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (neg.f64 (*.f64 (log.f64 x) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 x))) (*.f64 (pow.f64 (log.f64 x) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 x))) (*.f64 (cbrt.f64 x) (pow.f64 (*.f64 (neg.f64 x) (log.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 x) 2/3) x) (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (*.f64 (neg.f64 x) (log.f64 x)) 2/3) (*.f64 0 (cbrt.f64 (*.f64 (log.f64 x) x))))) (cbrt.f64 (*.f64 (neg.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (neg.f64 (*.f64 (pow.f64 x 2/3) (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 x)))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (*.f64 (pow.f64 (log.f64 x) 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (neg.f64 (*.f64 (pow.f64 x 2/3) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (pow.f64 x 2/3) (log.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (neg.f64 (log.f64 x))) (pow.f64 (*.f64 (neg.f64 x) (log.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (log.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (neg.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (neg.f64 x) (log.f64 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (neg.f64 (log.f64 x)))) (pow.f64 (log.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 2/3) (*.f64 x (cbrt.f64 (neg.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (neg.f64 x) (log.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (neg.f64 x) (log.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (neg.f64 x) (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (log.f64 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (log.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (neg.f64 x) (log.f64 x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 4)) (cbrt.f64 (neg.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 x)))) (pow.f64 (pow.f64 (log.f64 x) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 x)) (neg.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (log.f64 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (log.f64 x) 2/3) (*.f64 0 (cbrt.f64 (neg.f64 (log.f64 x)))))) (+.f64 0 (cbrt.f64 (neg.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (log.f64 x) 2/3) (*.f64 0 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 x))) (pow.f64 (log.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 2/3) (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (log.f64 x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 (pow.f64 (log.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (neg.f64 (log.f64 x)))))))"]],"rules":[["egg-rr",28],["egg-rr",37]],"time":44.178955078125,"type":"rewrite"},{"count":[[81,68]],"inputs":[["(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1)) x)","(*.f64 -1 (log.f64 x))","(*.f64 -1 (log.f64 x))","(*.f64 -1 (log.f64 x))","(*.f64 -1 (log.f64 x))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1)) x)","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1)) x)","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1)) x)","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1)) x)","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1))","(neg.f64 (log.f64 x))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1))","(neg.f64 (log.f64 x))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1))","(neg.f64 (log.f64 x))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1))","(neg.f64 (log.f64 x))"]],"time":59.464111328125,"type":"simplify"},{"compiler":[[792,413]],"time":9.239013671875,"type":"eval"},{"alts":[["(*.f64 (*.f64 (pow.f64 (log.f64 x) 2/3) x) (cbrt.f64 (log.f64 x)))","fresh",32.563099170043024],["(*.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 4))","fresh",32.45910528560016],["(*.f64 (*.f64 (*.f64 (log.f64 x) (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 4))","fresh",4.465023132775096],["(*.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))","fresh",0.788634191895219],["(*.f64 -1 (*.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 3) x))","next",0.7478804442105467],["(*.f64 -1 (*.f64 (pow.f64 (neg.f64 (pow.f64 (log.f64 x) 3)) 1/3) x))","fresh",32.77951323212604],["(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","done",0.27734375],["(*.f64 (*.f64 (*.f64 (log.f64 x) (cbrt.f64 x)) (cbrt.f64 x)) (cbrt.f64 x))","fresh",0.8280604005061233],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 x))) 3)","fresh",0.8020441895798912]],"compiler":[[11,7],[19,12],[17,12],[14,6],[11,9],[12,10],[9,7],[12,6],[8,6],[11,7],[19,12],[17,12],[14,6],[11,9],[12,10],[12,6],[8,6]],"count":[[75,9]],"kept":[{"done":[0,0],"fresh":[6,6],"new":[68,2],"picked":[1,1]}],"min-error":[0.0703125],"time":13.509033203125,"type":"prune"},{"compiler":[[37,16]],"locations":[["(cbrt.f64 (neg.f64 (log.f64 x)))",0.11328125,true],["(*.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 3) x)",0.28125,true],["(pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 3)",0.7074776856003986,true]],"time":9.52099609375,"type":"localize"},{"count":[[3,36]],"series":[["(cbrt.f64 (neg.f64 (log.f64 x)))","x","-inf",0.21484375],["(cbrt.f64 (neg.f64 (log.f64 x)))","x","inf",0.18896484375],["(cbrt.f64 (neg.f64 (log.f64 x)))","x","0",0.178955078125],["(*.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 3) x)","x","-inf",0.72412109375],["(*.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 3) x)","x","inf",0.48095703125],["(*.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 3) x)","x","0",1.044921875],["(pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 3)","x","-inf",1.55517578125],["(pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 3)","x","inf",1.614013671875],["(pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 3)","x","0",2.580810546875]],"time":8.71484375,"type":"series"},{"count":[[3,95]],"inputs":[["(pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 3)","(*.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 3) x)","(cbrt.f64 (neg.f64 (log.f64 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 (log.f64 x)) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 (log.f64 x)) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 (log.f64 x)) 3/2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 (log.f64 x)) 9) 9)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 (log.f64 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 (log.f64 x)) 6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 (log.f64 x)) 1/3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 (log.f64 x)) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 (log.f64 x)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 (log.f64 x)) 1/9) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (log.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 x)))) (pow.f64 (pow.f64 (log.f64 x) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 x)) (neg.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (log.f64 x) 2/3) 4/3) (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 x) 2/3)) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (log.f64 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 x))) (pow.f64 (log.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 2/3) (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 7/3) (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 2/3) (-.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (log.f64 x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 (pow.f64 (log.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (neg.f64 (log.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (neg.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 x) (log.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (log.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (*.f64 (neg.f64 x) (log.f64 x)) 2/3) (*.f64 0 (cbrt.f64 (*.f64 (log.f64 x) x))))) (cbrt.f64 (*.f64 (neg.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (log.f64 x) (cbrt.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (neg.f64 (*.f64 (pow.f64 x 2/3) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (pow.f64 x 2/3) (log.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (neg.f64 (*.f64 (log.f64 x) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3)) (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 x))) (*.f64 x (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (log.f64 x))) (pow.f64 (*.f64 (neg.f64 x) (log.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (neg.f64 x) (log.f64 x)) 2/3) (cbrt.f64 (*.f64 (neg.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (log.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (neg.f64 x) (log.f64 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 2/3) (*.f64 x (cbrt.f64 (neg.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (neg.f64 (log.f64 x)))) (pow.f64 (log.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (neg.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (neg.f64 x) (log.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (neg.f64 x) (log.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (neg.f64 x) (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (log.f64 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (log.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (neg.f64 x) (log.f64 x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 x))))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 x) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (*.f64 0 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 x))))))) (+.f64 0 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (*.f64 0 (cbrt.f64 (cbrt.f64 (log.f64 x)))))) (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 x)))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (log.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log.f64 x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 (log.f64 x)))))))"]],"rules":[["egg-rr",23],["egg-rr",31],["egg-rr",41]],"time":47.820068359375,"type":"rewrite"},{"count":[[131,104]],"inputs":[["(*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 x)))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 x)))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 x)))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 x)))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 (cbrt.f64 -1) 6)))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 (cbrt.f64 -1) 6)))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 (cbrt.f64 -1) 6)))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 (cbrt.f64 -1) 6)))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 (log.f64 (/.f64 1 x)) x)","(*.f64 (log.f64 (/.f64 1 x)) x)","(*.f64 (log.f64 (/.f64 1 x)) x)","(*.f64 (log.f64 (/.f64 1 x)) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 x)) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 x)) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 x)) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 x)) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) 1/3) (cbrt.f64 -1))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 x)))","(neg.f64 (log.f64 x))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 x)))","(neg.f64 (log.f64 x))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 x)))","(neg.f64 (log.f64 x))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 x)))","(neg.f64 (log.f64 x))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 (cbrt.f64 -1) 6)))","(neg.f64 (log.f64 x))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 (cbrt.f64 -1) 6)))","(neg.f64 (log.f64 x))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 (cbrt.f64 -1) 6)))","(neg.f64 (log.f64 x))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 (cbrt.f64 -1) 6)))","(neg.f64 (log.f64 x))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(neg.f64 (log.f64 x))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(neg.f64 (log.f64 x))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(neg.f64 (log.f64 x))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(neg.f64 (log.f64 x))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 (log.f64 (/.f64 1 x)) x)","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 (log.f64 (/.f64 1 x)) x)","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 (log.f64 (/.f64 1 x)) x)","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 (log.f64 (/.f64 1 x)) x)","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x))","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x))","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x))","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x))","(*.f64 (neg.f64 x) (log.f64 x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 x)) 1/3) (cbrt.f64 -1))","(cbrt.f64 (neg.f64 (log.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 x)) 1/3) (cbrt.f64 -1))","(cbrt.f64 (neg.f64 (log.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 x)) 1/3) (cbrt.f64 -1))","(cbrt.f64 (neg.f64 (log.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 x)) 1/3) (cbrt.f64 -1))","(cbrt.f64 (neg.f64 (log.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(cbrt.f64 (neg.f64 (log.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(cbrt.f64 (neg.f64 (log.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(cbrt.f64 (neg.f64 (log.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(cbrt.f64 (neg.f64 (log.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (neg.f64 (log.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (neg.f64 (log.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (neg.f64 (log.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (neg.f64 (log.f64 x)))"]],"time":121.9189453125,"type":"simplify"},{"compiler":[[1246,731]],"time":18.85107421875,"type":"eval"},{"alts":[["(*.f64 -1 (*.f64 (pow.f64 (pow.f64 (neg.f64 (log.f64 x)) 1/3) 3) x))","fresh",32.74508697588346],["(*.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 4))","fresh",32.45910528560016],["(*.f64 (*.f64 (*.f64 (log.f64 x) (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 4))","fresh",4.465023132775096],["(*.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))","next",0.788634191895219],["(*.f64 -1 (*.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 3) x))","done",0.7478804442105467],["(*.f64 -1 (*.f64 (pow.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 x)))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3))) 3) x))","fresh",32.56533420347186],["(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","done",0.27734375],["(*.f64 (*.f64 (*.f64 (log.f64 x) (cbrt.f64 x)) (cbrt.f64 x)) (cbrt.f64 x))","fresh",0.8280604005061233],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 x))) 3)","fresh",0.8020441895798912]],"compiler":[[12,10],[19,12],[17,12],[14,6],[11,9],[18,14],[9,7],[12,6],[8,6],[12,10],[19,12],[17,12],[14,6],[18,14],[12,6],[8,6]],"count":[[113,9]],"kept":[{"done":[1,1],"fresh":[7,5],"new":[104,2],"picked":[1,1]}],"min-error":[0.06640625],"time":20.3740234375,"type":"prune"},{"compiler":[[34,6]],"locations":[["(cbrt.f64 (log.f64 x))",0.11328125,true],["(*.f64 x (cbrt.f64 (log.f64 x)))",0.26171875,true],["(*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))",0.328125,true],["(*.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))",0.35546875,true]],"time":5.902099609375,"type":"localize"},{"count":[[4,48]],"series":[["(cbrt.f64 (log.f64 x))","x","-inf",0.177001953125],["(cbrt.f64 (log.f64 x))","x","inf",0.163818359375],["(cbrt.f64 (log.f64 x))","x","0",0.162109375],["(*.f64 x (cbrt.f64 (log.f64 x)))","x","-inf",1.2138671875],["(*.f64 x (cbrt.f64 (log.f64 x)))","x","inf",1.02490234375],["(*.f64 x (cbrt.f64 (log.f64 x)))","x","0",1.126953125],["(*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))","x","-inf",1.672119140625],["(*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))","x","inf",1.152099609375],["(*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))","x","0",1.519775390625],["(*.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))","x","-inf",0.406982421875],["(*.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))","x","inf",0.343994140625],["(*.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))","x","0",1.31689453125]],"time":10.455810546875,"type":"series"},{"count":[[4,113]],"inputs":[["(*.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))","(*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))","(*.f64 x (cbrt.f64 (log.f64 x)))","(cbrt.f64 (log.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3)) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 x)) (*.f64 x (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (log.f64 x))) (pow.f64 (*.f64 x (log.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (log.f64 x)) 2/3) (cbrt.f64 (*.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (*.f64 (log.f64 x) (*.f64 x (cbrt.f64 (log.f64 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3))) (*.f64 (pow.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3)) 2/3) (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (pow.f64 (log.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 2/3) (*.f64 x (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 x) (*.f64 x (pow.f64 (log.f64 x) 2/3)))) (pow.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (*.f64 x (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3)) 2/3) (cbrt.f64 (log.f64 x))) (cbrt.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (log.f64 x) (*.f64 x (cbrt.f64 (log.f64 x))))) 2) (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3)) 2/3) (cbrt.f64 (*.f64 (log.f64 x) (*.f64 x (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (*.f64 x (pow.f64 (log.f64 x) 2/3))) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (*.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (log.f64 x))) (neg.f64 (pow.f64 (*.f64 x (log.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (log.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (log.f64 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (log.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (log.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (log.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (log.f64 x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 x)) (*.f64 x (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (pow.f64 (*.f64 x (log.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 x)))) (*.f64 (pow.f64 (*.f64 x (cbrt.f64 (log.f64 x))) 2/3) (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (*.f64 x (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (log.f64 x)) 2/3) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (*.f64 x (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x (cbrt.f64 (log.f64 x))) 2/3) (cbrt.f64 (log.f64 x))) (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3))) (pow.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3)) 2/3) (cbrt.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (pow.f64 (log.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 x) (*.f64 x (cbrt.f64 (log.f64 x))))) (pow.f64 (*.f64 x (cbrt.f64 (log.f64 x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (cbrt.f64 (log.f64 x))) 2/3) (cbrt.f64 (*.f64 (log.f64 x) (*.f64 x (cbrt.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) 2/3))) (neg.f64 (pow.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) (pow.f64 (log.f64 x) 2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (pow.f64 (log.f64 x) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (log.f64 x) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cbrt.f64 (log.f64 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) (log.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) x) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 x)))) (pow.f64 (*.f64 x (cbrt.f64 (log.f64 x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (cbrt.f64 (log.f64 x))) 2/3) (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (log.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (*.f64 x (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (cbrt.f64 (log.f64 x)))) (neg.f64 (pow.f64 (*.f64 x (cbrt.f64 (log.f64 x))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (cbrt.f64 (log.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cbrt.f64 (log.f64 x))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (cbrt.f64 (log.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (cbrt.f64 (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) (log.f64 x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (log.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (log.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 x) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (log.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (log.f64 x))))))"]],"rules":[["egg-rr",19],["egg-rr",28],["egg-rr",32],["egg-rr",34]],"time":51.9521484375,"type":"rewrite"},{"count":[[161,123]],"inputs":[["(*.f64 (log.f64 x) x)","(*.f64 (log.f64 x) x)","(*.f64 (log.f64 x) x)","(*.f64 (log.f64 x) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 x) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 x) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 x) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 x) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 x)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 x)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 x)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 x)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 x)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 x)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 x)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 x)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) 1/3) x)","(pow.f64 (log.f64 x) 1/3)","(pow.f64 (log.f64 x) 1/3)","(pow.f64 (log.f64 x) 1/3)","(pow.f64 (log.f64 x) 1/3)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (cbrt.f64 -1))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 1/3)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (log.f64 x) x)","(*.f64 (log.f64 x) x)","(*.f64 (log.f64 x) x)","(*.f64 (log.f64 x) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 (log.f64 x) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 (log.f64 x) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 (log.f64 x) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 (log.f64 x) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 (log.f64 x) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 (log.f64 x) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 (log.f64 x) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 (log.f64 x) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 x) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 x) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 x) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 x) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 x) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 x) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 x) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 x) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 x)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 x) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 x)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 x) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 x)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 x) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 x)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 x) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 x) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 x) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 x) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 x) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 x)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 x)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 x)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 x)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 x)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 x)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 x)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 x)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 (log.f64 x)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 (log.f64 x)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 (log.f64 x)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 (log.f64 x)) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 x)) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 x)) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 x)) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 x)) x)","(pow.f64 (log.f64 x) 1/3)","(cbrt.f64 (log.f64 x))","(pow.f64 (log.f64 x) 1/3)","(cbrt.f64 (log.f64 x))","(pow.f64 (log.f64 x) 1/3)","(cbrt.f64 (log.f64 x))","(pow.f64 (log.f64 x) 1/3)","(cbrt.f64 (log.f64 x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 x))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 x))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 x))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 x))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 x))"]],"time":149.751953125,"type":"simplify"},{"compiler":[[2534,889]],"time":21.77197265625,"type":"eval"},{"alts":[["(*.f64 (*.f64 (*.f64 (log.f64 x) (cbrt.f64 x)) (cbrt.f64 x)) (cbrt.f64 x))","fresh",0.8280604005061233],["(*.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (*.f64 (log.f64 x) (*.f64 x (cbrt.f64 (log.f64 x))))) 2))","fresh",0.8010867188852173],["(*.f64 (*.f64 (*.f64 x (pow.f64 (log.f64 x) 1/3)) (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))","fresh",32.366970166063524],["(*.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 x)))) 3) (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))","fresh",0.9737218867569284],["(*.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 3))","fresh",0.9278743649047165],["(*.f64 (*.f64 (*.f64 (log.f64 x) (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 4))","fresh",4.465023132775096],["(*.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 4))","fresh",32.45910528560016],["(*.f64 -1 (*.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 3) x))","done",0.7478804442105467],["(*.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 x) 2)) 1/3) x) (cbrt.f64 (log.f64 x)))","fresh",1.0717345337906898],["(*.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x))) (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (cbrt.f64 -1)))","fresh",32.35068139652663],["(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","done",0.27734375],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 x))) 3)","fresh",0.8020441895798912]],"compiler":[[12,6],[19,10],[15,8],[17,9],[17,9],[17,12],[19,12],[11,9],[15,11],[22,16],[9,7],[8,6]],"count":[[174,12]],"kept":[{"done":[2,2],"fresh":[6,4],"new":[165,6],"picked":[1,0]}],"min-error":[0.01953125],"time":27.2939453125,"type":"prune"},{"accuracy":[0.27734375],"baseline":[0.27734375],"branch":[["x",0.27734375,1],["(*.f64 x (log.f64 x))",0.27734375,1],["(*.f64 x (log.f64 x))",0.27734375,1]],"compiler":[[2,1],[5,3],[5,3],[236,109]],"count":[[18,1]],"inputs":[["(*.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (*.f64 (log.f64 x) (*.f64 x (cbrt.f64 (log.f64 x))))) 2))","(*.f64 (*.f64 (*.f64 x (pow.f64 (log.f64 x) 1/3)) (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))","(*.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 x)))) 3) (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))","(*.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 3))","(*.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 x) 2)) 1/3) x) (cbrt.f64 (log.f64 x)))","(*.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x))) (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 x))) 1/3) (cbrt.f64 -1)))","(*.f64 -1 (*.f64 (pow.f64 (pow.f64 (neg.f64 (log.f64 x)) 1/3) 3) x))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 x)))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3))) 3) x))","(*.f64 -1 (*.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 3) x))","(*.f64 -1 (*.f64 (pow.f64 (neg.f64 (pow.f64 (log.f64 x) 3)) 1/3) x))","(*.f64 (*.f64 (pow.f64 (log.f64 x) 2/3) x) (cbrt.f64 (log.f64 x)))","(*.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 4))","(*.f64 (*.f64 (*.f64 (log.f64 x) (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 4))","(*.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x))) (cbrt.f64 (log.f64 x)))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 (*.f64 (*.f64 (log.f64 x) (cbrt.f64 x)) (cbrt.f64 x)) (cbrt.f64 x))","(pow.f64 (cbrt.f64 (*.f64 x (log.f64 x))) 3)","(*.f64 x (log.f64 x))"]],"link":["."],"name":["Statistics.Distribution.Binomial:directEntropy from math-functions-0.1.5.2"],"oracle":[64.0],"outputs":[["(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))"]],"time":22.18994140625,"times":[["x",5.907958984375],["(*.f64 x (log.f64 x))",6.208984375],["(*.f64 x (log.f64 x))",6.43994140625]],"type":"regimes"},{"compiler":[[9,7]],"inputs":[["(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 (log.f64 x) x)"]],"stop":[["fuel",1]],"time":36.541015625,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[9,7]],"remove-preprocessing":[[]],"time":8.224853515625,"type":"end"}]
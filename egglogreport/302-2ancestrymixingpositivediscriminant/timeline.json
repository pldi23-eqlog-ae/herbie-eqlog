[{"compiler":[[41,24]],"method":["search"],"sampling":[[12,0.2866890099496686,0.30229113294012677,0.4110198571102046],[11,0.24573343709971596,0.4017546670042975,0.3525118958959865],[10,0.16382229139981064,0.5070689971898901,0.3291087114102993],[9,0.1404191069141234,0.5304721816755773,0.3291087114102993],[8,0.09361273794274894,0.6864934115801589,0.2198938504770922],[7,0.0,0.8113103955038241,0.1886896044961759],[6,0.0,0.8113103955038241,0.1886896044961759],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":137.31787109375,"type":"analyze"},{"outcomes":[["body",256,"invalid",106.658935546875,1481],["body",256,"valid",635.700927734375,8256]],"time":751.21923828125,"type":"sample"},{"compiler":[[40,23]],"inputs":[["0","1","2"],["(+.f64 (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (+.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))) (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (-.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))))","(+.f64 (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (+.f64 (neg.f64 h) (sqrt.f64 (-.f64 (*.f64 h h) (*.f64 g g)))))) (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (-.f64 (neg.f64 h) (sqrt.f64 (-.f64 (*.f64 h h) (*.f64 g g)))))))","(+.f64 (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 g)) (+.f64 (neg.f64 a) (sqrt.f64 (-.f64 (*.f64 a a) (*.f64 h h)))))) (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 g)) (-.f64 (neg.f64 a) (sqrt.f64 (-.f64 (*.f64 a a) (*.f64 h h)))))))","(+.f64 (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 h)) (+.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 a a)))))) (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 h)) (-.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 a a)))))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (+.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))) (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (-.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))))","(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 h g) (-.f64 g h))))) (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 h g) (-.f64 g h))) g))))","(+.f64 (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (+.f64 (neg.f64 h) (sqrt.f64 (-.f64 (*.f64 h h) (*.f64 g g)))))) (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (-.f64 (neg.f64 h) (sqrt.f64 (-.f64 (*.f64 h h) (*.f64 g g)))))))","(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 h g) (-.f64 h g))) h)) (cbrt.f64 (-.f64 (neg.f64 h) (sqrt.f64 (*.f64 (+.f64 h g) (-.f64 h g)))))))","(+.f64 (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 g)) (+.f64 (neg.f64 a) (sqrt.f64 (-.f64 (*.f64 a a) (*.f64 h h)))))) (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 g)) (-.f64 (neg.f64 a) (sqrt.f64 (-.f64 (*.f64 a a) (*.f64 h h)))))))","(*.f64 (cbrt.f64 (/.f64 1/2 g)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 a h) (-.f64 a h))) a)) (cbrt.f64 (-.f64 (neg.f64 a) (sqrt.f64 (*.f64 (+.f64 a h) (-.f64 a h)))))))","(+.f64 (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 h)) (+.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 a a)))))) (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 h)) (-.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 a a)))))))","(*.f64 (cbrt.f64 (/.f64 1/2 h)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g a) (-.f64 g a))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g a) (-.f64 g a)))))))"]],"symmetry":[[]],"time":63.06298828125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (+.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))) (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (-.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (+.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))) (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (-.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))))","(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))"]],"time":23.949951171875,"type":"simplify"},{"compiler":[[69,36]],"time":1.723876953125,"type":"eval"},{"alts":[["(+.f64 (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (+.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))) (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (-.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))))","fresh",38.255120495860474],["(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","next",35.10402660533145]],"compiler":[[40,23],[32,17],[40,23],[32,17]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[34.97512035533041],"time":1.84912109375,"type":"prune"},{"compiler":[[134,23]],"locations":[["(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))",0.35775375976844204,true],["(-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))",1.0030523523987067,true],["(-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)",1.0488214543122005,true],["(sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))",33.250698958394096,true]],"time":16.554931640625,"type":"localize"},{"count":[[4,27]],"series":[["(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","h","-inf",1.54296875],["(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","h","inf",6.261962890625],["(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","h","0",6.0068359375],["(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","g","-inf",4.3779296875],["(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","g","inf",4.06201171875],["(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","g","0",5.921875],["(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","a","-inf",0.9599609375],["(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","a","inf",0.761962890625],["(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","a","0",1.407958984375],["(-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))","h","-inf",0.321044921875],["(-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))","h","inf",0.39697265625],["(-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))","h","0",0.34814453125],["(-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))","g","-inf",0.3779296875],["(-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))","g","inf",0.58984375],["(-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))","g","0",0.4150390625],["(-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)","h","-inf",0.32421875],["(-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)","h","inf",0.385986328125],["(-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)","h","0",0.961181640625],["(-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)","g","-inf",0.626953125],["(-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)","g","inf",0.621826171875],["(-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)","g","0",0.43212890625],["(sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))","h","-inf",0.337158203125],["(sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))","h","inf",0.665771484375],["(sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))","h","0",0.60107421875],["(sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))","g","-inf",0.705078125],["(sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))","g","inf",0.530029296875],["(sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))","g","0",0.822998046875]],"time":41.35693359375,"type":"series"},{"count":[[4,212]],"inputs":[["(sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))","(-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)","(-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))","(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) (*.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) 0) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) 1/2) (*.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) (*.f64 0 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (*.f64 1/2 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) -1) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) 0) (-.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 0) (-.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) (fabs.f64 (cbrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) (-.f64 0 (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 0))) (+.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) (+.f64 0 (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 0))) (-.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (cbrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) (pow.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) 0) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 g h) (-.f64 g h)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 g h) (-.f64 g h)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 g h) (-.f64 g h)) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 g h) (-.f64 g h)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 g h) (-.f64 g h)) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 g h) (-.f64 g h)) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 g h) (-.f64 g h)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) 1 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (cbrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) 0)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) (neg.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 g) 0) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g) (*.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g) 0) (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g) 1/2) (*.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 g) (*.f64 (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g) (*.f64 0 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (*.f64 1/2 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 g) (*.f64 (neg.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (pow.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 g) (*.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) (neg.f64 (cbrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 g) (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 g (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g) 2/3)) (pow.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 g (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (neg.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 g (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (pow.f64 (cbrt.f64 (-.f64 g (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 g (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) (neg.f64 (pow.f64 (cbrt.f64 (-.f64 g (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 g 2/3) (-.f64 (cbrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) (*.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (+.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) (-.f64 (pow.f64 g 2/3) (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (cbrt.f64 (neg.f64 g))))) (+.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (cbrt.f64 (neg.f64 g))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) (+.f64 (pow.f64 g 2/3) (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (cbrt.f64 g)))) (-.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (cbrt.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (pow.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g) 2/3) (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 g (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (neg.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 g (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (neg.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 g 2/3) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) (neg.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 g (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 g) (neg.f64 (pow.f64 g 2/3)) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 g) 1 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 g -1 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 g 2/3) (cbrt.f64 (neg.f64 g)) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) (neg.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (neg.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) 1 (neg.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (cbrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) (neg.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (neg.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (*.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 0) (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 1/2) (*.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (*.f64 0 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) (*.f64 1/2 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 g) (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (neg.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 0) (neg.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 0) g)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) g)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 2/3)) (pow.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g))) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 g 2/3) (+.f64 (cbrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) (*.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (-.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) (pow.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 2/3) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (neg.f64 (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 g 2/3) (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 g (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 g) (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 g) (neg.f64 (pow.f64 g 2/3)) (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 g) 1 (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 g -1 (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 g 2/3) (cbrt.f64 (neg.f64 g)) (neg.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (/.f64 1/2 a) (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g))) (cbrt.f64 (*.f64 (/.f64 1/2 a) (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (/.f64 1/2 a) (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (cbrt.f64 (*.f64 (/.f64 1/2 a) (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (*.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) 0) (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) 1/2) (*.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (*.f64 0 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (*.f64 1/2 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (*.f64 (pow.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) 2/3) (cbrt.f64 (/.f64 1/2 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (cbrt.f64 (/.f64 1/2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (pow.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (cbrt.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (pow.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (cbrt.f64 (cbrt.f64 (/.f64 1/2 a)))) (cbrt.f64 (pow.f64 (/.f64 1/2 a) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 1/2 a))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 1/2 a) 2/3)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 1/2 a) 2/3)) (+.f64 (*.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (cbrt.f64 (/.f64 1/2 a)))) (*.f64 (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) (cbrt.f64 (cbrt.f64 (/.f64 1/2 a))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 1/2 a) 2/3)) (+.f64 (*.f64 (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) (cbrt.f64 (cbrt.f64 (/.f64 1/2 a)))) (*.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (cbrt.f64 (/.f64 1/2 a))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (cbrt.f64 1/2)) (pow.f64 a -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (cbrt.f64 -1/2)) (neg.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/2)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 1/2 a) 2/3)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -1/2) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (neg.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (cbrt.f64 1/2)) (cbrt.f64 (cbrt.f64 a))) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (cbrt.f64 1/2)) (cbrt.f64 (cbrt.f64 a))) (cbrt.f64 (pow.f64 a 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (cbrt.f64 1/2)) 1) (*.f64 (cbrt.f64 a) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (cbrt.f64 1/2))) (neg.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (cbrt.f64 1/2)) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (cbrt.f64 1/2))) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (cbrt.f64 -1/2)) (cbrt.f64 (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (cbrt.f64 1/2)) 1) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -1/2) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) (cbrt.f64 (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (cbrt.f64 1/2)) 1) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) (cbrt.f64 1/2)) (cbrt.f64 a)) (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 1/2)))) (pow.f64 a 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 1/2)) (cbrt.f64 a)) (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))) (cbrt.f64 1/2)))) (pow.f64 a 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) 3) (/.f64 1/2 a)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) 3) (/.f64 1/2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/2 a)) (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (*.f64 (/.f64 1/2 a) (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (/.f64 1/2 a)) (cbrt.f64 (*.f64 (/.f64 1/2 a) (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))))))"]],"rules":[["egg-rr",49],["egg-rr",46],["egg-rr",59],["egg-rr",58]],"time":50.42919921875,"type":"rewrite"},{"count":[[239,260]],"inputs":[["g","(+.f64 (*.f64 1/2 (+.f64 h (*.f64 -1 h))) g)","(+.f64 (*.f64 1/2 (+.f64 h (*.f64 -1 h))) (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) 2)) g)) g))","(+.f64 (*.f64 1/2 (+.f64 h (*.f64 -1 h))) (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) 2)) g)) (+.f64 g (*.f64 -1/4 (/.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 h (*.f64 -1 h))) 2)) (+.f64 (*.f64 -1 h) h)) (pow.f64 g 2))))))","g","(+.f64 g (*.f64 1/2 (/.f64 (*.f64 h (+.f64 (*.f64 -1 g) g)) g)))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 g (*.f64 -1 g)) g)) 2) 1) (pow.f64 h 2)) g)) (+.f64 g (*.f64 1/2 (/.f64 (*.f64 h (+.f64 (*.f64 -1 g) g)) g))))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 g (*.f64 -1 g)) g)) 2) 1) (pow.f64 h 2)) g)) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 -1 g) g) g)) 2)) (*.f64 (+.f64 g (*.f64 -1 g)) (pow.f64 h 3))) (pow.f64 g 3))) (+.f64 g (*.f64 1/2 (/.f64 (*.f64 h (+.f64 (*.f64 -1 g) g)) g)))))","(*.f64 1/2 (+.f64 (*.f64 -1 h) h))","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) (*.f64 1/2 (/.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 h (*.f64 -1 h))) 2)) g)))","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) (+.f64 (*.f64 -1/4 (/.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) 2)) (+.f64 h (*.f64 -1 h))) (pow.f64 g 2))) (*.f64 1/2 (/.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 h (*.f64 -1 h))) 2)) g))))","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 -1/4 (*.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 h (*.f64 -1 h))) 2)) (*.f64 (+.f64 h (*.f64 -1 h)) (+.f64 (*.f64 -1 h) h)))) (pow.f64 (*.f64 1/2 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) 2))) 2)) (pow.f64 g 3))) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) (+.f64 (*.f64 -1/4 (/.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) 2)) (+.f64 h (*.f64 -1 h))) (pow.f64 g 2))) (*.f64 1/2 (/.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 h (*.f64 -1 h))) 2)) g)))))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 g (*.f64 -1 g)) h) g))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 -1 g) g) g)) 2)) (pow.f64 h 2)) g)) (*.f64 1/2 (/.f64 (*.f64 (+.f64 g (*.f64 -1 g)) h) g)))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 -1 g) g) g)) 2)) (pow.f64 h 2)) g)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 g (*.f64 -1 g)) h) g)) (*.f64 1/4 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 g (*.f64 -1 g)) g)) 2) 1) (*.f64 (+.f64 (*.f64 -1 g) g) (pow.f64 h 3))) (pow.f64 g 3)))))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 -1 g) g) g)) 2)) (pow.f64 h 2)) g)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 g (*.f64 -1 g)) h) g)) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 g (*.f64 -1 g)) g)) 2) 1) g)) 2) (*.f64 1/4 (/.f64 (*.f64 (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 -1 g) g) g)) 2)) (*.f64 (+.f64 g (*.f64 -1 g)) (+.f64 (*.f64 -1 g) g))) (pow.f64 g 4)))) (pow.f64 h 4)) g)) (*.f64 1/4 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 g (*.f64 -1 g)) g)) 2) 1) (*.f64 (+.f64 (*.f64 -1 g) g) (pow.f64 h 3))) (pow.f64 g 3))))))","(*.f64 -2 g)","(+.f64 (*.f64 -2 g) (*.f64 -1/2 (+.f64 h (*.f64 -1 h))))","(+.f64 (*.f64 -1/2 (/.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) 2)) g)) (+.f64 (*.f64 -2 g) (*.f64 -1/2 (+.f64 h (*.f64 -1 h)))))","(+.f64 (*.f64 -1/2 (/.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) 2)) g)) (+.f64 (*.f64 -2 g) (+.f64 (*.f64 -1/2 (+.f64 h (*.f64 -1 h))) (*.f64 1/4 (/.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 h (*.f64 -1 h))) 2)) (+.f64 (*.f64 -1 h) h)) (pow.f64 g 2))))))","(*.f64 -2 g)","(+.f64 (*.f64 -2 g) (*.f64 -1/2 (/.f64 (*.f64 h (+.f64 (*.f64 -1 g) g)) g)))","(+.f64 (*.f64 -2 g) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 h (+.f64 (*.f64 -1 g) g)) g)) (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 g (*.f64 -1 g)) g)) 2) 1) (pow.f64 h 2)) g))))","(+.f64 (*.f64 -2 g) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 h (+.f64 (*.f64 -1 g) g)) g)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 g (*.f64 -1 g)) g)) 2) 1) (pow.f64 h 2)) g)) (*.f64 -1/4 (/.f64 (*.f64 (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 -1 g) g) g)) 2)) (*.f64 (+.f64 g (*.f64 -1 g)) (pow.f64 h 3))) (pow.f64 g 3))))))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (+.f64 (*.f64 -1 h) h)) a) 1/3) (pow.f64 (cbrt.f64 1/2) 2))","(*.f64 (pow.f64 (/.f64 (*.f64 1 g) a) 1/3) (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 -1) (cbrt.f64 1/2))))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 g 11)) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (cbrt.f64 2) 2) a)) 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 1/2) (*.f64 (+.f64 (*.f64 -1 g) g) h)))))) (*.f64 (pow.f64 (/.f64 (*.f64 1 g) a) 1/3) (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 -1) (cbrt.f64 1/2)))))"]],"method":["egg-herbie"],"outputs":[["g","(+.f64 (*.f64 1/2 (+.f64 h (*.f64 -1 h))) g)","(fma.f64 1/2 0 g)","(+.f64 (*.f64 1/2 (+.f64 h (*.f64 -1 h))) (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) 2)) g)) g))","(fma.f64 1/2 (+.f64 0 (/.f64 (-.f64 (neg.f64 (*.f64 h h)) (*.f64 (*.f64 1/2 1/2) 0)) g)) g)","(+.f64 (*.f64 1/2 (+.f64 h (*.f64 -1 h))) (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) 2)) g)) (+.f64 g (*.f64 -1/4 (/.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 h (*.f64 -1 h))) 2)) (+.f64 (*.f64 -1 h) h)) (pow.f64 g 2))))))","(fma.f64 1/2 (+.f64 0 (/.f64 (-.f64 (neg.f64 (*.f64 h h)) (*.f64 (*.f64 1/2 1/2) 0)) g)) (fma.f64 -1/4 (/.f64 (*.f64 (+.f64 (*.f64 (*.f64 1/2 1/2) 0) (*.f64 h h)) 0) (*.f64 g g)) g))","g","(+.f64 g (*.f64 1/2 (/.f64 (*.f64 h (+.f64 (*.f64 -1 g) g)) g)))","(fma.f64 1/2 (/.f64 0 g) g)","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 g (*.f64 -1 g)) g)) 2) 1) (pow.f64 h 2)) g)) (+.f64 g (*.f64 1/2 (/.f64 (*.f64 h (+.f64 (*.f64 -1 g) g)) g))))","(+.f64 (/.f64 (-.f64 (*.f64 -1/2 (*.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 1/2 0) g) 2)) (*.f64 h h))) (*.f64 1/2 0)) g) g)","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 g (*.f64 -1 g)) g)) 2) 1) (pow.f64 h 2)) g)) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 -1 g) g) g)) 2)) (*.f64 (+.f64 g (*.f64 -1 g)) (pow.f64 h 3))) (pow.f64 g 3))) (+.f64 g (*.f64 1/2 (/.f64 (*.f64 h (+.f64 (*.f64 -1 g) g)) g)))))","(+.f64 (fma.f64 1/4 (/.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 1/2 0) g) 2)) 0) (pow.f64 g 3)) g) (/.f64 (-.f64 (*.f64 -1/2 (*.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 1/2 0) g) 2)) (*.f64 h h))) (*.f64 1/2 0)) g))","(*.f64 1/2 (+.f64 (*.f64 -1 h) h))","(*.f64 1/2 0)","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) (*.f64 1/2 (/.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 h (*.f64 -1 h))) 2)) g)))","(*.f64 1/2 (+.f64 0 (/.f64 (-.f64 (neg.f64 (*.f64 h h)) (*.f64 (*.f64 1/2 1/2) 0)) g)))","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) (+.f64 (*.f64 -1/4 (/.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) 2)) (+.f64 h (*.f64 -1 h))) (pow.f64 g 2))) (*.f64 1/2 (/.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 h (*.f64 -1 h))) 2)) g))))","(+.f64 (*.f64 1/2 (+.f64 0 (/.f64 (-.f64 (neg.f64 (*.f64 h h)) (*.f64 (*.f64 1/2 1/2) 0)) g))) (*.f64 (/.f64 (*.f64 (+.f64 (*.f64 (*.f64 1/2 1/2) 0) (*.f64 h h)) 0) (*.f64 g g)) -1/4))","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 -1/4 (*.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 h (*.f64 -1 h))) 2)) (*.f64 (+.f64 h (*.f64 -1 h)) (+.f64 (*.f64 -1 h) h)))) (pow.f64 (*.f64 1/2 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) 2))) 2)) (pow.f64 g 3))) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) (+.f64 (*.f64 -1/4 (/.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) 2)) (+.f64 h (*.f64 -1 h))) (pow.f64 g 2))) (*.f64 1/2 (/.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 h (*.f64 -1 h))) 2)) g)))))","(fma.f64 -1/2 (/.f64 (fma.f64 -1/4 (*.f64 (+.f64 (*.f64 (*.f64 1/2 1/2) 0) (*.f64 h h)) 0) (pow.f64 (*.f64 1/2 (-.f64 (neg.f64 (*.f64 h h)) (*.f64 (*.f64 1/2 1/2) 0))) 2)) (pow.f64 g 3)) (+.f64 (*.f64 1/2 (+.f64 0 (/.f64 (-.f64 (neg.f64 (*.f64 h h)) (*.f64 (*.f64 1/2 1/2) 0)) g))) (*.f64 (/.f64 (*.f64 (+.f64 (*.f64 (*.f64 1/2 1/2) 0) (*.f64 h h)) 0) (*.f64 g g)) -1/4)))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 g (*.f64 -1 g)) h) g))","(/.f64 (*.f64 1/2 0) g)","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 -1 g) g) g)) 2)) (pow.f64 h 2)) g)) (*.f64 1/2 (/.f64 (*.f64 (+.f64 g (*.f64 -1 g)) h) g)))","(/.f64 (-.f64 (*.f64 -1/2 (*.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 1/2 0) g) 2)) (*.f64 h h))) (*.f64 1/2 0)) g)","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 -1 g) g) g)) 2)) (pow.f64 h 2)) g)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 g (*.f64 -1 g)) h) g)) (*.f64 1/4 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 g (*.f64 -1 g)) g)) 2) 1) (*.f64 (+.f64 (*.f64 -1 g) g) (pow.f64 h 3))) (pow.f64 g 3)))))","(+.f64 (/.f64 (-.f64 (*.f64 -1/2 (*.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 1/2 0) g) 2)) (*.f64 h h))) (*.f64 1/2 0)) g) (*.f64 (/.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 1/2 0) g) 2)) 0) (pow.f64 g 3)) 1/4))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 -1 g) g) g)) 2)) (pow.f64 h 2)) g)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 g (*.f64 -1 g)) h) g)) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 g (*.f64 -1 g)) g)) 2) 1) g)) 2) (*.f64 1/4 (/.f64 (*.f64 (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 -1 g) g) g)) 2)) (*.f64 (+.f64 g (*.f64 -1 g)) (+.f64 (*.f64 -1 g) g))) (pow.f64 g 4)))) (pow.f64 h 4)) g)) (*.f64 1/4 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 g (*.f64 -1 g)) g)) 2) 1) (*.f64 (+.f64 (*.f64 -1 g) g) (pow.f64 h 3))) (pow.f64 g 3))))))","(+.f64 (/.f64 (-.f64 (*.f64 -1/2 (*.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 1/2 0) g) 2)) (*.f64 h h))) (*.f64 1/2 0)) g) (fma.f64 1/4 (/.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 1/2 0) g) 2)) 0) (pow.f64 g 3)) (/.f64 (*.f64 -1/2 (*.f64 (fma.f64 1/4 (/.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 1/2 0) g) 2)) 0) (pow.f64 g 4)) (pow.f64 (/.f64 (*.f64 -1/2 (+.f64 1 (pow.f64 (/.f64 (*.f64 1/2 0) g) 2))) g) 2)) (pow.f64 h 4))) g)))","(*.f64 -2 g)","(+.f64 (*.f64 -2 g) (*.f64 -1/2 (+.f64 h (*.f64 -1 h))))","(fma.f64 -2 g (*.f64 -1/2 0))","(+.f64 (*.f64 -1/2 (/.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) 2)) g)) (+.f64 (*.f64 -2 g) (*.f64 -1/2 (+.f64 h (*.f64 -1 h)))))","(fma.f64 -1/2 (/.f64 (-.f64 (neg.f64 (*.f64 h h)) (*.f64 (*.f64 1/2 1/2) 0)) g) (fma.f64 -2 g (*.f64 -1/2 0)))","(+.f64 (*.f64 -1/2 (/.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 h) h)) 2)) g)) (+.f64 (*.f64 -2 g) (+.f64 (*.f64 -1/2 (+.f64 h (*.f64 -1 h))) (*.f64 1/4 (/.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 h 2)) (pow.f64 (*.f64 1/2 (+.f64 h (*.f64 -1 h))) 2)) (+.f64 (*.f64 -1 h) h)) (pow.f64 g 2))))))","(fma.f64 -1/2 (/.f64 (-.f64 (neg.f64 (*.f64 h h)) (*.f64 (*.f64 1/2 1/2) 0)) g) (fma.f64 -2 g (fma.f64 (/.f64 (*.f64 (+.f64 (*.f64 (*.f64 1/2 1/2) 0) (*.f64 h h)) 0) (*.f64 g g)) 1/4 (*.f64 -1/2 0))))","(*.f64 -2 g)","(+.f64 (*.f64 -2 g) (*.f64 -1/2 (/.f64 (*.f64 h (+.f64 (*.f64 -1 g) g)) g)))","(fma.f64 -2 g (/.f64 (*.f64 -1/2 0) g))","(+.f64 (*.f64 -2 g) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 h (+.f64 (*.f64 -1 g) g)) g)) (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 g (*.f64 -1 g)) g)) 2) 1) (pow.f64 h 2)) g))))","(fma.f64 -2 g (/.f64 (+.f64 (*.f64 -1/2 0) (*.f64 1/2 (*.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 1/2 0) g) 2)) (*.f64 h h)))) g))","(+.f64 (*.f64 -2 g) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 h (+.f64 (*.f64 -1 g) g)) g)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 g (*.f64 -1 g)) g)) 2) 1) (pow.f64 h 2)) g)) (*.f64 -1/4 (/.f64 (*.f64 (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 -1 g) g) g)) 2)) (*.f64 (+.f64 g (*.f64 -1 g)) (pow.f64 h 3))) (pow.f64 g 3))))))","(+.f64 (fma.f64 -2 g (/.f64 (+.f64 (*.f64 -1/2 0) (*.f64 1/2 (*.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 1/2 0) g) 2)) (*.f64 h h)))) g)) (*.f64 (/.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 1/2 0) g) 2)) 0) (pow.f64 g 3)) -1/4))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (+.f64 (*.f64 -1 h) h)) a) 1/3) (pow.f64 (cbrt.f64 1/2) 2))","(cbrt.f64 (*.f64 (*.f64 1/2 1/2) (/.f64 0 a)))","(*.f64 (pow.f64 (/.f64 (*.f64 1 g) a) 1/3) (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 -1) (cbrt.f64 1/2))))","(cbrt.f64 (*.f64 (*.f64 -1/2 2) (/.f64 g a)))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 g 11)) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (cbrt.f64 2) 2) a)) 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 1/2) (*.f64 (+.f64 (*.f64 -1 g) g) h)))))) (*.f64 (pow.f64 (/.f64 (*.f64 1 g) a) 1/3) (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 -1) (cbrt.f64 1/2)))))","(fma.f64 (*.f64 1/6 (pow.f64 (pow.f64 g -11) 1/9)) (cbrt.f64 (*.f64 (*.f64 -1/2 0) (/.f64 (pow.f64 (cbrt.f64 2) (neg.f64 2)) a))) (cbrt.f64 (*.f64 (*.f64 -1/2 2) (/.f64 g a))))"]],"time":110.372802734375,"type":"simplify"},{"compiler":[[12944,4264]],"time":73.843994140625,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","fresh",40.45762799135528],["(pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) 3)","fresh",35.26695079101959],["(/.f64 (/.f64 (*.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (cbrt.f64 1/2)) (cbrt.f64 (cbrt.f64 a))) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 2))","fresh",35.26912907577203],["(fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (/.f64 1/2 a)) (cbrt.f64 (*.f64 (/.f64 1/2 a) (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","fresh",35.756975145652035],["(cbrt.f64 (*.f64 (*.f64 -1/2 2) (/.f64 g a)))","next",16.410138671002656],["(cbrt.f64 (*.f64 (pow.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) 3) (/.f64 1/2 a)))","fresh",38.34103522602245],["(cbrt.f64 (*.f64 (*.f64 1/2 1/2) (/.f64 0 a)))","fresh",62.108294745352495],["(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (fma.f64 -1/2 (/.f64 (fma.f64 -1/4 (*.f64 (+.f64 (*.f64 (*.f64 1/2 1/2) 0) (*.f64 h h)) 0) (pow.f64 (*.f64 1/2 (-.f64 (neg.f64 (*.f64 h h)) (*.f64 (*.f64 1/2 1/2) 0))) 2)) (pow.f64 g 3)) (+.f64 (*.f64 1/2 (+.f64 0 (/.f64 (-.f64 (neg.f64 (*.f64 h h)) (*.f64 (*.f64 1/2 1/2) 0)) g))) (*.f64 (/.f64 (*.f64 (+.f64 (*.f64 (*.f64 1/2 1/2) 0) (*.f64 h h)) 0) (*.f64 g g)) -1/4)))) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","fresh",51.52369707643062],["(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","done",35.10402660533145]],"compiler":[[65,22],[35,20],[40,22],[35,19],[11,9],[34,19],[11,10],[89,67],[32,17],[65,22],[35,20],[40,22],[35,19],[11,9],[34,19],[11,10],[89,67]],"count":[[333,9]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[331,8],"picked":[1,1]}],"min-error":[12.562644474533549],"time":95.93798828125,"type":"prune"},{"compiler":[[28,18]],"locations":[["(cbrt.f64 (*.f64 (*.f64 -1/2 2) (/.f64 g a)))",14.899855609772063,true]],"time":6.168212890625,"type":"localize"},{"count":[[1,0]],"series":[["(cbrt.f64 (*.f64 (*.f64 -1/2 2) (/.f64 g a)))","a","-inf",0.27392578125],["(cbrt.f64 (*.f64 (*.f64 -1/2 2) (/.f64 g a)))","a","inf",0.344970703125],["(cbrt.f64 (*.f64 (*.f64 -1/2 2) (/.f64 g a)))","a","0",0.31103515625],["(cbrt.f64 (*.f64 (*.f64 -1/2 2) (/.f64 g a)))","g","-inf",2.297119140625],["(cbrt.f64 (*.f64 (*.f64 -1/2 2) (/.f64 g a)))","g","inf",0.417236328125],["(cbrt.f64 (*.f64 (*.f64 -1/2 2) (/.f64 g a)))","g","0",0.5078125]],"time":4.228759765625,"type":"series"},{"count":[[1,41]],"inputs":[["(cbrt.f64 (*.f64 (*.f64 -1/2 2) (/.f64 g a)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (/.f64 g a)) 0) (cbrt.f64 (neg.f64 (/.f64 g a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 0) (cbrt.f64 (neg.f64 (/.f64 g a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) (*.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (/.f64 g a))) (cbrt.f64 (neg.f64 (/.f64 g a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (neg.f64 (/.f64 g a)))) (cbrt.f64 (neg.f64 (/.f64 g a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) (*.f64 0 (cbrt.f64 (neg.f64 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (/.f64 g a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 a -1/3))) (cbrt.f64 (/.f64 g (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a))))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 4/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 -1/2)) (cbrt.f64 (*.f64 (cbrt.f64 1/4) (/.f64 (*.f64 2 g) a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))) (cbrt.f64 (pow.f64 (/.f64 g a) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 g a) 2/3)) (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 a -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 g) (neg.f64 (pow.f64 a -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 g a))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 g a) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 g a))) (cbrt.f64 (neg.f64 (pow.f64 (/.f64 g a) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 -1/2 g) a)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (cbrt.f64 (/.f64 (*.f64 -1/2 g) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/2 (*.f64 2 (cbrt.f64 (/.f64 g a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (/.f64 g a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 g a)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (cbrt.f64 (/.f64 g a))) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (neg.f64 (/.f64 g a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 -1/2 (cbrt.f64 (/.f64 g a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/2 (cbrt.f64 (/.f64 g a))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/2) (cbrt.f64 (/.f64 (*.f64 2 g) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 2 g) a)) (cbrt.f64 -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 g)) -1) (*.f64 (cbrt.f64 (neg.f64 a)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 g) (cbrt.f64 (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 g)) 1) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 g)) -1) (cbrt.f64 (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 (cbrt.f64 a))) (cbrt.f64 (pow.f64 a 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (neg.f64 g) (cbrt.f64 a))) (cbrt.f64 (pow.f64 a 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 g a)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (/.f64 g a)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 (/.f64 g a)))))))"]],"rules":[["egg-rr",41]],"time":21.943115234375,"type":"rewrite"},{"count":[[41,41]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"time":26.39208984375,"type":"simplify"},{"compiler":[[389,173]],"time":4.85498046875,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (fma.f64 -1/2 (/.f64 (fma.f64 -1/4 (*.f64 (+.f64 (*.f64 (*.f64 1/2 1/2) 0) (*.f64 h h)) 0) (pow.f64 (*.f64 1/2 (-.f64 (neg.f64 (*.f64 h h)) (*.f64 (*.f64 1/2 1/2) 0))) 2)) (pow.f64 g 3)) (+.f64 (*.f64 1/2 (+.f64 0 (/.f64 (-.f64 (neg.f64 (*.f64 h h)) (*.f64 (*.f64 1/2 1/2) 0)) g))) (*.f64 (/.f64 (*.f64 (+.f64 (*.f64 (*.f64 1/2 1/2) 0) (*.f64 h h)) 0) (*.f64 g g)) -1/4)))) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","fresh",51.52369707643062],["(*.f64 (cbrt.f64 -1/2) (cbrt.f64 (/.f64 (*.f64 2 g) a)))","fresh",16.663225156409858],["(/.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 a))","next",1.4376588778139516],["(*.f64 (cbrt.f64 (cbrt.f64 -1/2)) (cbrt.f64 (*.f64 (cbrt.f64 1/4) (/.f64 (*.f64 2 g) a))))","fresh",16.61661247723834],["(*.f64 (cbrt.f64 (neg.f64 (pow.f64 a -1/3))) (cbrt.f64 (/.f64 g (pow.f64 a 2/3))))","fresh",39.04041854518257],["(pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))) 3)","fresh",16.840834823399994],["(fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (/.f64 1/2 a)) (cbrt.f64 (*.f64 (/.f64 1/2 a) (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","fresh",35.756975145652035],["(*.f64 (cbrt.f64 2) (cbrt.f64 (/.f64 (*.f64 -1/2 g) a)))","fresh",16.53120528761108]],"compiler":[[89,67],[12,10],[9,7],[16,14],[15,12],[11,9],[35,19],[12,10],[89,67],[12,10],[9,7],[16,14],[15,12],[11,9],[35,19],[12,10]],"count":[[50,8]],"kept":[{"done":[1,0],"fresh":[7,2],"new":[41,6],"picked":[1,0]}],"min-error":[0.9536596027634288],"time":11.513916015625,"type":"prune"},{"compiler":[[18,7]],"locations":[["(cbrt.f64 (neg.f64 g))",0.05859375,true],["(cbrt.f64 a)",0.0859375,true],["(/.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 a))",0.33984375,true]],"time":4.5400390625,"type":"localize"},{"count":[[3,0]],"series":[["(cbrt.f64 (neg.f64 g))","g","-inf",0.190185546875],["(cbrt.f64 (neg.f64 g))","g","inf",0.2060546875],["(cbrt.f64 (neg.f64 g))","g","0",0.255859375],["(cbrt.f64 a)","a","-inf",0.282958984375],["(cbrt.f64 a)","a","inf",0.262939453125],["(cbrt.f64 a)","a","0",0.2529296875],["(/.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 a))","a","-inf",0.20703125],["(/.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 a))","a","inf",0.201904296875],["(/.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 a))","a","0",0.204833984375],["(/.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 a))","g","-inf",0.19091796875],["(/.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 a))","g","inf",0.208984375],["(/.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 a))","g","0",0.259033203125]],"time":2.840087890625,"type":"series"},{"count":[[3,117]],"inputs":[["(/.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 a))","(cbrt.f64 a)","(cbrt.f64 (neg.f64 g))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (neg.f64 (/.f64 g a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (/.f64 g a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 a -1/3)) (cbrt.f64 (*.f64 (neg.f64 g) (pow.f64 a -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (neg.f64 g) (cbrt.f64 a))) (cbrt.f64 (pow.f64 a -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3) (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g))) (cbrt.f64 (/.f64 (pow.f64 g 2/3) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 g) (neg.f64 (pow.f64 a -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 a -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 a -1/3) (cbrt.f64 (neg.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 g 2/3) a)) (cbrt.f64 (cbrt.f64 (neg.f64 g))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 a -1/3)) (cbrt.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 g) (pow.f64 a -2/3))) (cbrt.f64 (pow.f64 a -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 a -1/3))) (cbrt.f64 (*.f64 g (pow.f64 a -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (/.f64 g a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 g a)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3) (cbrt.f64 (cbrt.f64 g))) (cbrt.f64 (neg.f64 (pow.f64 a -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 g)) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3)) (cbrt.f64 (neg.f64 (pow.f64 a -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (neg.f64 g) (cbrt.f64 a)) (cbrt.f64 (pow.f64 a 2/3)))) (/.f64 1 (cbrt.f64 (pow.f64 (cbrt.f64 a) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3) (cbrt.f64 (cbrt.f64 (neg.f64 g)))) (cbrt.f64 (pow.f64 a -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3)) (cbrt.f64 (pow.f64 a -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 a -1/3)) (cbrt.f64 (neg.f64 g))) (cbrt.f64 (pow.f64 a -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))) (cbrt.f64 (pow.f64 g 2/3))) (cbrt.f64 (pow.f64 a -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 g (cbrt.f64 a))) (cbrt.f64 (neg.f64 (pow.f64 a -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3) (*.f64 0 (cbrt.f64 (cbrt.f64 (/.f64 g a)))))) (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (neg.f64 (/.f64 g a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (neg.f64 g) (cbrt.f64 a)) (cbrt.f64 (pow.f64 a 2/3)))) (cbrt.f64 (pow.f64 (cbrt.f64 a) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 (neg.f64 g) (cbrt.f64 a)) (cbrt.f64 (pow.f64 a 2/3))))) (neg.f64 (cbrt.f64 (pow.f64 (cbrt.f64 a) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3) (cbrt.f64 (cbrt.f64 (neg.f64 g))))) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (*.f64 (neg.f64 g) (pow.f64 a -2/3)))) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 g (pow.f64 a -2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 g a) 2)) (cbrt.f64 (/.f64 (neg.f64 g) (cbrt.f64 a))))) (cbrt.f64 (cbrt.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (neg.f64 g) (cbrt.f64 (cbrt.f64 a)))) (cbrt.f64 (pow.f64 (pow.f64 a 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (neg.f64 g) (cbrt.f64 a)) (pow.f64 (cbrt.f64 a) 4/3))) (cbrt.f64 (cbrt.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 (neg.f64 g) (cbrt.f64 a))) (cbrt.f64 (pow.f64 (/.f64 g a) 2)))) (cbrt.f64 (cbrt.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 g) (cbrt.f64 (pow.f64 (/.f64 g a) 2)))) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 (neg.f64 g) (cbrt.f64 a))) (pow.f64 g 2/3))) (cbrt.f64 (pow.f64 (pow.f64 a 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 g (cbrt.f64 a))) (cbrt.f64 (neg.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (neg.f64 g) (cbrt.f64 a)) (cbrt.f64 (cbrt.f64 a)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 a)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 g a) 2)) (cbrt.f64 g))) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 a -1/3)) (neg.f64 g))) (cbrt.f64 (pow.f64 (pow.f64 a 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 a -1/3)) (*.f64 (neg.f64 g) (pow.f64 a -2/3)))) (cbrt.f64 (cbrt.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 g) (cbrt.f64 (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (neg.f64 g) (cbrt.f64 a))) (cbrt.f64 (pow.f64 a 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 a -1/3)) (cbrt.f64 (neg.f64 g))) (cbrt.f64 (pow.f64 a 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3) (cbrt.f64 (cbrt.f64 (neg.f64 g)))) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3) (cbrt.f64 (cbrt.f64 g))) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))) (cbrt.f64 (pow.f64 g 2/3))) (cbrt.f64 (pow.f64 a 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3)) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 g)) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3)) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 g) (pow.f64 a -2/3))) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 g a)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3) (cbrt.f64 (cbrt.f64 g)))) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (cbrt.f64 g)) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3))) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (pow.f64 a -1/3)) (cbrt.f64 (neg.f64 g)))) (cbrt.f64 (neg.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))) (cbrt.f64 (pow.f64 g 2/3)))) (cbrt.f64 (neg.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) (pow.f64 g 2/3))) (cbrt.f64 (pow.f64 a 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (pow.f64 a -1/3)) g)) (cbrt.f64 (pow.f64 a 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 g a) 2)) (cbrt.f64 (neg.f64 g)))) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 (pow.f64 (/.f64 g a) 2)))) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 a -1/3) (neg.f64 g))) (cbrt.f64 (pow.f64 a 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (-.f64 0 (*.f64 a g))) (pow.f64 a 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 g a)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (cbrt.f64 (/.f64 g a)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (/.f64 g a)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 (/.f64 g a)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 a) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 a) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 a))) (cbrt.f64 (pow.f64 (pow.f64 a 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (cbrt.f64 (pow.f64 a 2/3)) 0)) (+.f64 0 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 a 2/3)) (+.f64 0 (*.f64 (cbrt.f64 (cbrt.f64 a)) 0))) (-.f64 (cbrt.f64 (cbrt.f64 a)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (cbrt.f64 a))) (cbrt.f64 (neg.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 a)) (cbrt.f64 (pow.f64 a 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 a 2/3)) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 a)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (cbrt.f64 (pow.f64 a 2/3)) (*.f64 0 (neg.f64 (cbrt.f64 (cbrt.f64 a)))))) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 a)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 a 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 a)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 a)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (neg.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 g)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 (neg.f64 g)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 g)) (cbrt.f64 (neg.f64 (pow.f64 g 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g)))) (cbrt.f64 (pow.f64 (pow.f64 g 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 g) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (cbrt.f64 (pow.f64 g 2/3)) 0)) (+.f64 0 (cbrt.f64 (cbrt.f64 (neg.f64 g)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (cbrt.f64 (pow.f64 g 2/3)) (*.f64 0 (cbrt.f64 (cbrt.f64 g))))) (cbrt.f64 (cbrt.f64 (neg.f64 g))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 g 2/3)) (+.f64 0 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g))) 0))) (-.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g))) (cbrt.f64 (pow.f64 g 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 g 2/3)) (cbrt.f64 (cbrt.f64 (neg.f64 g))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (neg.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 g)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 g) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 g)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 g) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 g)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 g))))))"]],"rules":[["egg-rr",22],["egg-rr",22],["egg-rr",73]],"time":50.823974609375,"type":"rewrite"},{"count":[[117,117]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"time":27.012939453125,"type":"simplify"},{"compiler":[[1383,628]],"time":15.69189453125,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (fma.f64 -1/2 (/.f64 (fma.f64 -1/4 (*.f64 (+.f64 (*.f64 (*.f64 1/2 1/2) 0) (*.f64 h h)) 0) (pow.f64 (*.f64 1/2 (-.f64 (neg.f64 (*.f64 h h)) (*.f64 (*.f64 1/2 1/2) 0))) 2)) (pow.f64 g 3)) (+.f64 (*.f64 1/2 (+.f64 0 (/.f64 (-.f64 (neg.f64 (*.f64 h h)) (*.f64 (*.f64 1/2 1/2) 0)) g))) (*.f64 (/.f64 (*.f64 (+.f64 (*.f64 (*.f64 1/2 1/2) 0) (*.f64 h h)) 0) (*.f64 g g)) -1/4)))) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","fresh",51.52369707643062],["(*.f64 (cbrt.f64 -1/2) (cbrt.f64 (/.f64 (*.f64 2 g) a)))","fresh",16.663225156409858],["(/.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 3))","next",1.8094903993601108],["(/.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 a -1/3)) (neg.f64 g))) (cbrt.f64 (pow.f64 (pow.f64 a 2/3) 4/3)))","fresh",35.16003605103231],["(*.f64 (cbrt.f64 (cbrt.f64 -1/2)) (cbrt.f64 (*.f64 (cbrt.f64 1/4) (/.f64 (*.f64 2 g) a))))","fresh",16.61661247723834],["(/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g))) 3) (cbrt.f64 a))","fresh",1.9076582088398757],["(/.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 a))","done",1.4376588778139516],["(/.f64 (cbrt.f64 (/.f64 (/.f64 (neg.f64 g) (cbrt.f64 a)) (cbrt.f64 (cbrt.f64 a)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 a)) 5)))","fresh",6.632414395626667],["(cbrt.f64 (neg.f64 (/.f64 g a)))","fresh",16.410138671002656],["(pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))) 3)","fresh",16.840834823399994],["(fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (/.f64 1/2 a)) (cbrt.f64 (*.f64 (/.f64 1/2 a) (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","fresh",35.756975145652035],["(/.f64 (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g)))) (cbrt.f64 (pow.f64 (pow.f64 g 2/3) 4/3))) (cbrt.f64 a))","fresh",38.021426264155934]],"compiler":[[89,67],[12,10],[12,10],[18,15],[16,14],[12,10],[9,7],[20,13],[8,6],[11,9],[35,19],[18,15],[89,67],[12,10],[12,10],[18,15],[16,14],[12,10],[20,13],[8,6],[11,9],[35,19],[18,15]],"count":[[125,12]],"kept":[{"done":[0,0],"fresh":[7,5],"new":[117,6],"picked":[1,1]}],"min-error":[0.9184999782739186],"time":24.674072265625,"type":"prune"},{"compiler":[[30,13]],"locations":[["(cbrt.f64 a)",0.0859375,false],["(cbrt.f64 (cbrt.f64 a))",0.08984375,true],["(/.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 3))",0.33984375,true],["(pow.f64 (cbrt.f64 (cbrt.f64 a)) 3)",0.6697427246741666,true]],"time":7.742919921875,"type":"localize"},{"count":[[3,24]],"series":[["(cbrt.f64 (cbrt.f64 a))","a","-inf",0.18603515625],["(cbrt.f64 (cbrt.f64 a))","a","inf",0.158935546875],["(cbrt.f64 (cbrt.f64 a))","a","0",0.16015625],["(/.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 3))","a","-inf",0.216064453125],["(/.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 3))","a","inf",0.218017578125],["(/.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 3))","a","0",0.192138671875],["(/.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 3))","g","-inf",0.2021484375],["(/.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 3))","g","inf",0.201904296875],["(/.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 3))","g","0",0.216064453125],["(pow.f64 (cbrt.f64 (cbrt.f64 a)) 3)","a","-inf",2.44287109375],["(pow.f64 (cbrt.f64 (cbrt.f64 a)) 3)","a","inf",6.10595703125],["(pow.f64 (cbrt.f64 (cbrt.f64 a)) 3)","a","0",18.93994140625]],"time":29.402099609375,"type":"series"},{"count":[[3,142]],"inputs":[["(pow.f64 (cbrt.f64 (cbrt.f64 a)) 3)","(/.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 3))","(cbrt.f64 (cbrt.f64 a))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 a) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 a) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 a))) (cbrt.f64 (pow.f64 (cbrt.f64 a) 8/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 a) 8/3)) (cbrt.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 a)) 7/3) (cbrt.f64 (cbrt.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 a 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 a 2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (cbrt.f64 a))) (cbrt.f64 (neg.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 a)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (cbrt.f64 (pow.f64 a 2/3)) 0)) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (cbrt.f64 (pow.f64 a 2/3)) (*.f64 0 (neg.f64 (cbrt.f64 (cbrt.f64 a)))))) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 a 2/3)) (-.f64 (cbrt.f64 (cbrt.f64 a)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 a)) (cbrt.f64 (pow.f64 a 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 a 2/3)) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 a)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 a 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 a)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 a)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (neg.f64 (/.f64 g a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (/.f64 g a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 a -2/3))) (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 g g) a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 g g) a))) (cbrt.f64 (*.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 a -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3) (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 g) (neg.f64 (pow.f64 a -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g))) (cbrt.f64 (/.f64 (pow.f64 g 2/3) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 a -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 a -1/3) (cbrt.f64 (neg.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 a -2/3)) (cbrt.f64 (/.f64 (neg.f64 g) (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 a -1/3)) (cbrt.f64 (*.f64 (neg.f64 g) (pow.f64 a -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 g) (pow.f64 a -2/3))) (cbrt.f64 (pow.f64 a -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (neg.f64 g) (cbrt.f64 a))) (cbrt.f64 (pow.f64 a -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 a -1/3)) (cbrt.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 g 2/3) a)) (cbrt.f64 (cbrt.f64 (neg.f64 g))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (/.f64 g a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 g a)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (neg.f64 g) (cbrt.f64 a)) (cbrt.f64 (cbrt.f64 a)))) (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 a)) 5/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 a -1/3)) (cbrt.f64 (neg.f64 g))) (cbrt.f64 (pow.f64 a -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g))) (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 g g) a)))) (cbrt.f64 (pow.f64 a -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))) (cbrt.f64 (pow.f64 g 2/3))) (cbrt.f64 (pow.f64 a -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (neg.f64 g) (pow.f64 a -2/3)) (cbrt.f64 (pow.f64 a 2/3)))) (cbrt.f64 (cbrt.f64 (pow.f64 a -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 g)) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3)) (cbrt.f64 (neg.f64 (pow.f64 a -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 g (pow.f64 a 2/3))) (cbrt.f64 (neg.f64 (pow.f64 a -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 g (pow.f64 a 2/3))) 1) (cbrt.f64 (neg.f64 (pow.f64 a -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3) (cbrt.f64 (cbrt.f64 g))) (cbrt.f64 (neg.f64 (pow.f64 a -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (neg.f64 g) (cbrt.f64 (cbrt.f64 a)))) (/.f64 1 (cbrt.f64 (pow.f64 (cbrt.f64 a) 8/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (neg.f64 g) (cbrt.f64 a)) (cbrt.f64 (pow.f64 a 2/3)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 a))) -4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 a -2/3))) (cbrt.f64 (pow.f64 g 2/3))) (cbrt.f64 (pow.f64 a -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3) (cbrt.f64 (cbrt.f64 (neg.f64 g)))) (cbrt.f64 (pow.f64 a -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3)) (cbrt.f64 (pow.f64 a -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 a -2/3)) (cbrt.f64 (neg.f64 g))) (cbrt.f64 (pow.f64 a -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 g (cbrt.f64 a))) (cbrt.f64 (neg.f64 (pow.f64 a -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (neg.f64 g) (cbrt.f64 a)) (cbrt.f64 (pow.f64 a 4/3)))) (pow.f64 (cbrt.f64 (cbrt.f64 a)) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (neg.f64 g) (pow.f64 a -2/3)) (cbrt.f64 (cbrt.f64 a)))) (pow.f64 (cbrt.f64 (cbrt.f64 a)) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (neg.f64 g) (pow.f64 (cbrt.f64 a) 7/3))) (pow.f64 (cbrt.f64 (cbrt.f64 a)) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3) (*.f64 0 (cbrt.f64 (cbrt.f64 (/.f64 g a)))))) (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (neg.f64 (/.f64 g a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (neg.f64 g) (cbrt.f64 (cbrt.f64 a)))) (cbrt.f64 (pow.f64 (cbrt.f64 a) 8/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 (neg.f64 g) (cbrt.f64 a)) (cbrt.f64 (cbrt.f64 a))))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 a)) 5/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (pow.f64 a -1/3)) (cbrt.f64 (neg.f64 g)))) (cbrt.f64 (neg.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g))) (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 g g) a))))) (cbrt.f64 (neg.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 g (cbrt.f64 a))) (cbrt.f64 (neg.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))) (cbrt.f64 (pow.f64 g 2/3)))) (cbrt.f64 (neg.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 (neg.f64 g) (cbrt.f64 (cbrt.f64 a))))) (neg.f64 (cbrt.f64 (pow.f64 (cbrt.f64 a) 8/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 (neg.f64 g) (cbrt.f64 a)) (cbrt.f64 (pow.f64 a 2/3))))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 a 4/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 (neg.f64 g) (cbrt.f64 a)) (cbrt.f64 (pow.f64 a 4/3))))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 a 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 (*.f64 (neg.f64 g) (pow.f64 a -2/3)) (cbrt.f64 (cbrt.f64 a))))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 a 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 (neg.f64 g) (pow.f64 (cbrt.f64 a) 7/3)))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 a 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (neg.f64 (/.f64 g a)) 2/3) (cbrt.f64 (*.f64 (neg.f64 g) (pow.f64 a -2/3))))) (cbrt.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 g) (cbrt.f64 (pow.f64 a -2/3)))) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 g) (pow.f64 a -2/3))) (pow.f64 (neg.f64 (/.f64 g a)) 2/3))) (cbrt.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 (neg.f64 g) (pow.f64 a -2/3)) (cbrt.f64 (pow.f64 a 2/3)))) (cbrt.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (neg.f64 g) (cbrt.f64 a)) (cbrt.f64 (cbrt.f64 a)))) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 5/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (neg.f64 g) (cbrt.f64 a)) (cbrt.f64 (pow.f64 a 2/3)))) (cbrt.f64 (cbrt.f64 (pow.f64 a 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (neg.f64 g) (cbrt.f64 a)) (cbrt.f64 (pow.f64 a 4/3)))) (cbrt.f64 (cbrt.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 (neg.f64 g) (pow.f64 a -2/3)) (cbrt.f64 (cbrt.f64 a)))) (cbrt.f64 (cbrt.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (neg.f64 g) (pow.f64 (cbrt.f64 a) 7/3))) (cbrt.f64 (cbrt.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 g) (cbrt.f64 (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 g) (pow.f64 a -2/3))) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 a -2/3)) (cbrt.f64 (neg.f64 g))) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 a -2/3))) (cbrt.f64 (pow.f64 g 2/3))) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3) (cbrt.f64 (cbrt.f64 (neg.f64 g)))) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3) (cbrt.f64 (cbrt.f64 g))) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3)) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 g)) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3)) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 g (pow.f64 a 2/3))) 1) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 g (pow.f64 a 2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 g a)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 (*.f64 (neg.f64 g) (pow.f64 a -2/3)) (cbrt.f64 (pow.f64 a 2/3))))) (neg.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (cbrt.f64 g)) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3))) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 g (pow.f64 a 2/3))) 1)) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3) (cbrt.f64 (cbrt.f64 g)))) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 a -2/3))) (cbrt.f64 (pow.f64 g 2/3)))) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3) (cbrt.f64 (cbrt.f64 (neg.f64 g))))) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (pow.f64 a -2/3)) (cbrt.f64 (neg.f64 g)))) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (neg.f64 (/.f64 g a)) 2/3) (cbrt.f64 g))) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 (neg.f64 g) (cbrt.f64 a))) (pow.f64 (neg.f64 (/.f64 g a)) 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 (neg.f64 (/.f64 g a)) 2/3))) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (neg.f64 (/.f64 g a)) 2/3) (cbrt.f64 (/.f64 (neg.f64 g) (cbrt.f64 a))))) (cbrt.f64 (cbrt.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 g) (pow.f64 (neg.f64 (/.f64 g a)) 2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (neg.f64 (/.f64 g a)) 2/3) (cbrt.f64 (neg.f64 g)))) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))) (cbrt.f64 (pow.f64 g 2/3))) (cbrt.f64 (pow.f64 a 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 a -1/3)) (cbrt.f64 (neg.f64 g))) (cbrt.f64 (pow.f64 a 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g))) (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 g g) a)))) (cbrt.f64 (pow.f64 a 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (neg.f64 g) (cbrt.f64 a))) (cbrt.f64 (pow.f64 a 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 g a)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 g a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (cbrt.f64 (/.f64 g a)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (/.f64 g a)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 (/.f64 g a)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (cbrt.f64 a)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 a))) (cbrt.f64 (cbrt.f64 (pow.f64 a 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 a 2/3))) (cbrt.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 a)))) (cbrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 a) 8/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 a)) 7/3)) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 a 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (cbrt.f64 a))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 a)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (cbrt.f64 a))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (cbrt.f64 a)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 a) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 a))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 a)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (cbrt.f64 a))))))"]],"rules":[["egg-rr",18],["egg-rr",98],["egg-rr",26]],"time":53.572998046875,"type":"rewrite"},{"count":[[166,147]],"inputs":[["(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 a 1/3))","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 a 1/3))","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 a 1/3))","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 a 1/3))","(pow.f64 a 1/3)","(pow.f64 a 1/3)","(pow.f64 a 1/3)","(pow.f64 a 1/3)","(*.f64 (pow.f64 (*.f64 -1 a) 1/3) (*.f64 (pow.f64 1 1/9) (cbrt.f64 -1)))","(*.f64 (pow.f64 (*.f64 -1 a) 1/3) (*.f64 (pow.f64 1 1/9) (cbrt.f64 -1)))","(*.f64 (pow.f64 (*.f64 -1 a) 1/3) (*.f64 (pow.f64 1 1/9) (cbrt.f64 -1)))","(*.f64 (pow.f64 (*.f64 -1 a) 1/3) (*.f64 (pow.f64 1 1/9) (cbrt.f64 -1)))","(pow.f64 a 1/9)","(pow.f64 a 1/9)","(pow.f64 a 1/9)","(pow.f64 a 1/9)","(pow.f64 a 1/9)","(pow.f64 a 1/9)","(pow.f64 a 1/9)","(pow.f64 a 1/9)","(*.f64 (pow.f64 (*.f64 -1 a) 1/9) (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3))","(*.f64 (pow.f64 (*.f64 -1 a) 1/9) (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3))","(*.f64 (pow.f64 (*.f64 -1 a) 1/9) (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3))","(*.f64 (pow.f64 (*.f64 -1 a) 1/9) (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 a 1/3))","(cbrt.f64 a)","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 a 1/3))","(cbrt.f64 a)","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 a 1/3))","(cbrt.f64 a)","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 a 1/3))","(cbrt.f64 a)","(pow.f64 a 1/3)","(cbrt.f64 a)","(pow.f64 a 1/3)","(cbrt.f64 a)","(pow.f64 a 1/3)","(cbrt.f64 a)","(pow.f64 a 1/3)","(cbrt.f64 a)","(*.f64 (pow.f64 (*.f64 -1 a) 1/3) (*.f64 (pow.f64 1 1/9) (cbrt.f64 -1)))","(cbrt.f64 a)","(*.f64 (pow.f64 (*.f64 -1 a) 1/3) (*.f64 (pow.f64 1 1/9) (cbrt.f64 -1)))","(cbrt.f64 a)","(*.f64 (pow.f64 (*.f64 -1 a) 1/3) (*.f64 (pow.f64 1 1/9) (cbrt.f64 -1)))","(cbrt.f64 a)","(*.f64 (pow.f64 (*.f64 -1 a) 1/3) (*.f64 (pow.f64 1 1/9) (cbrt.f64 -1)))","(cbrt.f64 a)","(pow.f64 a 1/9)","(pow.f64 a 1/9)","(pow.f64 a 1/9)","(pow.f64 a 1/9)","(pow.f64 a 1/9)","(pow.f64 a 1/9)","(pow.f64 a 1/9)","(pow.f64 a 1/9)","(*.f64 (pow.f64 (*.f64 -1 a) 1/9) (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3))","(neg.f64 (pow.f64 (neg.f64 a) 1/9))","(*.f64 (pow.f64 (*.f64 -1 a) 1/9) (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3))","(neg.f64 (pow.f64 (neg.f64 a) 1/9))","(*.f64 (pow.f64 (*.f64 -1 a) 1/9) (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3))","(neg.f64 (pow.f64 (neg.f64 a) 1/9))","(*.f64 (pow.f64 (*.f64 -1 a) 1/9) (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3))","(neg.f64 (pow.f64 (neg.f64 a) 1/9))"]],"time":83.1650390625,"type":"simplify"},{"compiler":[[2220,1046]],"time":24.177978515625,"type":"eval"},{"alts":[["(/.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 a -1/3)) (neg.f64 g))) (cbrt.f64 (pow.f64 (pow.f64 a 2/3) 4/3)))","fresh",35.16003605103231],["(*.f64 (cbrt.f64 (cbrt.f64 -1/2)) (cbrt.f64 (*.f64 (cbrt.f64 1/4) (/.f64 (*.f64 2 g) a))))","fresh",16.61661247723834],["(/.f64 (cbrt.f64 (/.f64 (/.f64 (neg.f64 g) (cbrt.f64 a)) (cbrt.f64 (cbrt.f64 a)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 a)) 5)))","fresh",6.632414395626667],["(/.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 a))) 3) 3))","fresh",2.654489785182187],["(/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g))) 3) (cbrt.f64 a))","fresh",1.9076582088398757],["(/.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 a))","done",1.4376588778139516],["(*.f64 (cbrt.f64 (/.f64 (neg.f64 g) (pow.f64 (cbrt.f64 a) 7/3))) (pow.f64 (cbrt.f64 (cbrt.f64 a)) -2/3))","fresh",39.24013750465875],["(/.f64 (cbrt.f64 (neg.f64 g)) (*.f64 (pow.f64 (*.f64 -1 a) 1/3) (*.f64 (pow.f64 1 1/9) (cbrt.f64 -1))))","fresh",35.82671304016335],["(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (fma.f64 -1/2 (/.f64 (fma.f64 -1/4 (*.f64 (+.f64 (*.f64 (*.f64 1/2 1/2) 0) (*.f64 h h)) 0) (pow.f64 (*.f64 1/2 (-.f64 (neg.f64 (*.f64 h h)) (*.f64 (*.f64 1/2 1/2) 0))) 2)) (pow.f64 g 3)) (+.f64 (*.f64 1/2 (+.f64 0 (/.f64 (-.f64 (neg.f64 (*.f64 h h)) (*.f64 (*.f64 1/2 1/2) 0)) g))) (*.f64 (/.f64 (*.f64 (+.f64 (*.f64 (*.f64 1/2 1/2) 0) (*.f64 h h)) 0) (*.f64 g g)) -1/4)))) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","fresh",51.52369707643062],["(cbrt.f64 (neg.f64 (/.f64 g a)))","fresh",16.410138671002656],["(pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))) 3)","fresh",16.840834823399994],["(fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (/.f64 1/2 a)) (cbrt.f64 (*.f64 (/.f64 1/2 a) (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","fresh",35.756975145652035],["(/.f64 (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g)))) (cbrt.f64 (pow.f64 (pow.f64 g 2/3) 4/3))) (cbrt.f64 a))","fresh",38.021426264155934]],"compiler":[[18,15],[16,14],[20,13],[15,13],[12,10],[9,7],[17,13],[19,17],[89,67],[8,6],[11,9],[35,19],[18,15]],"count":[[181,13]],"kept":[{"done":[1,1],"fresh":[10,9],"new":[169,3],"picked":[1,0]}],"min-error":[0.9184849125666585],"time":32.623046875,"type":"prune"},{"accuracy":[1.4376588778139516],"baseline":[1.4376588778139516],"branch":[["g",1.4376588778139516,1],["h",1.4376588778139519,1],["a",1.4376588778139519,1],["(+.f64 (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (+.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))) (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (-.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))))",1.4376588778139516,1],["(/.f64 1 (*.f64 2 a))",1.4376588778139516,1],["(*.f64 2 a)",1.4376588778139519,1],["(*.f64 h h)",1.4376588778139519,1]],"compiler":[[4,3],[4,3],[4,3],[40,23],[8,7],[6,5],[6,4],[534,245]],"count":[[25,1]],"inputs":[["(/.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 a))) 3) 3))","(*.f64 (cbrt.f64 (/.f64 (neg.f64 g) (pow.f64 (cbrt.f64 a) 7/3))) (pow.f64 (cbrt.f64 (cbrt.f64 a)) -2/3))","(/.f64 (cbrt.f64 (neg.f64 g)) (*.f64 (pow.f64 (*.f64 -1 a) 1/3) (*.f64 (pow.f64 1 1/9) (cbrt.f64 -1))))","(/.f64 (cbrt.f64 (neg.f64 g)) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 3))","(/.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 a -1/3)) (neg.f64 g))) (cbrt.f64 (pow.f64 (pow.f64 a 2/3) 4/3)))","(/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g))) 3) (cbrt.f64 a))","(/.f64 (cbrt.f64 (/.f64 (/.f64 (neg.f64 g) (cbrt.f64 a)) (cbrt.f64 (cbrt.f64 a)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 a)) 5)))","(cbrt.f64 (neg.f64 (/.f64 g a)))","(/.f64 (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (neg.f64 g)))) (cbrt.f64 (pow.f64 (pow.f64 g 2/3) 4/3))) (cbrt.f64 a))","(*.f64 (cbrt.f64 -1/2) (cbrt.f64 (/.f64 (*.f64 2 g) a)))","(/.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 a))","(*.f64 (cbrt.f64 (cbrt.f64 -1/2)) (cbrt.f64 (*.f64 (cbrt.f64 1/4) (/.f64 (*.f64 2 g) a))))","(*.f64 (cbrt.f64 (neg.f64 (pow.f64 a -1/3))) (cbrt.f64 (/.f64 g (pow.f64 a 2/3))))","(pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 g a)))) 3)","(*.f64 (cbrt.f64 2) (cbrt.f64 (/.f64 (*.f64 -1/2 g) a)))","(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))))))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","(pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))) 3)","(/.f64 (/.f64 (*.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) (cbrt.f64 1/2)) (cbrt.f64 (cbrt.f64 a))) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 2))","(fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (/.f64 1/2 a)) (cbrt.f64 (*.f64 (/.f64 1/2 a) (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","(cbrt.f64 (*.f64 (*.f64 -1/2 2) (/.f64 g a)))","(cbrt.f64 (*.f64 (pow.f64 (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))) 3) (/.f64 1/2 a)))","(cbrt.f64 (*.f64 (*.f64 1/2 1/2) (/.f64 0 a)))","(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (fma.f64 -1/2 (/.f64 (fma.f64 -1/4 (*.f64 (+.f64 (*.f64 (*.f64 1/2 1/2) 0) (*.f64 h h)) 0) (pow.f64 (*.f64 1/2 (-.f64 (neg.f64 (*.f64 h h)) (*.f64 (*.f64 1/2 1/2) 0))) 2)) (pow.f64 g 3)) (+.f64 (*.f64 1/2 (+.f64 0 (/.f64 (-.f64 (neg.f64 (*.f64 h h)) (*.f64 (*.f64 1/2 1/2) 0)) g))) (*.f64 (/.f64 (*.f64 (+.f64 (*.f64 (*.f64 1/2 1/2) 0) (*.f64 h h)) 0) (*.f64 g g)) -1/4)))) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","(*.f64 (cbrt.f64 (/.f64 1/2 a)) (+.f64 (cbrt.f64 (-.f64 (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h))) g)) (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (+.f64 g h) (-.f64 g h)))))))","(+.f64 (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (+.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))) (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (-.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))))"]],"link":["."],"name":["2-ancestry mixing, positive discriminant"],"oracle":[64.0],"outputs":[["(/.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 a))"]],"time":57.721923828125,"times":[["g",7.595947265625],["h",7.533935546875],["a",7.572021484375],["(+.f64 (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (+.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))) (cbrt.f64 (*.f64 (/.f64 1 (*.f64 2 a)) (-.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))))",6.261962890625],["(/.f64 1 (*.f64 2 a))",7.81591796875],["(*.f64 2 a)",7.66015625],["(*.f64 h h)",4.235107421875]],"type":"regimes"},{"compiler":[[9,7]],"inputs":[["(/.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 a))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 a))","(cbrt.f64 (neg.f64 (/.f64 g a)))"]],"stop":[["fuel",1]],"time":39.846923828125,"type":"simplify"},{"time":0.02001953125,"type":"soundness"},{"compiler":[[9,7]],"remove-preprocessing":[[]],"time":7.9521484375,"type":"end"}]
[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.4680636897137447,0.4383221427631838,0.0936141675230715],[11,0.41345625924714113,0.5197457221196373,0.06679801863322155],[10,0.34324670579007943,0.5928806736374099,0.06387262057251064],[9,0.2496339678473305,0.7098965960658461,0.04046943608682341],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":86.880859375,"type":"analyze"},{"outcomes":[["body",256,"invalid",52.1962890625,1260],["body",1024,"valid",13.396484375,131],["body",512,"valid",7.611083984375,105],["body",2048,"valid",0.277099609375,2],["body",256,"valid",324.365234375,8018]],"time":407.340087890625,"type":"sample"},{"compiler":[[12,8]],"inputs":[["0","1","2"],["(+.f64 (*.f64 x (+.f64 y z)) (*.f64 z 5))","(+.f64 (*.f64 y (+.f64 x z)) (*.f64 z 5))","(+.f64 (*.f64 z (+.f64 y x)) (*.f64 x 5))","(+.f64 (*.f64 x (+.f64 z y)) (*.f64 y 5))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (*.f64 x (+.f64 y z)) (*.f64 z 5))","(fma.f64 x (+.f64 y z) (*.f64 z 5))","(+.f64 (*.f64 y (+.f64 x z)) (*.f64 z 5))","(fma.f64 y (+.f64 x z) (*.f64 z 5))","(+.f64 (*.f64 z (+.f64 y x)) (*.f64 x 5))","(fma.f64 z (+.f64 y x) (*.f64 x 5))","(+.f64 (*.f64 x (+.f64 z y)) (*.f64 y 5))","(fma.f64 x (+.f64 y z) (*.f64 y 5))"]],"symmetry":[[]],"time":70.675048828125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (*.f64 x (+.f64 y z)) (*.f64 z 5))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 x (+.f64 y z)) (*.f64 z 5))","(fma.f64 x (+.f64 y z) (*.f64 z 5))"]],"time":18.364990234375,"type":"simplify"},{"compiler":[[20,11]],"time":0.36083984375,"type":"eval"},{"alts":[["(fma.f64 x (+.f64 y z) (*.f64 z 5))","next",0.05078125]],"compiler":[[11,7],[11,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.05078125],"time":0.840087890625,"type":"prune"},{"compiler":[[21,10]],"locations":[["(fma.f64 x (+.f64 y z) (*.f64 z 5))",0.0234375,true]],"time":6.030029296875,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 x (+.f64 y z) (*.f64 z 5))","z","-inf",0.3740234375],["(fma.f64 x (+.f64 y z) (*.f64 z 5))","z","inf",0.39404296875],["(fma.f64 x (+.f64 y z) (*.f64 z 5))","z","0",0.3291015625],["(fma.f64 x (+.f64 y z) (*.f64 z 5))","y","-inf",0.39404296875],["(fma.f64 x (+.f64 y z) (*.f64 z 5))","y","inf",0.2958984375],["(fma.f64 x (+.f64 y z) (*.f64 z 5))","y","0",0.322998046875],["(fma.f64 x (+.f64 y z) (*.f64 z 5))","x","-inf",0.387939453125],["(fma.f64 x (+.f64 y z) (*.f64 z 5))","x","inf",0.31005859375],["(fma.f64 x (+.f64 y z) (*.f64 z 5))","x","0",0.452880859375]],"time":3.39404296875,"type":"series"},{"count":[[1,42]],"inputs":[["(fma.f64 x (+.f64 y z) (*.f64 z 5))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 z 5) (*.f64 x y)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 z 5) (*.f64 x z)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x z) (+.f64 (*.f64 x y) (*.f64 z 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (+.f64 (*.f64 x z) (*.f64 z 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) (*.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) 0) (fma.f64 x (+.f64 y z) (*.f64 z 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y z)) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) (*.f64 0 (fma.f64 x (+.f64 y z) (*.f64 z 5))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (+.f64 y z) (*.f64 z 5))) (fma.f64 x (+.f64 y z) (*.f64 z 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z 5) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5))) (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) 2/3) (cbrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (+.f64 y z) (*.f64 z 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 y z) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (+.f64 y z))) (pow.f64 (+.f64 y z) 2/3) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y z) x (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (+.f64 y z)) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2)) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 5) (*.f64 z (sqrt.f64 5)) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) 5) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (sqrt.f64 5)) (sqrt.f64 5) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 5)) (cbrt.f64 25) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z 5)) (pow.f64 (*.f64 z 5) 2/3) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 5) (*.f64 (cbrt.f64 25) z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 z 5) 2/3) (cbrt.f64 (*.f64 z 5)) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 125 z)) (pow.f64 z 2/3) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 z 5)) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 5 z (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z 5 (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (+.f64 y z)) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (+.f64 y z)) 1 (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z 5) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z 5) 1 (*.f64 x (+.f64 y z)))))))"]],"rules":[["egg-rr",42]],"time":22.177001953125,"type":"rewrite"},{"count":[[78,53]],"inputs":[["(*.f64 5 z)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(+.f64 (*.f64 z x) (*.f64 5 z))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(*.f64 y x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(*.f64 y x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(*.f64 -1 (*.f64 z (-.f64 (*.f64 -1 x) 5)))","(+.f64 (*.f64 -1 (*.f64 z (-.f64 (*.f64 -1 x) 5))) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 z (-.f64 (*.f64 -1 x) 5))) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 z (-.f64 (*.f64 -1 x) 5))) (*.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 5 z)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 z x) (*.f64 5 z))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(*.f64 y x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(*.f64 y x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(*.f64 -1 (*.f64 z (-.f64 (*.f64 -1 x) 5)))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 -1 (*.f64 z (-.f64 (*.f64 -1 x) 5))) (*.f64 y x))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 -1 (*.f64 z (-.f64 (*.f64 -1 x) 5))) (*.f64 y x))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 -1 (*.f64 z (-.f64 (*.f64 -1 x) 5))) (*.f64 y x))","(fma.f64 y x (*.f64 z (+.f64 5 x)))"]],"time":127.1318359375,"type":"simplify"},{"compiler":[[602,286]],"time":7.77001953125,"type":"eval"},{"alts":[["(fma.f64 z 5 (*.f64 x (+.f64 y z)))","next",0.0078125],["(fma.f64 y x (*.f64 z (+.f64 5 x)))","fresh",0.04296875]],"compiler":[[11,7],[11,7],[11,7],[11,7]],"count":[[54,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[53,2],"picked":[1,0]}],"min-error":[0],"time":9.37109375,"type":"prune"},{"compiler":[[23,8]],"locations":[["(*.f64 x (+.f64 y z))",0.015625,true],["(fma.f64 z 5 (*.f64 x (+.f64 y z)))",0.03125,true]],"time":4.583984375,"type":"localize"},{"count":[[2,72]],"series":[["(*.f64 x (+.f64 y z))","z","-inf",0.1640625],["(*.f64 x (+.f64 y z))","z","inf",0.14501953125],["(*.f64 x (+.f64 y z))","z","0",0.161865234375],["(*.f64 x (+.f64 y z))","y","-inf",0.14404296875],["(*.f64 x (+.f64 y z))","y","inf",0.14794921875],["(*.f64 x (+.f64 y z))","y","0",0.1669921875],["(*.f64 x (+.f64 y z))","x","-inf",0.201171875],["(*.f64 x (+.f64 y z))","x","inf",0.216064453125],["(*.f64 x (+.f64 y z))","x","0",0.2099609375],["(fma.f64 z 5 (*.f64 x (+.f64 y z)))","y","-inf",0.235107421875],["(fma.f64 z 5 (*.f64 x (+.f64 y z)))","y","inf",0.251953125],["(fma.f64 z 5 (*.f64 x (+.f64 y z)))","y","0",0.254150390625],["(fma.f64 z 5 (*.f64 x (+.f64 y z)))","x","-inf",0.202880859375],["(fma.f64 z 5 (*.f64 x (+.f64 y z)))","x","inf",0.27294921875],["(fma.f64 z 5 (*.f64 x (+.f64 y z)))","x","0",0.281005859375],["(fma.f64 z 5 (*.f64 x (+.f64 y z)))","z","-inf",0.885986328125],["(fma.f64 z 5 (*.f64 x (+.f64 y z)))","z","inf",0.287109375],["(fma.f64 z 5 (*.f64 x (+.f64 y z)))","z","0",0.614990234375]],"time":5.033935546875,"type":"series"},{"count":[[2,89]],"inputs":[["(fma.f64 z 5 (*.f64 x (+.f64 y z)))","(*.f64 x (+.f64 y z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) (*.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) 0) (fma.f64 x (+.f64 y z) (*.f64 z 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z 5) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) (*.f64 0 (fma.f64 x (+.f64 y z) (*.f64 z 5))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (+.f64 y z) (*.f64 z 5))) (fma.f64 x (+.f64 y z) (*.f64 z 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y z)) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 5 z (*.f64 x y)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x z) (fma.f64 5 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 z 5) (*.f64 x z)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (+.f64 (*.f64 x z) (*.f64 z 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 5 z (*.f64 x y)) 1) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5))) (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) 2/3) (cbrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (+.f64 y z) (*.f64 z 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z 5)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (+.f64 y z))) (pow.f64 (+.f64 y z) 2/3) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2/3) (cbrt.f64 (*.f64 x (+.f64 y z))) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 y z)) (*.f64 (pow.f64 (+.f64 y z) 2/3) x) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y z) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (pow.f64 (*.f64 x (+.f64 y z)) 2/3) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 y z) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y z) x (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (+.f64 y z)) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) 5) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (sqrt.f64 5)) (sqrt.f64 5) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 5)) (cbrt.f64 25) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z 5)) (cbrt.f64 (*.f64 25 (*.f64 z z))) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z 5 (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x (+.f64 y z))) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 5 z (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (+.f64 y z)) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (+.f64 y z)) 1 (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z 5) 1 (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z 5) (*.f64 x (+.f64 y z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y z)) (*.f64 (*.f64 x (+.f64 y z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (+.f64 y z)) 0) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y z)) (*.f64 0 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (+.f64 y z))) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 y z)) (*.f64 (pow.f64 (+.f64 y z) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 y z) 2/3) x) (cbrt.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (+.f64 y z)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (pow.f64 (*.f64 x (+.f64 y z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2/3) (cbrt.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y z) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (+.f64 y z))) (pow.f64 (+.f64 y z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 y z) 2/3) (*.f64 x (cbrt.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (+.f64 y z) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (+.f64 (*.f64 y (cbrt.f64 x)) (*.f64 z (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (+.f64 (*.f64 z (cbrt.f64 x)) (*.f64 y (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (+.f64 y z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 z)) (pow.f64 z 2/3) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x z (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x z)) (cbrt.f64 (pow.f64 (*.f64 x z) 2)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) x) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z x (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 y)) (pow.f64 y 2/3) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) x) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (*.f64 x z))))))"]],"rules":[["egg-rr",47],["egg-rr",42]],"time":25.3310546875,"type":"rewrite"},{"count":[[161,101]],"inputs":[["(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(*.f64 -1 (*.f64 z (-.f64 (*.f64 -1 x) 5)))","(+.f64 (*.f64 -1 (*.f64 z (-.f64 (*.f64 -1 x) 5))) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 z (-.f64 (*.f64 -1 x) 5))) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 z (-.f64 (*.f64 -1 x) 5))) (*.f64 y x))","(*.f64 5 z)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(+.f64 (*.f64 z x) (*.f64 5 z))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(*.f64 y x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(*.f64 y x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(*.f64 -1 (*.f64 z (-.f64 (*.f64 -1 x) 5)))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 -1 (*.f64 z (-.f64 (*.f64 -1 x) 5))) (*.f64 y x))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 -1 (*.f64 z (-.f64 (*.f64 -1 x) 5))) (*.f64 y x))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 -1 (*.f64 z (-.f64 (*.f64 -1 x) 5))) (*.f64 y x))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(*.f64 5 z)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 z x) (*.f64 5 z))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(*.f64 y x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(*.f64 y x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y x) (*.f64 5 z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))"]],"time":233.012939453125,"type":"simplify"},{"compiler":[[1209,505]],"time":14.28515625,"type":"eval"},{"alts":[["(fma.f64 z 5 (*.f64 x (+.f64 y z)))","done",0.0078125],["(fma.f64 y x (*.f64 z (+.f64 5 x)))","next",0.04296875]],"compiler":[[11,7],[11,7],[11,7]],"count":[[103,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[101,0],"picked":[1,1]}],"min-error":[0],"time":23.222900390625,"type":"prune"},{"compiler":[[23,13]],"locations":[["(fma.f64 y x (*.f64 z (+.f64 5 x)))",0.00390625,true],["(*.f64 z (+.f64 5 x))",0.01953125,true]],"time":5.692138671875,"type":"localize"},{"count":[[2,48]],"series":[["(fma.f64 y x (*.f64 z (+.f64 5 x)))","z","-inf",0.1630859375],["(fma.f64 y x (*.f64 z (+.f64 5 x)))","z","inf",0.18798828125],["(fma.f64 y x (*.f64 z (+.f64 5 x)))","z","0",0.18603515625],["(fma.f64 y x (*.f64 z (+.f64 5 x)))","x","-inf",0.287841796875],["(fma.f64 y x (*.f64 z (+.f64 5 x)))","x","inf",0.79296875],["(fma.f64 y x (*.f64 z (+.f64 5 x)))","x","0",0.23486328125],["(fma.f64 y x (*.f64 z (+.f64 5 x)))","y","-inf",0.2900390625],["(fma.f64 y x (*.f64 z (+.f64 5 x)))","y","inf",0.197021484375],["(fma.f64 y x (*.f64 z (+.f64 5 x)))","y","0",0.35205078125],["(*.f64 z (+.f64 5 x))","x","-inf",0.22900390625],["(*.f64 z (+.f64 5 x))","x","inf",0.251953125],["(*.f64 z (+.f64 5 x))","x","0",0.221923828125],["(*.f64 z (+.f64 5 x))","z","-inf",0.277099609375],["(*.f64 z (+.f64 5 x))","z","inf",0.3349609375],["(*.f64 z (+.f64 5 x))","z","0",0.35498046875]],"time":4.52392578125,"type":"series"},{"count":[[2,106]],"inputs":[["(*.f64 z (+.f64 5 x))","(fma.f64 y x (*.f64 z (+.f64 5 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z (+.f64 5 x)) 0) (*.f64 z (+.f64 5 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (+.f64 5 x)) (*.f64 (*.f64 z (+.f64 5 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z 5) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 z (+.f64 5 x))) (*.f64 z (+.f64 5 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (+.f64 5 x)) (*.f64 0 (*.f64 z (+.f64 5 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z x) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (+.f64 5 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 5 x) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 5 x) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) (+.f64 5 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 5 x)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 5 x) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 z (+.f64 5 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 z z)) (+.f64 5 x)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 z (+.f64 5 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 5 x) 2)) z) (cbrt.f64 (+.f64 5 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (+.f64 5 x) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z z)) (+.f64 (cbrt.f64 (*.f64 125 z)) (*.f64 x (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z z)) (+.f64 (*.f64 x (cbrt.f64 z)) (cbrt.f64 (*.f64 125 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 125 (pow.f64 x 3)) (cbrt.f64 (fma.f64 x (+.f64 x -5) 25))) (/.f64 z (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 x -5) 25)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 125 (pow.f64 x 3)) 1) (/.f64 z (fma.f64 x (+.f64 x -5) 25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (cbrt.f64 (fma.f64 x (+.f64 x -5) 25))) (/.f64 (+.f64 125 (pow.f64 x 3)) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 x -5) 25)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (+.f64 5 x))) (cbrt.f64 (pow.f64 (*.f64 z (+.f64 5 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 z (+.f64 5 x)) 2)) (cbrt.f64 (*.f64 z (+.f64 5 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (+.f64 5 x))) (cbrt.f64 (pow.f64 (+.f64 5 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 z (+.f64 5 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (+.f64 5 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 5 x) 2)) (*.f64 z (cbrt.f64 (+.f64 5 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (+.f64 125 (pow.f64 x 3))) (/.f64 1 (fma.f64 x (+.f64 x -5) 25)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z (+.f64 125 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x (+.f64 x -5) 25))) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 x -5) 25)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (+.f64 125 (pow.f64 x 3))) (fma.f64 x (+.f64 x -5) 25))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (neg.f64 (+.f64 125 (pow.f64 x 3)))) (neg.f64 (fma.f64 x (+.f64 x -5) 25)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (+.f64 5 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 125 (pow.f64 x 3))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 5 x) 2)) z)) (cbrt.f64 (fma.f64 x (+.f64 x -5) 25)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (+.f64 125 (pow.f64 x 3))) 1) (fma.f64 x (+.f64 x -5) 25))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 125 (pow.f64 x 3))) z) (neg.f64 (fma.f64 x (+.f64 x -5) 25)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z (+.f64 125 (pow.f64 x 3))) 1) (fma.f64 x (+.f64 x -5) 25))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 z (+.f64 125 (pow.f64 x 3)))) (neg.f64 (fma.f64 x (+.f64 x -5) 25)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (+.f64 5 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (+.f64 5 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (+.f64 5 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (+.f64 5 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (+.f64 5 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 z (+.f64 5 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (+.f64 5 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z x (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) x) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) z) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x z (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 (pow.f64 (*.f64 z x) 2)) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 5) (*.f64 (cbrt.f64 25) z) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 5)) (cbrt.f64 25) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 5) (*.f64 z (sqrt.f64 5)) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z 5)) (cbrt.f64 (*.f64 (*.f64 z z) 25)) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (cbrt.f64 (*.f64 (*.f64 z z) 125)) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (sqrt.f64 5)) (sqrt.f64 5) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 125 z)) (cbrt.f64 (*.f64 z z)) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 5 z (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z 5 (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z x) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z 5) 1 (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z 5) (*.f64 z x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y x (*.f64 z (+.f64 5 x))) 0) (fma.f64 y x (*.f64 z (+.f64 5 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y x (*.f64 z (+.f64 5 x))) (*.f64 (fma.f64 y x (*.f64 z (+.f64 5 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 y x (*.f64 z (+.f64 5 x)))) (fma.f64 y x (*.f64 z (+.f64 5 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y x (*.f64 z (+.f64 5 x))) (*.f64 0 (fma.f64 y x (*.f64 z (+.f64 5 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (+.f64 5 x)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y x (*.f64 z 5)) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z x) (fma.f64 y x (*.f64 z 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y x) (*.f64 z x)) (*.f64 z 5))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z 5) (+.f64 (*.f64 z x) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y x (*.f64 z 5)) 1) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y x (*.f64 z (+.f64 5 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y x (*.f64 z (+.f64 5 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y x (*.f64 z (+.f64 5 x)))) (cbrt.f64 (pow.f64 (fma.f64 y x (*.f64 z (+.f64 5 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y x (*.f64 z (+.f64 5 x))) 2)) (cbrt.f64 (fma.f64 y x (*.f64 z (+.f64 5 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y x (*.f64 z (+.f64 5 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y x (*.f64 z (+.f64 5 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y x (*.f64 z (+.f64 5 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y x (*.f64 z (+.f64 5 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y x (*.f64 z (+.f64 5 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y x (*.f64 z (+.f64 5 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y x (*.f64 z (+.f64 5 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y x (*.f64 z (+.f64 5 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y x (*.f64 z (+.f64 5 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y x (*.f64 z (+.f64 5 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 z (+.f64 5 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y x)) (cbrt.f64 (pow.f64 (*.f64 y x) 2)) (*.f64 z (+.f64 5 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) x) (*.f64 z (+.f64 5 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (*.f64 z (+.f64 5 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 z (+.f64 5 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) (+.f64 5 x)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 z (+.f64 5 x))) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 (+.f64 5 x))) (cbrt.f64 (pow.f64 (+.f64 5 x) 2)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 5 x)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 5 x) 2)) z) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z (+.f64 5 x))) (cbrt.f64 (pow.f64 (*.f64 z (+.f64 5 x)) 2)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (+.f64 5 x) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 5 x) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 5 x) z (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 z (+.f64 5 x)) 2)) (cbrt.f64 (*.f64 z (+.f64 5 x))) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) 1 (*.f64 z (+.f64 5 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y x) (*.f64 z (+.f64 5 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z (+.f64 5 x)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (+.f64 5 x)) 1 (*.f64 y x))))))"]],"rules":[["egg-rr",43],["egg-rr",63]],"time":25.31201171875,"type":"rewrite"},{"count":[[154,115]],"inputs":[["(*.f64 5 z)","(+.f64 (*.f64 z x) (*.f64 5 z))","(+.f64 (*.f64 z x) (*.f64 5 z))","(+.f64 (*.f64 z x) (*.f64 5 z))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 5 z))","(+.f64 (*.f64 z x) (*.f64 5 z))","(+.f64 (*.f64 z x) (*.f64 5 z))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 5 z))","(+.f64 (*.f64 z x) (*.f64 5 z))","(+.f64 (*.f64 z x) (*.f64 5 z))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(*.f64 5 z)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)) (*.f64 5 z))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)) (*.f64 5 z))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)) (*.f64 5 z))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 5 z)","(+.f64 (*.f64 z x) (*.f64 5 z))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 z x) (*.f64 5 z))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 z x) (*.f64 5 z))","(*.f64 z (+.f64 5 x))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 5 z))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 z x) (*.f64 5 z))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 z x) (*.f64 5 z))","(*.f64 z (+.f64 5 x))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 5 z))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 z x) (*.f64 5 z))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 z x) (*.f64 5 z))","(*.f64 z (+.f64 5 x))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(*.f64 5 z)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 5 z))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)) (*.f64 5 z))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)) (*.f64 5 z))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)) (*.f64 5 z))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(*.f64 z (+.f64 5 x))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 (+.f64 y z) x (*.f64 5 z))","(+.f64 (*.f64 y x) (*.f64 z (+.f64 5 x)))","(fma.f64 (+.f64 y z) x (*.f64 5 z))"]],"time":154.47998046875,"type":"simplify"},{"compiler":[[1548,865]],"time":20.69287109375,"type":"eval"},{"alts":[["(fma.f64 z 5 (*.f64 x (+.f64 y z)))","done",0.0078125],["(fma.f64 y x (*.f64 z (+.f64 5 x)))","done",0.04296875]],"compiler":[[11,7],[11,7]],"count":[[117,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[115,0],"picked":[1,1]}],"min-error":[0],"time":28.548095703125,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["y",0.0078125,1],["z",0.0078125,1],["(+.f64 (*.f64 x (+.f64 y z)) (*.f64 z 5))",0.0078125,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[36,17]],"count":[[4,1]],"inputs":[["(fma.f64 z 5 (*.f64 x (+.f64 y z)))","(fma.f64 y x (*.f64 z (+.f64 5 x)))","(fma.f64 x (+.f64 y z) (*.f64 z 5))","(+.f64 (*.f64 x (+.f64 y z)) (*.f64 z 5))"]],"link":["."],"name":["Graphics.Rendering.Plot.Render.Plot.Legend:renderLegendOutside from plot-0.2.3.4, C"],"oracle":[0.05859375],"outputs":[["(fma.f64 z 5 (*.f64 x (+.f64 y z)))"]],"time":12.9560546875,"times":[["x",2.916015625],["y",2.958984375],["z",3.044921875],["(+.f64 (*.f64 x (+.f64 y z)) (*.f64 z 5))",3.125]],"type":"regimes"},{"compiler":[[11,7]],"inputs":[["(fma.f64 z 5 (*.f64 x (+.f64 y z)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 z 5 (*.f64 x (+.f64 y z)))","(fma.f64 x (+.f64 y z) (*.f64 z 5))"]],"stop":[["done",1]],"time":19.27783203125,"type":"simplify"},{"time":0.01220703125,"type":"soundness"},{"compiler":[[11,7]],"remove-preprocessing":[[]],"time":8.789794921875,"type":"end"}]
[{"compiler":[[19,12]],"method":["search"],"sampling":[[12,0.325694317425814,0.5333975797362882,0.1409081028378978],[11,0.20672812962357057,0.723548453682497,0.06972341669393245],[10,0.16382229139981064,0.7918077417657514,0.044369966834437946],[9,0.12481698392366525,0.8581167644751986,0.017066251601136173],[8,0.0,0.998535871389322,0.0014641286106780171],[7,0.0,0.998535871389322,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":149.68212890625,"type":"analyze"},{"outcomes":[["body",256,"invalid",192.300537109375,3868],["body",256,"valid",413.1923828125,8256]],"time":616.98779296875,"type":"sample"},{"compiler":[[18,11]],"inputs":[["0","1","2"],["(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))","(/.f64 (-.f64 (+.f64 (*.f64 y y) (*.f64 x x)) (*.f64 z z)) (*.f64 x 2))","(/.f64 (-.f64 (+.f64 (*.f64 z z) (*.f64 y y)) (*.f64 x x)) (*.f64 y 2))","(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 z z)) (*.f64 y y)) (*.f64 z 2))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))","(*.f64 (fma.f64 y y (*.f64 (+.f64 x z) (-.f64 x z))) (/.f64 1/2 y))","(/.f64 (-.f64 (+.f64 (*.f64 y y) (*.f64 x x)) (*.f64 z z)) (*.f64 x 2))","(*.f64 (fma.f64 y y (*.f64 (+.f64 x z) (-.f64 x z))) (/.f64 1/2 x))","(/.f64 (-.f64 (+.f64 (*.f64 z z) (*.f64 y y)) (*.f64 x x)) (*.f64 y 2))","(*.f64 (fma.f64 z z (*.f64 (+.f64 x y) (-.f64 y x))) (/.f64 1/2 y))","(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 z z)) (*.f64 y y)) (*.f64 z 2))","(*.f64 (fma.f64 x x (*.f64 (+.f64 z y) (-.f64 z y))) (/.f64 1/2 z))"]],"symmetry":[[]],"time":76.573974609375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))","(*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y))"]],"time":20.7451171875,"type":"simplify"},{"compiler":[[32,18]],"time":0.422119140625,"type":"eval"},{"alts":[["(*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y))","fresh",28.161660022326668],["(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))","next",28.095253781706372]],"compiler":[[17,10],[18,11],[17,10],[18,11]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[28.044472522326668],"time":1.392822265625,"type":"prune"},{"compiler":[[52,14]],"locations":[["(-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z))",3.8984251149812352,true],["(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))",26.151054839613213,true]],"time":9.30908203125,"type":"localize"},{"count":[[2,72]],"series":[["(-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z))","z","-inf",0.161865234375],["(-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z))","z","inf",0.18212890625],["(-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z))","z","0",0.16796875],["(-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z))","y","-inf",0.169921875],["(-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z))","y","inf",0.191162109375],["(-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z))","y","0",0.1640625],["(-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z))","x","-inf",0.177978515625],["(-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z))","x","inf",0.160888671875],["(-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z))","x","0",0.169921875],["(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))","z","-inf",0.223876953125],["(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))","z","inf",0.544921875],["(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))","z","0",0.875],["(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))","y","-inf",0.2890625],["(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))","y","inf",0.529052734375],["(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))","y","0",0.577880859375],["(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))","x","-inf",0.22705078125],["(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))","x","inf",0.713134765625],["(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))","x","0",0.907958984375]],"time":6.680908203125,"type":"series"},{"count":[[2,207]],"inputs":[["(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))","(-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)) (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/2 y) (fma.f64 x x (*.f64 y y))) (*.f64 (/.f64 1/2 y) (neg.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/2 y) (*.f64 x x)) (*.f64 (/.f64 1/2 y) (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/2 y) (neg.f64 (*.f64 z z))) (*.f64 (/.f64 1/2 y) (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/2 y) (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 (/.f64 1/2 y) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/2 y) (*.f64 y y)) (*.f64 (/.f64 1/2 y) (*.f64 (+.f64 x z) (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) 0) (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) (*.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) (/.f64 1/2 y)) (*.f64 (*.f64 (+.f64 y z) (-.f64 y z)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 y z) (-.f64 y z)) (/.f64 1/2 y)) (*.f64 (*.f64 x x) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y y) (/.f64 1/2 y)) (*.f64 (*.f64 (+.f64 x z) (-.f64 x z)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)) 1) (*.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y))) (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) (*.f64 0 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)) (/.f64 (*.f64 (*.f64 z z) 1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (+.f64 y y)) (*.f64 (*.f64 y y) 4)) (/.f64 (*.f64 (+.f64 y y) (*.f64 z z)) (*.f64 (*.f64 y y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (+.f64 y y)) (*.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 -2 y)) (*.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (+.f64 y z) (-.f64 z y)) (*.f64 -2 y)) (/.f64 (*.f64 x x) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (+.f64 z x) (-.f64 z x)) (*.f64 -2 y)) (/.f64 (*.f64 y y) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) (/.f64 (fma.f64 x x (*.f64 y y)) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y))) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z)))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 2)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/2 y)) (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (*.f64 (*.f64 y y) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) y) (cbrt.f64 2)) (/.f64 1 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) y) (sqrt.f64 2)) (/.f64 1 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (/.f64 1/2 y))) (pow.f64 (cbrt.f64 (+.f64 y y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) 2)) (cbrt.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))) (neg.f64 (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z)))) y) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 8)) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 y) (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) y) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (+.f64 y y) (neg.f64 (*.f64 (+.f64 y y) (*.f64 z z)))) (/.f64 1 (*.f64 (*.f64 y y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))) y) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 1/2) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) y) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) 2)) (cbrt.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) y))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y)))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))) 1/2) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) y)) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) 2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))) y) 1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) y) (cbrt.f64 2)) 1) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 y)) (*.f64 2 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (cbrt.f64 (/.f64 1/2 y))) (*.f64 -2 y)) (*.f64 (cbrt.f64 (*.f64 (*.f64 y y) 4)) (neg.f64 (*.f64 z z)))) (*.f64 (cbrt.f64 (*.f64 (*.f64 y y) 4)) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (cbrt.f64 (/.f64 1/2 y))) (cbrt.f64 (*.f64 (*.f64 y y) 4))) (*.f64 (cbrt.f64 (*.f64 (*.f64 y y) 4)) (*.f64 (*.f64 z z) (cbrt.f64 (/.f64 1/2 y))))) (*.f64 (cbrt.f64 (*.f64 (*.f64 y y) 4)) (cbrt.f64 (*.f64 (*.f64 y y) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (cbrt.f64 (/.f64 1/2 y))) y) (*.f64 (cbrt.f64 (*.f64 (*.f64 y y) 4)) (*.f64 (*.f64 z z) 1/2))) (*.f64 (cbrt.f64 (*.f64 (*.f64 y y) 4)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (cbrt.f64 (/.f64 1/2 y))) (+.f64 y y)) (*.f64 (cbrt.f64 (*.f64 (*.f64 y y) 4)) (*.f64 z z))) (*.f64 (cbrt.f64 (*.f64 (*.f64 y y) 4)) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (cbrt.f64 (/.f64 1/2 y))) 2) (*.f64 (cbrt.f64 (*.f64 (*.f64 y y) 4)) (/.f64 (*.f64 z z) y))) (*.f64 (cbrt.f64 (*.f64 (*.f64 y y) 4)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (*.f64 -2 y)) (*.f64 (+.f64 y y) (neg.f64 (*.f64 z z)))) (*.f64 (+.f64 y y) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (cbrt.f64 (*.f64 (*.f64 y y) 4))) (*.f64 (+.f64 y y) (*.f64 (*.f64 z z) (cbrt.f64 (/.f64 1/2 y))))) (*.f64 (+.f64 y y) (cbrt.f64 (*.f64 (*.f64 y y) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (fma.f64 x x (*.f64 y y)) y) (*.f64 (+.f64 y y) (*.f64 (*.f64 z z) 1/2))) (*.f64 (+.f64 y y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 2) (*.f64 (+.f64 y y) (/.f64 (*.f64 z z) y))) (*.f64 (+.f64 y y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (fma.f64 x x (*.f64 y y)) y) (*.f64 -2 y)) (*.f64 2 (neg.f64 (*.f64 z z)))) (*.f64 2 (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (fma.f64 x x (*.f64 y y)) y) (cbrt.f64 (*.f64 (*.f64 y y) 4))) (*.f64 2 (*.f64 (*.f64 z z) (cbrt.f64 (/.f64 1/2 y))))) (*.f64 2 (cbrt.f64 (*.f64 (*.f64 y y) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (fma.f64 x x (*.f64 y y)) y) (+.f64 y y)) (*.f64 2 (*.f64 z z))) (*.f64 2 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 x x (*.f64 y y))) (*.f64 -2 y)) (*.f64 (*.f64 -2 y) (neg.f64 (*.f64 z z)))) (*.f64 (*.f64 -2 y) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 x x (*.f64 y y))) (cbrt.f64 (*.f64 (*.f64 y y) 4))) (*.f64 (*.f64 -2 y) (*.f64 (*.f64 z z) (cbrt.f64 (/.f64 1/2 y))))) (*.f64 (*.f64 -2 y) (cbrt.f64 (*.f64 (*.f64 y y) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 x x (*.f64 y y))) y) (*.f64 (*.f64 -2 y) (*.f64 (*.f64 z z) 1/2))) (*.f64 (*.f64 -2 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 x x (*.f64 y y))) (+.f64 y y)) (*.f64 (*.f64 -2 y) (*.f64 z z))) (*.f64 (*.f64 -2 y) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 x x (*.f64 y y))) 2) (*.f64 (*.f64 -2 y) (/.f64 (*.f64 z z) y))) (*.f64 (*.f64 -2 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 -2 y)) (*.f64 y (neg.f64 (*.f64 z z)))) (*.f64 y (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (cbrt.f64 (*.f64 (*.f64 y y) 4))) (*.f64 y (*.f64 (*.f64 z z) (cbrt.f64 (/.f64 1/2 y))))) (*.f64 y (cbrt.f64 (*.f64 (*.f64 y y) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) y) (*.f64 y (*.f64 (*.f64 z z) 1/2))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (+.f64 y y)) (*.f64 y (*.f64 z z))) (*.f64 y (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 (*.f64 y y) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (/.f64 1/2 y))) 1) (*.f64 (cbrt.f64 (*.f64 (*.f64 y y) 4)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) y)) (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 2))) (*.f64 (cbrt.f64 2) (cbrt.f64 (*.f64 (*.f64 y y) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (+.f64 y y) (neg.f64 (*.f64 (+.f64 y y) (*.f64 z z))))) (neg.f64 (*.f64 (*.f64 y y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) y) (cbrt.f64 2))) (neg.f64 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))) y) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) y) (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 1/2)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))) (*.f64 -2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 1/2) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (/.f64 1/2 y))) (cbrt.f64 (*.f64 (*.f64 y y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (+.f64 y y) (neg.f64 (*.f64 (+.f64 y y) (*.f64 z z)))) (*.f64 (*.f64 y y) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) y) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/2 y)) (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z)))) (cbrt.f64 (*.f64 (*.f64 y y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) 2)) (cbrt.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))))) (cbrt.f64 (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) 2)) (cbrt.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))))) (cbrt.f64 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z)))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z)))) y) (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 8)) (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 2))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y))) (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 2))) (cbrt.f64 (*.f64 (*.f64 y y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 y)) 1/2) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y)))) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) 2))) (cbrt.f64 (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z)))) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) 2))) (cbrt.f64 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (*.f64 (*.f64 y y) 4))) (cbrt.f64 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 1/2) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (+.f64 y y) (neg.f64 (*.f64 (+.f64 y y) (*.f64 z z)))) 1) (*.f64 (*.f64 y y) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) y) (sqrt.f64 2)) 1) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (/.f64 1/2 y))) 1) (cbrt.f64 (*.f64 (*.f64 y y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z)))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 2)) 1/2)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (fma.f64 x x (*.f64 y y)) y) y) (*.f64 2 (*.f64 (*.f64 z z) 1/2))) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (fma.f64 x x (*.f64 y y)) y) 2) (*.f64 2 (/.f64 (*.f64 z z) y))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) 2) (*.f64 y (/.f64 (*.f64 z z) y))) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (/.f64 1/2 y)))) (neg.f64 (cbrt.f64 (*.f64 (*.f64 y y) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))) y) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))) (/.f64 1/2 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y))) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)) 2)) (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (fma.f64 x x (*.f64 y y))) y) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 y y)) 2)) 1/2) (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x x (*.f64 y y))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 y y)) 2)) (/.f64 1/2 y)) (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (fma.f64 x x (*.f64 y y)) 8)) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 y y)) 2)) y) (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)) (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/2 y)) (/.f64 (fma.f64 x x (*.f64 y y)) (cbrt.f64 (*.f64 (*.f64 y y) 4))) (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 (fma.f64 x x (*.f64 y y)) y) (/.f64 (*.f64 z z) (*.f64 -2 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 (+.f64 y z) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x (*.f64 y y)) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z z)) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 y z) (-.f64 y z)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (*.f64 (+.f64 x z) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x z) (-.f64 x z)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 0 (*.f64 (+.f64 z x) (-.f64 z x))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 0) (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (*.f64 (*.f64 (+.f64 x z) (-.f64 x z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (*.f64 x x)) -1) (*.f64 (*.f64 (+.f64 y z) (-.f64 z y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (fma.f64 x x (*.f64 y y))) -1) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z z)) (*.f64 (neg.f64 (fma.f64 x x (*.f64 y y))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z)))) (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 0 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x x (*.f64 y y)) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 x x (*.f64 y y)) 0) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y y) (*.f64 (+.f64 z x) (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (neg.f64 (*.f64 x x))) (*.f64 (+.f64 y z) (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (neg.f64 (fma.f64 x x (*.f64 y y)))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 z z)) (neg.f64 (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x x) (*.f64 (+.f64 y z) (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z)))) (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 2)) (cbrt.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y)))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 y y)) 2)) (+.f64 (cbrt.f64 (pow.f64 z 4)) (cbrt.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (*.f64 z z))))) (-.f64 (cbrt.f64 (fma.f64 x x (*.f64 y y))) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 z z) (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 x 4)) (*.f64 (+.f64 y z) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x x (*.f64 y y))) (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 y y)) 2)) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (*.f64 (+.f64 y z) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x x (*.f64 y y)) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1 (*.f64 (+.f64 y z) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (neg.f64 x) (*.f64 (+.f64 y z) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x x)) (*.f64 (+.f64 y z) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) x) (*.f64 (+.f64 y z) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 4)) (cbrt.f64 (*.f64 x x)) (*.f64 (+.f64 y z) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 z z)) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (neg.f64 z) (cbrt.f64 z)) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) z (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (neg.f64 z) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 z z) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 z) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 z z))) (cbrt.f64 (pow.f64 z 4)) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 y y)) (*.f64 (+.f64 x z) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) 1 (*.f64 (+.f64 x z) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 y 4)) (cbrt.f64 (*.f64 y y)) (*.f64 (+.f64 x z) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y y) (*.f64 (+.f64 x z) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y y (*.f64 (+.f64 x z) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (pow.f64 y 4)) (*.f64 (+.f64 x z) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (neg.f64 y) (*.f64 (+.f64 x z) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) y) (*.f64 (+.f64 x z) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x x (*.f64 y y)) 1 (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 x x (*.f64 y y))) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 y y)) 2)) (cbrt.f64 (fma.f64 x x (*.f64 y y))) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y z) (-.f64 y z) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 y z) (-.f64 y z)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) 2)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))))))))"]],"rules":[["egg-rr",77],["egg-rr",130]],"time":40.255126953125,"type":"rewrite"},{"count":[[279,240]],"inputs":[["(*.f64 1/2 (/.f64 (-.f64 (pow.f64 y 2) (pow.f64 z 2)) y))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 (pow.f64 y 2) (pow.f64 z 2)) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 (pow.f64 y 2) (pow.f64 z 2)) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 (pow.f64 y 2) (pow.f64 z 2)) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(*.f64 1/2 (/.f64 (pow.f64 x 2) y))","(+.f64 (*.f64 1/2 (-.f64 y (/.f64 (pow.f64 z 2) y))) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(+.f64 (*.f64 1/2 (-.f64 y (/.f64 (pow.f64 z 2) y))) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(+.f64 (*.f64 1/2 (-.f64 y (/.f64 (pow.f64 z 2) y))) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(*.f64 1/2 (/.f64 (pow.f64 x 2) y))","(+.f64 (*.f64 1/2 (-.f64 y (/.f64 (pow.f64 z 2) y))) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(+.f64 (*.f64 1/2 (-.f64 y (/.f64 (pow.f64 z 2) y))) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(+.f64 (*.f64 1/2 (-.f64 y (/.f64 (pow.f64 z 2) y))) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y))","(+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y)))","(+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y)))","(+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y)))","(*.f64 1/2 y)","(+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y)))","(+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y)))","(+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y)))","(*.f64 1/2 y)","(+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y)))","(+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y)))","(+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y)))","(*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(+.f64 (*.f64 1/2 (+.f64 y (/.f64 (pow.f64 x 2) y))) (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)))","(+.f64 (*.f64 1/2 (+.f64 y (/.f64 (pow.f64 x 2) y))) (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)))","(+.f64 (*.f64 1/2 (+.f64 y (/.f64 (pow.f64 x 2) y))) (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(+.f64 (*.f64 1/2 (+.f64 y (/.f64 (pow.f64 x 2) y))) (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)))","(+.f64 (*.f64 1/2 (+.f64 y (/.f64 (pow.f64 x 2) y))) (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)))","(+.f64 (*.f64 1/2 (+.f64 y (/.f64 (pow.f64 x 2) y))) (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)))","(-.f64 (pow.f64 y 2) (pow.f64 z 2))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(pow.f64 x 2)","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(pow.f64 x 2)","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(-.f64 (pow.f64 x 2) (pow.f64 z 2))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(pow.f64 y 2)","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(pow.f64 y 2)","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (*.f64 -1 (pow.f64 z 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 -1 (pow.f64 z 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 -1 (pow.f64 z 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(*.f64 -1 (pow.f64 z 2))","(+.f64 (pow.f64 y 2) (+.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 x 2)))","(+.f64 (pow.f64 y 2) (+.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 x 2)))","(+.f64 (pow.f64 y 2) (+.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 x 2)))","(*.f64 -1 (pow.f64 z 2))","(+.f64 (pow.f64 y 2) (+.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 x 2)))","(+.f64 (pow.f64 y 2) (+.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 x 2)))","(+.f64 (pow.f64 y 2) (+.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (/.f64 (-.f64 (pow.f64 y 2) (pow.f64 z 2)) y))","(*.f64 1/2 (-.f64 y (/.f64 (*.f64 z z) y)))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 (pow.f64 y 2) (pow.f64 z 2)) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 (pow.f64 y 2) (pow.f64 z 2)) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 (pow.f64 y 2) (pow.f64 z 2)) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(*.f64 1/2 (/.f64 (pow.f64 x 2) y))","(/.f64 (*.f64 1/2 (*.f64 x x)) y)","(+.f64 (*.f64 1/2 (-.f64 y (/.f64 (pow.f64 z 2) y))) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(+.f64 (*.f64 1/2 (-.f64 y (/.f64 (pow.f64 z 2) y))) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(+.f64 (*.f64 1/2 (-.f64 y (/.f64 (pow.f64 z 2) y))) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(*.f64 1/2 (/.f64 (pow.f64 x 2) y))","(/.f64 (*.f64 1/2 (*.f64 x x)) y)","(+.f64 (*.f64 1/2 (-.f64 y (/.f64 (pow.f64 z 2) y))) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(+.f64 (*.f64 1/2 (-.f64 y (/.f64 (pow.f64 z 2) y))) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(+.f64 (*.f64 1/2 (-.f64 y (/.f64 (pow.f64 z 2) y))) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 z x) (-.f64 x z))) y)","(+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(*.f64 1/2 y)","(+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(*.f64 1/2 y)","(+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (-.f64 (pow.f64 x 2) (pow.f64 z 2)) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 x x) y)))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(+.f64 (*.f64 1/2 (+.f64 y (/.f64 (pow.f64 x 2) y))) (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(+.f64 (*.f64 1/2 (+.f64 y (/.f64 (pow.f64 x 2) y))) (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(+.f64 (*.f64 1/2 (+.f64 y (/.f64 (pow.f64 x 2) y))) (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(+.f64 (*.f64 1/2 (+.f64 y (/.f64 (pow.f64 x 2) y))) (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(+.f64 (*.f64 1/2 (+.f64 y (/.f64 (pow.f64 x 2) y))) (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(+.f64 (*.f64 1/2 (+.f64 y (/.f64 (pow.f64 x 2) y))) (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)))","(*.f64 1/2 (+.f64 y (/.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y)))","(-.f64 (pow.f64 y 2) (pow.f64 z 2))","(*.f64 (+.f64 z y) (-.f64 y z))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(pow.f64 x 2)","(*.f64 x x)","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(pow.f64 x 2)","(*.f64 x x)","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(-.f64 (pow.f64 x 2) (pow.f64 z 2))","(*.f64 (+.f64 z x) (-.f64 x z))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(pow.f64 y 2)","(*.f64 y y)","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(pow.f64 y 2)","(*.f64 y y)","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(-.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 z 2))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(fma.f64 y y (*.f64 x x))","(+.f64 (*.f64 -1 (pow.f64 z 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(+.f64 (*.f64 -1 (pow.f64 z 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(+.f64 (*.f64 -1 (pow.f64 z 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(*.f64 -1 (pow.f64 z 2))","(neg.f64 (*.f64 z z))","(+.f64 (pow.f64 y 2) (+.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 x 2)))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(+.f64 (pow.f64 y 2) (+.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 x 2)))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(+.f64 (pow.f64 y 2) (+.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 x 2)))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(*.f64 -1 (pow.f64 z 2))","(neg.f64 (*.f64 z z))","(+.f64 (pow.f64 y 2) (+.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 x 2)))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(+.f64 (pow.f64 y 2) (+.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 x 2)))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))","(+.f64 (pow.f64 y 2) (+.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 x 2)))","(fma.f64 y y (*.f64 (+.f64 z x) (-.f64 x z)))"]],"time":283.619873046875,"type":"simplify"},{"compiler":[[4765,1695]],"time":34.876953125,"type":"eval"},{"alts":[["(pow.f64 (pow.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) 3) 1/3)","fresh",55.603045314458825],["(/.f64 (-.f64 (*.f64 (/.f64 (fma.f64 x x (*.f64 y y)) y) (cbrt.f64 (*.f64 (*.f64 y y) 4))) (*.f64 2 (*.f64 (*.f64 z z) (cbrt.f64 (/.f64 1/2 y))))) (*.f64 2 (cbrt.f64 (*.f64 (*.f64 y y) 4))))","fresh",35.133476269536885],["(*.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (/.f64 1/2 y))) (pow.f64 (cbrt.f64 (+.f64 y y)) -2))","fresh",28.383728870011094],["(/.f64 (/.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) y) (cbrt.f64 2)) (cbrt.f64 4))","fresh",28.337808855937386],["(/.f64 (*.f64 (+.f64 z y) (-.f64 y z)) (*.f64 y 2))","fresh",37.75343393721246],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 z z) (*.f64 -2 y)))","fresh",28.153847531706372],["(*.f64 1/2 y)","next",26.932111484839204],["(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) y) (*.f64 y (*.f64 (*.f64 z z) 1/2))) (*.f64 y y))","fresh",41.96045768447644],["(/.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (*.f64 (*.f64 y y) 4))) (cbrt.f64 (+.f64 y y)))","fresh",35.19664003907377],["(/.f64 (pow.f64 x 2) (*.f64 y 2))","fresh",52.98111903088133]],"compiler":[[21,14],[38,24],[25,16],[21,14],[14,9],[20,12],[6,5],[25,14],[25,15],[10,8],[21,14],[38,24],[25,16],[21,14],[14,9],[20,12],[6,5],[25,14],[25,15],[10,8]],"count":[[242,10]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[240,10],"picked":[1,0]}],"min-error":[7.464959420626854],"time":74.522216796875,"type":"prune"},{"compiler":[[8,6]],"time":2.032958984375,"type":"localize"},{"compiler":[[3,3]],"time":0.097900390625,"type":"eval"},{"alts":[["(pow.f64 (pow.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) 3) 1/3)","fresh",55.603045314458825],["(/.f64 (-.f64 (*.f64 (/.f64 (fma.f64 x x (*.f64 y y)) y) (cbrt.f64 (*.f64 (*.f64 y y) 4))) (*.f64 2 (*.f64 (*.f64 z z) (cbrt.f64 (/.f64 1/2 y))))) (*.f64 2 (cbrt.f64 (*.f64 (*.f64 y y) 4))))","fresh",35.133476269536885],["(*.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (/.f64 1/2 y))) (pow.f64 (cbrt.f64 (+.f64 y y)) -2))","fresh",28.383728870011094],["(/.f64 (/.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) y) (cbrt.f64 2)) (cbrt.f64 4))","fresh",28.337808855937386],["(/.f64 (*.f64 (+.f64 z y) (-.f64 y z)) (*.f64 y 2))","fresh",37.75343393721246],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 z z) (*.f64 -2 y)))","next",28.153847531706372],["(*.f64 1/2 y)","done",26.932111484839204],["(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) y) (*.f64 y (*.f64 (*.f64 z z) 1/2))) (*.f64 y y))","fresh",41.96045768447644],["(/.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (*.f64 (*.f64 y y) 4))) (cbrt.f64 (+.f64 y y)))","fresh",35.19664003907377],["(/.f64 (pow.f64 x 2) (*.f64 y 2))","fresh",52.98111903088133]],"compiler":[[21,14],[38,24],[25,16],[21,14],[14,9],[20,12],[6,5],[25,14],[25,15],[10,8],[21,14],[38,24],[25,16],[21,14],[14,9],[20,12],[25,14],[25,15],[10,8]],"count":[[10,10]],"kept":[{"done":[0,0],"fresh":[9,9],"new":[0,0],"picked":[1,1]}],"min-error":[7.464959420626854],"time":5.777099609375,"type":"prune"},{"compiler":[[50,21]],"locations":[["(/.f64 (*.f64 z z) (*.f64 -2 y))",9.161226957060693,true],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 z z) (*.f64 -2 y)))",25.28532788411803,true]],"time":10.513916015625,"type":"localize"},{"count":[[2,60]],"series":[["(/.f64 (*.f64 z z) (*.f64 -2 y))","y","-inf",0.219970703125],["(/.f64 (*.f64 z z) (*.f64 -2 y))","y","inf",0.2919921875],["(/.f64 (*.f64 z z) (*.f64 -2 y))","y","0",0.31298828125],["(/.f64 (*.f64 z z) (*.f64 -2 y))","z","-inf",0.14599609375],["(/.f64 (*.f64 z z) (*.f64 -2 y))","z","inf",0.251953125],["(/.f64 (*.f64 z z) (*.f64 -2 y))","z","0",0.344970703125],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 z z) (*.f64 -2 y)))","z","-inf",0.184814453125],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 z z) (*.f64 -2 y)))","z","inf",0.385986328125],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 z z) (*.f64 -2 y)))","z","0",0.51318359375],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 z z) (*.f64 -2 y)))","y","-inf",0.473876953125],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 z z) (*.f64 -2 y)))","y","inf",0.553955078125],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 z z) (*.f64 -2 y)))","y","0",1.273193359375],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 z z) (*.f64 -2 y)))","x","-inf",0.421875],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 z z) (*.f64 -2 y)))","x","inf",0.43212890625],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 z z) (*.f64 -2 y)))","x","0",0.819091796875]],"time":6.841064453125,"type":"series"},{"count":[[2,194]],"inputs":[["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 z z) (*.f64 -2 y)))","(/.f64 (*.f64 z z) (*.f64 -2 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y) 0) (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y) (*.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y)) (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y) (*.f64 0 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)) (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)) (/.f64 (*.f64 z z) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y) 2)) (cbrt.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (+.f64 (*.f64 (*.f64 z z) -1/2) (*.f64 (fma.f64 x x (*.f64 y y)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (*.f64 z z) -1/2) (neg.f64 y)) (*.f64 y (*.f64 (fma.f64 x x (*.f64 y y)) -1/2))) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (*.f64 z z) (cbrt.f64 (/.f64 -1/2 y))) y) (*.f64 (cbrt.f64 (*.f64 4 (*.f64 y y))) (*.f64 (fma.f64 x x (*.f64 y y)) 1/2))) (*.f64 (cbrt.f64 (*.f64 4 (*.f64 y y))) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (*.f64 z z) (cbrt.f64 (/.f64 -1/2 y))) (neg.f64 y)) (*.f64 (cbrt.f64 (*.f64 4 (*.f64 y y))) (*.f64 (fma.f64 x x (*.f64 y y)) -1/2))) (*.f64 (cbrt.f64 (*.f64 4 (*.f64 y y))) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z z) y) (*.f64 (*.f64 -2 y) (*.f64 (fma.f64 x x (*.f64 y y)) 1/2))) (*.f64 (*.f64 -2 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z z) (neg.f64 y)) (*.f64 (*.f64 -2 y) (*.f64 (fma.f64 x x (*.f64 y y)) -1/2))) (*.f64 (*.f64 -2 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 z z)) y) (*.f64 (+.f64 y y) (*.f64 (fma.f64 x x (*.f64 y y)) 1/2))) (*.f64 (+.f64 y y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 z z)) (neg.f64 y)) (*.f64 (+.f64 y y) (*.f64 (fma.f64 x x (*.f64 y y)) -1/2))) (*.f64 (+.f64 y y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) (cbrt.f64 y)) y) (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (fma.f64 x x (*.f64 y y)) 1/2))) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) (cbrt.f64 y)) (neg.f64 y)) (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (fma.f64 x x (*.f64 y y)) -1/2))) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (*.f64 z z) 1/2) y) (*.f64 (neg.f64 y) (*.f64 (fma.f64 x x (*.f64 y y)) 1/2))) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (cbrt.f64 (*.f64 y y))) (*.f64 y (/.f64 (*.f64 (*.f64 z z) -1/2) (cbrt.f64 y)))) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (+.f64 y y)) (*.f64 y (neg.f64 (*.f64 z z)))) (*.f64 y (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (neg.f64 y)) (*.f64 y (*.f64 (*.f64 z z) 1/2))) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (cbrt.f64 (*.f64 4 (*.f64 y y)))) (*.f64 y (*.f64 (*.f64 z z) (cbrt.f64 (/.f64 -1/2 y))))) (*.f64 y (cbrt.f64 (*.f64 4 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 -2 y)) (*.f64 y (*.f64 z z))) (*.f64 y (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) -1/2) (cbrt.f64 (*.f64 y y))) (*.f64 (neg.f64 y) (/.f64 (*.f64 (*.f64 z z) -1/2) (cbrt.f64 y)))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) -1/2) (+.f64 y y)) (*.f64 (neg.f64 y) (neg.f64 (*.f64 z z)))) (*.f64 (neg.f64 y) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) -1/2) (cbrt.f64 (*.f64 4 (*.f64 y y)))) (*.f64 (neg.f64 y) (*.f64 (*.f64 z z) (cbrt.f64 (/.f64 -1/2 y))))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 4 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) -1/2) y) (*.f64 (neg.f64 y) (*.f64 (*.f64 z z) -1/2))) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) -1/2) (*.f64 -2 y)) (*.f64 (neg.f64 y) (*.f64 z z))) (*.f64 (neg.f64 y) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) -1/2) (*.f64 (*.f64 z z) 1/2)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z z) -1/2) (*.f64 (fma.f64 x x (*.f64 y y)) 1/2)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z z) 1/2) (*.f64 (fma.f64 x x (*.f64 y y)) -1/2)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (*.f64 z z) -1/2) y) (*.f64 y (*.f64 (fma.f64 x x (*.f64 y y)) 1/2))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 z z) y) y) (*.f64 -2 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2))) (*.f64 -2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 z z) y) (neg.f64 y)) (*.f64 -2 (*.f64 (fma.f64 x x (*.f64 y y)) -1/2))) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (*.f64 z z) 1/2) (neg.f64 y)) (*.f64 (neg.f64 y) (*.f64 (fma.f64 x x (*.f64 y y)) -1/2))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) -2) (*.f64 y (/.f64 (*.f64 z z) y))) (*.f64 -2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) y) (*.f64 y (*.f64 (*.f64 z z) -1/2))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) -1/2) -2) (*.f64 (neg.f64 y) (/.f64 (*.f64 z z) y))) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) -1/2) (neg.f64 y)) (*.f64 (neg.f64 y) (*.f64 (*.f64 z z) 1/2))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z z) -1/2)) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (*.f64 (*.f64 z z) -1/2) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 z z)) y) (*.f64 (cbrt.f64 (pow.f64 z 4)) -1/2) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 z z) (+.f64 y y)) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 z z) (*.f64 -2 y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 2)) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 z z) -8)) (/.f64 (cbrt.f64 (pow.f64 z 4)) y) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 (/.f64 (*.f64 z z) y) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z z) (/.f64 -1/2 y) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1/2 y) (*.f64 z z) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z y) (*.f64 z -1/2) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (/.f64 z (*.f64 -2 y)) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 2)) (cbrt.f64 (/.f64 (*.f64 z z) (*.f64 -2 y))) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (cbrt.f64 (pow.f64 z 4)) (/.f64 -1/2 y)) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z -1/2) (/.f64 z y) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 (/.f64 -1/2 y))) (/.f64 z (cbrt.f64 (*.f64 4 (*.f64 y y)))) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1/2 y)) (/.f64 (*.f64 z z) (cbrt.f64 (*.f64 4 (*.f64 y y)))) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 z z) -1/2) (/.f64 1 y) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x x (*.f64 y y))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 y y)) 2)) (/.f64 1/2 y)) (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y))) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)) 2)) (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (/.f64 1 y) (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 1 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 z z)) (/.f64 1/2 y) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 z z) (*.f64 -2 y)) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)) 1 (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)) (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (cbrt.f64 (/.f64 1/2 y))) (cbrt.f64 (/.f64 1/4 (*.f64 y y))) (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 y) (fma.f64 x x (*.f64 y y)) (/.f64 (*.f64 z z) (*.f64 -2 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 0) (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) (*.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 z z) (*.f64 -2 y))) (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) (*.f64 0 (/.f64 (*.f64 z z) (*.f64 -2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 z z) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (+.f64 y y)) (/.f64 (*.f64 z z) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 z z) (cbrt.f64 (/.f64 -1/2 y))) (pow.f64 (cbrt.f64 (*.f64 -2 y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 z z) (*.f64 -2 y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z -1/2) (/.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 2)) (cbrt.f64 (/.f64 (*.f64 z z) (*.f64 -2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z y) (*.f64 z -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (/.f64 -1/2 y))) (/.f64 z (cbrt.f64 (*.f64 4 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (/.f64 z (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 z z)) y) (*.f64 (cbrt.f64 (pow.f64 z 4)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 z z) -8)) (/.f64 (cbrt.f64 (pow.f64 z 4)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (cbrt.f64 (pow.f64 z 4)) (/.f64 -1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z z) (/.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/2 y) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 z z) -1/2) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1/2 y)) (/.f64 (*.f64 z z) (cbrt.f64 (*.f64 4 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 (*.f64 z z) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/2 (/.f64 (*.f64 z z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 z z) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 z z) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 z 4)) -1/2) (/.f64 (cbrt.f64 (*.f64 z z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 z z) (+.f64 y y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 z 4)) y) (cbrt.f64 (/.f64 (*.f64 z z) -8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 z z) y) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (*.f64 -2 y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 z 4)) (/.f64 -1/2 y)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (cbrt.f64 (*.f64 4 (*.f64 y y)))) (*.f64 z (cbrt.f64 (/.f64 -1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 z z) (cbrt.f64 (*.f64 4 (*.f64 y y)))) (cbrt.f64 (/.f64 -1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 z z) 1/2) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 z z)) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 y) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z z) y) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 z z)) y) (cbrt.f64 (pow.f64 z 4))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (*.f64 z z)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 z z) y) 1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 (cbrt.f64 (pow.f64 z 4)) y)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) -1/2)) (cbrt.f64 (pow.f64 z 4))) (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 4 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (neg.f64 z)) (*.f64 (cbrt.f64 (*.f64 y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z (cbrt.f64 y)) z) (*.f64 (cbrt.f64 (*.f64 y y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (*.f64 (cbrt.f64 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (*.f64 z (cbrt.f64 -1/2))) (*.f64 (neg.f64 y) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z z) (cbrt.f64 -1/2)) (*.f64 (cbrt.f64 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (neg.f64 (*.f64 z z))) (*.f64 (cbrt.f64 (*.f64 y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (*.f64 z z)) (*.f64 (cbrt.f64 (*.f64 y y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (*.f64 z z) (cbrt.f64 -1/2))) (*.f64 (neg.f64 y) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z z) (cbrt.f64 (/.f64 1 y))) (*.f64 (cbrt.f64 (*.f64 y y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 z z)) (cbrt.f64 (/.f64 1 y))) (*.f64 2 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 z z) (cbrt.f64 -1/2)) -1) (*.f64 (cbrt.f64 4) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 z z) (cbrt.f64 -1/2)) 1) (*.f64 (cbrt.f64 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (cbrt.f64 -1/2)) (neg.f64 z)) (*.f64 (cbrt.f64 4) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (cbrt.f64 -1/2)) z) (*.f64 (cbrt.f64 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (/.f64 z (cbrt.f64 y))) (*.f64 (cbrt.f64 (*.f64 y y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (/.f64 z (cbrt.f64 y))) (*.f64 2 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 z z)) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z z) (*.f64 -2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z z) -1/2) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z z) (cbrt.f64 (/.f64 -1/2 y))) (cbrt.f64 (*.f64 4 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z z) 1/2) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 z z) (*.f64 -2 y))) (cbrt.f64 (pow.f64 z 4))) (cbrt.f64 (*.f64 4 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 z z) -8)) (cbrt.f64 (pow.f64 z 4))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1/2 y)) (*.f64 z z)) (cbrt.f64 (*.f64 4 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 2)) (cbrt.f64 (neg.f64 (*.f64 z z)))) (cbrt.f64 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 2)) (cbrt.f64 (*.f64 (*.f64 z z) -1/2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 2)) (cbrt.f64 (*.f64 z z))) (cbrt.f64 (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 z z) -1/2) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z y) (neg.f64 z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (neg.f64 (*.f64 z z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (*.f64 (*.f64 z z) (cbrt.f64 -1/2))) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z -1/2) (/.f64 z (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z -1/2) (neg.f64 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (cbrt.f64 (/.f64 -1/2 y))) z) (cbrt.f64 (*.f64 4 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 z z)) (/.f64 1 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 z z) (cbrt.f64 -1/2)) (/.f64 1 y)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 z z) (cbrt.f64 (/.f64 -1/2 y))) 1) (cbrt.f64 (*.f64 4 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 z z) 1/2) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z z) (cbrt.f64 (*.f64 4 (*.f64 y y)))) (cbrt.f64 (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 z z))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 2))) (cbrt.f64 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) -1/2)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 z z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 2))) (cbrt.f64 (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (*.f64 z -1/2)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (*.f64 (*.f64 z z) -1/2)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (cbrt.f64 -1/2)) (/.f64 z y)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (/.f64 z y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (/.f64 z (cbrt.f64 (*.f64 4 (*.f64 y y))))) (cbrt.f64 (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 (*.f64 4 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (*.f64 (*.f64 z z) (cbrt.f64 -1/2))) (cbrt.f64 (*.f64 4 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 z z) (cbrt.f64 -1/2)) (cbrt.f64 (/.f64 1 y))) (cbrt.f64 (*.f64 4 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (cbrt.f64 -1/2)) (/.f64 z (cbrt.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 z z) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 z z) (cbrt.f64 (/.f64 -1/2 y)))) (neg.f64 (cbrt.f64 (*.f64 4 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 z z) (*.f64 -2 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 z z) (*.f64 -2 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 z z) (*.f64 -2 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 z z) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1/2 (/.f64 (*.f64 z z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 z z) (+.f64 y y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 z z) (*.f64 -2 y)) 3))))))"]],"rules":[["egg-rr",111],["egg-rr",83]],"time":35.532958984375,"type":"rewrite"},{"count":[[254,210]],"inputs":[["(+.f64 (*.f64 1/2 y) (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(*.f64 1/2 (/.f64 (pow.f64 x 2) y))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(*.f64 1/2 (/.f64 (pow.f64 x 2) y))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(/.f64 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1/2 (pow.f64 z 2))) y)","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(*.f64 1/2 y)","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(*.f64 1/2 y)","(+.f64 (*.f64 1/2 y) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/2 (pow.f64 z 2))) y)))","(+.f64 (*.f64 1/2 y) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/2 (pow.f64 z 2))) y)))","(+.f64 (*.f64 1/2 y) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/2 (pow.f64 z 2))) y)))","(*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 1/2 y) (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)))","(fma.f64 -1/2 (/.f64 (*.f64 z z) y) (*.f64 1/2 y))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y))","(*.f64 1/2 (/.f64 (pow.f64 x 2) y))","(/.f64 (*.f64 x x) (*.f64 y 2))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y))","(*.f64 1/2 (/.f64 (pow.f64 x 2) y))","(/.f64 (*.f64 x x) (*.f64 y 2))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y))","(/.f64 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1/2 (pow.f64 z 2))) y)","(/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y)","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y))","(*.f64 1/2 y)","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y))","(+.f64 (*.f64 1/2 y) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y))","(*.f64 1/2 y)","(+.f64 (*.f64 1/2 y) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/2 (pow.f64 z 2))) y)))","(fma.f64 1/2 y (/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y))","(+.f64 (*.f64 1/2 y) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/2 (pow.f64 z 2))) y)))","(fma.f64 1/2 y (/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y))","(+.f64 (*.f64 1/2 y) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/2 (pow.f64 z 2))) y)))","(fma.f64 1/2 y (/.f64 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/2 (*.f64 z z))) y))","(*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y))","(/.f64 (fma.f64 y y (*.f64 x x)) (*.f64 y 2))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 -1/2 (*.f64 z z)) (*.f64 1/2 (fma.f64 y y (*.f64 x x)))) y)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 -1/2 (*.f64 z z)) (*.f64 1/2 (fma.f64 y y (*.f64 x x)))) y)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 -1/2 (*.f64 z z)) (*.f64 1/2 (fma.f64 y y (*.f64 x x)))) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 -1/2 (*.f64 z z)) (*.f64 1/2 (fma.f64 y y (*.f64 x x)))) y)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 -1/2 (*.f64 z z)) (*.f64 1/2 (fma.f64 y y (*.f64 x x)))) y)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 -1/2 (*.f64 z z)) (*.f64 1/2 (fma.f64 y y (*.f64 x x)))) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 -1/2 (*.f64 z z)) (*.f64 1/2 (fma.f64 y y (*.f64 x x)))) y)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 -1/2 (*.f64 z z)) (*.f64 1/2 (fma.f64 y y (*.f64 x x)))) y)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) y)) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 -1/2 (*.f64 z z)) (*.f64 1/2 (fma.f64 y y (*.f64 x x)))) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)","(*.f64 -1/2 (/.f64 (pow.f64 z 2) y))","(/.f64 (*.f64 -1/2 (*.f64 z z)) y)"]],"time":217.95703125,"type":"simplify"},{"compiler":[[4631,1948]],"time":36.5859375,"type":"eval"},{"alts":[["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (/.f64 z (cbrt.f64 y)) z) (*.f64 (cbrt.f64 (*.f64 y y)) -2)))","fresh",34.890625],["(*.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (/.f64 1/2 y))) (pow.f64 (cbrt.f64 (+.f64 y y)) -2))","fresh",28.383728870011094],["(/.f64 (/.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) y) (cbrt.f64 2)) (cbrt.f64 4))","fresh",28.337808855937386],["(/.f64 (*.f64 (+.f64 z y) (-.f64 y z)) (*.f64 y 2))","fresh",37.75343393721246],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (*.f64 (/.f64 z y) (*.f64 z -1/2)))","fresh",27.079713977682427],["(/.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) y) (*.f64 y (*.f64 (*.f64 z z) -1/2))) (*.f64 y y))","fresh",41.96045768447644],["(*.f64 1/2 y)","done",26.932111484839204],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4)))","next",27.079713977682427],["(/.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (*.f64 (*.f64 y y) 4))) (cbrt.f64 (+.f64 y y)))","fresh",35.19664003907377],["(/.f64 (pow.f64 x 2) (*.f64 y 2))","fresh",52.98111903088133]],"compiler":[[26,15],[25,16],[21,14],[14,9],[20,12],[25,14],[6,5],[24,16],[25,15],[10,8],[26,15],[25,16],[21,14],[14,9],[20,12],[25,14],[24,16],[25,15],[10,8]],"count":[[220,10]],"kept":[{"done":[1,1],"fresh":[8,5],"new":[210,4],"picked":[1,0]}],"min-error":[6.358664672754933],"time":56.674072265625,"type":"prune"},{"compiler":[[72,39]],"locations":[["(*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))",0.24609375,true],["(/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4))",0.30306625976844204,true],["(*.f64 z (cbrt.f64 -1/2))",0.46875,true],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4)))",25.28532788411803,true]],"time":16.89990234375,"type":"localize"},{"count":[[4,96]],"series":[["(*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))","y","-inf",0.3251953125],["(*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))","y","inf",0.150146484375],["(*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))","y","0",0.322998046875],["(*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))","z","-inf",0.157958984375],["(*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))","z","inf",0.281005859375],["(*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))","z","0",0.3310546875],["(/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4))","y","-inf",0.238037109375],["(/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4))","y","inf",0.390869140625],["(/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4))","y","0",0.963134765625],["(/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4))","z","-inf",0.176025390625],["(/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4))","z","inf",0.27197265625],["(/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4))","z","0",2.27197265625],["(*.f64 z (cbrt.f64 -1/2))","z","-inf",0.298095703125],["(*.f64 z (cbrt.f64 -1/2))","z","inf",0.31298828125],["(*.f64 z (cbrt.f64 -1/2))","z","0",0.7568359375],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4)))","z","-inf",0.217041015625],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4)))","z","inf",0.654052734375],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4)))","z","0",0.864990234375],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4)))","y","-inf",0.346923828125],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4)))","y","inf",0.3828125],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4)))","y","0",1.260009765625],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4)))","x","-inf",0.2041015625],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4)))","x","inf",0.23095703125],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4)))","x","0",1.703857421875]],"time":13.491943359375,"type":"series"},{"count":[[4,242]],"inputs":[["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4)))","(*.f64 z (cbrt.f64 -1/2))","(/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4))","(*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y)) (*.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y)) 0) (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y)) (*.f64 0 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y))) (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)) (/.f64 (*.f64 (*.f64 z z) -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)) (neg.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y))) (pow.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y)) 2/3) (cbrt.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 1/4)) (neg.f64 y)) (*.f64 y (*.f64 (fma.f64 x x (*.f64 y y)) -1/2))) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (neg.f64 y)) (*.f64 (cbrt.f64 4) (*.f64 (fma.f64 x x (*.f64 y y)) -1/2))) (*.f64 (cbrt.f64 4) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) y) (*.f64 (cbrt.f64 4) (*.f64 (fma.f64 x x (*.f64 y y)) 1/2))) (*.f64 (cbrt.f64 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 1/2)) (neg.f64 y)) (*.f64 (cbrt.f64 -4) (*.f64 (fma.f64 x x (*.f64 y y)) -1/2))) (*.f64 (cbrt.f64 -4) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 1/2)) y) (*.f64 (cbrt.f64 -4) (*.f64 (fma.f64 x x (*.f64 y y)) 1/2))) (*.f64 (cbrt.f64 -4) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 (cbrt.f64 1/4))) (neg.f64 y)) (*.f64 (cbrt.f64 (cbrt.f64 16)) (*.f64 (fma.f64 x x (*.f64 y y)) -1/2))) (*.f64 (cbrt.f64 (cbrt.f64 16)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 (cbrt.f64 1/4))) y) (*.f64 (cbrt.f64 (cbrt.f64 16)) (*.f64 (fma.f64 x x (*.f64 y y)) 1/2))) (*.f64 (cbrt.f64 (cbrt.f64 16)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (neg.f64 y)) (*.f64 (*.f64 y (cbrt.f64 4)) (*.f64 (fma.f64 x x (*.f64 y y)) -1/2))) (*.f64 (*.f64 y (cbrt.f64 4)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) y) (*.f64 (*.f64 y (cbrt.f64 4)) (*.f64 (fma.f64 x x (*.f64 y y)) 1/2))) (*.f64 (*.f64 y (cbrt.f64 4)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) -1/2) (*.f64 y (cbrt.f64 4))) (*.f64 (neg.f64 y) (*.f64 z (*.f64 z (cbrt.f64 -1/2))))) (*.f64 (neg.f64 y) (*.f64 y (cbrt.f64 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) -1/2) (cbrt.f64 4)) (*.f64 (neg.f64 y) (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))))) (*.f64 (neg.f64 y) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) -1/2) (cbrt.f64 -4)) (*.f64 (neg.f64 y) (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 1/2)))) (*.f64 (neg.f64 y) (cbrt.f64 -4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) -1/2) y) (*.f64 (neg.f64 y) (*.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 1/4)))) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) -1/2) (cbrt.f64 (cbrt.f64 16))) (*.f64 (neg.f64 y) (*.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 (cbrt.f64 1/4))))) (*.f64 (neg.f64 y) (cbrt.f64 (cbrt.f64 16))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 y (cbrt.f64 4))) (*.f64 y (*.f64 z (*.f64 z (cbrt.f64 -1/2))))) (*.f64 y (*.f64 y (cbrt.f64 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (cbrt.f64 4)) (*.f64 y (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))))) (*.f64 y (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (cbrt.f64 -4)) (*.f64 y (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 1/2)))) (*.f64 y (cbrt.f64 -4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (cbrt.f64 (cbrt.f64 16))) (*.f64 y (*.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 (cbrt.f64 1/4))))) (*.f64 y (cbrt.f64 (cbrt.f64 16))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 1/4))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 1/4)) (*.f64 (fma.f64 x x (*.f64 y y)) 1/2)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 1/4)) y) (*.f64 y (*.f64 (fma.f64 x x (*.f64 y y)) 1/2))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) y) (*.f64 y (*.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 1/4)))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)) 1 (/.f64 (*.f64 (*.f64 z z) -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (/.f64 1 y) (/.f64 (*.f64 (*.f64 z z) -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)) (/.f64 (*.f64 (*.f64 z z) -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x x (*.f64 y y))) (*.f64 (pow.f64 (fma.f64 x x (*.f64 y y)) 2/3) (/.f64 1/2 y)) (/.f64 (*.f64 (*.f64 z z) -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (cbrt.f64 (/.f64 1/2 y))) (pow.f64 (/.f64 1/2 y) 2/3) (/.f64 (*.f64 (*.f64 z z) -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 y) (fma.f64 x x (*.f64 y y)) (/.f64 (*.f64 (*.f64 z z) -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y))) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)) 2)) (/.f64 (*.f64 (*.f64 z z) -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) 1 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 (cbrt.f64 1/4))) (cbrt.f64 (/.f64 -1/2 (cbrt.f64 16))) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 -1/2)) (*.f64 (/.f64 z y) (cbrt.f64 1/4)) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 z y) (cbrt.f64 (cbrt.f64 1/4))) (/.f64 (*.f64 z (cbrt.f64 -1/2)) (cbrt.f64 (cbrt.f64 16))) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/4) (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 z z) y) -1/2 (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))) (*.f64 (pow.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) 2/3) (cbrt.f64 1/4)) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 1/4)) (/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 (cbrt.f64 16))) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y)) (pow.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) 2/3) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z y) (*.f64 (*.f64 z (cbrt.f64 -1/2)) (cbrt.f64 1/4)) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 (*.f64 z z) -1/2) y) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y)) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) 2/3) (cbrt.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y)) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 1/2)) (neg.f64 (cbrt.f64 1/4)) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 1/4) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 z (cbrt.f64 -1/2)) (cbrt.f64 (cbrt.f64 1/4))) (/.f64 (/.f64 z y) (cbrt.f64 (cbrt.f64 16))) (*.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (cbrt.f64 -1/2)) (*.f64 (*.f64 z (cbrt.f64 -1/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z (cbrt.f64 -1/2)) 0) (*.f64 z (cbrt.f64 -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (cbrt.f64 -1/2)) (*.f64 0 (*.f64 z (cbrt.f64 -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 z (cbrt.f64 -1/2))) (*.f64 z (cbrt.f64 -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 -1/2)) (*.f64 (cbrt.f64 (cbrt.f64 1/4)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (cbrt.f64 -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/2) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (cbrt.f64 -1/2))) (pow.f64 (*.f64 z (cbrt.f64 -1/2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (cbrt.f64 -1/2)) 2/3) (cbrt.f64 (*.f64 z (cbrt.f64 -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -1/2 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (cbrt.f64 (*.f64 (*.f64 z z) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 z (cbrt.f64 -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (cbrt.f64 1/2) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (cbrt.f64 -1/2))) (cbrt.f64 (cbrt.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (cbrt.f64 -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/2) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (cbrt.f64 -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (cbrt.f64 -1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 z 3) -1/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (cbrt.f64 -1/2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (cbrt.f64 -1/2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 1/2) z))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 z 3) -1/2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) (*.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) 0) (/.f64 (*.f64 (*.f64 z z) -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) (*.f64 0 (/.f64 (*.f64 (*.f64 z z) -1/2) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (*.f64 z z) -1/2) y)) (/.f64 (*.f64 (*.f64 z z) -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (cbrt.f64 -4)) (neg.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 (cbrt.f64 1/4))) (/.f64 1 (cbrt.f64 (cbrt.f64 16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y)) (pow.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) 2/3) (cbrt.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (*.f64 z z) -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 z z) y) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))) (*.f64 (pow.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) 2/3) (cbrt.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 1/2)) (neg.f64 (cbrt.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 -1/2)) (*.f64 (/.f64 z y) (cbrt.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 z (cbrt.f64 -1/2)) (cbrt.f64 (cbrt.f64 1/4))) (/.f64 (/.f64 z y) (cbrt.f64 (cbrt.f64 16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z y) (*.f64 (*.f64 z (cbrt.f64 -1/2)) (cbrt.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 z y) (cbrt.f64 (cbrt.f64 1/4))) (/.f64 (*.f64 z (cbrt.f64 -1/2)) (cbrt.f64 (cbrt.f64 16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 (cbrt.f64 1/4))) (cbrt.f64 (/.f64 -1/2 (cbrt.f64 16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/4)) (/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 (cbrt.f64 16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/4) (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (/.f64 1 (*.f64 y (cbrt.f64 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 1/4)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 (cbrt.f64 1/4))) 1) (*.f64 (cbrt.f64 (cbrt.f64 16)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (*.f64 z z) (cbrt.f64 1/2))) (*.f64 (cbrt.f64 -4) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 y))) (*.f64 (cbrt.f64 -4) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 y)) (*.f64 (cbrt.f64 4) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/4)) (*.f64 (*.f64 z z) (cbrt.f64 1/2))) (*.f64 (cbrt.f64 (cbrt.f64 16)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/4)) (*.f64 z (*.f64 z (cbrt.f64 -1/2)))) (*.f64 (cbrt.f64 (cbrt.f64 16)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/4)) (/.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 y))) (*.f64 (cbrt.f64 (cbrt.f64 16)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 z z) (cbrt.f64 1/2)) 1) (*.f64 y (cbrt.f64 -4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 z z) (cbrt.f64 1/2)) 1) (*.f64 (neg.f64 y) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 z z) (cbrt.f64 1/2)) (cbrt.f64 (cbrt.f64 1/4))) (*.f64 (neg.f64 y) (cbrt.f64 (cbrt.f64 16))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 z z) (cbrt.f64 1/2)) -1) (*.f64 (neg.f64 y) (cbrt.f64 -4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 y)) 1) (*.f64 (pow.f64 y 2/3) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 y)) (cbrt.f64 (cbrt.f64 1/4))) (*.f64 (pow.f64 y 2/3) (cbrt.f64 (cbrt.f64 16))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 y)) -1) (*.f64 (pow.f64 y 2/3) (cbrt.f64 -4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 (cbrt.f64 1/4))) (*.f64 y (cbrt.f64 (cbrt.f64 16))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) -1) (*.f64 y (cbrt.f64 -4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z z) (cbrt.f64 1/2)) (neg.f64 (*.f64 y (cbrt.f64 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 1/2)) (cbrt.f64 -4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 1/4)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 (cbrt.f64 1/4))) (cbrt.f64 (cbrt.f64 16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (*.f64 y (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y)) (pow.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) 2/3)) (cbrt.f64 (cbrt.f64 16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 z (cbrt.f64 -1/2)) (cbrt.f64 (cbrt.f64 1/4))) (/.f64 z y)) (cbrt.f64 (cbrt.f64 16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 z y) (cbrt.f64 (cbrt.f64 1/4))) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 (cbrt.f64 16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (*.f64 z z) (cbrt.f64 1/2))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/4) (/.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/4) (*.f64 z (*.f64 z (cbrt.f64 -1/2)))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/4)) (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))) (cbrt.f64 (cbrt.f64 16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 1/4))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 (cbrt.f64 1/4))) (cbrt.f64 -1/2)) (cbrt.f64 (cbrt.f64 16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) 2/3) (cbrt.f64 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 1/2)))) (cbrt.f64 (cbrt.f64 -4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) 2/3) (cbrt.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))))) (cbrt.f64 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 (/.f64 -1/2 (cbrt.f64 16)))) (cbrt.f64 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 (cbrt.f64 16))) (cbrt.f64 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (*.f64 (*.f64 z (cbrt.f64 -1/2)) (cbrt.f64 1/4))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (*.f64 (*.f64 z (cbrt.f64 -1/2)) (cbrt.f64 1/4))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (*.f64 (*.f64 z (cbrt.f64 -1/2)) (cbrt.f64 1/4))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (cbrt.f64 -1/2)) (/.f64 (/.f64 z y) (cbrt.f64 (cbrt.f64 16)))) (cbrt.f64 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 1/4)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 (cbrt.f64 1/4))) 1) (cbrt.f64 (cbrt.f64 16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 z 2/3) (cbrt.f64 (cbrt.f64 -1/2))) (*.f64 (pow.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) 2/3) (cbrt.f64 1/4))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 z z) (cbrt.f64 1/2)) (neg.f64 (cbrt.f64 1/4))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 z z)) -1/2) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z z) -1/2) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 z z) (cbrt.f64 1/2)) (cbrt.f64 1/4)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 y)) (cbrt.f64 1/4)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 1/2))) (pow.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) 2/3)) (cbrt.f64 (cbrt.f64 -4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))) (pow.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) 2/3)) (cbrt.f64 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z y) (/.f64 (*.f64 z (cbrt.f64 -1/2)) (cbrt.f64 (cbrt.f64 16)))) (cbrt.f64 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (/.f64 (*.f64 y (cbrt.f64 4)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (*.f64 1 (*.f64 y (cbrt.f64 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (*.f64 (*.f64 y (cbrt.f64 4)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z z) (cbrt.f64 1/2)) (*.f64 (cbrt.f64 -4) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z z) (cbrt.f64 1/2)) (*.f64 (cbrt.f64 4) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (*.f64 (cbrt.f64 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 1/4))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 (cbrt.f64 1/4)))) (neg.f64 (cbrt.f64 (cbrt.f64 16))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 z y)) (*.f64 (*.f64 z (cbrt.f64 -1/2)) (cbrt.f64 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 z z) y) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 z z) -1/2) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (*.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) 0) (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (*.f64 0 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))) (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (cbrt.f64 -1/2))) (*.f64 (pow.f64 (*.f64 z (cbrt.f64 -1/2)) 2/3) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (*.f64 z (cbrt.f64 -1/2)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (*.f64 (/.f64 z y) (cbrt.f64 -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 -1/2)) (/.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))) (pow.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) 2/3) (cbrt.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 z (cbrt.f64 -1/2)) (cbrt.f64 (/.f64 z y))) (pow.f64 (/.f64 z y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 z y) (cbrt.f64 (*.f64 z (cbrt.f64 -1/2)))) (pow.f64 (*.f64 z (cbrt.f64 -1/2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 z y) (cbrt.f64 -1/2)) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 z y)) (*.f64 (pow.f64 (/.f64 z y) 2/3) (*.f64 z (cbrt.f64 -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 (cbrt.f64 -1/2))) (cbrt.f64 (cbrt.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 1/2))) (neg.f64 (pow.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 z y)) (*.f64 (cbrt.f64 1/2) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 z z) y)) (cbrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/2) z) (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 z z) (cbrt.f64 1/2)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z z) (cbrt.f64 1/2)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (*.f64 z (cbrt.f64 -1/2))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) 2/3) (*.f64 (pow.f64 z 2/3) (cbrt.f64 (cbrt.f64 -1/2)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (cbrt.f64 -1/2)) (/.f64 z (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (*.f64 z z) (cbrt.f64 1/2))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -1/2) (neg.f64 (*.f64 z z))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -1/2) (*.f64 z z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 z) (*.f64 (pow.f64 (/.f64 z y) 2/3) (*.f64 z (cbrt.f64 -1/2)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 z)) (*.f64 (pow.f64 (/.f64 z y) 2/3) (*.f64 z (cbrt.f64 -1/2)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (/.f64 (*.f64 z (cbrt.f64 -1/2)) (pow.f64 y 2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 z 2/3) (cbrt.f64 (cbrt.f64 -1/2))) (pow.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 z z) (cbrt.f64 1/2)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 1/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 z (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (/.f64 (*.f64 z z) y) 3) -1/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 z z) y) 3) -1/2))))))"]],"rules":[["egg-rr",55],["egg-rr",95],["egg-rr",24],["egg-rr",68]],"time":45.086181640625,"type":"rewrite"},{"count":[[338,259]],"inputs":[["(+.f64 (*.f64 1/2 y) (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(*.f64 1/2 (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(*.f64 1/2 (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(/.f64 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (cbrt.f64 4))) y)","(+.f64 (*.f64 1/2 y) (+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (*.f64 1/2 y) (+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (*.f64 1/2 y) (+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(*.f64 1/2 y)","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(*.f64 1/2 y)","(+.f64 (*.f64 1/2 y) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (cbrt.f64 4)))) y)))","(+.f64 (*.f64 1/2 y) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (cbrt.f64 4)))) y)))","(+.f64 (*.f64 1/2 y) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (cbrt.f64 4)))) y)))","(*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 1/2 y) (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))))","(fma.f64 1/2 y (/.f64 (*.f64 (*.f64 z z) -1/2) y))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y)))","(*.f64 1/2 (/.f64 (pow.f64 x 2) y))","(/.f64 (*.f64 (*.f64 1/2 x) x) y)","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y)))","(*.f64 1/2 (/.f64 (pow.f64 x 2) y))","(/.f64 (*.f64 (*.f64 1/2 x) x) y)","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y)))","(/.f64 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (cbrt.f64 4))) y)","(/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y))","(+.f64 (*.f64 1/2 y) (+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y)))","(+.f64 (*.f64 1/2 y) (+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y)))","(+.f64 (*.f64 1/2 y) (+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y)))","(*.f64 1/2 y)","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (+.f64 (*.f64 1/2 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 1/2 y (/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y)))","(*.f64 1/2 y)","(+.f64 (*.f64 1/2 y) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (cbrt.f64 4)))) y)))","(fma.f64 1/2 y (/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y)))","(+.f64 (*.f64 1/2 y) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (cbrt.f64 4)))) y)))","(fma.f64 1/2 y (/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y)))","(+.f64 (*.f64 1/2 y) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (cbrt.f64 4)))) y)))","(fma.f64 1/2 y (/.f64 (*.f64 -1/2 (-.f64 (*.f64 x x) (*.f64 z z))) (neg.f64 y)))","(*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y))","(/.f64 (fma.f64 x x (*.f64 y y)) (*.f64 y 2))","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 1/2 (fma.f64 x x (*.f64 y y))) (*.f64 (*.f64 z z) -1/2)) y)","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 1/2 (fma.f64 x x (*.f64 y y))) (*.f64 (*.f64 z z) -1/2)) y)","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 1/2 (fma.f64 x x (*.f64 y y))) (*.f64 (*.f64 z z) -1/2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 1/2 (fma.f64 x x (*.f64 y y))) (*.f64 (*.f64 z z) -1/2)) y)","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 1/2 (fma.f64 x x (*.f64 y y))) (*.f64 (*.f64 z z) -1/2)) y)","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 1/2 (fma.f64 x x (*.f64 y y))) (*.f64 (*.f64 z z) -1/2)) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 1/2 (fma.f64 x x (*.f64 y y))) (*.f64 (*.f64 z z) -1/2)) y)","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 1/2 (fma.f64 x x (*.f64 y y))) (*.f64 (*.f64 z z) -1/2)) y)","(+.f64 (/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4))) (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 1/2 (fma.f64 x x (*.f64 y y))) (*.f64 (*.f64 z z) -1/2)) y)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(*.f64 (cbrt.f64 -1/2) z)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) (*.f64 y (cbrt.f64 4)))","(/.f64 (*.f64 (*.f64 z z) -1/2) y)","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))","(/.f64 (*.f64 (cbrt.f64 -1/2) (pow.f64 z 2)) y)","(*.f64 (cbrt.f64 -1/2) (/.f64 (*.f64 z z) y))"]],"time":342.81787109375,"type":"simplify"},{"compiler":[[6275,3255]],"time":58.572998046875,"type":"eval"},{"alts":[["(/.f64 (+.f64 (*.f64 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 1/2)) y) (*.f64 (cbrt.f64 -4) (*.f64 (fma.f64 x x (*.f64 y y)) 1/2))) (*.f64 (cbrt.f64 -4) y))","fresh",28.184552622971026],["(/.f64 (*.f64 (*.f64 1/2 x) x) y)","fresh",52.98111903088133],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (/.f64 z (cbrt.f64 y)) z) (*.f64 (cbrt.f64 (*.f64 y y)) -2)))","fresh",34.890625],["(*.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (/.f64 1/2 y))) (pow.f64 (cbrt.f64 (+.f64 y y)) -2))","fresh",28.383728870011094],["(/.f64 (*.f64 (+.f64 z y) (-.f64 y z)) (*.f64 y 2))","fresh",37.75343393721246],["(/.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (cbrt.f64 (cbrt.f64 16))) (*.f64 y (*.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 (cbrt.f64 1/4))))) (*.f64 y (cbrt.f64 (cbrt.f64 16))))","fresh",28.25219409391152],["(*.f64 1/2 y)","done",26.932111484839204],["(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4)))","done",27.079713977682427],["(/.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (*.f64 (*.f64 y y) 4))) (cbrt.f64 (+.f64 y y)))","fresh",35.19664003907377]],"compiler":[[30,21],[10,7],[26,15],[25,16],[14,9],[36,27],[6,5],[24,16],[25,15]],"count":[[269,9]],"kept":[{"done":[1,1],"fresh":[8,4],"new":[259,3],"picked":[1,1]}],"min-error":[6.358664672754933],"time":71.333984375,"type":"prune"},{"accuracy":[7.3345790757281435],"baseline":[26.932111484839204],"branch":[["x",18.97203213630042,5],["y",7.3345790757281435,3],["z",18.91743000397379,6],["(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))",8.30240181751483,3],["(*.f64 x x)",19.766310395567185,3],["(*.f64 x x)",19.766310395567185,3],["(*.f64 z z)",19.812600595384847,3]],"compiler":[[4,3],[4,3],[4,3],[18,11],[6,4],[6,4],[6,4],[357,166]],"count":[[19,3]],"inputs":[["(/.f64 (+.f64 (*.f64 (*.f64 (/.f64 (*.f64 z z) y) (cbrt.f64 1/2)) y) (*.f64 (cbrt.f64 -4) (*.f64 (fma.f64 x x (*.f64 y y)) 1/2))) (*.f64 (cbrt.f64 -4) y))","(/.f64 (*.f64 (*.f64 1/2 x) x) y)","(/.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (cbrt.f64 (cbrt.f64 16))) (*.f64 y (*.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 (cbrt.f64 1/4))))) (*.f64 y (cbrt.f64 (cbrt.f64 16))))","(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (/.f64 z (cbrt.f64 y)) z) (*.f64 (cbrt.f64 (*.f64 y y)) -2)))","(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (*.f64 (/.f64 z y) (*.f64 z -1/2)))","(/.f64 (+.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) y) (*.f64 y (*.f64 (*.f64 z z) -1/2))) (*.f64 y y))","(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 (/.f64 z y) (*.f64 z (cbrt.f64 -1/2))) (cbrt.f64 4)))","(pow.f64 (pow.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y)) 3) 1/3)","(/.f64 (-.f64 (*.f64 (/.f64 (fma.f64 x x (*.f64 y y)) y) (cbrt.f64 (*.f64 (*.f64 y y) 4))) (*.f64 2 (*.f64 (*.f64 z z) (cbrt.f64 (/.f64 1/2 y))))) (*.f64 2 (cbrt.f64 (*.f64 (*.f64 y y) 4))))","(*.f64 (*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (/.f64 1/2 y))) (pow.f64 (cbrt.f64 (+.f64 y y)) -2))","(/.f64 (/.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) y) (cbrt.f64 2)) (cbrt.f64 4))","(/.f64 (*.f64 (+.f64 z y) (-.f64 y z)) (*.f64 y 2))","(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (/.f64 (*.f64 z z) (*.f64 -2 y)))","(*.f64 1/2 y)","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) y) (*.f64 y (*.f64 (*.f64 z z) 1/2))) (*.f64 y y))","(/.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (*.f64 (*.f64 y y) 4))) (cbrt.f64 (+.f64 y y)))","(/.f64 (pow.f64 x 2) (*.f64 y 2))","(*.f64 (fma.f64 x x (*.f64 (+.f64 y z) (-.f64 y z))) (/.f64 1/2 y))","(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))"]],"link":["."],"name":["Diagrams.TwoD.Apollonian:initialConfig from diagrams-contrib-1.3.0.5, A"],"oracle":[63.59417506210337],"outputs":[["(*.f64 1/2 y)","(fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (*.f64 (/.f64 z y) (*.f64 z -1/2)))","(*.f64 1/2 y)"]],"time":137.360107421875,"times":[["x",27.9560546875],["y",17.535888671875],["z",39.885986328125],["(/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y 2))",12.553955078125],["(*.f64 x x)",10.0078125],["(*.f64 x x)",10.171142578125],["(*.f64 z z)",13.55078125]],"type":"regimes"},{"bstep":[[1.7450084516876976e+95,1.0523325938467296e+97,71.054931640625],[-1.4934684986280894e+145,-8.857477584857317e+144,11.090087890625]],"compiler":[[7,6],[21,13],[7,6],[21,13],[7,6],[21,13],[7,6],[21,13],[7,6],[21,13],[7,6],[21,13],[7,6],[21,13],[20,13],[4,3]],"method":["binary-search","binary-search"],"time":82.35498046875,"type":"bsearch"},{"compiler":[[34,22]],"inputs":[["(if (<=.f64 y -14934684986280894322135729509879243095059153151611278539522959770206197780055928351111065517931581771749641881322268982272292203675750347392942080) (*.f64 1/2 y) (if (<=.f64 y 179999999999999988818010820511597443726611257066532188186241796915448523849098822671685015044096) (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (*.f64 (/.f64 z y) (*.f64 z -1/2))) (*.f64 1/2 y)))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 y -14934684986280894322135729509879243095059153151611278539522959770206197780055928351111065517931581771749641881322268982272292203675750347392942080) (*.f64 1/2 y) (if (<=.f64 y 179999999999999988818010820511597443726611257066532188186241796915448523849098822671685015044096) (fma.f64 (fma.f64 x x (*.f64 y y)) (/.f64 1/2 y) (*.f64 (/.f64 z y) (*.f64 z -1/2))) (*.f64 1/2 y)))","(if (<=.f64 y -14934684986280894322135729509879243095059153151611278539522959770206197780055928351111065517931581771749641881322268982272292203675750347392942080) (*.f64 1/2 y) (if (<=.f64 y 179999999999999988818010820511597443726611257066532188186241796915448523849098822671685015044096) (/.f64 (+.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 z (*.f64 z -1/2))) y) (*.f64 1/2 y)))"]],"stop":[["fuel",1]],"time":22.744873046875,"type":"simplify"},{"time":0.01318359375,"type":"soundness"},{"compiler":[[34,22]],"remove-preprocessing":[[]],"time":15.22802734375,"type":"end"}]
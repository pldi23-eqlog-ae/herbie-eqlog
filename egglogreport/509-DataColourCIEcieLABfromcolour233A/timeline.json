[{"compiler":[[12,10]],"method":["search"],"sampling":[[12,0.7980482098646462,0.09170725150033832,0.11024453863501549],[11,0.7687799381092191,0.12097552325576544,0.11024453863501549],[10,0.7258531395345926,0.17951206676661968,0.09463479369878769],[9,0.6712190322577953,0.23414617404341698,0.09463479369878769],[8,0.5931703075766563,0.34341438859701157,0.06341530382633209],[7,0.49951183795928955,0.43707285821437836,0.06341530382633209],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":27.584228515625,"type":"analyze"},{"outcomes":[["body",256,"invalid",6.387939453125,156],["body",256,"valid",323.739990234375,8256]],"time":337.808837890625,"type":"sample"},{"compiler":[[11,9]],"inputs":[["0","1"],["(*.f64 (*.f64 (-.f64 x (/.f64 16 116)) 3) y)","(*.f64 (*.f64 (-.f64 y (/.f64 16 116)) 3) x)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (*.f64 (-.f64 x (/.f64 16 116)) 3) y)","(*.f64 (fma.f64 x 3 -12/29) y)","(*.f64 (*.f64 (-.f64 y (/.f64 16 116)) 3) x)","(*.f64 (fma.f64 3 y -12/29) x)"]],"symmetry":[[]],"time":62.60009765625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (*.f64 (-.f64 x (/.f64 16 116)) 3) y)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 (-.f64 x (/.f64 16 116)) 3) y)","(*.f64 (fma.f64 x 3 -12/29) y)"]],"time":21.134033203125,"type":"simplify"},{"compiler":[[17,13]],"time":0.39599609375,"type":"eval"},{"alts":[["(*.f64 (fma.f64 x 3 -12/29) y)","next",0.40625],["(*.f64 (*.f64 (-.f64 x (/.f64 16 116)) 3) y)","fresh",0.421875]],"compiler":[[8,6],[11,9],[8,6],[11,9]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.38671875],"time":1.282958984375,"type":"prune"},{"compiler":[[16,11]],"locations":[["(fma.f64 x 3 -12/29)",0.0390625,true],["(*.f64 (fma.f64 x 3 -12/29) y)",0.3920088945863437,true]],"time":4.046875,"type":"localize"},{"count":[[2,36]],"series":[["(fma.f64 x 3 -12/29)","x","-inf",0.142822265625],["(fma.f64 x 3 -12/29)","x","inf",0.156982421875],["(fma.f64 x 3 -12/29)","x","0",0.14404296875],["(*.f64 (fma.f64 x 3 -12/29) y)","y","-inf",0.31103515625],["(*.f64 (fma.f64 x 3 -12/29) y)","y","inf",0.328857421875],["(*.f64 (fma.f64 x 3 -12/29) y)","y","0",0.551025390625],["(*.f64 (fma.f64 x 3 -12/29) y)","x","-inf",0.408935546875],["(*.f64 (fma.f64 x 3 -12/29) y)","x","inf",0.428955078125],["(*.f64 (fma.f64 x 3 -12/29) y)","x","0",0.463134765625]],"time":3.050048828125,"type":"series"},{"count":[[2,86]],"inputs":[["(*.f64 (fma.f64 x 3 -12/29) y)","(fma.f64 x 3 -12/29)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 x 3)) (*.f64 y -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y -12/29) (*.f64 y (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 0 (*.f64 y -12/29)) (*.f64 y (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 0 (*.f64 y (*.f64 x 3))) (*.f64 y -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 x 3)) (+.f64 (*.f64 y -12/29) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y -12/29) (+.f64 (*.f64 y (*.f64 x 3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (*.f64 y (*.f64 x 3)))) (neg.f64 (neg.f64 (*.f64 y -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 y (*.f64 x 3)) -1)) (neg.f64 (*.f64 (*.f64 y -12/29) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x 3 -12/29) y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (fma.f64 x 3 -12/29) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 y) (fma.f64 x 3 -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x 3 -12/29)) (*.f64 (pow.f64 (fma.f64 x 3 -12/29) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (fma.f64 x 3 -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (fma.f64 x 3 -12/29))) (pow.f64 (fma.f64 x 3 -12/29) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x 3 -12/29) 2/3) (*.f64 y (cbrt.f64 (fma.f64 x 3 -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (fma.f64 x 3 -12/29)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 x 3 -12/29) 2/3) y) (cbrt.f64 (fma.f64 x 3 -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 x 3 -12/29) y)) (pow.f64 (*.f64 (fma.f64 x 3 -12/29) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (fma.f64 x 3 -12/29) y) 2/3) (cbrt.f64 (*.f64 (fma.f64 x 3 -12/29) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x 3 -12/29) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (fma.f64 x 3 -12/29) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x 3 -12/29) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (fma.f64 x 3 -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 y) (fma.f64 x 3 -12/29))) (neg.f64 (pow.f64 (*.f64 (fma.f64 x 3 -12/29) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 y) (fma.f64 x 3 -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 y) (fma.f64 x 3 -12/29)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fma.f64 x 3 -12/29) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x 3 -12/29) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (fma.f64 x 3 -12/29) y) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (pow.f64 (*.f64 x 3) 3) -1728/24389) y) (/.f64 1 (+.f64 144/841 (*.f64 (*.f64 x 3) (fma.f64 x 3 12/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (*.f64 x 3) 3) -1728/24389) y) (+.f64 144/841 (*.f64 (*.f64 x 3) (fma.f64 x 3 12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x 3 -12/29) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (fma.f64 x 3 -12/29)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 x 3) 3) -1728/24389) y)) (neg.f64 (+.f64 144/841 (*.f64 (*.f64 x 3) (fma.f64 x 3 12/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 x 3 -12/29) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 x 3 -12/29) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 x 3 -12/29) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 y) (fma.f64 x 3 -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 x 3 -12/29) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 x 3) (*.f64 y -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 3) y (*.f64 y -12/29))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 3) -12/29)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -12/29 (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 3 -12/29) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x 3 -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x 3) 12/29)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -12/29 (*.f64 -3 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (*.f64 -3 x) 12/29))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x 3 -12/29)) (pow.f64 (fma.f64 x 3 -12/29) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x 3 -12/29) 2/3) (cbrt.f64 (fma.f64 x 3 -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 -3 x) 12/29)) (neg.f64 (pow.f64 (fma.f64 x 3 -12/29) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x 3) 3) -1728/24389) (/.f64 1 (+.f64 144/841 (*.f64 (*.f64 x 3) (fma.f64 x 3 12/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 144/841) (-.f64 (pow.f64 (*.f64 x 3) 2/3) (*.f64 (cbrt.f64 -12/29) (cbrt.f64 (*.f64 x 3))))) (+.f64 (cbrt.f64 -12/29) (cbrt.f64 (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x 3) 2/3) (-.f64 (cbrt.f64 144/841) (*.f64 (cbrt.f64 (*.f64 x 3)) (cbrt.f64 -12/29)))) (+.f64 (cbrt.f64 (*.f64 x 3)) (cbrt.f64 -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 -3 x) 12/29))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -3 x) 12/29) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x 3 -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x 3 -12/29) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x 3 -12/29) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 x 3) 3)) 1728/24389) (/.f64 1 (neg.f64 (+.f64 144/841 (*.f64 (*.f64 x 3) (fma.f64 x 3 12/29))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x 3) 3) -1728/24389) (+.f64 144/841 (*.f64 (*.f64 x 3) (fma.f64 x 3 12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 x 3) 3)) 1728/24389)) (neg.f64 (neg.f64 (+.f64 144/841 (*.f64 (*.f64 x 3) (fma.f64 x 3 12/29))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 x 3) 3)) 1728/24389) (neg.f64 (+.f64 144/841 (*.f64 (*.f64 x 3) (fma.f64 x 3 12/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x 3 -12/29) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -3 x) 12/29) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 x 3) 3)) 1728/24389)) (+.f64 144/841 (*.f64 (*.f64 x 3) (fma.f64 x 3 12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 x 3 -12/29) 2) (+.f64 (pow.f64 (*.f64 x 3) 3) -1728/24389))) (cbrt.f64 (+.f64 144/841 (*.f64 (*.f64 x 3) (fma.f64 x 3 12/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 3 -12/29) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x 3 -12/29)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x 3 -12/29) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 -3 x) 12/29))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 (pow.f64 (*.f64 x 3) 3) -1728/24389) (neg.f64 (+.f64 144/841 (*.f64 (*.f64 x 3) (fma.f64 x 3 12/29))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x 3 -12/29) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -12/29) (cbrt.f64 144/841) (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 144/841) (cbrt.f64 -12/29) (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 3)) (cbrt.f64 9) -12/29)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x 3)) (pow.f64 (*.f64 x 3) 2/3) -12/29)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) 3) -12/29)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 3)) (sqrt.f64 3) -12/29)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 3 -12/29)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 12/29 (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 x -12/29)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -12/29 (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -12/29 1 (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 3) 1 -12/29)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x 3) -12/29)))))"]],"rules":[["egg-rr",45],["egg-rr",41]],"time":40.151123046875,"type":"rewrite"},{"count":[[122,94]],"inputs":[["(*.f64 -12/29 y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","-12/29","(-.f64 (*.f64 3 x) 12/29)","(-.f64 (*.f64 3 x) 12/29)","(-.f64 (*.f64 3 x) 12/29)","(*.f64 3 x)","(-.f64 (*.f64 3 x) 12/29)","(-.f64 (*.f64 3 x) 12/29)","(-.f64 (*.f64 3 x) 12/29)","(*.f64 3 x)","(-.f64 (*.f64 3 x) 12/29)","(-.f64 (*.f64 3 x) 12/29)","(-.f64 (*.f64 3 x) 12/29)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -12/29 y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","-12/29","(-.f64 (*.f64 3 x) 12/29)","(fma.f64 3 x -12/29)","(-.f64 (*.f64 3 x) 12/29)","(fma.f64 3 x -12/29)","(-.f64 (*.f64 3 x) 12/29)","(fma.f64 3 x -12/29)","(*.f64 3 x)","(-.f64 (*.f64 3 x) 12/29)","(fma.f64 3 x -12/29)","(-.f64 (*.f64 3 x) 12/29)","(fma.f64 3 x -12/29)","(-.f64 (*.f64 3 x) 12/29)","(fma.f64 3 x -12/29)","(*.f64 3 x)","(-.f64 (*.f64 3 x) 12/29)","(fma.f64 3 x -12/29)","(-.f64 (*.f64 3 x) 12/29)","(fma.f64 3 x -12/29)","(-.f64 (*.f64 3 x) 12/29)","(fma.f64 3 x -12/29)"]],"time":113.5498046875,"type":"simplify"},{"compiler":[[1064,812]],"time":18.189208984375,"type":"eval"},{"alts":[["(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","next",0.1796875],["(pow.f64 (cbrt.f64 (*.f64 (fma.f64 x 3 -12/29) y)) 3)","fresh",0.9848978028217029],["(*.f64 (*.f64 (-.f64 x (/.f64 16 116)) 3) y)","fresh",0.421875],["(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 x 3) 3) -1728/24389) y) (/.f64 1 (+.f64 144/841 (*.f64 (*.f64 x 3) (fma.f64 x 3 12/29)))))","fresh",19.019901318379095],["(*.f64 (fma.f64 (*.f64 x (cbrt.f64 3)) (cbrt.f64 9) -12/29) y)","fresh",0.5159950683790943]],"compiler":[[11,8],[11,9],[11,9],[24,20],[12,10],[11,8],[11,9],[11,9],[24,20],[12,10]],"count":[[96,5]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[94,4],"picked":[1,0]}],"min-error":[0.01953125],"time":18.198974609375,"type":"prune"},{"compiler":[[26,14]],"locations":[["(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))",0.03125,true],["(*.f64 -12/29 y)",0.09375,true],["(*.f64 3 (*.f64 y x))",0.25,true]],"time":5.5478515625,"type":"localize"},{"count":[[3,15]],"series":[["(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","x","-inf",0.162109375],["(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","x","inf",0.177001953125],["(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","x","0",0.18701171875],["(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","y","-inf",0.200927734375],["(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","y","inf",0.402099609375],["(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","y","0",0.158203125],["(*.f64 -12/29 y)","y","-inf",0.294921875],["(*.f64 -12/29 y)","y","inf",0.283935546875],["(*.f64 -12/29 y)","y","0",0.25],["(*.f64 3 (*.f64 y x))","x","-inf",0.25390625],["(*.f64 3 (*.f64 y x))","x","inf",0.406982421875],["(*.f64 3 (*.f64 y x))","x","0",0.380859375],["(*.f64 3 (*.f64 y x))","y","-inf",0.302001953125],["(*.f64 3 (*.f64 y x))","y","inf",0.73291015625],["(*.f64 3 (*.f64 y x))","y","0",0.51708984375]],"time":4.857177734375,"type":"series"},{"count":[[3,111]],"inputs":[["(*.f64 3 (*.f64 y x))","(*.f64 -12/29 y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3 (*.f64 y x)) 0) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 y x)) (*.f64 (*.f64 3 (*.f64 y x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 3 (*.f64 y x))) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 y x)) (*.f64 0 (*.f64 3 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y x)) (*.f64 (pow.f64 (*.f64 y x) 2/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 9) (*.f64 y x)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 3 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 y x) 2/3) 3) (cbrt.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 (*.f64 y x))) (pow.f64 (*.f64 3 (*.f64 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2/3) (cbrt.f64 (*.f64 3 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 27 (*.f64 y x))) (pow.f64 (*.f64 y x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y x) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y x) (sqrt.f64 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 3) (*.f64 (*.f64 y x) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 9) (*.f64 (*.f64 y x) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y x) 2/3) (cbrt.f64 (*.f64 27 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3 (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -12/29 y) 0) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -12/29 y) (*.f64 (*.f64 -12/29 y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 -12/29 y)) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -12/29 y) (*.f64 0 (*.f64 -12/29 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -12/29 y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y -12/29)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -12/29) (*.f64 (cbrt.f64 144/841) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 144/841) y) (cbrt.f64 -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) -12/29) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -12/29 y)) (pow.f64 (*.f64 -12/29 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 -12/29 y) 2/3) (cbrt.f64 (*.f64 -12/29 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 -12/29)) (cbrt.f64 144/841))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -1728/24389 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 144/841) (*.f64 y (cbrt.f64 -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (cbrt.f64 (*.f64 -1728/24389 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 12/29 y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -12/29 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -12/29 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -12/29 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -12/29 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -12/29 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 -12/29 y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -12/29 y) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (+.f64 -12/29 (*.f64 3 x))) 0) (*.f64 y (+.f64 -12/29 (*.f64 3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 -12/29 (*.f64 3 x))) (*.f64 (*.f64 y (+.f64 -12/29 (*.f64 3 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y (+.f64 -12/29 (*.f64 3 x)))) (*.f64 y (+.f64 -12/29 (*.f64 3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 -12/29 (*.f64 3 x))) (*.f64 0 (*.f64 y (+.f64 -12/29 (*.f64 3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (+.f64 -12/29 (*.f64 3 x)))) (pow.f64 (*.f64 y (+.f64 -12/29 (*.f64 3 x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (+.f64 -12/29 (*.f64 3 x))) 2/3) (cbrt.f64 (*.f64 y (+.f64 -12/29 (*.f64 3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (+.f64 -12/29 (*.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (+.f64 (*.f64 3 x) -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 -12/29 y) 2/3) (-.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2/3) (cbrt.f64 (*.f64 3 (*.f64 (*.f64 y x) (*.f64 -12/29 y)))))) (+.f64 (cbrt.f64 (*.f64 -12/29 y)) (cbrt.f64 (*.f64 3 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2/3) (-.f64 (pow.f64 (*.f64 -12/29 y) 2/3) (cbrt.f64 (*.f64 3 (*.f64 (*.f64 y x) (*.f64 -12/29 y)))))) (+.f64 (cbrt.f64 (*.f64 3 (*.f64 y x))) (cbrt.f64 (*.f64 -12/29 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 y (+.f64 -12/29 (*.f64 3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 y (+.f64 -12/29 (*.f64 3 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (+.f64 -12/29 (*.f64 3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (+.f64 -12/29 (*.f64 3 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (+.f64 -12/29 (*.f64 3 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (+.f64 -12/29 (*.f64 3 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (+.f64 -12/29 (*.f64 3 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (+.f64 -12/29 (*.f64 3 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 y (+.f64 -12/29 (*.f64 3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (+.f64 -12/29 (*.f64 3 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -12/29 y (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y -12/29 (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 3 (*.f64 y x))) (pow.f64 (*.f64 3 (*.f64 y x)) 2/3) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 y) x (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -12/29 y)) (pow.f64 (*.f64 -12/29 y) 2/3) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2/3) (cbrt.f64 (*.f64 3 (*.f64 y x))) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 y x)) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 3 y) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y x) (cbrt.f64 3)) (cbrt.f64 9) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y x)) (*.f64 (pow.f64 (*.f64 y x) 2/3) 3) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 3 y) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y x) (sqrt.f64 3)) (sqrt.f64 3) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 3 x) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 3) (*.f64 (*.f64 y x) (sqrt.f64 3)) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 x) y (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 27 (*.f64 y x))) (pow.f64 (*.f64 y x) 2/3) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -12/29) (*.f64 (cbrt.f64 144/841) y) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 -12/29 y) 2/3) (cbrt.f64 (*.f64 -12/29 y)) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) -12/29) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 -12/29)) (cbrt.f64 144/841) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -1728/24389 y)) (pow.f64 y 2/3) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) 3 (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 -3 (*.f64 y x)) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 12/29 y) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -12/29 y) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 (*.f64 y x)) 1 (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -12/29 y) 1 (*.f64 3 (*.f64 y x)))))))"]],"rules":[["egg-rr",51],["egg-rr",26],["egg-rr",34]],"time":29.083984375,"type":"rewrite"},{"count":[[126,114]],"inputs":[["(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 -1 (*.f64 y (+.f64 12/29 (*.f64 -3 x))))","(*.f64 -1 (*.f64 y (+.f64 12/29 (*.f64 -3 x))))","(*.f64 -1 (*.f64 y (+.f64 12/29 (*.f64 -3 x))))","(*.f64 -1 (*.f64 y (+.f64 12/29 (*.f64 -3 x))))","(*.f64 -12/29 y)","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 -1 (*.f64 y (+.f64 12/29 (*.f64 -3 x))))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 -1 (*.f64 y (+.f64 12/29 (*.f64 -3 x))))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 -1 (*.f64 y (+.f64 12/29 (*.f64 -3 x))))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 -1 (*.f64 y (+.f64 12/29 (*.f64 -3 x))))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 -12/29 y)","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))"]],"time":59.226806640625,"type":"simplify"},{"compiler":[[1419,928]],"time":18.7861328125,"type":"eval"},{"alts":[["(*.f64 (fma.f64 3 x -12/29) y)","fresh",0.40625],["(fma.f64 x (*.f64 3 y) (*.f64 -12/29 y))","next",0.16796875],["(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","fresh",0.19140625],["(fma.f64 (*.f64 y (cbrt.f64 -12/29)) (cbrt.f64 144/841) (*.f64 3 (*.f64 y x)))","fresh",0.2734375],["(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 x 3) 3) -1728/24389) y) (/.f64 1 (+.f64 144/841 (*.f64 (*.f64 x 3) (fma.f64 x 3 12/29)))))","fresh",19.019901318379095],["(*.f64 (fma.f64 (*.f64 x (cbrt.f64 3)) (cbrt.f64 9) -12/29) y)","fresh",0.5159950683790943]],"compiler":[[8,6],[10,7],[10,7],[14,11],[24,20],[12,10],[8,6],[10,7],[10,7],[14,11],[24,20],[12,10]],"count":[[119,6]],"kept":[{"done":[0,0],"fresh":[4,2],"new":[114,4],"picked":[1,0]}],"min-error":[0],"time":28.738037109375,"type":"prune"},{"compiler":[[20,13]],"locations":[["(*.f64 -12/29 y)",0.09375,false],["(fma.f64 x (*.f64 3 y) (*.f64 -12/29 y))",0.1328125,true]],"time":4.962890625,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 x (*.f64 3 y) (*.f64 -12/29 y))","y","-inf",1.14990234375],["(fma.f64 x (*.f64 3 y) (*.f64 -12/29 y))","y","inf",0.39794921875],["(fma.f64 x (*.f64 3 y) (*.f64 -12/29 y))","y","0",0.425048828125],["(fma.f64 x (*.f64 3 y) (*.f64 -12/29 y))","x","-inf",0.218017578125],["(fma.f64 x (*.f64 3 y) (*.f64 -12/29 y))","x","inf",0.255859375],["(fma.f64 x (*.f64 3 y) (*.f64 -12/29 y))","x","0",0.363037109375]],"time":2.89111328125,"type":"series"},{"count":[[1,45]],"inputs":[["(fma.f64 x (*.f64 3 y) (*.f64 -12/29 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x y) 3) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -12/29 y) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (+.f64 -12/29 (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 -12/29 (*.f64 x 3))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (*.f64 x y) 3) (*.f64 12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -12/29 y) (*.f64 -3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 y) (+.f64 -12/29 (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (+.f64 -12/29 (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (+.f64 -12/29 (*.f64 x 3)))) (pow.f64 (*.f64 y (+.f64 -12/29 (*.f64 x 3))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (+.f64 -12/29 (*.f64 x 3))) 2/3) (cbrt.f64 (*.f64 y (+.f64 -12/29 (*.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 y) (+.f64 -12/29 (*.f64 x 3)))) (neg.f64 (pow.f64 (*.f64 y (+.f64 -12/29 (*.f64 x 3))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 -12/29 y) 2/3) (-.f64 (pow.f64 (*.f64 (*.f64 x y) 3) 2/3) (*.f64 (cbrt.f64 (*.f64 -12/29 y)) (cbrt.f64 (*.f64 (*.f64 x y) 3))))) (+.f64 (cbrt.f64 (*.f64 -12/29 y)) (cbrt.f64 (*.f64 (*.f64 x y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x y) 3) 2/3) (-.f64 (pow.f64 (*.f64 -12/29 y) 2/3) (*.f64 (cbrt.f64 (*.f64 (*.f64 x y) 3)) (cbrt.f64 (*.f64 -12/29 y))))) (+.f64 (cbrt.f64 (*.f64 (*.f64 x y) 3)) (cbrt.f64 (*.f64 -12/29 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 y) (+.f64 -12/29 (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 y) (+.f64 -12/29 (*.f64 x 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (+.f64 -12/29 (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (+.f64 -12/29 (*.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (+.f64 -12/29 (*.f64 x 3))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (+.f64 -12/29 (*.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (+.f64 -12/29 (*.f64 x 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (+.f64 -12/29 (*.f64 x 3))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (+.f64 -12/29 (*.f64 x 3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (+.f64 -12/29 (*.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 y) (+.f64 -12/29 (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (+.f64 -12/29 (*.f64 x 3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 3 y) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 3 y)) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (*.f64 3 y))) (pow.f64 (*.f64 3 y) 2/3) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x y) 3)) (pow.f64 (*.f64 (*.f64 x y) 3) 2/3) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 y) x (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 3) y (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 -12/29)) (cbrt.f64 144/841) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) -12/29) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y -12/29 (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -1728/24389 y)) (pow.f64 y 2/3) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -12/29 y)) (pow.f64 (*.f64 -12/29 y) 2/3) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -12/29) (*.f64 (cbrt.f64 144/841) y) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -12/29 y (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 -12/29 y) 2/3) (cbrt.f64 (*.f64 -12/29 y)) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 3 (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 12/29 y) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 x y) 3) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x y) 3) 1 (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -12/29 y) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -12/29 y) 1 (*.f64 (*.f64 x y) 3))))))"]],"rules":[["egg-rr",45]],"time":36.343994140625,"type":"rewrite"},{"count":[[69,51]],"inputs":[["(*.f64 -12/29 y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -12/29 y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 (fma.f64 3 x -12/29) y)"]],"time":85.596923828125,"type":"simplify"},{"compiler":[[879,607]],"time":13.27197265625,"type":"eval"},{"alts":[["(fma.f64 x (*.f64 3 y) (*.f64 (cbrt.f64 144/841) (*.f64 y (cbrt.f64 -12/29))))","fresh",0.26171875],["(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","next",0.19140625],["(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 x 3) 3) -1728/24389) y) (/.f64 1 (+.f64 144/841 (*.f64 (*.f64 x 3) (fma.f64 x 3 12/29)))))","fresh",19.019901318379095],["(*.f64 (fma.f64 3 x -12/29) y)","fresh",0.40625],["(*.f64 (fma.f64 (*.f64 x (cbrt.f64 3)) (cbrt.f64 9) -12/29) y)","fresh",0.5159950683790943]],"compiler":[[14,11],[10,7],[24,20],[8,6],[12,10],[14,11],[10,7],[24,20],[8,6],[12,10]],"count":[[82,5]],"kept":[{"done":[0,0],"fresh":[5,3],"new":[76,2],"picked":[1,0]}],"min-error":[0],"time":16.30908203125,"type":"prune"},{"compiler":[[20,11]],"locations":[["(*.f64 -12/29 y)",0.09375,false],["(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))",0.15625,true]],"time":5.81884765625,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","x","-inf",0.306884765625],["(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","x","inf",0.18603515625],["(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","x","0",0.15185546875],["(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","y","-inf",0.422119140625],["(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","y","inf",0.19482421875],["(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","y","0",0.191162109375]],"time":1.5341796875,"type":"series"},{"count":[[1,46]],"inputs":[["(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -12/29 y) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (+.f64 (*.f64 3 x) -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 (*.f64 3 x) -12/29)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 3 (*.f64 y x)) (*.f64 12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -12/29 y) (*.f64 -3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 y) (+.f64 (*.f64 3 x) -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (+.f64 (*.f64 3 x) -12/29))) (pow.f64 (*.f64 y (+.f64 (*.f64 3 x) -12/29)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (+.f64 (*.f64 3 x) -12/29)) 2/3) (cbrt.f64 (*.f64 y (+.f64 (*.f64 3 x) -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (+.f64 (*.f64 3 x) -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 y) (+.f64 (*.f64 3 x) -12/29))) (neg.f64 (pow.f64 (*.f64 y (+.f64 (*.f64 3 x) -12/29)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 -12/29 y) 2/3) (-.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2/3) (*.f64 (cbrt.f64 (*.f64 -12/29 y)) (cbrt.f64 (*.f64 3 (*.f64 y x)))))) (+.f64 (cbrt.f64 (*.f64 -12/29 y)) (cbrt.f64 (*.f64 3 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2/3) (-.f64 (pow.f64 (*.f64 -12/29 y) 2/3) (*.f64 (cbrt.f64 (*.f64 3 (*.f64 y x))) (cbrt.f64 (*.f64 -12/29 y))))) (+.f64 (cbrt.f64 (*.f64 3 (*.f64 y x))) (cbrt.f64 (*.f64 -12/29 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 y) (+.f64 (*.f64 3 x) -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 y) (+.f64 (*.f64 3 x) -12/29)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (+.f64 (*.f64 3 x) -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (+.f64 (*.f64 3 x) -12/29)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (+.f64 (*.f64 3 x) -12/29)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (+.f64 (*.f64 3 x) -12/29)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (+.f64 (*.f64 3 x) -12/29)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (+.f64 (*.f64 3 x) -12/29)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (+.f64 (*.f64 3 x) -12/29))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (+.f64 (*.f64 3 x) -12/29)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 y) (+.f64 (*.f64 3 x) -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (+.f64 (*.f64 3 x) -12/29)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -12/29 y (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -1728/24389 y)) (pow.f64 y 2/3) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) -12/29) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 -12/29 y) 2/3) (cbrt.f64 (*.f64 -12/29 y)) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 -12/29)) (cbrt.f64 144/841) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y -12/29 (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -12/29) (*.f64 (cbrt.f64 144/841) y) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -12/29 y)) (pow.f64 (*.f64 -12/29 y) 2/3) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 3 (*.f64 y x))) (pow.f64 (*.f64 3 (*.f64 y x)) 2/3) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 x) y (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 y) x (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 3) (*.f64 (sqrt.f64 3) (*.f64 y x)) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 27 (*.f64 y x))) (pow.f64 (*.f64 y x) 2/3) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 y x)) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 12/29 y) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) 3 (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -12/29 y) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -12/29 y) 1 (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 (*.f64 y x)) 1 (*.f64 -12/29 y))))))"]],"rules":[["egg-rr",46]],"time":36.5048828125,"type":"rewrite"},{"count":[[70,51]],"inputs":[["(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 -12/29 y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 -12/29 y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)"]],"time":85.359130859375,"type":"simplify"},{"compiler":[[881,579]],"time":13.18994140625,"type":"eval"},{"alts":[["(fma.f64 x (*.f64 3 y) (*.f64 (cbrt.f64 144/841) (*.f64 y (cbrt.f64 -12/29))))","fresh",0.26171875],["(*.f64 (fma.f64 3 x -12/29) y)","fresh",0.40625],["(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","done",0.19140625],["(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 x 3) 3) -1728/24389) y) (/.f64 1 (+.f64 144/841 (*.f64 (*.f64 x 3) (fma.f64 x 3 12/29)))))","fresh",19.019901318379095],["(*.f64 (fma.f64 (*.f64 x (cbrt.f64 3)) (cbrt.f64 9) -12/29) y)","fresh",0.5159950683790943]],"compiler":[[14,11],[8,6],[10,7],[24,20],[12,10]],"count":[[81,5]],"kept":[{"done":[0,0],"fresh":[4,3],"new":[76,1],"picked":[1,1]}],"min-error":[0],"time":14.52099609375,"type":"prune"},{"accuracy":[0.16796875],"baseline":[0.16796875],"branch":[["x",0.16796875,1],["y",0.16796875,1],["(*.f64 (*.f64 (-.f64 x (/.f64 16 116)) 3) y)",0.16796875,1],["(*.f64 (-.f64 x (/.f64 16 116)) 3)",0.16796875,1],["(-.f64 x (/.f64 16 116))",0.16796875,1]],"compiler":[[3,2],[3,2],[11,9],[9,8],[7,6],[125,90]],"count":[[13,1]],"inputs":[["(*.f64 (fma.f64 3 x -12/29) y)","(fma.f64 x (*.f64 3 y) (*.f64 (cbrt.f64 144/841) (*.f64 y (cbrt.f64 -12/29))))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(fma.f64 x (*.f64 3 y) (*.f64 -12/29 y))","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(fma.f64 (*.f64 y (cbrt.f64 -12/29)) (cbrt.f64 144/841) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(pow.f64 (cbrt.f64 (*.f64 (fma.f64 x 3 -12/29) y)) 3)","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 x 3) 3) -1728/24389) y) (/.f64 1 (+.f64 144/841 (*.f64 (*.f64 x 3) (fma.f64 x 3 12/29)))))","(*.f64 (fma.f64 (*.f64 x (cbrt.f64 3)) (cbrt.f64 9) -12/29) y)","(*.f64 (fma.f64 x 3 -12/29) y)","(*.f64 (*.f64 (-.f64 x (/.f64 16 116)) 3) y)"]],"link":["."],"name":["Data.Colour.CIE:cieLAB from colour-2.3.3, A"],"oracle":[19.427261523516385],"outputs":[["(fma.f64 x (*.f64 3 y) (*.f64 -12/29 y))"]],"time":26.035888671875,"times":[["x",5.15185546875],["y",5.416015625],["(*.f64 (*.f64 (-.f64 x (/.f64 16 116)) 3) y)",5.200927734375],["(*.f64 (-.f64 x (/.f64 16 116)) 3)",3.74609375],["(-.f64 x (/.f64 16 116))",3.594970703125]],"type":"regimes"},{"compiler":[[10,7]],"inputs":[["(fma.f64 x (*.f64 3 y) (*.f64 -12/29 y))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x (*.f64 3 y) (*.f64 -12/29 y))","(*.f64 y (+.f64 -12/29 (*.f64 x 3)))"]],"stop":[["fuel",1]],"time":34.401123046875,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[10,7]],"remove-preprocessing":[[]],"time":8.691162109375,"type":"end"}]
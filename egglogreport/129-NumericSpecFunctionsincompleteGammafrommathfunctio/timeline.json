[{"compiler":[[16,11]],"method":["search"],"sampling":[[12,0.10526290717280662,0.18908337029189337,0.7056537225353],[11,0.07017527144853775,0.2300189453035404,0.6998057832479219],[10,0.046783514299025164,0.2826503988899437,0.6705660868110311],[9,0.031189009532683443,0.32748460009317615,0.6413263903741404],[8,0.031189009532683443,0.40545712392488475,0.5633538665424318],[7,0.0,0.46783514299025164,0.5321648570097484],[6,0.0,0.6237801906536689,0.37621980934633115],[5,0.0,0.7485362287844026,0.2514637712155974],[4,0.0,0.7485362287844026,0.2514637712155974],[3,0.0,0.7485362287844026,0.2514637712155974],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":59.827880859375,"type":"analyze"},{"outcomes":[["body",256,"invalid",82.971435546875,1523],["body",256,"valid",548.410400390625,8256]],"time":640.302001953125,"type":"sample"},{"compiler":[[15,10]],"inputs":[["0","1","2","3"],["(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z) (log.f64 t))","(+.f64 (-.f64 (-.f64 (*.f64 y (log.f64 x)) x) z) (log.f64 t))","(+.f64 (-.f64 (-.f64 (*.f64 z (log.f64 y)) y) x) (log.f64 t))","(+.f64 (-.f64 (-.f64 (*.f64 t (log.f64 y)) y) z) (log.f64 x))","(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 z)) z) y) (log.f64 t))","(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 t)) t) z) (log.f64 y))","(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) t) (log.f64 z))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z) (log.f64 t))","(+.f64 (fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z))) (log.f64 t))","(+.f64 (-.f64 (-.f64 (*.f64 y (log.f64 x)) x) z) (log.f64 t))","(+.f64 (fma.f64 (log.f64 x) y (neg.f64 (+.f64 x z))) (log.f64 t))","(+.f64 (-.f64 (-.f64 (*.f64 z (log.f64 y)) y) x) (log.f64 t))","(+.f64 (fma.f64 z (log.f64 y) (neg.f64 (+.f64 y x))) (log.f64 t))","(+.f64 (-.f64 (-.f64 (*.f64 t (log.f64 y)) y) z) (log.f64 x))","(+.f64 (fma.f64 t (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 x))","(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 z)) z) y) (log.f64 t))","(+.f64 (fma.f64 (log.f64 z) x (neg.f64 (+.f64 y z))) (log.f64 t))","(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 t)) t) z) (log.f64 y))","(+.f64 (fma.f64 x (log.f64 t) (neg.f64 (+.f64 t z))) (log.f64 y))","(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) t) (log.f64 z))","(+.f64 (fma.f64 (log.f64 y) x (neg.f64 (+.f64 y t))) (log.f64 z))"]],"symmetry":[[]],"time":71.631103515625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z) (log.f64 t))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z) (log.f64 t))","(+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))"]],"time":19.43896484375,"type":"simplify"},{"compiler":[[26,14]],"time":0.39501953125,"type":"eval"},{"alts":[["(+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))","next",0.08203125]],"compiler":[[15,10],[15,10]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.08203125],"time":0.912109375,"type":"prune"},{"compiler":[[38,10]],"locations":[["(+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))",0.0078125,true],["(fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))",0.0859375,true]],"time":8.56689453125,"type":"localize"},{"count":[[2,84]],"series":[["(+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))","t","-inf",6.2978515625],["(+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))","t","inf",4.3701171875],["(+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))","t","0",21.870849609375],["(+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))","z","-inf",0.19287109375],["(+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))","z","inf",0.18408203125],["(+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))","z","0",0.9609375],["(+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))","y","-inf",0.223876953125],["(+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))","y","inf",0.22802734375],["(+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))","y","0",0.94189453125],["(+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))","x","-inf",0.198974609375],["(+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))","x","inf",0.18603515625],["(+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))","x","0",1.781005859375],["(fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))","z","-inf",0.236083984375],["(fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))","z","inf",0.260009765625],["(fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))","z","0",1.1298828125],["(fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))","y","-inf",1.44091796875],["(fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))","y","inf",1.001953125],["(fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))","y","0",2.89404296875],["(fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))","x","-inf",0.3349609375],["(fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))","x","inf",0.338134765625],["(fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))","x","0",3.52099609375]],"time":48.916015625,"type":"series"},{"count":[[2,103]],"inputs":[["(fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))","(+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (*.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 0) (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (*.f64 0 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (+.f64 y z)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 y) x (neg.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (fma.f64 (log.f64 y) x (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x (log.f64 y)) (neg.f64 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 y) (+.f64 (neg.f64 z) (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (log.f64 y) x (neg.f64 y)) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 x (log.f64 y)) (neg.f64 z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 z) (-.f64 y (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 y) (-.f64 z (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (+.f64 y z) (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (log.f64 y)) (+.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 (log.f64 y) x (neg.f64 y)) 0) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (log.f64 y) x (neg.f64 y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 2)) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 y z) (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (log.f64 y)) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2)) (cbrt.f64 (neg.f64 (+.f64 y z))) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 y z)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (log.f64 y)) 1 (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (log.f64 y)) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y z) -1 (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (+.f64 y z)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 y z) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (+.f64 y z)) 1 (*.f64 x (log.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 t) (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t)) (*.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t)) 0) (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t)) (*.f64 0 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))) (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (log.f64 t) (*.f64 x (log.f64 y))) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (+.f64 (neg.f64 (+.f64 y z)) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (+.f64 y z)) (+.f64 (log.f64 t) (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (+.f64 y z)) (log.f64 t)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (log.f64 t) (fma.f64 (log.f64 y) x (neg.f64 y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 (log.f64 t) (*.f64 x (log.f64 y))) (neg.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 (log.f64 t) (*.f64 x (log.f64 y))) 0) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 (log.f64 t) (*.f64 x (log.f64 y))) (neg.f64 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 y) x (neg.f64 y)) (+.f64 (neg.f64 z) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (log.f64 t) (*.f64 x (log.f64 y))) 1) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (*.f64 (+.f64 (neg.f64 (+.f64 y z)) (log.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (+.f64 (log.f64 t) (*.f64 x (log.f64 y))) (neg.f64 z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (log.f64 y)) (-.f64 (+.f64 y z) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (log.f64 t) (*.f64 x (log.f64 y))) (+.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (+.f64 (log.f64 t) (*.f64 x (log.f64 y))) (neg.f64 y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (+.f64 (log.f64 t) (*.f64 x (log.f64 y))) 0) (+.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))) (cbrt.f64 (pow.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2)) (-.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 2)) (cbrt.f64 (*.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))))) (+.f64 (cbrt.f64 (log.f64 t)) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 2)) (-.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2)) (cbrt.f64 (*.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))))) (+.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (cbrt.f64 (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t)) 2)) (cbrt.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 t)) (cbrt.f64 (pow.f64 (log.f64 t) 2)) (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 2)) (log.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (log.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 2)) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (log.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2)) (cbrt.f64 (log.f64 t)) (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (log.f64 t)) (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (+.f64 (neg.f64 (+.f64 y z)) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (+.f64 (neg.f64 (+.f64 y z)) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (+.f64 (neg.f64 (+.f64 y z)) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (log.f64 y)) (+.f64 (neg.f64 (+.f64 y z)) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)) (+.f64 (neg.f64 (+.f64 y z)) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log.f64 t) (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 1 (log.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 t) 1 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (log.f64 y)) (+.f64 (neg.f64 (+.f64 y z)) (log.f64 t)))))))"]],"rules":[["egg-rr",54],["egg-rr",49]],"time":28.4150390625,"type":"rewrite"},{"count":[[187,135]],"inputs":[["(*.f64 -1 (+.f64 y z))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 y)) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 y)) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 y)) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 y)) z)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 y)) z)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 y)) z)","(-.f64 (*.f64 (log.f64 y) x) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (log.f64 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (log.f64 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (log.f64 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (+.f64 y z))","(neg.f64 (+.f64 y z))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 y)) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 y)) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 y)) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 y)) z)","(fma.f64 x (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 y)) z)","(fma.f64 x (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 y)) z)","(fma.f64 x (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (neg.f64 (+.f64 y z)))","(-.f64 (*.f64 (log.f64 y) x) y)","(fma.f64 (log.f64 y) x (neg.f64 y))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (log.f64 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (log.f64 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (log.f64 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(fma.f64 x (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(fma.f64 x (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(fma.f64 x (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 -1)) (neg.f64 (log.f64 (neg.f64 t)))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 -1)) (neg.f64 (log.f64 (neg.f64 t)))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 -1)) (neg.f64 (log.f64 (neg.f64 t)))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 -1)) (neg.f64 (log.f64 (neg.f64 t)))) (+.f64 y z))"]],"time":242.8740234375,"type":"simplify"},{"compiler":[[1960,472]],"time":15.093017578125,"type":"eval"},{"alts":[["(+.f64 (fma.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 (+.f64 y z))) (log.f64 t))","fresh",0.1419525390737681],["(+.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) 3) (log.f64 t))","fresh",0.6656191407376812],["(fma.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2)) (cbrt.f64 (log.f64 t)) (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))","next",0.078125]],"compiler":[[22,15],[18,13],[21,14],[22,15],[18,13],[21,14]],"count":[[136,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[135,3],"picked":[1,0]}],"min-error":[0.03125],"time":42.135986328125,"type":"prune"},{"compiler":[[57,20]],"locations":[["(fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))",0.0859375,false],["(cbrt.f64 (pow.f64 (log.f64 t) 2))",0.1015625,true],["(cbrt.f64 (log.f64 t))",0.10546875,true],["(pow.f64 (log.f64 t) 2)",0.5176163086106521,true]],"time":14.780029296875,"type":"localize"},{"count":[[3,32]],"series":[["(cbrt.f64 (pow.f64 (log.f64 t) 2))","t","-inf",1.06689453125],["(cbrt.f64 (pow.f64 (log.f64 t) 2))","t","inf",0.846923828125],["(cbrt.f64 (pow.f64 (log.f64 t) 2))","t","0",0.98095703125],["(cbrt.f64 (log.f64 t))","t","-inf",1.031982421875],["(cbrt.f64 (log.f64 t))","t","inf",1.02197265625],["(cbrt.f64 (log.f64 t))","t","0",1.218017578125],["(pow.f64 (log.f64 t) 2)","t","-inf",0.405029296875],["(pow.f64 (log.f64 t) 2)","t","inf",0.363037109375],["(pow.f64 (log.f64 t) 2)","t","0",0.391845703125]],"time":7.451904296875,"type":"series"},{"count":[[3,78]],"inputs":[["(pow.f64 (log.f64 t) 2)","(cbrt.f64 (log.f64 t))","(cbrt.f64 (pow.f64 (log.f64 t) 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 t) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (log.f64 t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2/3)) (pow.f64 (pow.f64 (log.f64 t) 4/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 t)) (pow.f64 (log.f64 t) 5/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 t) 5/3) (cbrt.f64 (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (log.f64 t) 4/3) 4/3) (cbrt.f64 (pow.f64 (log.f64 t) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 t) 2/3) (pow.f64 (log.f64 t) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 t) 4/3) (pow.f64 (log.f64 t) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 t)) (neg.f64 (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 t) 2/3)) (neg.f64 (pow.f64 (log.f64 t) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 t) (log.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 t) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 t) 2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 t) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 t) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 t) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 t) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 t)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (log.f64 t) 3)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (log.f64 t))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 t) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 t) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log.f64 t)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 t) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 t) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 t) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (log.f64 t)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) (cbrt.f64 (pow.f64 (log.f64 t) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 t)))) (cbrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 t)))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 t) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 t))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 t)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (log.f64 t))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (log.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 t) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (log.f64 t))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 t) 2/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 t) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (log.f64 t) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 t)) (cbrt.f64 (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) (cbrt.f64 (pow.f64 (log.f64 t) 5/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 t) 5/3)) (cbrt.f64 (cbrt.f64 (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2/3)) (cbrt.f64 (pow.f64 (log.f64 t) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 t) 4/3)) (cbrt.f64 (pow.f64 (log.f64 t) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 t))) (cbrt.f64 (neg.f64 (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 t) 4/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 t) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 t) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 t) 2/3) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 t) 2/3))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 t) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 t) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 t) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 t) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 t) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log.f64 t)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 t)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 t) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 t)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (log.f64 t))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 t) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 t) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 t) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 t) 2))))))"]],"rules":[["egg-rr",29],["egg-rr",19],["egg-rr",30]],"time":43.610107421875,"type":"rewrite"},{"count":[[110,84]],"inputs":[["(pow.f64 (log.f64 (/.f64 1 t)) 2)","(pow.f64 (log.f64 (/.f64 1 t)) 2)","(pow.f64 (log.f64 (/.f64 1 t)) 2)","(pow.f64 (log.f64 (/.f64 1 t)) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2)","(pow.f64 (log.f64 t) 1/3)","(pow.f64 (log.f64 t) 1/3)","(pow.f64 (log.f64 t) 1/3)","(pow.f64 (log.f64 t) 1/3)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 t))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 t))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 t))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 t))) 1/3) (cbrt.f64 -1))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 1/3)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 1/3)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 1/3)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 1/3)","(pow.f64 (pow.f64 (log.f64 t) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 t) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 t) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 t) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 t)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 t)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 t)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 t)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2) 1/3)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (log.f64 (/.f64 1 t)) 2)","(pow.f64 (log.f64 t) 2)","(pow.f64 (log.f64 (/.f64 1 t)) 2)","(pow.f64 (log.f64 t) 2)","(pow.f64 (log.f64 (/.f64 1 t)) 2)","(pow.f64 (log.f64 t) 2)","(pow.f64 (log.f64 (/.f64 1 t)) 2)","(pow.f64 (log.f64 t) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2)","(pow.f64 (log.f64 t) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2)","(pow.f64 (log.f64 t) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2)","(pow.f64 (log.f64 t) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2)","(pow.f64 (log.f64 t) 2)","(pow.f64 (log.f64 t) 1/3)","(cbrt.f64 (log.f64 t))","(pow.f64 (log.f64 t) 1/3)","(cbrt.f64 (log.f64 t))","(pow.f64 (log.f64 t) 1/3)","(cbrt.f64 (log.f64 t))","(pow.f64 (log.f64 t) 1/3)","(cbrt.f64 (log.f64 t))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 t))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 t))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 t))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 t))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 t))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 t))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 t))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 t))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 1/3)","(cbrt.f64 (log.f64 t))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 1/3)","(cbrt.f64 (log.f64 t))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 1/3)","(cbrt.f64 (log.f64 t))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 1/3)","(cbrt.f64 (log.f64 t))","(pow.f64 (pow.f64 (log.f64 t) 2) 1/3)","(pow.f64 (log.f64 t) 2/3)","(pow.f64 (pow.f64 (log.f64 t) 2) 1/3)","(pow.f64 (log.f64 t) 2/3)","(pow.f64 (pow.f64 (log.f64 t) 2) 1/3)","(pow.f64 (log.f64 t) 2/3)","(pow.f64 (pow.f64 (log.f64 t) 2) 1/3)","(pow.f64 (log.f64 t) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 t)) 2) 1/3)","(pow.f64 (log.f64 t) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 t)) 2) 1/3)","(pow.f64 (log.f64 t) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 t)) 2) 1/3)","(pow.f64 (log.f64 t) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 t)) 2) 1/3)","(pow.f64 (log.f64 t) 2/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2) 1/3)","(pow.f64 (log.f64 t) 2/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2) 1/3)","(pow.f64 (log.f64 t) 2/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2) 1/3)","(pow.f64 (log.f64 t) 2/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2) 1/3)","(pow.f64 (log.f64 t) 2/3)"]],"time":103.673828125,"type":"simplify"},{"compiler":[[2983,982]],"time":25.93017578125,"type":"eval"},{"alts":[["(+.f64 (fma.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 (+.f64 y z))) (log.f64 t))","next",0.1419525390737681],["(fma.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2)) (cbrt.f64 (log.f64 t)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) 3))","fresh",0.6617128907376811],["(fma.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2)) (cbrt.f64 (log.f64 t)) (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))","done",0.078125]],"compiler":[[22,15],[24,17],[21,14],[22,15],[24,17]],"count":[[153,3]],"kept":[{"done":[0,0],"fresh":[2,1],"new":[150,1],"picked":[1,1]}],"min-error":[0.03125],"time":44.222900390625,"type":"prune"},{"compiler":[[70,25]],"locations":[["(cbrt.f64 (log.f64 y))",0.109375,true],["(cbrt.f64 (pow.f64 (log.f64 y) 2))",0.12890625,true],["(*.f64 x (cbrt.f64 (log.f64 y)))",0.22265625,true],["(pow.f64 (log.f64 y) 2)",0.4716987793053261,true]],"time":17.02294921875,"type":"localize"},{"count":[[4,56]],"series":[["(cbrt.f64 (log.f64 y))","y","-inf",0.80810546875],["(cbrt.f64 (log.f64 y))","y","inf",0.85791015625],["(cbrt.f64 (log.f64 y))","y","0",5.2451171875],["(cbrt.f64 (pow.f64 (log.f64 y) 2))","y","-inf",1.06591796875],["(cbrt.f64 (pow.f64 (log.f64 y) 2))","y","inf",0.81591796875],["(cbrt.f64 (pow.f64 (log.f64 y) 2))","y","0",0.998046875],["(*.f64 x (cbrt.f64 (log.f64 y)))","y","-inf",1.27587890625],["(*.f64 x (cbrt.f64 (log.f64 y)))","y","inf",9.2119140625],["(*.f64 x (cbrt.f64 (log.f64 y)))","y","0",1.02099609375],["(*.f64 x (cbrt.f64 (log.f64 y)))","x","-inf",0.320068359375],["(*.f64 x (cbrt.f64 (log.f64 y)))","x","inf",0.363037109375],["(*.f64 x (cbrt.f64 (log.f64 y)))","x","0",8.93310546875],["(pow.f64 (log.f64 y) 2)","y","-inf",4.06884765625],["(pow.f64 (log.f64 y) 2)","y","inf",3.98095703125],["(pow.f64 (log.f64 y) 2)","y","0",3.826904296875]],"time":43.031982421875,"type":"series"},{"count":[[4,102]],"inputs":[["(pow.f64 (log.f64 y) 2)","(*.f64 x (cbrt.f64 (log.f64 y)))","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(cbrt.f64 (log.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 y) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (pow.f64 (log.f64 y) 5/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 5/3) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2/3) (pow.f64 (log.f64 y) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 4/3) (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (pow.f64 (pow.f64 (log.f64 y) 4/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (log.f64 y) 4/3) 4/3) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 y)) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) (neg.f64 (pow.f64 (log.f64 y) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 y) 2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 y) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x x) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) x) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) (log.f64 y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y)))) (pow.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 2/3) (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (cbrt.f64 (log.f64 y)))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 x (cbrt.f64 (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (cbrt.f64 (log.f64 y)))) (neg.f64 (pow.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (cbrt.f64 (log.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (cbrt.f64 (log.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) (log.f64 y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (log.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 y) 2/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 5/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 5/3)) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (cbrt.f64 (pow.f64 (log.f64 y) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4/3)) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 4/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 y) 2/3) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 y) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 y) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (log.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 y) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (log.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 y)))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 y)))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (log.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (log.f64 y))))))"]],"rules":[["egg-rr",19],["egg-rr",27],["egg-rr",28],["egg-rr",28]],"time":49.321044921875,"type":"rewrite"},{"count":[[158,111]],"inputs":[["(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (log.f64 y) 2)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))"]],"time":169.31689453125,"type":"simplify"},{"compiler":[[2390,891]],"time":20.35009765625,"type":"eval"},{"alts":[["(+.f64 (fma.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 (+.f64 y z))) (log.f64 t))","fresh",30.639667529305328],["(+.f64 (fma.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 (+.f64 y z))) (log.f64 t))","done",0.1419525390737681],["(+.f64 (fma.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) (log.f64 y))) (cbrt.f64 x)) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 (+.f64 y z))) (log.f64 t))","fresh",15.55859375],["(fma.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2)) (cbrt.f64 (log.f64 t)) (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))","done",0.078125],["(+.f64 (fma.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (pow.f64 (pow.f64 (log.f64 y) 2) 1/3) (neg.f64 (+.f64 y z))) (log.f64 t))","next",0.30284892583195633]],"compiler":[[30,24],[22,15],[27,18],[21,14],[23,16],[30,24],[27,18],[23,16]],"count":[[114,5]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[111,3],"picked":[1,1]}],"min-error":[0.015625],"time":27.35498046875,"type":"prune"},{"compiler":[[74,29]],"locations":[["(cbrt.f64 (log.f64 y))",0.109375,false],["(*.f64 x (cbrt.f64 (log.f64 y)))",0.22265625,false],["(pow.f64 (log.f64 y) 2)",0.4716987793053261,false],["(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)",1.170494629159781,true]],"time":24.032958984375,"type":"localize"},{"count":[[1,8]],"series":[["(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","y","-inf",0.215087890625],["(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","y","inf",0.1591796875],["(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","y","0",0.177978515625]],"time":0.59619140625,"type":"series"},{"count":[[1,26]],"inputs":[["(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 y) 2/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (cbrt.f64 (pow.f64 (log.f64 y) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4/3)) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 4/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 y) 2/3) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 y) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 y) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (log.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 y) 2))))))"]],"rules":[["egg-rr",26]],"time":33.4580078125,"type":"rewrite"},{"count":[[34,28]],"inputs":[["(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (log.f64 y) 2/3)"]],"time":37.9658203125,"type":"simplify"},{"compiler":[[2450,967]],"time":21.385986328125,"type":"eval"},{"alts":[["(+.f64 (fma.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 (+.f64 y z))) (log.f64 t))","done",0.1419525390737681],["(+.f64 (fma.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) (log.f64 y))) (cbrt.f64 x)) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 (+.f64 y z))) (log.f64 t))","fresh",15.55859375],["(+.f64 (fma.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (pow.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 6) 1/3) (neg.f64 (+.f64 y z))) (log.f64 t))","fresh",0.2857627316201496],["(fma.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2)) (cbrt.f64 (log.f64 t)) (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))","done",0.078125],["(+.f64 (fma.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 y) 6)) 1/3) (neg.f64 (+.f64 y z))) (log.f64 t))","fresh",0.30122768560039836]],"compiler":[[22,15],[27,18],[24,16],[21,14],[24,17]],"count":[[115,5]],"kept":[{"done":[2,2],"fresh":[2,1],"new":[110,2],"picked":[1,0]}],"min-error":[0.015625],"time":25.862060546875,"type":"prune"},{"accuracy":[0.078125],"baseline":[0.078125],"branch":[["x",0.078125,1],["y",0.078125,1],["z",0.078125,1],["t",0.078125,1],["(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z) (log.f64 t))",0.078125,1],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z)",0.078125,1],["(-.f64 (*.f64 x (log.f64 y)) y)",0.078125,1],["(log.f64 t)",0.078125,1]],"compiler":[[5,4],[5,4],[5,4],[5,4],[15,10],[12,8],[10,7],[6,5],[203,81]],"count":[[11,1]],"inputs":[["(+.f64 (fma.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (pow.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 6) 1/3) (neg.f64 (+.f64 y z))) (log.f64 t))","(+.f64 (fma.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 y) 6)) 1/3) (neg.f64 (+.f64 y z))) (log.f64 t))","(+.f64 (fma.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 (+.f64 y z))) (log.f64 t))","(+.f64 (fma.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) (log.f64 y))) (cbrt.f64 x)) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 (+.f64 y z))) (log.f64 t))","(+.f64 (fma.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (pow.f64 (pow.f64 (log.f64 y) 2) 1/3) (neg.f64 (+.f64 y z))) (log.f64 t))","(fma.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2)) (cbrt.f64 (log.f64 t)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) 3))","(+.f64 (fma.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 (+.f64 y z))) (log.f64 t))","(+.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) 3) (log.f64 t))","(fma.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2)) (cbrt.f64 (log.f64 t)) (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))","(+.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (log.f64 t))","(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z) (log.f64 t))"]],"link":["."],"name":["Numeric.SpecFunctions:incompleteGamma from math-functions-0.1.5.2, A"],"oracle":[39.5274264769895],"outputs":[["(fma.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2)) (cbrt.f64 (log.f64 t)) (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))"]],"time":42.447021484375,"times":[["x",4.848876953125],["y",4.68994140625],["z",4.697998046875],["t",4.7490234375],["(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z) (log.f64 t))",4.863037109375],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z)",4.946044921875],["(-.f64 (*.f64 x (log.f64 y)) y)",4.81005859375],["(log.f64 t)",5.072998046875]],"type":"regimes"},{"compiler":[[21,14]],"inputs":[["(fma.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2)) (cbrt.f64 (log.f64 t)) (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2)) (cbrt.f64 (log.f64 t)) (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))","(+.f64 (log.f64 t) (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))"]],"stop":[["fuel",1]],"time":19.241943359375,"type":"simplify"},{"time":0.01513671875,"type":"soundness"},{"compiler":[[21,14]],"remove-preprocessing":[[]],"time":11.27392578125,"type":"end"}]
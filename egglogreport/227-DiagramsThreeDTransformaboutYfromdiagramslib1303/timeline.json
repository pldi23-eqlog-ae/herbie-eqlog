[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.6552891655992426,0.34324670579007943,0.0014641286106780171],[11,0.6552891655992426,0.34324670579007943,0.0014641286106780171],[10,0.5616764276564936,0.43685944373282837,0.0014641286106780171],[9,0.37445095177099574,0.6240849196183262,0.0014641286106780171],[8,0.37445095177099574,0.6240849196183262,0.0014641286106780171],[7,0.2496339678473305,0.7489019035419915,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":110.423095703125,"type":"analyze"},{"outcomes":[["body",1024,"valid",519.7119140625,1993],["body",512,"valid",162.987060546875,1076],["body",2048,"valid",4.640380859375,8],["body",256,"valid",375.1806640625,5179]],"time":1071.123046875,"type":"sample"},{"compiler":[[12,8]],"inputs":[["0","1","2"],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 y (cos.f64 x)) (*.f64 z (sin.f64 x)))","(+.f64 (*.f64 z (cos.f64 y)) (*.f64 x (sin.f64 y)))","(+.f64 (*.f64 x (cos.f64 z)) (*.f64 y (sin.f64 z)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 y (cos.f64 x)) (*.f64 z (sin.f64 x)))","(fma.f64 y (cos.f64 x) (*.f64 z (sin.f64 x)))","(+.f64 (*.f64 z (cos.f64 y)) (*.f64 x (sin.f64 y)))","(fma.f64 z (cos.f64 y) (*.f64 x (sin.f64 y)))","(+.f64 (*.f64 x (cos.f64 z)) (*.f64 y (sin.f64 z)))","(fma.f64 x (cos.f64 z) (*.f64 y (sin.f64 z)))"]],"symmetry":[[]],"time":68.977783203125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y)))"]],"time":20.19921875,"type":"simplify"},{"compiler":[[20,9]],"time":0.347900390625,"type":"eval"},{"alts":[["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","next",0.109375]],"compiler":[[12,8],[12,8]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[0.109375],"time":0.864013671875,"type":"prune"},{"compiler":[[27,8]],"locations":[["(cos.f64 y)",0.015625,true],["(sin.f64 y)",0.015625,true],["(*.f64 z (sin.f64 y))",0.09375,true],["(*.f64 x (cos.f64 y))",0.109375,true]],"time":6.94091796875,"type":"localize"},{"count":[[4,36]],"series":[["(cos.f64 y)","y","-inf",0.135009765625],["(cos.f64 y)","y","inf",0.1650390625],["(cos.f64 y)","y","0",0.180908203125],["(sin.f64 y)","y","-inf",0.137939453125],["(sin.f64 y)","y","inf",0.158935546875],["(sin.f64 y)","y","0",0.2080078125],["(*.f64 z (sin.f64 y))","y","-inf",0.296875],["(*.f64 z (sin.f64 y))","y","inf",0.304931640625],["(*.f64 z (sin.f64 y))","y","0",0.3369140625],["(*.f64 z (sin.f64 y))","z","-inf",0.56689453125],["(*.f64 z (sin.f64 y))","z","inf",0.343017578125],["(*.f64 z (sin.f64 y))","z","0",0.6201171875],["(*.f64 x (cos.f64 y))","y","-inf",0.260009765625],["(*.f64 x (cos.f64 y))","y","inf",0.319091796875],["(*.f64 x (cos.f64 y))","y","0",0.52197265625],["(*.f64 x (cos.f64 y))","x","-inf",0.298828125],["(*.f64 x (cos.f64 y))","x","inf",0.420166015625],["(*.f64 x (cos.f64 y))","x","0",0.77392578125]],"time":6.22998046875,"type":"series"},{"count":[[4,100]],"inputs":[["(*.f64 x (cos.f64 y))","(*.f64 z (sin.f64 y))","(sin.f64 y)","(cos.f64 y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cos.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (pow.f64 (cos.f64 y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 y) 2/3) x) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (cos.f64 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 2/3) (*.f64 x (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) (pow.f64 (*.f64 x (cos.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2/3) (cbrt.f64 (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (cos.f64 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (cos.f64 y))) (neg.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (cos.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cos.f64 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (cos.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (sin.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 z (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (pow.f64 (sin.f64 y) 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (sin.f64 y))) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (*.f64 (sin.f64 y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) z) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z 2/3) (sin.f64 y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2/3) (*.f64 z (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 z (sin.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3) (cbrt.f64 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 z) (sin.f64 y))) (neg.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 z) (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 z (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 z (sin.f64 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (cos.f64 0)) (*.f64 (cos.f64 y) (sin.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 0) (cos.f64 y)) (*.f64 (cos.f64 0) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (neg.f64 (pow.f64 (sin.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (sin.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 y)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 y) (cos.f64 0)) (*.f64 (sin.f64 y) (sin.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 0) (cos.f64 y)) (*.f64 (sin.f64 0) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 2/3) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 y))) (neg.f64 (pow.f64 (cos.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 y) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 y)))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (neg.f64 y))))))"]],"rules":[["egg-rr",22],["egg-rr",22],["egg-rr",28],["egg-rr",28]],"time":44.947998046875,"type":"rewrite"},{"count":[[136,128]],"inputs":[["(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 y z)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 y z))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (*.f64 1/120 (*.f64 (pow.f64 y 5) z))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 7) z)) (*.f64 1/120 (*.f64 (pow.f64 y 5) z)))))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/2 (*.f64 (*.f64 y y) x) x)","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(+.f64 (*.f64 x (fma.f64 1/24 (pow.f64 y 4) (*.f64 -1/2 (*.f64 y y)))) x)","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)))","(fma.f64 -1/720 (*.f64 (pow.f64 y 6) x) (+.f64 (*.f64 x (fma.f64 1/24 (pow.f64 y 4) (*.f64 -1/2 (*.f64 y y)))) x))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 y z)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 y z))","(*.f64 z (fma.f64 -1/6 (pow.f64 y 3) y))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (*.f64 1/120 (*.f64 (pow.f64 y 5) z))))","(fma.f64 -1/6 (*.f64 (pow.f64 y 3) z) (*.f64 z (fma.f64 1/120 (pow.f64 y 5) y)))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 7) z)) (*.f64 1/120 (*.f64 (pow.f64 y 5) z)))))","(+.f64 (*.f64 z (fma.f64 -1/6 (pow.f64 y 3) y)) (*.f64 z (+.f64 (*.f64 1/120 (pow.f64 y 5)) (*.f64 -1/5040 (pow.f64 y 7)))))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(fma.f64 -1/6 (pow.f64 y 3) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(fma.f64 (pow.f64 y 3) -1/6 (fma.f64 (pow.f64 y 5) 1/120 (fma.f64 -1/5040 (pow.f64 y 7) y)))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(fma.f64 -1/2 (*.f64 y y) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 1/24 (pow.f64 y 4) (*.f64 -1/2 (*.f64 y y))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (fma.f64 (pow.f64 y 6) -1/720 1) (fma.f64 1/24 (pow.f64 y 4) (*.f64 -1/2 (*.f64 y y))))"]],"time":109.10498046875,"type":"simplify"},{"compiler":[[1798,714]],"time":17.4130859375,"type":"eval"},{"alts":[["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3)))","fresh",0.3369713379159781],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 3) (*.f64 z (sin.f64 y)))","fresh",0.5115014160635144],["(+.f64 (*.f64 x (cos.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3))","fresh",0.31876762698974626],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (pow.f64 (sin.f64 y) 2/3) z)))","fresh",33.50674927130304],["(+.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)) (*.f64 z (sin.f64 y)))","next",0.25722509768442015],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 z (sin.f64 y)) 2/3)))","fresh",29.253654644780948],["(+.f64 (*.f64 (*.f64 x (cbrt.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3)) (*.f64 z (sin.f64 y)))","fresh",16.568691259768443]],"compiler":[[15,11],[15,11],[15,11],[18,12],[15,11],[20,12],[18,12],[15,11],[15,11],[15,11],[18,12],[15,11],[20,12],[18,12]],"count":[[129,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[128,7],"picked":[1,0]}],"min-error":[0.05859375],"time":35.656005859375,"type":"prune"},{"compiler":[[42,17]],"locations":[["(cbrt.f64 (cos.f64 y))",0.0546875,true],["(*.f64 z (sin.f64 y))",0.09375,false],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))",0.109375,true],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)",0.34183505861065216,true]],"time":10.169921875,"type":"localize"},{"count":[[3,48]],"series":[["(cbrt.f64 (cos.f64 y))","y","-inf",0.171875],["(cbrt.f64 (cos.f64 y))","y","inf",0.160888671875],["(cbrt.f64 (cos.f64 y))","y","0",0.18408203125],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","y","-inf",0.30810546875],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","y","inf",0.322021484375],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","y","0",0.2041015625],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","x","-inf",0.244140625],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","x","inf",0.3388671875],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","x","0",0.31396484375],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","y","-inf",2.139892578125],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","y","inf",1.77197265625],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","y","0",0.404052734375]],"time":6.713134765625,"type":"series"},{"count":[[3,74]],"inputs":[["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","(cbrt.f64 (cos.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 y) (cos.f64 0)) (*.f64 (sin.f64 y) (sin.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 0) (cos.f64 y)) (*.f64 (sin.f64 0) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 8) (cbrt.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 2/3) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) (pow.f64 (cbrt.f64 (cos.f64 y)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 y))) (neg.f64 (pow.f64 (cos.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 y) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 y)))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (neg.f64 y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cos.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) (pow.f64 (*.f64 x (cos.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2/3) (cbrt.f64 (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 (cos.f64 y) 2/3)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (*.f64 x (pow.f64 (cos.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (cos.f64 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 2/3) (*.f64 x (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (cos.f64 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (cos.f64 y))) (neg.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (cos.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cos.f64 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (cos.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (cos.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) (cbrt.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (cos.f64 y)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (cos.f64 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (cos.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (cos.f64 y))))))"]],"rules":[["egg-rr",20],["egg-rr",28],["egg-rr",26]],"time":44.94091796875,"type":"rewrite"},{"count":[[122,95]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2))))","(+.f64 (*.f64 -23/6480 (pow.f64 y 6)) (+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))))","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(fma.f64 (*.f64 y y) -1/2 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 (pow.f64 y 4) 1/24 (*.f64 -1/2 (*.f64 y y))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (fma.f64 -1/720 (pow.f64 y 6) 1) (fma.f64 (pow.f64 y 4) 1/24 (*.f64 -1/2 (*.f64 y y))))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(cos.f64 y)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 (*.f64 -1/2 (*.f64 y y)) x x)","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(*.f64 x (+.f64 1 (fma.f64 (pow.f64 y 4) 1/24 (*.f64 -1/2 (*.f64 y y)))))","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)))","(*.f64 x (+.f64 (fma.f64 -1/720 (pow.f64 y 6) 1) (fma.f64 (pow.f64 y 4) 1/24 (*.f64 -1/2 (*.f64 y y)))))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(fma.f64 -1/6 (*.f64 y y) 1)","(+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2))))","(fma.f64 -1/72 (pow.f64 y 4) (fma.f64 -1/6 (*.f64 y y) 1))","(+.f64 (*.f64 -23/6480 (pow.f64 y 6)) (+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))))","(fma.f64 -23/6480 (pow.f64 y 6) (fma.f64 -1/72 (pow.f64 y 4) (fma.f64 -1/6 (*.f64 y y) 1)))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))"]],"time":198.261962890625,"type":"simplify"},{"compiler":[[2029,896]],"time":20.677978515625,"type":"eval"},{"alts":[["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3)))","fresh",0.3369713379159781],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 3) (*.f64 z (sin.f64 y)))","fresh",0.5115014160635144],["(+.f64 (*.f64 x (cos.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3))","next",0.31876762698974626],["(+.f64 (*.f64 x (pow.f64 (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 8))) 3)) (*.f64 z (sin.f64 y)))","fresh",0.438230330216281],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (pow.f64 (sin.f64 y) 2/3) z)))","fresh",33.50674927130304],["(+.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)) (*.f64 z (sin.f64 y)))","done",0.25722509768442015],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 z (sin.f64 y)) 2/3)))","fresh",29.253654644780948],["(+.f64 (*.f64 (*.f64 x (cbrt.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3)) (*.f64 z (sin.f64 y)))","fresh",16.568691259768443]],"compiler":[[15,11],[15,11],[15,11],[25,17],[18,12],[15,11],[20,12],[18,12],[15,11],[15,11],[15,11],[25,17],[18,12],[20,12],[18,12]],"count":[[137,8]],"kept":[{"done":[0,0],"fresh":[6,6],"new":[130,1],"picked":[1,1]}],"min-error":[0.05078125],"time":40.609130859375,"type":"prune"},{"compiler":[[43,14]],"locations":[["(*.f64 z (sin.f64 y))",0.09375,false],["(*.f64 x (cos.f64 y))",0.109375,false],["(pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)",0.6345864746741666,true],["(cbrt.f64 (*.f64 z (sin.f64 y)))",4.921106327897341,true]],"time":10.133056640625,"type":"localize"},{"count":[[2,16]],"series":[["(pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)","y","-inf",0.568115234375],["(pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)","y","inf",0.599853515625],["(pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)","y","0",0.7080078125],["(pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)","z","-inf",0.948974609375],["(pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)","z","inf",0.4970703125],["(pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)","z","0",0.572021484375],["(cbrt.f64 (*.f64 z (sin.f64 y)))","y","-inf",0.997802734375],["(cbrt.f64 (*.f64 z (sin.f64 y)))","y","inf",1.06005859375],["(cbrt.f64 (*.f64 z (sin.f64 y)))","y","0",0.349853515625],["(cbrt.f64 (*.f64 z (sin.f64 y)))","z","-inf",0.43212890625],["(cbrt.f64 (*.f64 z (sin.f64 y)))","z","inf",0.3671875],["(cbrt.f64 (*.f64 z (sin.f64 y)))","z","0",0.447021484375]],"time":7.7109375,"type":"series"},{"count":[[2,64]],"inputs":[["(cbrt.f64 (*.f64 z (sin.f64 y)))","(pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (*.f64 (neg.f64 z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) (cbrt.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3) (cbrt.f64 z))) (cbrt.f64 (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 y) (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (sin.f64 y))))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (cbrt.f64 (sin.f64 y)))) (cbrt.f64 (pow.f64 (sin.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (cbrt.f64 (*.f64 (pow.f64 z 2/3) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (cbrt.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (*.f64 z (sin.f64 y)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (neg.f64 z) (sin.f64 y)))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (*.f64 (neg.f64 z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 z) (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 z) (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (sin.f64 y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (*.f64 (neg.f64 z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 z (sin.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (sin.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 z (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (*.f64 z (sin.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) 8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (pow.f64 (sin.f64 y) 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3) (cbrt.f64 z)) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (*.f64 z (sin.f64 y)) 2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) z) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) 8) (cbrt.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z 2/3) (sin.f64 y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 z (sin.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3) (cbrt.f64 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 7/3) (cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (sin.f64 y))) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2/3) (*.f64 z (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3)) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (*.f64 (sin.f64 y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 z) (sin.f64 y))) (neg.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 z) (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 z (sin.f64 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 z (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3))))))"]],"rules":[["egg-rr",36],["egg-rr",28]],"time":42.994873046875,"type":"rewrite"},{"count":[[80,65]],"inputs":[["(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(cbrt.f64 (*.f64 z (sin.f64 y)))","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(cbrt.f64 (*.f64 z (sin.f64 y)))","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(cbrt.f64 (*.f64 z (sin.f64 y)))","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(cbrt.f64 (*.f64 z (sin.f64 y)))","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(cbrt.f64 (*.f64 z (sin.f64 y)))","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(cbrt.f64 (*.f64 z (sin.f64 y)))","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(cbrt.f64 (*.f64 z (sin.f64 y)))","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(cbrt.f64 (*.f64 z (sin.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))"]],"time":55.248046875,"type":"simplify"},{"compiler":[[2205,863]],"time":20.64794921875,"type":"eval"},{"alts":[["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3)))","next",0.3369713379159781],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 3) (*.f64 z (sin.f64 y)))","fresh",0.5115014160635144],["(+.f64 (*.f64 x (cos.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3))","done",0.31876762698974626],["(+.f64 (*.f64 x (pow.f64 (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 8))) 3)) (*.f64 z (sin.f64 y)))","fresh",0.438230330216281],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (pow.f64 (sin.f64 y) 2/3) z)))","fresh",33.50674927130304],["(+.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)) (*.f64 z (sin.f64 y)))","done",0.25722509768442015],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 z (sin.f64 y)) 2/3)))","fresh",29.253654644780948],["(+.f64 (*.f64 (*.f64 x (cbrt.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3)) (*.f64 z (sin.f64 y)))","fresh",16.568691259768443]],"compiler":[[15,11],[15,11],[15,11],[25,17],[18,12],[15,11],[20,12],[18,12],[15,11],[15,11],[25,17],[18,12],[20,12],[18,12]],"count":[[143,8]],"kept":[{"done":[1,1],"fresh":[6,6],"new":[135,0],"picked":[1,1]}],"min-error":[0.05078125],"time":37.673095703125,"type":"prune"},{"compiler":[[42,17]],"locations":[["(*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3))",0.09375,true],["(*.f64 x (cos.f64 y))",0.109375,false],["(cbrt.f64 (sin.f64 y))",0.109375,true],["(pow.f64 (cbrt.f64 (sin.f64 y)) 3)",0.7270089356003985,true]],"time":10.25,"type":"localize"},{"count":[[3,40]],"series":[["(*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3))","y","-inf",0.302978515625],["(*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3))","y","inf",0.31689453125],["(*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3))","y","0",0.2099609375],["(*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3))","z","-inf",0.240966796875],["(*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3))","z","inf",0.31494140625],["(*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3))","z","0",0.30908203125],["(cbrt.f64 (sin.f64 y))","y","-inf",0.14794921875],["(cbrt.f64 (sin.f64 y))","y","inf",0.18212890625],["(cbrt.f64 (sin.f64 y))","y","0",0.238037109375],["(pow.f64 (cbrt.f64 (sin.f64 y)) 3)","y","-inf",3.237060546875],["(pow.f64 (cbrt.f64 (sin.f64 y)) 3)","y","inf",1.5400390625],["(pow.f64 (cbrt.f64 (sin.f64 y)) 3)","y","0",0.636962890625]],"time":7.826904296875,"type":"series"},{"count":[[3,74]],"inputs":[["(pow.f64 (cbrt.f64 (sin.f64 y)) 3)","(cbrt.f64 (sin.f64 y))","(*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (cos.f64 0)) (*.f64 (cos.f64 y) (sin.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 0) (cos.f64 y)) (*.f64 (cos.f64 0) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) 8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) 8) (cbrt.f64 (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 7/3) (cbrt.f64 (pow.f64 (sin.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2/3)) (pow.f64 (cbrt.f64 (sin.f64 y)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (neg.f64 (pow.f64 (sin.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (sin.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 y)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (sin.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2/3)) (cbrt.f64 (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) (cbrt.f64 (pow.f64 (sin.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (sin.f64 y)))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (sin.f64 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (sin.f64 y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 z (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (sin.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 z (sin.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3) (cbrt.f64 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (pow.f64 (sin.f64 y) 2/3)) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (sin.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z 2/3) (sin.f64 y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2/3) (*.f64 z (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (sin.f64 y))) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (*.f64 (sin.f64 y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 z) (sin.f64 y))) (neg.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 z) (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 z (sin.f64 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 z (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3))))))"]],"rules":[["egg-rr",28],["egg-rr",20],["egg-rr",26]],"time":45.0791015625,"type":"rewrite"},{"count":[[114,82]],"inputs":[["(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 y z)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 y z))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (*.f64 1/120 (*.f64 (pow.f64 y 5) z))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 7) z)) (*.f64 1/120 (*.f64 (pow.f64 y 5) z)))))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 y z)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 y z))","(*.f64 z (+.f64 y (*.f64 -1/6 (pow.f64 y 3))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (*.f64 1/120 (*.f64 (pow.f64 y 5) z))))","(*.f64 z (+.f64 (+.f64 y (*.f64 1/120 (pow.f64 y 5))) (*.f64 -1/6 (pow.f64 y 3))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 7) z)) (*.f64 1/120 (*.f64 (pow.f64 y 5) z)))))","(*.f64 z (+.f64 (+.f64 y (*.f64 -1/6 (pow.f64 y 3))) (+.f64 (*.f64 -1/5040 (pow.f64 y 7)) (*.f64 1/120 (pow.f64 y 5)))))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))"]],"time":145.426025390625,"type":"simplify"},{"compiler":[[1782,749]],"time":17.536865234375,"type":"eval"},{"alts":[["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3)))","done",0.3369713379159781],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 3) (*.f64 z (sin.f64 y)))","fresh",0.5115014160635144],["(+.f64 (*.f64 (*.f64 x (cbrt.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3)) (*.f64 z (sin.f64 y)))","fresh",16.568691259768443],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 7/3) (cbrt.f64 (pow.f64 (sin.f64 y) 2/3)))))","fresh",33.51563807232597],["(+.f64 (*.f64 x (cos.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3))","done",0.31876762698974626],["(+.f64 (*.f64 x (pow.f64 (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 8))) 3)) (*.f64 z (sin.f64 y)))","fresh",0.438230330216281],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (pow.f64 (sin.f64 y) 2/3) z)))","fresh",33.50674927130304],["(+.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)) (*.f64 z (sin.f64 y)))","done",0.25722509768442015]],"compiler":[[15,11],[15,11],[18,12],[21,15],[15,11],[25,17],[18,12],[15,11]],"count":[[125,8]],"kept":[{"done":[2,2],"fresh":[5,4],"new":[117,1],"picked":[1,1]}],"min-error":[0.05078125],"time":30.861083984375,"type":"prune"},{"accuracy":[0.109375],"baseline":[0.109375],"branch":[["x",0.109375,1],["y",0.109375,1],["z",0.109375,1],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))",0.109375,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[147,58]],"count":[[10,1]],"inputs":[["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 7/3) (cbrt.f64 (pow.f64 (sin.f64 y) 2/3)))))","(+.f64 (*.f64 x (pow.f64 (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 8))) 3)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3)))","(+.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 3) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 x (cos.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3))","(+.f64 (*.f64 x (cos.f64 y)) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (pow.f64 (sin.f64 y) 2/3) z)))","(+.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 x (cos.f64 y)) (*.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 z (sin.f64 y)) 2/3)))","(+.f64 (*.f64 (*.f64 x (cbrt.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"link":["."],"name":["Diagrams.ThreeD.Transform:aboutY from diagrams-lib-1.3.0.3"],"oracle":[50.63308675872978],"outputs":[["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"time":20.528076171875,"times":[["x",4.365966796875],["y",4.468994140625],["z",4.41796875],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))",4.804931640625]],"type":"regimes"},{"compiler":[[12,8]],"inputs":[["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y)))"]],"stop":[["fuel",1]],"time":20.5869140625,"type":"simplify"},{"time":0.0029296875,"type":"soundness"},{"compiler":[[12,8]],"remove-preprocessing":[[]],"time":8.670166015625,"type":"end"}]
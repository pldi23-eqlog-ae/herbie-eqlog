[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.6552891655992426,0.34324670579007943,0.0014641286106780171],[11,0.6552891655992426,0.34324670579007943,0.0014641286106780171],[10,0.5616764276564936,0.43685944373282837,0.0014641286106780171],[9,0.37445095177099574,0.6240849196183262,0.0014641286106780171],[8,0.37445095177099574,0.6240849196183262,0.0014641286106780171],[7,0.2496339678473305,0.7489019035419915,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":110.48583984375,"type":"analyze"},{"outcomes":[["body",1024,"valid",518.62255859375,1993],["body",512,"valid",162.628662109375,1076],["body",2048,"valid",4.560302734375,8],["body",256,"valid",374.63037109375,5179]],"time":1069.483154296875,"type":"sample"},{"compiler":[[12,8]],"inputs":[["0","1","2"],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 y (cos.f64 x)) (*.f64 z (sin.f64 x)))","(-.f64 (*.f64 z (cos.f64 y)) (*.f64 x (sin.f64 y)))","(-.f64 (*.f64 x (cos.f64 z)) (*.f64 y (sin.f64 z)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(-.f64 (*.f64 y (cos.f64 x)) (*.f64 z (sin.f64 x)))","(fma.f64 y (cos.f64 x) (*.f64 (neg.f64 z) (sin.f64 x)))","(-.f64 (*.f64 z (cos.f64 y)) (*.f64 x (sin.f64 y)))","(fma.f64 z (cos.f64 y) (*.f64 (neg.f64 x) (sin.f64 y)))","(-.f64 (*.f64 x (cos.f64 z)) (*.f64 y (sin.f64 z)))","(fma.f64 x (cos.f64 z) (*.f64 (neg.f64 y) (sin.f64 z)))"]],"symmetry":[[]],"time":69.474853515625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))"]],"time":19.26904296875,"type":"simplify"},{"compiler":[[21,11]],"time":0.37109375,"type":"eval"},{"alts":[["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","next",0.1171875]],"compiler":[[12,8],[12,8]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[0.1171875],"time":0.867919921875,"type":"prune"},{"compiler":[[27,8]],"locations":[["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))",0.015625,true],["(sin.f64 y)",0.015625,true],["(*.f64 z (sin.f64 y))",0.09375,true],["(*.f64 x (cos.f64 y))",0.109375,true]],"time":7.869140625,"type":"localize"},{"count":[[4,68]],"series":[["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","z","-inf",0.208984375],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","z","inf",0.177978515625],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","z","0",0.333984375],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","y","-inf",0.181884765625],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","y","inf",0.2138671875],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","y","0",0.216064453125],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","x","-inf",0.201171875],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","x","inf",0.18017578125],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","x","0",0.346923828125],["(sin.f64 y)","y","-inf",0.135009765625],["(sin.f64 y)","y","inf",0.166015625],["(sin.f64 y)","y","0",0.203857421875],["(*.f64 z (sin.f64 y))","y","-inf",0.2919921875],["(*.f64 z (sin.f64 y))","y","inf",0.275146484375],["(*.f64 z (sin.f64 y))","y","0",0.362060546875],["(*.f64 z (sin.f64 y))","z","-inf",0.56298828125],["(*.f64 z (sin.f64 y))","z","inf",0.33984375],["(*.f64 z (sin.f64 y))","z","0",0.589111328125],["(*.f64 x (cos.f64 y))","y","-inf",0.286865234375],["(*.f64 x (cos.f64 y))","y","inf",0.317138671875],["(*.f64 x (cos.f64 y))","y","0",0.51708984375],["(*.f64 x (cos.f64 y))","x","-inf",0.2958984375],["(*.f64 x (cos.f64 y))","x","inf",0.423095703125],["(*.f64 x (cos.f64 y))","x","0",0.739990234375]],"time":7.829833984375,"type":"series"},{"count":[[4,122]],"inputs":[["(*.f64 x (cos.f64 y))","(*.f64 z (sin.f64 y))","(sin.f64 y)","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (cos.f64 y)) 0) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cos.f64 y)) (*.f64 (*.f64 x (cos.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (cos.f64 y))) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cos.f64 y)) (*.f64 0 (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) (pow.f64 (*.f64 x (cos.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2/3) (cbrt.f64 (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (pow.f64 (cos.f64 y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (cos.f64 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 2/3) (*.f64 x (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (cos.f64 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 y) 2/3) x) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (cos.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z (sin.f64 y)) 0) (*.f64 z (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (sin.f64 y)) (*.f64 (*.f64 z (sin.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 z (sin.f64 y))) (*.f64 z (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (sin.f64 y)) (*.f64 0 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 z (sin.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3) (cbrt.f64 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (sin.f64 y))) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (pow.f64 (sin.f64 y) 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) z) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z 2/3) (sin.f64 y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2/3) (*.f64 z (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (*.f64 (sin.f64 y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 z (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 z) (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) 0) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) (*.f64 (sin.f64 y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sin.f64 y)) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) (*.f64 0 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 y)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))) 0) (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))) (*.f64 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))) (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))) (*.f64 0 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cos.f64 y)) (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 z) (sin.f64 y)) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (neg.f64 z) (sin.f64 y)) (*.f64 (neg.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 x (cos.f64 y)) 0) (*.f64 z (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 (sin.f64 y) z (*.f64 (neg.f64 x) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (fma.f64 (sin.f64 y) z (*.f64 (neg.f64 x) (cos.f64 y))))) (pow.f64 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2/3) (+.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3) (cbrt.f64 (*.f64 (*.f64 (*.f64 x (cos.f64 y)) z) (sin.f64 y))))) (-.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) (cbrt.f64 (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))) (pow.f64 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))) 2/3) (cbrt.f64 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (sin.f64 y) z (*.f64 (neg.f64 x) (cos.f64 y)))) (neg.f64 (pow.f64 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 (sin.f64 y) z (*.f64 (neg.f64 x) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sin.f64 y) z (*.f64 (neg.f64 x) (cos.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 (neg.f64 x) (cos.f64 y)) (*.f64 (neg.f64 z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 (sin.f64 y) z (*.f64 (neg.f64 x) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (fma.f64 (sin.f64 y) z (*.f64 (neg.f64 x) (cos.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) (pow.f64 (*.f64 x (cos.f64 y)) 2/3) (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 z) (cbrt.f64 (sin.f64 y))) (pow.f64 (sin.f64 y) 2/3) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (neg.f64 z) (sin.f64 y))) (pow.f64 (*.f64 z (sin.f64 y)) 2/3) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) (neg.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3)) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 y) (neg.f64 z) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (cos.f64 y)) (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3) (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 y) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (pow.f64 (cos.f64 y) 2/3) x) (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2/3) (cbrt.f64 (*.f64 x (cos.f64 y))) (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (neg.f64 x) (cos.f64 y)) (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (cos.f64 y)) (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (neg.f64 z) (sin.f64 y)) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cos.f64 y)) 1 (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y))))))))"]],"rules":[["egg-rr",53],["egg-rr",17],["egg-rr",26],["egg-rr",26]],"time":32.033935546875,"type":"rewrite"},{"count":[[190,153]],"inputs":[["(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 y z)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 y z))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (*.f64 1/120 (*.f64 (pow.f64 y 5) z))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 7) z)) (*.f64 1/120 (*.f64 (pow.f64 y 5) z)))))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","x","(+.f64 (*.f64 -1 (*.f64 y z)) x)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) z)) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/2 (*.f64 (*.f64 y y) x) x)","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(+.f64 (*.f64 x (+.f64 (*.f64 1/24 (pow.f64 y 4)) (*.f64 -1/2 (*.f64 y y)))) x)","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)))","(+.f64 (*.f64 x (+.f64 (*.f64 -1/720 (pow.f64 y 6)) (*.f64 1/24 (pow.f64 y 4)))) (fma.f64 -1/2 (*.f64 (*.f64 y y) x) x))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 y z)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 y z))","(*.f64 z (fma.f64 -1/6 (pow.f64 y 3) y))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (*.f64 1/120 (*.f64 (pow.f64 y 5) z))))","(fma.f64 -1/6 (*.f64 (pow.f64 y 3) z) (*.f64 z (fma.f64 1/120 (pow.f64 y 5) y)))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 7) z)) (*.f64 1/120 (*.f64 (pow.f64 y 5) z)))))","(+.f64 (*.f64 z (fma.f64 -1/6 (pow.f64 y 3) y)) (*.f64 z (+.f64 (*.f64 1/120 (pow.f64 y 5)) (*.f64 -1/5040 (pow.f64 y 7)))))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(fma.f64 -1/6 (pow.f64 y 3) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(fma.f64 (pow.f64 y 3) -1/6 (fma.f64 1/120 (pow.f64 y 5) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 (pow.f64 y 5) 1/120 (fma.f64 (pow.f64 y 7) -1/5040 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 (neg.f64 z) (sin.f64 y))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","x","(+.f64 (*.f64 -1 (*.f64 y z)) x)","(fma.f64 (neg.f64 y) z x)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(fma.f64 (neg.f64 y) z (fma.f64 -1/2 (*.f64 (*.f64 y y) x) x))","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) z)) x)))","(-.f64 (fma.f64 (*.f64 (*.f64 y y) x) -1/2 (fma.f64 1/6 (*.f64 (pow.f64 y 3) z) x)) (*.f64 y z))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 (neg.f64 z) (sin.f64 y))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 (neg.f64 z) (sin.f64 y))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (cos.f64 y) x (*.f64 (neg.f64 z) (sin.f64 y)))"]],"time":193.63623046875,"type":"simplify"},{"compiler":[[2147,681]],"time":19.073974609375,"type":"eval"},{"alts":[["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3)))","fresh",0.33535009768442015],["(-.f64 (*.f64 x (cos.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3))","fresh",0.31714638675818824],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) z) (cbrt.f64 (sin.f64 y))))","fresh",33.50673100377488],["(-.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 3) (*.f64 z (sin.f64 y)))","fresh",0.5115014160635144],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))","next",0.109375],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3) (cbrt.f64 (*.f64 z (sin.f64 y)))))","fresh",29.25370658549428],["(-.f64 (*.f64 (pow.f64 (cos.f64 y) 2/3) (*.f64 x (cbrt.f64 (cos.f64 y)))) (*.f64 z (sin.f64 y)))","fresh",16.576503759768443]],"compiler":[[15,11],[15,11],[18,12],[15,11],[12,8],[20,12],[18,12],[15,11],[15,11],[18,12],[15,11],[12,8],[20,12],[18,12]],"count":[[154,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[153,7],"picked":[1,0]}],"min-error":[0.05859375],"time":45.64599609375,"type":"prune"},{"compiler":[[26,8]],"locations":[["(cos.f64 y)",0.015625,true],["(sin.f64 y)",0.015625,false],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))",0.0546875,true],["(*.f64 x (cos.f64 y))",0.109375,false]],"time":7.326904296875,"type":"localize"},{"count":[[2,40]],"series":[["(cos.f64 y)","y","-inf",0.135986328125],["(cos.f64 y)","y","inf",0.135986328125],["(cos.f64 y)","y","0",0.212158203125],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))","x","-inf",0.1708984375],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))","x","inf",0.174072265625],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))","x","0",0.26123046875],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))","z","-inf",0.363037109375],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))","z","inf",0.35009765625],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))","z","0",0.256103515625],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))","y","-inf",0.35302734375],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))","y","inf",0.376953125],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))","y","0",0.260986328125]],"time":3.22509765625,"type":"series"},{"count":[[2,67]],"inputs":[["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))","(cos.f64 y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (neg.f64 z)) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sin.f64 y) (neg.f64 z)) (*.f64 (neg.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (cos.f64 y)) (*.f64 (sin.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (cos.f64 y)) (-.f64 (*.f64 (sin.f64 y) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 (sin.f64 y) z) (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))) (pow.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 2/3) (cbrt.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) z) 2)) (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2/3) (*.f64 (cbrt.f64 (*.f64 (sin.f64 y) (neg.f64 z))) (cbrt.f64 (*.f64 x (cos.f64 y)))))) (+.f64 (cbrt.f64 (*.f64 (sin.f64 y) (neg.f64 z))) (cbrt.f64 (*.f64 x (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) z) 2)) (*.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) (cbrt.f64 (*.f64 (sin.f64 y) (neg.f64 z)))))) (+.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) (cbrt.f64 (*.f64 (sin.f64 y) (neg.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2/3) (+.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) z)) 2) (*.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) (cbrt.f64 (*.f64 (sin.f64 y) z))))) (-.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) (cbrt.f64 (*.f64 (sin.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 (sin.f64 y) z) (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (sin.f64 y) z) (*.f64 x (cos.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 (sin.f64 y) z) (*.f64 x (cos.f64 y)))) (neg.f64 (pow.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sin.f64 y) z) (*.f64 x (cos.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (sin.f64 y) z) (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2/3) (cbrt.f64 (*.f64 x (cos.f64 y))) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (pow.f64 (cos.f64 y) 2/3) x) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 y) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) (pow.f64 (*.f64 x (cos.f64 y)) 2/3) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 y) (cbrt.f64 (neg.f64 z))) (pow.f64 z 2/3) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sin.f64 y) (neg.f64 z))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) z) 2)) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (*.f64 (pow.f64 (sin.f64 y) 2/3) z) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (neg.f64 x) (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (sin.f64 y) z) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cos.f64 y)) 1 (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1 (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sin.f64 y) (neg.f64 z)) (*.f64 x (cos.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 y) (cos.f64 0)) (*.f64 (sin.f64 y) (sin.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 0) (cos.f64 y)) (*.f64 (sin.f64 0) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 2/3) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 y))) (neg.f64 (pow.f64 (cos.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 y) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 y)))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (neg.f64 y))))))"]],"rules":[["egg-rr",22],["egg-rr",45]],"time":42.291015625,"type":"rewrite"},{"count":[[107,86]],"inputs":[["x","(+.f64 (*.f64 -1 (*.f64 y z)) x)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) z)) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1 (*.f64 y z)) x)","(fma.f64 (neg.f64 y) z x)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(fma.f64 (neg.f64 y) z (fma.f64 -1/2 (*.f64 (*.f64 x y) y) x))","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) z)) x)))","(fma.f64 (neg.f64 y) z (fma.f64 -1/2 (*.f64 (*.f64 x y) y) (fma.f64 1/6 (*.f64 (pow.f64 y 3) z) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 (neg.f64 z) (sin.f64 y))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 (neg.f64 z) (sin.f64 y))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 (neg.f64 z) (sin.f64 y))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 x (cos.f64 y) (*.f64 (neg.f64 z) (sin.f64 y)))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(fma.f64 (*.f64 y y) -1/2 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 (pow.f64 y 4) 1/24 (*.f64 (*.f64 -1/2 y) y)))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (fma.f64 (pow.f64 y 6) -1/720 1) (fma.f64 (pow.f64 y 4) 1/24 (*.f64 (*.f64 -1/2 y) y)))"]],"time":161.781982421875,"type":"simplify"},{"compiler":[[1981,682]],"time":20.052978515625,"type":"eval"},{"alts":[["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3)))","fresh",0.33535009768442015],["(-.f64 (*.f64 x (cos.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3))","fresh",0.31714638675818824],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","next",0.2494125976844201],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3) (cbrt.f64 (*.f64 z (sin.f64 y)))))","fresh",29.25370658549428],["(fma.f64 (neg.f64 (sin.f64 y)) z (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 3))","fresh",0.5036889160635144],["(fma.f64 (cbrt.f64 (*.f64 (sin.f64 y) (neg.f64 z))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) z) 2)) (*.f64 x (cos.f64 y)))","fresh",11.275570585032579],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 (*.f64 x (cbrt.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3)))","fresh",16.568691259768443],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) z) (cbrt.f64 (sin.f64 y))))","fresh",33.50673100377488]],"compiler":[[15,11],[15,11],[15,11],[20,12],[15,11],[21,14],[18,12],[18,12],[15,11],[15,11],[15,11],[20,12],[15,11],[21,14],[18,12],[18,12]],"count":[[150,8]],"kept":[{"done":[0,0],"fresh":[6,4],"new":[143,4],"picked":[1,0]}],"min-error":[0.05078125],"time":46.558837890625,"type":"prune"},{"compiler":[[41,17]],"locations":[["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))",0.0546875,true],["(cbrt.f64 (cos.f64 y))",0.0546875,true],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))",0.109375,true],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)",0.34183505861065216,true]],"time":10.333984375,"type":"localize"},{"count":[[4,84]],"series":[["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","x","-inf",0.1689453125],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","x","inf",0.58203125],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","x","0",0.166015625],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","z","-inf",0.1689453125],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","z","inf",0.197021484375],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","z","0",0.244873046875],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","y","-inf",0.200927734375],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","y","inf",0.177978515625],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","y","0",0.201904296875],["(cbrt.f64 (cos.f64 y))","y","-inf",0.140869140625],["(cbrt.f64 (cos.f64 y))","y","inf",0.158935546875],["(cbrt.f64 (cos.f64 y))","y","0",0.2109375],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","y","-inf",0.31103515625],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","y","inf",0.296875],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","y","0",0.23193359375],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","x","-inf",0.217041015625],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","x","inf",0.369140625],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","x","0",0.31396484375],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","y","-inf",1.37109375],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","y","inf",1.5478515625],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","y","0",1.026123046875]],"time":8.56005859375,"type":"series"},{"count":[[4,107]],"inputs":[["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","(cbrt.f64 (cos.f64 y))","(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 y) 0) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 y) (*.f64 (cos.f64 y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 y)) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 y) (*.f64 0 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4/3) 2) (cbrt.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 2/3) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) (pow.f64 (cbrt.f64 (cos.f64 y)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 y)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (cos.f64 y)) 0) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cos.f64 y)) (*.f64 (*.f64 x (cos.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (cos.f64 y))) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cos.f64 y)) (*.f64 0 (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 (cos.f64 y) 2/3)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (*.f64 x (pow.f64 (cos.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (cos.f64 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) (pow.f64 (*.f64 x (cos.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2/3) (cbrt.f64 (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 2/3) (*.f64 x (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (cos.f64 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (cos.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (cos.f64 y)) 0) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (cos.f64 y))) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (cos.f64 y)) (*.f64 0 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) (cbrt.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (cos.f64 y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 0) (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) (*.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))) (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) (*.f64 0 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (neg.f64 z)) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (cos.f64 y)) (*.f64 (sin.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))) (pow.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 2/3) (cbrt.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (neg.f64 (*.f64 x (cos.f64 y))) (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 (sin.f64 y) z) (neg.f64 (*.f64 x (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (*.f64 (pow.f64 (sin.f64 y) 2/3) z) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 (sin.f64 y) (cbrt.f64 z))) (pow.f64 z 2/3) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sin.f64 y) (neg.f64 z))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 2)) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 y) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) (pow.f64 (*.f64 x (cos.f64 y)) 2/3) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cos.f64 y) 2/3) (*.f64 x (cbrt.f64 (cos.f64 y))) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cos.f64 y) 2/3)) (cbrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 x (pow.f64 (cos.f64 y) 2/3)) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2/3) (cbrt.f64 (*.f64 x (cos.f64 y))) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (sin.f64 y) z) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x (cos.f64 y))) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1 (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sin.f64 y) (neg.f64 z)) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cos.f64 y)) 1 (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))))))"]],"rules":[["egg-rr",42],["egg-rr",18],["egg-rr",26],["egg-rr",21]],"time":34.5771484375,"type":"rewrite"},{"count":[[191,138]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2))))","(+.f64 (*.f64 -23/6480 (pow.f64 y 6)) (+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))))","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","x","(+.f64 (*.f64 -1 (*.f64 y z)) x)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) z)) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(fma.f64 (*.f64 y y) -1/2 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 (pow.f64 y 4) 1/24 (*.f64 -1/2 (*.f64 y y))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (fma.f64 -1/720 (pow.f64 y 6) 1) (fma.f64 (pow.f64 y 4) 1/24 (*.f64 -1/2 (*.f64 y y))))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(cos.f64 y)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/2 (*.f64 (*.f64 y y) x) x)","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(+.f64 (*.f64 x (fma.f64 (pow.f64 y 4) 1/24 (*.f64 -1/2 (*.f64 y y)))) x)","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)))","(fma.f64 -1/720 (*.f64 (pow.f64 y 6) x) (+.f64 (*.f64 x (fma.f64 (pow.f64 y 4) 1/24 (*.f64 -1/2 (*.f64 y y)))) x))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(fma.f64 (*.f64 y y) -1/6 1)","(+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2))))","(fma.f64 -1/72 (pow.f64 y 4) (fma.f64 (*.f64 y y) -1/6 1))","(+.f64 (*.f64 -23/6480 (pow.f64 y 6)) (+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))))","(fma.f64 (pow.f64 y 6) -23/6480 (fma.f64 -1/72 (pow.f64 y 4) (fma.f64 (*.f64 y y) -1/6 1)))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","x","(+.f64 (*.f64 -1 (*.f64 y z)) x)","(fma.f64 (neg.f64 y) z x)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(fma.f64 (neg.f64 y) z (fma.f64 -1/2 (*.f64 (*.f64 y y) x) x))","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) z)) x)))","(fma.f64 (neg.f64 y) z (fma.f64 (*.f64 (*.f64 y y) x) -1/2 (fma.f64 1/6 (*.f64 (pow.f64 y 3) z) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 (neg.f64 z) (sin.f64 y))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 (neg.f64 z) (sin.f64 y))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 (neg.f64 z) (sin.f64 y))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 (cos.f64 y) x))"]],"time":233.0830078125,"type":"simplify"},{"compiler":[[2005,721]],"time":20.848876953125,"type":"eval"},{"alts":[["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3)))","fresh",0.33535009768442015],["(-.f64 (*.f64 x (cos.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3))","next",0.31714638675818824],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (*.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4/3) 2))))","fresh",16.629870080462865],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 3) 3)))","fresh",0.42507420035056986],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) z) (cbrt.f64 (sin.f64 y))))","fresh",33.50673100377488],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","done",0.2494125976844201],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3) (cbrt.f64 (*.f64 z (sin.f64 y)))))","fresh",29.25370658549428],["(fma.f64 (neg.f64 (sin.f64 y)) z (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 3))","fresh",0.5036889160635144],["(fma.f64 (cbrt.f64 (*.f64 (sin.f64 y) (neg.f64 z))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) z) 2)) (*.f64 x (cos.f64 y)))","fresh",11.275570585032579],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 (*.f64 x (cbrt.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3)))","fresh",16.568691259768443]],"compiler":[[15,11],[15,11],[22,15],[18,14],[18,12],[15,11],[20,12],[15,11],[21,14],[18,12],[15,11],[15,11],[22,15],[18,14],[18,12],[20,12],[15,11],[21,14],[18,12]],"count":[[146,10]],"kept":[{"done":[0,0],"fresh":[7,7],"new":[138,2],"picked":[1,1]}],"min-error":[0.04296875],"time":41.470947265625,"type":"prune"},{"compiler":[[43,14]],"locations":[["(*.f64 z (sin.f64 y))",0.09375,false],["(*.f64 x (cos.f64 y))",0.109375,false],["(pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)",0.6345864746741666,true],["(cbrt.f64 (*.f64 z (sin.f64 y)))",4.921106327897341,true]],"time":10.177978515625,"type":"localize"},{"count":[[2,16]],"series":[["(pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)","y","-inf",0.559814453125],["(pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)","y","inf",2.254150390625],["(pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)","y","0",0.741943359375],["(pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)","z","-inf",1.0888671875],["(pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)","z","inf",0.59716796875],["(pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)","z","0",0.576171875],["(cbrt.f64 (*.f64 z (sin.f64 y)))","y","-inf",1.02392578125],["(cbrt.f64 (*.f64 z (sin.f64 y)))","y","inf",1.041015625],["(cbrt.f64 (*.f64 z (sin.f64 y)))","y","0",0.3740234375],["(cbrt.f64 (*.f64 z (sin.f64 y)))","z","-inf",0.466796875],["(cbrt.f64 (*.f64 z (sin.f64 y)))","z","inf",0.3271484375],["(cbrt.f64 (*.f64 z (sin.f64 y)))","z","0",0.41796875]],"time":9.614013671875,"type":"series"},{"count":[[2,64]],"inputs":[["(cbrt.f64 (*.f64 z (sin.f64 y)))","(pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (*.f64 (neg.f64 z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) (cbrt.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3) (cbrt.f64 z))) (cbrt.f64 (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 y) (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (sin.f64 y))))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (cbrt.f64 (sin.f64 y)))) (cbrt.f64 (pow.f64 (sin.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (cbrt.f64 (*.f64 (pow.f64 z 2/3) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (cbrt.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (*.f64 z (sin.f64 y)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (neg.f64 z) (sin.f64 y)))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (*.f64 (neg.f64 z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 z) (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 z) (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (sin.f64 y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (*.f64 (neg.f64 z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 z (sin.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (sin.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 z (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (*.f64 z (sin.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) 8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (pow.f64 (sin.f64 y) 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3) (cbrt.f64 z)) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (*.f64 z (sin.f64 y)) 2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) z) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) 8) (cbrt.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z 2/3) (sin.f64 y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 z (sin.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3) (cbrt.f64 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 7/3) (cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (sin.f64 y))) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2/3) (*.f64 z (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3)) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (*.f64 (sin.f64 y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 z) (sin.f64 y))) (neg.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 z) (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 z (sin.f64 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 z (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3))))))"]],"rules":[["egg-rr",36],["egg-rr",28]],"time":42.423095703125,"type":"rewrite"},{"count":[[80,65]],"inputs":[["(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(cbrt.f64 (*.f64 z (sin.f64 y)))","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(cbrt.f64 (*.f64 z (sin.f64 y)))","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(cbrt.f64 (*.f64 z (sin.f64 y)))","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(cbrt.f64 (*.f64 z (sin.f64 y)))","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(cbrt.f64 (*.f64 z (sin.f64 y)))","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(cbrt.f64 (*.f64 z (sin.f64 y)))","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(cbrt.f64 (*.f64 z (sin.f64 y)))","(pow.f64 (*.f64 z (sin.f64 y)) 1/3)","(cbrt.f64 (*.f64 z (sin.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))"]],"time":55.423095703125,"type":"simplify"},{"compiler":[[2167,841]],"time":20.491943359375,"type":"eval"},{"alts":[["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) z) (cbrt.f64 (sin.f64 y))))","fresh",33.50673100377488],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3)))","fresh",0.33535009768442015],["(-.f64 (*.f64 x (cos.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3))","done",0.31714638675818824],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (*.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4/3) 2))))","fresh",16.629870080462865],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","done",0.2494125976844201],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3) (cbrt.f64 (*.f64 z (sin.f64 y)))))","fresh",29.25370658549428],["(fma.f64 (neg.f64 (sin.f64 y)) z (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 3))","fresh",0.5036889160635144],["(fma.f64 (cbrt.f64 (*.f64 (sin.f64 y) (neg.f64 z))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) z) 2)) (*.f64 x (cos.f64 y)))","fresh",11.275570585032579],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 (*.f64 x (cbrt.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3)))","fresh",16.568691259768443],["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 3) 3)))","fresh",0.42507420035056986]],"compiler":[[18,12],[15,11],[15,11],[22,15],[15,11],[20,12],[15,11],[21,14],[18,12],[18,14]],"count":[[141,10]],"kept":[{"done":[1,1],"fresh":[8,7],"new":[131,1],"picked":[1,1]}],"min-error":[0.04296875],"time":35.055908203125,"type":"prune"},{"accuracy":[0.109375],"baseline":[0.109375],"branch":[["x",0.109375,1],["y",0.109375,1],["z",0.109375,1],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))",0.109375,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[210,76]],"count":[[15,1]],"inputs":[["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) z) (cbrt.f64 (sin.f64 y))))","(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (*.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4/3) 2))))","(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 3) 3)))","(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","(fma.f64 (neg.f64 (sin.f64 y)) z (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 3))","(fma.f64 (cbrt.f64 (*.f64 (sin.f64 y) (neg.f64 z))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) z) 2)) (*.f64 x (cos.f64 y)))","(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 (*.f64 x (cbrt.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3)))","(-.f64 (*.f64 x (cos.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) z) (cbrt.f64 (sin.f64 y))))","(-.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 3) (*.f64 z (sin.f64 y)))","(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2/3) (cbrt.f64 (*.f64 z (sin.f64 y)))))","(-.f64 (*.f64 (pow.f64 (cos.f64 y) 2/3) (*.f64 x (cbrt.f64 (cos.f64 y)))) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"link":["."],"name":["Diagrams.ThreeD.Transform:aboutX from diagrams-lib-1.3.0.3, A"],"oracle":[51.94938895462202],"outputs":[["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))"]],"time":25.97900390625,"times":[["x",5.345947265625],["y",5.546142578125],["z",5.93310546875],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))",5.7548828125]],"type":"regimes"},{"compiler":[[12,8]],"inputs":[["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))"]],"stop":[["fuel",1]],"time":36.4169921875,"type":"simplify"},{"time":0.006103515625,"type":"soundness"},{"compiler":[[12,8]],"remove-preprocessing":[[]],"time":9.055908203125,"type":"end"}]
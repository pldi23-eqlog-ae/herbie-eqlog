[{"compiler":[[7,5]],"method":["search"],"sampling":[[12,0.7486577033996582,0.0009760856628417969,0.2503662109375],[11,0.7476816177368164,0.0019521713256835938,0.2503662109375],[10,0.7457294464111328,0.0039043426513671875,0.2503662109375],[9,0.7418251037597656,0.007808685302734375,0.2503662109375],[8,0.7340164184570313,0.01561737060546875,0.2503662109375],[7,0.7183990478515625,0.0312347412109375,0.2503662109375],[6,0.687164306640625,0.062469482421875,0.2503662109375],[5,0.62469482421875,0.12493896484375,0.2503662109375],[4,0.499755859375,0.2498779296875,0.2503662109375],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.24609375,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.052001953125,2],["body",256,"valid",226.534912109375,8256]],"time":234.47998046875,"type":"sample"},{"compiler":[[6,4]],"inputs":[["0"],["(*.f64 x (-.f64 x 1))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 x (-.f64 x 1))","(*.f64 x (+.f64 x -1))"]],"symmetry":[[]],"time":73.571044921875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 x (-.f64 x 1))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (-.f64 x 1))","(*.f64 x (+.f64 x -1))"]],"time":36.6298828125,"type":"simplify"},{"compiler":[[11,7]],"time":0.31005859375,"type":"eval"},{"alts":[["(*.f64 x (+.f64 x -1))","next",0.01171875]],"compiler":[[6,4],[6,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.01171875],"time":2.18896484375,"type":"prune"},{"compiler":[[11,7]],"locations":[["(*.f64 x (+.f64 x -1))",0.01171875,true]],"time":2.75390625,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 x (+.f64 x -1))","x","-inf",0.35107421875],["(*.f64 x (+.f64 x -1))","x","inf",0.406982421875],["(*.f64 x (+.f64 x -1))","x","0",0.37109375]],"time":1.175048828125,"type":"series"},{"count":[[1,69]],"inputs":[["(*.f64 x (+.f64 x -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 x -1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 x) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x x) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (+.f64 x -1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1)) (*.f64 (pow.f64 (+.f64 x -1) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (+.f64 x -1))) (pow.f64 (*.f64 x (+.f64 x -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (+.f64 x -1)) 2/3) (cbrt.f64 (*.f64 x (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (+.f64 x -1))) (pow.f64 (+.f64 x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 x -1) 2/3) x) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (+.f64 x -1)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x -1) 2/3) (*.f64 x (cbrt.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 4) x) (/.f64 -1 (-.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) -1) (/.f64 x (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 x 3) -1) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (/.f64 x (pow.f64 (fma.f64 x x (+.f64 1 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (/.f64 (+.f64 (pow.f64 x 3) -1) (pow.f64 (fma.f64 x x (+.f64 1 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (+.f64 x -1)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 x) x)) (neg.f64 (pow.f64 (*.f64 x (+.f64 x -1)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (neg.f64 (pow.f64 x 4))) (/.f64 1 (-.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) -1)) (*.f64 (pow.f64 (+.f64 x -1) 2/3) x)) (pow.f64 (fma.f64 x x (+.f64 1 x)) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (pow.f64 x 4) x) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (pow.f64 x 4/3) (neg.f64 x))) (-.f64 (pow.f64 x 2/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 4/3) (-.f64 (pow.f64 x 2/3) (neg.f64 x))) (-.f64 (pow.f64 x 2/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (*.f64 x (+.f64 x -1)) 2/3) (*.f64 0 (cbrt.f64 (*.f64 x (+.f64 x -1)))))) (+.f64 0 (cbrt.f64 (*.f64 x (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 4/3) (+.f64 (pow.f64 x 2/3) x)) (-.f64 (pow.f64 x 2/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (+.f64 x -1) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (-.f64 (pow.f64 x 4/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (neg.f64 (pow.f64 x 4))) (-.f64 -1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) -1)) (*.f64 (pow.f64 (+.f64 x -1) 2/3) x)) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (pow.f64 x 4) x) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (pow.f64 (fma.f64 x x (+.f64 1 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) -1)) (*.f64 (pow.f64 (+.f64 x -1) 2/3) x))) (neg.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 x 4) x) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))) (neg.f64 (pow.f64 (fma.f64 x x (+.f64 1 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 x (+.f64 x -1)) 2) (-.f64 (pow.f64 x 4) x))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 4) x) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 x (neg.f64 (pow.f64 x 4)))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 (pow.f64 x 4) x) (-.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 x -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (neg.f64 x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 5) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (pow.f64 x 4/3) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 4/3) (pow.f64 x 2/3) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (neg.f64 (pow.f64 x 2/3)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 x 2/3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) 1 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x -1 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 x (*.f64 x x))))))"]],"rules":[["egg-rr",69]],"time":39.651123046875,"type":"rewrite"},{"count":[[81,75]],"inputs":[["(*.f64 -1 x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(*.f64 x (+.f64 -1 x))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(*.f64 x (+.f64 -1 x))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(*.f64 x (+.f64 -1 x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(*.f64 x (+.f64 -1 x))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(*.f64 x (+.f64 -1 x))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(*.f64 x (+.f64 -1 x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(*.f64 x (+.f64 -1 x))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(*.f64 x (+.f64 -1 x))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(*.f64 x (+.f64 -1 x))"]],"time":71.509033203125,"type":"simplify"},{"compiler":[[807,501]],"time":11.782958984375,"type":"eval"},{"alts":[["(fma.f64 x x (neg.f64 x))","next",0]],"compiler":[[6,3],[6,3]],"count":[[76,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[75,1],"picked":[1,0]}],"min-error":[0],"time":12.48095703125,"type":"prune"},{"compiler":[[9,3]],"time":2.864990234375,"type":"localize"},{"compiler":[[1,1]],"time":0.10498046875,"type":"eval"},{"alts":[["(fma.f64 x x (neg.f64 x))","done",0]],"compiler":[[6,3]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.508056640625,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["(*.f64 x (-.f64 x 1))",0,1]],"compiler":[[2,1],[6,4],[16,9]],"count":[[3,1]],"inputs":[["(fma.f64 x x (neg.f64 x))","(*.f64 x (+.f64 x -1))","(*.f64 x (-.f64 x 1))"]],"link":["."],"name":["Statistics.Correlation.Kendall:numOfTiesBy from math-functions-0.1.5.2"],"oracle":[0.01171875],"outputs":[["(fma.f64 x x (neg.f64 x))"]],"time":6.032958984375,"times":[["x",2.635009765625],["(*.f64 x (-.f64 x 1))",2.75390625]],"type":"regimes"},{"compiler":[[6,3]],"inputs":[["(fma.f64 x x (neg.f64 x))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x x (neg.f64 x))","(*.f64 x (+.f64 x -1))"]],"stop":[["done",1]],"time":36.47412109375,"type":"simplify"},{"time":0.02880859375,"type":"soundness"},{"compiler":[[6,3]],"remove-preprocessing":[[]],"time":9.412109375,"type":"end"}]
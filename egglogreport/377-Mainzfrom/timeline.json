[{"compiler":[[36,28]],"method":["search"],"sampling":[[12,0.013157863396600827,0.16959023933396622,0.8172518972694329],[11,0.008771908931067218,0.21052581434561324,0.7807022767233196],[10,0.0058479392873781455,0.2573093286446384,0.7368427320679835],[9,0.0038986261915854303,0.3118900953268344,0.6842112784815801],[8,0.0,0.4210516286912265,0.5789483713087735],[7,0.0,0.561402171588302,0.43859782841169803],[6,0.0,0.7485362287844026,0.2514637712155974],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":97.68505859375,"type":"analyze"},{"outcomes":[["body",256,"invalid",1509.86083984375,16004],["body",512,"valid",829.675048828125,4506],["body",1024,"valid",489.078125,1780],["body",256,"valid",190.23193359375,1970]],"time":3041.364990234375,"type":"sample"},{"compiler":[[35,27]],"inputs":[["0","1","2","3"],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y)) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(-.f64 (sqrt.f64 (+.f64 z 1)) (-.f64 (-.f64 (sqrt.f64 z) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 x 1)) (-.f64 (sqrt.f64 x) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y)) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(-.f64 (sqrt.f64 (+.f64 z 1)) (-.f64 (-.f64 (sqrt.f64 z) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 x 1)) (-.f64 (sqrt.f64 x) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(-.f64 (sqrt.f64 (+.f64 z 1)) (-.f64 (-.f64 (sqrt.f64 z) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 x 1)) (-.f64 (sqrt.f64 x) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))","(-.f64 (sqrt.f64 (+.f64 z 1)) (-.f64 (-.f64 (sqrt.f64 z) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 x 1)) (-.f64 (sqrt.f64 x) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(-.f64 (sqrt.f64 (+.f64 z 1)) (-.f64 (-.f64 (sqrt.f64 z) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 x 1)) (-.f64 (sqrt.f64 x) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y)))","(-.f64 (sqrt.f64 (+.f64 z 1)) (-.f64 (-.f64 (sqrt.f64 z) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 x 1)) (-.f64 (sqrt.f64 x) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))","(-.f64 (sqrt.f64 (+.f64 z 1)) (-.f64 (-.f64 (sqrt.f64 z) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 x 1)) (-.f64 (sqrt.f64 x) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))))))"]],"symmetry":[[]],"time":75.51904296875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(-.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (-.f64 (sqrt.f64 z) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 y))))))) (-.f64 (sqrt.f64 y) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))))"]],"time":33.4599609375,"type":"simplify"},{"compiler":[[66,46]],"time":0.81298828125,"type":"eval"},{"alts":[["(-.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (-.f64 (sqrt.f64 z) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 y))))))) (-.f64 (sqrt.f64 y) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))))","fresh",57.349948147484874],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","next",4.416260013693683]],"compiler":[[35,27],[35,27],[35,27],[35,27]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[4.3971841029602325],"time":2.263916015625,"type":"prune"},{"compiler":[[142,87]],"locations":[["(-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))",2.102804505803071,true],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",2.899027654869683,true],["(-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))",3.554059958475697,true],["(-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))",3.848175480467402,true]],"time":33.34814453125,"type":"localize"},{"count":[[4,4]],"series":[["(-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))","y","-inf",0.48681640625],["(-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))","y","inf",0.6591796875],["(-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))","y","0",0.275146484375],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","x","-inf",0.89697265625],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","x","inf",0.68017578125],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","x","0",0.261962890625],["(-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))","t","-inf",0.58203125],["(-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))","t","inf",0.656005859375],["(-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))","t","0",0.294921875],["(-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))","z","-inf",0.68408203125],["(-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))","z","inf",1.15087890625],["(-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))","z","0",0.5009765625]],"time":7.287841796875,"type":"series"},{"count":[[4,292]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))","(-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))","(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","(-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (neg.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 z)) (sqrt.f64 (exp.f64 (log1p.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)) 1/2) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)) 0) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 z)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z))) (*.f64 1/2 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)) (*.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z))) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))) (neg.f64 (/.f64 (pow.f64 z 3/2) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (log1p.f64 z)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z))) (/.f64 z (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))) (/.f64 (pow.f64 z 3/2) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (sqrt.f64 z) (sqrt.f64 (exp.f64 (log1p.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) 0) (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (sqrt.f64 z)) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 z)))) (sqrt.f64 (sqrt.f64 z))) (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 z)))) (sqrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)) 2)) (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 z)))) (neg.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 z)))) (sqrt.f64 (sqrt.f64 z)))) (-.f64 (sqrt.f64 (sqrt.f64 z)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (sqrt.f64 z) (sqrt.f64 (exp.f64 (log1p.f64 z)))))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 z) (sqrt.f64 (exp.f64 (log1p.f64 z))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 z) (sqrt.f64 (exp.f64 (log1p.f64 z))))) (neg.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 z) (sqrt.f64 (exp.f64 (log1p.f64 z))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))))) (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (-.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))))) (neg.f64 (sqrt.f64 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 z)))) (sqrt.f64 (sqrt.f64 z))) (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 z)))) (neg.f64 (sqrt.f64 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))))) (sqrt.f64 (sqrt.f64 z))) (-.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))))) (sqrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (log1p.f64 z)) z) (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))))) (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))))) (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (pow.f64 z 3/2)) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (pow.f64 z 3/2))) 1) (/.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (pow.f64 z 3/2))) 2) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 z))) (+.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 z)))) (cbrt.f64 (sqrt.f64 z))))) (-.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 z)))) (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (pow.f64 z 3/2)) (/.f64 1 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (sqrt.f64 z) (sqrt.f64 (exp.f64 (log1p.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (pow.f64 z 3/2)) (/.f64 1 (-.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 z 3/2) (exp.f64 (*.f64 (log1p.f64 z) 3/2))) (/.f64 1 (neg.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))) (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (log1p.f64 z)) z) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (pow.f64 z 3/2)) 1) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 z)) z) 1) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (pow.f64 z 3/2)) 1) (-.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (pow.f64 z 3/2)) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))))) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 z)) z) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)))) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 z)) z) 1) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))) (pow.f64 z 3/2))) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (pow.f64 z 3/2)) 1) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 z 3/2) (exp.f64 (*.f64 (log1p.f64 z) 3/2))) 1) (*.f64 (neg.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 z)) z) 1) (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (pow.f64 z 3/2)) 1) (*.f64 (-.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 z 3/2) (exp.f64 (*.f64 (log1p.f64 z) 3/2))) (neg.f64 (-.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (exp.f64 (log1p.f64 z)) z)) (neg.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (pow.f64 z 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (pow.f64 z 3/2)) (-.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 z 3/2) (exp.f64 (*.f64 (log1p.f64 z) 3/2))) (neg.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)) 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (pow.f64 z 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (pow.f64 z 3/2))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)) 2))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 z 3/2) (exp.f64 (*.f64 (log1p.f64 z) 3/2))) 1) (neg.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (pow.f64 z 3/2)) (+.f64 z (-.f64 (exp.f64 (log1p.f64 z)) (*.f64 (neg.f64 (sqrt.f64 z)) (sqrt.f64 (exp.f64 (log1p.f64 z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (pow.f64 z 3/2)) (*.f64 1 (-.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (sqrt.f64 z) (sqrt.f64 (exp.f64 (log1p.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (sqrt.f64 z) (sqrt.f64 (exp.f64 (log1p.f64 z)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (sqrt.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 z)))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 z)))) (neg.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 z)))) (cbrt.f64 (exp.f64 (log1p.f64 z))) (neg.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (exp.f64 (log1p.f64 z))) (neg.f64 (sqrt.f64 z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 1/2) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 0) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 t)) (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))) (*.f64 1/2 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) (*.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))) (neg.f64 (/.f64 (pow.f64 t 3/2) (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (log1p.f64 t)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))) (/.f64 t (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))) (/.f64 (pow.f64 t 3/2) (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) 0) (sqrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (sqrt.f64 t)) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (sqrt.f64 (sqrt.f64 t))) (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (sqrt.f64 (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (neg.f64 (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (sqrt.f64 (sqrt.f64 t)))) (-.f64 (sqrt.f64 (sqrt.f64 t)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t)))))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t))))) (neg.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (sqrt.f64 (sqrt.f64 t))) (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (neg.f64 (sqrt.f64 (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))))) (neg.f64 (sqrt.f64 (sqrt.f64 t)))) (-.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))))) (neg.f64 (sqrt.f64 (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))))) (sqrt.f64 (sqrt.f64 t))) (-.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))))) (sqrt.f64 (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (log1p.f64 t)) t) (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))) (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) 1) (/.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) 2) (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))) (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 t))) (+.f64 (cbrt.f64 t) (*.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (cbrt.f64 (sqrt.f64 t))))) (-.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (cbrt.f64 (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) (/.f64 1 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) (/.f64 1 (-.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 t 3/2) (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (/.f64 1 (neg.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))) (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (log1p.f64 t)) t) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) (-.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 1) (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 t)) t) 1) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 1) (-.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 t)) t) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 t)) t) 1) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) (+.f64 t (-.f64 (exp.f64 (log1p.f64 t)) (*.f64 (neg.f64 (sqrt.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))) (pow.f64 t 3/2))) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))) (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) (*.f64 1 (-.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 t)) t) 1) (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 t 3/2) (exp.f64 (*.f64 (log1p.f64 t) 3/2))) 1) (*.f64 (neg.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 1) (*.f64 (-.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 1) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 t 3/2) (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (neg.f64 (-.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (exp.f64 (log1p.f64 t)) t)) (neg.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 t 3/2) (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (neg.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 t 3/2) (exp.f64 (*.f64 (log1p.f64 t) 3/2))) 1) (neg.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (cbrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (neg.f64 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (sqrt.f64 t)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1/2) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 0) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 1/2 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (*.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))) (neg.f64 (/.f64 (pow.f64 x 3/2) (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (/.f64 x (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))) (/.f64 (pow.f64 x 3/2) (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 x)))) (-.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))) (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (sqrt.f64 (sqrt.f64 x))) (-.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2))) 1) (/.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2))) 2) (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))) (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))) (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 x))))) (-.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (/.f64 1 (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))) (-.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3/2))) (/.f64 1 (neg.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (/.f64 1 (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))) (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) 1) (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) 1) (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 1) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 1) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))) (pow.f64 x 3/2))) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))) (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) 1) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) 1) (*.f64 (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 1) (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3/2))) 1) (*.f64 (neg.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)) (neg.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3/2))) (neg.f64 (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3/2))) (neg.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3/2))) 1) (neg.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (+.f64 x (-.f64 (exp.f64 (log1p.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (*.f64 1 (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (exp.f64 (log1p.f64 x))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (exp.f64 (log1p.f64 x))) (neg.f64 (sqrt.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (neg.f64 (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 y)) (sqrt.f64 (exp.f64 (log1p.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 1/2) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 0) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))) (*.f64 1/2 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) (*.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 y)) (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 y)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))) (neg.f64 (/.f64 (pow.f64 y 3/2) (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (log1p.f64 y)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))) (/.f64 y (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))) (/.f64 (pow.f64 y 3/2) (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (sqrt.f64 y) (sqrt.f64 (exp.f64 (log1p.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) 0) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (sqrt.f64 y)) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (sqrt.f64 y)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))))) (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 y)))) (sqrt.f64 (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 2)) (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 y)))) (neg.f64 (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (sqrt.f64 y) (sqrt.f64 (exp.f64 (log1p.f64 y)))))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 y) (sqrt.f64 (exp.f64 (log1p.f64 y))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 y) (sqrt.f64 (exp.f64 (log1p.f64 y))))) (neg.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 y) (sqrt.f64 (exp.f64 (log1p.f64 y))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))))) (sqrt.f64 (sqrt.f64 y))) (-.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))))) (sqrt.f64 (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))))) (neg.f64 (sqrt.f64 (sqrt.f64 y)))) (-.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))))) (neg.f64 (sqrt.f64 (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 y)))) (sqrt.f64 (sqrt.f64 y))) (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 y)))) (neg.f64 (sqrt.f64 (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (log1p.f64 y)) y) (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y))))) (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2)) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y))))) (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2))) 1) (/.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2))) 2) (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 y))) (+.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 y)))) (cbrt.f64 (sqrt.f64 y))))) (-.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 y)))) (cbrt.f64 (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2)) (/.f64 1 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (sqrt.f64 y) (sqrt.f64 (exp.f64 (log1p.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (sqrt.f64 (sqrt.f64 y)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 y)))))) (-.f64 (sqrt.f64 (sqrt.f64 y)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 y 3/2) (exp.f64 (*.f64 (log1p.f64 y) 3/2))) (/.f64 1 (neg.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2)) (/.f64 1 (-.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y))) (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (log1p.f64 y)) y) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2)) (-.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2)) 1) (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2)) 1) (-.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 y)) y) 1) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 y)) y) 1) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 y)) y) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)))) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2)) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y))))) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2)) (+.f64 y (-.f64 (exp.f64 (log1p.f64 y)) (*.f64 (neg.f64 (sqrt.f64 y)) (sqrt.f64 (exp.f64 (log1p.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y))) (pow.f64 y 3/2))) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y))) (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2)) 1) (*.f64 (-.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 y)) y) 1) (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 y 3/2) (exp.f64 (*.f64 (log1p.f64 y) 3/2))) 1) (*.f64 (neg.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2)) 1) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2)) (*.f64 1 (-.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (exp.f64 (log1p.f64 y)) y)) (neg.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 y 3/2) (exp.f64 (*.f64 (log1p.f64 y) 3/2))) (neg.f64 (-.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 y 3/2) (exp.f64 (*.f64 (log1p.f64 y) 3/2))) (neg.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 y 3/2) (exp.f64 (*.f64 (log1p.f64 y) 3/2))) 1) (neg.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 2))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (sqrt.f64 y) (sqrt.f64 (exp.f64 (log1p.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (sqrt.f64 y) (sqrt.f64 (exp.f64 (log1p.f64 y)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 y)))) (cbrt.f64 (exp.f64 (log1p.f64 y))) (neg.f64 (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 y)))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 y)))) (neg.f64 (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (exp.f64 (log1p.f64 y))) (neg.f64 (sqrt.f64 y)))))))"]],"rules":[["egg-rr",73],["egg-rr",73],["egg-rr",73],["egg-rr",73]],"time":63.779052734375,"type":"rewrite"},{"count":[[296,293]],"inputs":[["1","1","1","1"]],"method":["egg-herbie"],"outputs":[["1","1","1","1"]],"time":41.27490234375,"type":"simplify"},{"compiler":[[12909,5984]],"time":92.43798828125,"type":"eval"},{"alts":[["(+.f64 (+.f64 (+.f64 (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",25.7248194987369],["(+.f64 (+.f64 (+.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",30.402371274526992],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",27.603834908629064],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","done",4.416260013693683],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))","fresh",26.416880777404],["(+.f64 (+.f64 (+.f64 (*.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 x))))) (-.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 x)))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",29.66471887254033],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (/.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))) (pow.f64 z 3/2))) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",29.452184941368273],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) 1) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",26.900923922324473],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))) (/.f64 (pow.f64 z 3/2) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",23.121751145439703],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (/.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 y)) y) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)))) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))) 2))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",31.95336496679855],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))) 2)))","fresh",22.778499075157708],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","next",22.620010797801072]],"compiler":[[50,35],[41,29],[63,44],[35,27],[51,31],[55,35],[89,38],[29,23],[63,36],[53,33],[67,39],[63,44],[50,35],[41,29],[63,44],[51,31],[55,35],[89,38],[29,23],[63,36],[53,33],[67,39],[63,44]],"count":[[295,12]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[293,11],"picked":[1,1]}],"min-error":[4.240254825313489],"time":113.864013671875,"type":"prune"},{"compiler":[[321,145]],"locations":[["(cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))",7.421270053584352,true],["(sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))",12.788439031916973,true],["(-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))",26.595831463903338,true],["(-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))",26.88471335227373,true]],"time":81.463134765625,"type":"localize"},{"count":[[4,17]],"series":[["(cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))","t","-inf",1.797119140625],["(cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))","t","inf",1.18408203125],["(cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))","t","0",0.93701171875],["(sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))","t","-inf",1.30517578125],["(sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))","t","inf",0.60302734375],["(sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))","t","0",0.3759765625],["(-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))","t","-inf",1.033203125],["(-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))","t","inf",0.536865234375],["(-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))","t","0",0.3349609375],["(-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))","t","-inf",1.006103515625],["(-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))","t","inf",0.583984375],["(-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))","t","0",0.573974609375]],"time":10.491943359375,"type":"series"},{"count":[[4,172]],"inputs":[["(-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))","(-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))","(sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))","(cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 0) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 1/2) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) (*.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))) (*.f64 1/2 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 t)) (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (sqrt.f64 t)) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) 0) (sqrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (sqrt.f64 (sqrt.f64 t))) (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (sqrt.f64 (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (neg.f64 (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t)))))) (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))))) (sqrt.f64 (sqrt.f64 t))) (-.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))))) (sqrt.f64 (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))))) (neg.f64 (sqrt.f64 (sqrt.f64 t)))) (-.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))))) (neg.f64 (sqrt.f64 (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (sqrt.f64 (sqrt.f64 t))) (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (neg.f64 (sqrt.f64 (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 t))) (+.f64 (cbrt.f64 t) (cbrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))) (-.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (cbrt.f64 (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))) (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2/3) (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (sqrt.f64 (sqrt.f64 t)))) (-.f64 (sqrt.f64 (sqrt.f64 t)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t))))) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) (+.f64 t (-.f64 (exp.f64 (log1p.f64 t)) (*.f64 (neg.f64 (sqrt.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) (+.f64 (exp.f64 (log1p.f64 t)) (fma.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t))) t)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (cbrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (neg.f64 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (neg.f64 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) 1 (neg.f64 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))))) (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))))) (neg.f64 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (log1p.f64 t))) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (neg.f64 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 t)) (neg.f64 (cbrt.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (sqrt.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 t))) (cbrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (sqrt.f64 t))) (sqrt.f64 (sqrt.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 t)) (neg.f64 (sqrt.f64 (sqrt.f64 t))) (sqrt.f64 (exp.f64 (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 t 3/2)) (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) (*.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 0) (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 1/2) (*.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 t 3/2)) (*.f64 (neg.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) (*.f64 0 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) (*.f64 1/2 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (pow.f64 t 3/2)) (neg.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (pow.f64 t 3/2) (pow.f64 (exp.f64 3/2) (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) 0) (pow.f64 t 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 2/3)) (pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) (pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (sqrt.f64 (pow.f64 t 3/2))) (-.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (sqrt.f64 (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (pow.f64 t 3/2) (pow.f64 (exp.f64 3/2) (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 2/3) (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (pow.f64 t 3/2) (pow.f64 (exp.f64 3/2) (log1p.f64 t)))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 (log1p.f64 t)) (fma.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t))) t)) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (pow.f64 t 3/2) (pow.f64 (exp.f64 3/2) (log1p.f64 t))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (pow.f64 t 3/2) (pow.f64 (exp.f64 3/2) (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (exp.f64 (log1p.f64 t)) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 t)) t (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (pow.f64 t 3/2)) (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) 1 (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 t) (neg.f64 t) (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 t 3/2) (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)) (*.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)) 0) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)) 1/2) (*.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)) (*.f64 0 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))) (*.f64 1/2 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))) (sqrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))) (cbrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)) (cbrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 t))) (sqrt.f64 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (sqrt.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (*.f64 (cbrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (cbrt.f64 (sqrt.f64 t))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (cbrt.f64 (sqrt.f64 t)))) (fabs.f64 (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))) (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 t)))) (sqrt.f64 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))))) (fabs.f64 (*.f64 (cbrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))) (fabs.f64 (cbrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (fabs.f64 (sqrt.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)) 0) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)) (pow.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (exp.f64 (log1p.f64 t)) t) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (exp.f64 (log1p.f64 t)) t) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (exp.f64 (log1p.f64 t)) t) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (exp.f64 (log1p.f64 t)) t) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) (*.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) 0) (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) 1/2) (*.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) (*.f64 0 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))) (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))) (*.f64 1/2 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))) (cbrt.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 2/3)) (cbrt.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (-.f64 (pow.f64 t 3/2) (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 2/3)) (pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (-.f64 (pow.f64 t 3/2) (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))))))"]],"rules":[["egg-rr",21],["egg-rr",44],["egg-rr",50],["egg-rr",57]],"time":41.051025390625,"type":"rewrite"},{"count":[[189,203]],"inputs":[["1","(-.f64 1 (pow.f64 t 3/2))","(-.f64 (+.f64 1 (*.f64 3/2 t)) (pow.f64 t 3/2))","(-.f64 (+.f64 1 (+.f64 (*.f64 3/2 t) (*.f64 3/8 (pow.f64 t 2)))) (pow.f64 t 3/2))","(-.f64 (+.f64 1 (+.f64 (*.f64 3/2 t) (+.f64 (*.f64 -1/16 (pow.f64 t 3)) (*.f64 3/8 (pow.f64 t 2))))) (pow.f64 t 3/2))","(*.f64 3/2 (sqrt.f64 t))","(+.f64 (*.f64 3/2 (sqrt.f64 t)) (*.f64 3/8 (sqrt.f64 (/.f64 1 t))))","(+.f64 (*.f64 3/2 (sqrt.f64 t)) (+.f64 (*.f64 -1/16 (sqrt.f64 (/.f64 1 (pow.f64 t 3)))) (*.f64 3/8 (sqrt.f64 (/.f64 1 t)))))","(+.f64 (*.f64 3/2 (sqrt.f64 t)) (+.f64 (*.f64 3/128 (sqrt.f64 (/.f64 1 (pow.f64 t 5)))) (+.f64 (*.f64 -1/16 (sqrt.f64 (/.f64 1 (pow.f64 t 3)))) (*.f64 3/8 (sqrt.f64 (/.f64 1 t))))))","(*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) t))","(+.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) t)) (*.f64 3/8 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 2))))","(+.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) t)) (+.f64 (*.f64 3/8 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 2))) (*.f64 -1/16 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 3)))))","(+.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) t)) (+.f64 (*.f64 3/8 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 2))) (+.f64 (*.f64 3/128 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 4))) (*.f64 -1/16 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 3))))))","(pow.f64 (-.f64 1 (pow.f64 t 3/2)) 1/3)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/9) t)) (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 1/3))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/9) t)) (+.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/3) (*.f64 (pow.f64 t 2) (-.f64 3/8 (*.f64 3/4 (pow.f64 (/.f64 1 (-.f64 1 (pow.f64 t 3/2))) 1/9))))))))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/3) (*.f64 (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 5)) 1/9) (-.f64 3/8 (*.f64 3/4 (pow.f64 (/.f64 1 (-.f64 1 (pow.f64 t 3/2))) 1/9)))) (+.f64 1/16 (*.f64 1/8 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/3)))) (pow.f64 t 3)))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/9) t)) (+.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/3) (*.f64 (pow.f64 t 2) (-.f64 3/8 (*.f64 3/4 (pow.f64 (/.f64 1 (-.f64 1 (pow.f64 t 3/2))) 1/9)))))))))"]],"method":["egg-herbie"],"outputs":[["1","(-.f64 1 (pow.f64 t 3/2))","(-.f64 (+.f64 1 (*.f64 3/2 t)) (pow.f64 t 3/2))","(-.f64 (fma.f64 t 3/2 1) (pow.f64 t 3/2))","(-.f64 (+.f64 1 (+.f64 (*.f64 3/2 t) (*.f64 3/8 (pow.f64 t 2)))) (pow.f64 t 3/2))","(-.f64 (+.f64 (fma.f64 t 3/2 1) (*.f64 3/8 (*.f64 t t))) (pow.f64 t 3/2))","(-.f64 (+.f64 1 (+.f64 (*.f64 3/2 t) (+.f64 (*.f64 -1/16 (pow.f64 t 3)) (*.f64 3/8 (pow.f64 t 2))))) (pow.f64 t 3/2))","(-.f64 (+.f64 (fma.f64 t 3/2 1) (fma.f64 -1/16 (pow.f64 t 3) (*.f64 3/8 (*.f64 t t)))) (pow.f64 t 3/2))","(*.f64 3/2 (sqrt.f64 t))","(+.f64 (*.f64 3/2 (sqrt.f64 t)) (*.f64 3/8 (sqrt.f64 (/.f64 1 t))))","(fma.f64 3/2 (sqrt.f64 t) (*.f64 3/8 (sqrt.f64 (/.f64 1 t))))","(+.f64 (*.f64 3/2 (sqrt.f64 t)) (+.f64 (*.f64 -1/16 (sqrt.f64 (/.f64 1 (pow.f64 t 3)))) (*.f64 3/8 (sqrt.f64 (/.f64 1 t)))))","(fma.f64 (sqrt.f64 t) 3/2 (fma.f64 -1/16 (sqrt.f64 (pow.f64 t -3)) (*.f64 3/8 (sqrt.f64 (/.f64 1 t)))))","(+.f64 (*.f64 3/2 (sqrt.f64 t)) (+.f64 (*.f64 3/128 (sqrt.f64 (/.f64 1 (pow.f64 t 5)))) (+.f64 (*.f64 -1/16 (sqrt.f64 (/.f64 1 (pow.f64 t 3)))) (*.f64 3/8 (sqrt.f64 (/.f64 1 t))))))","(fma.f64 (sqrt.f64 t) 3/2 (fma.f64 (sqrt.f64 (pow.f64 t -5)) 3/128 (fma.f64 -1/16 (sqrt.f64 (pow.f64 t -3)) (*.f64 3/8 (sqrt.f64 (/.f64 1 t))))))","(*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) t))","(/.f64 (*.f64 3/2 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) t)","(+.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) t)) (*.f64 3/8 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 2))))","(fma.f64 3/2 (/.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))) t) (*.f64 (*.f64 3/8 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) (pow.f64 t -2)))","(+.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) t)) (+.f64 (*.f64 3/8 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 2))) (*.f64 -1/16 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 3)))))","(fma.f64 3/2 (/.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))) t) (fma.f64 3/8 (*.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))) (pow.f64 t -2)) (*.f64 (*.f64 -1/16 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) (pow.f64 t -3))))","(+.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) t)) (+.f64 (*.f64 3/8 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 2))) (+.f64 (*.f64 3/128 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 4))) (*.f64 -1/16 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 3))))))","(fma.f64 3/2 (/.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))) t) (fma.f64 3/8 (*.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))) (pow.f64 t -2)) (fma.f64 3/128 (/.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))) (pow.f64 t 4)) (*.f64 (*.f64 -1/16 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) (pow.f64 t -3)))))","(pow.f64 (-.f64 1 (pow.f64 t 3/2)) 1/3)","(cbrt.f64 (-.f64 1 (pow.f64 t 3/2)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/9) t)) (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 1/3))","(fma.f64 1/2 (*.f64 (pow.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) -2) 1/9) t) (cbrt.f64 (-.f64 1 (pow.f64 t 3/2))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/9) t)) (+.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/3) (*.f64 (pow.f64 t 2) (-.f64 3/8 (*.f64 3/4 (pow.f64 (/.f64 1 (-.f64 1 (pow.f64 t 3/2))) 1/9))))))))","(fma.f64 1/2 (*.f64 (pow.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) -2) 1/9) t) (fma.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) -2)) (*.f64 t t)) (+.f64 3/8 (*.f64 -3/4 (pow.f64 (/.f64 -1 (+.f64 -1 (pow.f64 t 3/2))) 1/9)))) 1/3 (cbrt.f64 (-.f64 1 (pow.f64 t 3/2)))))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/3) (*.f64 (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 5)) 1/9) (-.f64 3/8 (*.f64 3/4 (pow.f64 (/.f64 1 (-.f64 1 (pow.f64 t 3/2))) 1/9)))) (+.f64 1/16 (*.f64 1/8 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/3)))) (pow.f64 t 3)))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/9) t)) (+.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/3) (*.f64 (pow.f64 t 2) (-.f64 3/8 (*.f64 3/4 (pow.f64 (/.f64 1 (-.f64 1 (pow.f64 t 3/2))) 1/9)))))))))","(fma.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) -2)) (*.f64 (fma.f64 (pow.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) -5) 1/9) (+.f64 3/8 (*.f64 -3/4 (pow.f64 (/.f64 -1 (+.f64 -1 (pow.f64 t 3/2))) 1/9))) (fma.f64 1/8 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) -2)) 1/16)) (pow.f64 t 3))) -1/3 (fma.f64 1/2 (*.f64 (pow.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) -2) 1/9) t) (fma.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) -2)) (*.f64 t t)) (+.f64 3/8 (*.f64 -3/4 (pow.f64 (/.f64 -1 (+.f64 -1 (pow.f64 t 3/2))) 1/9)))) 1/3 (cbrt.f64 (-.f64 1 (pow.f64 t 3/2))))))"]],"time":70.85791015625,"type":"simplify"},{"compiler":[[13624,6749]],"time":104.47705078125,"type":"eval"},{"alts":[["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) 1) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",26.900923922324473],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (*.f64 3/2 (sqrt.f64 t)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","fresh",40.82921651060048],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (/.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 y)) y) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)))) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))) 2))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",31.95336496679855],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 t))) (+.f64 (cbrt.f64 t) (cbrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))) (-.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (cbrt.f64 (sqrt.f64 t)))) 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","fresh",26.85800973495353],["(+.f64 (+.f64 (+.f64 (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",25.7248194987369],["(+.f64 (+.f64 (+.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",30.402371274526992],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","next",22.527449632096125],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","done",4.416260013693683],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",27.603834908629064],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))","fresh",26.416880777404],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 1 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","fresh",25.08832432514421],["(+.f64 (+.f64 (+.f64 (*.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 x))))) (-.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 x)))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",29.66471887254033],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (/.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))) (pow.f64 z 3/2))) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",29.452184941368273],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))) 2)))","fresh",22.778499075157708],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) (+.f64 (exp.f64 (log1p.f64 t)) (fma.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t))) t))) 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","fresh",22.743529075437806]],"compiler":[[29,23],[58,40],[53,33],[81,52],[50,35],[41,29],[66,42],[35,27],[63,44],[51,31],[57,42],[55,35],[89,38],[67,39],[78,52],[29,23],[58,40],[53,33],[81,52],[50,35],[41,29],[66,42],[63,44],[51,31],[57,42],[55,35],[89,38],[67,39],[78,52]],"count":[[215,15]],"kept":[{"done":[1,1],"fresh":[10,9],"new":[203,5],"picked":[1,0]}],"min-error":[4.2188508043678326],"time":82.8759765625,"type":"prune"},{"compiler":[[331,133]],"locations":[["(cbrt.f64 (fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2))))",7.189209690243313,true],["(sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))",12.788439031916973,false],["(fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2)))",22.345726952594,true],["(-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))",26.88471335227373,false]],"time":81.803955078125,"type":"localize"},{"count":[[2,24]],"series":[["(cbrt.f64 (fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2))))","t","-inf",2.763916015625],["(cbrt.f64 (fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2))))","t","inf",2.06396484375],["(cbrt.f64 (fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2))))","t","0",0.301025390625],["(fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2)))","t","-inf",0.8740234375],["(fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2)))","t","inf",1.526123046875],["(fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2)))","t","0",0.27783203125]],"time":8.046142578125,"type":"series"},{"count":[[2,70]],"inputs":[["(fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2)))","(cbrt.f64 (fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 0) (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 1/2) (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) (*.f64 0 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) (*.f64 1/2 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 t 3/2)) (exp.f64 (*.f64 (log1p.f64 t) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (pow.f64 t 3/2) (exp.f64 (*.f64 (log1p.f64 t) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 2/3)) (pow.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 2/3)) (pow.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 2/3)) (cbrt.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 (log1p.f64 t)) (-.f64 t (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (cbrt.f64 (neg.f64 (pow.f64 t 3/2)))))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (cbrt.f64 (neg.f64 (pow.f64 t 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 t (-.f64 (exp.f64 (log1p.f64 t)) (*.f64 (cbrt.f64 (neg.f64 (pow.f64 t 3/2))) (sqrt.f64 (exp.f64 (log1p.f64 t)))))) (+.f64 (cbrt.f64 (neg.f64 (pow.f64 t 3/2))) (sqrt.f64 (exp.f64 (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 (log1p.f64 t)) (+.f64 t (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (cbrt.f64 (pow.f64 t 3/2))))) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (cbrt.f64 (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) (pow.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 2/3) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (pow.f64 t 3/2) (exp.f64 (*.f64 (log1p.f64 t) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (log1p.f64 t))) (*.f64 (pow.f64 (exp.f64 (log1p.f64 t)) 2/3) (sqrt.f64 (exp.f64 (log1p.f64 t)))) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (exp.f64 (log1p.f64 t)) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (exp.f64 (log1p.f64 t)) (+.f64 1 1/4)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 (log1p.f64 t)) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))))) (cbrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (cbrt.f64 (neg.f64 (pow.f64 t 3/2))) (exp.f64 (*.f64 (log1p.f64 t) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (pow.f64 t 3/2))) t (exp.f64 (*.f64 (log1p.f64 t) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 t 3/2)) (neg.f64 t) (exp.f64 (*.f64 (log1p.f64 t) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) 1 (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 t 3/2) -1 (exp.f64 (*.f64 (log1p.f64 t) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (pow.f64 t 3/2)) (exp.f64 (*.f64 (log1p.f64 t) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 t 3/2) (exp.f64 (*.f64 (log1p.f64 t) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 t 3/2)) 1 (exp.f64 (*.f64 (log1p.f64 t) 3/2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) 0) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) (*.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) 1/2) (*.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) (*.f64 0 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) (*.f64 1/2 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 2/3)) (pow.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 2/3)) (cbrt.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))))))"]],"rules":[["egg-rr",21],["egg-rr",49]],"time":26.425048828125,"type":"rewrite"},{"count":[[94,117]],"inputs":[["(-.f64 1 (pow.f64 t 3/2))","(-.f64 (+.f64 1 (*.f64 3/2 t)) (pow.f64 t 3/2))","(-.f64 (+.f64 1 (+.f64 (*.f64 3/2 t) (*.f64 3/8 (pow.f64 t 2)))) (pow.f64 t 3/2))","(-.f64 (+.f64 1 (+.f64 (*.f64 3/2 t) (+.f64 (*.f64 -1/16 (pow.f64 t 3)) (*.f64 3/8 (pow.f64 t 2))))) (pow.f64 t 3/2))","(-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2))","(-.f64 (+.f64 (sqrt.f64 (pow.f64 t 3)) (+.f64 (sqrt.f64 t) (*.f64 1/2 (sqrt.f64 t)))) (pow.f64 (/.f64 1 t) -3/2))","(-.f64 (+.f64 (*.f64 -1/8 (sqrt.f64 (/.f64 1 t))) (+.f64 (*.f64 1/2 (sqrt.f64 (/.f64 1 t))) (+.f64 (sqrt.f64 (pow.f64 t 3)) (+.f64 (sqrt.f64 t) (*.f64 1/2 (sqrt.f64 t)))))) (pow.f64 (/.f64 1 t) -3/2))","(-.f64 (+.f64 (*.f64 -1/8 (sqrt.f64 (/.f64 1 t))) (+.f64 (*.f64 1/16 (sqrt.f64 (/.f64 1 (pow.f64 t 3)))) (+.f64 (*.f64 1/2 (sqrt.f64 (/.f64 1 t))) (+.f64 (sqrt.f64 (pow.f64 t 3)) (+.f64 (*.f64 -1/8 (sqrt.f64 (/.f64 1 (pow.f64 t 3)))) (+.f64 (sqrt.f64 t) (*.f64 1/2 (sqrt.f64 t)))))))) (pow.f64 (/.f64 1 t) -3/2))","(-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))","(-.f64 (+.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) t))) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))","(-.f64 (+.f64 (*.f64 -1/8 (*.f64 (/.f64 1 (pow.f64 t 2)) (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) (+.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (+.f64 (*.f64 1/2 (*.f64 (/.f64 1 (pow.f64 t 2)) (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) t))))) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/16 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 1/8 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) (pow.f64 t 3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 1 (pow.f64 t 2)) (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) (+.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (+.f64 (*.f64 1/2 (*.f64 (/.f64 1 (pow.f64 t 2)) (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) t)))))) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))","(pow.f64 (-.f64 1 (pow.f64 t 3/2)) 1/3)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/9) t)) (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 1/3))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/9) t)) (+.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/3) (*.f64 (pow.f64 t 2) (-.f64 3/8 (*.f64 3/4 (pow.f64 (/.f64 1 (-.f64 1 (pow.f64 t 3/2))) 1/9))))))))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/3) (*.f64 (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 5)) 1/9) (-.f64 3/8 (*.f64 3/4 (pow.f64 (/.f64 1 (-.f64 1 (pow.f64 t 3/2))) 1/9)))) (+.f64 1/16 (*.f64 1/8 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/3)))) (pow.f64 t 3)))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/9) t)) (+.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/3) (*.f64 (pow.f64 t 2) (-.f64 3/8 (*.f64 3/4 (pow.f64 (/.f64 1 (-.f64 1 (pow.f64 t 3/2))) 1/9)))))))))","(pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 2)) 1/9) (/.f64 (+.f64 (sqrt.f64 (pow.f64 t 3)) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) t))) (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (+.f64 (*.f64 -1/8 (sqrt.f64 (pow.f64 t 3))) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2))) 1/9) (pow.f64 (+.f64 (sqrt.f64 (pow.f64 t 3)) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) 2)))) (pow.f64 t 2)) (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 2)) 1/3))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 2)) 1/9) (/.f64 (+.f64 (sqrt.f64 (pow.f64 t 3)) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) t))) (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 1/3)))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (+.f64 (*.f64 -1/8 (sqrt.f64 (pow.f64 t 3))) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2))) 1/9) (pow.f64 (+.f64 (sqrt.f64 (pow.f64 t 3)) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) 2)))) (pow.f64 t 2)) (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 2)) 1/3))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 2)) 1/9) (/.f64 (+.f64 (sqrt.f64 (pow.f64 t 3)) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) t))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 2)) 1/3) (/.f64 (-.f64 (+.f64 (*.f64 1/16 (sqrt.f64 (pow.f64 t 3))) (*.f64 -1/8 (sqrt.f64 (pow.f64 t 3)))) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 2)) 1/3) (pow.f64 (+.f64 (sqrt.f64 (pow.f64 t 3)) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) 3))) (*.f64 2/3 (*.f64 (*.f64 (-.f64 (+.f64 (*.f64 -1/8 (sqrt.f64 (pow.f64 t 3))) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2))) 1/9) (pow.f64 (+.f64 (sqrt.f64 (pow.f64 t 3)) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) 2)))) (+.f64 (sqrt.f64 (pow.f64 t 3)) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3))))) (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 5)) 1/9))))) (pow.f64 t 3)))) (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 1/3))))","(pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 1/3)","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 2)) 1/9) (/.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) t))) (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 1/3))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 2)) 1/9) (/.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) t))) (+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (+.f64 (*.f64 -1/8 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))) 1/9) (pow.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) 2)))) (pow.f64 t 2)) (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 2)) 1/3))) (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 1/3)))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 2)) 1/3) (/.f64 (-.f64 (+.f64 (*.f64 -1/16 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 1/8 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 2)) 1/3) (pow.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) 3))) (*.f64 2/3 (*.f64 (*.f64 (-.f64 (+.f64 (*.f64 -1/8 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))) 1/9) (pow.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) 2)))) (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))))) (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 5)) 1/9))))) (pow.f64 t 3)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 2)) 1/9) (/.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) t))) (+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (+.f64 (*.f64 -1/8 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))) 1/9) (pow.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) 2)))) (pow.f64 t 2)) (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 2)) 1/3))) (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 1/3))))"]],"method":["egg-herbie"],"outputs":[["(-.f64 1 (pow.f64 t 3/2))","(-.f64 (+.f64 1 (*.f64 3/2 t)) (pow.f64 t 3/2))","(+.f64 1 (fma.f64 t 3/2 (neg.f64 (pow.f64 t 3/2))))","(-.f64 (+.f64 1 (+.f64 (*.f64 3/2 t) (*.f64 3/8 (pow.f64 t 2)))) (pow.f64 t 3/2))","(-.f64 (+.f64 1 (fma.f64 3/2 t (*.f64 3/8 (*.f64 t t)))) (pow.f64 t 3/2))","(-.f64 (+.f64 1 (+.f64 (*.f64 3/2 t) (+.f64 (*.f64 -1/16 (pow.f64 t 3)) (*.f64 3/8 (pow.f64 t 2))))) (pow.f64 t 3/2))","(-.f64 (+.f64 1 (fma.f64 3/2 t (fma.f64 -1/16 (pow.f64 t 3) (*.f64 3/8 (*.f64 t t))))) (pow.f64 t 3/2))","(-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2))","(-.f64 (pow.f64 t 3/2) (pow.f64 (/.f64 1 t) -3/2))","(-.f64 (+.f64 (sqrt.f64 (pow.f64 t 3)) (+.f64 (sqrt.f64 t) (*.f64 1/2 (sqrt.f64 t)))) (pow.f64 (/.f64 1 t) -3/2))","(+.f64 (pow.f64 t 3/2) (fma.f64 3/2 (sqrt.f64 t) (neg.f64 (pow.f64 (/.f64 1 t) -3/2))))","(-.f64 (+.f64 (*.f64 -1/8 (sqrt.f64 (/.f64 1 t))) (+.f64 (*.f64 1/2 (sqrt.f64 (/.f64 1 t))) (+.f64 (sqrt.f64 (pow.f64 t 3)) (+.f64 (sqrt.f64 t) (*.f64 1/2 (sqrt.f64 t)))))) (pow.f64 (/.f64 1 t) -3/2))","(+.f64 (*.f64 (sqrt.f64 (/.f64 1 t)) 3/8) (+.f64 (pow.f64 t 3/2) (fma.f64 3/2 (sqrt.f64 t) (neg.f64 (pow.f64 (/.f64 1 t) -3/2)))))","(-.f64 (+.f64 (*.f64 -1/8 (sqrt.f64 (/.f64 1 t))) (+.f64 (*.f64 1/16 (sqrt.f64 (/.f64 1 (pow.f64 t 3)))) (+.f64 (*.f64 1/2 (sqrt.f64 (/.f64 1 t))) (+.f64 (sqrt.f64 (pow.f64 t 3)) (+.f64 (*.f64 -1/8 (sqrt.f64 (/.f64 1 (pow.f64 t 3)))) (+.f64 (sqrt.f64 t) (*.f64 1/2 (sqrt.f64 t)))))))) (pow.f64 (/.f64 1 t) -3/2))","(-.f64 (fma.f64 -1/8 (sqrt.f64 (/.f64 1 t)) (fma.f64 1/16 (sqrt.f64 (pow.f64 t -3)) (fma.f64 1/2 (sqrt.f64 (/.f64 1 t)) (+.f64 (pow.f64 t 3/2) (fma.f64 -1/8 (sqrt.f64 (pow.f64 t -3)) (*.f64 3/2 (sqrt.f64 t))))))) (pow.f64 (/.f64 1 t) -3/2))","(-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))","(-.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))))","(-.f64 (+.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) t))) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))","(-.f64 (-.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (/.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (/.f64 t -3/2))) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))))","(-.f64 (+.f64 (*.f64 -1/8 (*.f64 (/.f64 1 (pow.f64 t 2)) (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) (+.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (+.f64 (*.f64 1/2 (*.f64 (/.f64 1 (pow.f64 t 2)) (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) t))))) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))","(-.f64 (fma.f64 -1/8 (*.f64 (pow.f64 t -2) (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3)))) (-.f64 (*.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (+.f64 1 (/.f64 1/2 (*.f64 t t)))) (/.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (/.f64 t -3/2)))) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/16 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 1/8 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) (pow.f64 t 3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 1 (pow.f64 t 2)) (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) (+.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (+.f64 (*.f64 1/2 (*.f64 (/.f64 1 (pow.f64 t 2)) (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) t)))))) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))","(-.f64 (-.f64 (fma.f64 -1/8 (*.f64 (pow.f64 t -2) (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3)))) (-.f64 (*.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (+.f64 1 (/.f64 1/2 (*.f64 t t)))) (/.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (/.f64 t -3/2)))) (*.f64 (*.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) 1/16) (pow.f64 t -3))) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))))","(pow.f64 (-.f64 1 (pow.f64 t 3/2)) 1/3)","(cbrt.f64 (-.f64 1 (pow.f64 t 3/2)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/9) t)) (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 1/3))","(fma.f64 1/2 (*.f64 (pow.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) -2) 1/9) t) (cbrt.f64 (-.f64 1 (pow.f64 t 3/2))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/9) t)) (+.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/3) (*.f64 (pow.f64 t 2) (-.f64 3/8 (*.f64 3/4 (pow.f64 (/.f64 1 (-.f64 1 (pow.f64 t 3/2))) 1/9))))))))","(+.f64 (fma.f64 1/2 (*.f64 (pow.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) -2) 1/9) t) (cbrt.f64 (-.f64 1 (pow.f64 t 3/2)))) (*.f64 1/3 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) -2)) (*.f64 t t)) (+.f64 3/8 (*.f64 -3/4 (pow.f64 (/.f64 -1 (fma.f64 (sqrt.f64 t) t -1)) 1/9))))))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/3) (*.f64 (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 5)) 1/9) (-.f64 3/8 (*.f64 3/4 (pow.f64 (/.f64 1 (-.f64 1 (pow.f64 t 3/2))) 1/9)))) (+.f64 1/16 (*.f64 1/8 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/3)))) (pow.f64 t 3)))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/9) t)) (+.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) 2)) 1/3) (*.f64 (pow.f64 t 2) (-.f64 3/8 (*.f64 3/4 (pow.f64 (/.f64 1 (-.f64 1 (pow.f64 t 3/2))) 1/9)))))))))","(fma.f64 -1/3 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) -2)) (*.f64 (fma.f64 (pow.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) -5) 1/9) (+.f64 3/8 (*.f64 -3/4 (pow.f64 (/.f64 -1 (fma.f64 (sqrt.f64 t) t -1)) 1/9))) (+.f64 1/16 (*.f64 1/8 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) -2))))) (pow.f64 t 3))) (+.f64 (fma.f64 1/2 (*.f64 (pow.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) -2) 1/9) t) (cbrt.f64 (-.f64 1 (pow.f64 t 3/2)))) (*.f64 1/3 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 t 3/2)) -2)) (*.f64 t t)) (+.f64 3/8 (*.f64 -3/4 (pow.f64 (/.f64 -1 (fma.f64 (sqrt.f64 t) t -1)) 1/9)))))))","(pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 1/3)","(cbrt.f64 (-.f64 (pow.f64 t 3/2) (pow.f64 (/.f64 1 t) -3/2)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 2)) 1/9) (/.f64 (+.f64 (sqrt.f64 (pow.f64 t 3)) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) t))) (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 1/3))","(fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 t 3/2) (pow.f64 (/.f64 1 t) -3/2)) -2) 1/9) (/.f64 (*.f64 3/2 (pow.f64 t 3/2)) t)) (cbrt.f64 (-.f64 (pow.f64 t 3/2) (pow.f64 (/.f64 1 t) -3/2))))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (+.f64 (*.f64 -1/8 (sqrt.f64 (pow.f64 t 3))) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2))) 1/9) (pow.f64 (+.f64 (sqrt.f64 (pow.f64 t 3)) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) 2)))) (pow.f64 t 2)) (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 2)) 1/3))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 2)) 1/9) (/.f64 (+.f64 (sqrt.f64 (pow.f64 t 3)) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) t))) (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 1/3)))","(+.f64 (*.f64 1/3 (+.f64 (*.f64 (*.f64 (fma.f64 (pow.f64 t 3/2) 3/8 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 -1 (-.f64 (pow.f64 (/.f64 1 t) -3/2) (pow.f64 t 3/2))) 1/9) (*.f64 (*.f64 3/2 3/2) (pow.f64 t 3))))) (cbrt.f64 (pow.f64 (-.f64 (pow.f64 t 3/2) (pow.f64 (/.f64 1 t) -3/2)) -2))) (pow.f64 t -2)) (*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 t 3/2) (pow.f64 (/.f64 1 t) -3/2)) -2) 1/9) (/.f64 (*.f64 3/2 (pow.f64 t 3/2)) t)))) (cbrt.f64 (-.f64 (pow.f64 t 3/2) (pow.f64 (/.f64 1 t) -3/2))))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (+.f64 (*.f64 -1/8 (sqrt.f64 (pow.f64 t 3))) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2))) 1/9) (pow.f64 (+.f64 (sqrt.f64 (pow.f64 t 3)) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) 2)))) (pow.f64 t 2)) (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 2)) 1/3))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 2)) 1/9) (/.f64 (+.f64 (sqrt.f64 (pow.f64 t 3)) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) t))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 2)) 1/3) (/.f64 (-.f64 (+.f64 (*.f64 1/16 (sqrt.f64 (pow.f64 t 3))) (*.f64 -1/8 (sqrt.f64 (pow.f64 t 3)))) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 2)) 1/3) (pow.f64 (+.f64 (sqrt.f64 (pow.f64 t 3)) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) 3))) (*.f64 2/3 (*.f64 (*.f64 (-.f64 (+.f64 (*.f64 -1/8 (sqrt.f64 (pow.f64 t 3))) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2))) 1/9) (pow.f64 (+.f64 (sqrt.f64 (pow.f64 t 3)) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3)))) 2)))) (+.f64 (sqrt.f64 (pow.f64 t 3)) (*.f64 1/2 (sqrt.f64 (pow.f64 t 3))))) (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 5)) 1/9))))) (pow.f64 t 3)))) (pow.f64 (-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2)) 1/3))))","(+.f64 (*.f64 1/3 (+.f64 (*.f64 (*.f64 (fma.f64 (pow.f64 t 3/2) 3/8 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 -1 (-.f64 (pow.f64 (/.f64 1 t) -3/2) (pow.f64 t 3/2))) 1/9) (*.f64 (*.f64 3/2 3/2) (pow.f64 t 3))))) (cbrt.f64 (pow.f64 (-.f64 (pow.f64 t 3/2) (pow.f64 (/.f64 1 t) -3/2)) -2))) (pow.f64 t -2)) (*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 t 3/2) (pow.f64 (/.f64 1 t) -3/2)) -2) 1/9) (/.f64 (*.f64 3/2 (pow.f64 t 3/2)) t)))) (fma.f64 1/3 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (pow.f64 t 3/2) (pow.f64 (/.f64 1 t) -3/2)) -2)) (-.f64 (*.f64 (pow.f64 t 3/2) -1/16) (fma.f64 1/27 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (pow.f64 t 3/2) (pow.f64 (/.f64 1 t) -3/2)) -2)) (*.f64 27/8 (pow.f64 (pow.f64 t 3) 3/2))) (*.f64 2/3 (*.f64 (*.f64 (fma.f64 (pow.f64 t 3/2) 3/8 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 -1 (-.f64 (pow.f64 (/.f64 1 t) -3/2) (pow.f64 t 3/2))) 1/9) (*.f64 (*.f64 3/2 3/2) (pow.f64 t 3))))) (*.f64 3/2 (pow.f64 t 3/2))) (pow.f64 (pow.f64 (-.f64 (pow.f64 t 3/2) (pow.f64 (/.f64 1 t) -3/2)) -5) 1/9)))))) (pow.f64 t -3)) (cbrt.f64 (-.f64 (pow.f64 t 3/2) (pow.f64 (/.f64 1 t) -3/2)))))","(pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 1/3)","(cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 2)) 1/9) (/.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) t))) (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 1/3))","(fma.f64 -1/3 (*.f64 (pow.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) -2) 1/9) (/.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (/.f64 t -3/2))) (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))))))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 2)) 1/9) (/.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) t))) (+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (+.f64 (*.f64 -1/8 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))) 1/9) (pow.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) 2)))) (pow.f64 t 2)) (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 2)) 1/3))) (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 1/3)))","(fma.f64 -1/3 (*.f64 (pow.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) -2) 1/9) (/.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (/.f64 t -3/2))) (fma.f64 1/3 (*.f64 (*.f64 (fma.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) 3/8 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 -1 (-.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))) (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))))) 1/9) (*.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3)) (*.f64 -3/2 -3/2))))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) -2))) (pow.f64 t -2)) (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))))))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 2)) 1/3) (/.f64 (-.f64 (+.f64 (*.f64 -1/16 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 1/8 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 2)) 1/3) (pow.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) 3))) (*.f64 2/3 (*.f64 (*.f64 (-.f64 (+.f64 (*.f64 -1/8 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))) 1/9) (pow.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) 2)))) (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))))) (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 5)) 1/9))))) (pow.f64 t 3)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 2)) 1/9) (/.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) t))) (+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (+.f64 (*.f64 -1/8 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))) 1/9) (pow.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3))) (*.f64 -1 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)))) 2)))) (pow.f64 t 2)) (pow.f64 (/.f64 1 (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 2)) 1/3))) (pow.f64 (-.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) 3)) (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) 1/3))))","(+.f64 (*.f64 -1/3 (+.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) -2)) (-.f64 (*.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) 1/16) (fma.f64 1/27 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) -2)) (pow.f64 (*.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) -3/2) 3)) (*.f64 2/3 (*.f64 (fma.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) 3/8 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 -1 (-.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))) (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))))) 1/9) (*.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3)) (*.f64 -3/2 -3/2))))) (*.f64 (*.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) -3/2) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) -5) 1/9))))))) (pow.f64 t -3)) (*.f64 (pow.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) -2) 1/9) (/.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (/.f64 t -3/2))))) (fma.f64 1/3 (*.f64 (*.f64 (fma.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) 3/8 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 -1 (-.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))) (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))))) 1/9) (*.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3)) (*.f64 -3/2 -3/2))))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) -2))) (pow.f64 t -2)) (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))) 3))) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))))))"]],"time":129.86181640625,"type":"simplify"},{"compiler":[[17277,8998]],"time":133.39501953125,"type":"eval"},{"alts":[["(+.f64 (+.f64 (+.f64 (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",25.7248194987369],["(+.f64 (+.f64 (+.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",30.402371274526992],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",27.603834908629064],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","done",4.416260013693683],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))","fresh",26.416880777404],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 1 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","fresh",25.08832432514421],["(+.f64 (+.f64 (+.f64 (*.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 x))))) (-.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 x)))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",29.66471887254033],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) (+.f64 t (-.f64 (exp.f64 (log1p.f64 t)) (*.f64 (neg.f64 (sqrt.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))))))) 2)) (cbrt.f64 (fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","fresh",22.642129736222678],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (/.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))) (pow.f64 z 3/2))) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",29.452184941368273],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) 1) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",26.900923922324473],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (+.f64 (*.f64 (sqrt.f64 (/.f64 1 t)) 3/8) (+.f64 (pow.f64 t 3/2) (fma.f64 3/2 (sqrt.f64 t) (neg.f64 (pow.f64 (/.f64 1 t) -3/2))))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","fresh",47.23705186058484],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (/.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 y)) y) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)))) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))) 2))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",31.95336496679855],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))) 2)))","fresh",22.778499075157708],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 t))) (+.f64 (cbrt.f64 t) (cbrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))) (-.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (cbrt.f64 (sqrt.f64 t)))) 2)) (cbrt.f64 (fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","fresh",26.7652718546459],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) (+.f64 (exp.f64 (log1p.f64 t)) (fma.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t))) t))) 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","fresh",22.743529075437806],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (fma.f64 (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (neg.f64 (pow.f64 t 3/2))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","next",22.613629085793658]],"compiler":[[50,35],[41,29],[63,44],[35,27],[51,31],[57,42],[55,35],[83,52],[89,38],[29,23],[75,54],[53,33],[67,39],[84,50],[78,52],[71,50],[50,35],[41,29],[63,44],[51,31],[57,42],[55,35],[83,52],[89,38],[29,23],[75,54],[53,33],[67,39],[84,50],[78,52],[71,50]],"count":[[234,16]],"kept":[{"done":[1,1],"fresh":[13,11],"new":[219,4],"picked":[1,0]}],"min-error":[4.181703676061069],"time":86.319091796875,"type":"prune"},{"compiler":[[371,182]],"locations":[["(sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)))",8.32812648716579,true],["(sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))",12.788439031916973,false],["(fma.f64 (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (neg.f64 (pow.f64 t 3/2)))",21.148409824810052,true],["(-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))",26.88471335227373,false]],"time":98.00390625,"type":"localize"},{"count":[[2,24]],"series":[["(sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)))","t","-inf",0.613037109375],["(sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)))","t","inf",0.48095703125],["(sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)))","t","0",0.18603515625],["(fma.f64 (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (neg.f64 (pow.f64 t 3/2)))","t","-inf",1.73291015625],["(fma.f64 (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (neg.f64 (pow.f64 t 3/2)))","t","inf",0.822998046875],["(fma.f64 (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (neg.f64 (pow.f64 t 3/2)))","t","0",0.27587890625]],"time":4.26904296875,"type":"series"},{"count":[[2,91]],"inputs":[["(fma.f64 (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (neg.f64 (pow.f64 t 3/2)))","(sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) (*.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 1/2) (*.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 0) (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) (*.f64 0 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) (*.f64 1/2 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 t 3/2)) (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (pow.f64 t 3/2) (pow.f64 (exp.f64 3/2) (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (neg.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (pow.f64 t 3/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) (cbrt.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 t (-.f64 (exp.f64 (log1p.f64 t)) (*.f64 (cbrt.f64 (neg.f64 (pow.f64 t 3/2))) (cbrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))) (+.f64 (cbrt.f64 (neg.f64 (pow.f64 t 3/2))) (cbrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 (log1p.f64 t)) (-.f64 t (*.f64 (cbrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (cbrt.f64 (neg.f64 (pow.f64 t 3/2)))))) (+.f64 (cbrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (cbrt.f64 (neg.f64 (pow.f64 t 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 (log1p.f64 t)) (+.f64 t (*.f64 (cbrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (cbrt.f64 (pow.f64 t 3/2))))) (-.f64 (cbrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (cbrt.f64 (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 2)) (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (neg.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (pow.f64 t 3/2) (pow.f64 (exp.f64 3/2) (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (exp.f64 (log1p.f64 t)) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (log1p.f64 t)) (cbrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))) (pow.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (+.f64 1/3 1/2)) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) 3/2)) (sqrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) 3/2)) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))) (neg.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 t 3/2)) (neg.f64 t) (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (pow.f64 t 3/2))) t (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (cbrt.f64 (neg.f64 (pow.f64 t 3/2))) (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) 1 (neg.f64 (pow.f64 t 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (pow.f64 t 3/2)) (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 t 3/2)) 1 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 t 3/2) (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 t 3/2) -1 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (*.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) 1/2) (*.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) 0) (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (*.f64 0 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))) (*.f64 1/2 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))) (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))) (sqrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))) (cbrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))))) (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))))) (fabs.f64 (cbrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) 0) (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (pow.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 t) 3)) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 t) 3/2) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 0 (*.f64 (*.f64 (log1p.f64 t) 3/2) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 (log1p.f64 t) 3/2) 1/2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 (log1p.f64 t) 3/2) 1/2) 1))))))"]],"rules":[["egg-rr",44],["egg-rr",47]],"time":26.302001953125,"type":"rewrite"},{"count":[[115,137]],"inputs":[["(-.f64 1 (pow.f64 t 3/2))","(-.f64 (+.f64 1 (*.f64 3/2 t)) (pow.f64 t 3/2))","(-.f64 (+.f64 1 (+.f64 (*.f64 3/2 t) (*.f64 3/8 (pow.f64 t 2)))) (pow.f64 t 3/2))","(-.f64 (+.f64 1 (+.f64 (*.f64 3/2 t) (+.f64 (*.f64 -1/16 (pow.f64 t 3)) (*.f64 3/8 (pow.f64 t 2))))) (pow.f64 t 3/2))","(-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2))","(-.f64 (+.f64 (*.f64 3/2 (sqrt.f64 t)) (sqrt.f64 (pow.f64 t 3))) (pow.f64 (/.f64 1 t) -3/2))","(-.f64 (+.f64 (*.f64 3/2 (sqrt.f64 t)) (+.f64 (sqrt.f64 (pow.f64 t 3)) (*.f64 3/8 (sqrt.f64 (/.f64 1 t))))) (pow.f64 (/.f64 1 t) -3/2))","(-.f64 (+.f64 (*.f64 3/2 (sqrt.f64 t)) (+.f64 (sqrt.f64 (pow.f64 t 3)) (+.f64 (*.f64 -1/16 (sqrt.f64 (/.f64 1 (pow.f64 t 3)))) (*.f64 3/8 (sqrt.f64 (/.f64 1 t)))))) (pow.f64 (/.f64 1 t) -3/2))","(*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) t))","(+.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) t)) (*.f64 3/8 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 2))))","(+.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) t)) (+.f64 (*.f64 3/8 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 2))) (*.f64 -1/16 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 3)))))","(+.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) t)) (+.f64 (*.f64 3/8 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 2))) (+.f64 (*.f64 3/128 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 4))) (*.f64 -1/16 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 3))))))","1","(+.f64 (*.f64 3/4 t) 1)","(+.f64 (*.f64 3/4 t) (+.f64 1 (*.f64 -3/32 (pow.f64 t 2))))","(+.f64 (*.f64 3/4 t) (+.f64 1 (+.f64 (*.f64 5/128 (pow.f64 t 3)) (*.f64 -3/32 (pow.f64 t 2)))))","(pow.f64 (pow.f64 t 3) 1/4)","(+.f64 (pow.f64 (pow.f64 t 3) 1/4) (*.f64 3/4 (pow.f64 (/.f64 1 t) 1/4)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 11)) 1/4) (-.f64 (*.f64 3/8 (sqrt.f64 (pow.f64 t 3))) (pow.f64 (*.f64 3/4 (pow.f64 (*.f64 1 (pow.f64 t 3)) 1/4)) 2)))) (+.f64 (pow.f64 (pow.f64 t 3) 1/4) (*.f64 3/4 (pow.f64 (/.f64 1 t) 1/4))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 11)) 1/4) (-.f64 (*.f64 3/8 (sqrt.f64 (pow.f64 t 3))) (pow.f64 (*.f64 3/4 (pow.f64 (*.f64 1 (pow.f64 t 3)) 1/4)) 2)))) (+.f64 (pow.f64 (pow.f64 t 3) 1/4) (+.f64 (*.f64 3/4 (pow.f64 (/.f64 1 t) 1/4)) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 15)) 1/4) (-.f64 (*.f64 -1/16 (sqrt.f64 (pow.f64 t 3))) (*.f64 3/4 (-.f64 (*.f64 3/8 (sqrt.f64 (pow.f64 t 3))) (pow.f64 (*.f64 3/4 (pow.f64 (*.f64 1 (pow.f64 t 3)) 1/4)) 2)))))))))","(sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))","(+.f64 (*.f64 3/4 (*.f64 (sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) (/.f64 1 t))) (sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))))","(+.f64 (*.f64 3/4 (*.f64 (sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) (/.f64 1 t))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))) (/.f64 (-.f64 (*.f64 3/8 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) (pow.f64 (*.f64 -3/4 (sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))) 2)) (pow.f64 t 2)))) (sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))))","(+.f64 (*.f64 3/4 (*.f64 (sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) (/.f64 1 t))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))) (/.f64 (-.f64 (*.f64 3/8 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) (pow.f64 (*.f64 -3/4 (sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))) 2)) (pow.f64 t 2)))) (+.f64 (sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))) (/.f64 (-.f64 (*.f64 1/16 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) (*.f64 -3/4 (-.f64 (*.f64 3/8 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) (pow.f64 (*.f64 -3/4 (sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))) 2)))) (pow.f64 t 3)))))))"]],"method":["egg-herbie"],"outputs":[["(-.f64 1 (pow.f64 t 3/2))","(-.f64 (+.f64 1 (*.f64 3/2 t)) (pow.f64 t 3/2))","(+.f64 1 (fma.f64 t 3/2 (neg.f64 (pow.f64 t 3/2))))","(-.f64 (+.f64 1 (+.f64 (*.f64 3/2 t) (*.f64 3/8 (pow.f64 t 2)))) (pow.f64 t 3/2))","(-.f64 (+.f64 1 (fma.f64 3/2 t (*.f64 3/8 (*.f64 t t)))) (pow.f64 t 3/2))","(-.f64 (+.f64 1 (+.f64 (*.f64 3/2 t) (+.f64 (*.f64 -1/16 (pow.f64 t 3)) (*.f64 3/8 (pow.f64 t 2))))) (pow.f64 t 3/2))","(+.f64 (fma.f64 3/2 t (fma.f64 -1/16 (pow.f64 t 3) (*.f64 3/8 (*.f64 t t)))) (-.f64 1 (pow.f64 t 3/2)))","(-.f64 (sqrt.f64 (pow.f64 t 3)) (pow.f64 (/.f64 1 t) -3/2))","(-.f64 (pow.f64 t 3/2) (pow.f64 (/.f64 1 t) -3/2))","(-.f64 (+.f64 (*.f64 3/2 (sqrt.f64 t)) (sqrt.f64 (pow.f64 t 3))) (pow.f64 (/.f64 1 t) -3/2))","(-.f64 (fma.f64 3/2 (sqrt.f64 t) (pow.f64 t 3/2)) (pow.f64 (/.f64 1 t) -3/2))","(-.f64 (+.f64 (*.f64 3/2 (sqrt.f64 t)) (+.f64 (sqrt.f64 (pow.f64 t 3)) (*.f64 3/8 (sqrt.f64 (/.f64 1 t))))) (pow.f64 (/.f64 1 t) -3/2))","(-.f64 (+.f64 (fma.f64 3/2 (sqrt.f64 t) (pow.f64 t 3/2)) (*.f64 3/8 (sqrt.f64 (/.f64 1 t)))) (pow.f64 (/.f64 1 t) -3/2))","(-.f64 (+.f64 (*.f64 3/2 (sqrt.f64 t)) (+.f64 (sqrt.f64 (pow.f64 t 3)) (+.f64 (*.f64 -1/16 (sqrt.f64 (/.f64 1 (pow.f64 t 3)))) (*.f64 3/8 (sqrt.f64 (/.f64 1 t)))))) (pow.f64 (/.f64 1 t) -3/2))","(-.f64 (+.f64 (fma.f64 3/2 (sqrt.f64 t) (pow.f64 t 3/2)) (fma.f64 -1/16 (sqrt.f64 (pow.f64 t -3)) (*.f64 3/8 (sqrt.f64 (/.f64 1 t))))) (pow.f64 (/.f64 1 t) -3/2))","(*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) t))","(/.f64 (*.f64 3/2 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) t)","(+.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) t)) (*.f64 3/8 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 2))))","(fma.f64 3/2 (/.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))) t) (/.f64 (/.f64 (*.f64 3/8 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) t) t))","(+.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) t)) (+.f64 (*.f64 3/8 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 2))) (*.f64 -1/16 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 3)))))","(fma.f64 3/2 (/.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))) t) (fma.f64 3/8 (/.f64 (/.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))) t) t) (*.f64 (*.f64 -1/16 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) (pow.f64 t -3))))","(+.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) t)) (+.f64 (*.f64 3/8 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 2))) (+.f64 (*.f64 3/128 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 4))) (*.f64 -1/16 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (pow.f64 t 3))))))","(fma.f64 3/2 (/.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))) t) (fma.f64 3/8 (/.f64 (/.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))) t) t) (fma.f64 3/128 (/.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))) (pow.f64 t 4)) (*.f64 (*.f64 -1/16 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) (pow.f64 t -3)))))","1","(+.f64 (*.f64 3/4 t) 1)","(fma.f64 3/4 t 1)","(+.f64 (*.f64 3/4 t) (+.f64 1 (*.f64 -3/32 (pow.f64 t 2))))","(+.f64 (fma.f64 3/4 t 1) (*.f64 -3/32 (*.f64 t t)))","(+.f64 (*.f64 3/4 t) (+.f64 1 (+.f64 (*.f64 5/128 (pow.f64 t 3)) (*.f64 -3/32 (pow.f64 t 2)))))","(+.f64 (fma.f64 3/4 t 1) (fma.f64 5/128 (pow.f64 t 3) (*.f64 -3/32 (*.f64 t t))))","(pow.f64 (pow.f64 t 3) 1/4)","(pow.f64 t 3/4)","(+.f64 (pow.f64 (pow.f64 t 3) 1/4) (*.f64 3/4 (pow.f64 (/.f64 1 t) 1/4)))","(+.f64 (pow.f64 t 3/4) (*.f64 3/4 (pow.f64 (/.f64 1 t) 1/4)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 11)) 1/4) (-.f64 (*.f64 3/8 (sqrt.f64 (pow.f64 t 3))) (pow.f64 (*.f64 3/4 (pow.f64 (*.f64 1 (pow.f64 t 3)) 1/4)) 2)))) (+.f64 (pow.f64 (pow.f64 t 3) 1/4) (*.f64 3/4 (pow.f64 (/.f64 1 t) 1/4))))","(fma.f64 1/2 (*.f64 (pow.f64 t (*.f64 -11 1/4)) (fma.f64 3/8 (pow.f64 t 3/2) (neg.f64 (pow.f64 (*.f64 3/4 (pow.f64 t 3/4)) 2)))) (+.f64 (pow.f64 t 3/4) (*.f64 3/4 (pow.f64 (/.f64 1 t) 1/4))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 11)) 1/4) (-.f64 (*.f64 3/8 (sqrt.f64 (pow.f64 t 3))) (pow.f64 (*.f64 3/4 (pow.f64 (*.f64 1 (pow.f64 t 3)) 1/4)) 2)))) (+.f64 (pow.f64 (pow.f64 t 3) 1/4) (+.f64 (*.f64 3/4 (pow.f64 (/.f64 1 t) 1/4)) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 15)) 1/4) (-.f64 (*.f64 -1/16 (sqrt.f64 (pow.f64 t 3))) (*.f64 3/4 (-.f64 (*.f64 3/8 (sqrt.f64 (pow.f64 t 3))) (pow.f64 (*.f64 3/4 (pow.f64 (*.f64 1 (pow.f64 t 3)) 1/4)) 2)))))))))","(fma.f64 1/2 (*.f64 (pow.f64 t (*.f64 -11 1/4)) (fma.f64 3/8 (pow.f64 t 3/2) (neg.f64 (pow.f64 (*.f64 3/4 (pow.f64 t 3/4)) 2)))) (+.f64 (pow.f64 t 3/4) (fma.f64 3/4 (pow.f64 (/.f64 1 t) 1/4) (*.f64 (*.f64 1/2 (pow.f64 t (*.f64 -15 1/4))) (fma.f64 -1/16 (pow.f64 t 3/2) (*.f64 (-.f64 (pow.f64 (*.f64 3/4 (pow.f64 t 3/4)) 2) (*.f64 3/8 (pow.f64 t 3/2))) 3/4))))))","(sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))","(sqrt.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))))","(+.f64 (*.f64 3/4 (*.f64 (sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) (/.f64 1 t))) (sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))))","(fma.f64 3/4 (/.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) t) (sqrt.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))))","(+.f64 (*.f64 3/4 (*.f64 (sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) (/.f64 1 t))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))) (/.f64 (-.f64 (*.f64 3/8 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) (pow.f64 (*.f64 -3/4 (sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))) 2)) (pow.f64 t 2)))) (sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))))","(fma.f64 3/4 (/.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) t) (fma.f64 1/2 (/.f64 (/.f64 (*.f64 (sqrt.f64 (exp.f64 (*.f64 (neg.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))))) (fma.f64 3/8 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))) (neg.f64 (*.f64 (*.f64 -3/4 -3/4) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))))))) t) t) (sqrt.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))))))","(+.f64 (*.f64 3/4 (*.f64 (sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) (/.f64 1 t))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))) (/.f64 (-.f64 (*.f64 3/8 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) (pow.f64 (*.f64 -3/4 (sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))) 2)) (pow.f64 t 2)))) (+.f64 (sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))) (/.f64 (-.f64 (*.f64 1/16 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) (*.f64 -3/4 (-.f64 (*.f64 3/8 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))))) (pow.f64 (*.f64 -3/4 (sqrt.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))))) 2)))) (pow.f64 t 3)))))))","(+.f64 (fma.f64 3/4 (/.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) t) (fma.f64 1/2 (/.f64 (/.f64 (*.f64 (sqrt.f64 (exp.f64 (*.f64 (neg.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))))) (fma.f64 3/8 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))) (neg.f64 (*.f64 (*.f64 -3/4 -3/4) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))))))) t) t) (sqrt.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))))) (/.f64 (*.f64 (*.f64 -1/2 (sqrt.f64 (exp.f64 (*.f64 (neg.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))))) (fma.f64 1/16 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t))))) (*.f64 -3/4 (-.f64 (*.f64 (*.f64 -3/4 -3/4) (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))) (*.f64 3/8 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 t)))))))))) (pow.f64 t 3)))"]],"time":105.800048828125,"type":"simplify"},{"compiler":[[23099,12231]],"time":181.302001953125,"type":"eval"},{"alts":[["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (/.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))) (pow.f64 z 3/2))) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",29.452184941368273],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (fma.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))) (pow.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (+.f64 1/3 1/2)) (neg.f64 (pow.f64 t 3/2))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","fresh",22.950540282534586],["(+.f64 (+.f64 (+.f64 (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",25.7248194987369],["(+.f64 (+.f64 (+.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",30.402371274526992],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",27.603834908629064],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","done",4.416260013693683],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))","fresh",26.416880777404],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 1 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","fresh",25.08832432514421],["(+.f64 (+.f64 (+.f64 (*.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 x))))) (-.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 x)))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",29.66471887254033],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) (+.f64 t (-.f64 (exp.f64 (log1p.f64 t)) (*.f64 (neg.f64 (sqrt.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))))))) 2)) (cbrt.f64 (fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","fresh",22.642129736222678],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) 1) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",26.900923922324473],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (fma.f64 (+.f64 (fma.f64 3/4 t 1) (fma.f64 5/128 (pow.f64 t 3) (*.f64 -3/32 (*.f64 t t)))) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (neg.f64 (pow.f64 t 3/2))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","fresh",29.163483136135127],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (fma.f64 (pow.f64 (pow.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) 3/2) 1/3) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (neg.f64 (pow.f64 t 3/2))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","fresh",27.24569324575974],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (+.f64 (*.f64 (sqrt.f64 (/.f64 1 t)) 3/8) (+.f64 (pow.f64 t 3/2) (fma.f64 3/2 (sqrt.f64 t) (neg.f64 (pow.f64 (/.f64 1 t) -3/2))))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","fresh",47.23705186058484],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (/.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 y)) y) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)))) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))) 2))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",31.95336496679855],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))) 2)))","fresh",22.778499075157708],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 t))) (+.f64 (cbrt.f64 t) (cbrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))) (-.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (cbrt.f64 (sqrt.f64 t)))) 2)) (cbrt.f64 (fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","fresh",26.7652718546459],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (neg.f64 (sqrt.f64 t))) 2)) (cbrt.f64 (fma.f64 (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (neg.f64 (pow.f64 t 3/2))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","fresh",22.718431922051032]],"compiler":[[89,38],[75,54],[50,35],[41,29],[63,44],[35,27],[51,31],[57,42],[55,35],[83,52],[29,23],[80,57],[74,53],[75,54],[53,33],[67,39],[84,50],[78,52]],"count":[[322,18]],"kept":[{"done":[1,1],"fresh":[14,13],"new":[306,4],"picked":[1,0]}],"min-error":[4.171853385748708],"time":135.764892578125,"type":"prune"},{"accuracy":[4.41626001369368],"baseline":[4.416260013693683],"branch":[["x",4.416260013693684,1],["y",4.416260013693683,1],["z",4.416260013693682,1],["t",4.416260013693683,1],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))",4.41626001369368,1],["(+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))",4.416260013693681,1],["(+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y)))",4.416260013693682,1],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",4.416260013693683,1],["(-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))",4.416260013693684,1],["(-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))",4.416260013693682,1],["(-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))",4.416260013693685,1]],"compiler":[[5,4],[5,4],[5,4],[5,4],[35,27],[27,21],[19,15],[11,9],[11,9],[11,9],[11,9],[1554,741]],"count":[[26,1]],"inputs":[["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (fma.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)))) (pow.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (+.f64 1/3 1/2)) (neg.f64 (pow.f64 t 3/2))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (fma.f64 (+.f64 (fma.f64 3/4 t 1) (fma.f64 5/128 (pow.f64 t 3) (*.f64 -3/32 (*.f64 t t)))) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (neg.f64 (pow.f64 t 3/2))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (fma.f64 (pow.f64 (pow.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) 3/2) 1/3) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (neg.f64 (pow.f64 t 3/2))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (neg.f64 (sqrt.f64 t))) 2)) (cbrt.f64 (fma.f64 (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (neg.f64 (pow.f64 t 3/2))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) (+.f64 t (-.f64 (exp.f64 (log1p.f64 t)) (*.f64 (neg.f64 (sqrt.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))))))) 2)) (cbrt.f64 (fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (+.f64 (*.f64 (sqrt.f64 (/.f64 1 t)) 3/8) (+.f64 (pow.f64 t 3/2) (fma.f64 3/2 (sqrt.f64 t) (neg.f64 (pow.f64 (/.f64 1 t) -3/2))))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 t))) (+.f64 (cbrt.f64 t) (cbrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))) (-.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (cbrt.f64 (sqrt.f64 t)))) 2)) (cbrt.f64 (fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (fma.f64 (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2))) (neg.f64 (pow.f64 t 3/2))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (*.f64 3/2 (sqrt.f64 t)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 t))) (+.f64 (cbrt.f64 t) (cbrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))) (-.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 t)))) (cbrt.f64 (sqrt.f64 t)))) 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (fma.f64 (exp.f64 (log1p.f64 t)) (sqrt.f64 (exp.f64 (log1p.f64 t))) (neg.f64 (pow.f64 t 3/2))))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 1 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (log1p.f64 t)) (pow.f64 t 3/2)) (+.f64 (exp.f64 (log1p.f64 t)) (fma.f64 (sqrt.f64 t) (sqrt.f64 (exp.f64 (log1p.f64 t))) t))) 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","(+.f64 (+.f64 (+.f64 (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)) 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 y) 3/2)) (pow.f64 y 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 y)) y) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 y)) y)))))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)))))","(+.f64 (+.f64 (+.f64 (*.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 x))))) (-.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 x)))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (/.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))) (pow.f64 z 3/2))) (*.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z))) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) 1) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 z) 3/2)) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))) (/.f64 (pow.f64 z 3/2) (+.f64 (+.f64 (exp.f64 (log1p.f64 z)) z) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 z)) z)))))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (/.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 y)) y) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y)))) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 y))) (sqrt.f64 y))) 2))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t)))) 2)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t)) 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 t) 3/2)) (pow.f64 t 3/2)))) (cbrt.f64 (+.f64 (+.f64 (exp.f64 (log1p.f64 t)) t) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 t)) t))))))","(-.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (-.f64 (sqrt.f64 z) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 y))))))) (-.f64 (sqrt.f64 y) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))"]],"link":["."],"name":["Main:z from "],"oracle":[63.21340517826238],"outputs":[["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))"]],"time":88.6259765625,"times":[["x",8.35595703125],["y",8.14697265625],["z",8.218994140625],["t",8.134033203125],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))",4.6220703125],["(+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))",4.070068359375],["(+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y)))",3.383056640625],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",2.966064453125],["(-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))",2.739013671875],["(-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))",2.764892578125],["(-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))",3.22900390625]],"type":"regimes"},{"compiler":[[35,27]],"inputs":[["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(-.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 z))) (-.f64 (sqrt.f64 z) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 y))))))) (-.f64 (sqrt.f64 y) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 t))) (sqrt.f64 t))))"]],"stop":[["fuel",1]],"time":34.35009765625,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[35,27]],"remove-preprocessing":[[]],"time":14.24609375,"type":"end"}]
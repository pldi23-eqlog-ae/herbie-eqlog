[{"compiler":[[12,8]],"method":["search"],"sampling":[[12,0.6497556329704821,0.10829260549508035,0.24195176153443754],[11,0.620487361215055,0.1619511037133634,0.2175615350715816],[10,0.5853654351085424,0.20682912040501833,0.20780544448643923],[9,0.5307313278317451,0.30439002625644207,0.16487864591181278],[8,0.46829234808683395,0.37463387846946716,0.15707377344369888],[7,0.37463387846946716,0.49951183795928955,0.1258542835712433],[6,0.24975591897964478,0.6243897974491119,0.1258542835712433],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":30.323974609375,"type":"analyze"},{"outcomes":[["body",256,"invalid",17.497314453125,462],["body",256,"valid",295.798583984375,8256]],"time":321.510009765625,"type":"sample"},{"compiler":[[11,7]],"inputs":[["0","1"],["(*.f64 2 (+.f64 (*.f64 x x) (*.f64 x y)))","(*.f64 2 (+.f64 (*.f64 y y) (*.f64 y x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 2 (+.f64 (*.f64 x x) (*.f64 x y)))","(*.f64 (+.f64 x x) (+.f64 x y))","(*.f64 2 (+.f64 (*.f64 y y) (*.f64 y x)))","(*.f64 (+.f64 y y) (+.f64 x y))"]],"symmetry":[[]],"time":57.1640625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 2 (+.f64 (*.f64 x x) (*.f64 x y)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (+.f64 (*.f64 x x) (*.f64 x y)))","(*.f64 (+.f64 x x) (+.f64 x y))"]],"time":19.075927734375,"type":"simplify"},{"compiler":[[18,10]],"time":0.3330078125,"type":"eval"},{"alts":[["(*.f64 (+.f64 x x) (+.f64 x y))","next",0.01171875],["(*.f64 2 (+.f64 (*.f64 x x) (*.f64 x y)))","fresh",0.015625]],"compiler":[[9,5],[11,7],[9,5],[11,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0078125],"time":1.161865234375,"type":"prune"},{"compiler":[[17,5]],"locations":[["(*.f64 (+.f64 x x) (+.f64 x y))",0.01171875,true]],"time":3.533203125,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (+.f64 x x) (+.f64 x y))","y","-inf",0.321044921875],["(*.f64 (+.f64 x x) (+.f64 x y))","y","inf",0.3671875],["(*.f64 (+.f64 x x) (+.f64 x y))","y","0",0.466064453125],["(*.f64 (+.f64 x x) (+.f64 x y))","x","-inf",1.2109375],["(*.f64 (+.f64 x x) (+.f64 x y))","x","inf",0.503173828125],["(*.f64 (+.f64 x x) (+.f64 x y))","x","0",0.539794921875]],"time":3.495849609375,"type":"series"},{"count":[[1,64]],"inputs":[["(*.f64 (+.f64 x x) (+.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 x y)) (*.f64 x (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (+.f64 x x) x) (*.f64 x y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (+.f64 (*.f64 x y) (*.f64 (+.f64 x x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 x x) (+.f64 x y)) 0) (*.f64 (+.f64 x x) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x x) (+.f64 x y)) (*.f64 (*.f64 (+.f64 x x) (+.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x x) x) (*.f64 (+.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (+.f64 x y)) 1) (*.f64 (*.f64 x (+.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 x x) (+.f64 x y))) (*.f64 (+.f64 x x) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x x) (+.f64 x y)) (*.f64 0 (*.f64 (+.f64 x x) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x x) y) (*.f64 (+.f64 x x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (+.f64 x x) y) (*.f64 x x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (+.f64 (*.f64 x x) (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x x) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x x)) (*.f64 (pow.f64 (+.f64 x x) 2/3) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (*.f64 (pow.f64 (+.f64 x y) 2/3) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) (cbrt.f64 (+.f64 x x))) (pow.f64 (+.f64 x x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x x) (cbrt.f64 (+.f64 x y))) (pow.f64 (+.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 x x) 2/3) (+.f64 x y)) (cbrt.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x x) 2/3) (*.f64 (+.f64 x y) (cbrt.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 x y) 2/3) (+.f64 x x)) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x y) 2/3) (*.f64 (+.f64 x x) (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x x) 2/3) (+.f64 (*.f64 x (cbrt.f64 (+.f64 x x))) (*.f64 y (cbrt.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x x) 2/3) (+.f64 (*.f64 y (cbrt.f64 (+.f64 x x))) (*.f64 x (cbrt.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x x) (+.f64 x y))) (pow.f64 (*.f64 (+.f64 x x) (+.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 x x) (+.f64 x y)) 2/3) (cbrt.f64 (*.f64 (+.f64 x x) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (+.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (+.f64 x x) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (+.f64 y y) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 x x) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 x x) (+.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 x x) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x x) (+.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 x (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 x y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x x) (+.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x x) (+.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x x) (+.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x x) (+.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 x x) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) (+.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 x x) (*.f64 (+.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x x) x (*.f64 (+.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 x y) (*.f64 x (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x x)) (*.f64 (pow.f64 (+.f64 x x) 2/3) y) (*.f64 (+.f64 x x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (+.f64 x x) (*.f64 (+.f64 x x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (+.f64 x x)) (*.f64 (+.f64 x x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y y) x (*.f64 (+.f64 x x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x x) (cbrt.f64 y)) (pow.f64 y 2/3) (*.f64 (+.f64 x x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (+.f64 x x))) (pow.f64 (+.f64 x x) 2/3) (*.f64 (+.f64 x x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x x) y (*.f64 (+.f64 x x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 x x) y)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)) (*.f64 (+.f64 x x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x x) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 (+.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x x)) (*.f64 (pow.f64 (+.f64 x x) 2/3) x) (*.f64 (+.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (+.f64 x x)) (*.f64 (+.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 x x) x)) (cbrt.f64 (*.f64 4 (pow.f64 x 4))) (*.f64 (+.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (+.f64 x x))) (pow.f64 (+.f64 x x) 2/3) (*.f64 (+.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x y) x (*.f64 x (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (*.f64 x y) (*.f64 (+.f64 x x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (*.f64 x x) (*.f64 (+.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x x) x) 1 (*.f64 (+.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 x x) y) (*.f64 (+.f64 x x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 x x) x) (*.f64 (+.f64 x x) y))))))"]],"rules":[["egg-rr",64]],"time":21.7890625,"type":"rewrite"},{"count":[[88,69]],"inputs":[["(*.f64 2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 2 (*.f64 y x)))","(*.f64 2 (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (*.f64 2 (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (*.f64 2 (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (*.f64 2 (pow.f64 x 2)))","(*.f64 2 (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (*.f64 2 (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (*.f64 2 (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (*.f64 2 (pow.f64 x 2)))","(*.f64 2 (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (*.f64 2 (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (*.f64 2 (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (*.f64 2 (pow.f64 x 2)))","(*.f64 2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 2 (*.f64 y x)))","(*.f64 2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 2 (*.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 2 (*.f64 y x)))","(*.f64 (+.f64 x x) (+.f64 x y))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 2 (*.f64 y x)))","(*.f64 (+.f64 x x) (+.f64 x y))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 2 (*.f64 y x)))","(*.f64 (+.f64 x x) (+.f64 x y))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(+.f64 (*.f64 2 (*.f64 y x)) (*.f64 2 (pow.f64 x 2)))","(*.f64 (+.f64 x x) (+.f64 x y))","(+.f64 (*.f64 2 (*.f64 y x)) (*.f64 2 (pow.f64 x 2)))","(*.f64 (+.f64 x x) (+.f64 x y))","(+.f64 (*.f64 2 (*.f64 y x)) (*.f64 2 (pow.f64 x 2)))","(*.f64 (+.f64 x x) (+.f64 x y))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(+.f64 (*.f64 2 (*.f64 y x)) (*.f64 2 (pow.f64 x 2)))","(*.f64 (+.f64 x x) (+.f64 x y))","(+.f64 (*.f64 2 (*.f64 y x)) (*.f64 2 (pow.f64 x 2)))","(*.f64 (+.f64 x x) (+.f64 x y))","(+.f64 (*.f64 2 (*.f64 y x)) (*.f64 2 (pow.f64 x 2)))","(*.f64 (+.f64 x x) (+.f64 x y))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(+.f64 (*.f64 2 (*.f64 y x)) (*.f64 2 (pow.f64 x 2)))","(*.f64 (+.f64 x x) (+.f64 x y))","(+.f64 (*.f64 2 (*.f64 y x)) (*.f64 2 (pow.f64 x 2)))","(*.f64 (+.f64 x x) (+.f64 x y))","(+.f64 (*.f64 2 (*.f64 y x)) (*.f64 2 (pow.f64 x 2)))","(*.f64 (+.f64 x x) (+.f64 x y))","(*.f64 2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 2 (*.f64 y x)))","(*.f64 (+.f64 x x) (+.f64 x y))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 2 (*.f64 y x)))","(*.f64 (+.f64 x x) (+.f64 x y))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 2 (*.f64 y x)))","(*.f64 (+.f64 x x) (+.f64 x y))","(*.f64 2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 2 (*.f64 y x)))","(*.f64 (+.f64 x x) (+.f64 x y))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 2 (*.f64 y x)))","(*.f64 (+.f64 x x) (+.f64 x y))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 2 (*.f64 y x)))","(*.f64 (+.f64 x x) (+.f64 x y))"]],"time":77.7470703125,"type":"simplify"},{"compiler":[[841,210]],"time":6.94091796875,"type":"eval"},{"alts":[["(fma.f64 (+.f64 x x) x (*.f64 (+.f64 x x) y))","next",0]],"compiler":[[12,5],[12,5]],"count":[[71,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[69,1],"picked":[1,0]}],"min-error":[0],"time":12.842041015625,"type":"prune"},{"compiler":[[22,5]],"time":4.072998046875,"type":"localize"},{"compiler":[[2,2]],"time":0.0869140625,"type":"eval"},{"alts":[["(fma.f64 (+.f64 x x) x (*.f64 (+.f64 x x) y))","done",0]],"compiler":[[12,5]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.448974609375,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["(*.f64 2 (+.f64 (*.f64 x x) (*.f64 x y)))",0,1],["(+.f64 (*.f64 x x) (*.f64 x y))",0,1]],"compiler":[[3,2],[3,2],[11,7],[9,5],[28,12]],"count":[[3,1]],"inputs":[["(fma.f64 (+.f64 x x) x (*.f64 (+.f64 x x) y))","(*.f64 (+.f64 x x) (+.f64 x y))","(*.f64 2 (+.f64 (*.f64 x x) (*.f64 x y)))"]],"link":["."],"name":["Linear.Matrix:fromQuaternion from linear-1.19.1.3, B"],"oracle":[0.01953125],"outputs":[["(fma.f64 (+.f64 x x) x (*.f64 (+.f64 x x) y))"]],"time":10.781982421875,"times":[["x",2.4931640625],["y",2.501953125],["(*.f64 2 (+.f64 (*.f64 x x) (*.f64 x y)))",2.489990234375],["(+.f64 (*.f64 x x) (*.f64 x y))",2.595947265625]],"type":"regimes"},{"compiler":[[12,5]],"inputs":[["(fma.f64 (+.f64 x x) x (*.f64 (+.f64 x x) y))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (+.f64 x x) x (*.f64 (+.f64 x x) y))","(*.f64 (+.f64 x x) (+.f64 x y))"]],"stop":[["done",1]],"time":36.97119140625,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[12,5]],"remove-preprocessing":[[]],"time":7.7080078125,"type":"end"}]
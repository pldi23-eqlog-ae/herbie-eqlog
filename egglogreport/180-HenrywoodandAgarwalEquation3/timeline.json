[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.16179298695079536,0.7465869156886099,0.09162009736059473],[11,0.13255329051390463,0.842103257382453,0.025343452103642417],[10,0.08187115002329404,0.9005826502562344,0.017546199720471556],[9,0.062378019065366885,0.9200757812141616,0.017546199720471556],[8,0.031189009532683443,0.9668592955131867,0.0019516949541298345],[7,0.0,0.9980483050458702,0.0019516949541298345],[6,0.0,0.9980483050458702,0.0019516949541298345],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":136.471923828125,"type":"analyze"},{"outcomes":[["body",256,"invalid",384.07080078125,8533],["body",256,"valid",413.15625,8256]],"time":813.116943359375,"type":"sample"},{"compiler":[[12,8]],"inputs":[["0","1","2","3"],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","(*.f64 A (sqrt.f64 (/.f64 c0 (*.f64 V l))))","(*.f64 V (sqrt.f64 (/.f64 A (*.f64 c0 l))))","(*.f64 l (sqrt.f64 (/.f64 A (*.f64 V c0))))","(*.f64 c0 (sqrt.f64 (/.f64 V (*.f64 A l))))","(*.f64 c0 (sqrt.f64 (/.f64 l (*.f64 V A))))","(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))","(*.f64 A (sqrt.f64 (/.f64 c0 (*.f64 V l))))","(*.f64 A (sqrt.f64 (/.f64 (/.f64 c0 V) l)))","(*.f64 V (sqrt.f64 (/.f64 A (*.f64 c0 l))))","(*.f64 V (sqrt.f64 (/.f64 (/.f64 A c0) l)))","(*.f64 l (sqrt.f64 (/.f64 A (*.f64 V c0))))","(*.f64 l (sqrt.f64 (/.f64 (/.f64 A V) c0)))","(*.f64 c0 (sqrt.f64 (/.f64 V (*.f64 A l))))","(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 V A) l)))","(*.f64 c0 (sqrt.f64 (/.f64 l (*.f64 V A))))","(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 l V) A)))","(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V))))","(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))"]],"symmetry":[[]],"time":82.1650390625,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))"]],"time":17.9970703125,"type":"simplify"},{"compiler":[[12,8]],"time":0.25390625,"type":"eval"},{"alts":[["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","next",19.942158949779635]],"compiler":[[12,8],[12,8]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[19.942158949779635],"time":2.136962890625,"type":"prune"},{"compiler":[[30,8]],"locations":[["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))",0.8757738229057016,true],["(/.f64 A (*.f64 V l))",4.860911776425642,true],["(sqrt.f64 (/.f64 A (*.f64 V l)))",18.101403097062256,true]],"time":5.59814453125,"type":"localize"},{"count":[[3,12]],"series":[["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","l","-inf",0.53515625],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","l","inf",0.35107421875],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","l","0",0.498046875],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","V","-inf",0.843994140625],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","V","inf",0.400146484375],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","V","0",0.447998046875],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","A","-inf",0.556884765625],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","A","inf",0.37109375],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","A","0",0.513916015625],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","c0","-inf",0.337890625],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","c0","inf",1.136962890625],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","c0","0",0.72998046875],["(/.f64 A (*.f64 V l))","l","-inf",0.2978515625],["(/.f64 A (*.f64 V l))","l","inf",0.31689453125],["(/.f64 A (*.f64 V l))","l","0",0.424072265625],["(/.f64 A (*.f64 V l))","V","-inf",0.2919921875],["(/.f64 A (*.f64 V l))","V","inf",0.410888671875],["(/.f64 A (*.f64 V l))","V","0",0.37109375],["(/.f64 A (*.f64 V l))","A","-inf",0.383056640625],["(/.f64 A (*.f64 V l))","A","inf",0.802978515625],["(/.f64 A (*.f64 V l))","A","0",0.501953125],["(sqrt.f64 (/.f64 A (*.f64 V l)))","l","-inf",0.534912109375],["(sqrt.f64 (/.f64 A (*.f64 V l)))","l","inf",0.365966796875],["(sqrt.f64 (/.f64 A (*.f64 V l)))","l","0",0.6630859375],["(sqrt.f64 (/.f64 A (*.f64 V l)))","V","-inf",0.5869140625],["(sqrt.f64 (/.f64 A (*.f64 V l)))","V","inf",0.385986328125],["(sqrt.f64 (/.f64 A (*.f64 V l)))","V","0",0.681884765625],["(sqrt.f64 (/.f64 A (*.f64 V l)))","A","-inf",0.635986328125],["(sqrt.f64 (/.f64 A (*.f64 V l)))","A","inf",0.488037109375],["(sqrt.f64 (/.f64 A (*.f64 V l)))","A","0",0.862060546875]],"time":16.1259765625,"type":"series"},{"count":[[3,196]],"inputs":[["(sqrt.f64 (/.f64 A (*.f64 V l)))","(/.f64 A (*.f64 V l))","(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) 0) (sqrt.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) 1/2) (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (/.f64 A (*.f64 V l)))) (sqrt.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) (*.f64 0 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (/.f64 A (*.f64 V l)))) (*.f64 1/2 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) (cbrt.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) (fabs.f64 (cbrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (/.f64 A (*.f64 V l)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) (pow.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) 0) (sqrt.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) (cbrt.f64 (/.f64 A V))) (cbrt.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 A V)) (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) (cbrt.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) (cbrt.f64 A)) (cbrt.f64 (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) (cbrt.f64 (neg.f64 A))) (cbrt.f64 (neg.f64 (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 A) (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) (cbrt.f64 (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 A)) (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) (cbrt.f64 (neg.f64 (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A (*.f64 V l)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 A (*.f64 V l)) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 A (*.f64 V l)) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 A (*.f64 V l)) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 A (*.f64 V l)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A (*.f64 V l)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 A (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 A (*.f64 V l)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 A (*.f64 V l)) 0) (/.f64 A (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 A (*.f64 V l)) (*.f64 (/.f64 A (*.f64 V l)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 A (*.f64 V l)) 1/2) (*.f64 (/.f64 A (*.f64 V l)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 A (*.f64 V l))) (/.f64 A (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 A (*.f64 V l)) (*.f64 0 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 A (*.f64 V l))) (*.f64 1/2 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (*.f64 V l))) (neg.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) (neg.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))) (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) 1) (*.f64 (neg.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 A V) (cbrt.f64 l)) (/.f64 1 (cbrt.f64 (*.f64 l l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 A (cbrt.f64 (*.f64 V l))) (pow.f64 (cbrt.f64 (*.f64 V l)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) (sqrt.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) (cbrt.f64 (pow.f64 (/.f64 A (*.f64 V l)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 A) (/.f64 (/.f64 -1 V) l))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 A) V) (/.f64 (cbrt.f64 (*.f64 A A)) l))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 A) (/.f64 (cbrt.f64 (*.f64 A A)) (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 A) l) (/.f64 (cbrt.f64 (*.f64 A A)) V))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 A (/.f64 1 (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 A (*.f64 V l)) 2)) (cbrt.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 V l)) A)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (/.f64 A (*.f64 V l)) 3/2)) (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) (sqrt.f64 (pow.f64 (/.f64 A (*.f64 V l)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) (pow.f64 (/.f64 A (*.f64 V l)) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 A V) (/.f64 1 l))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 V) (/.f64 A l))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (*.f64 V l))) (/.f64 A (cbrt.f64 (pow.f64 (*.f64 V l) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 l) (/.f64 A V))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 A (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 A (*.f64 V l)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 -1 V) l) (neg.f64 A))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 A A)) (*.f64 V l)) (cbrt.f64 A))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 A (cbrt.f64 (pow.f64 (*.f64 V l) 2))) (cbrt.f64 (/.f64 1 (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 A A)) l) (/.f64 (cbrt.f64 A) V))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 A A)) V) (/.f64 (cbrt.f64 A) l))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 A (*.f64 V l))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 A (*.f64 V l)) (+.f64 1/3 1/2)) (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 A l) (/.f64 1 V))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 A V)) (/.f64 -1 l))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 A (*.f64 V l)) (pow.f64 (/.f64 A (*.f64 V l)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 A (*.f64 V l)) 0) (/.f64 A (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 A l) V)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 A (*.f64 V l)) 2)) (cbrt.f64 (/.f64 A V))) (cbrt.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 A) l) (cbrt.f64 (*.f64 A A))) V)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 l) (/.f64 A (cbrt.f64 V))) (cbrt.f64 (*.f64 V V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 l) (neg.f64 A)) (neg.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 l) A) V)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 A) V) (cbrt.f64 (*.f64 A A))) l)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 A) (/.f64 (cbrt.f64 (*.f64 A A)) l)) V)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 A V)) (cbrt.f64 (pow.f64 (/.f64 A (*.f64 V l)) 2))) (cbrt.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 A (cbrt.f64 V)) (/.f64 1 l)) (cbrt.f64 (*.f64 V V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 A) (/.f64 1 l)) (neg.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 A V)) 1) (neg.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 A l) 1) V)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A l) (cbrt.f64 (*.f64 V V))) (cbrt.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A l) (cbrt.f64 V)) (cbrt.f64 (*.f64 V V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A l) -1) (neg.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 A V) (cbrt.f64 l)) (pow.f64 (cbrt.f64 (cbrt.f64 l)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 l)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 A V) (cbrt.f64 l)) (cbrt.f64 l)) (cbrt.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 A) l) (neg.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A V) (cbrt.f64 (*.f64 l l))) (cbrt.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A V) -1) (neg.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 A (cbrt.f64 V)) (*.f64 (cbrt.f64 (*.f64 V V)) l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 A (*.f64 l (cbrt.f64 V))) (cbrt.f64 (*.f64 V V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 A (cbrt.f64 l)) (*.f64 (cbrt.f64 (*.f64 l l)) V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A (cbrt.f64 (*.f64 V l))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 V l))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 V l))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 A V)) (cbrt.f64 (*.f64 A A))) (*.f64 (cbrt.f64 l) (cbrt.f64 (pow.f64 (*.f64 V l) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 A (cbrt.f64 V)) 1) (*.f64 (cbrt.f64 (*.f64 V V)) l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 A V)) (neg.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 A l)) (neg.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 A V) (cbrt.f64 l))) (neg.f64 (cbrt.f64 (*.f64 l l))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 A (*.f64 V l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 A V) l)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 A) (neg.f64 (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A V) (cbrt.f64 l)) (cbrt.f64 (*.f64 l l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 A (cbrt.f64 (*.f64 V l))) (cbrt.f64 (pow.f64 (*.f64 V l) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) (cbrt.f64 (*.f64 A A))) (cbrt.f64 (pow.f64 (*.f64 V l) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 V l))) A) (cbrt.f64 (pow.f64 (*.f64 V l) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 A (*.f64 V l)) 2)) (cbrt.f64 A)) (cbrt.f64 (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 A (*.f64 V l)) 2)) (cbrt.f64 (neg.f64 A))) (cbrt.f64 (neg.f64 (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 A (*.f64 V l)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 A) (cbrt.f64 (pow.f64 (/.f64 A (*.f64 V l)) 2))) (cbrt.f64 (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 A)) (cbrt.f64 (pow.f64 (/.f64 A (*.f64 V l)) 2))) (cbrt.f64 (neg.f64 (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 A (cbrt.f64 (pow.f64 (*.f64 V l) 2))) (cbrt.f64 (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 A V) (cbrt.f64 l)) 1) (cbrt.f64 (*.f64 l l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 A (cbrt.f64 (*.f64 V l))) 1) (cbrt.f64 (pow.f64 (*.f64 V l) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 A V) (cbrt.f64 l)) 1) (cbrt.f64 (*.f64 l l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 A) (cbrt.f64 (*.f64 V l))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 V l) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 A (*.f64 V (cbrt.f64 l))) (cbrt.f64 (*.f64 l l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 A -1) (neg.f64 (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A (cbrt.f64 (*.f64 V l))) 1) (cbrt.f64 (pow.f64 (*.f64 V l) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 A (cbrt.f64 (*.f64 V l)))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 V l) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A (*.f64 V l)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A (*.f64 V l)) 3/2) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A (*.f64 V l)) 3/2) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 A (*.f64 V l)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 A (*.f64 V l)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 A (*.f64 V l)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A (*.f64 V l)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 A (*.f64 V l))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 A (*.f64 V l)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 A (*.f64 V l)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 A (*.f64 V l)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l)))) 0) (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l)))) (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l)))) 1/2) (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))) (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l)))) (*.f64 0 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))) (*.f64 1/2 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) (*.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) c0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 c0) (*.f64 (cbrt.f64 (*.f64 c0 c0)) (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 c0 c0)) (sqrt.f64 (/.f64 A (*.f64 V l)))) (cbrt.f64 c0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) c0) (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))) (cbrt.f64 (*.f64 (/.f64 A (*.f64 V l)) (*.f64 c0 c0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 A (*.f64 V l)) (*.f64 c0 c0))) (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 c0 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) (cbrt.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) (cbrt.f64 c0)) (cbrt.f64 (*.f64 c0 c0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) (*.f64 c0 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 c0 c0)) (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) (cbrt.f64 c0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) (cbrt.f64 (/.f64 A V))) (cbrt.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) (cbrt.f64 A)) (cbrt.f64 (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) (cbrt.f64 (neg.f64 A))) (cbrt.f64 (neg.f64 (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l)))) 3))))))"]],"rules":[["egg-rr",35],["egg-rr",114],["egg-rr",47]],"time":34.118896484375,"type":"rewrite"},{"count":[[208,196]],"inputs":[["(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)"]],"time":48.30419921875,"type":"simplify"},{"compiler":[[2865,899]],"time":24.173828125,"type":"eval"},{"alts":[["(*.f64 (*.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) c0) (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))","fresh",20.059052777050294],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 (/.f64 (/.f64 A V) (cbrt.f64 l)) (cbrt.f64 l)) (cbrt.f64 l))))","fresh",20.545693223265157],["(*.f64 c0 (/.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) (cbrt.f64 A)) (cbrt.f64 (*.f64 V l))))","fresh",20.122414337631895],["(*.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))))","fresh",20.02323275525417],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A (cbrt.f64 V)) (*.f64 (cbrt.f64 (*.f64 V V)) l))))","fresh",30.60437680913507],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))","next",17.920562534810994],["(/.f64 (*.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) (cbrt.f64 A)) (cbrt.f64 (*.f64 V l)))","fresh",20.735317904938594],["(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) 2))","fresh",20.112782751757823],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A (cbrt.f64 l)) (*.f64 (cbrt.f64 (*.f64 l l)) V))))","fresh",35.51224924468487],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (cbrt.f64 A) V) (/.f64 (cbrt.f64 (*.f64 A A)) l))))","fresh",33.170464502235205]],"compiler":[[20,11],[19,11],[21,13],[20,11],[18,12],[12,8],[21,13],[15,11],[18,12],[18,12],[20,11],[19,11],[21,13],[20,11],[18,12],[12,8],[21,13],[15,11],[18,12],[18,12]],"count":[[197,10]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[196,10],"picked":[1,0]}],"min-error":[15.400773997141675],"time":70.363037109375,"type":"prune"},{"compiler":[[30,8]],"locations":[["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))",0.8757738229057016,true],["(/.f64 (/.f64 A l) V)",2.427079468511326,true],["(sqrt.f64 (/.f64 (/.f64 A l) V))",18.101403097062256,true]],"time":5.52099609375,"type":"localize"},{"count":[[3,48]],"series":[["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))","V","-inf",0.26611328125],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))","V","inf",0.27001953125],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))","V","0",0.23193359375],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))","l","-inf",0.2978515625],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))","l","inf",0.26904296875],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))","l","0",0.231201171875],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))","A","-inf",0.2841796875],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))","A","inf",0.235107421875],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))","A","0",0.30419921875],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))","c0","-inf",0.173095703125],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))","c0","inf",0.18017578125],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))","c0","0",0.155029296875],["(/.f64 (/.f64 A l) V)","V","-inf",0.141845703125],["(/.f64 (/.f64 A l) V)","V","inf",0.169921875],["(/.f64 (/.f64 A l) V)","V","0",0.139892578125],["(/.f64 (/.f64 A l) V)","l","-inf",0.142822265625],["(/.f64 (/.f64 A l) V)","l","inf",0.171875],["(/.f64 (/.f64 A l) V)","l","0",0.14306640625],["(/.f64 (/.f64 A l) V)","A","-inf",0.154052734375],["(/.f64 (/.f64 A l) V)","A","inf",0.1708984375],["(/.f64 (/.f64 A l) V)","A","0",2.074951171875],["(sqrt.f64 (/.f64 (/.f64 A l) V))","V","-inf",0.2958984375],["(sqrt.f64 (/.f64 (/.f64 A l) V))","V","inf",0.2529296875],["(sqrt.f64 (/.f64 (/.f64 A l) V))","V","0",0.254150390625],["(sqrt.f64 (/.f64 (/.f64 A l) V))","l","-inf",0.286865234375],["(sqrt.f64 (/.f64 (/.f64 A l) V))","l","inf",0.27587890625],["(sqrt.f64 (/.f64 (/.f64 A l) V))","l","0",0.22509765625],["(sqrt.f64 (/.f64 (/.f64 A l) V))","A","-inf",0.2890625],["(sqrt.f64 (/.f64 (/.f64 A l) V))","A","inf",0.27490234375],["(sqrt.f64 (/.f64 (/.f64 A l) V))","A","0",0.298095703125]],"time":8.9609375,"type":"series"},{"count":[[3,200]],"inputs":[["(sqrt.f64 (/.f64 (/.f64 A l) V))","(/.f64 (/.f64 A l) V)","(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) 1/2) (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) 0) (sqrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) (*.f64 0 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 1/2 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (/.f64 (/.f64 A l) V))) (sqrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (cbrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (fabs.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))) (fabs.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) (pow.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) 0) (sqrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (cbrt.f64 (/.f64 A l))) (cbrt.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (cbrt.f64 (neg.f64 (/.f64 A l)))) (cbrt.f64 (neg.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 A l))) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (neg.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 A l) V) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 A l) V) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 A l) V) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 A l) V) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (/.f64 A l) V))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 A l) V) (*.f64 (/.f64 (/.f64 A l) V) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 A l) V) 1/2) (*.f64 (/.f64 (/.f64 A l) V) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 A l) V) 0) (/.f64 (/.f64 A l) V))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 A l) V) (*.f64 0 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (/.f64 A l) V)) (*.f64 1/2 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (/.f64 A l) V)) (/.f64 (/.f64 A l) V))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 V)) (neg.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) (sqrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (neg.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 A l)) (/.f64 -1 V))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 A l)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 A l) 2)) V))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 A (/.f64 (/.f64 1 V) l))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 A (cbrt.f64 V)) (/.f64 (/.f64 1 l) (cbrt.f64 (*.f64 V V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 A l) (/.f64 1 V))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 V) (/.f64 A l))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2)) (cbrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3/2)) (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (pow.f64 (/.f64 (/.f64 A l) V) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (sqrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 V)) (/.f64 (/.f64 A l) (cbrt.f64 (*.f64 V V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 A l) V))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 A l) V) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 V) (neg.f64 (/.f64 A l)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 A l) 2)) V) (cbrt.f64 (/.f64 A l)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 A l) (cbrt.f64 (*.f64 V V))) (cbrt.f64 (/.f64 1 V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 l) (cbrt.f64 (*.f64 V V))) (/.f64 A (cbrt.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 V) l) A)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (/.f64 A l) V) (+.f64 1/3 1/2)) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (/.f64 A l) V)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))) (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1) (*.f64 (neg.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 A V)) (/.f64 -1 l))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 A V) (/.f64 1 l))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 A) (/.f64 1 (neg.f64 (*.f64 l V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 A l) (cbrt.f64 V)) (pow.f64 (cbrt.f64 V) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 A l) V) (pow.f64 (/.f64 (/.f64 A l) V) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (/.f64 A l) V) 0) (/.f64 (/.f64 A l) V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 A (cbrt.f64 l))) (*.f64 (neg.f64 V) (cbrt.f64 (*.f64 l l))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 V)) (/.f64 A (cbrt.f64 l))) (*.f64 (cbrt.f64 (*.f64 V V)) (cbrt.f64 (*.f64 l l))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 V)) (neg.f64 A)) (*.f64 (cbrt.f64 (*.f64 V V)) (neg.f64 l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 V)) A) (*.f64 (cbrt.f64 (*.f64 V V)) l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 A (cbrt.f64 V)) (*.f64 l (cbrt.f64 (*.f64 V V))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 A) (cbrt.f64 (/.f64 1 V))) (*.f64 (neg.f64 l) (cbrt.f64 (*.f64 V V))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 A (cbrt.f64 l)) -1) (*.f64 (cbrt.f64 (*.f64 l l)) (neg.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 A (cbrt.f64 l)) 1) (*.f64 (cbrt.f64 (*.f64 l l)) V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 A (cbrt.f64 l)) (cbrt.f64 (/.f64 1 V))) (*.f64 (cbrt.f64 (*.f64 l l)) (cbrt.f64 (*.f64 V V))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 A l)) (neg.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 A (neg.f64 (neg.f64 (*.f64 l V))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 A l) V)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 A V)) (neg.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 A V) l)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A l) (cbrt.f64 V)) (cbrt.f64 (*.f64 V V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 A) (neg.f64 (*.f64 l V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 A (*.f64 l V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 V)) (/.f64 A l)) (cbrt.f64 (*.f64 V V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2)) (cbrt.f64 (/.f64 A l))) (cbrt.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2)) (cbrt.f64 (neg.f64 (/.f64 A l)))) (cbrt.f64 (neg.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A l) V) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) (cbrt.f64 (pow.f64 (/.f64 A l) 2))) (cbrt.f64 (*.f64 V V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 A (cbrt.f64 V)) (/.f64 1 l)) (cbrt.f64 (*.f64 V V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 V) (/.f64 A (cbrt.f64 l))) (cbrt.f64 (*.f64 l l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 A (/.f64 (/.f64 1 l) (cbrt.f64 (*.f64 V V)))) (cbrt.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2))) (cbrt.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 A l))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2))) (cbrt.f64 (neg.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 A) (/.f64 (cbrt.f64 (pow.f64 (/.f64 A l) 2)) V)) (cbrt.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 A)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 A l) 2)) V)) (cbrt.f64 (neg.f64 l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 A l) (cbrt.f64 V)) 1) (cbrt.f64 (*.f64 V V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 A V) 1) l)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 A V)) 1) (neg.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A l) (cbrt.f64 (*.f64 V V))) (cbrt.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 A (/.f64 -1 V)) (neg.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 A) (/.f64 -1 V)) l)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 A (cbrt.f64 l)) (/.f64 1 V)) (cbrt.f64 (*.f64 l l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 A l)) (cbrt.f64 V)) (neg.f64 (cbrt.f64 (*.f64 V V))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 A V)) (cbrt.f64 (neg.f64 l))) (cbrt.f64 (*.f64 l l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 A V)) 1) (neg.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 A V)) -1) l)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 A V)) (cbrt.f64 l)) (neg.f64 (cbrt.f64 (*.f64 l l))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A V) (cbrt.f64 l)) (cbrt.f64 (*.f64 l l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A V) (cbrt.f64 (*.f64 l l))) (cbrt.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A V) 1) l)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A V) -1) (neg.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A l) -1) (neg.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 A l) (cbrt.f64 V)) 1) (cbrt.f64 (*.f64 V V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 A l) (cbrt.f64 V)) (pow.f64 (cbrt.f64 (cbrt.f64 V)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 V)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 A (/.f64 (*.f64 l V) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 A) (/.f64 (neg.f64 (*.f64 l V)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 A (*.f64 (neg.f64 l) (neg.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 A) (*.f64 l (neg.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 A (*.f64 (neg.f64 V) (neg.f64 l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 A) (*.f64 (neg.f64 V) l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 A (cbrt.f64 l)) (*.f64 V (cbrt.f64 (*.f64 l l))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 A (*.f64 (*.f64 l V) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 A) (*.f64 (neg.f64 (*.f64 l V)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (/.f64 A V))) l)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 A l) (cbrt.f64 V))) (neg.f64 (cbrt.f64 (*.f64 V V))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3/2) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3/2) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 A l) V) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 A l) V) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 A l) V) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (/.f64 A l) V)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 A l)) (/.f64 1 V)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 V) (neg.f64 (/.f64 A l))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 (/.f64 A l) V))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1/2) (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 0) (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 0 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (*.f64 1/2 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 c0) (*.f64 (cbrt.f64 (*.f64 c0 c0)) (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) c0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 c0 c0)) (sqrt.f64 (/.f64 (/.f64 A l) V))) (cbrt.f64 c0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) c0) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (*.f64 (*.f64 c0 c0) (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) c0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 c0 c0) (/.f64 (/.f64 A l) V))) (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 c0 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) (cbrt.f64 c0)) (cbrt.f64 (*.f64 c0 c0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 c0 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 c0 c0)) (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) (cbrt.f64 c0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (/.f64 A l))) (cbrt.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (neg.f64 (/.f64 A l)))) (cbrt.f64 (neg.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 3))))))"]],"rules":[["egg-rr",34],["egg-rr",121],["egg-rr",45]],"time":33.484130859375,"type":"rewrite"},{"count":[[248,202]],"inputs":[["(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)"]],"method":["egg-herbie"],"outputs":[["(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)"]],"time":137.7080078125,"type":"simplify"},{"compiler":[[2884,928]],"time":24.386962890625,"type":"eval"},{"alts":[["(/.f64 (*.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (/.f64 A l))) (cbrt.f64 V))","fresh",18.77706606256147],["(*.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))))","fresh",20.02323275525417],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A (cbrt.f64 l)) (*.f64 (cbrt.f64 (*.f64 l l)) V))))","fresh",35.51224924468487],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (/.f64 1 l) (cbrt.f64 (*.f64 V V))) (/.f64 A (cbrt.f64 V)))))","fresh",30.605040578671954],["(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2))","fresh",18.097377596557624],["(*.f64 c0 (sqrt.f64 (*.f64 (neg.f64 A) (/.f64 1 (neg.f64 (*.f64 l V))))))","fresh",19.938252699779635],["(*.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) c0) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))","next",18.033550112081652],["(/.f64 (*.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) (cbrt.f64 A)) (cbrt.f64 (*.f64 V l)))","fresh",20.735317904938594],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (cbrt.f64 A) V) (/.f64 (cbrt.f64 (*.f64 A A)) l))))","fresh",33.170464502235205]],"compiler":[[21,13],[20,11],[18,12],[20,14],[15,11],[16,12],[20,11],[21,13],[18,12],[21,13],[20,11],[18,12],[20,14],[15,11],[16,12],[20,11],[21,13],[18,12]],"count":[[212,9]],"kept":[{"done":[0,0],"fresh":[9,4],"new":[202,5],"picked":[1,0]}],"min-error":[15.392863485497289],"time":77.306884765625,"type":"prune"},{"compiler":[[59,11]],"locations":[["(cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))",1.7767180349854022,true],["(/.f64 (/.f64 A l) V)",2.427079468511326,false],["(sqrt.f64 (/.f64 (/.f64 A l) V))",18.101403097062256,false],["(cbrt.f64 (/.f64 (/.f64 A l) V))",20.21559443197391,true]],"time":8.72021484375,"type":"localize"},{"count":[[2,24]],"series":[["(cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","V","-inf",2.33203125],["(cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","V","inf",4.1640625],["(cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","V","0",7.35400390625],["(cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","l","-inf",1.074951171875],["(cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","l","inf",6.435791015625],["(cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","l","0",11.001220703125],["(cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","A","-inf",1.468994140625],["(cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","A","inf",4.34912109375],["(cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","A","0",16.31396484375],["(cbrt.f64 (/.f64 (/.f64 A l) V))","V","-inf",0.343017578125],["(cbrt.f64 (/.f64 (/.f64 A l) V))","V","inf",0.299072265625],["(cbrt.f64 (/.f64 (/.f64 A l) V))","V","0",0.2529296875],["(cbrt.f64 (/.f64 (/.f64 A l) V))","l","-inf",0.3310546875],["(cbrt.f64 (/.f64 (/.f64 A l) V))","l","inf",0.296875],["(cbrt.f64 (/.f64 (/.f64 A l) V))","l","0",0.2490234375],["(cbrt.f64 (/.f64 (/.f64 A l) V))","A","-inf",0.416015625],["(cbrt.f64 (/.f64 (/.f64 A l) V))","A","inf",0.326171875],["(cbrt.f64 (/.f64 (/.f64 A l) V))","A","0",0.44384765625]],"time":57.720947265625,"type":"series"},{"count":[[2,96]],"inputs":[["(cbrt.f64 (/.f64 (/.f64 A l) V))","(cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 1/2) (*.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 0) (cbrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) (*.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cbrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 1/2 (cbrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (/.f64 (/.f64 A l) V))) (cbrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) (*.f64 0 (cbrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 A l))) (neg.f64 (pow.f64 V -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 A l))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 A l) 2/3) V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 A) (cbrt.f64 (/.f64 (/.f64 1 V) l)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 V -1/3)) (cbrt.f64 (/.f64 (/.f64 A l) (pow.f64 V 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) (+.f64 1/3 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) (+.f64 1/3 1/2))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (neg.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))) 4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 A (cbrt.f64 V))) (cbrt.f64 (/.f64 (/.f64 1 l) (pow.f64 V 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 A l)) (pow.f64 V -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2/3)) (cbrt.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (/.f64 A l) V))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 V -1/3) (cbrt.f64 (/.f64 A l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (/.f64 A l))) (cbrt.f64 (neg.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2/3)) (cbrt.f64 (cbrt.f64 (/.f64 A l)))) (cbrt.f64 (cbrt.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 A l))) 1) (cbrt.f64 (neg.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 A l))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2/3))) (cbrt.f64 (cbrt.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 A)) (pow.f64 V -1/3)) (cbrt.f64 (neg.f64 l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 A) (pow.f64 V -1/3)) (cbrt.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (cbrt.f64 V))) (cbrt.f64 (pow.f64 V 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 A)) 1) (*.f64 (cbrt.f64 (neg.f64 l)) (cbrt.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 A) (*.f64 (cbrt.f64 l) (cbrt.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 A l))) 1) (*.f64 (cbrt.f64 (neg.f64 V)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 A l) (pow.f64 V 2/3))) (cbrt.f64 (cbrt.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 A V)) (cbrt.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 A)) (cbrt.f64 (neg.f64 (*.f64 l V))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 A) (cbrt.f64 (*.f64 l V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 A l) (cbrt.f64 V))) (cbrt.f64 (pow.f64 V 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (/.f64 A V))) (cbrt.f64 (neg.f64 l)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 A l) V) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 A l) V) (*.f64 2 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 A l) V) (/.f64 2/3 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 A l) V) (*.f64 1/2 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 A l) V) (*.f64 1/6 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) (*.f64 2/3 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 2 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (/.f64 A l) V))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1/2) (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 0) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (*.f64 1/2 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 0 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))) (*.f64 -1 (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) -1) (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 1) (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (cbrt.f64 (/.f64 A l)))) (cbrt.f64 (cbrt.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 A l))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))) (cbrt.f64 (cbrt.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 A l) V) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) (*.f64 2 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2) (/.f64 1/6 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2) (*.f64 1/2 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))"]],"rules":[["egg-rr",34],["egg-rr",62]],"time":26.5068359375,"type":"rewrite"},{"count":[[120,103]],"inputs":[["(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (*.f64 -1 (log.f64 (/.f64 1 A))))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (*.f64 -1 (log.f64 (/.f64 1 A))))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (*.f64 -1 (log.f64 (/.f64 1 A))))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (*.f64 -1 (log.f64 (/.f64 1 A))))))","(exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 l)) (log.f64 (/.f64 A V)))))","(exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 l)) (log.f64 (/.f64 A V)))))","(exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 l)) (log.f64 (/.f64 A V)))))","(exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 l)) (log.f64 (/.f64 A V)))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 A V)) (log.f64 (/.f64 1 l)))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 A V)) (log.f64 (/.f64 1 l)))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 A V)) (log.f64 (/.f64 1 l)))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 A V)) (log.f64 (/.f64 1 l)))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 A l)) (*.f64 -1 (log.f64 V)))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 A l)) (*.f64 -1 (log.f64 V)))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 A l)) (*.f64 -1 (log.f64 V)))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 A l)) (*.f64 -1 (log.f64 V)))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l)))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l)))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l)))))","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l)))))"]],"method":["egg-herbie"],"outputs":[["(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (*.f64 -1 (log.f64 (/.f64 1 A))))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (*.f64 -1 (log.f64 (/.f64 1 A))))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (*.f64 -1 (log.f64 (/.f64 1 A))))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (*.f64 -1 (log.f64 (/.f64 1 A))))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 l)) (log.f64 (/.f64 A V)))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 l)) (log.f64 (/.f64 A V)))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 l)) (log.f64 (/.f64 A V)))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (*.f64 -1 (log.f64 l)) (log.f64 (/.f64 A V)))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 A V)) (log.f64 (/.f64 1 l)))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 A V)) (log.f64 (/.f64 1 l)))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 A V)) (log.f64 (/.f64 1 l)))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 A V)) (log.f64 (/.f64 1 l)))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 A l)) (*.f64 -1 (log.f64 V)))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 A l)) (*.f64 -1 (log.f64 V)))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 A l)) (*.f64 -1 (log.f64 V)))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 A l)) (*.f64 -1 (log.f64 V)))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l)))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l)))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l)))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)","(exp.f64 (*.f64 1/6 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l)))))","(pow.f64 (/.f64 (/.f64 A V) l) 1/6)"]],"time":97.2431640625,"type":"simplify"},{"compiler":[[8678,2245]],"time":54.945068359375,"type":"eval"},{"alts":[["(*.f64 (*.f64 (*.f64 (pow.f64 V -1/3) (cbrt.f64 (/.f64 A l))) c0) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))","fresh",43.10714817272709],["(*.f64 c0 (sqrt.f64 (*.f64 (neg.f64 A) (/.f64 1 (neg.f64 (*.f64 l V))))))","fresh",19.938252699779635],["(/.f64 (*.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (/.f64 A l))) (cbrt.f64 V))","fresh",18.77706606256147],["(*.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))))","fresh",20.02323275525417],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A (cbrt.f64 l)) (*.f64 (cbrt.f64 (*.f64 l l)) V))))","fresh",35.51224924468487],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (/.f64 1 l) (cbrt.f64 (*.f64 V V))) (/.f64 A (cbrt.f64 V)))))","fresh",30.605040578671954],["(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2))","next",18.097377596557624],["(*.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) c0) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))","done",18.033550112081652],["(/.f64 (*.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) (cbrt.f64 A)) (cbrt.f64 (*.f64 V l)))","fresh",20.735317904938594],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (cbrt.f64 A) V) (/.f64 (cbrt.f64 (*.f64 A A)) l))))","fresh",33.170464502235205]],"compiler":[[22,14],[16,12],[21,13],[20,11],[18,12],[20,14],[15,11],[20,11],[21,13],[18,12],[22,14],[16,12],[21,13],[20,11],[18,12],[20,14],[15,11],[21,13],[18,12]],"count":[[401,10]],"kept":[{"done":[0,0],"fresh":[8,8],"new":[392,1],"picked":[1,1]}],"min-error":[15.3801762686479],"time":202.73681640625,"type":"prune"},{"compiler":[[50,14]],"locations":[["(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2))",0.8757738229057016,true],["(sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))",1.7764742826195592,true],["(/.f64 (/.f64 A l) V)",2.427079468511326,false],["(sqrt.f64 (/.f64 (/.f64 A l) V))",18.101403097062256,false]],"time":8.629150390625,"type":"localize"},{"count":[[2,36]],"series":[["(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2))","V","-inf",0.30615234375],["(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2))","V","inf",0.647216796875],["(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2))","V","0",0.279052734375],["(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2))","l","-inf",0.30810546875],["(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2))","l","inf",0.322998046875],["(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2))","l","0",0.282958984375],["(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2))","A","-inf",0.299072265625],["(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2))","A","inf",0.2890625],["(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2))","A","0",0.2880859375],["(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2))","c0","-inf",0.2548828125],["(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2))","c0","inf",0.2421875],["(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2))","c0","0",0.628173828125],["(sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","V","-inf",0.366943359375],["(sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","V","inf",0.358154296875],["(sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","V","0",0.356201171875],["(sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","l","-inf",0.39599609375],["(sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","l","inf",0.380126953125],["(sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","l","0",0.34912109375],["(sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","A","-inf",0.513916015625],["(sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","A","inf",0.43896484375],["(sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","A","0",0.448974609375]],"time":8.030029296875,"type":"series"},{"count":[[2,99]],"inputs":[["(sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))","(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1/2) (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 0) (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 0 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (*.f64 1/2 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/8) (pow.f64 (/.f64 (/.f64 A l) V) 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/8)) (neg.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/8))) (*.f64 -1 (neg.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/8)) 1) (*.f64 (neg.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/8)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/8)) -1) (*.f64 (neg.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/8)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))) (fabs.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 0) (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 2 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) -2) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 8) 8)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 2 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (cbrt.f64 2)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (cbrt.f64 4)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fabs.f64 (*.f64 2 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 A l) V) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2) (/.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2) 1/8)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/8) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/8)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (sqrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1/2) (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 0) (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 0 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (*.f64 1/2 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) c0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (*.f64 (*.f64 c0 c0) (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 c0 c0) (/.f64 (/.f64 A l) V))) (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 c0) (*.f64 (cbrt.f64 (*.f64 c0 c0)) (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 c0 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) (cbrt.f64 c0)) (cbrt.f64 (*.f64 c0 c0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 c0 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 c0 c0)) (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) (cbrt.f64 c0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 c0 c0)) (sqrt.f64 (/.f64 (/.f64 A l) V))) (cbrt.f64 c0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) c0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) c0) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 2 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) -2) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 8) 8)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 2 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (neg.f64 (/.f64 A l)))) (cbrt.f64 (neg.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (/.f64 A l))) (cbrt.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) (cbrt.f64 2)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) (cbrt.f64 4)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 c0 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (*.f64 2 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) (*.f64 2 c0)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 c0 (*.f64 2 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 3))))))"]],"rules":[["egg-rr",47],["egg-rr",52]],"time":27.77978515625,"type":"rewrite"},{"count":[[135,107]],"inputs":[["(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (*.f64 -1 (log.f64 (/.f64 1 A))))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (*.f64 -1 (log.f64 (/.f64 1 A))))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (*.f64 -1 (log.f64 (/.f64 1 A))))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (*.f64 -1 (log.f64 (/.f64 1 A))))))","(exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 l)) (log.f64 (/.f64 A V)))))","(exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 l)) (log.f64 (/.f64 A V)))))","(exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 l)) (log.f64 (/.f64 A V)))))","(exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 l)) (log.f64 (/.f64 A V)))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 A V)) (log.f64 (/.f64 1 l)))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 A V)) (log.f64 (/.f64 1 l)))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 A V)) (log.f64 (/.f64 1 l)))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 A V)) (log.f64 (/.f64 1 l)))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 A l)) (*.f64 -1 (log.f64 V)))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 A l)) (*.f64 -1 (log.f64 V)))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 A l)) (*.f64 -1 (log.f64 V)))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 A l)) (*.f64 -1 (log.f64 V)))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l)))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l)))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l)))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l)))))","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)"]],"method":["egg-herbie"],"outputs":[["(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (*.f64 -1 (log.f64 (/.f64 1 A))))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (*.f64 -1 (log.f64 (/.f64 1 A))))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (*.f64 -1 (log.f64 (/.f64 1 A))))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (*.f64 -1 (log.f64 (/.f64 1 A))))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 l)) (log.f64 (/.f64 A V)))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 l)) (log.f64 (/.f64 A V)))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 l)) (log.f64 (/.f64 A V)))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 l)) (log.f64 (/.f64 A V)))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 A V)) (log.f64 (/.f64 1 l)))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 A V)) (log.f64 (/.f64 1 l)))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 A V)) (log.f64 (/.f64 1 l)))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 A V)) (log.f64 (/.f64 1 l)))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 A l)) (*.f64 -1 (log.f64 V)))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 A l)) (*.f64 -1 (log.f64 V)))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 A l)) (*.f64 -1 (log.f64 V)))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 A l)) (*.f64 -1 (log.f64 V)))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l)))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l)))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l)))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l)))))","(sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)"]],"time":134.126220703125,"type":"simplify"},{"compiler":[[4540,1922]],"time":42.705810546875,"type":"eval"},{"alts":[["(*.f64 (*.f64 (*.f64 (pow.f64 V -1/3) (cbrt.f64 (/.f64 A l))) c0) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))","fresh",43.10714817272709],["(*.f64 c0 (sqrt.f64 (*.f64 (neg.f64 A) (/.f64 1 (neg.f64 (*.f64 l V))))))","fresh",19.938252699779635],["(*.f64 c0 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l))))) 2))","fresh",39.47624775765696],["(*.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))))","fresh",20.02323275525417],["(/.f64 (*.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (/.f64 A l))) (cbrt.f64 V))","fresh",18.77706606256147],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (cbrt.f64 A) V) (/.f64 (cbrt.f64 (*.f64 A A)) l))))","fresh",33.170464502235205],["(*.f64 c0 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A)))) 2))","fresh",39.92766621640574],["(/.f64 (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) (cbrt.f64 4)) (cbrt.f64 4))","fresh",17.96810130434788],["(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2))","done",18.097377596557624],["(*.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) c0) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))","done",18.033550112081652],["(/.f64 (*.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) (cbrt.f64 A)) (cbrt.f64 (*.f64 V l)))","fresh",20.735317904938594],["(*.f64 c0 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 A V)) (log.f64 (/.f64 1 l))))) 2))","fresh",40.28244553329164],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (/.f64 1 l) (cbrt.f64 (*.f64 V V))) (/.f64 A (cbrt.f64 V)))))","fresh",30.605040578671954]],"compiler":[[22,14],[16,12],[20,16],[20,11],[21,13],[18,12],[20,16],[18,14],[15,11],[20,11],[21,13],[20,16],[20,14]],"count":[[284,13]],"kept":[{"done":[1,1],"fresh":[8,7],"new":[274,4],"picked":[1,1]}],"min-error":[6.394393914313923],"time":97.1650390625,"type":"prune"},{"accuracy":[12.596139885888073],"baseline":[17.920562534810994],"branch":[["c0",17.92056253481099,1],["A",15.285935383282135,2],["V",15.412398287088394,2],["l",15.720704995232888,5],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))",14.98894438217386,3],["(sqrt.f64 (/.f64 A (*.f64 V l)))",14.145927980331157,3],["(sqrt.f64 (/.f64 A (*.f64 V l)))",14.145927980331157,3],["(/.f64 A (*.f64 V l))",14.145927980331157,3],["(/.f64 A (*.f64 V l))",14.145927980331157,3],["(*.f64 V l)",12.596139885888073,5],["(*.f64 V l)",12.596139885888073,5]],"compiler":[[5,4],[5,4],[5,4],[5,4],[12,8],[10,7],[10,7],[9,6],[9,6],[7,5],[7,5],[306,128]],"count":[[21,5]],"inputs":[["(*.f64 c0 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l))))) 2))","(*.f64 c0 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A)))) 2))","(/.f64 (*.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) (cbrt.f64 4)) (cbrt.f64 4))","(*.f64 c0 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 A V)) (log.f64 (/.f64 1 l))))) 2))","(*.f64 (*.f64 (*.f64 (pow.f64 V -1/3) (cbrt.f64 (/.f64 A l))) c0) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))","(/.f64 (*.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) (cbrt.f64 (/.f64 A l))) (cbrt.f64 V))","(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (/.f64 1 l) (cbrt.f64 (*.f64 V V))) (/.f64 A (cbrt.f64 V)))))","(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 2))","(*.f64 c0 (sqrt.f64 (*.f64 (neg.f64 A) (/.f64 1 (neg.f64 (*.f64 l V))))))","(*.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) c0) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))","(*.f64 (*.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) c0) (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))","(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 (/.f64 (/.f64 A V) (cbrt.f64 l)) (cbrt.f64 l)) (cbrt.f64 l))))","(*.f64 c0 (/.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) (cbrt.f64 A)) (cbrt.f64 (*.f64 V l))))","(*.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))))","(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A (cbrt.f64 V)) (*.f64 (cbrt.f64 (*.f64 V V)) l))))","(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))","(/.f64 (*.f64 (*.f64 c0 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) (cbrt.f64 A)) (cbrt.f64 (*.f64 V l)))","(*.f64 c0 (pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) 2))","(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A (cbrt.f64 l)) (*.f64 (cbrt.f64 (*.f64 l l)) V))))","(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (cbrt.f64 A) V) (/.f64 (cbrt.f64 (*.f64 A A)) l))))","(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))"]],"link":["."],"name":["Henrywood and Agarwal, Equation (3)"],"oracle":[60.13206523611033],"outputs":[["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 (/.f64 (/.f64 A V) (cbrt.f64 l)) (cbrt.f64 l)) (cbrt.f64 l))))","(*.f64 c0 (sqrt.f64 (*.f64 (neg.f64 A) (/.f64 1 (neg.f64 (*.f64 l V))))))","(*.f64 c0 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l))))) 2))","(*.f64 c0 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A)))) 2))","(*.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) c0) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))"]],"time":183.43798828125,"times":[["c0",6.994140625],["A",12.971923828125],["V",13.171142578125],["l",30.941162109375],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))",13.114990234375],["(sqrt.f64 (/.f64 A (*.f64 V l)))",12.36083984375],["(sqrt.f64 (/.f64 A (*.f64 V l)))",12.490966796875],["(/.f64 A (*.f64 V l))",12.299072265625],["(/.f64 A (*.f64 V l))",12.404052734375],["(*.f64 V l)",25.216796875],["(*.f64 V l)",25.588134765625]],"type":"regimes"},{"bstep":[[4.916527773298096e+276,6.254219659238137e+282,0.0458984375],[0.0,5.050831607917734e-306,0.01416015625],[-1.4572702358390427e-299,-7.24460827536744e-310,0.072998046875],[-8.557996774395904e+307,-1.5900440655151435e+298,0.10693359375]],"compiler":[[12,9],[7,5]],"method":["left-value","left-value","left-value","left-value"],"time":0.43408203125,"type":"bsearch"},{"compiler":[[103,61]],"inputs":[["(if (<=.f64 (*.f64 V l) -50000000000000000548953181472022770870246154838655923168405341451578792702455745768581664489247344449530624834860586257805795141871570044164153504599073023015635832251466513592848744849794279521669192233082500589213448813106472588814045597893353729061391985085892207552645901446603936636487442857715111559168) (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 (/.f64 (/.f64 A V) (cbrt.f64 l)) (cbrt.f64 l)) (cbrt.f64 l)))) (if (<=.f64 (*.f64 V l) -7540071506325551/754007150632555106105265567894716959631281531468563222724576883120202793061715911671371697267283217963528178126800104645601692562497382897388239949720868877774169386463487004356335504882384897549598543638261948036260930759551721433617559655193833844143189700366403049053003693428749228016236154394768201795621617664) (*.f64 c0 (sqrt.f64 (*.f64 (neg.f64 A) (/.f64 1 (neg.f64 (*.f64 l V)))))) (if (<=.f64 (*.f64 V l) 0) (*.f64 c0 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l))))) 2)) (if (<=.f64 (*.f64 V l) 5000000000000000014339392554976861624351030032307491891786714963455192826951136079841645978666612324808479156564299152005093968192740890223899883592402933027172967020052041660293849107704861024718326980908701245637596009600853559934996040535864898581843704726957456644770889728) (*.f64 c0 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A)))) 2)) (*.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) c0) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (*.f64 V l) -50000000000000000548953181472022770870246154838655923168405341451578792702455745768581664489247344449530624834860586257805795141871570044164153504599073023015635832251466513592848744849794279521669192233082500589213448813106472588814045597893353729061391985085892207552645901446603936636487442857715111559168) (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 (/.f64 (/.f64 A V) (cbrt.f64 l)) (cbrt.f64 l)) (cbrt.f64 l)))) (if (<=.f64 (*.f64 V l) -7540071506325551/754007150632555106105265567894716959631281531468563222724576883120202793061715911671371697267283217963528178126800104645601692562497382897388239949720868877774169386463487004356335504882384897549598543638261948036260930759551721433617559655193833844143189700366403049053003693428749228016236154394768201795621617664) (*.f64 c0 (sqrt.f64 (*.f64 (neg.f64 A) (/.f64 1 (neg.f64 (*.f64 l V)))))) (if (<=.f64 (*.f64 V l) 0) (*.f64 c0 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 V)) (log.f64 (/.f64 A l))))) 2)) (if (<=.f64 (*.f64 V l) 5000000000000000014339392554976861624351030032307491891786714963455192826951136079841645978666612324808479156564299152005093968192740890223899883592402933027172967020052041660293849107704861024718326980908701245637596009600853559934996040535864898581843704726957456644770889728) (*.f64 c0 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (/.f64 1 (*.f64 V l))) (log.f64 A)))) 2)) (*.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) c0) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))))","(if (<=.f64 (*.f64 V l) -50000000000000000548953181472022770870246154838655923168405341451578792702455745768581664489247344449530624834860586257805795141871570044164153504599073023015635832251466513592848744849794279521669192233082500589213448813106472588814045597893353729061391985085892207552645901446603936636487442857715111559168) (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 (/.f64 A V) (cbrt.f64 l)) (pow.f64 l 2/3)))) (if (<=.f64 (*.f64 V l) -7540071506325551/754007150632555106105265567894716959631281531468563222724576883120202793061715911671371697267283217963528178126800104645601692562497382897388239949720868877774169386463487004356335504882384897549598543638261948036260930759551721433617559655193833844143189700366403049053003693428749228016236154394768201795621617664) (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) (if (<=.f64 (*.f64 V l) 0) (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) (if (<=.f64 (*.f64 V l) 5000000000000000014339392554976861624351030032307491891786714963455192826951136079841645978666612324808479156564299152005093968192740890223899883592402933027172967020052041660293849107704861024718326980908701245637596009600853559934996040535864898581843704726957456644770889728) (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))"]],"stop":[["fuel",1]],"time":32.748046875,"type":"simplify"},{"time":0.0078125,"type":"soundness"},{"compiler":[[103,61]],"remove-preprocessing":[[]],"time":26.97998046875,"type":"end"}]
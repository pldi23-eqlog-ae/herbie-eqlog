[{"compiler":[[14,9]],"method":["search"],"sampling":[[12,0.18722547588549787,0.3988292689435866,0.4139452551709155],[11,0.13261804541889433,0.5012182010684683,0.3661637535126374],[10,0.10921486093320709,0.5304721816755773,0.3603129573912156],[9,0.062408491961832624,0.6864934115801589,0.2510980964580085],[8,0.0,0.8113103955038241,0.1886896044961759],[7,0.0,0.8113103955038241,0.1886896044961759],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":88.805908203125,"type":"analyze"},{"outcomes":[["body",256,"invalid",170.233154296875,4033],["body",256,"valid",383.36865234375,8256]],"time":566.1220703125,"type":"sample"},{"compiler":[[13,8]],"inputs":[["0","1","2"],["(*.f64 x (sqrt.f64 (-.f64 (*.f64 y y) (*.f64 z z))))","(*.f64 y (sqrt.f64 (-.f64 (*.f64 x x) (*.f64 z z))))","(*.f64 z (sqrt.f64 (-.f64 (*.f64 y y) (*.f64 x x))))","(*.f64 x (sqrt.f64 (-.f64 (*.f64 z z) (*.f64 y y))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(*.f64 x (sqrt.f64 (-.f64 (*.f64 y y) (*.f64 z z))))","(*.f64 x (sqrt.f64 (*.f64 (+.f64 z y) (-.f64 z y))))","(*.f64 y (sqrt.f64 (-.f64 (*.f64 x x) (*.f64 z z))))","(*.f64 y (sqrt.f64 (*.f64 (+.f64 x z) (-.f64 x z))))","(*.f64 z (sqrt.f64 (-.f64 (*.f64 y y) (*.f64 x x))))","(*.f64 z (sqrt.f64 (*.f64 (+.f64 y x) (-.f64 y x))))","(*.f64 x (sqrt.f64 (-.f64 (*.f64 z z) (*.f64 y y))))","(*.f64 x (sqrt.f64 (*.f64 (+.f64 z y) (-.f64 z y))))"]],"symmetry":[[]],"time":79.6640625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 x (sqrt.f64 (-.f64 (*.f64 y y) (*.f64 z z))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (sqrt.f64 (-.f64 (*.f64 y y) (*.f64 z z))))","(*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))"]],"time":19.076904296875,"type":"simplify"},{"compiler":[[23,13]],"time":0.3349609375,"type":"eval"},{"alts":[["(*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))","next",27.380925945078967]],"compiler":[[13,8],[13,8]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[27.380925945078967],"time":0.85107421875,"type":"prune"},{"compiler":[[37,8]],"locations":[["(*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))",0.00390625,true],["(sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))",27.965901301557608,true]],"time":6.47314453125,"type":"localize"},{"count":[[2,28]],"series":[["(*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))","z","-inf",0.36083984375],["(*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))","z","inf",0.484130859375],["(*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))","z","0",0.5078125],["(*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))","y","-inf",0.47412109375],["(*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))","y","inf",0.412841796875],["(*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))","y","0",0.5830078125],["(*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))","x","-inf",0.344970703125],["(*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))","x","inf",0.697998046875],["(*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))","x","0",0.677978515625],["(sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))","z","-inf",0.5888671875],["(sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))","z","inf",0.655029296875],["(sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))","z","0",0.694091796875],["(sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))","y","-inf",0.846923828125],["(sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))","y","inf",0.601806640625],["(sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))","y","0",1.173095703125]],"time":9.5498046875,"type":"series"},{"count":[[2,72]],"inputs":[["(sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))","(*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) 1/2) (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) 0) (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (*.f64 1/2 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 0 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (fabs.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (pow.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) 0) (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) 1/2) (*.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (*.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) 0) (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (*.f64 1/2 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (*.f64 0 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (cbrt.f64 (*.f64 (*.f64 (+.f64 y z) (-.f64 y z)) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (+.f64 y z) (-.f64 y z)) (*.f64 x x))) (cbrt.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x) (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (*.f64 x (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) 3))))))"]],"rules":[["egg-rr",32],["egg-rr",40]],"time":29.510009765625,"type":"rewrite"},{"count":[[100,99]],"inputs":[["y","(+.f64 y (*.f64 1/2 (+.f64 (*.f64 -1 z) z)))","(+.f64 y (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) (*.f64 1/2 (/.f64 (-.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) 2)) y))))","(+.f64 y (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) 2)) y)) (*.f64 -1/4 (/.f64 (*.f64 (+.f64 (*.f64 -1 z) z) (-.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) 2))) (pow.f64 y 2))))))","y","(+.f64 y (*.f64 1/2 (/.f64 (*.f64 z (+.f64 y (*.f64 -1 y))) y)))","(+.f64 y (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 y (*.f64 -1 y)) y)) 2))) y)) (*.f64 1/2 (/.f64 (*.f64 z (+.f64 y (*.f64 -1 y))) y))))","(+.f64 y (+.f64 (*.f64 1/4 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 y (*.f64 -1 y)) y)) 2) 1) (*.f64 (pow.f64 z 3) (+.f64 y (*.f64 -1 y)))) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 y (*.f64 -1 y)) y)) 2))) y)) (*.f64 1/2 (/.f64 (*.f64 z (+.f64 y (*.f64 -1 y))) y)))))","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 1/2 (*.f64 (+.f64 (*.f64 -1 z) z) x)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) 2)) x) y)) (+.f64 (*.f64 y x) (*.f64 1/2 (*.f64 (+.f64 (*.f64 -1 z) z) x))))","(+.f64 (*.f64 -1/4 (/.f64 (*.f64 (+.f64 (*.f64 -1 z) z) (*.f64 (-.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) 2)) x)) (pow.f64 y 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) 2)) x) y)) (+.f64 (*.f64 y x) (*.f64 1/2 (*.f64 (+.f64 (*.f64 -1 z) z) x)))))","(*.f64 y x)","(+.f64 (*.f64 1/2 (/.f64 (*.f64 z (*.f64 (+.f64 y (*.f64 -1 y)) x)) y)) (*.f64 y x))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 z (*.f64 (+.f64 y (*.f64 -1 y)) x)) y)) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 y (*.f64 -1 y)) y)) 2) 1) (*.f64 (pow.f64 z 2) x)) y)) (*.f64 y x)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 z (*.f64 (+.f64 y (*.f64 -1 y)) x)) y)) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (pow.f64 z 3) (*.f64 (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 y (*.f64 -1 y)) y)) 2)) (*.f64 (+.f64 y (*.f64 -1 y)) x))) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 y (*.f64 -1 y)) y)) 2) 1) (*.f64 (pow.f64 z 2) x)) y)) (*.f64 y x))))"]],"method":["egg-herbie"],"outputs":[["y","(+.f64 y (*.f64 1/2 (+.f64 (*.f64 -1 z) z)))","(fma.f64 1/2 0 y)","(+.f64 y (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) (*.f64 1/2 (/.f64 (-.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) 2)) y))))","(fma.f64 1/2 (+.f64 0 (/.f64 (-.f64 (neg.f64 (*.f64 z z)) (*.f64 (*.f64 1/2 1/2) 0)) y)) y)","(+.f64 y (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) 2)) y)) (*.f64 -1/4 (/.f64 (*.f64 (+.f64 (*.f64 -1 z) z) (-.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) 2))) (pow.f64 y 2))))))","(+.f64 y (fma.f64 1/2 (+.f64 0 (/.f64 (-.f64 (neg.f64 (*.f64 z z)) (*.f64 (*.f64 1/2 1/2) 0)) y)) (*.f64 (/.f64 (*.f64 (+.f64 (*.f64 (*.f64 1/2 1/2) 0) (*.f64 z z)) 0) (*.f64 y y)) -1/4)))","y","(+.f64 y (*.f64 1/2 (/.f64 (*.f64 z (+.f64 y (*.f64 -1 y))) y)))","(fma.f64 (/.f64 0 y) 1/2 y)","(+.f64 y (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 y (*.f64 -1 y)) y)) 2))) y)) (*.f64 1/2 (/.f64 (*.f64 z (+.f64 y (*.f64 -1 y))) y))))","(+.f64 y (/.f64 (+.f64 (*.f64 1/2 0) (*.f64 -1/2 (fma.f64 z z (pow.f64 (*.f64 (/.f64 (*.f64 1/2 0) y) z) 2)))) y))","(+.f64 y (+.f64 (*.f64 1/4 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 y (*.f64 -1 y)) y)) 2) 1) (*.f64 (pow.f64 z 3) (+.f64 y (*.f64 -1 y)))) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 y (*.f64 -1 y)) y)) 2))) y)) (*.f64 1/2 (/.f64 (*.f64 z (+.f64 y (*.f64 -1 y))) y)))))","(+.f64 y (fma.f64 1/4 (/.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 1/2 0) y) 2)) 0) (pow.f64 y 3)) (/.f64 (+.f64 (*.f64 1/2 0) (*.f64 -1/2 (fma.f64 z z (pow.f64 (*.f64 (/.f64 (*.f64 1/2 0) y) z) 2)))) y)))","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 1/2 (*.f64 (+.f64 (*.f64 -1 z) z) x)))","(*.f64 x (fma.f64 1/2 0 y))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) 2)) x) y)) (+.f64 (*.f64 y x) (*.f64 1/2 (*.f64 (+.f64 (*.f64 -1 z) z) x))))","(fma.f64 1/2 (/.f64 (*.f64 (-.f64 (neg.f64 (*.f64 z z)) (*.f64 (*.f64 1/2 1/2) 0)) x) y) (*.f64 x (fma.f64 1/2 0 y)))","(+.f64 (*.f64 -1/4 (/.f64 (*.f64 (+.f64 (*.f64 -1 z) z) (*.f64 (-.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) 2)) x)) (pow.f64 y 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) 2)) x) y)) (+.f64 (*.f64 y x) (*.f64 1/2 (*.f64 (+.f64 (*.f64 -1 z) z) x)))))","(fma.f64 -1/4 (/.f64 (*.f64 (*.f64 x (+.f64 (*.f64 (*.f64 1/2 1/2) 0) (*.f64 z z))) 0) (*.f64 y y)) (fma.f64 1/2 (/.f64 (*.f64 (-.f64 (neg.f64 (*.f64 z z)) (*.f64 (*.f64 1/2 1/2) 0)) x) y) (*.f64 x (fma.f64 1/2 0 y))))","(*.f64 y x)","(+.f64 (*.f64 1/2 (/.f64 (*.f64 z (*.f64 (+.f64 y (*.f64 -1 y)) x)) y)) (*.f64 y x))","(fma.f64 x y (/.f64 (*.f64 x (*.f64 1/2 0)) y))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 z (*.f64 (+.f64 y (*.f64 -1 y)) x)) y)) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 y (*.f64 -1 y)) y)) 2) 1) (*.f64 (pow.f64 z 2) x)) y)) (*.f64 y x)))","(+.f64 (/.f64 (+.f64 (*.f64 x (*.f64 1/2 0)) (*.f64 -1/2 (*.f64 (fma.f64 z z (pow.f64 (*.f64 (/.f64 (*.f64 1/2 0) y) z) 2)) x))) y) (*.f64 y x))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 z (*.f64 (+.f64 y (*.f64 -1 y)) x)) y)) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (pow.f64 z 3) (*.f64 (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 y (*.f64 -1 y)) y)) 2)) (*.f64 (+.f64 y (*.f64 -1 y)) x))) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 y (*.f64 -1 y)) y)) 2) 1) (*.f64 (pow.f64 z 2) x)) y)) (*.f64 y x))))","(fma.f64 1/2 (/.f64 (*.f64 0 x) y) (fma.f64 (pow.f64 (/.f64 (*.f64 z (cbrt.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 1/2 0) y) 2)) (*.f64 0 x)))) y) 3) 1/4 (fma.f64 -1/2 (/.f64 (*.f64 (fma.f64 z z (pow.f64 (*.f64 (/.f64 (*.f64 1/2 0) y) z) 2)) x) y) (*.f64 y x))))"]],"time":103.656982421875,"type":"simplify"},{"compiler":[[2000,767]],"time":17.362060546875,"type":"eval"},{"alts":[["(*.f64 x y)","fresh",31.46227721523422],["(*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))","next",27.592527214615853],["(*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))","done",27.380925945078967]],"compiler":[[6,4],[23,11],[13,8],[6,4],[23,11]],"count":[[100,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[99,2],"picked":[1,1]}],"min-error":[14.313608950623474],"time":22.653076171875,"type":"prune"},{"compiler":[[75,11]],"locations":[["(*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))",0.23828125,true],["(*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))",0.32650375976844204,true],["(sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))",27.965901301557608,false],["(cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))",28.646469683142914,true]],"time":10.8310546875,"type":"localize"},{"count":[[3,60]],"series":[["(*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))","z","-inf",0.74609375],["(*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))","z","inf",1.35791015625],["(*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))","z","0",1.759033203125],["(*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))","y","-inf",1.8310546875],["(*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))","y","inf",13.884033203125],["(*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))","y","0",2.553955078125],["(*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))","x","-inf",0.362060546875],["(*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))","x","inf",0.35791015625],["(*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))","x","0",12.35400390625],["(*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))","x","-inf",0.299072265625],["(*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))","x","inf",0.316162109375],["(*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))","x","0",0.6201171875],["(*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))","z","-inf",0.299072265625],["(*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))","z","inf",0.423095703125],["(*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))","z","0",0.3701171875],["(*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))","y","-inf",32.906982421875],["(*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))","y","inf",0.599853515625],["(*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))","y","0",0.4189453125],["(cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))","z","-inf",0.2919921875],["(cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))","z","inf",0.464111328125],["(cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))","z","0",1.15185546875],["(cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))","y","-inf",1.18408203125],["(cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))","y","inf",0.445068359375],["(cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))","y","0",1.927978515625]],"time":77.98681640625,"type":"series"},{"count":[[3,114]],"inputs":[["(cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))","(*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))","(*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) 0) (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) 1/2) (*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 0 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (*.f64 1/2 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) (+.f64 1/3 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) (+.f64 1/3 1/2))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (neg.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) 2/3)) (pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (*.f64 (pow.f64 (+.f64 y z) 2/3) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (*.f64 (cbrt.f64 (-.f64 y z)) (pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 y z) (cbrt.f64 (+.f64 y z)))) (cbrt.f64 (pow.f64 (+.f64 y z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 y z))) (cbrt.f64 (*.f64 (pow.f64 (-.f64 y z) 2/3) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 y z) (cbrt.f64 (-.f64 y z)))) (cbrt.f64 (pow.f64 (-.f64 y z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 y z)) (cbrt.f64 (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 y z)) (cbrt.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (*.f64 (-.f64 z y) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 z y) (+.f64 y z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) (*.f64 2 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) (/.f64 2/3 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (*.f64 2 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 2/3 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) (*.f64 1/2 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) (*.f64 1/6 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (*.f64 (-.f64 z y) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x) 0) (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x) (*.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x) 1/2) (*.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x)) (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x) (*.f64 0 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x)) (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x)) (cbrt.f64 (*.f64 (*.f64 x x) (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) (*.f64 (+.f64 y z) (-.f64 y z)))) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 y z)) (*.f64 (cbrt.f64 (-.f64 y z)) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x) (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (+.f64 y z) (-.f64 y z)) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))) (*.f64 (pow.f64 x 2/3) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (cbrt.f64 (+.f64 y z))) (cbrt.f64 (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))) (cbrt.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x x)) (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) 2/3)) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (*.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (cbrt.f64 (*.f64 (*.f64 (+.f64 y z) (-.f64 y z)) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x x)) (*.f64 (+.f64 y z) (-.f64 y z)))) (cbrt.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) 2/3)) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 y z)) (*.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (cbrt.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (-.f64 y z)) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))) (cbrt.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 y z) (-.f64 y z)) 2/3)) (*.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) 0) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (*.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) 1/2) (*.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (*.f64 0 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))) (*.f64 1/2 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))) (*.f64 (pow.f64 x 2/3) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (cbrt.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) x) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (*.f64 x (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (pow.f64 x 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (pow.f64 x 3)))))))"]],"rules":[["egg-rr",30],["egg-rr",40],["egg-rr",44]],"time":36.254150390625,"type":"rewrite"},{"count":[[174,184]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 2)) 1/3) (cbrt.f64 -1))","(+.f64 (*.f64 1/3 (*.f64 (*.f64 (+.f64 (*.f64 -1 z) z) y) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))) (*.f64 (pow.f64 (*.f64 1 (pow.f64 z 2)) 1/3) (cbrt.f64 -1)))","(+.f64 (*.f64 1/3 (*.f64 (*.f64 (+.f64 (*.f64 -1 z) z) y) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))) (+.f64 (*.f64 1/3 (*.f64 (/.f64 (*.f64 (-.f64 1 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 2) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))) (pow.f64 y 2)) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (/.f64 1 (pow.f64 z 4)) 1/3))) (*.f64 (pow.f64 (*.f64 1 (pow.f64 z 2)) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 -1/3 (*.f64 (/.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (*.f64 (-.f64 1 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 2) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))) (+.f64 (*.f64 -1 z) z)) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 10)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3)))) (*.f64 1/27 (*.f64 (/.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 3) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (/.f64 1 (pow.f64 z 4)) 1/3)))) (pow.f64 y 3)) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (/.f64 1 (pow.f64 z 4)) 1/3))) (+.f64 (*.f64 1/3 (*.f64 (*.f64 (+.f64 (*.f64 -1 z) z) y) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))) (+.f64 (*.f64 1/3 (*.f64 (/.f64 (*.f64 (-.f64 1 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 2) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))) (pow.f64 y 2)) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (/.f64 1 (pow.f64 z 4)) 1/3))) (*.f64 (pow.f64 (*.f64 1 (pow.f64 z 2)) 1/3) (cbrt.f64 -1)))))","(pow.f64 (pow.f64 y 2) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/9) (*.f64 z (+.f64 y (*.f64 -1 y))))) (pow.f64 (pow.f64 y 2) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/9) (*.f64 z (+.f64 y (*.f64 -1 y))))) (+.f64 (pow.f64 (pow.f64 y 2) 1/3) (*.f64 -1/3 (*.f64 (*.f64 (+.f64 1 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/9) (pow.f64 (+.f64 y (*.f64 -1 y)) 2)))) (pow.f64 z 2)) (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/3)))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/9) (*.f64 z (+.f64 y (*.f64 -1 y))))) (+.f64 (pow.f64 (pow.f64 y 2) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (*.f64 (+.f64 1 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/9) (pow.f64 (+.f64 y (*.f64 -1 y)) 2)))) (pow.f64 z 2)) (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/3))) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/3) (*.f64 (pow.f64 z 3) (+.f64 (*.f64 -2/3 (*.f64 (*.f64 (+.f64 1 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/9) (pow.f64 (+.f64 y (*.f64 -1 y)) 2)))) (+.f64 y (*.f64 -1 y))) (pow.f64 (/.f64 1 (pow.f64 y 10)) 1/9))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/3) (pow.f64 (+.f64 y (*.f64 -1 y)) 3))))))))))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 1/2 (*.f64 (+.f64 (*.f64 -1 z) z) x)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) 2)) x) y)) (+.f64 (*.f64 y x) (*.f64 1/2 (*.f64 (+.f64 (*.f64 -1 z) z) x))))","(+.f64 (*.f64 -1/4 (/.f64 (*.f64 (+.f64 (*.f64 -1 z) z) (*.f64 (-.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) 2)) x)) (pow.f64 y 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) 2)) x) y)) (+.f64 (*.f64 y x) (*.f64 1/2 (*.f64 (+.f64 (*.f64 -1 z) z) x)))))","(*.f64 y x)","(+.f64 (*.f64 1/2 (/.f64 (*.f64 z (*.f64 (+.f64 y (*.f64 -1 y)) x)) y)) (*.f64 y x))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 z (*.f64 (+.f64 y (*.f64 -1 y)) x)) y)) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 y (*.f64 -1 y)) y)) 2) 1) (*.f64 (pow.f64 z 2) x)) y)) (*.f64 y x)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 z (*.f64 (+.f64 y (*.f64 -1 y)) x)) y)) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (pow.f64 z 3) (*.f64 (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 y (*.f64 -1 y)) y)) 2)) (*.f64 (+.f64 y (*.f64 -1 y)) x))) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 y (*.f64 -1 y)) y)) 2) 1) (*.f64 (pow.f64 z 2) x)) y)) (*.f64 y x))))","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (*.f64 1 z) 1/3) x))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 -1 1/6) (*.f64 (*.f64 (+.f64 (*.f64 -1 z) z) (*.f64 y x)) (pow.f64 (/.f64 1 (pow.f64 z 5)) 1/3)))) (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (*.f64 1 z) 1/3) x)))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 -1 1/6) (*.f64 (*.f64 (+.f64 (*.f64 -1 z) z) (*.f64 y x)) (pow.f64 (/.f64 1 (pow.f64 z 5)) 1/3)))) (+.f64 (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (*.f64 1 z) 1/3) x)) (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (*.f64 1 z) 1/3) (*.f64 (pow.f64 y 2) (*.f64 (+.f64 (*.f64 1/12 (-.f64 (*.f64 -1 (/.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 2) (pow.f64 z 4))) (*.f64 2 (/.f64 1 (pow.f64 z 2))))) (*.f64 1/72 (/.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 2) (pow.f64 z 4)))) x))))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 -1 1/6) (*.f64 (*.f64 (+.f64 (*.f64 -1 z) z) (*.f64 y x)) (pow.f64 (/.f64 1 (pow.f64 z 5)) 1/3)))) (+.f64 (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (*.f64 1 z) 1/3) x)) (+.f64 (*.f64 (pow.f64 -1 1/6) (*.f64 (*.f64 (+.f64 (*.f64 -1/72 (/.f64 (*.f64 (+.f64 (*.f64 -1 z) z) (-.f64 (*.f64 -1 (/.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 2) (pow.f64 z 4))) (*.f64 2 (/.f64 1 (pow.f64 z 2))))) (pow.f64 z 2))) (+.f64 (*.f64 -1/1296 (/.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 3) (pow.f64 z 6))) (*.f64 1/36 (+.f64 (*.f64 -6 (/.f64 (+.f64 (*.f64 -1 z) z) (pow.f64 z 4))) (*.f64 -2 (/.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 3) (pow.f64 z 6))))))) (*.f64 (pow.f64 y 3) x)) (pow.f64 (*.f64 1 z) 1/3))) (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (*.f64 1 z) 1/3) (*.f64 (pow.f64 y 2) (*.f64 (+.f64 (*.f64 1/12 (-.f64 (*.f64 -1 (/.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 2) (pow.f64 z 4))) (*.f64 2 (/.f64 1 (pow.f64 z 2))))) (*.f64 1/72 (/.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 2) (pow.f64 z 4)))) x)))))))","(*.f64 (pow.f64 (*.f64 1 y) 1/3) x)","(+.f64 (*.f64 1/6 (*.f64 (*.f64 (+.f64 (*.f64 -1 z) z) x) (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3))) (*.f64 (pow.f64 (*.f64 1 y) 1/3) x))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (*.f64 (+.f64 (*.f64 1/12 (+.f64 (*.f64 -2 (pow.f64 z 2)) (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 z) z) 2)))) (*.f64 1/72 (pow.f64 (+.f64 (*.f64 -1 z) z) 2))) x)) (+.f64 (*.f64 1/6 (*.f64 (*.f64 (+.f64 (*.f64 -1 z) z) x) (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3))) (*.f64 (pow.f64 (*.f64 1 y) 1/3) x)))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 8)) 1/3) (*.f64 (+.f64 (*.f64 1/36 (+.f64 (*.f64 6 (*.f64 (+.f64 (*.f64 -1 z) z) (pow.f64 z 2))) (*.f64 2 (pow.f64 (+.f64 (*.f64 -1 z) z) 3)))) (+.f64 (*.f64 1/1296 (pow.f64 (+.f64 (*.f64 -1 z) z) 3)) (*.f64 1/72 (*.f64 (+.f64 (*.f64 -2 (pow.f64 z 2)) (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 z) z) 2))) (+.f64 (*.f64 -1 z) z))))) x)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (*.f64 (+.f64 (*.f64 1/12 (+.f64 (*.f64 -2 (pow.f64 z 2)) (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 z) z) 2)))) (*.f64 1/72 (pow.f64 (+.f64 (*.f64 -1 z) z) 2))) x)) (+.f64 (*.f64 1/6 (*.f64 (*.f64 (+.f64 (*.f64 -1 z) z) x) (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3))) (*.f64 (pow.f64 (*.f64 1 y) 1/3) x))))","(*.f64 (pow.f64 (*.f64 1 y) 1/3) x)","(+.f64 (*.f64 1/12 (*.f64 (pow.f64 (*.f64 1 y) 1/3) (*.f64 (-.f64 (*.f64 -1 (/.f64 (pow.f64 (+.f64 y (*.f64 -1 y)) 2) (pow.f64 y 4))) (*.f64 2 (/.f64 1 (pow.f64 y 2)))) (*.f64 (pow.f64 z 2) x)))) (*.f64 (pow.f64 (*.f64 1 y) 1/3) x))","(+.f64 (*.f64 1/12 (*.f64 (pow.f64 (*.f64 1 y) 1/3) (*.f64 (-.f64 (*.f64 -1 (/.f64 (pow.f64 (+.f64 y (*.f64 -1 y)) 2) (pow.f64 y 4))) (*.f64 2 (/.f64 1 (pow.f64 y 2)))) (*.f64 (pow.f64 z 2) x)))) (+.f64 (*.f64 1/36 (*.f64 (*.f64 (+.f64 (*.f64 2 (/.f64 (pow.f64 (+.f64 y (*.f64 -1 y)) 3) (pow.f64 y 6))) (*.f64 6 (/.f64 (+.f64 y (*.f64 -1 y)) (pow.f64 y 4)))) (*.f64 (pow.f64 z 3) x)) (pow.f64 (*.f64 1 y) 1/3))) (*.f64 (pow.f64 (*.f64 1 y) 1/3) x)))","(+.f64 (*.f64 1/12 (*.f64 (pow.f64 (*.f64 1 y) 1/3) (*.f64 (-.f64 (*.f64 -1 (/.f64 (pow.f64 (+.f64 y (*.f64 -1 y)) 2) (pow.f64 y 4))) (*.f64 2 (/.f64 1 (pow.f64 y 2)))) (*.f64 (pow.f64 z 2) x)))) (+.f64 (*.f64 (*.f64 (+.f64 (*.f64 1/144 (-.f64 (+.f64 (*.f64 -24 (/.f64 (pow.f64 (+.f64 y (*.f64 -1 y)) 2) (pow.f64 y 6))) (*.f64 -6 (/.f64 (pow.f64 (+.f64 y (*.f64 -1 y)) 4) (pow.f64 y 8)))) (*.f64 12 (/.f64 1 (pow.f64 y 4))))) (*.f64 1/288 (pow.f64 (-.f64 (*.f64 -1 (/.f64 (pow.f64 (+.f64 y (*.f64 -1 y)) 2) (pow.f64 y 4))) (*.f64 2 (/.f64 1 (pow.f64 y 2)))) 2))) (*.f64 (pow.f64 z 4) x)) (pow.f64 (*.f64 1 y) 1/3)) (+.f64 (*.f64 1/36 (*.f64 (*.f64 (+.f64 (*.f64 2 (/.f64 (pow.f64 (+.f64 y (*.f64 -1 y)) 3) (pow.f64 y 6))) (*.f64 6 (/.f64 (+.f64 y (*.f64 -1 y)) (pow.f64 y 4)))) (*.f64 (pow.f64 z 3) x)) (pow.f64 (*.f64 1 y) 1/3))) (*.f64 (pow.f64 (*.f64 1 y) 1/3) x))))","(*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) x)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) (*.f64 (+.f64 y (*.f64 -1 y)) x)) z)) (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) x))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) (*.f64 x (+.f64 (*.f64 1/72 (pow.f64 (+.f64 y (*.f64 -1 y)) 2)) (*.f64 1/12 (+.f64 (*.f64 -2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 (+.f64 y (*.f64 -1 y)) 2))))))) (pow.f64 z 2)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) (*.f64 (+.f64 y (*.f64 -1 y)) x)) z)) (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) x)))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) (*.f64 (+.f64 (*.f64 1/72 (pow.f64 (+.f64 y (*.f64 -1 y)) 2)) (*.f64 1/12 (+.f64 (*.f64 -2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 (+.f64 y (*.f64 -1 y)) 2))))) x)) (pow.f64 z 2)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1/72 (*.f64 (+.f64 (*.f64 -2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 (+.f64 y (*.f64 -1 y)) 2))) (+.f64 y (*.f64 -1 y)))) (+.f64 (*.f64 1/36 (+.f64 (*.f64 -2 (pow.f64 (+.f64 y (*.f64 -1 y)) 3)) (*.f64 -6 (*.f64 (pow.f64 y 2) (+.f64 y (*.f64 -1 y)))))) (*.f64 -1/1296 (pow.f64 (+.f64 y (*.f64 -1 y)) 3)))) (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) x)) (pow.f64 z 3)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) (*.f64 (+.f64 y (*.f64 -1 y)) x)) z)) (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) x))))","(*.f64 x (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z)))))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (+.f64 y (*.f64 -1 y)) (*.f64 x (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z)))))))) z)) (*.f64 x (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z))))))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (+.f64 y (*.f64 -1 y)) (*.f64 x (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z)))))))) z)) (+.f64 (*.f64 x (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z))))))) (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z)))))) (*.f64 x (+.f64 (*.f64 1/72 (pow.f64 (+.f64 y (*.f64 -1 y)) 2)) (*.f64 1/12 (+.f64 (*.f64 -2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 (+.f64 y (*.f64 -1 y)) 2))))))) (pow.f64 z 2))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (+.f64 y (*.f64 -1 y)) (*.f64 x (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z)))))))) z)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/72 (pow.f64 (+.f64 y (*.f64 -1 y)) 2)) (*.f64 1/12 (+.f64 (*.f64 -2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 (+.f64 y (*.f64 -1 y)) 2))))) (*.f64 x (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z)))))))) (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1/72 (*.f64 (+.f64 (*.f64 -2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 (+.f64 y (*.f64 -1 y)) 2))) (+.f64 y (*.f64 -1 y)))) (+.f64 (*.f64 1/36 (+.f64 (*.f64 -2 (pow.f64 (+.f64 y (*.f64 -1 y)) 3)) (*.f64 -6 (*.f64 (pow.f64 y 2) (+.f64 y (*.f64 -1 y)))))) (*.f64 -1/1296 (pow.f64 (+.f64 y (*.f64 -1 y)) 3)))) (*.f64 x (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z)))))))) (pow.f64 z 3))) (*.f64 x (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z))))))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 2)) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 (*.f64 z z)) -1)","(+.f64 (*.f64 1/3 (*.f64 (*.f64 (+.f64 (*.f64 -1 z) z) y) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))) (*.f64 (pow.f64 (*.f64 1 (pow.f64 z 2)) 1/3) (cbrt.f64 -1)))","(fma.f64 1/3 (*.f64 (*.f64 (*.f64 0 z) y) (*.f64 (pow.f64 (pow.f64 z -4) 1/9) (cbrt.f64 (pow.f64 -1 -2)))) (*.f64 (cbrt.f64 (*.f64 z z)) -1))","(+.f64 (*.f64 1/3 (*.f64 (*.f64 (+.f64 (*.f64 -1 z) z) y) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))) (+.f64 (*.f64 1/3 (*.f64 (/.f64 (*.f64 (-.f64 1 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 2) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))) (pow.f64 y 2)) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (/.f64 1 (pow.f64 z 4)) 1/3))) (*.f64 (pow.f64 (*.f64 1 (pow.f64 z 2)) 1/3) (cbrt.f64 -1))))","(fma.f64 1/3 (*.f64 (*.f64 (*.f64 0 z) y) (*.f64 (pow.f64 (pow.f64 z -4) 1/9) (cbrt.f64 (pow.f64 -1 -2)))) (fma.f64 1/3 (*.f64 (/.f64 (*.f64 (+.f64 1 (*.f64 -1/3 (*.f64 (pow.f64 (pow.f64 z -2) 1/9) (*.f64 (pow.f64 (*.f64 0 z) 2) (cbrt.f64 (/.f64 -1 1)))))) (*.f64 y y)) (*.f64 -1 -1)) (cbrt.f64 (pow.f64 z -4))) (*.f64 (cbrt.f64 (*.f64 z z)) -1)))","(+.f64 (*.f64 -1/3 (*.f64 (/.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (*.f64 (-.f64 1 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 2) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))) (+.f64 (*.f64 -1 z) z)) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 10)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3)))) (*.f64 1/27 (*.f64 (/.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 3) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (/.f64 1 (pow.f64 z 4)) 1/3)))) (pow.f64 y 3)) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (/.f64 1 (pow.f64 z 4)) 1/3))) (+.f64 (*.f64 1/3 (*.f64 (*.f64 (+.f64 (*.f64 -1 z) z) y) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))) (+.f64 (*.f64 1/3 (*.f64 (/.f64 (*.f64 (-.f64 1 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 2) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))) (pow.f64 y 2)) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (/.f64 1 (pow.f64 z 4)) 1/3))) (*.f64 (pow.f64 (*.f64 1 (pow.f64 z 2)) 1/3) (cbrt.f64 -1)))))","(fma.f64 -1/3 (*.f64 (/.f64 (*.f64 (fma.f64 2/3 (*.f64 (*.f64 (+.f64 1 (*.f64 -1/3 (*.f64 (pow.f64 (pow.f64 z -2) 1/9) (*.f64 (pow.f64 (*.f64 0 z) 2) (cbrt.f64 (/.f64 -1 1)))))) (*.f64 0 z)) (*.f64 (pow.f64 (pow.f64 z -10) 1/9) (cbrt.f64 (pow.f64 -1 -5)))) (*.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 0 z) 3) (pow.f64 -1 -2))) (cbrt.f64 (pow.f64 z -4)))) (pow.f64 y 3)) (*.f64 -1 -1)) (cbrt.f64 (pow.f64 z -4))) (fma.f64 1/3 (*.f64 (*.f64 (*.f64 0 z) y) (*.f64 (pow.f64 (pow.f64 z -4) 1/9) (cbrt.f64 (pow.f64 -1 -2)))) (fma.f64 1/3 (*.f64 (/.f64 (*.f64 (+.f64 1 (*.f64 -1/3 (*.f64 (pow.f64 (pow.f64 z -2) 1/9) (*.f64 (pow.f64 (*.f64 0 z) 2) (cbrt.f64 (/.f64 -1 1)))))) (*.f64 y y)) (*.f64 -1 -1)) (cbrt.f64 (pow.f64 z -4))) (*.f64 (cbrt.f64 (*.f64 z z)) -1))))","(pow.f64 (pow.f64 y 2) 1/3)","(cbrt.f64 (*.f64 y y))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/9) (*.f64 z (+.f64 y (*.f64 -1 y))))) (pow.f64 (pow.f64 y 2) 1/3))","(fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 y -4) 1/9) (*.f64 z (*.f64 0 y))) (cbrt.f64 (*.f64 y y)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/9) (*.f64 z (+.f64 y (*.f64 -1 y))))) (+.f64 (pow.f64 (pow.f64 y 2) 1/3) (*.f64 -1/3 (*.f64 (*.f64 (+.f64 1 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/9) (pow.f64 (+.f64 y (*.f64 -1 y)) 2)))) (pow.f64 z 2)) (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/3)))))","(+.f64 (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 y -4) 1/9) (*.f64 z (*.f64 0 y))) (cbrt.f64 (*.f64 y y))) (*.f64 -1/3 (*.f64 (+.f64 1 (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 y -2) 1/9) (pow.f64 (*.f64 0 y) 2)))) (*.f64 (*.f64 z z) (cbrt.f64 (pow.f64 y -4))))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/9) (*.f64 z (+.f64 y (*.f64 -1 y))))) (+.f64 (pow.f64 (pow.f64 y 2) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (*.f64 (+.f64 1 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/9) (pow.f64 (+.f64 y (*.f64 -1 y)) 2)))) (pow.f64 z 2)) (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/3))) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/3) (*.f64 (pow.f64 z 3) (+.f64 (*.f64 -2/3 (*.f64 (*.f64 (+.f64 1 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/9) (pow.f64 (+.f64 y (*.f64 -1 y)) 2)))) (+.f64 y (*.f64 -1 y))) (pow.f64 (/.f64 1 (pow.f64 y 10)) 1/9))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/3) (pow.f64 (+.f64 y (*.f64 -1 y)) 3))))))))))","(+.f64 (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 y -4) 1/9) (*.f64 z (*.f64 0 y))) (cbrt.f64 (*.f64 y y))) (*.f64 -1/3 (+.f64 (*.f64 (+.f64 1 (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 y -2) 1/9) (pow.f64 (*.f64 0 y) 2)))) (*.f64 (*.f64 z z) (cbrt.f64 (pow.f64 y -4)))) (*.f64 (*.f64 (cbrt.f64 (pow.f64 y -4)) (pow.f64 z 3)) (fma.f64 -2/3 (*.f64 (*.f64 (+.f64 1 (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 y -2) 1/9) (pow.f64 (*.f64 0 y) 2)))) (*.f64 0 y)) (pow.f64 (pow.f64 y -10) 1/9)) (*.f64 1/27 (*.f64 (cbrt.f64 (pow.f64 y -4)) (pow.f64 (*.f64 0 y) 3))))))))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 1/2 (*.f64 (+.f64 (*.f64 -1 z) z) x)))","(fma.f64 y x (*.f64 1/2 (*.f64 (*.f64 0 z) x)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) 2)) x) y)) (+.f64 (*.f64 y x) (*.f64 1/2 (*.f64 (+.f64 (*.f64 -1 z) z) x))))","(fma.f64 1/2 (/.f64 (*.f64 (-.f64 (neg.f64 (*.f64 z z)) (pow.f64 (*.f64 1/2 (*.f64 0 z)) 2)) x) y) (fma.f64 y x (*.f64 1/2 (*.f64 (*.f64 0 z) x))))","(+.f64 (*.f64 -1/4 (/.f64 (*.f64 (+.f64 (*.f64 -1 z) z) (*.f64 (-.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) 2)) x)) (pow.f64 y 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 z 2)) (pow.f64 (*.f64 1/2 (+.f64 (*.f64 -1 z) z)) 2)) x) y)) (+.f64 (*.f64 y x) (*.f64 1/2 (*.f64 (+.f64 (*.f64 -1 z) z) x)))))","(fma.f64 -1/4 (*.f64 (*.f64 (*.f64 0 z) (*.f64 (-.f64 (neg.f64 (*.f64 z z)) (pow.f64 (*.f64 1/2 (*.f64 0 z)) 2)) x)) (pow.f64 y -2)) (fma.f64 1/2 (/.f64 (*.f64 (-.f64 (neg.f64 (*.f64 z z)) (pow.f64 (*.f64 1/2 (*.f64 0 z)) 2)) x) y) (fma.f64 y x (*.f64 1/2 (*.f64 (*.f64 0 z) x)))))","(*.f64 y x)","(+.f64 (*.f64 1/2 (/.f64 (*.f64 z (*.f64 (+.f64 y (*.f64 -1 y)) x)) y)) (*.f64 y x))","(fma.f64 1/2 (/.f64 (*.f64 z (*.f64 (*.f64 0 y) x)) y) (*.f64 y x))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 z (*.f64 (+.f64 y (*.f64 -1 y)) x)) y)) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 y (*.f64 -1 y)) y)) 2) 1) (*.f64 (pow.f64 z 2) x)) y)) (*.f64 y x)))","(fma.f64 1/2 (/.f64 (*.f64 z (*.f64 (*.f64 0 y) x)) y) (fma.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (*.f64 0 y) y)) 2) 1) (*.f64 (*.f64 z z) x)) y) (*.f64 y x)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 z (*.f64 (+.f64 y (*.f64 -1 y)) x)) y)) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (pow.f64 z 3) (*.f64 (+.f64 1 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 y (*.f64 -1 y)) y)) 2)) (*.f64 (+.f64 y (*.f64 -1 y)) x))) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (+.f64 y (*.f64 -1 y)) y)) 2) 1) (*.f64 (pow.f64 z 2) x)) y)) (*.f64 y x))))","(fma.f64 1/2 (/.f64 (*.f64 z (*.f64 (*.f64 0 y) x)) y) (fma.f64 1/4 (/.f64 (*.f64 (pow.f64 z 3) (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (*.f64 0 y) y)) 2) 1) (*.f64 (*.f64 0 y) x))) (pow.f64 y 3)) (fma.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (*.f64 0 y) y)) 2) 1) (*.f64 (*.f64 z z) x)) y) (*.f64 y x))))","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 y z))) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 (-.f64 y z) (+.f64 y z)) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 (-.f64 y z) (+.f64 y z)) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 (-.f64 y z) (+.f64 y z)) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 (-.f64 y z) (+.f64 y z)) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 (-.f64 y z) (+.f64 y z)) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 (-.f64 y z) (+.f64 y z)) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 (-.f64 y z) (+.f64 y z)) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 (-.f64 y z) (+.f64 y z)) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 (-.f64 y z) (+.f64 y z)) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 (-.f64 y z) (+.f64 y z)) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 (-.f64 y z) (+.f64 y z)) 1/6) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (-.f64 y z) (+.f64 y z))) 1/6) x)","(*.f64 (pow.f64 (*.f64 (-.f64 y z) (+.f64 y z)) 1/6) x)","(*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (*.f64 1 z) 1/3) x))","(*.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 z) x))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 -1 1/6) (*.f64 (*.f64 (+.f64 (*.f64 -1 z) z) (*.f64 y x)) (pow.f64 (/.f64 1 (pow.f64 z 5)) 1/3)))) (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (*.f64 1 z) 1/3) x)))","(fma.f64 -1/6 (*.f64 (pow.f64 -1 1/6) (*.f64 (*.f64 (*.f64 0 z) (*.f64 y x)) (cbrt.f64 (pow.f64 z -5)))) (*.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 z) x)))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 -1 1/6) (*.f64 (*.f64 (+.f64 (*.f64 -1 z) z) (*.f64 y x)) (pow.f64 (/.f64 1 (pow.f64 z 5)) 1/3)))) (+.f64 (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (*.f64 1 z) 1/3) x)) (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (*.f64 1 z) 1/3) (*.f64 (pow.f64 y 2) (*.f64 (+.f64 (*.f64 1/12 (-.f64 (*.f64 -1 (/.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 2) (pow.f64 z 4))) (*.f64 2 (/.f64 1 (pow.f64 z 2))))) (*.f64 1/72 (/.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 2) (pow.f64 z 4)))) x))))))","(fma.f64 -1/6 (*.f64 (pow.f64 -1 1/6) (*.f64 (*.f64 (*.f64 0 z) (*.f64 y x)) (cbrt.f64 (pow.f64 z -5)))) (*.f64 (pow.f64 -1 1/6) (+.f64 (*.f64 (cbrt.f64 z) x) (*.f64 (*.f64 (cbrt.f64 z) (*.f64 y y)) (*.f64 (fma.f64 1/12 (+.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 0 z) 2)) (pow.f64 z 4)) (*.f64 -2 (pow.f64 z -2))) (/.f64 (*.f64 1/72 (pow.f64 (*.f64 0 z) 2)) (pow.f64 z 4))) x)))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 -1 1/6) (*.f64 (*.f64 (+.f64 (*.f64 -1 z) z) (*.f64 y x)) (pow.f64 (/.f64 1 (pow.f64 z 5)) 1/3)))) (+.f64 (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (*.f64 1 z) 1/3) x)) (+.f64 (*.f64 (pow.f64 -1 1/6) (*.f64 (*.f64 (+.f64 (*.f64 -1/72 (/.f64 (*.f64 (+.f64 (*.f64 -1 z) z) (-.f64 (*.f64 -1 (/.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 2) (pow.f64 z 4))) (*.f64 2 (/.f64 1 (pow.f64 z 2))))) (pow.f64 z 2))) (+.f64 (*.f64 -1/1296 (/.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 3) (pow.f64 z 6))) (*.f64 1/36 (+.f64 (*.f64 -6 (/.f64 (+.f64 (*.f64 -1 z) z) (pow.f64 z 4))) (*.f64 -2 (/.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 3) (pow.f64 z 6))))))) (*.f64 (pow.f64 y 3) x)) (pow.f64 (*.f64 1 z) 1/3))) (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (*.f64 1 z) 1/3) (*.f64 (pow.f64 y 2) (*.f64 (+.f64 (*.f64 1/12 (-.f64 (*.f64 -1 (/.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 2) (pow.f64 z 4))) (*.f64 2 (/.f64 1 (pow.f64 z 2))))) (*.f64 1/72 (/.f64 (pow.f64 (+.f64 (*.f64 -1 z) z) 2) (pow.f64 z 4)))) x)))))))","(fma.f64 -1/6 (*.f64 (pow.f64 -1 1/6) (*.f64 (*.f64 (*.f64 0 z) (*.f64 y x)) (cbrt.f64 (pow.f64 z -5)))) (fma.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 z) x) (*.f64 (pow.f64 -1 1/6) (+.f64 (*.f64 (fma.f64 -1/72 (*.f64 (*.f64 (*.f64 0 z) (+.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 0 z) 2)) (pow.f64 z 4)) (*.f64 -2 (pow.f64 z -2)))) (pow.f64 z -2)) (fma.f64 -1/1296 (/.f64 (pow.f64 (*.f64 0 z) 3) (pow.f64 z 6)) (*.f64 1/36 (fma.f64 -6 (*.f64 (*.f64 0 z) (pow.f64 z -4)) (/.f64 (*.f64 -2 (pow.f64 (*.f64 0 z) 3)) (pow.f64 z 6)))))) (*.f64 (*.f64 (pow.f64 y 3) x) (cbrt.f64 z))) (*.f64 (*.f64 (cbrt.f64 z) (*.f64 y y)) (*.f64 (fma.f64 1/12 (+.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 0 z) 2)) (pow.f64 z 4)) (*.f64 -2 (pow.f64 z -2))) (/.f64 (*.f64 1/72 (pow.f64 (*.f64 0 z) 2)) (pow.f64 z 4))) x))))))","(*.f64 (pow.f64 (*.f64 1 y) 1/3) x)","(*.f64 (cbrt.f64 y) x)","(+.f64 (*.f64 1/6 (*.f64 (*.f64 (+.f64 (*.f64 -1 z) z) x) (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3))) (*.f64 (pow.f64 (*.f64 1 y) 1/3) x))","(fma.f64 1/6 (*.f64 (*.f64 (*.f64 0 z) x) (cbrt.f64 (pow.f64 y -2))) (*.f64 (cbrt.f64 y) x))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (*.f64 (+.f64 (*.f64 1/12 (+.f64 (*.f64 -2 (pow.f64 z 2)) (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 z) z) 2)))) (*.f64 1/72 (pow.f64 (+.f64 (*.f64 -1 z) z) 2))) x)) (+.f64 (*.f64 1/6 (*.f64 (*.f64 (+.f64 (*.f64 -1 z) z) x) (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3))) (*.f64 (pow.f64 (*.f64 1 y) 1/3) x)))","(fma.f64 (cbrt.f64 (pow.f64 y -5)) (*.f64 (fma.f64 1/12 (fma.f64 -2 (*.f64 z z) (neg.f64 (pow.f64 (*.f64 0 z) 2))) (*.f64 1/72 (pow.f64 (*.f64 0 z) 2))) x) (fma.f64 1/6 (*.f64 (*.f64 (*.f64 0 z) x) (cbrt.f64 (pow.f64 y -2))) (*.f64 (cbrt.f64 y) x)))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 8)) 1/3) (*.f64 (+.f64 (*.f64 1/36 (+.f64 (*.f64 6 (*.f64 (+.f64 (*.f64 -1 z) z) (pow.f64 z 2))) (*.f64 2 (pow.f64 (+.f64 (*.f64 -1 z) z) 3)))) (+.f64 (*.f64 1/1296 (pow.f64 (+.f64 (*.f64 -1 z) z) 3)) (*.f64 1/72 (*.f64 (+.f64 (*.f64 -2 (pow.f64 z 2)) (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 z) z) 2))) (+.f64 (*.f64 -1 z) z))))) x)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (*.f64 (+.f64 (*.f64 1/12 (+.f64 (*.f64 -2 (pow.f64 z 2)) (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 z) z) 2)))) (*.f64 1/72 (pow.f64 (+.f64 (*.f64 -1 z) z) 2))) x)) (+.f64 (*.f64 1/6 (*.f64 (*.f64 (+.f64 (*.f64 -1 z) z) x) (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3))) (*.f64 (pow.f64 (*.f64 1 y) 1/3) x))))","(fma.f64 (cbrt.f64 (pow.f64 y -8)) (*.f64 (fma.f64 1/36 (fma.f64 6 (*.f64 (*.f64 0 z) (*.f64 z z)) (*.f64 2 (pow.f64 (*.f64 0 z) 3))) (fma.f64 1/1296 (pow.f64 (*.f64 0 z) 3) (*.f64 1/72 (*.f64 (fma.f64 -2 (*.f64 z z) (neg.f64 (pow.f64 (*.f64 0 z) 2))) (*.f64 0 z))))) x) (fma.f64 (cbrt.f64 (pow.f64 y -5)) (*.f64 (fma.f64 1/12 (fma.f64 -2 (*.f64 z z) (neg.f64 (pow.f64 (*.f64 0 z) 2))) (*.f64 1/72 (pow.f64 (*.f64 0 z) 2))) x) (fma.f64 1/6 (*.f64 (*.f64 (*.f64 0 z) x) (cbrt.f64 (pow.f64 y -2))) (*.f64 (cbrt.f64 y) x))))","(*.f64 (pow.f64 (*.f64 1 y) 1/3) x)","(*.f64 (cbrt.f64 y) x)","(+.f64 (*.f64 1/12 (*.f64 (pow.f64 (*.f64 1 y) 1/3) (*.f64 (-.f64 (*.f64 -1 (/.f64 (pow.f64 (+.f64 y (*.f64 -1 y)) 2) (pow.f64 y 4))) (*.f64 2 (/.f64 1 (pow.f64 y 2)))) (*.f64 (pow.f64 z 2) x)))) (*.f64 (pow.f64 (*.f64 1 y) 1/3) x))","(fma.f64 1/12 (*.f64 (cbrt.f64 y) (*.f64 (+.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 0 y) 2)) (pow.f64 y 4)) (*.f64 -2 (pow.f64 y -2))) (*.f64 (*.f64 z z) x))) (*.f64 (cbrt.f64 y) x))","(+.f64 (*.f64 1/12 (*.f64 (pow.f64 (*.f64 1 y) 1/3) (*.f64 (-.f64 (*.f64 -1 (/.f64 (pow.f64 (+.f64 y (*.f64 -1 y)) 2) (pow.f64 y 4))) (*.f64 2 (/.f64 1 (pow.f64 y 2)))) (*.f64 (pow.f64 z 2) x)))) (+.f64 (*.f64 1/36 (*.f64 (*.f64 (+.f64 (*.f64 2 (/.f64 (pow.f64 (+.f64 y (*.f64 -1 y)) 3) (pow.f64 y 6))) (*.f64 6 (/.f64 (+.f64 y (*.f64 -1 y)) (pow.f64 y 4)))) (*.f64 (pow.f64 z 3) x)) (pow.f64 (*.f64 1 y) 1/3))) (*.f64 (pow.f64 (*.f64 1 y) 1/3) x)))","(fma.f64 1/12 (*.f64 (cbrt.f64 y) (*.f64 (+.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 0 y) 2)) (pow.f64 y 4)) (*.f64 -2 (pow.f64 y -2))) (*.f64 (*.f64 z z) x))) (fma.f64 1/36 (*.f64 (fma.f64 2 (/.f64 (pow.f64 (*.f64 0 y) 3) (pow.f64 y 6)) (/.f64 (*.f64 6 (*.f64 0 y)) (pow.f64 y 4))) (*.f64 (*.f64 (pow.f64 z 3) x) (cbrt.f64 y))) (*.f64 (cbrt.f64 y) x)))","(+.f64 (*.f64 1/12 (*.f64 (pow.f64 (*.f64 1 y) 1/3) (*.f64 (-.f64 (*.f64 -1 (/.f64 (pow.f64 (+.f64 y (*.f64 -1 y)) 2) (pow.f64 y 4))) (*.f64 2 (/.f64 1 (pow.f64 y 2)))) (*.f64 (pow.f64 z 2) x)))) (+.f64 (*.f64 (*.f64 (+.f64 (*.f64 1/144 (-.f64 (+.f64 (*.f64 -24 (/.f64 (pow.f64 (+.f64 y (*.f64 -1 y)) 2) (pow.f64 y 6))) (*.f64 -6 (/.f64 (pow.f64 (+.f64 y (*.f64 -1 y)) 4) (pow.f64 y 8)))) (*.f64 12 (/.f64 1 (pow.f64 y 4))))) (*.f64 1/288 (pow.f64 (-.f64 (*.f64 -1 (/.f64 (pow.f64 (+.f64 y (*.f64 -1 y)) 2) (pow.f64 y 4))) (*.f64 2 (/.f64 1 (pow.f64 y 2)))) 2))) (*.f64 (pow.f64 z 4) x)) (pow.f64 (*.f64 1 y) 1/3)) (+.f64 (*.f64 1/36 (*.f64 (*.f64 (+.f64 (*.f64 2 (/.f64 (pow.f64 (+.f64 y (*.f64 -1 y)) 3) (pow.f64 y 6))) (*.f64 6 (/.f64 (+.f64 y (*.f64 -1 y)) (pow.f64 y 4)))) (*.f64 (pow.f64 z 3) x)) (pow.f64 (*.f64 1 y) 1/3))) (*.f64 (pow.f64 (*.f64 1 y) 1/3) x))))","(fma.f64 1/12 (*.f64 (cbrt.f64 y) (*.f64 (+.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 0 y) 2)) (pow.f64 y 4)) (*.f64 -2 (pow.f64 y -2))) (*.f64 (*.f64 z z) x))) (fma.f64 (*.f64 (fma.f64 1/144 (+.f64 (fma.f64 -24 (/.f64 (pow.f64 (*.f64 0 y) 2) (pow.f64 y 6)) (/.f64 (*.f64 -6 (pow.f64 (*.f64 0 y) 4)) (pow.f64 y 8))) (*.f64 -12 (pow.f64 y -4))) (*.f64 1/288 (pow.f64 (+.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 0 y) 2)) (pow.f64 y 4)) (*.f64 -2 (pow.f64 y -2))) 2))) (*.f64 (pow.f64 z 4) x)) (cbrt.f64 y) (fma.f64 1/36 (*.f64 (fma.f64 2 (/.f64 (pow.f64 (*.f64 0 y) 3) (pow.f64 y 6)) (/.f64 (*.f64 6 (*.f64 0 y)) (pow.f64 y 4))) (*.f64 (*.f64 (pow.f64 z 3) x) (cbrt.f64 y))) (*.f64 (cbrt.f64 y) x))))","(*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) x)","(*.f64 (pow.f64 (exp.f64 1/6) (fma.f64 -2 (neg.f64 (log.f64 z)) (log.f64 -1))) x)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) (*.f64 (+.f64 y (*.f64 -1 y)) x)) z)) (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) x))","(fma.f64 -1/6 (/.f64 (*.f64 (pow.f64 (exp.f64 1/6) (fma.f64 -2 (neg.f64 (log.f64 z)) (log.f64 -1))) (*.f64 (*.f64 0 y) x)) z) (*.f64 (pow.f64 (exp.f64 1/6) (fma.f64 -2 (neg.f64 (log.f64 z)) (log.f64 -1))) x))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) (*.f64 x (+.f64 (*.f64 1/72 (pow.f64 (+.f64 y (*.f64 -1 y)) 2)) (*.f64 1/12 (+.f64 (*.f64 -2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 (+.f64 y (*.f64 -1 y)) 2))))))) (pow.f64 z 2)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) (*.f64 (+.f64 y (*.f64 -1 y)) x)) z)) (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) x)))","(+.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 1/6) (fma.f64 -2 (neg.f64 (log.f64 z)) (log.f64 -1))) (*.f64 x (fma.f64 1/72 (pow.f64 (*.f64 0 y) 2) (*.f64 1/12 (fma.f64 -2 (*.f64 y y) (neg.f64 (pow.f64 (*.f64 0 y) 2))))))) (pow.f64 z -2)) (fma.f64 -1/6 (/.f64 (*.f64 (pow.f64 (exp.f64 1/6) (fma.f64 -2 (neg.f64 (log.f64 z)) (log.f64 -1))) (*.f64 (*.f64 0 y) x)) z) (*.f64 (pow.f64 (exp.f64 1/6) (fma.f64 -2 (neg.f64 (log.f64 z)) (log.f64 -1))) x)))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) (*.f64 (+.f64 (*.f64 1/72 (pow.f64 (+.f64 y (*.f64 -1 y)) 2)) (*.f64 1/12 (+.f64 (*.f64 -2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 (+.f64 y (*.f64 -1 y)) 2))))) x)) (pow.f64 z 2)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1/72 (*.f64 (+.f64 (*.f64 -2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 (+.f64 y (*.f64 -1 y)) 2))) (+.f64 y (*.f64 -1 y)))) (+.f64 (*.f64 1/36 (+.f64 (*.f64 -2 (pow.f64 (+.f64 y (*.f64 -1 y)) 3)) (*.f64 -6 (*.f64 (pow.f64 y 2) (+.f64 y (*.f64 -1 y)))))) (*.f64 -1/1296 (pow.f64 (+.f64 y (*.f64 -1 y)) 3)))) (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) x)) (pow.f64 z 3)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) (*.f64 (+.f64 y (*.f64 -1 y)) x)) z)) (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (*.f64 -2 (log.f64 (/.f64 1 z))) (log.f64 -1)))) x))))","(+.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 1/6) (fma.f64 -2 (neg.f64 (log.f64 z)) (log.f64 -1))) (*.f64 x (fma.f64 1/72 (pow.f64 (*.f64 0 y) 2) (*.f64 1/12 (fma.f64 -2 (*.f64 y y) (neg.f64 (pow.f64 (*.f64 0 y) 2))))))) (pow.f64 z -2)) (+.f64 (/.f64 (*.f64 (fma.f64 -1/72 (*.f64 (fma.f64 -2 (*.f64 y y) (neg.f64 (pow.f64 (*.f64 0 y) 2))) (*.f64 0 y)) (fma.f64 1/36 (fma.f64 -2 (pow.f64 (*.f64 0 y) 3) (*.f64 (*.f64 -6 (*.f64 y y)) (*.f64 0 y))) (*.f64 -1/1296 (pow.f64 (*.f64 0 y) 3)))) (*.f64 (pow.f64 (exp.f64 1/6) (fma.f64 -2 (neg.f64 (log.f64 z)) (log.f64 -1))) x)) (pow.f64 z 3)) (fma.f64 -1/6 (/.f64 (*.f64 (pow.f64 (exp.f64 1/6) (fma.f64 -2 (neg.f64 (log.f64 z)) (log.f64 -1))) (*.f64 (*.f64 0 y) x)) z) (*.f64 (pow.f64 (exp.f64 1/6) (fma.f64 -2 (neg.f64 (log.f64 z)) (log.f64 -1))) x))))","(*.f64 x (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z)))))))","(*.f64 x (pow.f64 (exp.f64 1/6) (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z))))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (+.f64 y (*.f64 -1 y)) (*.f64 x (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z)))))))) z)) (*.f64 x (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z))))))))","(fma.f64 1/6 (/.f64 (*.f64 (*.f64 0 y) (*.f64 x (pow.f64 (exp.f64 1/6) (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z))))))) z) (*.f64 x (pow.f64 (exp.f64 1/6) (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z)))))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (+.f64 y (*.f64 -1 y)) (*.f64 x (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z)))))))) z)) (+.f64 (*.f64 x (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z))))))) (/.f64 (*.f64 (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z)))))) (*.f64 x (+.f64 (*.f64 1/72 (pow.f64 (+.f64 y (*.f64 -1 y)) 2)) (*.f64 1/12 (+.f64 (*.f64 -2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 (+.f64 y (*.f64 -1 y)) 2))))))) (pow.f64 z 2))))","(fma.f64 1/6 (/.f64 (*.f64 (*.f64 0 y) (*.f64 x (pow.f64 (exp.f64 1/6) (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z))))))) z) (fma.f64 x (pow.f64 (exp.f64 1/6) (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z))))) (*.f64 (*.f64 (pow.f64 (exp.f64 1/6) (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z))))) (*.f64 x (fma.f64 1/72 (pow.f64 (*.f64 0 y) 2) (*.f64 1/12 (fma.f64 -2 (*.f64 y y) (neg.f64 (pow.f64 (*.f64 0 y) 2))))))) (pow.f64 z -2))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (+.f64 y (*.f64 -1 y)) (*.f64 x (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z)))))))) z)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/72 (pow.f64 (+.f64 y (*.f64 -1 y)) 2)) (*.f64 1/12 (+.f64 (*.f64 -2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 (+.f64 y (*.f64 -1 y)) 2))))) (*.f64 x (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z)))))))) (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1/72 (*.f64 (+.f64 (*.f64 -2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 (+.f64 y (*.f64 -1 y)) 2))) (+.f64 y (*.f64 -1 y)))) (+.f64 (*.f64 1/36 (+.f64 (*.f64 -2 (pow.f64 (+.f64 y (*.f64 -1 y)) 3)) (*.f64 -6 (*.f64 (pow.f64 y 2) (+.f64 y (*.f64 -1 y)))))) (*.f64 -1/1296 (pow.f64 (+.f64 y (*.f64 -1 y)) 3)))) (*.f64 x (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z)))))))) (pow.f64 z 3))) (*.f64 x (exp.f64 (*.f64 1/6 (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z))))))))))","(fma.f64 1/6 (/.f64 (*.f64 (*.f64 0 y) (*.f64 x (pow.f64 (exp.f64 1/6) (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z))))))) z) (+.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 1/6) (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z))))) (*.f64 x (fma.f64 1/72 (pow.f64 (*.f64 0 y) 2) (*.f64 1/12 (fma.f64 -2 (*.f64 y y) (neg.f64 (pow.f64 (*.f64 0 y) 2))))))) (pow.f64 z -2)) (+.f64 (neg.f64 (/.f64 (*.f64 (fma.f64 -1/72 (*.f64 (fma.f64 -2 (*.f64 y y) (neg.f64 (pow.f64 (*.f64 0 y) 2))) (*.f64 0 y)) (fma.f64 1/36 (fma.f64 -2 (pow.f64 (*.f64 0 y) 3) (*.f64 (*.f64 -6 (*.f64 y y)) (*.f64 0 y))) (*.f64 -1/1296 (pow.f64 (*.f64 0 y) 3)))) (*.f64 x (pow.f64 (exp.f64 1/6) (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z))))))) (pow.f64 z 3))) (*.f64 x (pow.f64 (exp.f64 1/6) (+.f64 (log.f64 -1) (*.f64 -2 (log.f64 (/.f64 -1 z)))))))))"]],"time":202.9609375,"type":"simplify"},{"compiler":[[8902,4004]],"time":79.764892578125,"type":"eval"},{"alts":[["(*.f64 y x)","next",31.46227721523422],["(*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))","done",27.592527214615853],["(*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))","done",27.380925945078967]],"compiler":[[6,4],[23,11],[13,8],[6,4]],"count":[[240,3]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[237,1],"picked":[1,1]}],"min-error":[14.313608950623474],"time":53.485107421875,"type":"prune"},{"compiler":[[8,4]],"time":2.118896484375,"type":"localize"},{"compiler":[[3,3]],"time":0.09912109375,"type":"eval"},{"alts":[["(*.f64 y x)","done",31.46227721523422],["(*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))","done",27.592527214615853],["(*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))","done",27.380925945078967]],"compiler":[[6,4],[23,11],[13,8]],"count":[[3,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[14.313608950623474],"time":0.989990234375,"type":"prune"},{"accuracy":[14.499790176929972],"baseline":[27.380925945078967],"branch":[["x",23.592760492250516,5],["y",14.499790176929972,2],["z",23.577243993359406,5],["(*.f64 x (sqrt.f64 (-.f64 (*.f64 y y) (*.f64 z z))))",15.26628118279603,3],["(sqrt.f64 (-.f64 (*.f64 y y) (*.f64 z z)))",15.266281182796027,2],["(-.f64 (*.f64 y y) (*.f64 z z))",15.266281182796027,2],["(*.f64 y y)",15.266281182796028,2],["(*.f64 z z)",23.06527951422639,4],["(*.f64 z z)",23.06527951422639,4]],"compiler":[[4,3],[4,3],[4,3],[13,8],[11,7],[10,6],[6,4],[6,4],[6,4],[49,19]],"count":[[5,2]],"inputs":[["(*.f64 y x)","(*.f64 x y)","(*.f64 (cbrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))) (*.f64 x (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))))","(*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))","(*.f64 x (sqrt.f64 (-.f64 (*.f64 y y) (*.f64 z z))))"]],"link":["."],"name":["Diagrams.TwoD.Apollonian:initialConfig from diagrams-contrib-1.3.0.5, B"],"oracle":[44.64516046945818],"outputs":[["(*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z))))","(*.f64 y x)"]],"time":81.778076171875,"times":[["x",14.532958984375],["y",6.328125],["z",15.364013671875],["(*.f64 x (sqrt.f64 (-.f64 (*.f64 y y) (*.f64 z z))))",7.2109375],["(sqrt.f64 (-.f64 (*.f64 y y) (*.f64 z z)))",5.612060546875],["(-.f64 (*.f64 y y) (*.f64 z z))",5.236083984375],["(*.f64 y y)",5.3388671875],["(*.f64 z z)",7.802001953125],["(*.f64 z z)",12.8388671875]],"type":"regimes"},{"bstep":[[-6.2572577479364635e-245,-8.045967469717306e-252,7.863037109375]],"compiler":[[7,5],[14,9],[7,5],[14,9],[7,5],[14,9],[7,5],[14,9],[7,5],[14,9],[7,5],[14,9],[7,5],[14,9],[7,5],[14,9],[7,5],[14,9],[15,10],[4,3]],"method":["binary-search"],"time":7.970947265625,"type":"bsearch"},{"compiler":[[20,12]],"inputs":[["(if (<=.f64 y -7626195654834445/123003155723136208567847447683223664415731869180715065944930703618254955521953492303010368693540149343822709050322214299552689203876695953600699775494388206142090885899729347827083318884583758435450548517566916626912548274908112766882031433928533568160966639616) (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (*.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 y -7626195654834445/123003155723136208567847447683223664415731869180715065944930703618254955521953492303010368693540149343822709050322214299552689203876695953600699775494388206142090885899729347827083318884583758435450548517566916626912548274908112766882031433928533568160966639616) (*.f64 x (sqrt.f64 (*.f64 (+.f64 y z) (-.f64 y z)))) (*.f64 y x))"]],"stop":[["done",1]],"time":19.8779296875,"type":"simplify"},{"time":0.02197265625,"type":"soundness"},{"compiler":[[20,12]],"remove-preprocessing":[[]],"time":9.85107421875,"type":"end"}]
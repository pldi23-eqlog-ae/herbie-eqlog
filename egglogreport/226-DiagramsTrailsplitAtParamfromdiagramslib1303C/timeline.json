[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.8770725436042994,0.12195113231427968,0.0009763240814208984],[11,0.8487798809073865,0.15024379501119256,0.0009763240814208984],[10,0.7609750656411052,0.23804861027747393,0.0009763240814208984],[9,0.7102433945983648,0.28878028132021427,0.0009763240814208984],[8,0.546341072767973,0.45268260315060616,0.0009763240814208984],[7,0.46829234808683395,0.5307313278317451,0.0009763240814208984],[6,0.18731693923473358,0.8117067366838455,0.0009763240814208984],[5,0.12487795948982239,0.8741457164287567,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":29.60888671875,"type":"analyze"},{"outcomes":[["body",512,"valid",0.137939453125,2],["body",1024,"valid",0.16796875,2],["body",256,"valid",278.042236328125,8252]],"time":285.990966796875,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(/.f64 (-.f64 x y) (-.f64 1 y))","(/.f64 (-.f64 y x) (-.f64 1 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (-.f64 x y) (-.f64 1 y))","(/.f64 (-.f64 y x) (+.f64 -1 y))","(/.f64 (-.f64 y x) (-.f64 1 x))","(/.f64 (-.f64 x y) (+.f64 -1 x))"]],"symmetry":[[]],"time":60.234130859375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (-.f64 x y) (-.f64 1 y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 x y) (-.f64 1 y))","(/.f64 (-.f64 y x) (+.f64 -1 y))"]],"time":18.219970703125,"type":"simplify"},{"compiler":[[16,10]],"time":0.306884765625,"type":"eval"},{"alts":[["(/.f64 (-.f64 y x) (+.f64 -1 y))","next",0.00390625]],"compiler":[[9,6],[9,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.800048828125,"type":"prune"},{"compiler":[[18,9]],"locations":[["(/.f64 (-.f64 y x) (+.f64 -1 y))",0.00390625,true]],"time":4.128173828125,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (-.f64 y x) (+.f64 -1 y))","x","-inf",0.468017578125],["(/.f64 (-.f64 y x) (+.f64 -1 y))","x","inf",0.377197265625],["(/.f64 (-.f64 y x) (+.f64 -1 y))","x","0",0.37109375],["(/.f64 (-.f64 y x) (+.f64 -1 y))","y","-inf",0.3740234375],["(/.f64 (-.f64 y x) (+.f64 -1 y))","y","inf",0.414794921875],["(/.f64 (-.f64 y x) (+.f64 -1 y))","y","0",0.4169921875]],"time":2.556884765625,"type":"series"},{"count":[[1,74]],"inputs":[["(/.f64 (-.f64 y x) (+.f64 -1 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 -1 y)) (/.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (-.f64 1 y)) (/.f64 y (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 -1 y)) (*.f64 (/.f64 -1 (-.f64 1 y)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -1 (-.f64 1 y)) (neg.f64 x)) (/.f64 y (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 x y) (-.f64 1 y)) 0) (/.f64 (-.f64 x y) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x y) (-.f64 1 y)) (*.f64 (/.f64 (-.f64 x y) (-.f64 1 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 -1 y)) (*.f64 (/.f64 x (-.f64 1 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 x y) (-.f64 1 y))) (/.f64 (-.f64 x y) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x y) (-.f64 1 y)) (*.f64 0 (/.f64 (-.f64 x y) (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y (+.f64 -1 y)) (/.f64 x (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 x y) (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (-.f64 1 y)) (/.f64 y (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 1 y)) (/.f64 (-.f64 x y) (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (+.f64 -1 y)) (/.f64 (-.f64 x y) (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 y (+.f64 -1 y)) (pow.f64 (+.f64 -1 y) 2)) (/.f64 (*.f64 (+.f64 -1 y) x) (pow.f64 (+.f64 -1 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 y x)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 y x) 2)) (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (-.f64 1 y))) (/.f64 (-.f64 y x) (cbrt.f64 (pow.f64 (+.f64 -1 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 x y) (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y x) (cbrt.f64 (+.f64 -1 y))) (pow.f64 (cbrt.f64 (+.f64 -1 y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 x y) (-.f64 1 y))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) (-.f64 1 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) (-.f64 1 y)) 2)) (cbrt.f64 (/.f64 (-.f64 x y) (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x y) (/.f64 1 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y x) (/.f64 -1 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (-.f64 1 y)) (-.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 x y) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 y)) (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y x) (cbrt.f64 (pow.f64 (+.f64 -1 y) 2))) (cbrt.f64 (/.f64 -1 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) (+.f64 -1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 y x) 2)) (+.f64 -1 y)) (cbrt.f64 (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (+.f64 -1 y) (neg.f64 (*.f64 (+.f64 -1 y) x))) (/.f64 1 (pow.f64 (+.f64 -1 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 y x) (cbrt.f64 (+.f64 -1 y))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 -1 y))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 -1 y))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y (cbrt.f64 (pow.f64 (+.f64 -1 y) 2))) (*.f64 (+.f64 -1 y) (/.f64 x (cbrt.f64 (+.f64 -1 y))))) (*.f64 (+.f64 -1 y) (cbrt.f64 (pow.f64 (+.f64 -1 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y (-.f64 1 y)) (*.f64 (+.f64 -1 y) (neg.f64 x))) (*.f64 (+.f64 -1 y) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 y (cbrt.f64 (+.f64 -1 y))) (cbrt.f64 (pow.f64 (+.f64 -1 y) 2))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 y) 2)) (/.f64 x (cbrt.f64 (+.f64 -1 y))))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 y) 2)) (cbrt.f64 (pow.f64 (+.f64 -1 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 y (cbrt.f64 (+.f64 -1 y))) (+.f64 -1 y)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 y) 2)) x)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 y) 2)) (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 y (cbrt.f64 (+.f64 -1 y))) (-.f64 1 y)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 y) 2)) (neg.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 y) 2)) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 y) (cbrt.f64 (pow.f64 (+.f64 -1 y) 2))) (*.f64 (-.f64 1 y) (/.f64 x (cbrt.f64 (+.f64 -1 y))))) (*.f64 (-.f64 1 y) (cbrt.f64 (pow.f64 (+.f64 -1 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 y) (+.f64 -1 y)) (*.f64 (-.f64 1 y) x)) (*.f64 (-.f64 1 y) (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 y) (-.f64 1 y)) (*.f64 (-.f64 1 y) (neg.f64 x))) (*.f64 (-.f64 1 y) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 y (+.f64 -1 y) (neg.f64 (*.f64 (+.f64 -1 y) x)))) (neg.f64 (pow.f64 (+.f64 -1 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x y) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) (cbrt.f64 (+.f64 -1 y))) (cbrt.f64 (pow.f64 (+.f64 -1 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y x) (+.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (+.f64 -1 y) (neg.f64 (*.f64 (+.f64 -1 y) x))) (pow.f64 (+.f64 -1 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 x y) (-.f64 1 y))) (cbrt.f64 (pow.f64 (-.f64 y x) 2))) (cbrt.f64 (pow.f64 (+.f64 -1 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) (-.f64 1 y)) 2)) (cbrt.f64 (-.f64 y x))) (cbrt.f64 (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) (-.f64 1 y)) 2)) (cbrt.f64 (-.f64 x y))) (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (-.f64 1 y))) (-.f64 y x)) (cbrt.f64 (pow.f64 (+.f64 -1 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 y (+.f64 -1 y) (neg.f64 (*.f64 (+.f64 -1 y) x))) 1) (pow.f64 (+.f64 -1 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 y x) (cbrt.f64 (+.f64 -1 y))) 1) (cbrt.f64 (pow.f64 (+.f64 -1 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 y x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) (-.f64 1 y)) 2))) (cbrt.f64 (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x y)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) (-.f64 1 y)) 2))) (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) (cbrt.f64 (pow.f64 (+.f64 -1 y) 2))) (cbrt.f64 (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) -1) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) (+.f64 -1 (pow.f64 y 3))) (/.f64 1 (fma.f64 y (+.f64 1 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) (cbrt.f64 (+.f64 -1 y))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 -1 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 y (+.f64 -1 y) (neg.f64 (*.f64 (+.f64 -1 y) x))) (+.f64 -1 y)) (+.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 y x) (cbrt.f64 (+.f64 -1 y))) 1) (cbrt.f64 (pow.f64 (+.f64 -1 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 y x) (cbrt.f64 (+.f64 -1 y)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 -1 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 x y) (-.f64 1 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x y) (-.f64 1 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x y) (-.f64 1 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x y) (-.f64 1 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 x y) (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 x y) (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 x y) (+.f64 -1 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) (-.f64 1 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (/.f64 (cbrt.f64 (*.f64 y y)) (+.f64 -1 y)) (/.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1 (-.f64 1 y))) (/.f64 y (cbrt.f64 (pow.f64 (+.f64 -1 y) 2))) (/.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y (+.f64 -1 y))) (cbrt.f64 (pow.f64 (/.f64 y (+.f64 -1 y)) 2)) (/.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 -1 (-.f64 1 y)) (/.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y (+.f64 -1 y)) (/.f64 x (-.f64 1 y)))))))"]],"rules":[["egg-rr",74]],"time":22.715087890625,"type":"rewrite"},{"count":[[98,100]],"inputs":[["x","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (+.f64 1 (*.f64 -1 x)))) x))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 3) (+.f64 1 (*.f64 -1 x)))) x)))","1","(+.f64 (/.f64 1 y) (+.f64 1 (*.f64 -1 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (*.f64 -1 (/.f64 x y))))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 -1 (/.f64 x y))))))))","1","(+.f64 1 (*.f64 -1 (/.f64 (-.f64 x 1) y)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (*.f64 -1 (/.f64 (-.f64 x 1) y)))) (/.f64 x (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 3)))))) (/.f64 x (pow.f64 y 2)))","(/.f64 y (-.f64 y 1))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(*.f64 -1 (/.f64 x (-.f64 y 1)))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(*.f64 -1 (/.f64 x (-.f64 y 1)))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))) x)","(fma.f64 (neg.f64 y) (-.f64 1 x) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (+.f64 1 (*.f64 -1 x)))) x))","(+.f64 (*.f64 (-.f64 1 x) (+.f64 (neg.f64 y) (neg.f64 (*.f64 y y)))) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 3) (+.f64 1 (*.f64 -1 x)))) x)))","(+.f64 (*.f64 (-.f64 1 x) (+.f64 (neg.f64 y) (neg.f64 (*.f64 y y)))) (fma.f64 (neg.f64 (pow.f64 y 3)) (-.f64 1 x) x))","1","(+.f64 (/.f64 1 y) (+.f64 1 (*.f64 -1 (/.f64 x y))))","(-.f64 (+.f64 (/.f64 1 y) 1) (/.f64 x y))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (*.f64 -1 (/.f64 x y))))))","(+.f64 (/.f64 1 y) (+.f64 (pow.f64 y -2) (-.f64 (-.f64 1 (/.f64 x (*.f64 y y))) (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 -1 (/.f64 x y))))))))","(+.f64 (/.f64 1 y) (-.f64 (+.f64 (+.f64 (pow.f64 y -2) (+.f64 (neg.f64 (fma.f64 x (pow.f64 y -2) (/.f64 x y))) (pow.f64 y -3))) 1) (*.f64 x (pow.f64 y -3))))","1","(+.f64 1 (*.f64 -1 (/.f64 (-.f64 x 1) y)))","(+.f64 1 (/.f64 (-.f64 1 x) y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (*.f64 -1 (/.f64 (-.f64 x 1) y)))) (/.f64 x (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 (-.f64 1 x) y) (+.f64 (pow.f64 y -2) 1)) (/.f64 x (*.f64 y y)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 3)))))) (/.f64 x (pow.f64 y 2)))","(+.f64 (+.f64 1 (neg.f64 (*.f64 (+.f64 x -1) (+.f64 (/.f64 1 y) (pow.f64 y -3))))) (-.f64 (pow.f64 y -2) (/.f64 x (*.f64 y y))))","(/.f64 y (-.f64 y 1))","(/.f64 y (+.f64 y -1))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(/.f64 (+.f64 y (neg.f64 x)) (+.f64 y -1))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(/.f64 (+.f64 y (neg.f64 x)) (+.f64 y -1))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(/.f64 (+.f64 y (neg.f64 x)) (+.f64 y -1))","(*.f64 -1 (/.f64 x (-.f64 y 1)))","(/.f64 x (-.f64 1 y))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(/.f64 (+.f64 y (neg.f64 x)) (+.f64 y -1))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(/.f64 (+.f64 y (neg.f64 x)) (+.f64 y -1))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(/.f64 (+.f64 y (neg.f64 x)) (+.f64 y -1))","(*.f64 -1 (/.f64 x (-.f64 y 1)))","(/.f64 x (-.f64 1 y))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(/.f64 (+.f64 y (neg.f64 x)) (+.f64 y -1))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(/.f64 (+.f64 y (neg.f64 x)) (+.f64 y -1))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(/.f64 (+.f64 y (neg.f64 x)) (+.f64 y -1))"]],"time":82.180908203125,"type":"simplify"},{"compiler":[[1569,1034]],"time":20.7919921875,"type":"eval"},{"alts":[["(fma.f64 y (/.f64 -1 (-.f64 1 y)) (/.f64 x (-.f64 1 y)))","next",0.0390625],["(/.f64 (-.f64 y x) (+.f64 -1 y))","done",0.00390625]],"compiler":[[14,10],[9,6],[14,10]],"count":[[101,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[100,1],"picked":[1,1]}],"min-error":[0],"time":21.568115234375,"type":"prune"},{"compiler":[[31,21]],"locations":[["(/.f64 -1 (-.f64 1 y))",0.00390625,true],["(fma.f64 y (/.f64 -1 (-.f64 1 y)) (/.f64 x (-.f64 1 y)))",0.0390625,true]],"time":7.475830078125,"type":"localize"},{"count":[[2,36]],"series":[["(/.f64 -1 (-.f64 1 y))","y","-inf",0.18603515625],["(/.f64 -1 (-.f64 1 y))","y","inf",0.263916015625],["(/.f64 -1 (-.f64 1 y))","y","0",0.448974609375],["(fma.f64 y (/.f64 -1 (-.f64 1 y)) (/.f64 x (-.f64 1 y)))","x","-inf",0.291015625],["(fma.f64 y (/.f64 -1 (-.f64 1 y)) (/.f64 x (-.f64 1 y)))","x","inf",0.382080078125],["(fma.f64 y (/.f64 -1 (-.f64 1 y)) (/.f64 x (-.f64 1 y)))","x","0",0.52294921875],["(fma.f64 y (/.f64 -1 (-.f64 1 y)) (/.f64 x (-.f64 1 y)))","y","-inf",0.294921875],["(fma.f64 y (/.f64 -1 (-.f64 1 y)) (/.f64 x (-.f64 1 y)))","y","inf",0.30615234375],["(fma.f64 y (/.f64 -1 (-.f64 1 y)) (/.f64 x (-.f64 1 y)))","y","0",0.31396484375]],"time":3.14111328125,"type":"series"},{"count":[[2,112]],"inputs":[["(fma.f64 y (/.f64 -1 (-.f64 1 y)) (/.f64 x (-.f64 1 y)))","(/.f64 -1 (-.f64 1 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y)) 0) (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y)) (*.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y))) (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y)) (*.f64 0 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 -1 y)) (/.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (-.f64 1 y)) (/.f64 y (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (-.f64 1 y)) (/.f64 y (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y (+.f64 -1 y)) (/.f64 x (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (-.f64 1 y)) (+.f64 (neg.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (-.f64 1 y)) (+.f64 y (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y)) 2)) (cbrt.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 y)) (+.f64 x (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 y)) (+.f64 (neg.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 y) x) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (-.f64 1 y)) (*.f64 (+.f64 -1 y) x)) (*.f64 (+.f64 -1 y) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (cbrt.f64 (pow.f64 (-.f64 1 y) 2))) (*.f64 (+.f64 -1 y) (/.f64 x (cbrt.f64 (-.f64 1 y))))) (*.f64 (+.f64 -1 y) (cbrt.f64 (pow.f64 (-.f64 1 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (+.f64 -1 y)) (*.f64 (-.f64 1 y) (neg.f64 x))) (*.f64 (-.f64 1 y) (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (cbrt.f64 (pow.f64 (-.f64 1 y) 2))) (*.f64 (-.f64 1 y) (/.f64 x (cbrt.f64 (-.f64 1 y))))) (*.f64 (-.f64 1 y) (cbrt.f64 (pow.f64 (-.f64 1 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (+.f64 -1 y)) (*.f64 (-.f64 1 y) y)) (*.f64 (-.f64 1 y) (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) (-.f64 1 y)) (*.f64 (+.f64 -1 y) (neg.f64 y))) (*.f64 (+.f64 -1 y) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (cbrt.f64 (-.f64 1 y))) (-.f64 1 y)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) (neg.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (cbrt.f64 (-.f64 1 y))) (+.f64 -1 y)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) y)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 x) y) (+.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 y (neg.f64 x)) (+.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (+.f64 -1 y)) (*.f64 (+.f64 -1 y) (neg.f64 x))) (pow.f64 (-.f64 1 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (-.f64 1 y)) (*.f64 (-.f64 1 y) x)) (pow.f64 (-.f64 1 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (-.f64 1 y)) (*.f64 (-.f64 1 y) (neg.f64 y))) (pow.f64 (-.f64 1 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) (+.f64 -1 y)) (*.f64 (+.f64 -1 y) y)) (pow.f64 (-.f64 1 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 y (-.f64 1 y)) (/.f64 x (+.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 x (+.f64 -1 y)) (/.f64 y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 x (neg.f64 y)) (-.f64 1 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 -1 (-.f64 1 y)) (/.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (cbrt.f64 (+.f64 -1 y))) (cbrt.f64 (pow.f64 (+.f64 -1 y) -2)) (/.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (/.f64 1 (-.f64 1 y)) (/.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1 (-.f64 1 y)) y (/.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (/.f64 (cbrt.f64 (*.f64 y y)) (+.f64 -1 y)) (/.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y (+.f64 -1 y))) (cbrt.f64 (pow.f64 (/.f64 y (+.f64 -1 y)) 2)) (/.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x (-.f64 1 y))) (cbrt.f64 (pow.f64 (/.f64 x (-.f64 1 y)) 2)) (/.f64 y (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (/.f64 (cbrt.f64 (*.f64 x x)) (-.f64 1 y)) (/.f64 y (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 (-.f64 1 y)) (/.f64 y (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 1 y)) x (/.f64 y (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 -1 (-.f64 1 y)) (/.f64 y (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 x (+.f64 -1 y)) (/.f64 y (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x (-.f64 1 y)) 2)) (cbrt.f64 (/.f64 x (-.f64 1 y))) (/.f64 y (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (-.f64 1 y))) (*.f64 x (cbrt.f64 (pow.f64 (+.f64 -1 y) -2))) (/.f64 y (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (+.f64 -1 y)) 1 (/.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y (+.f64 -1 y)) (/.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (-.f64 1 y)) 1 (/.f64 y (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 x (-.f64 1 y)) (/.f64 y (+.f64 -1 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 -1 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (-.f64 1 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 1 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (-.f64 1 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (-.f64 1 y))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 -1 y) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 (pow.f64 y 3))) (/.f64 -1 (/.f64 1 (fma.f64 y (+.f64 1 y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (-.f64 1 (pow.f64 y 3))) (/.f64 1 (/.f64 1 (fma.f64 y (+.f64 1 y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (-.f64 1 y)))) 1) (/.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 -1 y) -2))) (cbrt.f64 (pow.f64 (-.f64 1 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (-.f64 1 y)))) (cbrt.f64 (-.f64 1 y))) (/.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 -1 y) -2))) (cbrt.f64 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (-.f64 1 y))) (cbrt.f64 (pow.f64 (+.f64 -1 y) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 -1 y) -2)) (cbrt.f64 (/.f64 -1 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -1 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 -1 y) -2))) (cbrt.f64 (/.f64 1 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 2)) (/.f64 (cbrt.f64 (/.f64 -1 (-.f64 1 y))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 2)) (/.f64 (cbrt.f64 (/.f64 1 (-.f64 1 y))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (-.f64 1 y))) (/.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 -1 y) -2))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 -1 (-.f64 1 y))) (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (+.f64 -1 y)) (+.f64 -1 y)) (*.f64 (-.f64 1 y) (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (cbrt.f64 (pow.f64 (-.f64 1 y) 2))) (*.f64 (-.f64 1 y) (cbrt.f64 (/.f64 1 (-.f64 1 y))))) (*.f64 (-.f64 1 y) (cbrt.f64 (pow.f64 (-.f64 1 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (-.f64 1 y))) 1) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1 (-.f64 1 y))) (cbrt.f64 (pow.f64 (-.f64 1 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (+.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (+.f64 -1 y) -2)) (cbrt.f64 (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 y) -2)) -1) (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (-.f64 1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 -1 y) -2))) (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (-.f64 1 (pow.f64 y 3))) (/.f64 1 (fma.f64 y (+.f64 1 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1 (-.f64 1 y))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (-.f64 1 y)) (-.f64 1 y)) (pow.f64 (-.f64 1 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 -1 y) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (-.f64 1 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (-.f64 1 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (-.f64 1 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1 (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 -1 y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 1 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 -1 y) -3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (/.f64 -1 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (/.f64 -1 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (/.f64 -1 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (/.f64 -1 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (/.f64 -1 (-.f64 1 y)))))))"]],"rules":[["egg-rr",47],["egg-rr",65]],"time":26.85888671875,"type":"rewrite"},{"count":[[148,150]],"inputs":[["x","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (+.f64 1 (*.f64 -1 x)))) x))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 3) (+.f64 1 (*.f64 -1 x)))) x)))","1","(+.f64 (/.f64 1 y) (+.f64 1 (*.f64 -1 (/.f64 x y))))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (*.f64 -1 (/.f64 x y))))) (/.f64 x (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 -1 (/.f64 x y)))))) (+.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x (pow.f64 y 2))))","1","(+.f64 1 (*.f64 -1 (/.f64 (-.f64 x 1) y)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (*.f64 -1 (/.f64 (-.f64 x 1) y)))) (/.f64 x (pow.f64 y 2)))","(-.f64 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 -1 (/.f64 (-.f64 x 1) y)))))) (/.f64 x (pow.f64 y 2)))","(*.f64 -1 (/.f64 y (-.f64 1 y)))","(+.f64 (/.f64 x (-.f64 1 y)) (*.f64 -1 (/.f64 y (-.f64 1 y))))","(+.f64 (/.f64 x (-.f64 1 y)) (*.f64 -1 (/.f64 y (-.f64 1 y))))","(+.f64 (/.f64 x (-.f64 1 y)) (*.f64 -1 (/.f64 y (-.f64 1 y))))","(/.f64 x (-.f64 1 y))","(+.f64 (/.f64 x (-.f64 1 y)) (*.f64 -1 (/.f64 y (-.f64 1 y))))","(+.f64 (/.f64 x (-.f64 1 y)) (*.f64 -1 (/.f64 y (-.f64 1 y))))","(+.f64 (/.f64 x (-.f64 1 y)) (*.f64 -1 (/.f64 y (-.f64 1 y))))","(/.f64 x (-.f64 1 y))","(+.f64 (/.f64 x (-.f64 1 y)) (*.f64 -1 (/.f64 y (-.f64 1 y))))","(+.f64 (/.f64 x (-.f64 1 y)) (*.f64 -1 (/.f64 y (-.f64 1 y))))","(+.f64 (/.f64 x (-.f64 1 y)) (*.f64 -1 (/.f64 y (-.f64 1 y))))","-1","(-.f64 (*.f64 -1 y) 1)","(-.f64 (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 -1 y)) 1)","(-.f64 (+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (*.f64 -1 (pow.f64 y 3)) (*.f64 -1 y))) 1)","(/.f64 1 y)","(+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 2)))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 1 (pow.f64 y 3))))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 1 (pow.f64 y 4)))))","(/.f64 1 y)","(+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 2)))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 1 (pow.f64 y 3))))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 1 (pow.f64 y 4)))))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))) x)","(fma.f64 (neg.f64 y) (-.f64 1 x) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (+.f64 1 (*.f64 -1 x)))) x))","(+.f64 (*.f64 (-.f64 1 x) (neg.f64 (fma.f64 y y y))) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 3) (+.f64 1 (*.f64 -1 x)))) x)))","(+.f64 (*.f64 (-.f64 1 x) (neg.f64 (fma.f64 y y y))) (fma.f64 (neg.f64 (pow.f64 y 3)) (-.f64 1 x) x))","1","(+.f64 (/.f64 1 y) (+.f64 1 (*.f64 -1 (/.f64 x y))))","(-.f64 (+.f64 (/.f64 1 y) 1) (/.f64 x y))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (*.f64 -1 (/.f64 x y))))) (/.f64 x (pow.f64 y 2)))","(+.f64 (-.f64 (+.f64 (pow.f64 y -2) 1) (/.f64 x y)) (-.f64 (/.f64 1 y) (/.f64 x (*.f64 y y))))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 -1 (/.f64 x y)))))) (+.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x (pow.f64 y 2))))","(-.f64 (+.f64 (+.f64 (/.f64 1 y) (pow.f64 y -2)) (-.f64 (+.f64 1 (pow.f64 y -3)) (/.f64 x y))) (*.f64 x (+.f64 (pow.f64 y -2) (pow.f64 y -3))))","1","(+.f64 1 (*.f64 -1 (/.f64 (-.f64 x 1) y)))","(+.f64 1 (/.f64 (-.f64 1 x) y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (*.f64 -1 (/.f64 (-.f64 x 1) y)))) (/.f64 x (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 (-.f64 1 x) y) (+.f64 (pow.f64 y -2) 1)) (/.f64 x (*.f64 y y)))","(-.f64 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 -1 (/.f64 (-.f64 x 1) y)))))) (/.f64 x (pow.f64 y 2)))","(+.f64 (+.f64 (+.f64 (/.f64 (-.f64 1 x) y) (+.f64 (pow.f64 y -2) 1)) (pow.f64 y -3)) (neg.f64 (*.f64 x (+.f64 (pow.f64 y -2) (pow.f64 y -3)))))","(*.f64 -1 (/.f64 y (-.f64 1 y)))","(neg.f64 (/.f64 y (-.f64 1 y)))","(+.f64 (/.f64 x (-.f64 1 y)) (*.f64 -1 (/.f64 y (-.f64 1 y))))","(/.f64 (+.f64 (neg.f64 y) x) (-.f64 1 y))","(+.f64 (/.f64 x (-.f64 1 y)) (*.f64 -1 (/.f64 y (-.f64 1 y))))","(/.f64 (+.f64 (neg.f64 y) x) (-.f64 1 y))","(+.f64 (/.f64 x (-.f64 1 y)) (*.f64 -1 (/.f64 y (-.f64 1 y))))","(/.f64 (+.f64 (neg.f64 y) x) (-.f64 1 y))","(/.f64 x (-.f64 1 y))","(+.f64 (/.f64 x (-.f64 1 y)) (*.f64 -1 (/.f64 y (-.f64 1 y))))","(/.f64 (+.f64 (neg.f64 y) x) (-.f64 1 y))","(+.f64 (/.f64 x (-.f64 1 y)) (*.f64 -1 (/.f64 y (-.f64 1 y))))","(/.f64 (+.f64 (neg.f64 y) x) (-.f64 1 y))","(+.f64 (/.f64 x (-.f64 1 y)) (*.f64 -1 (/.f64 y (-.f64 1 y))))","(/.f64 (+.f64 (neg.f64 y) x) (-.f64 1 y))","(/.f64 x (-.f64 1 y))","(+.f64 (/.f64 x (-.f64 1 y)) (*.f64 -1 (/.f64 y (-.f64 1 y))))","(/.f64 (+.f64 (neg.f64 y) x) (-.f64 1 y))","(+.f64 (/.f64 x (-.f64 1 y)) (*.f64 -1 (/.f64 y (-.f64 1 y))))","(/.f64 (+.f64 (neg.f64 y) x) (-.f64 1 y))","(+.f64 (/.f64 x (-.f64 1 y)) (*.f64 -1 (/.f64 y (-.f64 1 y))))","(/.f64 (+.f64 (neg.f64 y) x) (-.f64 1 y))","-1","(-.f64 (*.f64 -1 y) 1)","(neg.f64 (+.f64 1 y))","(-.f64 (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 -1 y)) 1)","(neg.f64 (+.f64 1 (fma.f64 y y y)))","(-.f64 (+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (*.f64 -1 (pow.f64 y 3)) (*.f64 -1 y))) 1)","(+.f64 (-.f64 (neg.f64 (*.f64 (*.f64 y y) (+.f64 1 y))) y) -1)","(/.f64 1 y)","(+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 2)))","(+.f64 (/.f64 1 y) (pow.f64 y -2))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 1 (pow.f64 y 3))))","(/.f64 (+.f64 1 (fma.f64 y y y)) (pow.f64 y 3))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 1 (pow.f64 y 4)))))","(+.f64 (/.f64 (+.f64 1 (fma.f64 y y y)) (pow.f64 y 3)) (pow.f64 y -4))","(/.f64 1 y)","(+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 2)))","(+.f64 (/.f64 1 y) (pow.f64 y -2))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 1 (pow.f64 y 3))))","(/.f64 (+.f64 1 (fma.f64 y y y)) (pow.f64 y 3))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 1 (pow.f64 y 4)))))","(+.f64 (/.f64 (+.f64 1 (fma.f64 y y y)) (pow.f64 y 3)) (pow.f64 y -4))"]],"time":117.111083984375,"type":"simplify"},{"compiler":[[2481,1695]],"time":32.18701171875,"type":"eval"},{"alts":[["(fma.f64 y (/.f64 -1 (-.f64 1 y)) (/.f64 x (-.f64 1 y)))","done",0.0390625],["(/.f64 (-.f64 y x) (+.f64 -1 y))","done",0.00390625]],"compiler":[[14,10],[9,6]],"count":[[152,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[150,0],"picked":[1,1]}],"min-error":[0],"time":40.285888671875,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["(/.f64 (-.f64 x y) (-.f64 1 y))",0.00390625,1]],"compiler":[[3,2],[3,2],[9,6],[28,18]],"count":[[3,1]],"inputs":[["(fma.f64 y (/.f64 -1 (-.f64 1 y)) (/.f64 x (-.f64 1 y)))","(/.f64 (-.f64 y x) (+.f64 -1 y))","(/.f64 (-.f64 x y) (-.f64 1 y))"]],"link":["."],"name":["Diagrams.Trail:splitAtParam  from diagrams-lib-1.3.0.3, C"],"oracle":[0.04296875],"outputs":[["(/.f64 (-.f64 y x) (+.f64 -1 y))"]],"time":9.130126953125,"times":[["x",2.734130859375],["y",3.046875],["(/.f64 (-.f64 x y) (-.f64 1 y))",2.593994140625]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(/.f64 (-.f64 y x) (+.f64 -1 y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 y x) (+.f64 -1 y))","(/.f64 (-.f64 x y) (-.f64 1 y))"]],"stop":[["done",1]],"time":18.577880859375,"type":"simplify"},{"time":0.01318359375,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.788818359375,"type":"end"}]
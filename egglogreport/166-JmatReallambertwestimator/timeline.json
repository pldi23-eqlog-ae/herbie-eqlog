[{"compiler":[[8,5]],"method":["search"],"sampling":[[12,0.2498779296875,0.00048804283142089844,0.7496340274810791],[11,0.2498779296875,0.0009760856628417969,0.7491459846496582],[10,0.2498779296875,0.0019521713256835938,0.7481698989868164],[9,0.2498779296875,0.0039043426513671875,0.7462177276611328],[8,0.2498779296875,0.007808685302734375,0.7423133850097656],[7,0.2498779296875,0.01561737060546875,0.7345046997070313],[6,0.2498779296875,0.0312347412109375,0.7188873291015625],[5,0.2498779296875,0.062469482421875,0.687652587890625],[4,0.2498779296875,0.12493896484375,0.62518310546875],[3,0.2498779296875,0.2498779296875,0.500244140625],[2,0.0,0.499755859375,0.500244140625],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":0.93115234375,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.289794921875,8],["body",256,"valid",372.838134765625,8256]],"time":380.515869140625,"type":"sample"},{"compiler":[[7,4]],"inputs":[["0"],["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(log.f64 (/.f64 x (log.f64 x)))"]],"symmetry":[[]],"time":71.119140625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(log.f64 (/.f64 x (log.f64 x)))"]],"time":37.951904296875,"type":"simplify"},{"compiler":[[12,6]],"time":0.281005859375,"type":"eval"},{"alts":[["(log.f64 (/.f64 x (log.f64 x)))","next",0.015625],["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","fresh",0.28125]],"compiler":[[6,4],[7,4],[6,4],[7,4]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0078125],"time":1.112060546875,"type":"prune"},{"compiler":[[13,4]],"locations":[["(log.f64 (/.f64 x (log.f64 x)))",0.01171875,true],["(/.f64 x (log.f64 x))",0.2734375,true]],"time":5.125,"type":"localize"},{"count":[[2,20]],"series":[["(log.f64 (/.f64 x (log.f64 x)))","x","-inf",8.295166015625],["(log.f64 (/.f64 x (log.f64 x)))","x","inf",17.3759765625],["(log.f64 (/.f64 x (log.f64 x)))","x","0",7.363037109375],["(/.f64 x (log.f64 x))","x","-inf",8.677978515625],["(/.f64 x (log.f64 x))","x","inf",13.0908203125],["(/.f64 x (log.f64 x))","x","0",13.630859375]],"time":68.54296875,"type":"series"},{"count":[[2,76]],"inputs":[["(/.f64 x (log.f64 x))","(log.f64 (/.f64 x (log.f64 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (log.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 x (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (neg.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (log.f64 x))) (pow.f64 (/.f64 x (log.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3) (cbrt.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 4)) (cbrt.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (/.f64 (pow.f64 x 2/3) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 x) -1/3)) (*.f64 (neg.f64 (pow.f64 (log.f64 x) -2/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 x (log.f64 x)))) (pow.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (neg.f64 x) (log.f64 x))) (neg.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) -1/3) (*.f64 x (pow.f64 (log.f64 x) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 x) -1/3)) (*.f64 x (neg.f64 (pow.f64 (log.f64 x) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 -1 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (log.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 x 2/3) (log.f64 x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (pow.f64 (log.f64 x) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (/.f64 (pow.f64 x 2/3) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) -1/3) (*.f64 (pow.f64 (log.f64 x) -2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x x) (log.f64 x))) (*.f64 (cbrt.f64 x) (pow.f64 (log.f64 x) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 x) -2/3)) (/.f64 (neg.f64 x) (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (/.f64 (*.f64 x x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (neg.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 x) (log.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3) (cbrt.f64 (neg.f64 x))) (neg.f64 (pow.f64 (log.f64 x) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 x) (cbrt.f64 (log.f64 x))) (neg.f64 (pow.f64 (log.f64 x) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3) (*.f64 0 (cbrt.f64 (/.f64 (neg.f64 x) (log.f64 x)))))) (cbrt.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (neg.f64 (pow.f64 x 2/3)) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x 2/3)) (/.f64 (cbrt.f64 (neg.f64 x)) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (/.f64 (cbrt.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (log.f64 x))) (pow.f64 (log.f64 x) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) (log.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) -2/3) (/.f64 x (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (neg.f64 (pow.f64 (log.f64 x) -2/3))) (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (cbrt.f64 (log.f64 x))) (neg.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (log.f64 x)) 2) (neg.f64 x))) (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (log.f64 x)) 2) (/.f64 x (cbrt.f64 (log.f64 x))))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (log.f64 x))) (pow.f64 (log.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (log.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3) (cbrt.f64 (neg.f64 x)))) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (log.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (neg.f64 x) (log.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (neg.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (log.f64 x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 x (log.f64 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (log.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x (log.f64 x)))) (pow.f64 (log.f64 (/.f64 x (log.f64 x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 (/.f64 x (log.f64 x))) 2/3) (cbrt.f64 (log.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x (log.f64 x))))) (pow.f64 (pow.f64 (log.f64 (/.f64 x (log.f64 x))) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x (log.f64 x))) 2/3)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x (log.f64 x))))) 4) (cbrt.f64 (log.f64 (/.f64 x (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (log.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (/.f64 x (log.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 x (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 (/.f64 x (log.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (/.f64 x (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (/.f64 x (log.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x (log.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 x (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (log.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (/.f64 x (log.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 x (log.f64 x)))))))"]],"rules":[["egg-rr",19],["egg-rr",57]],"time":43.76806640625,"type":"rewrite"},{"count":[[96,81]],"inputs":[["(*.f64 -1 (/.f64 x (log.f64 (/.f64 1 x))))","(*.f64 -1 (/.f64 x (log.f64 (/.f64 1 x))))","(*.f64 -1 (/.f64 x (log.f64 (/.f64 1 x))))","(*.f64 -1 (/.f64 x (log.f64 (/.f64 1 x))))","(/.f64 x (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(/.f64 x (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(/.f64 x (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(/.f64 x (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(+.f64 (log.f64 (/.f64 1 (log.f64 x))) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 (log.f64 x))) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 (log.f64 x))) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 (log.f64 x))) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 x (log.f64 (/.f64 1 x))))","(/.f64 x (log.f64 x))","(*.f64 -1 (/.f64 x (log.f64 (/.f64 1 x))))","(/.f64 x (log.f64 x))","(*.f64 -1 (/.f64 x (log.f64 (/.f64 1 x))))","(/.f64 x (log.f64 x))","(*.f64 -1 (/.f64 x (log.f64 (/.f64 1 x))))","(/.f64 x (log.f64 x))","(/.f64 x (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(/.f64 x (log.f64 x))","(/.f64 x (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(/.f64 x (log.f64 x))","(/.f64 x (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(/.f64 x (log.f64 x))","(/.f64 x (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(/.f64 x (log.f64 x))","(+.f64 (log.f64 (/.f64 1 (log.f64 x))) (log.f64 x))","(log.f64 (/.f64 x (log.f64 x)))","(+.f64 (log.f64 (/.f64 1 (log.f64 x))) (log.f64 x))","(log.f64 (/.f64 x (log.f64 x)))","(+.f64 (log.f64 (/.f64 1 (log.f64 x))) (log.f64 x))","(log.f64 (/.f64 x (log.f64 x)))","(+.f64 (log.f64 (/.f64 1 (log.f64 x))) (log.f64 x))","(log.f64 (/.f64 x (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 -1 (log.f64 (/.f64 1 x)))))","(log.f64 (/.f64 x (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 -1 (log.f64 (/.f64 1 x)))))","(log.f64 (/.f64 x (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 -1 (log.f64 (/.f64 1 x)))))","(log.f64 (/.f64 x (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 -1 (log.f64 (/.f64 1 x)))))","(log.f64 (/.f64 x (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))","(log.f64 (/.f64 x (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))","(log.f64 (/.f64 x (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))","(log.f64 (/.f64 x (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))","(log.f64 (/.f64 x (log.f64 x)))"]],"time":77.794921875,"type":"simplify"},{"compiler":[[922,415]],"time":11.943115234375,"type":"eval"},{"alts":[["(log.f64 (pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 3))","next",0.010097509768442016],["(log.f64 (/.f64 (/.f64 (/.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 4)))","fresh",0.02734375]],"compiler":[[9,7],[20,13],[9,7],[20,13]],"count":[[83,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[81,2],"picked":[1,0]}],"min-error":[0],"time":16.18994140625,"type":"prune"},{"compiler":[[29,10]],"locations":[["(log.f64 (pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 3))",0.01171875,true],["(cbrt.f64 (/.f64 x (log.f64 x)))",0.15625,true],["(/.f64 x (log.f64 x))",0.2734375,false],["(pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 3)",0.7390977539794927,true]],"time":7.623046875,"type":"localize"},{"count":[[3,0]],"series":[["(log.f64 (pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 3))","x","-inf",1.2861328125],["(log.f64 (pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 3))","x","inf",0.72900390625],["(log.f64 (pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 3))","x","0",1.026123046875],["(cbrt.f64 (/.f64 x (log.f64 x)))","x","-inf",0.31396484375],["(cbrt.f64 (/.f64 x (log.f64 x)))","x","inf",0.242919921875],["(cbrt.f64 (/.f64 x (log.f64 x)))","x","0",0.244140625],["(pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 3)","x","-inf",1.007080078125],["(pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 3)","x","inf",0.62109375],["(pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 3)","x","0",0.743896484375]],"time":6.350830078125,"type":"series"},{"count":[[3,126]],"inputs":[["(pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 3)","(cbrt.f64 (/.f64 x (log.f64 x)))","(log.f64 (pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (log.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 x (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (neg.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (/.f64 (pow.f64 x 2/3) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 x (log.f64 x)))) (pow.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 7/3) (cbrt.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3) 4/3) (cbrt.f64 (cbrt.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3)) (pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 x 2/3) (log.f64 x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) -1/3) (*.f64 x (pow.f64 (log.f64 x) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 x) -1/3)) (/.f64 (neg.f64 x) (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (neg.f64 (pow.f64 x 2/3)) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (cbrt.f64 (log.f64 x)))) (/.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3) (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) -1) (/.f64 (cbrt.f64 x) (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 -1 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (pow.f64 (log.f64 x) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (log.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (log.f64 x))) (pow.f64 (log.f64 x) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (neg.f64 x) (log.f64 x))) (neg.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) (pow.f64 (log.f64 x) 2/3)) (cbrt.f64 (/.f64 (*.f64 x x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 x) -2/3)) (/.f64 (neg.f64 x) (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x x) (log.f64 x))) (/.f64 (cbrt.f64 x) (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) -2/3) (/.f64 x (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (neg.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 x) (log.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3) (*.f64 0 (cbrt.f64 (/.f64 (neg.f64 x) (log.f64 x)))))) (cbrt.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (log.f64 x))) (pow.f64 (/.f64 x (log.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3) (cbrt.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) (log.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (/.f64 (cbrt.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 x (cbrt.f64 (log.f64 x))) (pow.f64 (/.f64 x (log.f64 x)) 2))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (log.f64 x)) 2) (*.f64 x (pow.f64 (log.f64 x) -2/3)))) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 x) (pow.f64 (/.f64 x (log.f64 x)) 2))) (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (log.f64 x)) 2) (/.f64 x (cbrt.f64 (log.f64 x))))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (log.f64 x)) 2) (neg.f64 x))) (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (pow.f64 (/.f64 x (log.f64 x)) 2))) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 x)) (pow.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3) 4/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 x) 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 x) -1/3) x) (pow.f64 (log.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x (log.f64 x))) (pow.f64 x 2/3)) (pow.f64 (log.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (log.f64 x))) (pow.f64 (log.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x x) (log.f64 x))) (cbrt.f64 x)) (pow.f64 (log.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 (/.f64 x (log.f64 x)) 2/3)) (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (cbrt.f64 (log.f64 x))) (neg.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x x) (log.f64 x))) (cbrt.f64 (neg.f64 x))) (neg.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (/.f64 (*.f64 x x) (log.f64 x)))) (neg.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (pow.f64 (log.f64 x) 2/3)) (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (log.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3)) (cbrt.f64 (cbrt.f64 x))) 3) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3))) 3) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (log.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (neg.f64 x) (log.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (neg.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (log.f64 x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (/.f64 (neg.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 x (log.f64 x)))) (cbrt.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3)) (cbrt.f64 (cbrt.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (/.f64 (pow.f64 x 2/3) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (/.f64 x (log.f64 x))))) (cbrt.f64 (pow.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (/.f64 (neg.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (neg.f64 x) (log.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (pow.f64 (log.f64 x) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) -1/3) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (neg.f64 (pow.f64 (log.f64 x) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) -1/3)) (cbrt.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3)) (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3))) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (neg.f64 x) (log.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (neg.f64 (cbrt.f64 (cbrt.f64 x))) 3) (pow.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (cbrt.f64 x)) (pow.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3) 4/3))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x x) (log.f64 x))) (cbrt.f64 (neg.f64 x)))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) (cbrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 x) 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (neg.f64 x) (cbrt.f64 (log.f64 x)))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 x (log.f64 x))) (pow.f64 x 2/3))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (/.f64 (*.f64 x x) (log.f64 x))))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 x (cbrt.f64 (log.f64 x)))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x x) (log.f64 x))) (cbrt.f64 x))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 x) -1/3) x)) (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3))) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 x) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (log.f64 x)) 2/3) (cbrt.f64 (neg.f64 x)))) (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 (/.f64 x (log.f64 x)) 2/3))) (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (neg.f64 x) (pow.f64 (log.f64 x) 2/3))) (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x (log.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (log.f64 x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (/.f64 (neg.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 x (log.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 x (log.f64 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (log.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x (log.f64 x)))) (pow.f64 (log.f64 (/.f64 x (log.f64 x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 (/.f64 x (log.f64 x))) 2/3) (cbrt.f64 (log.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (log.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (/.f64 x (log.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 x (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 (/.f64 x (log.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (/.f64 x (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x (log.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (/.f64 x (log.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 x (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (log.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (/.f64 x (log.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 x (log.f64 x)))))))"]],"rules":[["egg-rr",17],["egg-rr",42],["egg-rr",67]],"time":56.10107421875,"type":"rewrite"},{"count":[[126,126]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"time":27.033935546875,"type":"simplify"},{"compiler":[[2499,1213]],"time":28.990966796875,"type":"eval"},{"alts":[["(log.f64 (pow.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) 3))","next",0]],"compiler":[[23,17],[23,17]],"count":[[187,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[185,1],"picked":[1,0]}],"min-error":[0],"time":58.34814453125,"type":"prune"},{"compiler":[[124,65]],"locations":[["(/.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))",0.34765625,true],["(pow.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) 3)",0.7390977539794927,true],["(pow.f64 (log.f64 x) 2/3)",1.1525846193913396,true],["(pow.f64 (log.f64 x) -2/3)",1.2096334963810853,true]],"time":48.31884765625,"type":"localize"},{"count":[[4,24]],"series":[["(/.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))","x","-inf",0.219970703125],["(/.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))","x","inf",0.177001953125],["(/.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))","x","0",0.201171875],["(pow.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) 3)","x","-inf",0.35009765625],["(pow.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) 3)","x","inf",0.336181640625],["(pow.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) 3)","x","0",18.631103515625],["(pow.f64 (log.f64 x) 2/3)","x","-inf",0.35205078125],["(pow.f64 (log.f64 x) 2/3)","x","inf",0.3310546875],["(pow.f64 (log.f64 x) 2/3)","x","0",0.35986328125],["(pow.f64 (log.f64 x) -2/3)","x","-inf",8.657958984375],["(pow.f64 (log.f64 x) -2/3)","x","inf",9.48095703125],["(pow.f64 (log.f64 x) -2/3)","x","0",8.658203125]],"time":47.953125,"type":"series"},{"count":[[4,222]],"inputs":[["(pow.f64 (log.f64 x) -2/3)","(pow.f64 (log.f64 x) 2/3)","(pow.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) 3)","(/.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 x) -2/3) 0) (pow.f64 (log.f64 x) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 x) -2/3) (*.f64 (pow.f64 (log.f64 x) -2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (log.f64 x) -2/3)) (pow.f64 (log.f64 x) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 x) -2/3) (*.f64 0 (pow.f64 (log.f64 x) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) -2/3)) (pow.f64 (pow.f64 (log.f64 x) -2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (log.f64 x) -2/3) 2/3) (cbrt.f64 (pow.f64 (log.f64 x) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 x) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) -2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 x) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 x) -2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (log.f64 x) -2/3) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 x) -2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 x) -2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 x) -2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (log.f64 x) -2/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 x) -2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 x) -2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 x) -2/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 x) -2/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 x) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (log.f64 x) -2/3) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 x) 2/3) 0) (pow.f64 (log.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 x) 2/3) (*.f64 (pow.f64 (log.f64 x) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (log.f64 x) 2/3)) (pow.f64 (log.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 x) 2/3) (*.f64 0 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 x) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 x)) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 4) (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (+.f64 2/3 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) (pow.f64 (cbrt.f64 (log.f64 x)) (+.f64 2/3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 x)) (+.f64 2/3 1)) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (+.f64 2/3 2)) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 x))) (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 x) 2/3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (+.f64 2/3 2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) (+.f64 2/3 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 x) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 x) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 x) 2/3) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 x) 2/3) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 x) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 x) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 x) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 0) (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) (*.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) (*.f64 0 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)) (pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3) (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (log.f64 x)) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (pow.f64 (log.f64 x) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) (cbrt.f64 (/.f64 (pow.f64 (log.f64 x) -1/3) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)) (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3) (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)) (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)) (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)) (pow.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (log.f64 x) -1/3) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 4))) (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) -1/3) (*.f64 x (pow.f64 (log.f64 x) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (/.f64 1 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)) (neg.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (neg.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)) (+.f64 2/3 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)) (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) (/.f64 (/.f64 (pow.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) 2/3) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) (neg.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) 2/3))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) 2/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) (neg.f64 (/.f64 (/.f64 (pow.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) 2/3) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (log.f64 x)))))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3) (cbrt.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)))) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3) (cbrt.f64 (*.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3) (cbrt.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) (cbrt.f64 (pow.f64 (log.f64 x) -1/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)) 1) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)) (cbrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)) -1) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3))) (cbrt.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (pow.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) 2/3) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) 2/3)) (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) 2/3) (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 (/.f64 (pow.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) 2/3) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)) 1) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) 1) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3))) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (pow.f64 (cbrt.f64 (log.f64 x)) -2/3))) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)) (neg.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))))) (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3))) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3))) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (/.f64 (pow.f64 (log.f64 x) -1/3) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 4)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3))) (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))) 4))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)) 1) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)) -1) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) -1) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)) (cbrt.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)) -1) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))) (neg.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)) 1) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (pow.f64 (cbrt.f64 (log.f64 x)) -2/3))) 3) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))) 3) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3) (cbrt.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) 0) (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) (*.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))) (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) (*.f64 0 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))) (cbrt.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)) (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (neg.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3))) (cbrt.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)) (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3))) (cbrt.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3))) (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))) (cbrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3))) (cbrt.f64 (pow.f64 (log.f64 x) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (pow.f64 (cbrt.f64 (log.f64 x)) -2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) (+.f64 2 1/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))) (cbrt.f64 (cbrt.f64 (/.f64 (pow.f64 (log.f64 x) -1/3) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)) (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))) (cbrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)))) (cbrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (pow.f64 (cbrt.f64 (log.f64 x)) -2/3))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3))) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (cbrt.f64 (*.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3))) (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)) (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3)) (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))))) (cbrt.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) 2/3))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)) (cbrt.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)))) (neg.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 2/3))) (cbrt.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3))) (neg.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (pow.f64 (cbrt.f64 (log.f64 x)) -2/3))) 1) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))) 1) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3))) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) -2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3))) -1) (neg.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) -1) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))) 1) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (*.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (pow.f64 (cbrt.f64 (log.f64 x)) -2/3))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (*.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (pow.f64 (cbrt.f64 (log.f64 x)) -2/3))) 1) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))) (neg.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))))) (neg.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (*.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (pow.f64 (cbrt.f64 (log.f64 x)) -2/3)))) (neg.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 x)))) 4))) (cbrt.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))))))"]],"rules":[["egg-rr",66],["egg-rr",102],["egg-rr",33],["egg-rr",21]],"time":59.241943359375,"type":"rewrite"},{"count":[[246,228]],"inputs":[["(pow.f64 (/.f64 1 (pow.f64 (log.f64 x) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (log.f64 x) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (log.f64 x) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (log.f64 x) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 1 x)) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 1 x)) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 1 x)) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 1 x)) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) 1/3)","(pow.f64 (pow.f64 (log.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) 1/3)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (/.f64 1 (pow.f64 (log.f64 x) 2)) 1/3)","(cbrt.f64 (pow.f64 (log.f64 x) -2))","(pow.f64 (/.f64 1 (pow.f64 (log.f64 x) 2)) 1/3)","(cbrt.f64 (pow.f64 (log.f64 x) -2))","(pow.f64 (/.f64 1 (pow.f64 (log.f64 x) 2)) 1/3)","(cbrt.f64 (pow.f64 (log.f64 x) -2))","(pow.f64 (/.f64 1 (pow.f64 (log.f64 x) 2)) 1/3)","(cbrt.f64 (pow.f64 (log.f64 x) -2))","(pow.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 1 x)) 2)) 1/3)","(cbrt.f64 (pow.f64 (log.f64 x) -2))","(pow.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 1 x)) 2)) 1/3)","(cbrt.f64 (pow.f64 (log.f64 x) -2))","(pow.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 1 x)) 2)) 1/3)","(cbrt.f64 (pow.f64 (log.f64 x) -2))","(pow.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 1 x)) 2)) 1/3)","(cbrt.f64 (pow.f64 (log.f64 x) -2))","(pow.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) 1/3)","(cbrt.f64 (pow.f64 (log.f64 x) -2))","(pow.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) 1/3)","(cbrt.f64 (pow.f64 (log.f64 x) -2))","(pow.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) 1/3)","(cbrt.f64 (pow.f64 (log.f64 x) -2))","(pow.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) 1/3)","(cbrt.f64 (pow.f64 (log.f64 x) -2))","(pow.f64 (pow.f64 (log.f64 x) 2) 1/3)","(pow.f64 (log.f64 x) 2/3)","(pow.f64 (pow.f64 (log.f64 x) 2) 1/3)","(pow.f64 (log.f64 x) 2/3)","(pow.f64 (pow.f64 (log.f64 x) 2) 1/3)","(pow.f64 (log.f64 x) 2/3)","(pow.f64 (pow.f64 (log.f64 x) 2) 1/3)","(pow.f64 (log.f64 x) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) 1/3)","(pow.f64 (log.f64 x) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) 1/3)","(pow.f64 (log.f64 x) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) 1/3)","(pow.f64 (log.f64 x) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) 1/3)","(pow.f64 (log.f64 x) 2/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) 1/3)","(pow.f64 (log.f64 x) 2/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) 1/3)","(pow.f64 (log.f64 x) 2/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) 1/3)","(pow.f64 (log.f64 x) 2/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) 1/3)","(pow.f64 (log.f64 x) 2/3)"]],"time":84.76806640625,"type":"simplify"},{"compiler":[[6167,3485]],"time":65.051025390625,"type":"eval"},{"alts":[["(log.f64 (pow.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) 3))","done",0]],"compiler":[[23,17]],"count":[[229,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[228,0],"picked":[1,1]}],"min-error":[0],"time":90.72998046875,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))",0,1],["(log.f64 x)",0,1]],"compiler":[[2,1],[7,4],[3,2],[61,34]],"count":[[5,1]],"inputs":[["(log.f64 (pow.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) 3))","(log.f64 (pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 3))","(log.f64 (/.f64 (/.f64 (/.f64 x (cbrt.f64 (log.f64 x))) (cbrt.f64 (pow.f64 (log.f64 x) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 x))) 4)))","(log.f64 (/.f64 x (log.f64 x)))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))"]],"link":["."],"name":["Jmat.Real.lambertw, estimator"],"oracle":[0.29916000976844204],"outputs":[["(log.f64 (pow.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) 3))"]],"time":10.830078125,"times":[["x",3.089111328125],["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))",3.1298828125],["(log.f64 x)",3.31591796875]],"type":"regimes"},{"compiler":[[23,17]],"inputs":[["(log.f64 (pow.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) 3))"]],"method":["egg-herbie"],"outputs":[["(log.f64 (pow.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 2/3)))) 3))","(log.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) -2/3)) (cbrt.f64 (log.f64 x))))"]],"stop":[["done",1]],"time":20.385009765625,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[23,17]],"remove-preprocessing":[[]],"time":13.18505859375,"type":"end"}]
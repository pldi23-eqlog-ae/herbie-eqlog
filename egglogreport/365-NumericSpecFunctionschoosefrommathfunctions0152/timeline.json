[{"compiler":[[11,7]],"method":["search"],"sampling":[[12,0.28473874457586135,0.6572394309730498,0.05802182445108883],[11,0.25353449859494503,0.7059960653182316,0.04046943608682341],[10,0.19502653738072695,0.7645040265324496,0.04046943608682341],[9,0.031204245980916312,0.9517295024179475,0.017066251601136173],[8,0.031204245980916312,0.9673316254084057,0.0014641286106780171],[7,0.0,0.998535871389322,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":108.9189453125,"type":"analyze"},{"outcomes":[["body",256,"invalid",42.101806640625,1082],["body",256,"valid",321.6171875,8256]],"time":372.10205078125,"type":"sample"},{"compiler":[[10,6]],"inputs":[["0","1","2"],["(/.f64 (*.f64 x (+.f64 y z)) z)","(/.f64 (*.f64 y (+.f64 x z)) z)","(/.f64 (*.f64 z (+.f64 y x)) x)","(/.f64 (*.f64 x (+.f64 z y)) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(/.f64 (*.f64 x (+.f64 y z)) z)","(/.f64 (*.f64 y (+.f64 x z)) z)","(/.f64 (*.f64 z (+.f64 y x)) x)","(/.f64 (*.f64 x (+.f64 z y)) y)","(/.f64 (*.f64 x (+.f64 y z)) y)"]],"symmetry":[[]],"time":68.8388671875,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(/.f64 (*.f64 x (+.f64 y z)) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 x (+.f64 y z)) z)"]],"time":17.376953125,"type":"simplify"},{"compiler":[[10,6]],"time":0.196044921875,"type":"eval"},{"alts":[["(/.f64 (*.f64 x (+.f64 y z)) z)","next",10.988984066735751]],"compiler":[[10,6],[10,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[10.988984066735751],"time":0.674072265625,"type":"prune"},{"compiler":[[21,6]],"locations":[["(*.f64 x (+.f64 y z))",0.015625,true],["(/.f64 (*.f64 x (+.f64 y z)) z)",10.446833161385527,true]],"time":4.057861328125,"type":"localize"},{"count":[[2,72]],"series":[["(*.f64 x (+.f64 y z))","z","-inf",0.198974609375],["(*.f64 x (+.f64 y z))","z","inf",0.22802734375],["(*.f64 x (+.f64 y z))","z","0",0.14697265625],["(*.f64 x (+.f64 y z))","y","-inf",0.195068359375],["(*.f64 x (+.f64 y z))","y","inf",0.169189453125],["(*.f64 x (+.f64 y z))","y","0",0.155029296875],["(*.f64 x (+.f64 y z))","x","-inf",0.291015625],["(*.f64 x (+.f64 y z))","x","inf",0.305908203125],["(*.f64 x (+.f64 y z))","x","0",0.14404296875],["(/.f64 (*.f64 x (+.f64 y z)) z)","z","-inf",0.6171875],["(/.f64 (*.f64 x (+.f64 y z)) z)","z","inf",0.38916015625],["(/.f64 (*.f64 x (+.f64 y z)) z)","z","0",0.3310546875],["(/.f64 (*.f64 x (+.f64 y z)) z)","y","-inf",0.3701171875],["(/.f64 (*.f64 x (+.f64 y z)) z)","y","inf",0.56298828125],["(/.f64 (*.f64 x (+.f64 y z)) z)","y","0",0.383056640625],["(/.f64 (*.f64 x (+.f64 y z)) z)","x","-inf",0.405029296875],["(/.f64 (*.f64 x (+.f64 y z)) z)","x","inf",0.400146484375],["(/.f64 (*.f64 x (+.f64 y z)) z)","x","0",0.571044921875]],"time":6.070068359375,"type":"series"},{"count":[[2,119]],"inputs":[["(/.f64 (*.f64 x (+.f64 y z)) z)","(*.f64 x (+.f64 y z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 0) (/.f64 (*.f64 x (+.f64 y z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x (+.f64 y z)) z) (*.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 z) (*.f64 x z)) (*.f64 (/.f64 1 z) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 z) (*.f64 x y)) (*.f64 (/.f64 1 z) (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 x (+.f64 y z)) z)) (/.f64 (*.f64 x (+.f64 y z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x (+.f64 y z)) z) (*.f64 0 (/.f64 (*.f64 x (+.f64 y z)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x z) (/.f64 1 z)) (*.f64 (*.f64 x y) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x y) (/.f64 1 z)) (*.f64 (*.f64 x z) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (*.f64 x (+.f64 y z)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 z)) (neg.f64 (/.f64 (*.f64 x (+.f64 y z)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y z) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 x (+.f64 y z)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (+.f64 y z)) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x (+.f64 y z)) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 2)) (cbrt.f64 (/.f64 (*.f64 x (+.f64 y z)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (+.f64 y z))) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (+.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 z)) (/.f64 (+.f64 y z) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 y z) (cbrt.f64 z)) (/.f64 x (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 y z)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 (*.f64 x (+.f64 y z)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x (+.f64 y z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2)) z) (cbrt.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) (neg.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x (+.f64 y z)) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) (+.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 y z) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (*.f64 z z))) (/.f64 (+.f64 y z) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 y z) (cbrt.f64 (*.f64 z z))) (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (+.f64 y z)) (cbrt.f64 (*.f64 z z))) (cbrt.f64 (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (+.f64 y z)) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 z 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 y z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (+.f64 y z))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (+.f64 y z)) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) (+.f64 y z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 x (+.f64 y z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x (+.f64 y z)) z)) (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 y z) (cbrt.f64 z)) x) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 2)) (cbrt.f64 (*.f64 x (+.f64 y z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 2)) (cbrt.f64 (neg.f64 (*.f64 x (+.f64 y z))))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (+.f64 y z)) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (+.f64 y z)) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (+.f64 y z) (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 x (+.f64 y z)))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 2))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 y z) (/.f64 x (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x (+.f64 y z))) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (+.f64 y z)) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (+.f64 y z)) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x (+.f64 y z)) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (+.f64 y z)) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (+.f64 y z)) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (+.f64 y z)) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 x (+.f64 y z)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (*.f64 x (+.f64 y z)) z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (+.f64 y z)) 0) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y z)) (*.f64 (*.f64 x (+.f64 y z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (neg.f64 (*.f64 x y))) (*.f64 -1 (neg.f64 (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (+.f64 y z))) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y z)) (*.f64 0 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (*.f64 x y)) -1) (*.f64 (neg.f64 (*.f64 x z)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 y z)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2)) (cbrt.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y z) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2)) (*.f64 x (cbrt.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (+.f64 y z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (+.f64 y z) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2)) x) (cbrt.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 y z)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (*.f64 z (cbrt.f64 x)) (*.f64 y (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (*.f64 y (cbrt.f64 x)) (*.f64 z (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 y z)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 x (+.f64 y z)))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (+.f64 y z)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (+.f64 y z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) x) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) x) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z x (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x z)) (cbrt.f64 (pow.f64 (*.f64 x z) 2)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x z (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (*.f64 x z))))))"]],"rules":[["egg-rr",57],["egg-rr",62]],"time":25.73291015625,"type":"rewrite"},{"count":[[191,127]],"inputs":[["(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","x","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","x","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","x","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 x (+.f64 y z)) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 x (+.f64 y z)) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 x (+.f64 y z)) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 x (+.f64 y z)) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 x (+.f64 y z)) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 x (+.f64 y z)) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 x (+.f64 y z)) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 x (+.f64 y z)) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 x (+.f64 y z)) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 x (+.f64 y z)) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 x (+.f64 y z)) z)","(/.f64 (*.f64 (+.f64 y z) x) z)","(/.f64 (*.f64 x (+.f64 y z)) z)","x","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 x (/.f64 y z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 x (/.f64 y z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 x (/.f64 y z) x)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 x (/.f64 y z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 x (/.f64 y z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 x (/.f64 y z) x)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 x (/.f64 y z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 x (/.f64 y z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 x (/.f64 y z) x)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 x (/.f64 y z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 x (/.f64 y z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 x (/.f64 y z) x)","x","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 x (/.f64 y z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 x (/.f64 y z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 x (/.f64 y z) x)","x","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 x (/.f64 y z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 x (/.f64 y z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 x (/.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))"]],"time":205.9951171875,"type":"simplify"},{"compiler":[[1562,436]],"time":13.39794921875,"type":"eval"},{"alts":[["(+.f64 (*.f64 (*.f64 x y) (/.f64 1 z)) (*.f64 (*.f64 x z) (/.f64 1 z)))","fresh",11.054432846041076],["(/.f64 (*.f64 x (+.f64 y z)) z)","done",10.988984066735751],["(*.f64 (+.f64 y z) (/.f64 x z))","fresh",12.283103553154845],["(fma.f64 x (/.f64 y z) x)","next",3.30859375],["(pow.f64 (cbrt.f64 (/.f64 (*.f64 x (+.f64 y z)) z)) 3)","fresh",11.444623060132992]],"compiler":[[18,12],[10,6],[10,6],[9,5],[13,9],[18,12],[10,6],[9,5],[13,9]],"count":[[128,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[127,4],"picked":[1,1]}],"min-error":[0],"time":27.362060546875,"type":"prune"},{"compiler":[[15,5]],"locations":[["(fma.f64 x (/.f64 y z) x)",3.104803643213747,true]],"time":4.1220703125,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 x (/.f64 y z) x)","z","-inf",0.2919921875],["(fma.f64 x (/.f64 y z) x)","z","inf",0.281982421875],["(fma.f64 x (/.f64 y z) x)","z","0",0.299072265625],["(fma.f64 x (/.f64 y z) x)","y","-inf",1.04296875],["(fma.f64 x (/.f64 y z) x)","y","inf",0.35986328125],["(fma.f64 x (/.f64 y z) x)","y","0",0.31884765625],["(fma.f64 x (/.f64 y z) x)","x","-inf",0.4580078125],["(fma.f64 x (/.f64 y z) x)","x","inf",0.35791015625],["(fma.f64 x (/.f64 y z) x)","x","0",0.574951171875]],"time":4.08984375,"type":"series"},{"count":[[1,38]],"inputs":[["(fma.f64 x (/.f64 y z) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (/.f64 y z) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x y) z) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 x (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (+.f64 (/.f64 y z) 1) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (/.f64 y z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 y z) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) (pow.f64 (fma.f64 x (/.f64 y z) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (/.f64 y z) x) 2/3) (cbrt.f64 (fma.f64 x (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 x (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x (/.f64 y z) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) (*.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 (*.f64 x y) z))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 (*.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (/.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x (/.f64 y z) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (/.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (/.f64 y z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (/.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 x (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (/.f64 y z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (/.f64 y z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) (/.f64 1 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (/.f64 y z))) (pow.f64 (/.f64 y z) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y z) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x y) z) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 x y) z) x)))))"]],"rules":[["egg-rr",38]],"time":38.7890625,"type":"rewrite"},{"count":[[74,44]],"inputs":[["(*.f64 (+.f64 1 (/.f64 y z)) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (/.f64 y z)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (/.f64 y z)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (/.f64 y z)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (/.f64 y z)) 1) x))","x","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","x","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","x","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 1 (/.f64 y z)) x)","(fma.f64 y (/.f64 x z) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(fma.f64 y (/.f64 x z) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(fma.f64 y (/.f64 x z) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(fma.f64 y (/.f64 x z) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(fma.f64 y (/.f64 x z) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(fma.f64 y (/.f64 x z) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(fma.f64 y (/.f64 x z) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(fma.f64 y (/.f64 x z) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (/.f64 y z)) 1) x))","(fma.f64 y (/.f64 x z) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (/.f64 y z)) 1) x))","(fma.f64 y (/.f64 x z) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (/.f64 y z)) 1) x))","(fma.f64 y (/.f64 x z) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (/.f64 y z)) 1) x))","(fma.f64 y (/.f64 x z) x)","x","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","x","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","x","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)"]],"time":117.162109375,"type":"simplify"},{"compiler":[[435,133]],"time":4.56201171875,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 3)","next",3.948120312590147],["(fma.f64 (*.f64 x y) (/.f64 1 z) x)","fresh",4.7871927209333665],["(fma.f64 y (/.f64 x z) x)","fresh",5.9973962147273],["(fma.f64 x (/.f64 y z) x)","done",3.30859375],["(/.f64 (*.f64 x (+.f64 y z)) z)","done",10.988984066735751]],"compiler":[[12,8],[11,7],[9,5],[9,5],[10,6],[12,8],[11,7],[9,5]],"count":[[49,5]],"kept":[{"done":[1,1],"fresh":[3,0],"new":[44,3],"picked":[1,1]}],"min-error":[0],"time":8.804931640625,"type":"prune"},{"compiler":[[32,9]],"locations":[["(cbrt.f64 (fma.f64 x (/.f64 y z) x))",0.1015625,true],["(pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 3)",0.739467822358587,true],["(fma.f64 x (/.f64 y z) x)",3.104803643213747,false]],"time":6.0859375,"type":"localize"},{"count":[[2,24]],"series":[["(cbrt.f64 (fma.f64 x (/.f64 y z) x))","z","-inf",0.321044921875],["(cbrt.f64 (fma.f64 x (/.f64 y z) x))","z","inf",0.333984375],["(cbrt.f64 (fma.f64 x (/.f64 y z) x))","z","0",0.22412109375],["(cbrt.f64 (fma.f64 x (/.f64 y z) x))","y","-inf",0.253173828125],["(cbrt.f64 (fma.f64 x (/.f64 y z) x))","y","inf",0.239990234375],["(cbrt.f64 (fma.f64 x (/.f64 y z) x))","y","0",0.385986328125],["(cbrt.f64 (fma.f64 x (/.f64 y z) x))","x","-inf",0.2548828125],["(cbrt.f64 (fma.f64 x (/.f64 y z) x))","x","inf",0.239013671875],["(cbrt.f64 (fma.f64 x (/.f64 y z) x))","x","0",0.25],["(pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 3)","z","-inf",1.365966796875],["(pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 3)","z","inf",2.176025390625],["(pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 3)","z","0",0.39599609375],["(pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 3)","y","-inf",0.4560546875],["(pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 3)","y","inf",0.5458984375],["(pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 3)","y","0",1.93603515625],["(pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 3)","x","-inf",0.510009765625],["(pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 3)","x","inf",0.550048828125],["(pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 3)","x","0",0.75]],"time":11.498046875,"type":"series"},{"count":[[2,58]],"inputs":[["(pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 3)","(cbrt.f64 (fma.f64 x (/.f64 y z) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (/.f64 y z) x) (*.f64 (fma.f64 x (/.f64 y z) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (/.f64 y z) x) 0) (fma.f64 x (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (/.f64 y z) x) (*.f64 0 (fma.f64 x (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (/.f64 y z) x)) (fma.f64 x (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x))) (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 4/3) 2) (cbrt.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 1 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (+.f64 (pow.f64 x 2/3) (*.f64 (pow.f64 x 2/3) (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (/.f64 y z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (+.f64 (*.f64 (pow.f64 x 2/3) (/.f64 y z)) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 y z) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) (pow.f64 (fma.f64 x (/.f64 y z) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (/.f64 y z) x) 2/3) (cbrt.f64 (fma.f64 x (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 7/3) (cbrt.f64 (pow.f64 (fma.f64 x (/.f64 y z) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x (/.f64 y z) x) 2/3)) (pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 x (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x (/.f64 y z) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (/.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (/.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (/.f64 y z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (/.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 x (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (/.f64 y z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (/.f64 y z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (/.f64 y z))) (pow.f64 (/.f64 y z) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) (/.f64 1 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y z) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 x y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x y) z) 1 x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) (*.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 0) (cbrt.f64 (fma.f64 x (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) (*.f64 0 (cbrt.f64 (fma.f64 x (/.f64 y z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (fma.f64 x (/.f64 y z) x))) (cbrt.f64 (fma.f64 x (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 x (/.f64 y z) x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 4/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x (/.f64 y z) x) 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x))) (cbrt.f64 (pow.f64 (fma.f64 x (/.f64 y z) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (fma.f64 x (/.f64 y z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 x (/.f64 y z) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 x (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (/.f64 y z) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (fma.f64 x (/.f64 y z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (fma.f64 x (/.f64 y z) x))))))"]],"rules":[["egg-rr",18],["egg-rr",40]],"time":25.7099609375,"type":"rewrite"},{"count":[[82,89]],"inputs":[["(*.f64 (pow.f64 1 1/3) x)","(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 1 z))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 1 z)))) y))","(+.f64 (*.f64 (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 1 (pow.f64 z 2)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (/.f64 1 (pow.f64 z 2)))) (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (/.f64 1 (pow.f64 z 2)))))) (*.f64 2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 1 (pow.f64 z 2)))))) (pow.f64 y 2)) (+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 1 z))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 1 z)))) y)))","(+.f64 (*.f64 (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 1 (pow.f64 z 2)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (/.f64 1 (pow.f64 z 2)))) (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (/.f64 1 (pow.f64 z 2)))))) (*.f64 2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 1 (pow.f64 z 2)))))) (pow.f64 y 2)) (+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 1 z))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 1 z)))) y) (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3) (/.f64 1 (pow.f64 z 3)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 z 3)) (pow.f64 (pow.f64 x 7) 1/3))))))) (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (pow.f64 x 2) (pow.f64 z 3)))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3) (/.f64 1 (pow.f64 z 3)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 z 3)) (pow.f64 (pow.f64 x 7) 1/3))))))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (/.f64 1 (pow.f64 z 2)))) (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (/.f64 1 (pow.f64 z 2))))) z))) (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 z 3)) (pow.f64 (pow.f64 x 7) 1/3))))))) (pow.f64 y 3)))))","(*.f64 (pow.f64 1 1/3) x)","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 y z))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 y z)))))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 y z))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2)))) (pow.f64 z 2))) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 y z))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))))))))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 (*.f64 y (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))))) (pow.f64 z 3)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 3) (pow.f64 (pow.f64 x 7) 1/3)))) (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3) (pow.f64 y 3)))) (pow.f64 z 3)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 y z))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2)))) (pow.f64 z 2))) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 y z))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (pow.f64 (pow.f64 x 7) 1/3)))) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 3) (pow.f64 (pow.f64 x 7) 1/3)))) (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3) (pow.f64 y 3)))))) (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (*.f64 (pow.f64 y 3) (pow.f64 x 2))))) (pow.f64 z 3))))))))))))","(*.f64 (pow.f64 1 1/3) x)","(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) y)) (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) y))) z)))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) y)) (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) y))) z)) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2)))) (pow.f64 z 2))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2))))))))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) y)) (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) y))) z)) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2)))) (pow.f64 z 2))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (*.f64 (+.f64 (*.f64 -1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3) (pow.f64 y 3))) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 3) (pow.f64 (pow.f64 x 7) 1/3))))) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (*.f64 y (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/3 (*.f64 (+.f64 (*.f64 -1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3) (pow.f64 y 3))) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 3) (pow.f64 (pow.f64 x 7) 1/3))))) (pow.f64 (/.f64 1 x) 1/3))) (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (*.f64 (pow.f64 y 3) (pow.f64 x 2)))))) (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 3) (pow.f64 (pow.f64 x 7) 1/3))))))) (pow.f64 z 3))) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))))))))","(pow.f64 x 1/3)","(+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 y z))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 y z)))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3) (/.f64 1 (pow.f64 z 3)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 z 3)) (pow.f64 (pow.f64 x 7) 1/3)))))))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 y z))))))","(pow.f64 x 1/3)","(+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 y z))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 y z)))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 3) (pow.f64 (pow.f64 x 7) 1/3)))) (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3) (pow.f64 y 3)))) (pow.f64 z 3)))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 y z))))))","(pow.f64 x 1/3)","(+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 y z))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 y z)))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 1/3 (*.f64 (/.f64 (+.f64 (*.f64 -1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3) (pow.f64 y 3))) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 3) (pow.f64 (pow.f64 x 7) 1/3))))) (pow.f64 z 3)) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 y z))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 1 1/3) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 1 z))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 1 z)))) y))","(+.f64 x (*.f64 (/.f64 (pow.f64 (pow.f64 x 13) 1/9) z) y))","(+.f64 (*.f64 (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 1 (pow.f64 z 2)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (/.f64 1 (pow.f64 z 2)))) (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (/.f64 1 (pow.f64 z 2)))))) (*.f64 2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 1 (pow.f64 z 2)))))) (pow.f64 y 2)) (+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 1 z))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 1 z)))) y)))","(fma.f64 (fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x 17) 1/9) (pow.f64 z -2)) (fma.f64 (cbrt.f64 x) (/.f64 (*.f64 (pow.f64 (pow.f64 x 14) 1/9) -1/9) (*.f64 z z)) (/.f64 (*.f64 2/9 (pow.f64 (pow.f64 x 17) 1/9)) (*.f64 z z)))) (*.f64 y y) (+.f64 x (*.f64 (/.f64 (pow.f64 (pow.f64 x 13) 1/9) z) y)))","(+.f64 (*.f64 (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 1 (pow.f64 z 2)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (/.f64 1 (pow.f64 z 2)))) (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (/.f64 1 (pow.f64 z 2)))))) (*.f64 2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 1 (pow.f64 z 2)))))) (pow.f64 y 2)) (+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 1 z))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 1 z)))) y) (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3) (/.f64 1 (pow.f64 z 3)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 z 3)) (pow.f64 (pow.f64 x 7) 1/3))))))) (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (pow.f64 x 2) (pow.f64 z 3)))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3) (/.f64 1 (pow.f64 z 3)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 z 3)) (pow.f64 (pow.f64 x 7) 1/3))))))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (/.f64 1 (pow.f64 z 2)))) (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (/.f64 1 (pow.f64 z 2))))) z))) (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 z 3)) (pow.f64 (pow.f64 x 7) 1/3))))))) (pow.f64 y 3)))))","(fma.f64 (fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x 17) 1/9) (pow.f64 z -2)) (fma.f64 (cbrt.f64 x) (/.f64 (*.f64 (pow.f64 (pow.f64 x 14) 1/9) -1/9) (*.f64 z z)) (/.f64 (*.f64 2/9 (pow.f64 (pow.f64 x 17) 1/9)) (*.f64 z z)))) (*.f64 y y) (+.f64 x (fma.f64 (/.f64 (pow.f64 (pow.f64 x 13) 1/9) z) y (*.f64 (fma.f64 (cbrt.f64 x) (fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 x)) (*.f64 (*.f64 (pow.f64 z -3) (cbrt.f64 (pow.f64 x 7))) (+.f64 1/27 -2/9))) (/.f64 (*.f64 -2/27 (*.f64 x x)) (pow.f64 z 3))) (fma.f64 -1/3 (*.f64 (*.f64 (pow.f64 z -3) (cbrt.f64 (pow.f64 x 7))) (+.f64 1/27 -2/9)) (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 x 7) 1/9) (/.f64 (*.f64 (pow.f64 (pow.f64 x 14) 1/9) (pow.f64 z -2)) (/.f64 z -1/9))) (/.f64 (*.f64 -2/27 (cbrt.f64 (pow.f64 x 7))) (pow.f64 z 3))))) (pow.f64 y 3)))))","(*.f64 (pow.f64 1 1/3) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 y z))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 y z)))))","(+.f64 x (*.f64 (pow.f64 (pow.f64 x 13) 1/9) (/.f64 y z)))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 y z))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2)))) (pow.f64 z 2))) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 y z))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))))))))","(+.f64 x (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 x 13) 1/9) (/.f64 y z)) (fma.f64 (cbrt.f64 x) (/.f64 (*.f64 (pow.f64 (pow.f64 x 14) 1/9) (*.f64 y y)) (/.f64 (*.f64 z z) -1/9)) (fma.f64 2/3 (*.f64 (pow.f64 (pow.f64 x 13) 1/9) (/.f64 y z)) (*.f64 (*.f64 (pow.f64 (pow.f64 x 17) 1/9) (pow.f64 (/.f64 y z) 2)) 1/9)))))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 (*.f64 y (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))))) (pow.f64 z 3)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 3) (pow.f64 (pow.f64 x 7) 1/3)))) (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3) (pow.f64 y 3)))) (pow.f64 z 3)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 y z))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2)))) (pow.f64 z 2))) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) (/.f64 y z))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (pow.f64 (pow.f64 x 7) 1/3)))) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 3) (pow.f64 (pow.f64 x 7) 1/3)))) (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3) (pow.f64 y 3)))))) (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (*.f64 (pow.f64 y 3) (pow.f64 x 2))))) (pow.f64 z 3))))))))))))","(+.f64 x (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 x 7) 1/9) (*.f64 (*.f64 y (*.f64 (*.f64 (pow.f64 (pow.f64 x 14) 1/9) (*.f64 y y)) -1/9)) (pow.f64 z -3))) (fma.f64 -1/3 (*.f64 (*.f64 (*.f64 (pow.f64 y 3) (cbrt.f64 (pow.f64 x 7))) (+.f64 -2/9 1/27)) (pow.f64 z -3)) (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 x 13) 1/9) (/.f64 y z)) (+.f64 (fma.f64 (cbrt.f64 x) (/.f64 (*.f64 (pow.f64 (pow.f64 x 14) 1/9) (*.f64 y y)) (/.f64 (*.f64 z z) -1/9)) (fma.f64 2/3 (*.f64 (pow.f64 (pow.f64 x 13) 1/9) (/.f64 y z)) (*.f64 (*.f64 (pow.f64 (pow.f64 x 17) 1/9) (pow.f64 (/.f64 y z) 2)) 1/9))) (fma.f64 -2/27 (*.f64 (pow.f64 (/.f64 y z) 3) (cbrt.f64 (pow.f64 x 7))) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 x)) (*.f64 (*.f64 (pow.f64 y 3) (cbrt.f64 (pow.f64 x 7))) (+.f64 -2/9 1/27))) (*.f64 (*.f64 (pow.f64 y 3) (*.f64 x x)) -2/27))) (pow.f64 z -3))))))))","(*.f64 (pow.f64 1 1/3) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) y)) (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) y))) z)))","(+.f64 x (*.f64 (pow.f64 (pow.f64 x 13) 1/9) (/.f64 y z)))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) y)) (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) y))) z)) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2)))) (pow.f64 z 2))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2))))))))","(+.f64 (+.f64 x (*.f64 (pow.f64 (pow.f64 x 13) 1/9) (/.f64 y z))) (fma.f64 (cbrt.f64 x) (/.f64 (*.f64 (pow.f64 (pow.f64 x 14) 1/9) (*.f64 y y)) (/.f64 (*.f64 z z) -1/9)) (*.f64 (*.f64 (pow.f64 (pow.f64 x 17) 1/9) (pow.f64 (/.f64 y z) 2)) 1/9)))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) y)) (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9) y))) z)) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2)))) (pow.f64 z 2))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (*.f64 (+.f64 (*.f64 -1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3) (pow.f64 y 3))) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 3) (pow.f64 (pow.f64 x 7) 1/3))))) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (*.f64 y (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/3 (*.f64 (+.f64 (*.f64 -1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3) (pow.f64 y 3))) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 3) (pow.f64 (pow.f64 x 7) 1/3))))) (pow.f64 (/.f64 1 x) 1/3))) (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (*.f64 (pow.f64 y 3) (pow.f64 x 2)))))) (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 3) (pow.f64 (pow.f64 x 7) 1/3))))))) (pow.f64 z 3))) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))))))))","(+.f64 (+.f64 x (+.f64 (fma.f64 (cbrt.f64 x) (/.f64 (*.f64 (pow.f64 (pow.f64 x 14) 1/9) (*.f64 y y)) (/.f64 (*.f64 z z) -1/9)) (*.f64 (*.f64 (pow.f64 (pow.f64 x 17) 1/9) (pow.f64 (/.f64 y z) 2)) 1/9)) (*.f64 (+.f64 (*.f64 -1/3 (+.f64 (*.f64 (*.f64 (pow.f64 y 3) (cbrt.f64 (pow.f64 x 7))) (+.f64 2/9 -1/27)) (*.f64 (pow.f64 (pow.f64 x 7) 1/9) (*.f64 y (*.f64 (*.f64 (pow.f64 (pow.f64 x 14) 1/9) (*.f64 y y)) -1/9))))) (fma.f64 (cbrt.f64 x) (fma.f64 -2/3 (*.f64 (*.f64 (*.f64 (pow.f64 y 3) (cbrt.f64 (pow.f64 x 7))) (+.f64 2/9 -1/27)) (cbrt.f64 (/.f64 1 x))) (*.f64 (*.f64 (pow.f64 y 3) (*.f64 x x)) 2/27)) (*.f64 2/27 (*.f64 (pow.f64 y 3) (cbrt.f64 (pow.f64 x 7)))))) (neg.f64 (pow.f64 z -3))))) (*.f64 (pow.f64 (pow.f64 x 13) 1/9) (/.f64 y z)))","(pow.f64 x 1/3)","(cbrt.f64 x)","(+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 y z))))","(+.f64 (cbrt.f64 x) (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 x 7) 1/9) (/.f64 y z))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 y z)))))","(fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x 11) 1/9) (pow.f64 (/.f64 y z) 2)) (+.f64 (cbrt.f64 x) (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 x 7) 1/9) (/.f64 y z)))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3) (/.f64 1 (pow.f64 z 3)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 z 3)) (pow.f64 (pow.f64 x 7) 1/3)))))))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 y z))))))","(fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x 11) 1/9) (pow.f64 (/.f64 y z) 2)) (+.f64 (cbrt.f64 x) (fma.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 y 3)) (*.f64 (*.f64 (pow.f64 z -3) (cbrt.f64 (pow.f64 x 7))) (+.f64 1/27 -2/9))) (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 x 7) 1/9) (/.f64 y z))))))","(pow.f64 x 1/3)","(cbrt.f64 x)","(+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 y z))))","(+.f64 (cbrt.f64 x) (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 x 7) 1/9) (/.f64 y z))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 y z)))))","(fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x 11) 1/9) (pow.f64 (/.f64 y z) 2)) (+.f64 (cbrt.f64 x) (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 x 7) 1/9) (/.f64 y z)))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 3) (pow.f64 (pow.f64 x 7) 1/3)))) (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3) (pow.f64 y 3)))) (pow.f64 z 3)))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 y z))))))","(fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x 11) 1/9) (pow.f64 (/.f64 y z) 2)) (+.f64 (cbrt.f64 x) (fma.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (pow.f64 x -2)) (*.f64 (*.f64 (pow.f64 y 3) (cbrt.f64 (pow.f64 x 7))) (+.f64 -2/9 1/27))) (pow.f64 z -3)) (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 x 7) 1/9) (/.f64 y z))))))","(pow.f64 x 1/3)","(cbrt.f64 x)","(+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 y z))))","(+.f64 (cbrt.f64 x) (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 x 7) 1/9) (/.f64 y z))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 y z)))))","(fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x 11) 1/9) (pow.f64 (/.f64 y z) 2)) (+.f64 (cbrt.f64 x) (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 x 7) 1/9) (/.f64 y z)))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (/.f64 (pow.f64 y 2) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 1/3 (*.f64 (/.f64 (+.f64 (*.f64 -1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3) (pow.f64 y 3))) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 3) (pow.f64 (pow.f64 x 7) 1/3))))) (pow.f64 z 3)) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (/.f64 y z))))))","(fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x 11) 1/9) (pow.f64 (/.f64 y z) 2)) (+.f64 (cbrt.f64 x) (*.f64 1/3 (+.f64 (*.f64 (*.f64 (*.f64 (*.f64 (pow.f64 y 3) (cbrt.f64 (pow.f64 x 7))) (+.f64 2/9 -1/27)) (cbrt.f64 (pow.f64 x -2))) (pow.f64 z -3)) (*.f64 (pow.f64 (pow.f64 x 7) 1/9) (/.f64 y z))))))"]],"time":116.43994140625,"type":"simplify"},{"compiler":[[3634,2318]],"time":42.85302734375,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 3)","done",3.948120312590147],["(fma.f64 (*.f64 x y) (/.f64 1 z) x)","next",4.7871927209333665],["(fma.f64 y (/.f64 x z) x)","fresh",5.9973962147273],["(fma.f64 x (/.f64 y z) x)","done",3.30859375],["(/.f64 (*.f64 x (+.f64 y z)) z)","done",10.988984066735751]],"compiler":[[12,8],[11,7],[9,5],[9,5],[10,6],[11,7],[9,5]],"count":[[138,5]],"kept":[{"done":[2,2],"fresh":[2,2],"new":[133,0],"picked":[1,1]}],"min-error":[0],"time":24.278076171875,"type":"prune"},{"compiler":[[21,10]],"locations":[["(fma.f64 (*.f64 x y) (/.f64 1 z) x)",4.61649904403228,true]],"time":4.863037109375,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 (*.f64 x y) (/.f64 1 z) x)","z","-inf",0.283203125],["(fma.f64 (*.f64 x y) (/.f64 1 z) x)","z","inf",0.218994140625],["(fma.f64 (*.f64 x y) (/.f64 1 z) x)","z","0",0.251953125],["(fma.f64 (*.f64 x y) (/.f64 1 z) x)","y","-inf",0.287109375],["(fma.f64 (*.f64 x y) (/.f64 1 z) x)","y","inf",0.279052734375],["(fma.f64 (*.f64 x y) (/.f64 1 z) x)","y","0",0.300048828125],["(fma.f64 (*.f64 x y) (/.f64 1 z) x)","x","-inf",1.782958984375],["(fma.f64 (*.f64 x y) (/.f64 1 z) x)","x","inf",0.35791015625],["(fma.f64 (*.f64 x y) (/.f64 1 z) x)","x","0",0.658935546875]],"time":4.529052734375,"type":"series"},{"count":[[1,38]],"inputs":[["(fma.f64 (*.f64 x y) (/.f64 1 z) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x z) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (/.f64 x z) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x y) z) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 y (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 1 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (/.f64 x z) x)) (pow.f64 (fma.f64 y (/.f64 x z) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y (/.f64 x z) x) 2/3) (cbrt.f64 (fma.f64 y (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y (/.f64 x z) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (/.f64 y z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) (*.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 (*.f64 x y) z))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 (*.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (/.f64 x z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (/.f64 x z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 y (/.f64 x z) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (/.f64 x z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 x z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (/.f64 x z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (/.f64 x z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (/.f64 x z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) (/.f64 1 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 x z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) (*.f64 x y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (/.f64 (pow.f64 (*.f64 x y) 2/3) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 x y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x y) z) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 z -2/3) x)))))"]],"rules":[["egg-rr",38]],"time":38.5478515625,"type":"rewrite"},{"count":[[74,42]],"inputs":[["(*.f64 (+.f64 1 (/.f64 y z)) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (/.f64 y z)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (/.f64 y z)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (/.f64 y z)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (/.f64 y z)) 1) x))","x","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","x","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","x","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 1 (/.f64 y z)) x)","(fma.f64 y (/.f64 x z) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(fma.f64 y (/.f64 x z) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(fma.f64 y (/.f64 x z) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(fma.f64 y (/.f64 x z) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(fma.f64 y (/.f64 x z) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(fma.f64 y (/.f64 x z) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(fma.f64 y (/.f64 x z) x)","(*.f64 (+.f64 1 (/.f64 y z)) x)","(fma.f64 y (/.f64 x z) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (/.f64 y z)) 1) x))","(fma.f64 y (/.f64 x z) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (/.f64 y z)) 1) x))","(fma.f64 y (/.f64 x z) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (/.f64 y z)) 1) x))","(fma.f64 y (/.f64 x z) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (/.f64 y z)) 1) x))","(fma.f64 y (/.f64 x z) x)","x","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","x","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","x","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) x)","(fma.f64 y (/.f64 x z) x)"]],"time":117.2900390625,"type":"simplify"},{"compiler":[[418,127]],"time":6.110107421875,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 3)","done",3.948120312590147],["(fma.f64 (*.f64 x y) (/.f64 1 z) x)","done",4.7871927209333665],["(fma.f64 y (/.f64 x z) x)","fresh",5.9973962147273],["(fma.f64 x (/.f64 y z) x)","done",3.30859375],["(/.f64 (*.f64 x (+.f64 y z)) z)","done",10.988984066735751]],"compiler":[[12,8],[11,7],[9,5],[9,5],[10,6]],"count":[[47,5]],"kept":[{"done":[3,3],"fresh":[1,0],"new":[42,1],"picked":[1,1]}],"min-error":[0],"time":7.27099609375,"type":"prune"},{"accuracy":[0.08041000976844202],"baseline":[3.30859375],"branch":[["x",1.145614990308557,3],["y",0.9996138022038404,3],["z",1.4885609289907493,3],["(/.f64 (*.f64 x (+.f64 y z)) z)",0.08041000976844202,5],["(/.f64 (*.f64 x (+.f64 y z)) z)",0.08041000976844202,5]],"compiler":[[4,3],[4,3],[4,3],[10,6],[10,6],[77,29]],"count":[[9,5]],"inputs":[["(fma.f64 y (/.f64 x z) x)","(pow.f64 (cbrt.f64 (fma.f64 x (/.f64 y z) x)) 3)","(fma.f64 (*.f64 x y) (/.f64 1 z) x)","(fma.f64 y (/.f64 x z) x)","(+.f64 (*.f64 (*.f64 x y) (/.f64 1 z)) (*.f64 (*.f64 x z) (/.f64 1 z)))","(*.f64 (+.f64 y z) (/.f64 x z))","(fma.f64 x (/.f64 y z) x)","(pow.f64 (cbrt.f64 (/.f64 (*.f64 x (+.f64 y z)) z)) 3)","(/.f64 (*.f64 x (+.f64 y z)) z)"]],"link":["."],"name":["Numeric.SpecFunctions:choose from math-functions-0.1.5.2"],"oracle":[26.71505065261655],"outputs":[["(fma.f64 y (/.f64 x z) x)","(/.f64 (*.f64 x (+.f64 y z)) z)","(fma.f64 x (/.f64 y z) x)","(fma.f64 (*.f64 x y) (/.f64 1 z) x)","(fma.f64 x (/.f64 y z) x)"]],"time":67.0439453125,"times":[["x",10.7900390625],["y",10.81005859375],["z",11.123046875],["(/.f64 (*.f64 x (+.f64 y z)) z)",16.454833984375],["(/.f64 (*.f64 x (+.f64 y z)) z)",16.264892578125]],"type":"regimes"},{"bstep":[[2.3361661163210003e+279,9.50983078015396e+285,0.027099609375],[2.7850414165555057e-56,1.1596941874401891e-50,0.030029296875],[-2.0839480178557056e+153,-2.3471778408034216e+150,0.074951171875],[{"type":"real","value":"-inf"},-2.341922098881268e+307,0.033935546875]],"compiler":[[6,5],[10,6]],"method":["left-value","left-value","left-value","left-value"],"time":0.2978515625,"type":"bsearch"},{"compiler":[[76,26]],"inputs":[["(if (<=.f64 (/.f64 (*.f64 x (+.f64 y z)) z) -inf.0) (fma.f64 y (/.f64 x z) x) (if (<=.f64 (/.f64 (*.f64 x (+.f64 y z)) z) -1999999999999999999466806008246307489711078038236873372571680376048739359044847523345839519129134316887338757648057420040785188188258060440266031719514112) (/.f64 (*.f64 x (+.f64 y z)) z) (if (<=.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 5521397077432451/110427941548649020598956093796432407239217743554726184882600387580788736) (fma.f64 x (/.f64 y z) x) (if (<=.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 4000000000000000231893169099841575053063450274182800146420881542605552434876729747786197078273948066841364024075386945734369792731600736977538960220961495274192371301985298734861946818478880125907969025901056112837459751160597443375283341064029997118075293381498119460268929974272) (fma.f64 (*.f64 x y) (/.f64 1 z) x) (fma.f64 x (/.f64 y z) x)))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (/.f64 (*.f64 x (+.f64 y z)) z) -inf.0) (fma.f64 y (/.f64 x z) x) (if (<=.f64 (/.f64 (*.f64 x (+.f64 y z)) z) -1999999999999999999466806008246307489711078038236873372571680376048739359044847523345839519129134316887338757648057420040785188188258060440266031719514112) (/.f64 (*.f64 x (+.f64 y z)) z) (if (<=.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 5521397077432451/110427941548649020598956093796432407239217743554726184882600387580788736) (fma.f64 x (/.f64 y z) x) (if (<=.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 4000000000000000231893169099841575053063450274182800146420881542605552434876729747786197078273948066841364024075386945734369792731600736977538960220961495274192371301985298734861946818478880125907969025901056112837459751160597443375283341064029997118075293381498119460268929974272) (fma.f64 (*.f64 x y) (/.f64 1 z) x) (fma.f64 x (/.f64 y z) x)))))","(if (<=.f64 (/.f64 (*.f64 x (+.f64 y z)) z) -inf.0) (fma.f64 y (/.f64 x z) x) (if (<=.f64 (/.f64 (*.f64 x (+.f64 y z)) z) -1999999999999999999466806008246307489711078038236873372571680376048739359044847523345839519129134316887338757648057420040785188188258060440266031719514112) (/.f64 (*.f64 x (+.f64 y z)) z) (if (<=.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 5521397077432451/110427941548649020598956093796432407239217743554726184882600387580788736) (fma.f64 y (/.f64 x z) x) (if (<=.f64 (/.f64 (*.f64 x (+.f64 y z)) z) 4000000000000000231893169099841575053063450274182800146420881542605552434876729747786197078273948066841364024075386945734369792731600736977538960220961495274192371301985298734861946818478880125907969025901056112837459751160597443375283341064029997118075293381498119460268929974272) (fma.f64 y (/.f64 x z) x) (fma.f64 y (/.f64 x z) x)))))"]],"stop":[["fuel",1]],"time":22.093017578125,"type":"simplify"},{"time":0.023193359375,"type":"soundness"},{"compiler":[[76,26]],"remove-preprocessing":[[]],"time":14.993896484375,"type":"end"}]
[{"compiler":[[10,7]],"method":["search"],"sampling":[[1,0.9990236759185791,0.0,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":0.19287109375,"type":"analyze"},{"outcomes":[["body",4096,"valid",5.10302734375,4],["body",512,"valid",205.392822265625,1440],["body",1024,"valid",926.53759765625,3609],["body",2048,"valid",651.397705078125,1247],["body",256,"valid",131.31396484375,1956]],"time":1928.52197265625,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 eps))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 eps))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 eps))"]],"symmetry":[[]],"time":60.26513671875,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"time":18.98583984375,"type":"simplify"},{"compiler":[[9,6]],"time":0.215087890625,"type":"eval"},{"alts":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","next",39.05327048659487]],"compiler":[[9,6],[9,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[39.05327048659487],"time":0.743896484375,"type":"prune"},{"compiler":[[20,6]],"locations":[["(sin.f64 x)",0.03515625,true],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",1.7156033516534366,true],["(sin.f64 (+.f64 x eps))",4.423768125770092,true]],"time":6.93603515625,"type":"localize"},{"count":[[3,52]],"series":[["(sin.f64 x)","x","-inf",0.133056640625],["(sin.f64 x)","x","inf",0.138916015625],["(sin.f64 x)","x","0",0.244873046875],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","eps","-inf",0.179931640625],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","eps","inf",0.489990234375],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","eps","0",0.321044921875],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","x","-inf",0.22607421875],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","x","inf",0.18701171875],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","x","0",0.260986328125],["(sin.f64 (+.f64 x eps))","eps","-inf",0.178955078125],["(sin.f64 (+.f64 x eps))","eps","inf",0.16796875],["(sin.f64 (+.f64 x eps))","eps","0",0.36181640625],["(sin.f64 (+.f64 x eps))","x","-inf",0.18701171875],["(sin.f64 (+.f64 x eps))","x","inf",0.21484375],["(sin.f64 (+.f64 x eps))","x","0",0.451171875]],"time":3.93505859375,"type":"series"},{"count":[[3,119]],"inputs":[["(sin.f64 (+.f64 x eps))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(sin.f64 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (cos.f64 eps)) (*.f64 (cos.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 (+.f64 x eps)) 0) (sin.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 (+.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sin.f64 (+.f64 x eps))) (sin.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 (+.f64 x eps)) (*.f64 0 (sin.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (+.f64 x eps))) (cbrt.f64 (pow.f64 (sin.f64 (+.f64 x eps)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 (+.f64 x eps)) 2)) (cbrt.f64 (sin.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (+.f64 x eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (+.f64 x eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (+.f64 x eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (+.f64 x eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (+.f64 x eps)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 (+.f64 x eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (+.f64 x eps))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (+.f64 x eps))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 (+.f64 x eps)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2)) (*.f64 (sin.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (sin.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 eps) (cos.f64 x) (*.f64 (sin.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (cos.f64 eps)) (*.f64 (cos.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sin.f64 x) (cos.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (cos.f64 eps)) 2)) (*.f64 (cos.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (cos.f64 eps) (*.f64 (cos.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sin.f64 x) (cos.f64 eps)) (*.f64 (cos.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 eps) (sin.f64 x) (*.f64 (cos.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 x) (cos.f64 eps)) 1 (*.f64 (cos.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 (+.f64 x eps))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2))) (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) 0) (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) (*.f64 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))) (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) (*.f64 0 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 (+.f64 x eps)) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sin.f64 x)) (sin.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (cos.f64 eps)) (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))) (*.f64 (sin.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (sin.f64 x)) (*.f64 (sin.f64 x) (cos.f64 eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (+.f64 (*.f64 (sin.f64 x) (cos.f64 eps)) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (-.f64 (*.f64 (sin.f64 x) (cos.f64 eps)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cos.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (cos.f64 eps)) (*.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (sin.f64 x) (sin.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (sin.f64 (+.f64 x eps)) 0) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (sin.f64 (*.f64 eps 1/2))) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (sin.f64 x) (sin.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sin.f64 x) (sin.f64 (+.f64 x eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)) (*.f64 2 (sin.f64 (*.f64 eps 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 4) (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (sin.f64 (+.f64 x eps))) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (sin.f64 x) (sin.f64 (+.f64 x eps))))) (cbrt.f64 (pow.f64 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (sin.f64 (+.f64 x eps)) 2)) (+.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (cbrt.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))))) (-.f64 (cbrt.f64 (sin.f64 (+.f64 x eps))) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))) (cbrt.f64 (pow.f64 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) 2)) (cbrt.f64 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 2) (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (*.f64 (sin.f64 (/.f64 eps -2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (neg.f64 (*.f64 (sin.f64 (/.f64 eps -2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sin.f64 x) (sin.f64 (+.f64 x eps)))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (+.f64 (sin.f64 (*.f64 1/2 (-.f64 eps (+.f64 (+.f64 x eps) x)))) (sin.f64 (*.f64 1/2 (*.f64 2 (+.f64 x eps)))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (sin.f64 (*.f64 1/2 (-.f64 eps (+.f64 (+.f64 x eps) x)))) (sin.f64 (*.f64 1/2 (*.f64 2 (+.f64 x eps))))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (sin.f64 x) (sin.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (sin.f64 x) (sin.f64 (+.f64 x eps))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 (+.f64 x eps))) (cbrt.f64 (pow.f64 (sin.f64 (+.f64 x eps)) 2)) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (sin.f64 (+.f64 x eps)) 2)) (cbrt.f64 (sin.f64 (+.f64 x eps))) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (sin.f64 (+.f64 x eps))) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (cos.f64 eps)) (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sin.f64 x) (cos.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (cos.f64 eps)) 2)) (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (sin.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (sin.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sin.f64 (+.f64 x eps)) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 (+.f64 x eps)) 1 (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (cos.f64 eps) (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sin.f64 x) (cos.f64 eps)) (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 eps) (sin.f64 x) (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (sin.f64 x) (sin.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (sin.f64 x)) (sin.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) 0) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 x) (*.f64 (sin.f64 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sin.f64 x)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 x) (*.f64 0 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 x)))))"]],"rules":[["egg-rr",19],["egg-rr",69],["egg-rr",31]],"time":30.321044921875,"type":"rewrite"},{"count":[[171,158]],"inputs":[["(sin.f64 eps)","(+.f64 (*.f64 (cos.f64 eps) x) (sin.f64 eps))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 (cos.f64 eps) x) (sin.f64 eps)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 (cos.f64 eps) x) (+.f64 (*.f64 -1/6 (*.f64 (cos.f64 eps) (pow.f64 x 3))) (sin.f64 eps))))","(sin.f64 (+.f64 eps x))","(sin.f64 (+.f64 eps x))","(sin.f64 (+.f64 eps x))","(sin.f64 (+.f64 eps x))","(sin.f64 (-.f64 eps (*.f64 -1 x)))","(sin.f64 (-.f64 eps (*.f64 -1 x)))","(sin.f64 (-.f64 eps (*.f64 -1 x)))","(sin.f64 (-.f64 eps (*.f64 -1 x)))","(sin.f64 x)","(+.f64 (*.f64 (cos.f64 x) eps) (sin.f64 x))","(+.f64 (*.f64 (cos.f64 x) eps) (+.f64 (sin.f64 x) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x)))))","(+.f64 (*.f64 (cos.f64 x) eps) (+.f64 (sin.f64 x) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x))))))","(sin.f64 (+.f64 eps x))","(sin.f64 (+.f64 eps x))","(sin.f64 (+.f64 eps x))","(sin.f64 (+.f64 eps x))","(sin.f64 (-.f64 x (*.f64 -1 eps)))","(sin.f64 (-.f64 x (*.f64 -1 eps)))","(sin.f64 (-.f64 x (*.f64 -1 eps)))","(sin.f64 (-.f64 x (*.f64 -1 eps)))","(sin.f64 eps)","(+.f64 (*.f64 (-.f64 (cos.f64 eps) 1) x) (sin.f64 eps))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 (-.f64 (cos.f64 eps) 1) x) (sin.f64 eps)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 (-.f64 (cos.f64 eps) 1) x) (+.f64 (*.f64 (+.f64 (*.f64 -1/6 (cos.f64 eps)) 1/6) (pow.f64 x 3)) (sin.f64 eps))))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(-.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (sin.f64 x))","(-.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (sin.f64 x))","(-.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (sin.f64 x))","(-.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (sin.f64 x))","(*.f64 (cos.f64 x) eps)","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x))))","(+.f64 (*.f64 (cos.f64 x) eps) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x)))))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (sin.f64 x))) (+.f64 (*.f64 (cos.f64 x) eps) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x))))))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(-.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (sin.f64 x))","(-.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (sin.f64 x))","(-.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (sin.f64 x))","(-.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (sin.f64 x))","x","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) x))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 -1/5040 (pow.f64 x 7)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) x)))"]],"method":["egg-herbie"],"outputs":[["(sin.f64 eps)","(+.f64 (*.f64 (cos.f64 eps) x) (sin.f64 eps))","(fma.f64 (cos.f64 eps) x (sin.f64 eps))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 (cos.f64 eps) x) (sin.f64 eps)))","(fma.f64 (*.f64 -1/2 (*.f64 x x)) (sin.f64 eps) (fma.f64 (cos.f64 eps) x (sin.f64 eps)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 (cos.f64 eps) x) (+.f64 (*.f64 -1/6 (*.f64 (cos.f64 eps) (pow.f64 x 3))) (sin.f64 eps))))","(fma.f64 (*.f64 -1/2 (*.f64 x x)) (sin.f64 eps) (fma.f64 (cos.f64 eps) x (fma.f64 -1/6 (*.f64 (cos.f64 eps) (pow.f64 x 3)) (sin.f64 eps))))","(sin.f64 (+.f64 eps x))","(sin.f64 (+.f64 x eps))","(sin.f64 (+.f64 eps x))","(sin.f64 (+.f64 x eps))","(sin.f64 (+.f64 eps x))","(sin.f64 (+.f64 x eps))","(sin.f64 (+.f64 eps x))","(sin.f64 (+.f64 x eps))","(sin.f64 (-.f64 eps (*.f64 -1 x)))","(sin.f64 (+.f64 x eps))","(sin.f64 (-.f64 eps (*.f64 -1 x)))","(sin.f64 (+.f64 x eps))","(sin.f64 (-.f64 eps (*.f64 -1 x)))","(sin.f64 (+.f64 x eps))","(sin.f64 (-.f64 eps (*.f64 -1 x)))","(sin.f64 (+.f64 x eps))","(sin.f64 x)","(+.f64 (*.f64 (cos.f64 x) eps) (sin.f64 x))","(fma.f64 (cos.f64 x) eps (sin.f64 x))","(+.f64 (*.f64 (cos.f64 x) eps) (+.f64 (sin.f64 x) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x)))))","(fma.f64 (cos.f64 x) eps (*.f64 (sin.f64 x) (+.f64 (*.f64 -1/2 (*.f64 eps eps)) 1)))","(+.f64 (*.f64 (cos.f64 x) eps) (+.f64 (sin.f64 x) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x))))))","(+.f64 (+.f64 (*.f64 (cos.f64 x) (+.f64 eps (*.f64 -1/6 (pow.f64 eps 3)))) (*.f64 (*.f64 -1/2 (*.f64 eps eps)) (sin.f64 x))) (sin.f64 x))","(sin.f64 (+.f64 eps x))","(sin.f64 (+.f64 x eps))","(sin.f64 (+.f64 eps x))","(sin.f64 (+.f64 x eps))","(sin.f64 (+.f64 eps x))","(sin.f64 (+.f64 x eps))","(sin.f64 (+.f64 eps x))","(sin.f64 (+.f64 x eps))","(sin.f64 (-.f64 x (*.f64 -1 eps)))","(sin.f64 (+.f64 x eps))","(sin.f64 (-.f64 x (*.f64 -1 eps)))","(sin.f64 (+.f64 x eps))","(sin.f64 (-.f64 x (*.f64 -1 eps)))","(sin.f64 (+.f64 x eps))","(sin.f64 (-.f64 x (*.f64 -1 eps)))","(sin.f64 (+.f64 x eps))","(sin.f64 eps)","(+.f64 (*.f64 (-.f64 (cos.f64 eps) 1) x) (sin.f64 eps))","(fma.f64 (+.f64 (cos.f64 eps) -1) x (sin.f64 eps))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 (-.f64 (cos.f64 eps) 1) x) (sin.f64 eps)))","(fma.f64 (*.f64 -1/2 (*.f64 x x)) (sin.f64 eps) (fma.f64 (+.f64 (cos.f64 eps) -1) x (sin.f64 eps)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 (-.f64 (cos.f64 eps) 1) x) (+.f64 (*.f64 (+.f64 (*.f64 -1/6 (cos.f64 eps)) 1/6) (pow.f64 x 3)) (sin.f64 eps))))","(fma.f64 (*.f64 (*.f64 x x) (sin.f64 eps)) -1/2 (fma.f64 (+.f64 (cos.f64 eps) -1) x (fma.f64 (pow.f64 x 3) (fma.f64 -1/6 (cos.f64 eps) 1/6) (sin.f64 eps))))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(*.f64 (cos.f64 x) eps)","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x))))","(fma.f64 (*.f64 (*.f64 eps eps) (sin.f64 x)) -1/2 (*.f64 (cos.f64 x) eps))","(+.f64 (*.f64 (cos.f64 x) eps) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x)))))","(+.f64 (*.f64 (cos.f64 x) (+.f64 eps (*.f64 -1/6 (pow.f64 eps 3)))) (*.f64 (*.f64 -1/2 (*.f64 eps eps)) (sin.f64 x)))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (sin.f64 x))) (+.f64 (*.f64 (cos.f64 x) eps) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x))))))","(fma.f64 1/24 (*.f64 (pow.f64 eps 4) (sin.f64 x)) (+.f64 (*.f64 (cos.f64 x) (+.f64 eps (*.f64 -1/6 (pow.f64 eps 3)))) (*.f64 (*.f64 -1/2 (*.f64 eps eps)) (sin.f64 x))))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","x","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) x))","(fma.f64 (pow.f64 x 3) -1/6 (fma.f64 1/120 (pow.f64 x 5) x))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 -1/5040 (pow.f64 x 7)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) x)))","(fma.f64 (pow.f64 x 3) -1/6 (fma.f64 (pow.f64 x 7) -1/5040 (fma.f64 1/120 (pow.f64 x 5) x)))"]],"time":162.135986328125,"type":"simplify"},{"compiler":[[2178,796]],"time":22.052001953125,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (cos.f64 eps)) (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))))","fresh",23.342167981719527],["(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)))))","fresh",17.383266283745723],["(fma.f64 (sin.f64 x) (cos.f64 eps) (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))))","fresh",22.142996454960883],["(*.f64 2 (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2))))","fresh",17.111079955549435],["(-.f64 (fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2)) (*.f64 (sin.f64 x) (cos.f64 eps))) (sin.f64 x))","fresh",23.78288805371618],["(fma.f64 (cbrt.f64 (*.f64 (sin.f64 x) (cos.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (cos.f64 eps)) 2)) (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))))","fresh",23.320293387606043],["(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 2) (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)))))","fresh",17.62884957338265],["(-.f64 (fma.f64 (cos.f64 eps) (sin.f64 x) (*.f64 (cos.f64 x) (sin.f64 eps))) (sin.f64 x))","fresh",22.119069858259955],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cos.f64 x) (sin.f64 eps)))","next",0.3055310438338179],["(-.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (*.f64 (sin.f64 x) (cos.f64 eps))) (sin.f64 x))","fresh",22.132709909417496]],"compiler":[[22,14],[21,17],[15,9],[17,13],[25,14],[25,14],[21,17],[15,9],[17,13],[15,9],[22,14],[21,17],[15,9],[17,13],[25,14],[25,14],[21,17],[15,9],[17,13],[15,9]],"count":[[159,10]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[158,10],"picked":[1,0]}],"min-error":[0.12287237195431469],"time":37.763916015625,"type":"prune"},{"compiler":[[54,25]],"locations":[["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cos.f64 x) (sin.f64 eps)))",0.10222626953688403,true],["(*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))",0.14291000976844204,true],["(*.f64 (cos.f64 x) (sin.f64 eps))",0.19921875,true],["(-.f64 1 (cos.f64 eps))",1.512352696542723,true]],"time":13.796142578125,"type":"localize"},{"count":[[4,44]],"series":[["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cos.f64 x) (sin.f64 eps)))","eps","-inf",0.2041015625],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cos.f64 x) (sin.f64 eps)))","eps","inf",0.21484375],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cos.f64 x) (sin.f64 eps)))","eps","0",0.203857421875],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cos.f64 x) (sin.f64 eps)))","x","-inf",0.213134765625],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cos.f64 x) (sin.f64 eps)))","x","inf",0.23193359375],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cos.f64 x) (sin.f64 eps)))","x","0",0.23388671875],["(*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))","eps","-inf",0.287841796875],["(*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))","eps","inf",0.31396484375],["(*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))","eps","0",0.330078125],["(*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))","x","-inf",0.2880859375],["(*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))","x","inf",0.511962890625],["(*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))","x","0",0.451904296875],["(*.f64 (cos.f64 x) (sin.f64 eps))","eps","-inf",0.306884765625],["(*.f64 (cos.f64 x) (sin.f64 eps))","eps","inf",0.5029296875],["(*.f64 (cos.f64 x) (sin.f64 eps))","eps","0",0.364990234375],["(*.f64 (cos.f64 x) (sin.f64 eps))","x","-inf",0.445068359375],["(*.f64 (cos.f64 x) (sin.f64 eps))","x","inf",0.508056640625],["(*.f64 (cos.f64 x) (sin.f64 eps))","x","0",0.35693359375],["(-.f64 1 (cos.f64 eps))","eps","-inf",0.203857421875],["(-.f64 1 (cos.f64 eps))","eps","inf",0.177978515625],["(-.f64 1 (cos.f64 eps))","eps","0",0.34814453125]],"time":7.036865234375,"type":"series"},{"count":[[4,259]],"inputs":[["(-.f64 1 (cos.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))","(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cos.f64 x) (sin.f64 eps)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (cos.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (cos.f64 eps)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 eps) 3) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (cos.f64 eps)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (cos.f64 eps)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (neg.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (cos.f64 eps)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))) (/.f64 (pow.f64 (cos.f64 eps) 3) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (cos.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 (cos.f64 eps)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (neg.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (neg.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 (cos.f64 eps) -1))) (cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3))) 1) (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3))) 2) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))))) (/.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) (pow.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))) (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))))) (/.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))) 1) (/.f64 (-.f64 1 (cos.f64 eps)) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cbrt.f64 (cos.f64 eps)))) (-.f64 1 (cbrt.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (cos.f64 eps))) (cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 2)) (cbrt.f64 (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (cos.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (cos.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 eps) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (cos.f64 eps) 3)) (/.f64 1 (+.f64 (neg.f64 (*.f64 (cos.f64 eps) (+.f64 1 (cos.f64 eps)))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) (/.f64 1 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))) (-.f64 1 (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (cos.f64 eps) -1)) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 eps) 3) 3)) (/.f64 1 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))))) (+.f64 1 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))))) (pow.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 eps) 3) 3)) 1) (*.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3))) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (cos.f64 eps) 3)) (+.f64 (neg.f64 (*.f64 (cos.f64 eps) (+.f64 1 (cos.f64 eps)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (cos.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) 1) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))) (*.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))) (pow.f64 (cos.f64 eps) 3))) (*.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)))) (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3))) (cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 2))) (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (cos.f64 eps) 3)) 1) (+.f64 (neg.f64 (*.f64 (cos.f64 eps) (+.f64 1 (cos.f64 eps)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 eps))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 eps))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (cos.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (cos.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (sin.f64 x) (-.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (-.f64 1 (cos.f64 eps)) (-.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) (-.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 0 (-.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) (-.f64 1 (cos.f64 eps)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 0) (*.f64 (cos.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cos.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 0 (*.f64 (cos.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (cos.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) (sin.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 eps) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2)) (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (cbrt.f64 (sin.f64 eps))) (cbrt.f64 (pow.f64 (sin.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 eps) 2)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cos.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (*.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 eps) 2)) (cos.f64 x)) (cbrt.f64 (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 eps) 2)) (*.f64 (cos.f64 x) (cbrt.f64 (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps)) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2)) (-.f64 0 (*.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) 0))) (+.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x))) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x))) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x))) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x))) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x))) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x))) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x))) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x)))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 x) (neg.f64 (*.f64 (cos.f64 eps) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (cos.f64 eps) (sin.f64 x))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 x) (+.f64 (neg.f64 (*.f64 (cos.f64 eps) (sin.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 x) (-.f64 (neg.f64 (*.f64 (cos.f64 eps) (sin.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 eps)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 x) (*.f64 -1 (neg.f64 (neg.f64 (*.f64 (cos.f64 eps) (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 eps) (neg.f64 (sin.f64 x))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 x) (*.f64 (neg.f64 (*.f64 (cos.f64 eps) (sin.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 x) (*.f64 (neg.f64 (neg.f64 (*.f64 (cos.f64 eps) (sin.f64 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 x) (neg.f64 (neg.f64 (neg.f64 (*.f64 (cos.f64 eps) (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (neg.f64 (sin.f64 x))) (neg.f64 (neg.f64 (*.f64 (cos.f64 eps) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))))) (/.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) (pow.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))))) (/.f64 (sin.f64 x) (pow.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) 1) (/.f64 (sin.f64 x) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) 0)) (+.f64 0 (cbrt.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) (*.f64 0 (cbrt.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))) (-.f64 0 (cbrt.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 x)) (+.f64 (cos.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (cos.f64 eps)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (cbrt.f64 (-.f64 1 (cos.f64 eps)))) (cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (cos.f64 eps)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (cos.f64 eps))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 eps) -1) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (*.f64 (-.f64 1 (cos.f64 eps)) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 2)) (*.f64 (sin.f64 x) (cbrt.f64 (-.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 2)) (sin.f64 x)) (cbrt.f64 (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (-.f64 1 (cos.f64 eps))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (cos.f64 eps)) (-.f64 0 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (cos.f64 eps)) (-.f64 (sin.f64 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (cbrt.f64 (-.f64 1 (cos.f64 eps))))) (cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2))) (cbrt.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sin.f64 x)) (cbrt.f64 (-.f64 1 (cos.f64 eps)))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) 0) (+.f64 (cbrt.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) 0) (-.f64 (cbrt.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) (cbrt.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) (+.f64 (cbrt.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) (+.f64 0 (cbrt.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) (-.f64 0 (cbrt.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) (-.f64 (cbrt.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (-.f64 1 (pow.f64 (cos.f64 eps) 3))) (/.f64 1 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 1 (pow.f64 (cos.f64 eps) 3))) (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))))) (pow.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (-.f64 1 (pow.f64 (cos.f64 eps) 3))) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 1 (pow.f64 (cos.f64 eps) 3)))) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (+.f64 -1 (pow.f64 (cos.f64 eps) 3))) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (-.f64 1 (pow.f64 (cos.f64 eps) 3))) 1) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 1 (pow.f64 (cos.f64 eps) 3))) 1) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 1 (pow.f64 (cos.f64 eps) 3)))) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (+.f64 -1 (pow.f64 (cos.f64 eps) 3))) (+.f64 (neg.f64 (*.f64 (cos.f64 eps) (+.f64 1 (cos.f64 eps)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 2)) (sin.f64 x))) (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (cos.f64 eps) 3)) (sin.f64 x)) (+.f64 (neg.f64 (*.f64 (cos.f64 eps) (+.f64 1 (cos.f64 eps)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 1 (pow.f64 (cos.f64 eps) 3))) (+.f64 (neg.f64 (*.f64 (cos.f64 eps) (+.f64 1 (cos.f64 eps)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) 3)) (pow.f64 (+.f64 (cos.f64 eps) -1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (cos.f64 eps)) (sin.f64 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) (cbrt.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 1 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 (cos.f64 eps))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 2)) (sin.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (-.f64 1 (cos.f64 eps))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 x) (cbrt.f64 (-.f64 1 (cos.f64 eps)))) (cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 (cos.f64 eps)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (sin.f64 x) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (-.f64 1 (cos.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) 0) (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) (*.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))) (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) (*.f64 0 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)) (*.f64 (cos.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (neg.f64 (sin.f64 x))) (neg.f64 (neg.f64 (*.f64 (cos.f64 eps) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sin.f64 x)) (+.f64 (neg.f64 (neg.f64 (*.f64 (cos.f64 eps) (sin.f64 x)))) (*.f64 (cos.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (sin.f64 x)) (neg.f64 (*.f64 (cos.f64 eps) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)) (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 (-.f64 1 (cos.f64 eps)) (sin.f64 x) (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) (cbrt.f64 (*.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)) (*.f64 (cos.f64 x) (sin.f64 eps)))))) (+.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) (cbrt.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2)) (cbrt.f64 (*.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)) (*.f64 (cos.f64 x) (sin.f64 eps)))))) (+.f64 (cbrt.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) 2)) (*.f64 0 (cbrt.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))))))) (+.f64 0 (cbrt.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2)) (+.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) (*.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) (cbrt.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))))) (-.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) (cbrt.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))) (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) 2)) (cbrt.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 (-.f64 1 (cos.f64 eps)) (sin.f64 x) (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 1 (cos.f64 eps)) (sin.f64 x) (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (fma.f64 (-.f64 1 (cos.f64 eps)) (sin.f64 x) (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps)))))) (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 1 (cos.f64 eps)) (sin.f64 x) (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps))))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 1 (pow.f64 (cos.f64 eps) 3))) 2) (*.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))) (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x))))) (*.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x))) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))) (*.f64 2 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 1 (pow.f64 (cos.f64 eps) 3))))) (*.f64 2 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x))) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))) (*.f64 2 (*.f64 (sin.f64 x) (-.f64 1 (pow.f64 (cos.f64 eps) 3))))) (*.f64 2 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 (-.f64 1 (cos.f64 eps)) (sin.f64 x) (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 eps) (cos.f64 x) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2)) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2)) (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 x) (cbrt.f64 (sin.f64 eps))) (cbrt.f64 (pow.f64 (sin.f64 eps) 2)) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps)) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 eps) 2)) (cos.f64 x)) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) (*.f64 (cos.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)) (*.f64 (cos.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 1 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (sin.f64 x) (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (-.f64 1 (cos.f64 eps)) (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 0 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))))))))"]],"rules":[["egg-rr",62],["egg-rr",92],["egg-rr",43],["egg-rr",62]],"time":46.10400390625,"type":"rewrite"},{"count":[[303,308]],"inputs":[["(*.f64 1/2 (pow.f64 eps 2))","(+.f64 (*.f64 1/2 (pow.f64 eps 2)) (*.f64 -1/24 (pow.f64 eps 4)))","(+.f64 (*.f64 1/2 (pow.f64 eps 2)) (+.f64 (*.f64 -1/24 (pow.f64 eps 4)) (*.f64 1/720 (pow.f64 eps 6))))","(+.f64 (*.f64 -1/40320 (pow.f64 eps 8)) (+.f64 (*.f64 1/2 (pow.f64 eps 2)) (+.f64 (*.f64 -1/24 (pow.f64 eps 4)) (*.f64 1/720 (pow.f64 eps 6)))))","(sin.f64 eps)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (sin.f64 eps))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 x 4) (sin.f64 eps))) (sin.f64 eps)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 x 4) (sin.f64 eps))) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 x 6) (sin.f64 eps))) (sin.f64 eps))))","(*.f64 (cos.f64 x) eps)","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (cos.f64 x))) (+.f64 (*.f64 (cos.f64 x) eps) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x)))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (cos.f64 x))) (+.f64 (*.f64 (cos.f64 x) eps) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 eps 7) (cos.f64 x))) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x))))))","(*.f64 (-.f64 1 (cos.f64 eps)) x)","(+.f64 (*.f64 (-.f64 1 (cos.f64 eps)) x) (*.f64 -1/6 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 3))))","(+.f64 (*.f64 (-.f64 1 (cos.f64 eps)) x) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 5))) (*.f64 -1/6 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 3)))))","(+.f64 (*.f64 (-.f64 1 (cos.f64 eps)) x) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 5))) (+.f64 (*.f64 -1/5040 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 7))) (*.f64 -1/6 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 3))))))","(*.f64 1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x)))","(+.f64 (*.f64 -1/24 (*.f64 (pow.f64 eps 4) (sin.f64 x))) (*.f64 1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x))))","(+.f64 (*.f64 -1/24 (*.f64 (pow.f64 eps 4) (sin.f64 x))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x))) (*.f64 1/720 (*.f64 (pow.f64 eps 6) (sin.f64 x)))))","(+.f64 (*.f64 -1/40320 (*.f64 (pow.f64 eps 8) (sin.f64 x))) (+.f64 (*.f64 -1/24 (*.f64 (pow.f64 eps 4) (sin.f64 x))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x))) (*.f64 1/720 (*.f64 (pow.f64 eps 6) (sin.f64 x))))))","(sin.f64 eps)","(+.f64 (*.f64 (-.f64 (cos.f64 eps) 1) x) (sin.f64 eps))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 (-.f64 (cos.f64 eps) 1) x) (sin.f64 eps)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 1/6 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 3))) (+.f64 (*.f64 (-.f64 (cos.f64 eps) 1) x) (sin.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(*.f64 (cos.f64 x) eps)","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x))))","(+.f64 (*.f64 (cos.f64 x) eps) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x)))))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (sin.f64 x))) (+.f64 (*.f64 (cos.f64 x) eps) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x))))))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (pow.f64 eps 2))","(*.f64 1/2 (*.f64 eps eps))","(+.f64 (*.f64 1/2 (pow.f64 eps 2)) (*.f64 -1/24 (pow.f64 eps 4)))","(fma.f64 (pow.f64 eps 4) -1/24 (*.f64 1/2 (*.f64 eps eps)))","(+.f64 (*.f64 1/2 (pow.f64 eps 2)) (+.f64 (*.f64 -1/24 (pow.f64 eps 4)) (*.f64 1/720 (pow.f64 eps 6))))","(fma.f64 1/2 (*.f64 eps eps) (fma.f64 -1/24 (pow.f64 eps 4) (*.f64 1/720 (pow.f64 eps 6))))","(+.f64 (*.f64 -1/40320 (pow.f64 eps 8)) (+.f64 (*.f64 1/2 (pow.f64 eps 2)) (+.f64 (*.f64 -1/24 (pow.f64 eps 4)) (*.f64 1/720 (pow.f64 eps 6)))))","(fma.f64 (pow.f64 eps 8) -1/40320 (fma.f64 1/2 (*.f64 eps eps) (fma.f64 -1/24 (pow.f64 eps 4) (*.f64 1/720 (pow.f64 eps 6)))))","(sin.f64 eps)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (sin.f64 eps))","(*.f64 (sin.f64 eps) (+.f64 1 (*.f64 -1/2 (*.f64 x x))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 x 4) (sin.f64 eps))) (sin.f64 eps)))","(+.f64 (*.f64 (sin.f64 eps) (+.f64 (*.f64 -1/2 (*.f64 x x)) (*.f64 1/24 (pow.f64 x 4)))) (sin.f64 eps))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 x 4) (sin.f64 eps))) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 x 6) (sin.f64 eps))) (sin.f64 eps))))","(+.f64 (*.f64 (sin.f64 eps) (+.f64 (*.f64 -1/2 (*.f64 x x)) (*.f64 1/24 (pow.f64 x 4)))) (fma.f64 -1/720 (*.f64 (pow.f64 x 6) (sin.f64 eps)) (sin.f64 eps)))","(*.f64 (cos.f64 x) eps)","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x))))","(*.f64 (cos.f64 x) (+.f64 eps (*.f64 -1/6 (pow.f64 eps 3))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (cos.f64 x))) (+.f64 (*.f64 (cos.f64 x) eps) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x)))))","(fma.f64 1/120 (*.f64 (pow.f64 eps 5) (cos.f64 x)) (*.f64 (cos.f64 x) (+.f64 eps (*.f64 -1/6 (pow.f64 eps 3)))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (cos.f64 x))) (+.f64 (*.f64 (cos.f64 x) eps) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 eps 7) (cos.f64 x))) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x))))))","(+.f64 (*.f64 (cos.f64 x) (+.f64 (*.f64 1/120 (pow.f64 eps 5)) eps)) (*.f64 (cos.f64 x) (+.f64 (*.f64 -1/5040 (pow.f64 eps 7)) (*.f64 -1/6 (pow.f64 eps 3)))))","(*.f64 (-.f64 1 (cos.f64 eps)) x)","(+.f64 (*.f64 (-.f64 1 (cos.f64 eps)) x) (*.f64 -1/6 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 3))))","(fma.f64 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 3)) -1/6 (*.f64 (-.f64 1 (cos.f64 eps)) x))","(+.f64 (*.f64 (-.f64 1 (cos.f64 eps)) x) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 5))) (*.f64 -1/6 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 3)))))","(fma.f64 (-.f64 1 (cos.f64 eps)) x (fma.f64 1/120 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 5)) (*.f64 -1/6 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 3)))))","(+.f64 (*.f64 (-.f64 1 (cos.f64 eps)) x) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 5))) (+.f64 (*.f64 -1/5040 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 7))) (*.f64 -1/6 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 3))))))","(fma.f64 (-.f64 1 (cos.f64 eps)) x (fma.f64 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 5)) 1/120 (fma.f64 -1/5040 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 7)) (*.f64 -1/6 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 3))))))","(*.f64 1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x)))","(*.f64 (*.f64 1/2 (*.f64 eps eps)) (sin.f64 x))","(+.f64 (*.f64 -1/24 (*.f64 (pow.f64 eps 4) (sin.f64 x))) (*.f64 1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 (pow.f64 eps 4) -1/24 (*.f64 1/2 (*.f64 eps eps))))","(+.f64 (*.f64 -1/24 (*.f64 (pow.f64 eps 4) (sin.f64 x))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x))) (*.f64 1/720 (*.f64 (pow.f64 eps 6) (sin.f64 x)))))","(+.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 eps 4) -1/24 (*.f64 1/2 (*.f64 eps eps)))) (*.f64 1/720 (*.f64 (pow.f64 eps 6) (sin.f64 x))))","(+.f64 (*.f64 -1/40320 (*.f64 (pow.f64 eps 8) (sin.f64 x))) (+.f64 (*.f64 -1/24 (*.f64 (pow.f64 eps 4) (sin.f64 x))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x))) (*.f64 1/720 (*.f64 (pow.f64 eps 6) (sin.f64 x))))))","(+.f64 (*.f64 (sin.f64 x) (+.f64 (*.f64 -1/40320 (pow.f64 eps 8)) (*.f64 -1/24 (pow.f64 eps 4)))) (*.f64 (sin.f64 x) (+.f64 (*.f64 1/2 (*.f64 eps eps)) (*.f64 1/720 (pow.f64 eps 6)))))","(sin.f64 eps)","(+.f64 (*.f64 (-.f64 (cos.f64 eps) 1) x) (sin.f64 eps))","(fma.f64 (+.f64 (cos.f64 eps) -1) x (sin.f64 eps))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 (-.f64 (cos.f64 eps) 1) x) (sin.f64 eps)))","(fma.f64 (*.f64 -1/2 (*.f64 x x)) (sin.f64 eps) (fma.f64 (+.f64 (cos.f64 eps) -1) x (sin.f64 eps)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 1/6 (*.f64 (-.f64 1 (cos.f64 eps)) (pow.f64 x 3))) (+.f64 (*.f64 (-.f64 (cos.f64 eps) 1) x) (sin.f64 eps))))","(fma.f64 -1/2 (*.f64 (*.f64 x x) (sin.f64 eps)) (fma.f64 (*.f64 1/6 (-.f64 1 (cos.f64 eps))) (pow.f64 x 3) (fma.f64 (+.f64 (cos.f64 eps) -1) x (sin.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","(*.f64 (cos.f64 x) eps)","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x))))","(fma.f64 (cos.f64 x) eps (*.f64 (*.f64 -1/2 (*.f64 eps eps)) (sin.f64 x)))","(+.f64 (*.f64 (cos.f64 x) eps) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x)))))","(+.f64 (*.f64 (cos.f64 x) (+.f64 eps (*.f64 -1/6 (pow.f64 eps 3)))) (*.f64 (*.f64 -1/2 (*.f64 eps eps)) (sin.f64 x)))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (sin.f64 x))) (+.f64 (*.f64 (cos.f64 x) eps) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (sin.f64 x))))))","(fma.f64 1/24 (*.f64 (pow.f64 eps 4) (sin.f64 x)) (+.f64 (*.f64 (cos.f64 x) (+.f64 eps (*.f64 -1/6 (pow.f64 eps 3)))) (*.f64 (*.f64 -1/2 (*.f64 eps eps)) (sin.f64 x))))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","(-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))"]],"time":151.508056640625,"type":"simplify"},{"compiler":[[7110,3527]],"time":66.72900390625,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2)) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","fresh",15.087863256579919],["(fma.f64 (cbrt.f64 (*.f64 (sin.f64 x) (cos.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (cos.f64 eps)) 2)) (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))))","fresh",23.320293387606043],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (/.f64 (/.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x))) (cbrt.f64 4)) (cbrt.f64 2)))","fresh",37.681627180279904],["(fma.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (cos.f64 eps)) (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))))","fresh",23.342167981719527],["(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)))))","fresh",17.383266283745723],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))))","fresh",0.32999602198160616],["(+.f64 (-.f64 0 (/.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 2)) (sin.f64 x))) (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))))) (*.f64 (cos.f64 x) (sin.f64 eps)))","fresh",0.33094221508838195],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) 3))","fresh",0.8415644100665725],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (fma.f64 1/2 (*.f64 eps eps) (fma.f64 -1/24 (pow.f64 eps 4) (*.f64 1/720 (pow.f64 eps 6)))))) (*.f64 (cos.f64 x) (sin.f64 eps)))","fresh",32.70766969233587],["(+.f64 (-.f64 0 (/.f64 (*.f64 (sin.f64 x) (-.f64 1 (pow.f64 (cos.f64 eps) 3))) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))))) (*.f64 (cos.f64 x) (sin.f64 eps)))","next",0.32497946378699544],["(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 2) (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)))))","fresh",17.62884957338265],["(fma.f64 (cbrt.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) (*.f64 (cos.f64 x) (sin.f64 eps)))","fresh",0.3463881985941199],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (*.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 x)))))","fresh",0.38497408749252826],["(*.f64 (cbrt.f64 (fma.f64 (-.f64 1 (cos.f64 eps)) (sin.f64 x) (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps))))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) 2))))","fresh",15.06441627713697],["(fma.f64 (*.f64 (cos.f64 x) (cbrt.f64 (sin.f64 eps))) (cbrt.f64 (pow.f64 (sin.f64 eps) 2)) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","fresh",15.07173089217168]],"compiler":[[24,15],[25,14],[27,21],[22,14],[21,17],[24,18],[39,29],[20,16],[28,21],[29,21],[21,17],[26,18],[24,18],[33,21],[21,15],[24,15],[25,14],[27,21],[22,14],[21,17],[24,18],[39,29],[20,16],[28,21],[29,21],[21,17],[26,18],[24,18],[33,21],[21,15]],"count":[[318,15]],"kept":[{"done":[0,0],"fresh":[9,4],"new":[308,11],"picked":[1,0]}],"min-error":[0.01953125],"time":134.989013671875,"type":"prune"},{"compiler":[[124,69]],"locations":[["(pow.f64 (cos.f64 eps) 2)",0.2734375,true],["(pow.f64 (cos.f64 eps) 3)",0.38517387698974626,true],["(+.f64 1 (cos.f64 eps))",0.49127292893282504,true],["(-.f64 1 (pow.f64 (cos.f64 eps) 3))",1.2916438627365114,true]],"time":27.12109375,"type":"localize"},{"count":[[4,16]],"series":[["(pow.f64 (cos.f64 eps) 2)","eps","-inf",0.22900390625],["(pow.f64 (cos.f64 eps) 2)","eps","inf",0.218994140625],["(pow.f64 (cos.f64 eps) 2)","eps","0",0.223876953125],["(pow.f64 (cos.f64 eps) 3)","eps","-inf",0.14013671875],["(pow.f64 (cos.f64 eps) 3)","eps","inf",0.1630859375],["(pow.f64 (cos.f64 eps) 3)","eps","0",0.181884765625],["(+.f64 1 (cos.f64 eps))","eps","-inf",0.156005859375],["(+.f64 1 (cos.f64 eps))","eps","inf",0.175048828125],["(+.f64 1 (cos.f64 eps))","eps","0",0.196044921875],["(-.f64 1 (pow.f64 (cos.f64 eps) 3))","eps","-inf",0.5],["(-.f64 1 (pow.f64 (cos.f64 eps) 3))","eps","inf",0.51318359375],["(-.f64 1 (pow.f64 (cos.f64 eps) 3))","eps","0",0.94482421875]],"time":3.77099609375,"type":"series"},{"count":[[4,202]],"inputs":[["(-.f64 1 (pow.f64 (cos.f64 eps) 3))","(+.f64 1 (cos.f64 eps))","(pow.f64 (cos.f64 eps) 3)","(pow.f64 (cos.f64 eps) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))) 1) (*.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))) (neg.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) (*.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) 0) (-.f64 1 (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))) (*.f64 (neg.f64 (cos.f64 eps)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) (*.f64 0 (-.f64 1 (pow.f64 (cos.f64 eps) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 1 (pow.f64 (cos.f64 eps) 3))) (-.f64 1 (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 (cos.f64 eps) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (pow.f64 (cos.f64 eps) 3)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1)) (neg.f64 (/.f64 (pow.f64 (cos.f64 eps) 9) (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (pow.f64 (cos.f64 eps) 3)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (pow.f64 (cos.f64 eps) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (neg.f64 (pow.f64 (cos.f64 eps) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (neg.f64 (pow.f64 (cos.f64 eps) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (pow.f64 (cos.f64 eps) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1)) (/.f64 (pow.f64 (cos.f64 eps) 9) (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (cos.f64 eps) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))) (-.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (cos.f64 eps)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (neg.f64 (pow.f64 (cos.f64 eps) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))) (+.f64 (cos.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 3) -1))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1) 1) (/.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1) (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1))) (/.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 9))) 1) (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 9))) 2) (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1))) (/.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 9)) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (pow.f64 (cos.f64 eps) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (cos.f64 eps) 3) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (cos.f64 eps) 9)) (/.f64 1 (neg.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 9)) (/.f64 1 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1)) (-.f64 1 (pow.f64 (cos.f64 eps) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 3) -1)) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))) (-.f64 1 (pow.f64 (cos.f64 eps) 3))) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 eps) 9) 3)) (/.f64 1 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1))) (+.f64 1 (+.f64 (pow.f64 (pow.f64 (cos.f64 eps) 6) 3) (pow.f64 (cos.f64 eps) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 9)) (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1))) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 eps) 9) 3)) 1) (*.f64 (+.f64 1 (+.f64 (pow.f64 (pow.f64 (cos.f64 eps) 6) 3) (pow.f64 (cos.f64 eps) 9))) (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (cos.f64 eps) 9)) (neg.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 9)) (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 9)) 1) (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1) (*.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1) (pow.f64 (cos.f64 eps) 9))) (*.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1) (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 9)))) (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (cos.f64 eps) 9)) 1) (neg.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 9))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) 2))) (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 eps) 6) (pow.f64 (cos.f64 eps) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (pow.f64 (cos.f64 eps) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 1 (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 1 (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 1 (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cos.f64 eps)) (pow.f64 (cos.f64 eps) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cos.f64 eps) 2) (neg.f64 (cos.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 eps) (neg.f64 (pow.f64 (cos.f64 eps) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 (cos.f64 eps) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (pow.f64 (cos.f64 eps) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 1 (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 1 (pow.f64 (cos.f64 eps) 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (cos.f64 eps)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (cos.f64 eps)) (*.f64 (+.f64 1 (cos.f64 eps)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 1 (cos.f64 eps)) 0) (+.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (cos.f64 eps)) (*.f64 0 (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 1 (cos.f64 eps))) (+.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (cos.f64 eps) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (cos.f64 eps) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 eps)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (neg.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cos.f64 eps) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (neg.f64 (pow.f64 (cos.f64 eps) 3))) (/.f64 1 (+.f64 -1 (*.f64 (cos.f64 eps) (-.f64 1 (cos.f64 eps))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 1 (pow.f64 (cos.f64 eps) 3))) 1) (/.f64 (pow.f64 (cbrt.f64 (+.f64 1 (pow.f64 (cos.f64 eps) 3))) 2) (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1))) (/.f64 (+.f64 1 (pow.f64 (cos.f64 eps) 3)) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1) (cbrt.f64 (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1))) (/.f64 (+.f64 1 (cos.f64 eps)) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1) 1) (/.f64 (+.f64 1 (cos.f64 eps)) (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 1 (cos.f64 eps))) (cbrt.f64 (pow.f64 (+.f64 1 (cos.f64 eps)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cbrt.f64 (cos.f64 eps)))) (+.f64 1 (cbrt.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (-.f64 1 (cbrt.f64 (cos.f64 eps)))) (+.f64 (cbrt.f64 (cos.f64 eps)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (cos.f64 eps) 3)) (/.f64 1 (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 1 (cos.f64 eps)) 2)) (cbrt.f64 (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (cos.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 1 (cos.f64 eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1)) (+.f64 1 (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (cos.f64 eps) 9)) (/.f64 1 (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1))) (-.f64 (+.f64 1 (pow.f64 (cos.f64 eps) 6)) (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 (pow.f64 (cos.f64 eps) 3)) (cbrt.f64 (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1))) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (cos.f64 eps) 9)) 1) (*.f64 (-.f64 (+.f64 1 (pow.f64 (cos.f64 eps) 6)) (pow.f64 (cos.f64 eps) 3)) (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (cos.f64 eps) 3)) (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (neg.f64 (pow.f64 (cos.f64 eps) 3))) (+.f64 -1 (*.f64 (cos.f64 eps) (-.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 (cos.f64 eps)) 2)) (cbrt.f64 (+.f64 1 (pow.f64 (cos.f64 eps) 3)))) (cbrt.f64 (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (cos.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 1 (pow.f64 (cos.f64 eps) 3))) (cbrt.f64 (pow.f64 (+.f64 1 (cos.f64 eps)) 2))) (cbrt.f64 (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (neg.f64 (pow.f64 (cos.f64 eps) 3))) 1) (+.f64 -1 (*.f64 (cos.f64 eps) (-.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 (pow.f64 (cos.f64 eps) 3)) 1) (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 (cos.f64 eps)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1 (cos.f64 eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1 (cos.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 1 (cos.f64 eps)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 eps)) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cos.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 eps) 1 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cbrt.f64 (cos.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (cos.f64 eps)) 1)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 eps) 1/2) (*.f64 (cos.f64 eps) (*.f64 1/2 (cos.f64 (+.f64 eps eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 eps) 3) (*.f64 (pow.f64 (cos.f64 eps) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cos.f64 eps) 3) 0) (pow.f64 (cos.f64 eps) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cos.f64 eps)) (*.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 eps) 3) (*.f64 0 (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (cos.f64 eps) 3)) (pow.f64 (cos.f64 eps) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 eps) (pow.f64 (cos.f64 eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 eps) 2) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 4)) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 eps) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) (+.f64 2 3))) (cbrt.f64 (pow.f64 (cos.f64 eps) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 eps)) (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cos.f64 eps) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 eps) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) 4) (cbrt.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 eps) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 4)) (cos.f64 eps)) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (pow.f64 (cos.f64 eps) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 4)) (cbrt.f64 (pow.f64 (cos.f64 eps) (+.f64 2 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 eps) (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) (cos.f64 eps)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cos.f64 eps) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 eps) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 eps) 9) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 eps) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 eps) 9))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 eps eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cos.f64 eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 eps) 2) (*.f64 (pow.f64 (cos.f64 eps) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cos.f64 eps) 2) 0) (pow.f64 (cos.f64 eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 eps) 2) (*.f64 0 (pow.f64 (cos.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (cos.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (-.f64 0 (pow.f64 (sin.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (sin.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (sin.f64 eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 -1 (pow.f64 (sin.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (pow.f64 (sin.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 eps)) (neg.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 eps) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cbrt.f64 (pow.f64 (cos.f64 eps) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 4)) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 eps)) (cbrt.f64 (pow.f64 (cos.f64 eps) (+.f64 2 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cos.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cos.f64 eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 eps) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) (+.f64 2 3))) (cbrt.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 eps) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (sin.f64 eps)) (-.f64 -1 (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (sin.f64 eps)) (-.f64 1 (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cos.f64 eps) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 1/2 3) (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) 3)) (+.f64 (*.f64 1/2 1/2) (-.f64 (*.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) (*.f64 1/2 (cos.f64 (+.f64 eps eps)))) (*.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 eps eps)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (sin.f64 eps) 2) 3)) (+.f64 1 (+.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (sin.f64 eps) 2)) (pow.f64 (sin.f64 eps) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 eps) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 eps) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 eps) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 eps) 3) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 eps)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 eps) 3) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (cos.f64 eps)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cos.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (pow.f64 (sin.f64 eps) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 eps) 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (pow.f64 (sin.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (pow.f64 (sin.f64 eps) 2)))))))"]],"rules":[["egg-rr",52],["egg-rr",28],["egg-rr",52],["egg-rr",70]],"time":36.204833984375,"type":"rewrite"},{"count":[[218,230]],"inputs":[["(*.f64 3/2 (pow.f64 eps 2))","(+.f64 (*.f64 -7/8 (pow.f64 eps 4)) (*.f64 3/2 (pow.f64 eps 2)))","(+.f64 (*.f64 -7/8 (pow.f64 eps 4)) (+.f64 (*.f64 61/240 (pow.f64 eps 6)) (*.f64 3/2 (pow.f64 eps 2))))","(+.f64 (*.f64 -7/8 (pow.f64 eps 4)) (+.f64 (*.f64 61/240 (pow.f64 eps 6)) (+.f64 (*.f64 -547/13440 (pow.f64 eps 8)) (*.f64 3/2 (pow.f64 eps 2)))))","2","(+.f64 (*.f64 -1/2 (pow.f64 eps 2)) 2)","(+.f64 (*.f64 1/24 (pow.f64 eps 4)) (+.f64 (*.f64 -1/2 (pow.f64 eps 2)) 2))","(+.f64 (*.f64 1/24 (pow.f64 eps 4)) (+.f64 (*.f64 -1/2 (pow.f64 eps 2)) (+.f64 2 (*.f64 -1/720 (pow.f64 eps 6)))))","1","(+.f64 1 (*.f64 -3/2 (pow.f64 eps 2)))","(+.f64 1 (+.f64 (*.f64 7/8 (pow.f64 eps 4)) (*.f64 -3/2 (pow.f64 eps 2))))","(+.f64 1 (+.f64 (*.f64 7/8 (pow.f64 eps 4)) (+.f64 (*.f64 -3/2 (pow.f64 eps 2)) (*.f64 -61/240 (pow.f64 eps 6)))))","1","(+.f64 1 (*.f64 -1 (pow.f64 eps 2)))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 eps 2)) (*.f64 1/3 (pow.f64 eps 4))))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 eps 2)) (+.f64 (*.f64 1/3 (pow.f64 eps 4)) (*.f64 -2/45 (pow.f64 eps 6)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3/2 (pow.f64 eps 2))","(*.f64 (*.f64 3/2 eps) eps)","(+.f64 (*.f64 -7/8 (pow.f64 eps 4)) (*.f64 3/2 (pow.f64 eps 2)))","(fma.f64 -7/8 (pow.f64 eps 4) (*.f64 (*.f64 3/2 eps) eps))","(+.f64 (*.f64 -7/8 (pow.f64 eps 4)) (+.f64 (*.f64 61/240 (pow.f64 eps 6)) (*.f64 3/2 (pow.f64 eps 2))))","(fma.f64 -7/8 (pow.f64 eps 4) (fma.f64 61/240 (pow.f64 eps 6) (*.f64 (*.f64 3/2 eps) eps)))","(+.f64 (*.f64 -7/8 (pow.f64 eps 4)) (+.f64 (*.f64 61/240 (pow.f64 eps 6)) (+.f64 (*.f64 -547/13440 (pow.f64 eps 8)) (*.f64 3/2 (pow.f64 eps 2)))))","(fma.f64 -7/8 (pow.f64 eps 4) (fma.f64 61/240 (pow.f64 eps 6) (fma.f64 -547/13440 (pow.f64 eps 8) (*.f64 (*.f64 3/2 eps) eps))))","2","(+.f64 (*.f64 -1/2 (pow.f64 eps 2)) 2)","(fma.f64 -1/2 (*.f64 eps eps) 2)","(+.f64 (*.f64 1/24 (pow.f64 eps 4)) (+.f64 (*.f64 -1/2 (pow.f64 eps 2)) 2))","(fma.f64 (pow.f64 eps 4) 1/24 (fma.f64 -1/2 (*.f64 eps eps) 2))","(+.f64 (*.f64 1/24 (pow.f64 eps 4)) (+.f64 (*.f64 -1/2 (pow.f64 eps 2)) (+.f64 2 (*.f64 -1/720 (pow.f64 eps 6)))))","(fma.f64 1/24 (pow.f64 eps 4) (fma.f64 -1/2 (*.f64 eps eps) (fma.f64 (pow.f64 eps 6) -1/720 2)))","1","(+.f64 1 (*.f64 -3/2 (pow.f64 eps 2)))","(fma.f64 -3/2 (*.f64 eps eps) 1)","(+.f64 1 (+.f64 (*.f64 7/8 (pow.f64 eps 4)) (*.f64 -3/2 (pow.f64 eps 2))))","(+.f64 1 (fma.f64 7/8 (pow.f64 eps 4) (*.f64 (*.f64 -3/2 eps) eps)))","(+.f64 1 (+.f64 (*.f64 7/8 (pow.f64 eps 4)) (+.f64 (*.f64 -3/2 (pow.f64 eps 2)) (*.f64 -61/240 (pow.f64 eps 6)))))","(+.f64 1 (fma.f64 (pow.f64 eps 4) 7/8 (fma.f64 (pow.f64 eps 6) -61/240 (*.f64 (*.f64 -3/2 eps) eps))))","1","(+.f64 1 (*.f64 -1 (pow.f64 eps 2)))","(-.f64 1 (*.f64 eps eps))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 eps 2)) (*.f64 1/3 (pow.f64 eps 4))))","(+.f64 1 (fma.f64 (pow.f64 eps 4) 1/3 (neg.f64 (*.f64 eps eps))))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 eps 2)) (+.f64 (*.f64 1/3 (pow.f64 eps 4)) (*.f64 -2/45 (pow.f64 eps 6)))))","(+.f64 (-.f64 1 (*.f64 eps eps)) (fma.f64 1/3 (pow.f64 eps 4) (*.f64 -2/45 (pow.f64 eps 6))))"]],"time":58.873046875,"type":"simplify"},{"compiler":[[7985,4511]],"time":87.256103515625,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2)) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","fresh",15.087863256579919],["(fma.f64 (cbrt.f64 (*.f64 (sin.f64 x) (cos.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (cos.f64 eps)) 2)) (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))))","fresh",23.320293387606043],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (/.f64 (/.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x))) (cbrt.f64 4)) (cbrt.f64 2)))","fresh",37.681627180279904],["(fma.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (cos.f64 eps)) (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))))","fresh",23.342167981719527],["(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)))))","fresh",17.383266283745723],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) 3))","fresh",0.8415644100665725],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (fma.f64 1/2 (*.f64 eps eps) (fma.f64 -1/24 (pow.f64 eps 4) (*.f64 1/720 (pow.f64 eps 6)))))) (*.f64 (cos.f64 x) (sin.f64 eps)))","fresh",32.70766969233587],["(+.f64 (-.f64 0 (/.f64 (*.f64 (sin.f64 x) (-.f64 1 (pow.f64 (cos.f64 eps) 3))) (+.f64 (pow.f64 (cos.f64 eps) 2) (/.f64 (+.f64 1 (pow.f64 (cos.f64 eps) 3)) (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1))))) (*.f64 (cos.f64 x) (sin.f64 eps)))","fresh",0.33279196378699544],["(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 2) (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)))))","fresh",17.62884957338265],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))))","next",0.32999602198160616],["(fma.f64 (cbrt.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) (*.f64 (cos.f64 x) (sin.f64 eps)))","fresh",0.3463881985941199],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (*.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 x)))))","fresh",0.38497408749252826],["(*.f64 (cbrt.f64 (fma.f64 (-.f64 1 (cos.f64 eps)) (sin.f64 x) (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps))))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) 2))))","fresh",15.06441627713697],["(fma.f64 (*.f64 (cos.f64 x) (cbrt.f64 (sin.f64 eps))) (cbrt.f64 (pow.f64 (sin.f64 eps) 2)) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","fresh",15.07173089217168]],"compiler":[[24,15],[25,14],[27,21],[22,14],[21,17],[20,16],[28,21],[40,28],[21,17],[24,18],[26,18],[24,18],[33,21],[21,15],[24,15],[25,14],[27,21],[22,14],[21,17],[20,16],[28,21],[40,28],[21,17],[24,18],[26,18],[24,18],[33,21],[21,15]],"count":[[245,14]],"kept":[{"done":[0,0],"fresh":[14,13],"new":[230,1],"picked":[1,0]}],"min-error":[0.01953125],"time":100.030029296875,"type":"prune"},{"compiler":[[89,45]],"locations":[["(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))",0.15625,true],["(*.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps)))",0.18359375,true],["(pow.f64 (cos.f64 x) 2)",0.23828125,true],["(-.f64 1 (cos.f64 eps))",1.512352696542723,false]],"time":22.972900390625,"type":"localize"},{"count":[[3,52]],"series":[["(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","eps","-inf",0.26611328125],["(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","eps","inf",1.160888671875],["(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","eps","0",1.921875],["(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","x","-inf",1.342041015625],["(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","x","inf",1.297119140625],["(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","x","0",0.52490234375],["(*.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps)))","eps","-inf",0.296142578125],["(*.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps)))","eps","inf",0.9228515625],["(*.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps)))","eps","0",0.337158203125],["(*.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps)))","x","-inf",0.2880859375],["(*.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps)))","x","inf",1.304931640625],["(*.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps)))","x","0",0.387939453125],["(pow.f64 (cos.f64 x) 2)","x","-inf",0.328125],["(pow.f64 (cos.f64 x) 2)","x","inf",0.348876953125],["(pow.f64 (cos.f64 x) 2)","x","0",0.320068359375]],"time":11.298095703125,"type":"series"},{"count":[[3,136]],"inputs":[["(pow.f64 (cos.f64 x) 2)","(*.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps)))","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (-.f64 (neg.f64 x) (neg.f64 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 2/3 (-.f64 1/3 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (-.f64 1/2 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/3 (-.f64 2/3 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (neg.f64 (neg.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (sin.f64 x)) (-.f64 -1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (sin.f64 x)) (-.f64 1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 4/3) (pow.f64 (cos.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2/3) (pow.f64 (cos.f64 x) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 x) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1/8 (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) 3)) (/.f64 1 (+.f64 1/4 (-.f64 (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) 2) (*.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 x x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 x x)) 1)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) (cbrt.f64 1/4)) (cbrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) (neg.f64 (sqrt.f64 1/2))) (neg.f64 (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (pow.f64 (sin.f64 x) 2) 3)) (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (pow.f64 (sin.f64 x) 2) 2) (pow.f64 (sin.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) (cbrt.f64 1/2)) (cbrt.f64 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) (sqrt.f64 1/2)) (sqrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (cos.f64 x) 4/3) 0)) (pow.f64 (cos.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (pow.f64 (pow.f64 (cos.f64 x) 4/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cos.f64 x) 5/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cos.f64 x) 4/3) 4/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 5/3) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cos.f64 x) 2/3) 5/3) (pow.f64 (pow.f64 (cos.f64 x) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) (cbrt.f64 1/4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) (neg.f64 (sqrt.f64 1/2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) (sqrt.f64 1/2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) (cbrt.f64 1/2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 x x)) 1)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 x x)) 1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cos.f64 x) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/8 (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) 3)) (+.f64 1/4 (-.f64 (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) 2) (*.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) 3)) (+.f64 1 (-.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (neg.f64 (pow.f64 (sin.f64 x) 2))) (neg.f64 (pow.f64 (sin.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/8 (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) 3)) (+.f64 (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) 2) (-.f64 1/4 (*.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (sin.f64 x) 2) 3)) (+.f64 1 (+.f64 (pow.f64 (pow.f64 (sin.f64 x) 2) 2) (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 2 (-.f64 1 (cos.f64 (+.f64 x x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (+.f64 (cos.f64 (+.f64 x x)) 1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1/8 (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) 3))) (neg.f64 (+.f64 1/4 (-.f64 (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) 2) (*.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 x x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) (cbrt.f64 1/4))) (neg.f64 (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) (neg.f64 (sqrt.f64 1/2)))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (pow.f64 (sin.f64 x) 2) 3))) (neg.f64 (+.f64 1 (+.f64 (pow.f64 (pow.f64 (sin.f64 x) 2) 2) (pow.f64 (sin.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) (cbrt.f64 1/2))) (neg.f64 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) (sqrt.f64 1/2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 4) (+.f64 (cos.f64 (+.f64 x x)) 1))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cos.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (cos.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) -2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 x) 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (pow.f64 (sin.f64 x) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (cos.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps)) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 x) (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps)))) (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps)) (cbrt.f64 (cbrt.f64 (cos.f64 x)))) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps))) (cbrt.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 x) 4/3)) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps)) 2/3) (cbrt.f64 (*.f64 (cos.f64 x) (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps))) (cbrt.f64 (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 x) 4/3)) (cos.f64 x))) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (*.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps)) (cbrt.f64 (cbrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2/3) (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (cbrt.f64 (sin.f64 eps))) (pow.f64 (sin.f64 eps) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 eps) 2/3) (*.f64 (cos.f64 x) (cbrt.f64 (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cos.f64 x)) (sin.f64 eps)) (pow.f64 (cos.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2/3) (*.f64 (cbrt.f64 (cos.f64 x)) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) (sin.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 eps) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cos.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x)))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (neg.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps))) (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps)) 2/3) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4/3)) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4/3)) (sin.f64 eps)) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (cbrt.f64 (pow.f64 (cos.f64 x) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (sin.f64 eps))) (pow.f64 (sin.f64 eps) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 eps)) (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 eps) 2/3) (*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4/3)) (*.f64 (sin.f64 eps) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2/3) (cbrt.f64 (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 eps) (pow.f64 (cos.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (sin.f64 eps) 3) (+.f64 (cos.f64 (+.f64 x x)) 1))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 eps) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (neg.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (sin.f64 eps)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 eps) 3)))))))"]],"rules":[["egg-rr",28],["egg-rr",36],["egg-rr",72]],"time":55.4677734375,"type":"rewrite"},{"count":[[188,173]],"inputs":[["1","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 1/3 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (+.f64 (*.f64 -2/45 (pow.f64 x 6)) (*.f64 1/3 (pow.f64 x 4)))))","(sin.f64 eps)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (sin.f64 eps))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 x 4) (sin.f64 eps))) (sin.f64 eps)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 x 4) (sin.f64 eps))) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 x 6) (sin.f64 eps))) (sin.f64 eps))))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) eps)","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (cos.f64 x))) (+.f64 (*.f64 (cos.f64 x) eps) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x)))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (cos.f64 x))) (+.f64 (*.f64 (cos.f64 x) eps) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 eps 7) (cos.f64 x))) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x))))))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(sin.f64 eps)","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (sin.f64 eps))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 -1/405 (*.f64 (pow.f64 x 6) (sin.f64 eps))) (sin.f64 eps)))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 -1/405 (*.f64 (pow.f64 x 6) (sin.f64 eps))) (+.f64 (*.f64 -1/1701 (*.f64 (pow.f64 x 8) (sin.f64 eps))) (sin.f64 eps))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) eps)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3))) (*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) eps))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3))) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3))) (*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) eps)))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3))) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) eps) (*.f64 -1/5040 (*.f64 (pow.f64 eps 7) (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3))))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(-.f64 1 (*.f64 x x))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 1/3 (pow.f64 x 4))))","(+.f64 1 (fma.f64 (pow.f64 x 4) 1/3 (neg.f64 (*.f64 x x))))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (+.f64 (*.f64 -2/45 (pow.f64 x 6)) (*.f64 1/3 (pow.f64 x 4)))))","(+.f64 (-.f64 1 (*.f64 x x)) (fma.f64 -2/45 (pow.f64 x 6) (*.f64 1/3 (pow.f64 x 4))))","(sin.f64 eps)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (sin.f64 eps))","(*.f64 (sin.f64 eps) (+.f64 1 (*.f64 (*.f64 x x) -1/2)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 x 4) (sin.f64 eps))) (sin.f64 eps)))","(+.f64 (*.f64 (sin.f64 eps) (+.f64 (*.f64 (*.f64 x x) -1/2) (*.f64 1/24 (pow.f64 x 4)))) (sin.f64 eps))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 x 4) (sin.f64 eps))) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 x 6) (sin.f64 eps))) (sin.f64 eps))))","(+.f64 (*.f64 (sin.f64 eps) (+.f64 (*.f64 (*.f64 x x) -1/2) (*.f64 1/24 (pow.f64 x 4)))) (fma.f64 -1/720 (*.f64 (pow.f64 x 6) (sin.f64 eps)) (sin.f64 eps)))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) eps)","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x))))","(*.f64 (cos.f64 x) (+.f64 eps (*.f64 -1/6 (pow.f64 eps 3))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (cos.f64 x))) (+.f64 (*.f64 (cos.f64 x) eps) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x)))))","(fma.f64 1/120 (*.f64 (pow.f64 eps 5) (cos.f64 x)) (*.f64 (cos.f64 x) (+.f64 eps (*.f64 -1/6 (pow.f64 eps 3)))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (cos.f64 x))) (+.f64 (*.f64 (cos.f64 x) eps) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 eps 7) (cos.f64 x))) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (cos.f64 x))))))","(+.f64 (*.f64 (cos.f64 x) (+.f64 (*.f64 1/120 (pow.f64 eps 5)) eps)) (*.f64 (cos.f64 x) (+.f64 (*.f64 -1/5040 (pow.f64 eps 7)) (*.f64 -1/6 (pow.f64 eps 3)))))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(sin.f64 eps)","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (sin.f64 eps))","(*.f64 (sin.f64 eps) (+.f64 1 (*.f64 (*.f64 x x) -1/3)))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 -1/405 (*.f64 (pow.f64 x 6) (sin.f64 eps))) (sin.f64 eps)))","(+.f64 (*.f64 (sin.f64 eps) (+.f64 (*.f64 (*.f64 x x) -1/3) (*.f64 -1/405 (pow.f64 x 6)))) (sin.f64 eps))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 x 2) (sin.f64 eps))) (+.f64 (*.f64 -1/405 (*.f64 (pow.f64 x 6) (sin.f64 eps))) (+.f64 (*.f64 -1/1701 (*.f64 (pow.f64 x 8) (sin.f64 eps))) (sin.f64 eps))))","(+.f64 (*.f64 (sin.f64 eps) (+.f64 (*.f64 (*.f64 x x) -1/3) (*.f64 -1/405 (pow.f64 x 6)))) (fma.f64 -1/1701 (*.f64 (pow.f64 x 8) (sin.f64 eps)) (sin.f64 eps)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) eps)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) eps)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3))) (*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) eps))","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 eps (*.f64 -1/6 (pow.f64 eps 3))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3))) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3))) (*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) eps)))","(fma.f64 -1/6 (*.f64 (pow.f64 eps 3) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 eps (*.f64 1/120 (pow.f64 eps 5)))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3))) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) eps) (*.f64 -1/5040 (*.f64 (pow.f64 eps 7) (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3))))))","(+.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (*.f64 -1/6 (pow.f64 eps 3)) (*.f64 1/120 (pow.f64 eps 5)))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (*.f64 -1/5040 (pow.f64 eps 7)) eps)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 1) 1/3) (sin.f64 eps))","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))"]],"time":158.277099609375,"type":"simplify"},{"compiler":[[6906,3835]],"time":68.135986328125,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2)) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","fresh",15.087863256579919],["(fma.f64 (cbrt.f64 (*.f64 (sin.f64 x) (cos.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (cos.f64 eps)) 2)) (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))))","fresh",23.320293387606043],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (/.f64 (/.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x))) (cbrt.f64 4)) (cbrt.f64 2)))","fresh",37.681627180279904],["(fma.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (cos.f64 eps)) (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))))","fresh",23.342167981719527],["(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)))))","fresh",17.383266283745723],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (cos.f64 x) 6) 1/3)) (sin.f64 eps))))","fresh",0.3468785536022599],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (*.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 x)))))","fresh",0.38497408749252826],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) 3))","fresh",0.8415644100665725],["(+.f64 (-.f64 0 (/.f64 (*.f64 (sin.f64 x) (-.f64 1 (pow.f64 (cos.f64 eps) 3))) (+.f64 (pow.f64 (cos.f64 eps) 2) (/.f64 (+.f64 1 (pow.f64 (cos.f64 eps) 3)) (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1))))) (*.f64 (cos.f64 x) (sin.f64 eps)))","fresh",0.33279196378699544],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (sin.f64 x) 2) 3)) (+.f64 1 (+.f64 (pow.f64 (pow.f64 (sin.f64 x) 2) 2) (pow.f64 (sin.f64 x) 2))))) (sin.f64 eps))))","fresh",0.5493425358675416],["(fma.f64 (cbrt.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) (*.f64 (cos.f64 x) (sin.f64 eps)))","fresh",0.3463881985941199],["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (fma.f64 1/2 (*.f64 eps eps) (fma.f64 -1/24 (pow.f64 eps 4) (*.f64 1/720 (pow.f64 eps 6)))))) (*.f64 (cos.f64 x) (sin.f64 eps)))","fresh",32.70766969233587],["(*.f64 (cbrt.f64 (fma.f64 (-.f64 1 (cos.f64 eps)) (sin.f64 x) (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps))))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) 2))))","fresh",15.06441627713697]],"compiler":[[24,15],[25,14],[27,21],[22,14],[21,17],[26,20],[24,18],[20,16],[40,28],[42,32],[26,18],[28,21],[33,21]],"count":[[257,13]],"kept":[{"done":[0,0],"fresh":[13,10],"new":[243,3],"picked":[1,0]}],"min-error":[0.01171875],"time":89.570068359375,"type":"prune"},{"accuracy":[0.3055310438338179],"baseline":[0.3055310438338179],"branch":[["x",0.30553104383381796,1],["eps",0.30553104383381796,1],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.3055310438338179,1]],"compiler":[[3,2],[3,2],[9,6],[575,284]],"count":[[26,1]],"inputs":[["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (cos.f64 x) 6) 1/3)) (sin.f64 eps))))","(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) 3))","(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (sin.f64 x) 2) 3)) (+.f64 1 (+.f64 (pow.f64 (pow.f64 (sin.f64 x) 2) 2) (pow.f64 (sin.f64 x) 2))))) (sin.f64 eps))))","(+.f64 (-.f64 0 (/.f64 (*.f64 (sin.f64 x) (-.f64 1 (pow.f64 (cos.f64 eps) 3))) (+.f64 (pow.f64 (cos.f64 eps) 2) (/.f64 (+.f64 1 (pow.f64 (cos.f64 eps) 3)) (fma.f64 (cos.f64 eps) (+.f64 (cos.f64 eps) -1) 1))))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2)) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (/.f64 (/.f64 (+.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (+.f64 eps x))) (cbrt.f64 4)) (cbrt.f64 2)))","(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (sin.f64 eps))))","(+.f64 (-.f64 0 (/.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 eps) 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 eps)) 2)) (sin.f64 x))) (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps)))))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) 3))","(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (fma.f64 1/2 (*.f64 eps eps) (fma.f64 -1/24 (pow.f64 eps 4) (*.f64 1/720 (pow.f64 eps 6)))))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(+.f64 (-.f64 0 (/.f64 (*.f64 (sin.f64 x) (-.f64 1 (pow.f64 (cos.f64 eps) 3))) (+.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1 (cos.f64 eps))))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(fma.f64 (cbrt.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps))) 2)) (*.f64 (cos.f64 x) (sin.f64 eps)))","(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (*.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 x)))))","(*.f64 (cbrt.f64 (fma.f64 (-.f64 1 (cos.f64 eps)) (sin.f64 x) (neg.f64 (*.f64 (cos.f64 x) (sin.f64 eps))))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x))) 2))))","(fma.f64 (*.f64 (cos.f64 x) (cbrt.f64 (sin.f64 eps))) (cbrt.f64 (pow.f64 (sin.f64 eps) 2)) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))","(fma.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (cos.f64 eps)) (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)))))","(fma.f64 (sin.f64 x) (cos.f64 eps) (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))))","(*.f64 2 (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2))))","(-.f64 (fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sin.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) 2)) (*.f64 (sin.f64 x) (cos.f64 eps))) (sin.f64 x))","(fma.f64 (cbrt.f64 (*.f64 (sin.f64 x) (cos.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (cos.f64 eps)) 2)) (fma.f64 (cos.f64 x) (sin.f64 eps) (neg.f64 (sin.f64 x))))","(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 2) (*.f64 (sin.f64 (*.f64 eps 1/2)) (cos.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)))))","(-.f64 (fma.f64 (cos.f64 eps) (sin.f64 x) (*.f64 (cos.f64 x) (sin.f64 eps))) (sin.f64 x))","(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(-.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (*.f64 (sin.f64 x) (cos.f64 eps))) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"link":["."],"name":["2sin (example 3.3)"],"oracle":[56.908582025368176],"outputs":[["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cos.f64 x) (sin.f64 eps)))"]],"time":30.741943359375,"times":[["x",8.10693359375],["eps",8.049072265625],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",5.565185546875]],"type":"regimes"},{"compiler":[[17,13]],"inputs":[["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cos.f64 x) (sin.f64 eps)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 0 (*.f64 (sin.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(fma.f64 (sin.f64 eps) (cos.f64 x) (*.f64 (+.f64 (cos.f64 eps) -1) (sin.f64 x)))"]],"stop":[["fuel",1]],"time":21.25390625,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[17,13]],"remove-preprocessing":[[]],"time":11.18798828125,"type":"end"}]
[{"compiler":[[8,7]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":2.546142578125,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.130859375,3],["body",256,"valid",327.5791015625,8256]],"time":335.81298828125,"type":"sample"},{"compiler":[[7,6]],"inputs":[["0"],["(sqrt.f64 (*.f64 2 (pow.f64 x 2)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(sqrt.f64 (*.f64 2 (pow.f64 x 2)))","(*.f64 (fabs.f64 x) (sqrt.f64 2))"]],"symmetry":[[]],"time":88.430908203125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(sqrt.f64 (*.f64 2 (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (*.f64 2 (pow.f64 x 2)))","(*.f64 (fabs.f64 x) (sqrt.f64 2))"]],"time":43.679931640625,"type":"simplify"},{"compiler":[[12,10]],"time":0.3720703125,"type":"eval"},{"alts":[["(*.f64 (fabs.f64 x) (sqrt.f64 2))","next",0.42578125],["(sqrt.f64 (*.f64 2 (pow.f64 x 2)))","fresh",29.701412836488963]],"compiler":[[6,5],[7,6],[6,5],[7,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.203125],"time":2.527099609375,"type":"prune"},{"compiler":[[12,8]],"locations":[["(*.f64 (fabs.f64 x) (sqrt.f64 2))",0.42578125,true]],"time":3.23681640625,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 (fabs.f64 x) (sqrt.f64 2))","x","-inf",0.3271484375],["(*.f64 (fabs.f64 x) (sqrt.f64 2))","x","inf",0.406005859375],["(*.f64 (fabs.f64 x) (sqrt.f64 2))","x","0",0.482177734375]],"time":1.26318359375,"type":"series"},{"count":[[1,32]],"inputs":[["(*.f64 (fabs.f64 x) (sqrt.f64 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2)) 2) (/.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (fabs.f64 x) (sqrt.f64 2))) (*.f64 1/2 (*.f64 (fabs.f64 x) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (fabs.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))) (cbrt.f64 (*.f64 (*.f64 x x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) 2)) (cbrt.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 x)) (*.f64 (pow.f64 x 2/3) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (sqrt.f64 2)) (fabs.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (fabs.f64 (cbrt.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (sqrt.f64 2) (fabs.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 x) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (fabs.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (sqrt.f64 (sqrt.f64 2))) (sqrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (fabs.f64 x) (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fabs.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (/.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 1/2 (*.f64 (fabs.f64 x) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2)) 3))))))"]],"rules":[["egg-rr",32]],"time":44.351806640625,"type":"rewrite"},{"count":[[44,32]],"inputs":[["(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))"]],"time":76.127197265625,"type":"simplify"},{"compiler":[[287,209]],"time":5.100830078125,"type":"eval"},{"alts":[["(*.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 2))","fresh",0.359375],["(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (fabs.f64 x) (sqrt.f64 (sqrt.f64 2))))","fresh",0.4811325195368841],["(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","next",0.3515625],["(pow.f64 (cbrt.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))) 3)","fresh",0.8263755125896408],["(sqrt.f64 (*.f64 2 (pow.f64 x 2)))","fresh",29.701412836488963]],"compiler":[[10,9],[11,10],[10,9],[9,8],[7,6],[10,9],[11,10],[10,9],[9,8],[7,6]],"count":[[34,5]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[32,4],"picked":[1,0]}],"min-error":[0.03125],"time":6.615966796875,"type":"prune"},{"compiler":[[26,20]],"locations":[["(*.f64 (cbrt.f64 2) (fabs.f64 x))",0.1328125,true],["(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))",0.25,true]],"time":7.926025390625,"type":"localize"},{"count":[[2,12]],"series":[["(*.f64 (cbrt.f64 2) (fabs.f64 x))","x","-inf",0.14599609375],["(*.f64 (cbrt.f64 2) (fabs.f64 x))","x","inf",0.301025390625],["(*.f64 (cbrt.f64 2) (fabs.f64 x))","x","0",0.15478515625],["(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","x","-inf",0.998046875],["(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","x","inf",0.475830078125],["(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","x","0",2.77099609375]],"time":4.93505859375,"type":"series"},{"count":[[2,62]],"inputs":[["(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (cbrt.f64 2) (fabs.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) (*.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1/2) (*.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 0) (*.f64 (sqrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) (*.f64 0 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 2) (fabs.f64 x))) (*.f64 1/2 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 2) (fabs.f64 x))) (*.f64 (sqrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) (cbrt.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))) (cbrt.f64 (*.f64 (*.f64 (cbrt.f64 4) (*.f64 x x)) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x))) (pow.f64 2 1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (cbrt.f64 4) (*.f64 x x)) (sqrt.f64 2))) (cbrt.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (fabs.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 x) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fabs.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)) (cbrt.f64 (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (*.f64 (cbrt.f64 2) (fabs.f64 x)))) (pow.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 (sqrt.f64 8) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 2/3) (cbrt.f64 (*.f64 (sqrt.f64 2) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 1/2) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 0) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (*.f64 0 (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cbrt.f64 2) (fabs.f64 x))) (*.f64 1/2 (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 2) (fabs.f64 x))) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fabs.f64 x)) (cbrt.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))) (pow.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (cbrt.f64 2))) (cbrt.f64 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (fabs.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (cbrt.f64 (cbrt.f64 4)) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 4)) (*.f64 (fabs.f64 x) (cbrt.f64 (cbrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 4)) (fabs.f64 x)) (cbrt.f64 (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 2 (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (fabs.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 x) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (pow.f64 (fabs.f64 x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 2 (pow.f64 (fabs.f64 x) 3)))))))"]],"rules":[["egg-rr",28],["egg-rr",34]],"time":29.43896484375,"type":"rewrite"},{"count":[[74,63]],"inputs":[["(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))"]],"time":52.2509765625,"type":"simplify"},{"compiler":[[767,588]],"time":12.8310546875,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)))","next",0.359375],["(*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)))","fresh",0.3828125],["(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","done",0.3515625],["(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (*.f64 (cbrt.f64 (cbrt.f64 4)) (fabs.f64 x)) (cbrt.f64 (cbrt.f64 2))))","fresh",0.4746475586106521]],"compiler":[[10,9],[14,13],[10,9],[15,14],[10,9],[14,13],[15,14]],"count":[[68,4]],"kept":[{"done":[0,0],"fresh":[4,0],"new":[63,3],"picked":[1,1]}],"min-error":[0],"time":12.458984375,"type":"prune"},{"compiler":[[27,21]],"locations":[["(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))",0.19921875,true],["(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)))",0.26953125,true]],"time":9.218994140625,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","x","-inf",0.307861328125],["(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","x","inf",0.29296875],["(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","x","0",0.31494140625],["(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)))","x","-inf",0.197998046875],["(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)))","x","inf",0.4580078125],["(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)))","x","0",0.276123046875]],"time":1.9599609375,"type":"series"},{"count":[[2,62]],"inputs":[["(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 0) (*.f64 (sqrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) (*.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1/2) (*.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 2) (fabs.f64 x))) (*.f64 (sqrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) (*.f64 0 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 2) (fabs.f64 x))) (*.f64 1/2 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)))) (cbrt.f64 (*.f64 (cbrt.f64 2) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))) (cbrt.f64 (*.f64 (*.f64 (cbrt.f64 2) (*.f64 x x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 2) (*.f64 x x))) (cbrt.f64 (*.f64 2 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (cbrt.f64 2) (*.f64 x x)) 2)) (cbrt.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) (cbrt.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (fabs.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 x) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fabs.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)) (cbrt.f64 (cbrt.f64 2))) (cbrt.f64 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (cbrt.f64 (cbrt.f64 4)) (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 4)) (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)) (cbrt.f64 (cbrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 4)) (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))) (cbrt.f64 (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 (sqrt.f64 8) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)) 0) (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)) (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)) 1/2) (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))) (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)) (*.f64 0 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))) (*.f64 1/2 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))) (cbrt.f64 (*.f64 (cbrt.f64 2) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 2) (*.f64 x x))) (cbrt.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 (cbrt.f64 2)) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fabs.f64 x)) (*.f64 (pow.f64 x 2/3) (cbrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 2)) (fabs.f64 x)) (pow.f64 2 1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (pow.f64 2 1/18)) (cbrt.f64 (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (fabs.f64 x) (pow.f64 2 1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (fabs.f64 x) 3) (sqrt.f64 2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fabs.f64 x) 3) (sqrt.f64 2)))))))"]],"rules":[["egg-rr",28],["egg-rr",34]],"time":32.09814453125,"type":"rewrite"},{"count":[[86,64]],"inputs":[["(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))"]],"time":84.89697265625,"type":"simplify"},{"compiler":[[785,604]],"time":12.97705078125,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (cbrt.f64 4)) (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)) (cbrt.f64 (cbrt.f64 2))))","fresh",0.46749882814753624],["(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)))","done",0.359375],["(*.f64 (cbrt.f64 2) (*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 (cbrt.f64 2)) (fabs.f64 x))))","fresh",0.39681625976844204],["(*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)))","next",0.3828125],["(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","done",0.3515625]],"compiler":[[15,14],[10,9],[14,13],[14,13],[10,9],[15,14],[14,13],[14,13]],"count":[[68,5]],"kept":[{"done":[1,1],"fresh":[2,1],"new":[64,2],"picked":[1,1]}],"min-error":[0],"time":11.923828125,"type":"prune"},{"compiler":[[41,33]],"locations":[["(*.f64 (cbrt.f64 2) (fabs.f64 x))",0.1328125,false],["(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18))",0.26953125,true],["(*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)))",0.37109375,true]],"time":12.837158203125,"type":"localize"},{"count":[[2,16]],"series":[["(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18))","x","-inf",0.2919921875],["(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18))","x","inf",0.2890625],["(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18))","x","0",0.31494140625],["(*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)))","x","-inf",0.4970703125],["(*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)))","x","inf",0.55615234375],["(*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)))","x","0",19.840087890625]],"time":21.91796875,"type":"series"},{"count":[[2,76]],"inputs":[["(*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)))","(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x))) 0) (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x))) (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))) (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x))) (*.f64 0 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (cbrt.f64 (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (pow.f64 2 1/27)) (cbrt.f64 (cbrt.f64 (cbrt.f64 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 (cbrt.f64 16)) (fabs.f64 x)) (cbrt.f64 (pow.f64 2 1/18))) (pow.f64 2 1/27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))) (cbrt.f64 (*.f64 (*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (*.f64 x x) (cbrt.f64 4))) (cbrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/27) (*.f64 (*.f64 (cbrt.f64 (cbrt.f64 16)) (fabs.f64 x)) (cbrt.f64 (pow.f64 2 1/18))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 4))) (*.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (pow.f64 2 1/27)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (*.f64 x x) (cbrt.f64 4))) (cbrt.f64 2))) (cbrt.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))) (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 4)) (cbrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 4)) (cbrt.f64 2))) (cbrt.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/27) (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 4))) (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 16)) (fabs.f64 x)) (pow.f64 2 1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 (cbrt.f64 16)) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 16)) (*.f64 (fabs.f64 x) (pow.f64 2 1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 2) (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)))) (pow.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 (cbrt.f64 16)) (fabs.f64 x)) (pow.f64 2 1/36)) (pow.f64 2 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 (*.f64 (fabs.f64 x) (pow.f64 2 1/18)) (cbrt.f64 (cbrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (pow.f64 2 1/18)) (cbrt.f64 (cbrt.f64 16)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 2) (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/36) (*.f64 (*.f64 (cbrt.f64 (cbrt.f64 16)) (fabs.f64 x)) (pow.f64 2 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 4))) (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))) (pow.f64 2 1/27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 2 1/18)) (cbrt.f64 (cbrt.f64 2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 (fabs.f64 x) 3) 2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 (fabs.f64 x) 3) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) 0) (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (*.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))) (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (*.f64 0 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (pow.f64 2 1/18))) (pow.f64 2 1/27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 x) (pow.f64 2 (+.f64 1/3 1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))) (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 4)) (cbrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 2 1/18)) (*.f64 (pow.f64 2 1/27) (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (cbrt.f64 (cbrt.f64 4)) (*.f64 (fabs.f64 x) (pow.f64 2 1/18))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/27) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (pow.f64 2 1/18))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 2 1/27) (*.f64 (cbrt.f64 2) (fabs.f64 x))) (cbrt.f64 (pow.f64 2 1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 4)) (cbrt.f64 (sqrt.f64 2)))) (cbrt.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 4)) (*.f64 (fabs.f64 x) (pow.f64 2 1/18))) (cbrt.f64 (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))) (pow.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) 2/3) (cbrt.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))) (pow.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/36)) (pow.f64 2 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/36) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 (fabs.f64 x) (pow.f64 2 1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (pow.f64 2 1/18)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (*.f64 (pow.f64 (fabs.f64 x) 3) (cbrt.f64 (sqrt.f64 2)))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 2 (*.f64 (pow.f64 (fabs.f64 x) 3) (cbrt.f64 (sqrt.f64 2)))))))))"]],"rules":[["egg-rr",36],["egg-rr",40]],"time":27.44287109375,"type":"rewrite"},{"count":[[92,79]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 2) (fabs.f64 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 2 7/18) (fabs.f64 x))","(*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 2 7/18) (fabs.f64 x))","(*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 2 7/18) (fabs.f64 x))","(*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 2 7/18) (fabs.f64 x))"]],"time":61.30810546875,"type":"simplify"},{"compiler":[[1751,1468]],"time":28.8798828125,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)))","done",0.3828125],["(*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 4))) (*.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (pow.f64 2 1/27)))","fresh",0.33203125],["(*.f64 (cbrt.f64 (cbrt.f64 16)) (*.f64 (fabs.f64 x) (pow.f64 2 1/18)))","fresh",0.3515625],["(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","done",0.3515625]],"compiler":[[14,13],[18,17],[11,10],[10,9]],"count":[[112,4]],"kept":[{"done":[2,1],"fresh":[2,0],"new":[107,2],"picked":[1,1]}],"min-error":[0],"time":19.05419921875,"type":"prune"},{"accuracy":[0.33203125],"baseline":[0.33203125],"branch":[["x",0.33203125,1],["(sqrt.f64 (*.f64 2 (pow.f64 x 2)))",0.33203125,1],["(*.f64 2 (pow.f64 x 2))",0.33203125,1],["(pow.f64 x 2)",0.33203125,1]],"compiler":[[2,1],[7,6],[6,5],[4,3],[138,114]],"count":[[13,1]],"inputs":[["(*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 4))) (*.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (pow.f64 2 1/27)))","(*.f64 (cbrt.f64 (cbrt.f64 16)) (*.f64 (fabs.f64 x) (pow.f64 2 1/18)))","(*.f64 (cbrt.f64 (cbrt.f64 4)) (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)) (cbrt.f64 (cbrt.f64 2))))","(*.f64 (cbrt.f64 2) (*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 (cbrt.f64 2)) (fabs.f64 x))))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (*.f64 (cbrt.f64 (cbrt.f64 4)) (fabs.f64 x)) (cbrt.f64 (cbrt.f64 2))))","(*.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 2))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (fabs.f64 x) (sqrt.f64 (sqrt.f64 2))))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(pow.f64 (cbrt.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))) 3)","(*.f64 (fabs.f64 x) (sqrt.f64 2))","(sqrt.f64 (*.f64 2 (pow.f64 x 2)))"]],"link":["."],"name":["sqrt D"],"oracle":[30.248810639310676],"outputs":[["(*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 4))) (*.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (pow.f64 2 1/27)))"]],"time":21.30078125,"times":[["x",5.072021484375],["(sqrt.f64 (*.f64 2 (pow.f64 x 2)))",3.887939453125],["(*.f64 2 (pow.f64 x 2))",3.80908203125],["(pow.f64 x 2)",5.373046875]],"type":"regimes"},{"compiler":[[18,17]],"inputs":[["(*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 4))) (*.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (pow.f64 2 1/27)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 4))) (*.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (pow.f64 2 1/27)))","(*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 4))) (*.f64 (pow.f64 2 (+.f64 1/27 7/18)) (fabs.f64 x)))"]],"stop":[["fuel",1]],"time":25.857177734375,"type":"simplify"},{"time":0.02099609375,"type":"soundness"},{"compiler":[[18,17]],"remove-preprocessing":[[]],"time":12.73193359375,"type":"end"}]
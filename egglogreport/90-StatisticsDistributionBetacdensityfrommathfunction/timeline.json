[{"compiler":[[22,17]],"method":["search"],"sampling":[[12,0.03508763572426887,0.23976551078250397,0.7251468534932272],[11,0.023391757149512582,0.26120795483622383,0.7154002880142636],[10,0.0,0.3196873477100053,0.6803126522899947],[9,0.0,0.34307910485951787,0.6569208951404821],[8,0.0,0.34307910485951787,0.6569208951404821],[7,0.0,0.3742681143922013,0.6257318856077987],[6,0.0,0.9356702859805033,0.06432971401949672],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":77.736083984375,"type":"analyze"},{"outcomes":[["body",256,"invalid",72.743896484375,918],["body",512,"valid",156.75732421875,925],["body",1024,"valid",186.113037109375,549],["body",2048,"valid",2.0380859375,4],["body",256,"valid",533.047607421875,6778]],"time":960.68310546875,"type":"sample"},{"compiler":[[21,16]],"inputs":[["0","1","2","3"],["(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 y 1) (log.f64 x)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 x)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (log.f64 y)) (*.f64 (-.f64 x 1) (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 t 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y)))) x)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 z)) (*.f64 (-.f64 y 1) (log.f64 (-.f64 1 z)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 t)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 t)))) y)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 t 1) (log.f64 (-.f64 1 y)))) z)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y)))) t)","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 y 1) (log.f64 x)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 x)))) t)","(-.f64 (fma.f64 (+.f64 y -1) (log.f64 x) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 x)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (log.f64 y)) (*.f64 (-.f64 x 1) (log.f64 (-.f64 1 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log.f64 y) (*.f64 (+.f64 x -1) (log1p.f64 (neg.f64 y)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 t 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y)))) x)","(-.f64 (fma.f64 (+.f64 t -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) x)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 z)) (*.f64 (-.f64 y 1) (log.f64 (-.f64 1 z)))) t)","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 z) (*.f64 (+.f64 y -1) (log1p.f64 (neg.f64 z)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 t)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 t)))) y)","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 t) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 t)))) y)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 t 1) (log.f64 (-.f64 1 y)))) z)","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 t -1) (log1p.f64 (neg.f64 y)))) z)"]],"symmetry":[[]],"time":72.65283203125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y)))) t)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y)))) t)","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)"]],"time":22.080078125,"type":"simplify"},{"compiler":[[36,25]],"time":0.511962890625,"type":"eval"},{"alts":[["(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)","next",0.13671875]],"compiler":[[19,14],[19,14]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.13671875],"time":1.0029296875,"type":"prune"},{"compiler":[[57,28]],"locations":[["(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)",0.01171875,true],["(*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))",0.015625,true],["(fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))",0.16796875,true]],"time":14.08203125,"type":"localize"},{"count":[[3,108]],"series":[["(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)","t","-inf",0.19677734375],["(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)","t","inf",0.273193359375],["(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)","t","0",2.654052734375],["(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)","z","-inf",0.210205078125],["(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)","z","inf",0.197021484375],["(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)","z","0",0.23291015625],["(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)","y","-inf",0.2861328125],["(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)","y","inf",0.322998046875],["(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)","y","0",0.295166015625],["(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)","x","-inf",0.18994140625],["(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)","x","inf",0.197998046875],["(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)","x","0",0.221923828125],["(*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))","y","-inf",0.208984375],["(*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))","y","inf",0.2158203125],["(*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))","y","0",0.263916015625],["(*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))","z","-inf",0.1611328125],["(*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))","z","inf",0.1640625],["(*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))","z","0",0.18701171875],["(fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))","z","-inf",0.369140625],["(fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))","z","inf",0.3427734375],["(fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))","z","0",1.915771484375],["(fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))","y","-inf",0.489990234375],["(fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))","y","inf",0.51611328125],["(fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))","y","0",0.39501953125],["(fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))","x","-inf",0.27490234375],["(fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))","x","inf",0.378173828125],["(fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))","x","0",5.97509765625]],"time":17.64404296875,"type":"series"},{"count":[[3,155]],"inputs":[["(fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))","(*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (*.f64 (log1p.f64 (neg.f64 y)) z)) (neg.f64 (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (neg.f64 (log1p.f64 (neg.f64 y)))) (*.f64 (log1p.f64 (neg.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log1p.f64 (neg.f64 y))) (+.f64 (*.f64 (log1p.f64 (neg.f64 y)) z) (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log1p.f64 (neg.f64 y)) z) (+.f64 (neg.f64 (log1p.f64 (neg.f64 y))) (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) (*.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) 0) (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) (*.f64 0 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))) (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))) (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) 2)) (cbrt.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y)) (fma.f64 z z (+.f64 1 z))) (*.f64 (fma.f64 x x (+.f64 1 x)) (*.f64 (+.f64 (pow.f64 z 3) -1) (log1p.f64 (neg.f64 y))))) (*.f64 (fma.f64 x x (+.f64 1 x)) (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (+.f64 (pow.f64 z 3) -1) (log1p.f64 (neg.f64 y))) (fma.f64 x x (+.f64 1 x))) (*.f64 (fma.f64 z z (+.f64 1 z)) (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y)))) (*.f64 (fma.f64 z z (+.f64 1 z)) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 z -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 z -1) 2)) (log1p.f64 (neg.f64 y))) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) 2)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 z -1) (cbrt.f64 (log1p.f64 (neg.f64 y)))) (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log1p.f64 (neg.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2)) (+.f64 z -1)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) 2)) (cbrt.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log1p.f64 (neg.f64 y)) (cbrt.f64 (+.f64 z -1))) (cbrt.f64 (pow.f64 (+.f64 z -1) 2)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) (+.f64 x -1) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y)) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) 1 (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 x -1) (log.f64 y)) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log1p.f64 (neg.f64 y)) z) (neg.f64 (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log1p.f64 (neg.f64 y))) (*.f64 (log1p.f64 (neg.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) (*.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) 0) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (log1p.f64 (neg.f64 y)) z)) (*.f64 1 (neg.f64 (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (neg.f64 (log1p.f64 (neg.f64 y)))) (*.f64 1 (*.f64 (log1p.f64 (neg.f64 y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) (*.f64 0 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 y)) z) 1) (*.f64 (neg.f64 (log1p.f64 (neg.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 y))) 1) (*.f64 (*.f64 (log1p.f64 (neg.f64 y)) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (neg.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2)) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 z -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 z -1) 2)) (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) 2)) (cbrt.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 z -1) 2)) (log1p.f64 (neg.f64 y))) (cbrt.f64 (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2)) (+.f64 z -1)) (cbrt.f64 (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 z 3) -1) (cbrt.f64 (fma.f64 z z (+.f64 1 z)))) (/.f64 (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 z z (+.f64 1 z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 z 3) -1) 1) (/.f64 (log1p.f64 (neg.f64 y)) (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log1p.f64 (neg.f64 y)) (cbrt.f64 (fma.f64 z z (+.f64 1 z)))) (/.f64 (+.f64 (pow.f64 z 3) -1) (pow.f64 (cbrt.f64 (fma.f64 z z (+.f64 1 z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 z -1) (cbrt.f64 (log1p.f64 (neg.f64 y)))) (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log1p.f64 (neg.f64 y)) (cbrt.f64 (+.f64 z -1))) (cbrt.f64 (pow.f64 (+.f64 z -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2)) (*.f64 (+.f64 z -1) (cbrt.f64 (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 z -1) 2)) (*.f64 (log1p.f64 (neg.f64 y)) (cbrt.f64 (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (pow.f64 z 3) -1) (log1p.f64 (neg.f64 y))) (/.f64 1 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 (pow.f64 z 3) -1) (log1p.f64 (neg.f64 y))) (cbrt.f64 (fma.f64 z z (+.f64 1 z)))) (pow.f64 (cbrt.f64 (fma.f64 z z (+.f64 1 z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 (neg.f64 (pow.f64 z 3)) 1)) (neg.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (neg.f64 (pow.f64 z 3)) 1) (log1p.f64 (neg.f64 y))) (neg.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 z 3) -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 z -1) 2)) (log1p.f64 (neg.f64 y)))) (cbrt.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 z 3) -1) (log1p.f64 (neg.f64 y)))) (neg.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 z 3) -1) (log1p.f64 (neg.f64 y))) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (+.f64 (pow.f64 z 3) -1) (log1p.f64 (neg.f64 y)))) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 (pow.f64 z 3) -1) (log1p.f64 (neg.f64 y))) 1) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 (pow.f64 z 3) -1) (log1p.f64 (neg.f64 y))) 1) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log1p.f64 (neg.f64 y)) -1 (*.f64 (log1p.f64 (neg.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log1p.f64 (neg.f64 y)) z (neg.f64 (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (log1p.f64 (neg.f64 y)) (*.f64 (log1p.f64 (neg.f64 y)) z))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 t) (*.f64 (+.f64 x -1) (log.f64 y))) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) (+.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 0 (+.f64 t (*.f64 (-.f64 1 x) (log.f64 y)))) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))) (*.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))) 0) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))) (*.f64 0 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)))) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 t) (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (*.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 t (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 t) (neg.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) 0) t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 t (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 t (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 t (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))) (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) 2)) (+.f64 (cbrt.f64 (*.f64 t t)) (cbrt.f64 (*.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)))) (-.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)))) (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))) 2)) (cbrt.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 t (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 t (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 t (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))) (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) 2)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) 2)) (cbrt.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 t) (neg.f64 (cbrt.f64 (*.f64 t t))) (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 t)) (cbrt.f64 (*.f64 t t)) (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) (+.f64 x -1) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y)) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) 1 (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 t) (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 t (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t))))))))"]],"rules":[["egg-rr",57],["egg-rr",54],["egg-rr",44]],"time":37.445068359375,"type":"rewrite"},{"count":[[263,253]],"inputs":[["(+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(*.f64 (-.f64 x 1) (log.f64 y))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (*.f64 (-.f64 x 1) (log.f64 y)))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 (-.f64 x 1) (log.f64 y))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (+.f64 (*.f64 -1/3 (*.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 (-.f64 x 1) (log.f64 y)))))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y))))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y))))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))))))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y))))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(*.f64 z (log.f64 (-.f64 1 y)))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(*.f64 z (log.f64 (-.f64 1 y)))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(*.f64 -1 (log.f64 (-.f64 1 y)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))","(*.f64 z (log.f64 (-.f64 1 y)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))","(*.f64 z (log.f64 (-.f64 1 y)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))","(*.f64 -1 (*.f64 (-.f64 z 1) y))","(+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 -1 (*.f64 (-.f64 z 1) y)))","(+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1/3 (*.f64 (-.f64 z 1) (pow.f64 y 3))) (*.f64 -1 (*.f64 (-.f64 z 1) y))))","(+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1/3 (*.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (*.f64 -1/4 (*.f64 (-.f64 z 1) (pow.f64 y 4))))))","(*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 -1 (/.f64 (-.f64 z 1) y))))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))))","(*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 -1 (/.f64 (-.f64 z 1) y))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))))","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (*.f64 (-.f64 x 1) (log.f64 y)) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (*.f64 (-.f64 x 1) (log.f64 y))) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 (-.f64 x 1) (log.f64 y)))) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (+.f64 (*.f64 -1/3 (*.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 (-.f64 x 1) (log.f64 y))))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y))))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))))) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))))) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(*.f64 z (log.f64 (-.f64 1 y)))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(*.f64 z (log.f64 (-.f64 1 y)))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y)))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(*.f64 -1 t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(*.f64 -1 t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (log.f64 y) (+.f64 x -1))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (*.f64 (-.f64 x 1) (log.f64 y)))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 (-.f64 x 1) (log.f64 y))))","(+.f64 (*.f64 y (-.f64 1 z)) (fma.f64 -1/2 (*.f64 (+.f64 z -1) (*.f64 y y)) (*.f64 (log.f64 y) (+.f64 x -1))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (+.f64 (*.f64 -1/3 (*.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 (-.f64 x 1) (log.f64 y)))))","(+.f64 (fma.f64 -1/3 (*.f64 (+.f64 z -1) (pow.f64 y 3)) (*.f64 y (-.f64 1 z))) (fma.f64 -1/2 (*.f64 (+.f64 z -1) (*.f64 y y)) (*.f64 (log.f64 y) (+.f64 x -1))))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))))","(fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y))))","(+.f64 (fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) (/.f64 (-.f64 1 z) y))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))))","(+.f64 (fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (fma.f64 -1/2 (/.f64 (+.f64 z -1) (*.f64 y y)) (/.f64 (-.f64 1 z) y))) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y))))))","(fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (+.f64 (fma.f64 -1/3 (/.f64 (+.f64 z -1) (pow.f64 y 3)) (fma.f64 -1/2 (/.f64 (+.f64 z -1) (*.f64 y y)) (/.f64 (-.f64 1 z) y))) (*.f64 (log.f64 y) (+.f64 x -1))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))","(+.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) (-.f64 1 z)) (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1)))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))))","(+.f64 (neg.f64 (*.f64 (+.f64 z -1) (+.f64 (neg.f64 (log.f64 (neg.f64 y))) (/.f64 1 y)))) (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1)))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))))","(+.f64 (+.f64 (neg.f64 (*.f64 (+.f64 z -1) (+.f64 (neg.f64 (log.f64 (neg.f64 y))) (/.f64 1 y)))) (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1))) (/.f64 (/.f64 (*.f64 -1/2 (+.f64 z -1)) y) y))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))))))","(+.f64 (+.f64 (+.f64 (neg.f64 (*.f64 (+.f64 z -1) (+.f64 (neg.f64 (log.f64 (neg.f64 y))) (/.f64 1 y)))) (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1))) (/.f64 (/.f64 (*.f64 -1/2 (+.f64 z -1)) y) y)) (/.f64 (*.f64 -1/3 (+.f64 z -1)) (pow.f64 y 3)))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y))))","(fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 (log1p.f64 (neg.f64 y))))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(*.f64 -1 (log.f64 (-.f64 1 y)))","(neg.f64 (log1p.f64 (neg.f64 y)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))","(*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))","(*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))","(*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1))","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))","(*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))","(*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))","(*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1))","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))","(*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))","(*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))","(*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1))","(*.f64 -1 (*.f64 (-.f64 z 1) y))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 -1 (*.f64 (-.f64 z 1) y)))","(fma.f64 -1/2 (*.f64 (+.f64 z -1) (*.f64 y y)) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1/3 (*.f64 (-.f64 z 1) (pow.f64 y 3))) (*.f64 -1 (*.f64 (-.f64 z 1) y))))","(fma.f64 -1/2 (*.f64 (+.f64 z -1) (*.f64 y y)) (fma.f64 -1/3 (*.f64 (+.f64 z -1) (pow.f64 y 3)) (*.f64 y (-.f64 1 z))))","(+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1/3 (*.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (*.f64 -1/4 (*.f64 (-.f64 z 1) (pow.f64 y 4))))))","(fma.f64 -1/2 (*.f64 (+.f64 z -1) (*.f64 y y)) (+.f64 (fma.f64 -1/3 (*.f64 (+.f64 z -1) (pow.f64 y 3)) (*.f64 y (-.f64 1 z))) (*.f64 (*.f64 -1/4 (+.f64 z -1)) (pow.f64 y 4))))","(*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))))","(*.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))","(fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (/.f64 (-.f64 1 z) y))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 -1 (/.f64 (-.f64 z 1) y))))","(fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (fma.f64 -1/2 (/.f64 (+.f64 z -1) (*.f64 y y)) (/.f64 (-.f64 1 z) y)))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))))","(fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (fma.f64 -1/3 (/.f64 (+.f64 z -1) (pow.f64 y 3)) (fma.f64 -1/2 (/.f64 (+.f64 z -1) (*.f64 y y)) (/.f64 (-.f64 1 z) y))))","(*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y))))","(*.f64 (neg.f64 (log.f64 (neg.f64 y))) (-.f64 1 z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))","(neg.f64 (*.f64 (+.f64 z -1) (+.f64 (neg.f64 (log.f64 (neg.f64 y))) (/.f64 1 y))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 -1 (/.f64 (-.f64 z 1) y))))","(+.f64 (neg.f64 (*.f64 (+.f64 z -1) (+.f64 (neg.f64 (log.f64 (neg.f64 y))) (/.f64 1 y)))) (/.f64 (/.f64 (*.f64 -1/2 (+.f64 z -1)) y) y))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))))","(+.f64 (+.f64 (neg.f64 (*.f64 (+.f64 z -1) (+.f64 (neg.f64 (log.f64 (neg.f64 y))) (/.f64 1 y)))) (/.f64 (/.f64 (*.f64 -1/2 (+.f64 z -1)) y) y)) (/.f64 (*.f64 -1/3 (+.f64 z -1)) (pow.f64 y 3)))","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 (log.f64 y))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (*.f64 (-.f64 x 1) (log.f64 y)) t)","(fma.f64 (log.f64 y) (+.f64 x -1) (neg.f64 t))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (*.f64 (-.f64 x 1) (log.f64 y))) t)","(+.f64 (*.f64 y (-.f64 1 z)) (fma.f64 (log.f64 y) (+.f64 x -1) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 (-.f64 x 1) (log.f64 y)))) t)","(+.f64 (fma.f64 -1/2 (*.f64 (+.f64 z -1) (*.f64 y y)) (*.f64 y (-.f64 1 z))) (fma.f64 (log.f64 y) (+.f64 x -1) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (+.f64 (*.f64 -1/3 (*.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 (-.f64 x 1) (log.f64 y))))) t)","(-.f64 (+.f64 (fma.f64 -1/3 (*.f64 (+.f64 z -1) (pow.f64 y 3)) (*.f64 y (-.f64 1 z))) (fma.f64 -1/2 (*.f64 (+.f64 z -1) (*.f64 y y)) (*.f64 (log.f64 y) (+.f64 x -1)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))) t)","(+.f64 (fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) (-.f64 (/.f64 (-.f64 1 z) y) t))","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y))))) t)","(-.f64 (+.f64 (fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (fma.f64 -1/2 (/.f64 (+.f64 z -1) (*.f64 y y)) (/.f64 (-.f64 1 z) y))) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (+.f64 (fma.f64 -1/3 (/.f64 (+.f64 z -1) (pow.f64 y 3)) (fma.f64 -1/2 (/.f64 (+.f64 z -1) (*.f64 y y)) (/.f64 (-.f64 1 z) y))) (*.f64 (log.f64 y) (+.f64 x -1)))) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))) t)","(+.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) (-.f64 1 z)) (fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))) t)","(+.f64 (neg.f64 (*.f64 (+.f64 z -1) (+.f64 (neg.f64 (log.f64 (neg.f64 y))) (/.f64 1 y)))) (fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))))) t)","(-.f64 (+.f64 (+.f64 (neg.f64 (*.f64 (+.f64 z -1) (+.f64 (neg.f64 (log.f64 (neg.f64 y))) (/.f64 1 y)))) (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1))) (/.f64 (/.f64 (*.f64 -1/2 (+.f64 z -1)) y) y)) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))))) t)","(-.f64 (+.f64 (+.f64 (+.f64 (neg.f64 (*.f64 (+.f64 z -1) (+.f64 (neg.f64 (log.f64 (neg.f64 y))) (/.f64 1 y)))) (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1))) (/.f64 (/.f64 (*.f64 -1/2 (+.f64 z -1)) y) y)) (/.f64 (*.f64 -1/3 (+.f64 z -1)) (pow.f64 y 3))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y)))) t)","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 (log1p.f64 (neg.f64 y)))) t)","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y)))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(*.f64 -1 t)","(neg.f64 t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(*.f64 -1 t)","(neg.f64 t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)"]],"time":359.51904296875,"type":"simplify"},{"compiler":[[5923,3431]],"time":59.548828125,"type":"eval"},{"alts":[["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)","next",0.12890625],["(-.f64 (/.f64 (+.f64 (*.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y)) (fma.f64 z z (+.f64 1 z))) (*.f64 (fma.f64 x x (+.f64 1 x)) (*.f64 (+.f64 (pow.f64 z 3) -1) (log1p.f64 (neg.f64 y))))) (*.f64 (fma.f64 x x (+.f64 1 x)) (fma.f64 z z (+.f64 1 z)))) t)","fresh",34.79525375976844],["(-.f64 (fma.f64 (cbrt.f64 (log1p.f64 (neg.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2)) (+.f64 z -1)) (*.f64 (+.f64 x -1) (log.f64 y))) t)","fresh",1.6033160966426805],["(fma.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)))","fresh",0.244472509768442],["(-.f64 (pow.f64 (pow.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) 3) 1/3) t)","fresh",31.24843231423127],["(-.f64 (pow.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))) 3) t)","fresh",0.4884339844426085]],"compiler":[[19,14],[52,35],[27,19],[26,19],[23,18],[22,17],[19,14],[52,35],[27,19],[26,19],[23,18],[22,17]],"count":[[254,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[253,6],"picked":[1,0]}],"min-error":[0.0390625],"time":84.89404296875,"type":"prune"},{"compiler":[[56,28]],"locations":[["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)",0.01171875,true],["(fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))",0.01953125,true],["(*.f64 (+.f64 x -1) (log.f64 y))",0.17578125,true]],"time":13.511962890625,"type":"localize"},{"count":[[3,108]],"series":[["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)","t","-inf",0.180908203125],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)","t","inf",0.205078125],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)","t","0",0.224853515625],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)","x","-inf",0.2041015625],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)","x","inf",0.18798828125],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)","x","0",0.205078125],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)","z","-inf",0.19189453125],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)","z","inf",0.20703125],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)","z","0",0.19091796875],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)","y","-inf",0.2568359375],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)","y","inf",0.237060546875],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)","y","0",0.212890625],["(fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))","x","-inf",0.182861328125],["(fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))","x","inf",0.201171875],["(fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))","x","0",0.254150390625],["(fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))","z","-inf",0.274169921875],["(fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))","z","inf",0.19189453125],["(fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))","z","0",0.277099609375],["(fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))","y","-inf",0.274169921875],["(fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))","y","inf",0.25],["(fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))","y","0",0.239990234375],["(*.f64 (+.f64 x -1) (log.f64 y))","y","-inf",6.362060546875],["(*.f64 (+.f64 x -1) (log.f64 y))","y","inf",5.556884765625],["(*.f64 (+.f64 x -1) (log.f64 y))","y","0",14.718994140625],["(*.f64 (+.f64 x -1) (log.f64 y))","x","-inf",0.31103515625],["(*.f64 (+.f64 x -1) (log.f64 y))","x","inf",0.193115234375],["(*.f64 (+.f64 x -1) (log.f64 y))","x","0",0.2109375]],"time":32.447021484375,"type":"series"},{"count":[[3,161]],"inputs":[["(*.f64 (+.f64 x -1) (log.f64 y))","(fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))","(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) x) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 y)) (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (*.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 0) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (log.f64 y) x)) (*.f64 1 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (neg.f64 (log.f64 y))) (*.f64 1 (*.f64 (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (*.f64 0 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 x -1) (log.f64 y))) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log.f64 y) x) 1) (*.f64 (neg.f64 (log.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (log.f64 y)) 1) (*.f64 (*.f64 (log.f64 y) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (+.f64 x -1)) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y)) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 x -1) (log.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 x 3) -1) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (/.f64 (log.f64 y) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 x 3) -1) 1) (/.f64 (log.f64 y) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 y) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (/.f64 (+.f64 (pow.f64 x 3) -1) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 y) (cbrt.f64 (+.f64 x -1))) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (*.f64 (log.f64 y) (cbrt.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y)) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y)) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 y) (+.f64 1 (neg.f64 (pow.f64 x 3)))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (neg.f64 (pow.f64 x 3))) (log.f64 y)) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y)) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y)) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y)) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (+.f64 x -1) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 1 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (log.f64 y) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) -1 (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (log.f64 y) (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (neg.f64 (log.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (neg.f64 (log1p.f64 (neg.f64 y)))) (*.f64 (log1p.f64 (neg.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (*.f64 (log1p.f64 (neg.f64 y)) z)) (neg.f64 (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)) (neg.f64 (log.f64 y))) (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)) (*.f64 (log.f64 y) x)) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log1p.f64 (neg.f64 y)) z) (+.f64 (neg.f64 (log1p.f64 (neg.f64 y))) (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log1p.f64 (neg.f64 y))) (+.f64 (*.f64 (log1p.f64 (neg.f64 y)) z) (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) x) (+.f64 (neg.f64 (log.f64 y)) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 y)) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) (*.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) 0) (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) (*.f64 0 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))) (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) 2)) (cbrt.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y)) (fma.f64 z z (+.f64 1 z))) (*.f64 (fma.f64 x x (+.f64 1 x)) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 (pow.f64 z 3) -1)))) (*.f64 (fma.f64 x x (+.f64 1 x)) (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 (pow.f64 z 3) -1)) (fma.f64 x x (+.f64 1 x))) (*.f64 (fma.f64 z z (+.f64 1 z)) (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y)))) (*.f64 (fma.f64 z z (+.f64 1 z)) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log1p.f64 (neg.f64 y)) (cbrt.f64 (+.f64 z -1))) (cbrt.f64 (pow.f64 (+.f64 z -1) 2)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1))) (cbrt.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)) 2)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log1p.f64 (neg.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2)) (+.f64 z -1)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (+.f64 x -1)) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y)) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) (+.f64 x -1) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (cbrt.f64 (+.f64 x -1))) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 x -1) (log.f64 y)) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)) 1 (*.f64 (+.f64 x -1) (log.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 t) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1))) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log1p.f64 (neg.f64 y)) z) (+.f64 (neg.f64 (log1p.f64 (neg.f64 y))) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log1p.f64 (neg.f64 y))) (+.f64 (*.f64 (log1p.f64 (neg.f64 y)) z) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (+.f64 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (-.f64 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 0 (+.f64 t (*.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y))))) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))) (*.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))) 0) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))) (*.f64 0 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 t) (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)) (*.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 t (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 t) (neg.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) 0) t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 t (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 t (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 t (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))))) (cbrt.f64 (pow.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) 2)) (+.f64 (cbrt.f64 (*.f64 t t)) (cbrt.f64 (*.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)))) (-.f64 (cbrt.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))) (cbrt.f64 (pow.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))) 2)) (cbrt.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 t (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 t (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 t (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) 2)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log1p.f64 (neg.f64 y)) (cbrt.f64 (+.f64 z -1))) (cbrt.f64 (pow.f64 (+.f64 z -1) 2)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1))) (cbrt.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)) 2)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log1p.f64 (neg.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2)) (+.f64 z -1)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 t)) (cbrt.f64 (*.f64 t t)) (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 t) (neg.f64 (cbrt.f64 (*.f64 t t))) (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) 2)) (cbrt.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 t (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 t) (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) 1 (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))))))))"]],"rules":[["egg-rr",59],["egg-rr",48],["egg-rr",54]],"time":38.781005859375,"type":"rewrite"},{"count":[[269,237]],"inputs":[["(*.f64 -1 (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (-.f64 x 1) (log.f64 y))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (*.f64 (-.f64 x 1) (log.f64 y)))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 (-.f64 x 1) (log.f64 y))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (+.f64 (*.f64 -1/3 (*.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 (-.f64 x 1) (log.f64 y)))))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y))))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y))))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))))))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y))))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(*.f64 z (log.f64 (-.f64 1 y)))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(*.f64 z (log.f64 (-.f64 1 y)))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(-.f64 (*.f64 (-.f64 x 1) (log.f64 y)) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (*.f64 (-.f64 x 1) (log.f64 y))) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 (-.f64 x 1) (log.f64 y)))) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (+.f64 (*.f64 -1/3 (*.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 (-.f64 x 1) (log.f64 y))))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y))))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))))) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))))) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(*.f64 z (log.f64 (-.f64 1 y)))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(*.f64 z (log.f64 (-.f64 1 y)))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y)))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(*.f64 -1 t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(*.f64 -1 t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (log.f64 y))","(neg.f64 (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 x -1))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 x -1))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 x -1))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 x -1))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 x -1))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 x -1))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (log.f64 y) (+.f64 x -1))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (*.f64 (-.f64 x 1) (log.f64 y)))","(+.f64 (*.f64 (-.f64 1 z) y) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 (-.f64 x 1) (log.f64 y))))","(+.f64 (*.f64 (-.f64 1 z) y) (fma.f64 -1/2 (*.f64 (+.f64 z -1) (*.f64 y y)) (*.f64 (log.f64 y) (+.f64 x -1))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (+.f64 (*.f64 -1/3 (*.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 (-.f64 x 1) (log.f64 y)))))","(+.f64 (*.f64 (-.f64 1 z) y) (fma.f64 -1/3 (*.f64 (+.f64 z -1) (pow.f64 y 3)) (fma.f64 -1/2 (*.f64 (+.f64 z -1) (*.f64 y y)) (*.f64 (log.f64 y) (+.f64 x -1)))))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))))","(fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y))))","(+.f64 (fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) (/.f64 (-.f64 1 z) y))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))))","(fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (fma.f64 -1/2 (/.f64 (+.f64 z -1) (*.f64 y y)) (+.f64 (*.f64 (log.f64 y) (+.f64 x -1)) (/.f64 (-.f64 1 z) y))))","(+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y))))))","(fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (fma.f64 -1/3 (/.f64 (+.f64 z -1) (pow.f64 y 3)) (fma.f64 -1/2 (/.f64 (+.f64 z -1) (*.f64 y y)) (+.f64 (*.f64 (log.f64 y) (+.f64 x -1)) (/.f64 (-.f64 1 z) y)))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))","(+.f64 (*.f64 (-.f64 1 z) (neg.f64 (log.f64 (neg.f64 y)))) (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1)))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))))","(+.f64 (*.f64 (-.f64 1 z) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 (/.f64 (-.f64 1 z) y) (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))))","(+.f64 (*.f64 (-.f64 1 z) (neg.f64 (log.f64 (neg.f64 y)))) (fma.f64 -1/2 (/.f64 (+.f64 z -1) (*.f64 y y)) (+.f64 (/.f64 (-.f64 1 z) y) (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1)))))","(+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))))))","(+.f64 (*.f64 (-.f64 1 z) (neg.f64 (log.f64 (neg.f64 y)))) (fma.f64 -1/3 (/.f64 (+.f64 z -1) (pow.f64 y 3)) (fma.f64 -1/2 (/.f64 (+.f64 z -1) (*.f64 y y)) (+.f64 (/.f64 (-.f64 1 z) y) (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1))))))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y))))","(fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 (log1p.f64 (neg.f64 y))))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y)))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(-.f64 (*.f64 (-.f64 x 1) (log.f64 y)) t)","(fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (*.f64 (-.f64 x 1) (log.f64 y))) t)","(+.f64 (*.f64 (-.f64 1 z) y) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 (-.f64 x 1) (log.f64 y)))) t)","(+.f64 (fma.f64 -1/2 (*.f64 (+.f64 z -1) (*.f64 y y)) (*.f64 (log.f64 y) (+.f64 x -1))) (-.f64 (*.f64 (-.f64 1 z) y) t))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) y)) (+.f64 (*.f64 -1/3 (*.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 z 1) (pow.f64 y 2))) (*.f64 (-.f64 x 1) (log.f64 y))))) t)","(+.f64 (fma.f64 -1/3 (*.f64 (+.f64 z -1) (pow.f64 y 3)) (fma.f64 -1/2 (*.f64 (+.f64 z -1) (*.f64 y y)) (*.f64 (log.f64 y) (+.f64 x -1)))) (-.f64 (*.f64 (-.f64 1 z) y) t))","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))) t)","(+.f64 (fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) (-.f64 (/.f64 (-.f64 1 z) y) t))","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (fma.f64 -1/2 (/.f64 (+.f64 z -1) (*.f64 y y)) (+.f64 (*.f64 (log.f64 y) (+.f64 x -1)) (/.f64 (-.f64 1 z) y)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (+.f64 (log.f64 -1) (log.f64 y)) (fma.f64 -1/3 (/.f64 (+.f64 z -1) (pow.f64 y 3)) (fma.f64 -1/2 (/.f64 (+.f64 z -1) (*.f64 y y)) (+.f64 (*.f64 (log.f64 y) (+.f64 x -1)) (/.f64 (-.f64 1 z) y))))) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))) t)","(+.f64 (*.f64 (-.f64 1 z) (neg.f64 (log.f64 (neg.f64 y)))) (fma.f64 (+.f64 x -1) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))) t)","(+.f64 (*.f64 (-.f64 1 z) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1)) (-.f64 (/.f64 (-.f64 1 z) y) t)))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))))) t)","(+.f64 (fma.f64 -1/2 (/.f64 (+.f64 z -1) (*.f64 y y)) (+.f64 (/.f64 (-.f64 1 z) y) (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1)))) (-.f64 (*.f64 (-.f64 1 z) (neg.f64 (log.f64 (neg.f64 y)))) t))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (-.f64 z 1) (log.f64 (/.f64 -1 y)))) (+.f64 (*.f64 -1/3 (/.f64 (-.f64 z 1) (pow.f64 y 3))) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 z 1) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))))) t)","(+.f64 (fma.f64 -1/3 (/.f64 (+.f64 z -1) (pow.f64 y 3)) (fma.f64 -1/2 (/.f64 (+.f64 z -1) (*.f64 y y)) (+.f64 (/.f64 (-.f64 1 z) y) (*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 x -1))))) (-.f64 (*.f64 (-.f64 1 z) (neg.f64 (log.f64 (neg.f64 y)))) t))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y)))) t)","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 (log1p.f64 (neg.f64 y)))) t)","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 (-.f64 1 y))))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 (log.f64 y))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 -1 (log.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y)))","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1)))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(*.f64 -1 t)","(neg.f64 t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(*.f64 -1 t)","(neg.f64 t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))))","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 x -1))) t)"]],"time":351.010009765625,"type":"simplify"},{"compiler":[[5366,3017]],"time":54.987060546875,"type":"eval"},{"alts":[["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (pow.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) 1/3)) t)","fresh",23.88108819692769],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))) t)","next",0.240566259768442],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (/.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))) t)","fresh",16.55078125],["(fma.f64 (cbrt.f64 (log1p.f64 (neg.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2)) (+.f64 z -1)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))","fresh",1.5994098466426805],["(-.f64 (pow.f64 (cbrt.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))) 3) t)","fresh",0.48224272467416646]],"compiler":[[23,18],[26,19],[37,28],[27,19],[22,17],[23,18],[26,19],[37,28],[27,19],[22,17]],"count":[[243,5]],"kept":[{"done":[0,0],"fresh":[5,0],"new":[237,5],"picked":[1,0]}],"min-error":[0.03515625],"time":80.758056640625,"type":"prune"},{"compiler":[[97,50]],"locations":[["(cbrt.f64 (log.f64 y))",0.12109375,true],["(*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))",0.14453125,true],["(*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))",0.375,true],["(pow.f64 (log.f64 y) 2)",0.521816259768442,true]],"time":24.36181640625,"type":"localize"},{"count":[[4,68]],"series":[["(cbrt.f64 (log.f64 y))","y","-inf",0.77197265625],["(cbrt.f64 (log.f64 y))","y","inf",0.80810546875],["(cbrt.f64 (log.f64 y))","y","0",1.363037109375],["(*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))","y","-inf",1.25],["(*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))","y","inf",1.244873046875],["(*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))","y","0",1.011962890625],["(*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))","x","-inf",0.34912109375],["(*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))","x","inf",0.258056640625],["(*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))","x","0",0.717041015625],["(*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))","y","-inf",0.344970703125],["(*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))","y","inf",0.3349609375],["(*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))","y","0",1.134033203125],["(*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))","x","-inf",0.277099609375],["(*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))","x","inf",0.261962890625],["(*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))","x","0",0.781982421875],["(pow.f64 (log.f64 y) 2)","y","-inf",0.3671875],["(pow.f64 (log.f64 y) 2)","y","inf",0.375],["(pow.f64 (log.f64 y) 2)","y","0",0.408935546875]],"time":12.3291015625,"type":"series"},{"count":[[4,161]],"inputs":[["(pow.f64 (log.f64 y) 2)","(*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))","(cbrt.f64 (log.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 y) 2) (*.f64 (pow.f64 (log.f64 y) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 y) 2) 0) (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 y) 2) (*.f64 0 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (log.f64 y) 2)) (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 y)) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (log.f64 y)) 1) (*.f64 (neg.f64 (log.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)) (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2/3) (cbrt.f64 (pow.f64 (log.f64 y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (pow.f64 (log.f64 y) (+.f64 2/3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)) (pow.f64 (log.f64 y) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) (+.f64 2/3 1)) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)) (pow.f64 (log.f64 y) 4))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (+.f64 2 3)) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 y) (+.f64 2/3 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2/3) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2/3) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 y) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (*.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 0) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) x) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 y)) (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) (*.f64 (cbrt.f64 (log.f64 y)) x)) (*.f64 (pow.f64 (log.f64 y) 2/3) (cbrt.f64 (neg.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) (cbrt.f64 (neg.f64 (log.f64 y)))) (*.f64 (pow.f64 (log.f64 y) 2/3) (*.f64 (cbrt.f64 (log.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (*.f64 0 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 x -1) (log.f64 y))) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 y)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) x) (pow.f64 (log.f64 y) 2/3)) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 y)) (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) x) (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2/3) (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))) (*.f64 (pow.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) 2/3) (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1)) (*.f64 (pow.f64 (+.f64 x -1) 2/3) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2/3) (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) (+.f64 x -1)) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) (cbrt.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))))) (pow.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (*.f64 (pow.f64 (log.f64 y) 2/3) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 4) (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 x -1) (log.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) 2/3) (*.f64 (pow.f64 (log.f64 y) 2/3) (cbrt.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 4) (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) 2/3) (pow.f64 (log.f64 y) 2/3)) (cbrt.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 x -1) 2/3) (log.f64 y)) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 4) (*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y)) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 x 3) -1) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (/.f64 (log.f64 y) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) -1) (/.f64 (log.f64 y) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 y) (+.f64 (neg.f64 (pow.f64 x 3)) 1)) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (neg.f64 (pow.f64 x 3)) 1) (log.f64 y)) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) -1)) (*.f64 (pow.f64 (+.f64 x -1) 2/3) (log.f64 y))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y)) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y)) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 x 3) -1))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y)) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 x 3) -1)) (pow.f64 (log.f64 y) 2/3)) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y)) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 1 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (log.f64 y) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (*.f64 (cbrt.f64 (log.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (log.f64 y)) x) (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) 0) (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (*.f64 0 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))) (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) 1) (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) x) 1) (*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))) (pow.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) 2/3) (cbrt.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1)) (cbrt.f64 (*.f64 (pow.f64 (+.f64 x -1) 2) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 x -1) 2) (log.f64 y))) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (+.f64 x -1)) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 y)) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (/.f64 (+.f64 (pow.f64 x 3) -1) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 x 3) -1) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (/.f64 (cbrt.f64 (log.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (pow.f64 (+.f64 x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (cbrt.f64 (log.f64 y)))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 (+.f64 x -1) (cbrt.f64 (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x -1) 2/3) (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 x 3) -1)) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) -1) (/.f64 (cbrt.f64 (log.f64 y)) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 x 3) -1)) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (neg.f64 (pow.f64 x 3)) 1)) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (neg.f64 (pow.f64 x 3)) 1) (cbrt.f64 (log.f64 y))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) -1)) (cbrt.f64 (*.f64 (pow.f64 (+.f64 x -1) 2) (log.f64 y)))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 x 3) -1))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 x 3) -1)) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 x 3) -1)) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 x 3) -1)) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 y) (pow.f64 (+.f64 x -1) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 1 x) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (log.f64 y)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (log.f64 y) (pow.f64 (+.f64 x -1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (log.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 y)) -1 (*.f64 (cbrt.f64 (log.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (cbrt.f64 (log.f64 y)) (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 y)) x (cbrt.f64 (neg.f64 (log.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (log.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (log.f64 y)) 0) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (log.f64 y)) (*.f64 0 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (log.f64 y))) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) (+.f64 2/3 1)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 y)))) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (log.f64 y))))))"]],"rules":[["egg-rr",20],["egg-rr",50],["egg-rr",57],["egg-rr",34]],"time":34.236083984375,"type":"rewrite"},{"count":[[229,181]],"inputs":[["(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(*.f64 -1 (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3))","(+.f64 (*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x))","(+.f64 (*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x))","(+.f64 (*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(+.f64 (*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x))","(+.f64 (*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x))","(+.f64 (*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(+.f64 (*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x))","(+.f64 (*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x))","(+.f64 (*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (-.f64 x 1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (-.f64 x 1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (-.f64 x 1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (-.f64 x 1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) (-.f64 x 1))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) (-.f64 x 1))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) (-.f64 x 1))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) (-.f64 x 1))","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (log.f64 y) 2)","(*.f64 -1 (log.f64 y))","(neg.f64 (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (+.f64 x -1) (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (+.f64 x -1) (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (log.f64 y) x)","(*.f64 x (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (+.f64 x -1) (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (+.f64 x -1) (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (log.f64 y) x)","(*.f64 x (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (+.f64 x -1) (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (+.f64 x -1) (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3))","(cbrt.f64 (neg.f64 (log.f64 y)))","(+.f64 (*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(+.f64 (*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(+.f64 (*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(+.f64 (*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(+.f64 (*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(+.f64 (*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(+.f64 (*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(+.f64 (*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(+.f64 (*.f64 -1 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (-.f64 x 1))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (-.f64 x 1))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (-.f64 x 1))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (-.f64 x 1))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) (-.f64 x 1))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) (-.f64 x 1))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) (-.f64 x 1))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) (-.f64 x 1))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))"]],"time":225.843994140625,"type":"simplify"},{"compiler":[[4660,2508]],"time":44.136962890625,"type":"eval"},{"alts":[["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))) 3) (cbrt.f64 (pow.f64 (log.f64 y) 2)))) t)","fresh",0.4200364258319564],["(fma.f64 (cbrt.f64 (log1p.f64 (neg.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2)) (+.f64 z -1)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))","fresh",1.5994098466426805],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))) t)","next",0.3307800781475361],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (*.f64 (+.f64 x -1) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)) (cbrt.f64 (pow.f64 (log.f64 y) 2)))) t)","fresh",0.42159401837858995],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))) t)","done",0.240566259768442],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (/.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))) t)","fresh",16.55078125],["(-.f64 (pow.f64 (cbrt.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))) 3) t)","fresh",0.48224272467416646],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 6) 1/3)))) t)","fresh",0.5106203125901447]],"compiler":[[29,22],[27,19],[34,28],[29,22],[26,19],[37,28],[22,17],[28,21],[29,22],[27,19],[34,28],[29,22],[37,28],[22,17],[28,21]],"count":[[186,8]],"kept":[{"done":[0,0],"fresh":[4,3],"new":[181,4],"picked":[1,1]}],"min-error":[0.00390625],"time":46.76904296875,"type":"prune"},{"compiler":[[157,115]],"locations":[["(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))",0.14453125,true],["(*.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))",0.375,true],["(pow.f64 (log.f64 y) 2)",0.521816259768442,false],["(pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3)",0.670917529305326,true]],"time":53.06396484375,"type":"localize"},{"count":[[3,56]],"series":[["(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","x","-inf",0.361083984375],["(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","x","inf",0.255859375],["(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","x","0",0.779052734375],["(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","y","-inf",1.056884765625],["(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","y","inf",0.2890625],["(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","y","0",0.320068359375],["(*.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))","x","-inf",0.502197265625],["(*.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))","x","inf",0.4150390625],["(*.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))","x","0",4.14990234375],["(*.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))","y","-inf",1.655029296875],["(*.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))","y","inf",1.488037109375],["(*.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))","y","0",2.281005859375],["(pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3)","y","-inf",5.346923828125],["(pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3)","y","inf",0.175048828125],["(pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3)","y","0",0.241943359375]],"time":19.60595703125,"type":"series"},{"count":[[3,138]],"inputs":[["(pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3)","(*.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) 0) (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (log.f64 y)) 0) (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (neg.f64 (log.f64 y)))) (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (*.f64 0 (cbrt.f64 (neg.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (log.f64 y))) (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 y))))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 y)))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log.f64 y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 (log.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) x) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 y)) (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) (*.f64 (cbrt.f64 (log.f64 y)) x)) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log.f64 y) (+.f64 x -1)) 0) (*.f64 (log.f64 y) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) (+.f64 x -1)) (*.f64 (*.f64 (log.f64 y) (+.f64 x -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 y)) (*.f64 (neg.f64 (log.f64 y)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (log.f64 y)) (neg.f64 x)) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 y)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) x) (pow.f64 (log.f64 y) 2/3)) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (log.f64 y) (+.f64 x -1))) (*.f64 (log.f64 y) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) (+.f64 x -1)) (*.f64 0 (*.f64 (log.f64 y) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 y)) (*.f64 (neg.f64 x) (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 x) (neg.f64 (log.f64 y))) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 y) (+.f64 x -1))) (pow.f64 (*.f64 (log.f64 y) (+.f64 x -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 y) (+.f64 x -1)) 2/3) (cbrt.f64 (*.f64 (log.f64 y) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2/3) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (*.f64 (+.f64 x -1) (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))) (*.f64 (pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) 2/3) (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (*.f64 (-.f64 1 x) (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) (pow.f64 (log.f64 y) 2/3)) (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)))) (pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 y)))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 (-.f64 1 x) (pow.f64 (log.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4/3)) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) (cbrt.f64 (pow.f64 (log.f64 y) 2/3))) (cbrt.f64 (pow.f64 (log.f64 y) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 y)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 y) (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (log.f64 y) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 (-.f64 1 x) (pow.f64 (log.f64 y) 2/3))) (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4/3)) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (log.f64 y) (+.f64 x -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) (pow.f64 (log.f64 y) 2/3)) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) 2/3) (*.f64 (pow.f64 (log.f64 y) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) 2/3) (pow.f64 (log.f64 y) 2/3)) (cbrt.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4/3)) (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) (cbrt.f64 (pow.f64 (log.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (log.f64 y)) (-.f64 1 (pow.f64 x 3))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 y) (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 x 3) -1))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 y) (+.f64 (pow.f64 x 3) -1)) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 y) (-.f64 1 (pow.f64 x 3))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (neg.f64 (log.f64 y))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 x 3) -1)) (pow.f64 (log.f64 y) 2/3)) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 y) (+.f64 x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 y) (+.f64 x -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 y) (+.f64 x -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 y) (+.f64 x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 y) (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 x -1) (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (log.f64 y) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) (-.f64 1 x)) (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (*.f64 (+.f64 x -1) (pow.f64 (log.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (log.f64 y) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 1 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) (*.f64 (cbrt.f64 (log.f64 y)) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (log.f64 y)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 y) (+.f64 x -1)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (log.f64 y)) x) (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (*.f64 (cbrt.f64 (log.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) 0) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) (-.f64 1 x)) 0) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (neg.f64 x)) (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) x) 1) (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) (*.f64 0 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 (log.f64 y)) (-.f64 1 x))) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (*.f64 (neg.f64 x) (cbrt.f64 (neg.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 x) (cbrt.f64 (neg.f64 (log.f64 y)))) (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (cbrt.f64 (log.f64 y)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))) (pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 y)) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (/.f64 (+.f64 (pow.f64 x 3) -1) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 y) (+.f64 x -1))) (pow.f64 (-.f64 1 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 y)))) (*.f64 (-.f64 1 x) (cbrt.f64 (pow.f64 (log.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 x)) (*.f64 (pow.f64 (-.f64 1 x) 2/3) (cbrt.f64 (neg.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (log.f64 y)) (-.f64 1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (cbrt.f64 (log.f64 y)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 x) 2/3) (cbrt.f64 (*.f64 (log.f64 y) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) (cbrt.f64 (pow.f64 (log.f64 y) 2/3))) (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 1 x) 2/3) (cbrt.f64 (neg.f64 (log.f64 y)))) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 y))))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 (-.f64 1 x) (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 x 3) -1)) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 x 3) -1)) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 x 3) -1)) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (-.f64 1 (pow.f64 x 3))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (log.f64 y)) (-.f64 1 (pow.f64 x 3))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (cbrt.f64 (neg.f64 (log.f64 y)))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 x 3) -1)) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (cbrt.f64 (log.f64 y))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 x 3) -1)) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 x 3) -1))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 y) (pow.f64 (+.f64 x -1) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (log.f64 y)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) (-.f64 1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (log.f64 y) (pow.f64 (+.f64 x -1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 y)) x (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (cbrt.f64 (log.f64 y)) (cbrt.f64 (neg.f64 (log.f64 y))))))))"]],"rules":[["egg-rr",54],["egg-rr",61],["egg-rr",23]],"time":32.876953125,"type":"rewrite"},{"count":[[194,155]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (cbrt.f64 -1))","(pow.f64 (log.f64 (/.f64 1 y)) 1/3)","(pow.f64 (log.f64 (/.f64 1 y)) 1/3)","(pow.f64 (log.f64 (/.f64 1 y)) 1/3)","(pow.f64 (log.f64 (/.f64 1 y)) 1/3)","(pow.f64 (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) 1/3)","(pow.f64 (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) 1/3)","(pow.f64 (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) 1/3)","(pow.f64 (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) 1/3)","(*.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (-.f64 x 1) (log.f64 y)))","(*.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (-.f64 x 1) (log.f64 y)))","(*.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (-.f64 x 1) (log.f64 y)))","(*.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (-.f64 x 1) (log.f64 y)))","(*.f64 (log.f64 (/.f64 1 y)) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (log.f64 (/.f64 1 y)) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (log.f64 (/.f64 1 y)) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (log.f64 (/.f64 1 y)) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1)))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1))))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1))))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (-.f64 x 1)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (-.f64 x 1)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (-.f64 x 1)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (-.f64 x 1)))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1)))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (cbrt.f64 -1))","(cbrt.f64 (neg.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (cbrt.f64 -1))","(cbrt.f64 (neg.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (cbrt.f64 -1))","(cbrt.f64 (neg.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (cbrt.f64 -1))","(cbrt.f64 (neg.f64 (log.f64 y)))","(pow.f64 (log.f64 (/.f64 1 y)) 1/3)","(cbrt.f64 (neg.f64 (log.f64 y)))","(pow.f64 (log.f64 (/.f64 1 y)) 1/3)","(cbrt.f64 (neg.f64 (log.f64 y)))","(pow.f64 (log.f64 (/.f64 1 y)) 1/3)","(cbrt.f64 (neg.f64 (log.f64 y)))","(pow.f64 (log.f64 (/.f64 1 y)) 1/3)","(cbrt.f64 (neg.f64 (log.f64 y)))","(pow.f64 (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) 1/3)","(cbrt.f64 (neg.f64 (log.f64 y)))","(pow.f64 (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) 1/3)","(cbrt.f64 (neg.f64 (log.f64 y)))","(pow.f64 (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) 1/3)","(cbrt.f64 (neg.f64 (log.f64 y)))","(pow.f64 (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) 1/3)","(cbrt.f64 (neg.f64 (log.f64 y)))","(*.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (-.f64 x 1) (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (-.f64 x 1) (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (-.f64 x 1) (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (-.f64 x 1) (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (log.f64 (/.f64 1 y)) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (log.f64 (/.f64 1 y)) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (log.f64 (/.f64 1 y)) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (log.f64 (/.f64 1 y)) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1)))","(neg.f64 (log.f64 y))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1))))","(*.f64 (log.f64 y) (+.f64 x -1))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1))))","(*.f64 (log.f64 y) (+.f64 x -1))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1))))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1))))","(*.f64 (log.f64 y) (+.f64 x -1))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1))))","(*.f64 (log.f64 y) (+.f64 x -1))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1))))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1))))","(*.f64 (log.f64 y) (+.f64 x -1))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1))))","(*.f64 (log.f64 y) (+.f64 x -1))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (pow.f64 (log.f64 y) 2))) 1/3) (cbrt.f64 -1))))","(*.f64 (log.f64 y) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (-.f64 x 1)))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (-.f64 x 1)))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (-.f64 x 1)))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (-.f64 x 1)))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1)))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1)))","(cbrt.f64 (neg.f64 (log.f64 y)))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 x (cbrt.f64 (log.f64 y)))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 x (cbrt.f64 (log.f64 y)))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))"]],"time":196.902099609375,"type":"simplify"},{"compiler":[[5287,3057]],"time":53.223876953125,"type":"eval"},{"alts":[["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))) 3) (cbrt.f64 (pow.f64 (log.f64 y) 2)))) t)","fresh",0.4200364258319564],["(fma.f64 (cbrt.f64 (log1p.f64 (neg.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2)) (+.f64 z -1)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))","fresh",1.5994098466426805],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))) t)","done",0.3307800781475361],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (*.f64 (+.f64 x -1) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)) (cbrt.f64 (pow.f64 (log.f64 y) 2)))) t)","fresh",0.42159401837858995],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))) t)","done",0.240566259768442],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (/.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))) t)","fresh",16.55078125],["(-.f64 (pow.f64 (cbrt.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))) 3) t)","fresh",0.48224272467416646],["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 6) 1/3)))) t)","fresh",0.5106203125901447]],"compiler":[[29,22],[27,19],[34,28],[29,22],[26,19],[37,28],[22,17],[28,21]],"count":[[199,8]],"kept":[{"done":[1,1],"fresh":[6,6],"new":[191,0],"picked":[1,1]}],"min-error":[0.00390625],"time":47.072998046875,"type":"prune"},{"accuracy":[0.12890625],"baseline":[0.12890625],"branch":[["x",0.12890625,1],["y",0.12890625,1],["z",0.12890625,1],["t",0.12890625,1],["(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y)))) t)",0.12890625,1],["(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))))",0.12890625,1],["(-.f64 x 1)",0.12890625,1],["(-.f64 x 1)",0.12890625,1],["(-.f64 z 1)",0.12890625,1]],"compiler":[[5,4],[5,4],[5,4],[5,4],[21,16],[19,15],[7,6],[7,6],[7,6],[400,230]],"count":[[17,1]],"inputs":[["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y)))) 3) (cbrt.f64 (pow.f64 (log.f64 y) 2)))) t)","(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 x 1))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))) t)","(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (*.f64 (+.f64 x -1) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)) (cbrt.f64 (pow.f64 (log.f64 y) 2)))) t)","(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 6) 1/3)))) t)","(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (pow.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) 1/3)) t)","(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))) t)","(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (/.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))) t)","(fma.f64 (cbrt.f64 (log1p.f64 (neg.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2)) (+.f64 z -1)) (fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 t)))","(-.f64 (pow.f64 (cbrt.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y)))) 3) t)","(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)","(-.f64 (/.f64 (+.f64 (*.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) (log.f64 y)) (fma.f64 z z (+.f64 1 z))) (*.f64 (fma.f64 x x (+.f64 1 x)) (*.f64 (+.f64 (pow.f64 z 3) -1) (log1p.f64 (neg.f64 y))))) (*.f64 (fma.f64 x x (+.f64 1 x)) (fma.f64 z z (+.f64 1 z)))) t)","(-.f64 (fma.f64 (cbrt.f64 (log1p.f64 (neg.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2)) (+.f64 z -1)) (*.f64 (+.f64 x -1) (log.f64 y))) t)","(fma.f64 (*.f64 (+.f64 x -1) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(-.f64 (pow.f64 (pow.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) 3) 1/3) t)","(-.f64 (pow.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))))) 3) t)","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y)))) t)"]],"link":["."],"name":["Statistics.Distribution.Beta:$cdensity from math-functions-0.1.5.2"],"oracle":[39.22729713648819],"outputs":[["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)"]],"time":56.281005859375,"times":[["x",5.72705078125],["y",5.761962890625],["z",5.90087890625],["t",5.65380859375],["(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y)))) t)",6.0380859375],["(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))))",6.02001953125],["(-.f64 x 1)",3.9228515625],["(-.f64 x 1)",3.805908203125],["(-.f64 z 1)",5.906005859375]],"type":"regimes"},{"compiler":[[19,14]],"inputs":[["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 z -1) (*.f64 (+.f64 x -1) (log.f64 y))) t)","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (fma.f64 (log.f64 y) (+.f64 x -1) (neg.f64 t)))"]],"stop":[["fuel",1]],"time":20.901123046875,"type":"simplify"},{"time":0.015869140625,"type":"soundness"},{"compiler":[[19,14]],"remove-preprocessing":[[]],"time":10.2490234375,"type":"end"}]
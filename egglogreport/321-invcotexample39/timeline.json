[{"compiler":[[16,12]],"method":["search"],"sampling":[[12,0.4964209899902344,0.00048526000976562505,0.50309375],[11,0.49593572998046875,0.00097052001953125,0.50309375],[10,0.4949652099609375,0.0019410400390625,0.50309375],[9,0.493024169921875,0.003882080078125,0.5030937500000001],[8,0.48914208984375,0.00776416015625,0.50309375],[7,0.4813779296875,0.0155283203125,0.50309375],[6,0.465849609375,0.031056640625,0.50309375],[5,0.43479296875,0.06211328125,0.5030937499999999],[4,0.3726796875,0.1242265625,0.50309375],[3,0.248453125,0.248453125,0.5030937500000001],[2,0.0,0.49690625,0.50309375],[1,0.0,0.49690625,0.50309375],[0,0.0,0.49690625,0.50309375]],"time":2.252197265625,"type":"analyze"},{"outcomes":[["body",4096,"valid",107.3916015625,224],["body",512,"valid",120.330322265625,1075],["body",1024,"valid",595.72998046875,2151],["body",256,"valid",42.20556640625,750],["body",2048,"valid",4075.947509765625,4056]],"time":4951.035888671875,"type":"sample"},{"compiler":[[9,7]],"inputs":[["0"],["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))","(+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x)))"]],"symmetry":[[]],"time":52.013916015625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))","(+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x)))"]],"time":18.819091796875,"type":"simplify"},{"compiler":[[17,12]],"time":0.3720703125,"type":"eval"},{"alts":[["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))","next",59.96451796393683]],"compiler":[[9,7],[9,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[59.96451796393683],"time":0.866943359375,"type":"prune"},{"compiler":[[20,12]],"locations":[["(/.f64 1 (tan.f64 x))",0.00390625,true],["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))",2.291866200877253,true]],"time":4.881103515625,"type":"localize"},{"count":[[2,24]],"series":[["(/.f64 1 (tan.f64 x))","x","-inf",0.33984375],["(/.f64 1 (tan.f64 x))","x","inf",0.35693359375],["(/.f64 1 (tan.f64 x))","x","0",0.23095703125],["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))","x","-inf",0.60107421875],["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))","x","inf",0.64111328125],["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))","x","0",0.69580078125]],"time":2.9599609375,"type":"series"},{"count":[[2,123]],"inputs":[["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))","(/.f64 1 (tan.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (tan.f64 x)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))) 0) (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))) (*.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x)))) (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))) (*.f64 0 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (tan.f64 x) (*.f64 x (tan.f64 x))) (neg.f64 (/.f64 x (*.f64 x (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (tan.f64 x) (*.f64 x (tan.f64 x))) (/.f64 x (*.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (/.f64 1 (tan.f64 x)) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 1 x) 0) (/.f64 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (tan.f64 x)) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 -1 x) (/.f64 -1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (/.f64 1 (tan.f64 x)) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 1 (tan.f64 x)) (/.f64 -1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (/.f64 -1 x) (/.f64 -1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 (/.f64 1 (tan.f64 x)) (/.f64 -1 x)))) (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 x -2)) (+.f64 (cbrt.f64 (pow.f64 (tan.f64 x) -2)) (cbrt.f64 (/.f64 (/.f64 1 x) (tan.f64 x))))) (-.f64 (cbrt.f64 (/.f64 1 x)) (pow.f64 (tan.f64 x) (neg.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (tan.f64 x) x) (/.f64 (/.f64 1 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x)))) (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))) 2)) (cbrt.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 x) (tan.f64 x)) (-.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (tan.f64 x) x) x) (/.f64 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (tan.f64 x)) (/.f64 1 (*.f64 (neg.f64 x) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 1 (tan.f64 x)) (/.f64 -1 x))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (tan.f64 x) x) x) (sin.f64 x)) (/.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (tan.f64 x) x) (cbrt.f64 (*.f64 x (tan.f64 x)))) (pow.f64 (cbrt.f64 (*.f64 x (tan.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (tan.f64 x) x) (cbrt.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (neg.f64 (tan.f64 x)) (cbrt.f64 (/.f64 1 x)))) (*.f64 (neg.f64 (tan.f64 x)) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (cbrt.f64 (*.f64 x x))) (*.f64 (tan.f64 x) (cbrt.f64 (/.f64 1 x)))) (*.f64 (cbrt.f64 (*.f64 x x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) (tan.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) -1)) (*.f64 (cbrt.f64 (*.f64 x x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) (neg.f64 (tan.f64 x))) (cbrt.f64 (*.f64 x x))) (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (tan.f64 x) (*.f64 x (tan.f64 x))) (*.f64 (*.f64 x (tan.f64 x)) x)) (*.f64 (*.f64 x (tan.f64 x)) (*.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2))) (*.f64 (neg.f64 x) (pow.f64 (tan.f64 x) (neg.f64 1/3)))) (*.f64 (neg.f64 x) (cbrt.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (*.f64 x (pow.f64 (tan.f64 x) (neg.f64 1/3)))) (*.f64 x (cbrt.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) (neg.f64 (tan.f64 x))) (*.f64 (cbrt.f64 (*.f64 x x)) -1)) (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (pow.f64 (tan.f64 x) 2))) (*.f64 (cbrt.f64 (*.f64 x x)) (pow.f64 (tan.f64 x) (neg.f64 1/3)))) (*.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) (tan.f64 x)) (cbrt.f64 (*.f64 x x))) (*.f64 (cbrt.f64 (*.f64 x x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (tan.f64 x) x) (*.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (tan.f64 x) x) x) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (tan.f64 x)) (*.f64 (neg.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))) 2)) (cbrt.f64 (-.f64 (tan.f64 x) x))) (cbrt.f64 (*.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (tan.f64 x) x) (/.f64 1 (tan.f64 x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (tan.f64 x) x) -1) (*.f64 (neg.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (tan.f64 x) x) (/.f64 -1 x)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (tan.f64 x) x) (/.f64 -1 (tan.f64 x))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (tan.f64 x) x)) (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))) 2))) (cbrt.f64 (*.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (tan.f64 x)) 1) (*.f64 (neg.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (tan.f64 x) x) x) 1) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (tan.f64 x) x) x) (cbrt.f64 (tan.f64 x))) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (tan.f64 x) x) x) (cbrt.f64 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (tan.f64 x) x) x) -1) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (tan.f64 x) x) (*.f64 x (cbrt.f64 (tan.f64 x)))) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (tan.f64 x) x) (tan.f64 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (tan.f64 x)) x) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (tan.f64 x) x) (neg.f64 x)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 (tan.f64 x) x) x)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 1 (tan.f64 x)) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 (/.f64 1 (tan.f64 x)) (/.f64 -1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (pow.f64 x -2)) (/.f64 -1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1 (tan.f64 x))) (cbrt.f64 (pow.f64 (tan.f64 x) -2)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (tan.f64 x)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (tan.f64 x) (neg.f64 1/3)) (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 x) -2))) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x -2)) (cbrt.f64 (/.f64 1 x)) (/.f64 -1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 -1 x) (/.f64 -1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1 x)) (neg.f64 (cbrt.f64 (pow.f64 x -2))) (/.f64 -1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 x) (/.f64 -1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 -1 (tan.f64 x)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 x) 1 (/.f64 -1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (tan.f64 x)) 0) (/.f64 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (tan.f64 x)) (*.f64 (/.f64 1 (tan.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 1 (tan.f64 x))) (/.f64 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (tan.f64 x)) (*.f64 0 (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (tan.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (tan.f64 x) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (tan.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (tan.f64 x) -2)) (pow.f64 (tan.f64 x) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (tan.f64 x))) (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 x) -2))) (cbrt.f64 (/.f64 -1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (tan.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (sin.f64 x)) (/.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (tan.f64 x) (neg.f64 1/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (tan.f64 x))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (tan.f64 x))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (tan.f64 x) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (tan.f64 x))) -1) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (tan.f64 x) -2)) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (tan.f64 x) -2)) -1) (cbrt.f64 (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 x) -2)))) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 x) -2))) (cbrt.f64 (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1 (tan.f64 x))) (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (tan.f64 x)) (tan.f64 x)) (neg.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (neg.f64 (tan.f64 x))) (neg.f64 (tan.f64 x))) (pow.f64 (tan.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) (neg.f64 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) (neg.f64 1/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) (neg.f64 1/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 3) (neg.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 x) -3))))))"]],"rules":[["egg-rr",39],["egg-rr",84]],"time":28.447998046875,"type":"rewrite"},{"count":[[147,142]],"inputs":[["(*.f64 1/3 x)","(+.f64 (*.f64 1/3 x) (*.f64 1/45 (pow.f64 x 3)))","(+.f64 (*.f64 1/3 x) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (*.f64 1/45 (pow.f64 x 3))))","(+.f64 (*.f64 1/3 x) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x)))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x)))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(/.f64 1 x)","(+.f64 (*.f64 -1/3 x) (/.f64 1 x))","(+.f64 (*.f64 -1/45 (pow.f64 x 3)) (+.f64 (*.f64 -1/3 x) (/.f64 1 x)))","(+.f64 (*.f64 -2/945 (pow.f64 x 5)) (+.f64 (*.f64 -1/45 (pow.f64 x 3)) (+.f64 (*.f64 -1/3 x) (/.f64 1 x))))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/3 x)","(+.f64 (*.f64 1/3 x) (*.f64 1/45 (pow.f64 x 3)))","(fma.f64 (pow.f64 x 3) 1/45 (*.f64 1/3 x))","(+.f64 (*.f64 1/3 x) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (*.f64 1/45 (pow.f64 x 3))))","(fma.f64 x 1/3 (fma.f64 2/945 (pow.f64 x 5) (*.f64 1/45 (pow.f64 x 3))))","(+.f64 (*.f64 1/3 x) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(fma.f64 x 1/3 (fma.f64 2/945 (pow.f64 x 5) (fma.f64 (pow.f64 x 7) 1/4725 (*.f64 1/45 (pow.f64 x 3)))))","(*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x)))","(neg.f64 (/.f64 (cos.f64 x) (sin.f64 x)))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(-.f64 (/.f64 1 x) (/.f64 (cos.f64 x) (sin.f64 x)))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(-.f64 (/.f64 1 x) (/.f64 (cos.f64 x) (sin.f64 x)))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(-.f64 (/.f64 1 x) (/.f64 (cos.f64 x) (sin.f64 x)))","(*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x)))","(neg.f64 (/.f64 (cos.f64 x) (sin.f64 x)))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(-.f64 (/.f64 1 x) (/.f64 (cos.f64 x) (sin.f64 x)))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(-.f64 (/.f64 1 x) (/.f64 (cos.f64 x) (sin.f64 x)))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(-.f64 (/.f64 1 x) (/.f64 (cos.f64 x) (sin.f64 x)))","(/.f64 1 x)","(+.f64 (*.f64 -1/3 x) (/.f64 1 x))","(fma.f64 -1/3 x (/.f64 1 x))","(+.f64 (*.f64 -1/45 (pow.f64 x 3)) (+.f64 (*.f64 -1/3 x) (/.f64 1 x)))","(fma.f64 -1/45 (pow.f64 x 3) (fma.f64 -1/3 x (/.f64 1 x)))","(+.f64 (*.f64 -2/945 (pow.f64 x 5)) (+.f64 (*.f64 -1/45 (pow.f64 x 3)) (+.f64 (*.f64 -1/3 x) (/.f64 1 x))))","(fma.f64 -2/945 (pow.f64 x 5) (fma.f64 -1/45 (pow.f64 x 3) (fma.f64 -1/3 x (/.f64 1 x))))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))"]],"time":106.633056640625,"type":"simplify"},{"compiler":[[1916,1107]],"time":23.746826171875,"type":"eval"},{"alts":[["(+.f64 (*.f64 1/3 x) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","next",0.359375]],"compiler":[[22,18],[22,18]],"count":[[143,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[142,1],"picked":[1,0]}],"min-error":[0.359375],"time":10.701171875,"type":"prune"},{"compiler":[[85,68]],"locations":[["(*.f64 1/4725 (pow.f64 x 7))",0.05078125,true],["(*.f64 1/45 (pow.f64 x 3))",0.09765625,true],["(*.f64 2/945 (pow.f64 x 5))",0.11328125,true],["(*.f64 1/3 x)",0.359375,true]],"time":20.22998046875,"type":"localize"},{"count":[[4,0]],"series":[["(*.f64 1/4725 (pow.f64 x 7))","x","-inf",0.3330078125],["(*.f64 1/4725 (pow.f64 x 7))","x","inf",0.342041015625],["(*.f64 1/4725 (pow.f64 x 7))","x","0",0.490966796875],["(*.f64 1/45 (pow.f64 x 3))","x","-inf",0.340087890625],["(*.f64 1/45 (pow.f64 x 3))","x","inf",0.336181640625],["(*.f64 1/45 (pow.f64 x 3))","x","0",0.378173828125],["(*.f64 2/945 (pow.f64 x 5))","x","-inf",0.321044921875],["(*.f64 2/945 (pow.f64 x 5))","x","inf",0.361083984375],["(*.f64 2/945 (pow.f64 x 5))","x","0",0.4990234375],["(*.f64 1/3 x)","x","-inf",0.715087890625],["(*.f64 1/3 x)","x","inf",0.449951171875],["(*.f64 1/3 x)","x","0",0.2978515625]],"time":4.98583984375,"type":"series"},{"count":[[4,111]],"inputs":[["(*.f64 1/3 x)","(*.f64 2/945 (pow.f64 x 5))","(*.f64 1/45 (pow.f64 x 3))","(*.f64 1/4725 (pow.f64 x 7))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 x) (*.f64 (*.f64 1/3 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/3 x) 0) (*.f64 1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 x) (*.f64 0 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 1/3 x)) (*.f64 1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x x) 1/27)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 1/9) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/3 x)) (cbrt.f64 (*.f64 1/9 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/9 (*.f64 x x))) (cbrt.f64 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 1/3)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/27 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 1/3)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (*.f64 (sqrt.f64 1/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/3 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/3 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/3 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/3 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 1/3 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 1/3 x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/945 (pow.f64 x 5)) (*.f64 (*.f64 2/945 (pow.f64 x 5)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 2/945 (pow.f64 x 5)) 0) (*.f64 2/945 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/945 (pow.f64 x 5)) (*.f64 0 (*.f64 2/945 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 2/945 (pow.f64 x 5))) (*.f64 2/945 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 5)) (*.f64 (cbrt.f64 (pow.f64 x (*.f64 2 5))) 2/945))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2/945) (*.f64 (cbrt.f64 4/893025) (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2/945 (pow.f64 x 5))) (cbrt.f64 (*.f64 (pow.f64 x (*.f64 2 5)) 4/893025)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 x (*.f64 2 5)) 4/893025)) (cbrt.f64 (*.f64 2/945 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 2/945 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 2/945 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2/945 (pow.f64 x 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2/945) (*.f64 (sqrt.f64 2/945) (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2/945 (pow.f64 x 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 5) 2/945)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2/945 (cbrt.f64 (pow.f64 x 5))) (cbrt.f64 (pow.f64 x (*.f64 2 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 5) (cbrt.f64 2/945)) (cbrt.f64 4/893025))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 5) (sqrt.f64 2/945)) (sqrt.f64 2/945))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2/945 (pow.f64 x 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2/945 (pow.f64 x 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2/945 (pow.f64 x 5))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2/945 (pow.f64 x 5))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2/945 (pow.f64 x 5))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (pow.f64 x 5) 3) 8/843908625) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 2/945 (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 2/945 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 2/945 (pow.f64 x 5)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 x 5) 3) 8/843908625))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 (*.f64 1/45 (pow.f64 x 3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/45 (pow.f64 x 3)) 0) (*.f64 1/45 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 0 (*.f64 1/45 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 1/45 (pow.f64 x 3))) (*.f64 1/45 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/45) (*.f64 (cbrt.f64 1/2025) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/45 (*.f64 x x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 1/45 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (*.f64 x x) 1/45))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 1/45 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/45 (pow.f64 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (*.f64 x 1/45))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/45 x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/45) x) (*.f64 (cbrt.f64 1/2025) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/45 (pow.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 3) 1/45)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/2025) (*.f64 x x)) (*.f64 (cbrt.f64 1/45) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 1/45)) (sqrt.f64 1/45))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 3) (cbrt.f64 1/45)) (cbrt.f64 1/2025))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/45) (*.f64 (sqrt.f64 1/45) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/45 (pow.f64 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/45 (pow.f64 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 1/45) x) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 1/45) x) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 1/45) x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/91125 (pow.f64 (pow.f64 x 3) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 1/45 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 1/45 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 1/45 (pow.f64 x 3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 1/91125 (pow.f64 (pow.f64 x 3) 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/4725 (pow.f64 x 7)) (*.f64 (*.f64 1/4725 (pow.f64 x 7)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/4725 (pow.f64 x 7)) 0) (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/4725 (pow.f64 x 7)) (*.f64 0 (*.f64 1/4725 (pow.f64 x 7))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 1/4725 (pow.f64 x 7))) (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 7)) (*.f64 (cbrt.f64 (pow.f64 x (*.f64 2 7))) 1/4725))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/4725) (*.f64 (cbrt.f64 1/22325625) (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 1/4725 (pow.f64 x 7))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/4725 (pow.f64 x 7)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/4725 (pow.f64 x 7))) (cbrt.f64 (*.f64 1/22325625 (pow.f64 x (*.f64 2 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/4725) (*.f64 (sqrt.f64 1/4725) (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/4725 (pow.f64 x 7))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 7) 1/4725)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/22325625 (pow.f64 x (*.f64 2 7)))) (cbrt.f64 (*.f64 1/4725 (pow.f64 x 7))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/4725 (cbrt.f64 (pow.f64 x 7))) (cbrt.f64 (pow.f64 x (*.f64 2 7))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 7) (cbrt.f64 1/4725)) (cbrt.f64 1/22325625))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 7) (sqrt.f64 1/4725)) (sqrt.f64 1/4725))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/4725 (pow.f64 x 7)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/4725 (pow.f64 x 7)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/4725 (pow.f64 x 7))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/4725 (pow.f64 x 7))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/4725 (pow.f64 x 7))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/105488578125 (pow.f64 (pow.f64 x 7) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 1/4725 (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 1/4725 (pow.f64 x 7))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 1/4725 (pow.f64 x 7)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 1/105488578125 (pow.f64 (pow.f64 x 7) 3)))))))"]],"rules":[["egg-rr",27],["egg-rr",29],["egg-rr",27],["egg-rr",28]],"time":30.030029296875,"type":"rewrite"},{"count":[[111,111]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"time":26.833984375,"type":"simplify"},{"compiler":[[2790,2293]],"time":37.801025390625,"type":"eval"},{"alts":[["(+.f64 (/.f64 x 3) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","next",0]],"compiler":[[22,18],[22,18]],"count":[[112,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[111,1],"picked":[1,0]}],"min-error":[0],"time":23.242919921875,"type":"prune"},{"compiler":[[84,67]],"locations":[["(+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))",0.00390625,true],["(*.f64 1/4725 (pow.f64 x 7))",0.05078125,false],["(*.f64 1/45 (pow.f64 x 3))",0.09765625,false],["(*.f64 2/945 (pow.f64 x 5))",0.11328125,false]],"time":20.4150390625,"type":"localize"},{"count":[[1,6]],"series":[["(+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))","x","-inf",0.16796875],["(+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))","x","inf",0.423095703125],["(+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))","x","0",0.216064453125]],"time":0.85302734375,"type":"series"},{"count":[[1,50]],"inputs":[["(+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/4725 (pow.f64 x 7)) (*.f64 1/45 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7))) (*.f64 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7))) 0) (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7))) (*.f64 0 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7)))) (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 -1/45 (pow.f64 x 3)) (*.f64 -1/4725 (pow.f64 x 7))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -1/45 (pow.f64 x 3)) (*.f64 -1/4725 (pow.f64 x 7))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7)))) (cbrt.f64 (pow.f64 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 1/22325625 (pow.f64 x (*.f64 2 7)))) (-.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/2025)) (*.f64 x (cbrt.f64 (*.f64 1/45 (*.f64 1/4725 (pow.f64 x 7))))))) (+.f64 (cbrt.f64 (*.f64 1/4725 (pow.f64 x 7))) (*.f64 (cbrt.f64 1/45) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/2025)) (-.f64 (cbrt.f64 (*.f64 1/22325625 (pow.f64 x (*.f64 2 7)))) (*.f64 x (cbrt.f64 (*.f64 1/45 (*.f64 1/4725 (pow.f64 x 7))))))) (+.f64 (*.f64 (cbrt.f64 1/45) x) (cbrt.f64 (*.f64 1/4725 (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7))) 2)) (cbrt.f64 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 -1/45 (pow.f64 x 3)) (*.f64 -1/4725 (pow.f64 x 7))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 1/45) x) (*.f64 (*.f64 x x) (cbrt.f64 1/2025)) (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3) 1/45 (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/4725 (pow.f64 x 7) (*.f64 1/45 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/4725 (pow.f64 x 7))) (cbrt.f64 (*.f64 1/22325625 (pow.f64 x (*.f64 2 7)))) (*.f64 1/45 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 7) 1/4725 (*.f64 1/45 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/45) (*.f64 (pow.f64 x 3) (sqrt.f64 1/45)) (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/45 (*.f64 x x)) x (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 3) (cbrt.f64 1/45)) (cbrt.f64 1/2025) (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/45) (*.f64 (cbrt.f64 1/2025) (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 1/45 (*.f64 x x)) (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/45 x) (*.f64 x x) (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 1/45)) (sqrt.f64 1/45) (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (*.f64 1/45 x) (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/2025)) (*.f64 (cbrt.f64 1/45) x) (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 -1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/4725) (*.f64 (cbrt.f64 1/22325625) (pow.f64 x 7)) (*.f64 1/45 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 7) (sqrt.f64 1/4725)) (sqrt.f64 1/4725) (*.f64 1/45 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/22325625 (pow.f64 x (*.f64 2 7)))) (cbrt.f64 (*.f64 1/4725 (pow.f64 x 7))) (*.f64 1/45 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 7) (cbrt.f64 1/4725)) (cbrt.f64 1/22325625) (*.f64 1/45 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 7)) (*.f64 (cbrt.f64 (pow.f64 x (*.f64 2 7))) 1/4725) (*.f64 1/45 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/4725 (cbrt.f64 (pow.f64 x 7))) (cbrt.f64 (pow.f64 x (*.f64 2 7))) (*.f64 1/45 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/4725) (*.f64 (pow.f64 x 7) (sqrt.f64 1/4725)) (*.f64 1/45 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 -1/4725 (pow.f64 x 7)) (*.f64 1/45 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 1/4725 (pow.f64 x 7)) (*.f64 1/45 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/45 (pow.f64 x 3)) 1 (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/4725 (pow.f64 x 7)) 1 (*.f64 1/45 (pow.f64 x 3)))))))"]],"rules":[["egg-rr",50]],"time":21.114013671875,"type":"rewrite"},{"count":[[56,52]],"inputs":[["(*.f64 1/45 (pow.f64 x 3))","(+.f64 (*.f64 1/4725 (pow.f64 x 7)) (*.f64 1/45 (pow.f64 x 3)))","(+.f64 (*.f64 1/4725 (pow.f64 x 7)) (*.f64 1/45 (pow.f64 x 3)))","(+.f64 (*.f64 1/4725 (pow.f64 x 7)) (*.f64 1/45 (pow.f64 x 3)))","(*.f64 1/4725 (pow.f64 x 7))","(*.f64 1/4725 (pow.f64 x 7))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/45 (pow.f64 x 3))","(+.f64 (*.f64 1/4725 (pow.f64 x 7)) (*.f64 1/45 (pow.f64 x 3)))","(fma.f64 1/4725 (pow.f64 x 7) (*.f64 1/45 (pow.f64 x 3)))","(+.f64 (*.f64 1/4725 (pow.f64 x 7)) (*.f64 1/45 (pow.f64 x 3)))","(fma.f64 1/4725 (pow.f64 x 7) (*.f64 1/45 (pow.f64 x 3)))","(+.f64 (*.f64 1/4725 (pow.f64 x 7)) (*.f64 1/45 (pow.f64 x 3)))","(fma.f64 1/4725 (pow.f64 x 7) (*.f64 1/45 (pow.f64 x 3)))","(*.f64 1/4725 (pow.f64 x 7))","(*.f64 1/4725 (pow.f64 x 7))"]],"time":31.462158203125,"type":"simplify"},{"compiler":[[3400,2779]],"time":44.928955078125,"type":"eval"},{"alts":[["(+.f64 (/.f64 x 3) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","done",0]],"compiler":[[22,18]],"count":[[136,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[135,0],"picked":[1,1]}],"min-error":[0],"time":43.875,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))",0,1]],"compiler":[[2,1],[9,7],[51,41]],"count":[[3,1]],"inputs":[["(+.f64 (/.f64 x 3) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(+.f64 (*.f64 1/3 x) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))"]],"link":["."],"name":["invcot (example 3.9)"],"oracle":[59.96451796393683],"outputs":[["(+.f64 (/.f64 x 3) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))"]],"time":5.511962890625,"times":[["x",2.533935546875],["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))",1.85107421875]],"type":"regimes"},{"compiler":[[22,18]],"inputs":[["(+.f64 (/.f64 x 3) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (/.f64 x 3) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(fma.f64 x 1/3 (fma.f64 (pow.f64 x 5) 2/945 (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7)))))"]],"stop":[["done",1]],"time":23.947998046875,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[22,18]],"remove-preprocessing":[[]],"time":12.27099609375,"type":"end"}]
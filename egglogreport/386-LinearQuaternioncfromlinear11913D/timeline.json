[{"compiler":[[19,10]],"method":["search"],"sampling":[[12,0.397854136256683,0.600681735132639,0.0014641286106780171],[11,0.3276445827996213,0.6708912885897007,0.0014641286106780171],[10,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[9,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":117.434814453125,"type":"analyze"},{"outcomes":[["body",512,"invalid",15.6357421875,196],["body",256,"invalid",82.452392578125,1858],["body",1024,"invalid",20.541748046875,177],["body",512,"valid",42.51123046875,535],["body",1024,"valid",104.474853515625,908],["body",2048,"valid",74.94970703125,499],["body",256,"valid",282.559326171875,6314]],"time":634.216064453125,"type":"sample"},{"compiler":[[18,9]],"inputs":[["0","1","2"],["(-.f64 (+.f64 (-.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y y)) (*.f64 y z))","(-.f64 (+.f64 (-.f64 (*.f64 y x) (*.f64 x x)) (*.f64 x x)) (*.f64 x z))","(-.f64 (+.f64 (-.f64 (*.f64 z y) (*.f64 y y)) (*.f64 y y)) (*.f64 y x))","(-.f64 (+.f64 (-.f64 (*.f64 x z) (*.f64 z z)) (*.f64 z z)) (*.f64 z y))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(-.f64 (+.f64 (-.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y y)) (*.f64 y z))","(*.f64 y (-.f64 x z))","(-.f64 (+.f64 (-.f64 (*.f64 y x) (*.f64 x x)) (*.f64 x x)) (*.f64 x z))","(neg.f64 (*.f64 x (-.f64 z y)))","(-.f64 (+.f64 (-.f64 (*.f64 z y) (*.f64 y y)) (*.f64 y y)) (*.f64 y x))","(*.f64 y (-.f64 z x))","(-.f64 (+.f64 (-.f64 (*.f64 x z) (*.f64 z z)) (*.f64 z z)) (*.f64 z y))","(neg.f64 (*.f64 z (-.f64 y x)))"]],"symmetry":[[]],"time":76.722900390625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (+.f64 (-.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y y)) (*.f64 y z))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (+.f64 (-.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y y)) (*.f64 y z))","(neg.f64 (*.f64 y (-.f64 z x)))"]],"time":20.377197265625,"type":"simplify"},{"compiler":[[24,12]],"time":0.337890625,"type":"eval"},{"alts":[["(neg.f64 (*.f64 y (-.f64 z x)))","next",0.00390625]],"compiler":[[9,6],[9,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.780029296875,"type":"prune"},{"compiler":[[20,6]],"locations":[["(*.f64 y (-.f64 z x))",0.00390625,true]],"time":3.89208984375,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 y (-.f64 z x))","x","-inf",0.260986328125],["(*.f64 y (-.f64 z x))","x","inf",0.299072265625],["(*.f64 y (-.f64 z x))","x","0",0.254150390625],["(*.f64 y (-.f64 z x))","z","-inf",0.4599609375],["(*.f64 y (-.f64 z x))","z","inf",0.343017578125],["(*.f64 y (-.f64 z x))","z","0",0.25390625],["(*.f64 y (-.f64 z x))","y","-inf",0.35693359375],["(*.f64 y (-.f64 z x))","y","inf",0.35498046875],["(*.f64 y (-.f64 z x))","y","0",0.449951171875]],"time":3.1318359375,"type":"series"},{"count":[[1,52]],"inputs":[["(*.f64 y (-.f64 z x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y z) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x y)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (*.f64 y z))) (neg.f64 (neg.f64 (neg.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 y z) -1)) (neg.f64 (*.f64 (neg.f64 (*.f64 x y)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x y)) (neg.f64 (*.f64 (neg.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x y)) (neg.f64 (*.f64 y (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 z x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (neg.f64 (*.f64 y z))) (neg.f64 (neg.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (*.f64 (*.f64 y z) -1)) (*.f64 (neg.f64 (*.f64 x y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 x y)) (*.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 x y)) (*.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y z) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (*.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 (-.f64 x z) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (*.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (*.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (-.f64 z x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) (pow.f64 (*.f64 y (-.f64 z x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2/3) (cbrt.f64 (*.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 z x) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (-.f64 z x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 x z) y)) (neg.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2/3) (*.f64 0 (cbrt.f64 (*.f64 (-.f64 x z) y))))) (cbrt.f64 (*.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (-.f64 z x))) (pow.f64 (-.f64 z x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 z x) 2/3) (*.f64 y (cbrt.f64 (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 z x)) (*.f64 (pow.f64 (-.f64 z x) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 z x) 2/3) y) (cbrt.f64 (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x z) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 x z) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (-.f64 z x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x z) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 3 (*.f64 (-.f64 x z) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 2 (*.f64 (-.f64 x z) y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (-.f64 z x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (-.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (-.f64 x z) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (-.f64 z x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (neg.f64 (*.f64 x y)))))))"]],"rules":[["egg-rr",52]],"time":38.381103515625,"type":"rewrite"},{"count":[[76,56]],"inputs":[["(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))"]],"time":77.22705078125,"type":"simplify"},{"compiler":[[568,230]],"time":6.5869140625,"type":"eval"},{"alts":[["(neg.f64 (-.f64 (*.f64 y z) (*.f64 y x)))","next",0.0078125],["(neg.f64 (*.f64 y (-.f64 z x)))","done",0.00390625]],"compiler":[[11,7],[9,6],[11,7]],"count":[[57,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[56,1],"picked":[1,1]}],"min-error":[0],"time":10.4560546875,"type":"prune"},{"compiler":[[27,7]],"locations":[["(-.f64 (*.f64 y z) (*.f64 y x))",0.0078125,true]],"time":4.73388671875,"type":"localize"},{"count":[[1,36]],"series":[["(-.f64 (*.f64 y z) (*.f64 y x))","x","-inf",0.2080078125],["(-.f64 (*.f64 y z) (*.f64 y x))","x","inf",0.23486328125],["(-.f64 (*.f64 y z) (*.f64 y x))","x","0",0.237060546875],["(-.f64 (*.f64 y z) (*.f64 y x))","z","-inf",0.232177734375],["(-.f64 (*.f64 y z) (*.f64 y x))","z","inf",0.2509765625],["(-.f64 (*.f64 y z) (*.f64 y x))","z","0",0.29296875],["(-.f64 (*.f64 y z) (*.f64 y x))","y","-inf",0.39208984375],["(-.f64 (*.f64 y z) (*.f64 y x))","y","inf",0.468017578125],["(-.f64 (*.f64 y z) (*.f64 y x))","y","0",0.818115234375]],"time":3.238037109375,"type":"series"},{"count":[[1,60]],"inputs":[["(-.f64 (*.f64 y z) (*.f64 y x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (-.f64 z x)) 0) (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 z x)) (*.f64 (*.f64 y (-.f64 z x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y (-.f64 z x))) (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 z x)) (*.f64 0 (*.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y z) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 y x)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 y x)) (neg.f64 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y z) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 y z) 0) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (-.f64 z x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (-.f64 (*.f64 (pow.f64 y 2/3) z) (*.f64 (pow.f64 y 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 y (-.f64 x z)))) (pow.f64 (*.f64 y (-.f64 z x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 y z) 2/3) (+.f64 (pow.f64 (*.f64 y x) 2/3) (cbrt.f64 (*.f64 (*.f64 (*.f64 y z) x) y)))) (-.f64 (cbrt.f64 (*.f64 y z)) (cbrt.f64 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) (pow.f64 (*.f64 y (-.f64 z x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2/3) (cbrt.f64 (*.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (-.f64 (*.f64 z (cbrt.f64 y)) (*.f64 x (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) (neg.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 x z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (*.f64 y z)) (neg.f64 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (-.f64 z x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (-.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 y (-.f64 x z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (-.f64 z x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y z)) (pow.f64 (*.f64 y z) 2/3) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 y x))) (pow.f64 (*.f64 y x) 2/3) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 y) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 y) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y x)) (neg.f64 (pow.f64 (*.f64 y x) 2/3)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) y (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) x (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (neg.f64 x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) z) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 y z) 2/3) (cbrt.f64 (*.f64 y z)) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 z)) (pow.f64 z 2/3) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 y)) (pow.f64 y 2/3) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) y) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 y z)) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y z) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 y x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 y x)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) 1 (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 y (-.f64 z x)))))))"]],"rules":[["egg-rr",60]],"time":21.094970703125,"type":"rewrite"},{"count":[[96,65]],"inputs":[["(*.f64 y (-.f64 z x))","(*.f64 y (-.f64 z x))","(*.f64 y (-.f64 z x))","(*.f64 y (-.f64 z x))","(*.f64 y (-.f64 z x))","(*.f64 y (-.f64 z x))","(*.f64 y (-.f64 z x))","(*.f64 y (-.f64 z x))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 z) (*.f64 -1 x))))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 z) (*.f64 -1 x))))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 z) (*.f64 -1 x))))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 z) (*.f64 -1 x))))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (-.f64 z x))","(*.f64 y (-.f64 z x))","(*.f64 y (-.f64 z x))","(*.f64 y (-.f64 z x))","(*.f64 y (-.f64 z x))","(*.f64 y (-.f64 z x))","(*.f64 y (-.f64 z x))","(*.f64 y (-.f64 z x))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 z) (*.f64 -1 x))))","(*.f64 y (-.f64 z x))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 z) (*.f64 -1 x))))","(*.f64 y (-.f64 z x))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 z) (*.f64 -1 x))))","(*.f64 y (-.f64 z x))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 z) (*.f64 -1 x))))","(*.f64 y (-.f64 z x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))"]],"time":112.132080078125,"type":"simplify"},{"compiler":[[693,261]],"time":7.81298828125,"type":"eval"},{"alts":[["(neg.f64 (-.f64 (*.f64 y z) (*.f64 y x)))","done",0.0078125],["(neg.f64 (*.f64 y (-.f64 z x)))","done",0.00390625]],"compiler":[[11,7],[9,6]],"count":[[67,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[65,0],"picked":[1,1]}],"min-error":[0],"time":12.080078125,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["z",0.00390625,1],["(-.f64 (+.f64 (-.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y y)) (*.f64 y z))",0.00390625,1]],"compiler":[[4,3],[4,3],[4,3],[18,9],[32,15]],"count":[[3,1]],"inputs":[["(neg.f64 (-.f64 (*.f64 y z) (*.f64 y x)))","(neg.f64 (*.f64 y (-.f64 z x)))","(-.f64 (+.f64 (-.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y y)) (*.f64 y z))"]],"link":["."],"name":["Linear.Quaternion:$c/ from linear-1.19.1.3, D"],"oracle":[13.01656383987639],"outputs":[["(neg.f64 (*.f64 y (-.f64 z x)))"]],"time":11.77880859375,"times":[["x",2.726806640625],["y",2.686767578125],["z",2.7119140625],["(-.f64 (+.f64 (-.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y y)) (*.f64 y z))",2.890869140625]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(neg.f64 (*.f64 y (-.f64 z x)))"]],"method":["egg-herbie"],"outputs":[["(neg.f64 (*.f64 y (-.f64 z x)))","(*.f64 y (-.f64 x z))"]],"stop":[["done",1]],"time":21.501220703125,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.44189453125,"type":"end"}]
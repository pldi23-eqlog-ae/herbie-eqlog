[{"compiler":[[15,11]],"method":["search"],"sampling":[[12,0.3061916636877413,0.6416373079825917,0.052171028329667024],[11,0.25353449859494503,0.6981950038230025,0.048270497582052485],[10,0.2106286603711851,0.745001372794377,0.044369966834437946],[9,0.0,0.998535871389322,0.0014641286106780171],[8,0.0,0.998535871389322,0.0014641286106780171],[7,0.0,0.998535871389322,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":123.64990234375,"type":"analyze"},{"outcomes":[["body",256,"invalid",72.7314453125,1670],["body",256,"valid",362.6435546875,8256]],"time":444.489013671875,"type":"sample"},{"compiler":[[14,10]],"inputs":[["0","1","2"],["(/.f64 (*.f64 4 (-.f64 (-.f64 x y) (*.f64 z 1/2))) z)","(/.f64 (*.f64 4 (-.f64 (-.f64 y x) (*.f64 z 1/2))) z)","(/.f64 (*.f64 4 (-.f64 (-.f64 z y) (*.f64 x 1/2))) x)","(/.f64 (*.f64 4 (-.f64 (-.f64 x z) (*.f64 y 1/2))) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(/.f64 (*.f64 4 (-.f64 (-.f64 x y) (*.f64 z 1/2))) z)","(/.f64 (*.f64 -4 (fma.f64 z 1/2 (-.f64 y x))) z)","(/.f64 (*.f64 4 (-.f64 (-.f64 y x) (*.f64 z 1/2))) z)","(/.f64 (*.f64 (fma.f64 z 1/2 (-.f64 x y)) -4) z)","(/.f64 (*.f64 4 (-.f64 (-.f64 z y) (*.f64 x 1/2))) x)","(/.f64 (*.f64 (fma.f64 1/2 x (-.f64 y z)) -4) x)","(/.f64 (*.f64 4 (-.f64 (-.f64 x z) (*.f64 y 1/2))) y)","(/.f64 (*.f64 (fma.f64 1/2 y (-.f64 z x)) -4) y)"]],"symmetry":[[]],"time":74.81591796875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (*.f64 4 (-.f64 (-.f64 x y) (*.f64 z 1/2))) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 4 (-.f64 (-.f64 x y) (*.f64 z 1/2))) z)","(*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))"]],"time":19.671142578125,"type":"simplify"},{"compiler":[[24,15]],"time":0.409912109375,"type":"eval"},{"alts":[["(*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))","next",0.2578125],["(/.f64 (*.f64 4 (-.f64 (-.f64 x y) (*.f64 z 1/2))) z)","fresh",0.52734375]],"compiler":[[13,9],[14,10],[13,9],[14,10]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.03125],"time":2.529052734375,"type":"prune"},{"compiler":[[30,15]],"locations":[["(*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))",0.2578125,true]],"time":6.801025390625,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))","y","-inf",0.3720703125],["(*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))","y","inf",0.44482421875],["(*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))","y","0",0.443115234375],["(*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))","x","-inf",0.657958984375],["(*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))","x","inf",0.4599609375],["(*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))","x","0",0.492919921875],["(*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))","z","-inf",0.6259765625],["(*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))","z","inf",0.555908203125],["(*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))","z","0",0.515869140625]],"time":4.698974609375,"type":"series"},{"count":[[1,74]],"inputs":[["(*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z)) (*.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z)) 0) (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 4 z) (fma.f64 z -1/2 x)) (*.f64 (/.f64 4 z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z)) (*.f64 0 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))) (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z -1/2 x) (/.f64 4 z)) (*.f64 (neg.f64 y) (/.f64 4 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (*.f64 -1/2 z) 4) z) (/.f64 (*.f64 (-.f64 x y) 4) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (*.f64 -1/2 z) 4) z) 1) (*.f64 (/.f64 (*.f64 (-.f64 x y) 4) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 x y) 4) z) (/.f64 (*.f64 (*.f64 -1/2 z) 4) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (fma.f64 z -1/2 x) (/.f64 z 4)) (/.f64 y (/.f64 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (*.f64 -1/2 z) 4) z) (/.f64 (-.f64 y x) (/.f64 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 4 z)) (*.f64 (cbrt.f64 (/.f64 16 (*.f64 z z))) (fma.f64 -1/2 z (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 -1/2 z (-.f64 x y)) (cbrt.f64 z)) (cbrt.f64 (/.f64 64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) -4) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 16 (*.f64 z z))) (fma.f64 -1/2 z (-.f64 x y))) (cbrt.f64 (/.f64 4 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 64 (*.f64 z z))) (/.f64 (fma.f64 -1/2 z (-.f64 x y)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) -4) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z)) 2)) (cbrt.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -1/2 z (-.f64 x y))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 -1/2 z (-.f64 x y)) 2)) (/.f64 4 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 4 z) (fma.f64 -1/2 z (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 4 z) (cbrt.f64 (fma.f64 -1/2 z (-.f64 x y)))) (cbrt.f64 (pow.f64 (fma.f64 -1/2 z (-.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) 4) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (cbrt.f64 (/.f64 4 z))) (cbrt.f64 (/.f64 16 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 4 (/.f64 (fma.f64 -1/2 z (-.f64 x y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 16 (*.f64 z z))) (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (cbrt.f64 (/.f64 4 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 -1/2 z (-.f64 x y)) 2)) (/.f64 4 z)) (cbrt.f64 (fma.f64 -1/2 z (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 -1/2 z (-.f64 x y)) 2)) (*.f64 (/.f64 4 z) (cbrt.f64 (fma.f64 -1/2 z (-.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 (fma.f64 -1/2 z (-.f64 x y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 -1/2 z (-.f64 x y)) z) 4)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) -4) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) 4) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) 4) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 -1/2 z (-.f64 x y))) (neg.f64 (/.f64 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) 4) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) -4) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) 4) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 z 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 -1/2 z (-.f64 x y)) (cbrt.f64 z)) 4) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z)) 2)) (cbrt.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) 4))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) 2) (*.f64 z 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (cbrt.f64 (/.f64 64 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) 4) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) 4) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) -4) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) 4)) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z)) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 64 z)) (fma.f64 -1/2 z (-.f64 x y))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (cbrt.f64 (/.f64 64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -4) (*.f64 (cbrt.f64 (/.f64 16 (*.f64 z z))) (fma.f64 -1/2 z (-.f64 x y)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 4) (*.f64 (cbrt.f64 (/.f64 16 (*.f64 z z))) (fma.f64 -1/2 z (-.f64 x y)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) 4) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) 4) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) 4) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) 4) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) -4) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) -4) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) 4) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -4 z) (fma.f64 -1/2 z (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) -4) z))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -4 (/.f64 (fma.f64 -1/2 z (-.f64 x y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 -4 z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) 4) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 4 z) (*.f64 -1/2 z) (/.f64 (*.f64 (-.f64 x y) 4) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/2 z) (/.f64 4 z) (/.f64 (*.f64 (-.f64 x y) 4) z))))))"]],"rules":[["egg-rr",74]],"time":22.742919921875,"type":"rewrite"},{"count":[[110,91]],"inputs":[["(*.f64 4 (/.f64 (-.f64 x y) z))","(-.f64 (*.f64 4 (/.f64 (-.f64 x y) z)) 2)","(-.f64 (*.f64 4 (/.f64 (-.f64 x y) z)) 2)","(-.f64 (*.f64 4 (/.f64 (-.f64 x y) z)) 2)","-2","(-.f64 (*.f64 4 (/.f64 (-.f64 x y) z)) 2)","(-.f64 (*.f64 4 (/.f64 (-.f64 x y) z)) 2)","(-.f64 (*.f64 4 (/.f64 (-.f64 x y) z)) 2)","-2","(-.f64 (*.f64 4 (/.f64 (-.f64 x y) z)) 2)","(-.f64 (*.f64 4 (/.f64 (-.f64 x y) z)) 2)","(-.f64 (*.f64 4 (/.f64 (-.f64 x y) z)) 2)","(*.f64 4 (/.f64 (-.f64 (*.f64 -1/2 z) y) z))","(+.f64 (*.f64 4 (/.f64 x z)) (*.f64 4 (/.f64 (-.f64 (*.f64 -1/2 z) y) z)))","(+.f64 (*.f64 4 (/.f64 x z)) (*.f64 4 (/.f64 (-.f64 (*.f64 -1/2 z) y) z)))","(+.f64 (*.f64 4 (/.f64 x z)) (*.f64 4 (/.f64 (-.f64 (*.f64 -1/2 z) y) z)))","(*.f64 4 (/.f64 x z))","(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","(*.f64 4 (/.f64 x z))","(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","(*.f64 4 (/.f64 (+.f64 (*.f64 -1/2 z) x) z))","(+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 (+.f64 (*.f64 -1/2 z) x) z)))","(+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 (+.f64 (*.f64 -1/2 z) x) z)))","(+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 (+.f64 (*.f64 -1/2 z) x) z)))","(*.f64 -4 (/.f64 y z))","(+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (-.f64 (/.f64 x z) 1/2)))","(+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (-.f64 (/.f64 x z) 1/2)))","(+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (-.f64 (/.f64 x z) 1/2)))","(*.f64 -4 (/.f64 y z))","(+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (-.f64 (/.f64 x z) 1/2)))","(+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (-.f64 (/.f64 x z) 1/2)))","(+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (-.f64 (/.f64 x z) 1/2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 4 (/.f64 (-.f64 x y) z))","(/.f64 (*.f64 4 (-.f64 x y)) z)","(-.f64 (*.f64 4 (/.f64 (-.f64 x y) z)) 2)","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(-.f64 (*.f64 4 (/.f64 (-.f64 x y) z)) 2)","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(-.f64 (*.f64 4 (/.f64 (-.f64 x y) z)) 2)","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","-2","(-.f64 (*.f64 4 (/.f64 (-.f64 x y) z)) 2)","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(-.f64 (*.f64 4 (/.f64 (-.f64 x y) z)) 2)","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(-.f64 (*.f64 4 (/.f64 (-.f64 x y) z)) 2)","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","-2","(-.f64 (*.f64 4 (/.f64 (-.f64 x y) z)) 2)","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(-.f64 (*.f64 4 (/.f64 (-.f64 x y) z)) 2)","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(-.f64 (*.f64 4 (/.f64 (-.f64 x y) z)) 2)","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(*.f64 4 (/.f64 (-.f64 (*.f64 -1/2 z) y) z))","(+.f64 -2 (/.f64 (*.f64 -4 y) z))","(+.f64 (*.f64 4 (/.f64 x z)) (*.f64 4 (/.f64 (-.f64 (*.f64 -1/2 z) y) z)))","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(+.f64 (*.f64 4 (/.f64 x z)) (*.f64 4 (/.f64 (-.f64 (*.f64 -1/2 z) y) z)))","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(+.f64 (*.f64 4 (/.f64 x z)) (*.f64 4 (/.f64 (-.f64 (*.f64 -1/2 z) y) z)))","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(*.f64 4 (/.f64 x z))","(/.f64 (*.f64 4 x) z)","(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(*.f64 4 (/.f64 x z))","(/.f64 (*.f64 4 x) z)","(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(*.f64 4 (/.f64 (+.f64 (*.f64 -1/2 z) x) z))","(+.f64 (/.f64 (*.f64 4 x) z) -2)","(+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 (+.f64 (*.f64 -1/2 z) x) z)))","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 (+.f64 (*.f64 -1/2 z) x) z)))","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 (+.f64 (*.f64 -1/2 z) x) z)))","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(*.f64 -4 (/.f64 y z))","(/.f64 (*.f64 -4 y) z)","(+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (-.f64 (/.f64 x z) 1/2)))","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (-.f64 (/.f64 x z) 1/2)))","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (-.f64 (/.f64 x z) 1/2)))","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(*.f64 -4 (/.f64 y z))","(/.f64 (*.f64 -4 y) z)","(+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (-.f64 (/.f64 x z) 1/2)))","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (-.f64 (/.f64 x z) 1/2)))","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)","(+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (-.f64 (/.f64 x z) 1/2)))","(fma.f64 4 (/.f64 (-.f64 x y) z) -2)"]],"time":140.864990234375,"type":"simplify"},{"compiler":[[1306,721]],"time":17.549072265625,"type":"eval"},{"alts":[["(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","next",0.0078125],["(/.f64 (*.f64 (/.f64 (fma.f64 -1/2 z (-.f64 x y)) (cbrt.f64 z)) 4) (cbrt.f64 (*.f64 z z)))","fresh",27.311217450153844],["(*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))","done",0.2578125]],"compiler":[[16,12],[19,13],[13,9],[16,12],[19,13]],"count":[[93,3]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[91,2],"picked":[1,1]}],"min-error":[0],"time":20.302001953125,"type":"prune"},{"compiler":[[45,23]],"locations":[["(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))",0.0078125,true],["(*.f64 4 (/.f64 x z))",0.01857377930532605,true]],"time":8.89892578125,"type":"localize"},{"count":[[2,27]],"series":[["(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","x","-inf",0.2099609375],["(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","x","inf",0.260009765625],["(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","x","0",0.36181640625],["(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","z","-inf",0.39501953125],["(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","z","inf",0.3291015625],["(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","z","0",0.35693359375],["(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","y","-inf",0.26611328125],["(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","y","inf",0.431884765625],["(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","y","0",0.4921875],["(*.f64 4 (/.f64 x z))","z","-inf",0.281982421875],["(*.f64 4 (/.f64 x z))","z","inf",1.10400390625],["(*.f64 4 (/.f64 x z))","z","0",0.44384765625],["(*.f64 4 (/.f64 x z))","x","-inf",0.35791015625],["(*.f64 4 (/.f64 x z))","x","inf",0.47802734375],["(*.f64 4 (/.f64 x z))","x","0",0.485107421875]],"time":6.451171875,"type":"series"},{"count":[[2,142]],"inputs":[["(*.f64 4 (/.f64 x z))","(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x 2) z) 1) (*.f64 (/.f64 (*.f64 x 2) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 4 x) z) 0) (/.f64 (*.f64 4 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 4 x) z) (*.f64 (/.f64 (*.f64 4 x) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (/.f64 (*.f64 x 2) z)) (*.f64 1 (/.f64 (*.f64 x 2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 4 x) z)) (/.f64 (*.f64 4 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 4 x) z) (*.f64 0 (/.f64 (*.f64 4 x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x z) 3) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x z) (*.f64 (/.f64 x z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (/.f64 x z)) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x z) (*.f64 3 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 4 x) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 4 x) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 4 x) z) 2)) (cbrt.f64 (/.f64 (*.f64 4 x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 4 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 4 x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 64 z)) (/.f64 x (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 4 (cbrt.f64 (/.f64 x z))) (cbrt.f64 (pow.f64 (/.f64 x z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 4 (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) 4)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 4) (*.f64 (cbrt.f64 16) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) (cbrt.f64 4)) (cbrt.f64 16))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x 2) z) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (/.f64 (*.f64 2 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 4 x) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 4 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 -4 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 4 x) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -4 x) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 4 x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 4 x) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 4 x) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -4 x) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 4 x) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 4 x) z) 2)) (cbrt.f64 (*.f64 4 x))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 4 (/.f64 x (cbrt.f64 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 4 x) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 64 z)) x) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 4 x)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 4 x) z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) 4)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) 4)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -4 x) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 4 x) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) 4) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 4 (/.f64 x (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 4 x) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 4 x) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -4 x) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 4 x) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 4 x) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 z 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (/.f64 (neg.f64 z) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 4 x) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 4 x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 4 x) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 4 x) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 4 x) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 4 x) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 -4 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 4 x) z) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y z) -4 -2) (/.f64 (*.f64 4 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 4 x) z) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)) 0) (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)) (*.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -2 (*.f64 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))) (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)) (*.f64 0 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (/.f64 4 z) -2) (/.f64 (*.f64 -4 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z) -2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 -4 y) z) (fma.f64 x (/.f64 4 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (/.f64 4 z) -2) 1) (/.f64 (*.f64 -4 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))) (cbrt.f64 (pow.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y z) -4 -2) 2)) (-.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 4 x) z) 2)) (cbrt.f64 (*.f64 (fma.f64 (/.f64 y z) -4 -2) (/.f64 (*.f64 4 x) z))))) (+.f64 (cbrt.f64 (fma.f64 (/.f64 y z) -4 -2)) (cbrt.f64 (/.f64 (*.f64 4 x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 4 x) z) 2)) (-.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y z) -4 -2) 2)) (cbrt.f64 (*.f64 (fma.f64 (/.f64 y z) -4 -2) (/.f64 (*.f64 4 x) z))))) (+.f64 (cbrt.f64 (/.f64 (*.f64 4 x) z)) (cbrt.f64 (fma.f64 (/.f64 y z) -4 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)) 2)) (cbrt.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 16) (+.f64 (*.f64 (+.f64 1/2 (/.f64 y z)) (cbrt.f64 -4)) (*.f64 (/.f64 x z) (cbrt.f64 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 16) (+.f64 (*.f64 (/.f64 x z) (cbrt.f64 4)) (*.f64 (+.f64 1/2 (/.f64 y z)) (cbrt.f64 -4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -8 (pow.f64 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z) 3)) (+.f64 4 (-.f64 (*.f64 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z) (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)) (*.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 -8 (pow.f64 (/.f64 (*.f64 -4 y) z) 3)) (cbrt.f64 (*.f64 z z))) (*.f64 (+.f64 4 (*.f64 (/.f64 (*.f64 -4 y) z) (-.f64 (/.f64 (*.f64 -4 y) z) -2))) (/.f64 (*.f64 4 x) (cbrt.f64 z)))) (*.f64 (+.f64 4 (*.f64 (/.f64 (*.f64 -4 y) z) (-.f64 (/.f64 (*.f64 -4 y) z) -2))) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 -8 (pow.f64 (/.f64 (*.f64 -4 y) z) 3)) z) (*.f64 (+.f64 4 (*.f64 (/.f64 (*.f64 -4 y) z) (-.f64 (/.f64 (*.f64 -4 y) z) -2))) (*.f64 4 x))) (*.f64 (+.f64 4 (*.f64 (/.f64 (*.f64 -4 y) z) (-.f64 (/.f64 (*.f64 -4 y) z) -2))) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 -8 (pow.f64 (/.f64 (*.f64 -4 y) z) 3)) (neg.f64 z)) (*.f64 (+.f64 4 (*.f64 (/.f64 (*.f64 -4 y) z) (-.f64 (/.f64 (*.f64 -4 y) z) -2))) (*.f64 -4 x))) (*.f64 (+.f64 4 (*.f64 (/.f64 (*.f64 -4 y) z) (-.f64 (/.f64 (*.f64 -4 y) z) -2))) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/8 (pow.f64 (/.f64 y z) 3)) -4) (cbrt.f64 (*.f64 z z))) (*.f64 (fma.f64 (/.f64 y z) (+.f64 (/.f64 y z) -1/2) 1/4) (/.f64 (*.f64 4 x) (cbrt.f64 z)))) (*.f64 (fma.f64 (/.f64 y z) (+.f64 (/.f64 y z) -1/2) 1/4) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/8 (pow.f64 (/.f64 y z) 3)) -4) z) (*.f64 (fma.f64 (/.f64 y z) (+.f64 (/.f64 y z) -1/2) 1/4) (*.f64 4 x))) (*.f64 (fma.f64 (/.f64 y z) (+.f64 (/.f64 y z) -1/2) 1/4) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/8 (pow.f64 (/.f64 y z) 3)) -4) (neg.f64 z)) (*.f64 (fma.f64 (/.f64 y z) (+.f64 (/.f64 y z) -1/2) 1/4) (*.f64 -4 x))) (*.f64 (fma.f64 (/.f64 y z) (+.f64 (/.f64 y z) -1/2) 1/4) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 -4 x) (+.f64 4 (*.f64 (/.f64 (*.f64 -4 y) z) (-.f64 (/.f64 (*.f64 -4 y) z) -2)))) (*.f64 (neg.f64 z) (+.f64 -8 (pow.f64 (/.f64 (*.f64 -4 y) z) 3)))) (*.f64 (neg.f64 z) (+.f64 4 (*.f64 (/.f64 (*.f64 -4 y) z) (-.f64 (/.f64 (*.f64 -4 y) z) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 4 x) (cbrt.f64 z)) (fma.f64 (/.f64 y z) (+.f64 (/.f64 y z) -1/2) 1/4)) (*.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (+.f64 1/8 (pow.f64 (/.f64 y z) 3)) -4))) (*.f64 (cbrt.f64 (*.f64 z z)) (fma.f64 (/.f64 y z) (+.f64 (/.f64 y z) -1/2) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 4 x) (cbrt.f64 z)) (+.f64 4 (*.f64 (/.f64 (*.f64 -4 y) z) (-.f64 (/.f64 (*.f64 -4 y) z) -2)))) (*.f64 (cbrt.f64 (*.f64 z z)) (+.f64 -8 (pow.f64 (/.f64 (*.f64 -4 y) z) 3)))) (*.f64 (cbrt.f64 (*.f64 z z)) (+.f64 4 (*.f64 (/.f64 (*.f64 -4 y) z) (-.f64 (/.f64 (*.f64 -4 y) z) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 4 x) (+.f64 4 (*.f64 (/.f64 (*.f64 -4 y) z) (-.f64 (/.f64 (*.f64 -4 y) z) -2)))) (*.f64 z (+.f64 -8 (pow.f64 (/.f64 (*.f64 -4 y) z) 3)))) (*.f64 z (+.f64 4 (*.f64 (/.f64 (*.f64 -4 y) z) (-.f64 (/.f64 (*.f64 -4 y) z) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 -4 x) (fma.f64 (/.f64 y z) (+.f64 (/.f64 y z) -1/2) 1/4)) (*.f64 (neg.f64 z) (*.f64 (+.f64 1/8 (pow.f64 (/.f64 y z) 3)) -4))) (*.f64 (neg.f64 z) (fma.f64 (/.f64 y z) (+.f64 (/.f64 y z) -1/2) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 4 x) (fma.f64 (/.f64 y z) (+.f64 (/.f64 y z) -1/2) 1/4)) (*.f64 z (*.f64 (+.f64 1/8 (pow.f64 (/.f64 y z) 3)) -4))) (*.f64 z (fma.f64 (/.f64 y z) (+.f64 (/.f64 y z) -1/2) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 4 x) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 4 x) z) 2)) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (/.f64 y z) -4 -2) (/.f64 (*.f64 4 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 4 x) z) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (/.f64 y z) -4 -2)) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y z) -4 -2) 2)) (/.f64 (*.f64 4 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -4 (+.f64 1/2 (/.f64 y z)) (/.f64 (*.f64 4 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1/2 (/.f64 y z)) -4 (/.f64 (*.f64 4 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 4 (/.f64 x z) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x z) 4 (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -4) (*.f64 (cbrt.f64 16) 1/2) (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -2) (cbrt.f64 4) (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 -4 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) -4) (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/2) (*.f64 (sqrt.f64 1/2) -4) (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -4 (sqrt.f64 1/2)) (sqrt.f64 1/2) (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (cbrt.f64 -4)) (cbrt.f64 16) (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -4 1/2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -4 (cbrt.f64 1/2)) (cbrt.f64 1/4) (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -2 1 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 64 z)) (/.f64 x (cbrt.f64 (*.f64 z z))) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 4 (cbrt.f64 (/.f64 x z))) (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 4 z) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x 2) z) 2 (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (/.f64 (*.f64 2 x) z) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 4 x) z) 2)) (cbrt.f64 (/.f64 (*.f64 4 x) z)) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 4 x) (/.f64 1 z) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 -4 x) z) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 x z) (cbrt.f64 4)) (cbrt.f64 16) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 4 x) z) 1 (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 4) (*.f64 (cbrt.f64 16) (/.f64 x z)) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) 4) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 1/2 (/.f64 y z))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1/2 (/.f64 y z)) 2)) -4) (/.f64 (*.f64 4 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y z) -4 -2) 2)) (cbrt.f64 (fma.f64 (/.f64 y z) -4 -2)) (/.f64 (*.f64 4 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 4 (+.f64 1/2 (/.f64 y z))) (/.f64 (*.f64 4 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -4) (*.f64 (cbrt.f64 16) (+.f64 1/2 (/.f64 y z))) (/.f64 (*.f64 4 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 1/2 (/.f64 y z)) (cbrt.f64 -4)) (cbrt.f64 16) (/.f64 (*.f64 4 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (/.f64 y z) -4 -2) 1 (/.f64 (*.f64 4 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -4 (cbrt.f64 (+.f64 1/2 (/.f64 y z)))) (cbrt.f64 (pow.f64 (+.f64 1/2 (/.f64 y z)) 2)) (/.f64 (*.f64 4 x) z))))))"]],"rules":[["egg-rr",83],["egg-rr",59]],"time":33.830810546875,"type":"rewrite"},{"count":[[169,154]],"inputs":[["(-.f64 (*.f64 4 (/.f64 x z)) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(*.f64 -4 (/.f64 y z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(*.f64 -4 (/.f64 y z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","-2","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","-2","(-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 y) (*.f64 -4 x)) z)) 2)","(-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 y) (*.f64 -4 x)) z)) 2)","(-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 y) (*.f64 -4 x)) z)) 2)","(*.f64 -4 (+.f64 1/2 (/.f64 y z)))","(*.f64 4 (/.f64 x z))","(*.f64 4 (/.f64 x z))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 4 (/.f64 x z)) 2)","(fma.f64 4 (/.f64 x z) -2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(*.f64 -4 (/.f64 y z))","(/.f64 (*.f64 -4 y) z)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(*.f64 -4 (/.f64 y z))","(/.f64 (*.f64 -4 y) z)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)","(/.f64 (fma.f64 -4 y (*.f64 4 x)) z)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","-2","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","-2","(-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 y) (*.f64 -4 x)) z)) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 y) (*.f64 -4 x)) z)) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 y) (*.f64 -4 x)) z)) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(*.f64 -4 (+.f64 1/2 (/.f64 y z)))","(+.f64 -2 (/.f64 (*.f64 -4 y) z))","(*.f64 4 (/.f64 x z))","(/.f64 (*.f64 4 x) z)","(*.f64 4 (/.f64 x z))","(/.f64 (*.f64 4 x) z)"]],"time":107.427978515625,"type":"simplify"},{"compiler":[[2926,1882]],"time":34.2021484375,"type":"eval"},{"alts":[["(*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))","done",0.2578125],["(fma.f64 x (/.f64 4 z) (fma.f64 (/.f64 y z) -4 -2))","next",0.0703125],["(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","done",0.0078125]],"compiler":[[13,9],[14,10],[16,12],[14,10]],"count":[[157,3]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[154,1],"picked":[1,1]}],"min-error":[0],"time":47.462890625,"type":"prune"},{"compiler":[[32,18]],"locations":[["(fma.f64 x (/.f64 4 z) (fma.f64 (/.f64 y z) -4 -2))",0.0703125,true]],"time":7.3720703125,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 x (/.f64 4 z) (fma.f64 (/.f64 y z) -4 -2))","y","-inf",0.34716796875],["(fma.f64 x (/.f64 4 z) (fma.f64 (/.f64 y z) -4 -2))","y","inf",0.239990234375],["(fma.f64 x (/.f64 4 z) (fma.f64 (/.f64 y z) -4 -2))","y","0",0.322998046875],["(fma.f64 x (/.f64 4 z) (fma.f64 (/.f64 y z) -4 -2))","z","-inf",0.39501953125],["(fma.f64 x (/.f64 4 z) (fma.f64 (/.f64 y z) -4 -2))","z","inf",0.364990234375],["(fma.f64 x (/.f64 4 z) (fma.f64 (/.f64 y z) -4 -2))","z","0",0.40185546875],["(fma.f64 x (/.f64 4 z) (fma.f64 (/.f64 y z) -4 -2))","x","-inf",0.316162109375],["(fma.f64 x (/.f64 4 z) (fma.f64 (/.f64 y z) -4 -2))","x","inf",0.22216796875],["(fma.f64 x (/.f64 4 z) (fma.f64 (/.f64 y z) -4 -2))","x","0",0.501953125]],"time":3.23388671875,"type":"series"},{"count":[[1,44]],"inputs":[["(fma.f64 x (/.f64 4 z) (fma.f64 (/.f64 y z) -4 -2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2) 0) (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2) (*.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x 4) z) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2)) (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2) (*.f64 0 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y z) -4 -2) (/.f64 (*.f64 x 4) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -2 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (*.f64 x 4) z) -2) (/.f64 (*.f64 y -4) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y -4) z) (+.f64 -2 (/.f64 (*.f64 x 4) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) 1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2)) (cbrt.f64 (pow.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2) 2)) (cbrt.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) 3) -8) (+.f64 (*.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z)) (-.f64 4 (*.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 x 4) (-.f64 (+.f64 (pow.f64 (/.f64 (*.f64 y -4) z) 2) 4) (/.f64 (*.f64 (*.f64 y -4) -2) z))) (*.f64 z (+.f64 (pow.f64 (/.f64 (*.f64 y -4) z) 3) -8))) (*.f64 z (-.f64 (+.f64 (pow.f64 (/.f64 (*.f64 y -4) z) 2) 4) (/.f64 (*.f64 (*.f64 y -4) -2) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 x -4) (-.f64 (+.f64 (pow.f64 (/.f64 (*.f64 y -4) z) 2) 4) (/.f64 (*.f64 (*.f64 y -4) -2) z))) (*.f64 (neg.f64 z) (+.f64 (pow.f64 (/.f64 (*.f64 y -4) z) 3) -8))) (*.f64 (neg.f64 z) (-.f64 (+.f64 (pow.f64 (/.f64 (*.f64 y -4) z) 2) 4) (/.f64 (*.f64 (*.f64 y -4) -2) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (pow.f64 (/.f64 (*.f64 y -4) z) 3) -8) (neg.f64 z)) (*.f64 (-.f64 (+.f64 (pow.f64 (/.f64 (*.f64 y -4) z) 2) 4) (/.f64 (*.f64 (*.f64 y -4) -2) z)) (*.f64 x -4))) (*.f64 (-.f64 (+.f64 (pow.f64 (/.f64 (*.f64 y -4) z) 2) 4) (/.f64 (*.f64 (*.f64 y -4) -2) z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (pow.f64 (/.f64 (*.f64 y -4) z) 3) -8) z) (*.f64 (-.f64 (+.f64 (pow.f64 (/.f64 (*.f64 y -4) z) 2) 4) (/.f64 (*.f64 (*.f64 y -4) -2) z)) (*.f64 x 4))) (*.f64 (-.f64 (+.f64 (pow.f64 (/.f64 (*.f64 y -4) z) 2) 4) (/.f64 (*.f64 (*.f64 y -4) -2) z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 (+.f64 (*.f64 x 4) (*.f64 y -4)) z) -2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 4 z) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 (/.f64 y z) -4 -2)) (/.f64 (*.f64 x 4) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (/.f64 y z) -4 -2)) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y z) -4 -2) 2)) (/.f64 (*.f64 x 4) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y z) -4 -2) 2)) (cbrt.f64 (fma.f64 (/.f64 y z) -4 -2)) (/.f64 (*.f64 x 4) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 4 z) x (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 4 z)) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 4) (/.f64 1 z) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 x 4) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x 4) z) 2)) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (/.f64 4 z))) (cbrt.f64 (/.f64 16 (*.f64 z z))) (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (/.f64 y z) -4 -2) 1 (/.f64 (*.f64 x 4) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (/.f64 y z) -4 -2) (/.f64 (*.f64 x 4) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x 4) z) 1 (fma.f64 (/.f64 y z) -4 -2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 x 4) z) (fma.f64 (/.f64 y z) -4 -2))))))"]],"rules":[["egg-rr",44]],"time":21.444091796875,"type":"rewrite"},{"count":[[80,58]],"inputs":[["(-.f64 (*.f64 -4 (/.f64 y z)) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(*.f64 4 (/.f64 x z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(*.f64 4 (/.f64 x z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","-2","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","-2","(-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 y) (*.f64 -4 x)) z)) 2)","(-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 y) (*.f64 -4 x)) z)) 2)","(-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 y) (*.f64 -4 x)) z)) 2)","(-.f64 (*.f64 4 (/.f64 x z)) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(*.f64 -4 (/.f64 y z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(*.f64 -4 (/.f64 y z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 -4 (/.f64 y z)) 2)","(fma.f64 -4 (/.f64 y z) -2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(*.f64 4 (/.f64 x z))","(/.f64 (*.f64 4 x) z)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(*.f64 4 (/.f64 x z))","(/.f64 (*.f64 4 x) z)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z)","(/.f64 (fma.f64 -4 y (*.f64 4 x)) z)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","-2","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","-2","(-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 y) (*.f64 -4 x)) z)) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 y) (*.f64 -4 x)) z)) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 y) (*.f64 -4 x)) z)) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (*.f64 4 (/.f64 x z)) 2)","(fma.f64 4 (/.f64 x z) -2)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(*.f64 -4 (/.f64 y z))","(/.f64 (*.f64 -4 y) z)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(*.f64 -4 (/.f64 y z))","(/.f64 (*.f64 -4 y) z)","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))","(-.f64 (+.f64 (*.f64 -4 (/.f64 y z)) (*.f64 4 (/.f64 x z))) 2)","(+.f64 -2 (/.f64 (fma.f64 -4 y (*.f64 4 x)) z))"]],"time":133.55712890625,"type":"simplify"},{"compiler":[[986,702]],"time":12.77099609375,"type":"eval"},{"alts":[["(*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))","done",0.2578125],["(fma.f64 x (/.f64 4 z) (fma.f64 (/.f64 y z) -4 -2))","done",0.0703125],["(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","done",0.0078125]],"compiler":[[13,9],[14,10],[16,12]],"count":[[61,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[58,0],"picked":[1,1]}],"min-error":[0],"time":11.327880859375,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["y",0.0078125,1],["z",0.0078125,1],["(/.f64 (*.f64 4 (-.f64 (-.f64 x y) (*.f64 z 1/2))) z)",0.0078125,1],["(-.f64 x y)",0.0078125,1],["(-.f64 x y)",0.0078125,1]],"compiler":[[4,3],[4,3],[4,3],[14,10],[6,4],[6,4],[64,39]],"count":[[5,1]],"inputs":[["(fma.f64 x (/.f64 4 z) (fma.f64 (/.f64 y z) -4 -2))","(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","(/.f64 (*.f64 (/.f64 (fma.f64 -1/2 z (-.f64 x y)) (cbrt.f64 z)) 4) (cbrt.f64 (*.f64 z z)))","(*.f64 (fma.f64 -1/2 z (-.f64 x y)) (/.f64 4 z))","(/.f64 (*.f64 4 (-.f64 (-.f64 x y) (*.f64 z 1/2))) z)"]],"link":["."],"name":["Data.Array.Repa.Algorithms.ColorRamp:rampColorHotToCold from repa-algorithms-3.4.0.1, B"],"oracle":[27.623717457613516],"outputs":[["(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))"]],"time":20.573974609375,"times":[["x",3.14599609375],["y",3.322021484375],["z",3.219970703125],["(/.f64 (*.f64 4 (-.f64 (-.f64 x y) (*.f64 z 1/2))) z)",2.675048828125],["(-.f64 x y)",3.387939453125],["(-.f64 x y)",3.367919921875]],"type":"regimes"},{"compiler":[[16,12]],"inputs":[["(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 -4 (+.f64 1/2 (/.f64 y z))) (*.f64 4 (/.f64 x z)))","(+.f64 -2 (/.f64 (+.f64 (*.f64 -4 y) (*.f64 4 x)) z))"]],"stop":[["done",1]],"time":21.869140625,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[16,12]],"remove-preprocessing":[[]],"time":10.517822265625,"type":"end"}]
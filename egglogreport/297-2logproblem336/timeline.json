[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.4992678165435791,0.00048804283142089844,0.500244140625],[11,0.4987797737121582,0.0009760856628417969,0.500244140625],[10,0.4978036880493164,0.0019521713256835938,0.500244140625],[9,0.4958515167236328,0.0039043426513671875,0.500244140625],[8,0.4919471740722656,0.007808685302734375,0.500244140625],[7,0.48413848876953125,0.01561737060546875,0.500244140625],[6,0.4685211181640625,0.0312347412109375,0.500244140625],[5,0.437286376953125,0.062469482421875,0.500244140625],[4,0.37481689453125,0.12493896484375,0.500244140625],[3,0.2498779296875,0.499755859375,0.2503662109375],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.27392578125,"type":"analyze"},{"outcomes":[["body",512,"valid",99.192138671875,1026],["body",1024,"valid",329.0322265625,2004],["body",2048,"valid",69.911865234375,255],["body",256,"valid",287.46875,4971]],"time":794.5419921875,"type":"sample"},{"compiler":[[8,6]],"inputs":[["0"],["(-.f64 (log.f64 (+.f64 N 1)) (log.f64 N))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (log.f64 (+.f64 N 1)) (log.f64 N))","(-.f64 (log1p.f64 N) (log.f64 N))"]],"symmetry":[[]],"time":51.05908203125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (log.f64 (+.f64 N 1)) (log.f64 N))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (log.f64 (+.f64 N 1)) (log.f64 N))","(-.f64 (log1p.f64 N) (log.f64 N))"]],"time":17.643798828125,"type":"simplify"},{"compiler":[[13,8]],"time":0.33203125,"type":"eval"},{"alts":[["(-.f64 (log1p.f64 N) (log.f64 N))","next",29.64113548263881]],"compiler":[[6,4],[6,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[29.64113548263881],"time":1.887939453125,"type":"prune"},{"compiler":[[11,4]],"locations":[["(-.f64 (log1p.f64 N) (log.f64 N))",3.2539147096013927,true]],"time":3.900146484375,"type":"localize"},{"count":[[1,12]],"series":[["(-.f64 (log1p.f64 N) (log.f64 N))","N","-inf",0.444091796875],["(-.f64 (log1p.f64 N) (log.f64 N))","N","inf",0.4541015625],["(-.f64 (log1p.f64 N) (log.f64 N))","N","0",0.403076171875]],"time":1.35205078125,"type":"series"},{"count":[[1,58]],"inputs":[["(-.f64 (log1p.f64 N) (log.f64 N))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (log1p.f64 N) (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (log.f64 N)) (neg.f64 (log1p.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log1p.f64 N) (log.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (-.f64 9 (-.f64 (log1p.f64 N) (log.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (-.f64 (log.f64 N) (log1p.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (log.f64 N) (log1p.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 3 (-.f64 (log1p.f64 N) (log.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 1 (-.f64 (log1p.f64 N) (log.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (-.f64 (log.f64 N) (log1p.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (-.f64 (log.f64 N) (log1p.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (log1p.f64 N) (log.f64 N))) (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (log1p.f64 N) 2/3) (+.f64 (pow.f64 (log.f64 N) 2/3) (cbrt.f64 (*.f64 (log1p.f64 N) (log.f64 N))))) (-.f64 (cbrt.f64 (log1p.f64 N)) (cbrt.f64 (log.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 2/3) (cbrt.f64 (-.f64 (log1p.f64 N) (log.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 2/3)) (cbrt.f64 (-.f64 (log.f64 N) (log1p.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) 2/3) (cbrt.f64 (*.f64 (log1p.f64 N) (log.f64 N)))) (pow.f64 (log.f64 N) 2/3))) (-.f64 (cbrt.f64 (log.f64 N)) (cbrt.f64 (log1p.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) 2/3) (cbrt.f64 (*.f64 (log1p.f64 N) (log.f64 N)))) (pow.f64 (log.f64 N) 2/3)) (-.f64 (cbrt.f64 (log1p.f64 N)) (cbrt.f64 (log.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (log1p.f64 N) 2/3) (-.f64 (pow.f64 (log.f64 N) 2/3) (neg.f64 (cbrt.f64 (*.f64 (log1p.f64 N) (log.f64 N)))))) (-.f64 (cbrt.f64 (log1p.f64 N)) (cbrt.f64 (log.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (log.f64 N) 2/3) (-.f64 (pow.f64 (log1p.f64 N) 2/3) (neg.f64 (cbrt.f64 (*.f64 (log1p.f64 N) (log.f64 N)))))) (+.f64 (cbrt.f64 (neg.f64 (log.f64 N))) (cbrt.f64 (log1p.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 2/3) (*.f64 0 (cbrt.f64 (-.f64 (log1p.f64 N) (log.f64 N)))))) (+.f64 0 (cbrt.f64 (-.f64 (log1p.f64 N) (log.f64 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (log.f64 N) 2/3) (+.f64 (pow.f64 (log1p.f64 N) 2/3) (*.f64 (cbrt.f64 (neg.f64 (log.f64 N))) (cbrt.f64 (neg.f64 (log1p.f64 N)))))) (-.f64 (cbrt.f64 (neg.f64 (log.f64 N))) (cbrt.f64 (neg.f64 (log1p.f64 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 2/3) (*.f64 0 (cbrt.f64 (-.f64 (log.f64 N) (log1p.f64 N)))))) (cbrt.f64 (-.f64 (log1p.f64 N) (log.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (log.f64 N) (log1p.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (log.f64 N) (log1p.f64 N)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (log1p.f64 N) (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (log.f64 N) (log1p.f64 N)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 3 (-.f64 (log.f64 N) (log1p.f64 N)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 2 (-.f64 (log.f64 N) (log1p.f64 N)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (log1p.f64 N) (log.f64 N))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (log.f64 N) (log1p.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (/.f64 N (+.f64 1 N))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 N) N))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (/.f64 1 (/.f64 (+.f64 1 N) N))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (/.f64 1 N) (/.f64 1 (+.f64 1 N))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (log.f64 N))) (pow.f64 (log.f64 N) 2/3) (log1p.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log1p.f64 N)) (pow.f64 (log1p.f64 N) 2/3) (neg.f64 (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (log1p.f64 N) 2/3) (cbrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 N)) (neg.f64 (pow.f64 (log.f64 N) 2/3)) (log1p.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (log1p.f64 N) (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (log1p.f64 N) (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (log1p.f64 N) (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log1p.f64 N) (neg.f64 (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (log.f64 N)) (log1p.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (log.f64 N) (log1p.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log1p.f64 N) 1 (neg.f64 (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (log1p.f64 N) (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (log1p.f64 N) (log.f64 N)))))))"]],"rules":[["egg-rr",58]],"time":39.458984375,"type":"rewrite"},{"count":[[70,73]],"inputs":[["(*.f64 -1 (log.f64 N))","(+.f64 N (*.f64 -1 (log.f64 N)))","(+.f64 N (+.f64 (*.f64 -1 (log.f64 N)) (*.f64 -1/2 (pow.f64 N 2))))","(+.f64 N (+.f64 (*.f64 -1 (log.f64 N)) (+.f64 (*.f64 1/3 (pow.f64 N 3)) (*.f64 -1/2 (pow.f64 N 2)))))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (log.f64 N))","(neg.f64 (log.f64 N))","(+.f64 N (*.f64 -1 (log.f64 N)))","(-.f64 N (log.f64 N))","(+.f64 N (+.f64 (*.f64 -1 (log.f64 N)) (*.f64 -1/2 (pow.f64 N 2))))","(-.f64 (+.f64 N (*.f64 -1/2 (*.f64 N N))) (log.f64 N))","(+.f64 N (+.f64 (*.f64 -1 (log.f64 N)) (+.f64 (*.f64 1/3 (pow.f64 N 3)) (*.f64 -1/2 (pow.f64 N 2)))))","(+.f64 (-.f64 N (log.f64 N)) (*.f64 (*.f64 N N) (+.f64 (*.f64 N 1/3) -1/2)))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (+.f64 1/3 (*.f64 N (-.f64 N 1/2))) (pow.f64 N 3))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","(+.f64 (/.f64 (+.f64 1/3 (*.f64 N (-.f64 N 1/2))) (pow.f64 N 3)) (*.f64 -1/4 (pow.f64 N -4)))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (+.f64 1/3 (*.f64 N (-.f64 N 1/2))) (pow.f64 N 3))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","(+.f64 (/.f64 (+.f64 1/3 (*.f64 N (-.f64 N 1/2))) (pow.f64 N 3)) (*.f64 -1/4 (pow.f64 N -4)))"]],"time":67.27001953125,"type":"simplify"},{"compiler":[[800,349]],"time":10.06298828125,"type":"eval"},{"alts":[["(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","next",31.928014661600688],["(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","fresh",32.02157608901248],["(-.f64 (log1p.f64 N) (log.f64 N))","done",29.64113548263881]],"compiler":[[28,24],[8,6],[6,4],[28,24],[8,6]],"count":[[74,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[73,2],"picked":[1,1]}],"min-error":[0.01171875],"time":10.81982421875,"type":"prune"},{"compiler":[[110,91]],"locations":[["(/.f64 1 (pow.f64 N 3))",0.27699799376765843,true],["(/.f64 1 (pow.f64 N 4))",0.3555889726333756,true],["(/.f64 1 (pow.f64 N 2))",0.4474803867892586,true],["(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))",22.027162103058117,true]],"time":29.26708984375,"type":"localize"},{"count":[[4,9]],"series":[["(/.f64 1 (pow.f64 N 3))","N","-inf",0.259033203125],["(/.f64 1 (pow.f64 N 3))","N","inf",0.14501953125],["(/.f64 1 (pow.f64 N 3))","N","0",0.56689453125],["(/.f64 1 (pow.f64 N 4))","N","-inf",0.14599609375],["(/.f64 1 (pow.f64 N 4))","N","inf",0.1689453125],["(/.f64 1 (pow.f64 N 4))","N","0",0.393798828125],["(/.f64 1 (pow.f64 N 2))","N","-inf",0.14404296875],["(/.f64 1 (pow.f64 N 2))","N","inf",0.14794921875],["(/.f64 1 (pow.f64 N 2))","N","0",0.4208984375],["(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","N","-inf",0.2587890625],["(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","N","inf",0.23193359375],["(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","N","0",0.447021484375]],"time":3.469970703125,"type":"series"},{"count":[[4,189]],"inputs":[["(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","(/.f64 1 (pow.f64 N 2))","(/.f64 1 (pow.f64 N 4))","(/.f64 1 (pow.f64 N 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (pow.f64 N -3)) (-.f64 (/.f64 1 N) (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 0 (+.f64 (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N)) (/.f64 -1 N))) (*.f64 1/3 (pow.f64 N -3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))) 0) (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))) (*.f64 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (pow.f64 N -3)) (*.f64 (-.f64 (/.f64 1 N) (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 N) (+.f64 (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)) (*.f64 -1/4 (pow.f64 N -4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N)))) (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))) (*.f64 0 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N)) (neg.f64 (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)) (*.f64 -1/4 (pow.f64 N -4))) (/.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N))) (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/2 (*.f64 N N)) (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 N) (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N))) (*.f64 1/3 (pow.f64 N -3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))) (*.f64 -1/4 (pow.f64 N -4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/4 (pow.f64 N -4)) (+.f64 (/.f64 -1/2 (*.f64 N N)) (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/4 (pow.f64 N -4)) (*.f64 -1 (neg.f64 (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) 1) (/.f64 -1/2 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N))) (*.f64 (neg.f64 (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/2 (*.f64 N N)) (*.f64 (/.f64 (-.f64 1/4 (+.f64 (*.f64 1/3 N) (pow.f64 N 3))) (pow.f64 N 4)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/4 (pow.f64 N -4)) (*.f64 (neg.f64 (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/4 (pow.f64 N -4)) (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 1/3 (pow.f64 N -3) (*.f64 -1/4 (pow.f64 N -4))) (-.f64 (/.f64 (/.f64 1/2 N) N) (/.f64 1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)) (-.f64 (*.f64 1/4 (pow.f64 N -4)) (/.f64 1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 N) (neg.f64 (+.f64 (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)) (*.f64 -1/4 (pow.f64 N -4)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N)) (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 (/.f64 1/2 N) N))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))) (*.f64 1/4 (pow.f64 N -4)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 (pow.f64 N -2) 1/2 (/.f64 (-.f64 1/4 (+.f64 (*.f64 1/3 N) (pow.f64 N 3))) (pow.f64 N 4))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N)) 0) (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (+.f64 (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)) (*.f64 -1/4 (pow.f64 N -4))) 0) (/.f64 -1 N))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N)) (-.f64 (*.f64 1/4 (pow.f64 N -4)) (/.f64 -1/2 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 -1 N) (+.f64 (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)) (*.f64 -1/4 (pow.f64 N -4)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 1/3 (pow.f64 N -3)) (+.f64 (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N)) (/.f64 -1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N))) (neg.f64 (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1/2 (*.f64 N N)) (/.f64 (-.f64 1/4 (+.f64 (*.f64 1/3 N) (pow.f64 N 3))) (pow.f64 N 4)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -1/4 (pow.f64 N -4)) (neg.f64 (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)) (*.f64 -1/4 (pow.f64 N -4))) (/.f64 -1 N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N)))) (cbrt.f64 (pow.f64 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))) 2)) (cbrt.f64 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N))) (neg.f64 (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (fma.f64 (pow.f64 N -2) 1/2 (/.f64 (-.f64 1/4 (+.f64 (*.f64 1/3 N) (pow.f64 N 3))) (pow.f64 N 4))))) (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 N -2) 1/2 (/.f64 (-.f64 1/4 (+.f64 (*.f64 1/3 N) (pow.f64 N 3))) (pow.f64 N 4)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N)) 2)) (+.f64 (cbrt.f64 (pow.f64 (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N)) 2)) (*.f64 (cbrt.f64 (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N))) (cbrt.f64 (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N)))))) (-.f64 (cbrt.f64 (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N))) (cbrt.f64 (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 (pow.f64 N -2) 1/2 (/.f64 (-.f64 1/4 (+.f64 (*.f64 1/3 N) (pow.f64 N 3))) (pow.f64 N 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (pow.f64 N -2) 1/2 (/.f64 (-.f64 1/4 (+.f64 (*.f64 1/3 N) (pow.f64 N 3))) (pow.f64 N 4)))) (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 N -2) 1/2 (/.f64 (-.f64 1/4 (+.f64 (*.f64 1/3 N) (pow.f64 N 3))) (pow.f64 N 4)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 (pow.f64 N -2) 1/2 (/.f64 (-.f64 1/4 (+.f64 (*.f64 1/3 N) (pow.f64 N 3))) (pow.f64 N 4))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (fma.f64 (pow.f64 N -2) 1/2 (/.f64 (-.f64 1/4 (+.f64 (*.f64 1/3 N) (pow.f64 N 3))) (pow.f64 N 4))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 1/4 (pow.f64 N -4)) (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 N -1/3) (cbrt.f64 (pow.f64 N -2)) (+.f64 (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)) (*.f64 -1/4 (pow.f64 N -4))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N))) (cbrt.f64 (pow.f64 (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N)) 2)) (neg.f64 (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 N) (+.f64 (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)) (*.f64 -1/4 (pow.f64 N -4))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N)) (neg.f64 (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N)) 1 (neg.f64 (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N))) (neg.f64 (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N)) 2)) (cbrt.f64 (fma.f64 1/3 (pow.f64 N -3) (/.f64 1 N))) (neg.f64 (fma.f64 1/4 (pow.f64 N -4) (/.f64 (/.f64 1/2 N) N))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4))) (pow.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4))) 2) (/.f64 -1/2 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (+.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4)) (/.f64 -1/2 (*.f64 N N))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 N -2) 0) (pow.f64 N -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 N -2) (*.f64 (pow.f64 N -2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 N -2)) (pow.f64 N -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 N -2) (*.f64 0 (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 N -2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 N -2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 N) (/.f64 -1 N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 N) (/.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 N -4)) (cbrt.f64 (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 N -1/3) (/.f64 (cbrt.f64 (pow.f64 N -2)) N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 N -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 N -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 N -2)) (cbrt.f64 (pow.f64 N -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 N -2))) (cbrt.f64 (neg.f64 (pow.f64 N -4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 N -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 N -1/3)) (neg.f64 (pow.f64 N -1/3))) (*.f64 (cbrt.f64 (neg.f64 (pow.f64 N -2))) (cbrt.f64 (neg.f64 (pow.f64 N -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 N -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 N N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 N) (neg.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 N) N)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 N -2)) (cbrt.f64 (pow.f64 N 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 N -4)) (cbrt.f64 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (pow.f64 N -2))) (neg.f64 (cbrt.f64 (pow.f64 N 4))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 N -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 N -3) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 N -1/3) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 N -3) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 N) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 N -2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 N N) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 N) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 N -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 N 6) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 N N)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1 N) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1 N) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 N -4) 0) (pow.f64 N -4))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 N -4) (*.f64 (pow.f64 N -4) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 N -4)) (pow.f64 N -4))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 N -4) (*.f64 0 (pow.f64 N -4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 N -4))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 N -4)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 N -4) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 N -4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 N) (pow.f64 N -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 N -4)) (cbrt.f64 (pow.f64 (pow.f64 N -4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (pow.f64 N -4) 2)) (cbrt.f64 (pow.f64 N -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 N -2) (pow.f64 N -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 N -2)) (neg.f64 (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 N -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 N -4))) (/.f64 -1 (cbrt.f64 (pow.f64 N 8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 N -4)) (/.f64 1 (cbrt.f64 (pow.f64 N 8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 N -4) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 N -4)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 N -2)) (*.f64 (/.f64 (cbrt.f64 (pow.f64 N -2)) N) (/.f64 (cbrt.f64 (pow.f64 N -2)) N)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 (pow.f64 N -2))) (cbrt.f64 (neg.f64 (pow.f64 N -2)))) (*.f64 (cbrt.f64 (neg.f64 (pow.f64 N -4))) (cbrt.f64 (neg.f64 (pow.f64 N -4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 N -4) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 N 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (pow.f64 N 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 N -2) (*.f64 N N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 N -4)) (cbrt.f64 (pow.f64 N 8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (pow.f64 N -4) 2)) (cbrt.f64 (pow.f64 N 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 N) (pow.f64 N 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (pow.f64 N -4))) (neg.f64 (cbrt.f64 (pow.f64 N 8))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 N -2)) (neg.f64 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 N -4) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 N -2)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 N) 6) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 N -3) (+.f64 1/3 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 N) 6) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 N -4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 N -4)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 N -4) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 N 4) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 N) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 N -2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 N N) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 N N) 6) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 N 4)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 N -2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 N) (pow.f64 N -3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 N) (neg.f64 (pow.f64 N -3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 N -4)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 N -4) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 N -3) 0) (pow.f64 N -3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 N -3) (*.f64 (pow.f64 N -3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 N -3)) (pow.f64 N -3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 N -3) (*.f64 0 (pow.f64 N -3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 N -3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 N -3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 N -3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 N -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 N -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 N) (pow.f64 N -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 N -2) (/.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 N) (neg.f64 (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 N -2)) (/.f64 -1 N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 N -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 N -3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 N -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (pow.f64 N 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 N 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 N) (*.f64 N N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 N -2) N)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 N -2)) (neg.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 N) (neg.f64 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 N -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 N -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 N) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 N 3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 N -3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 N 3) 3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 N -3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (/.f64 -1 N) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 N -3) 3))))))"]],"rules":[["egg-rr",31],["egg-rr",48],["egg-rr",40],["egg-rr",70]],"time":44.31005859375,"type":"rewrite"},{"count":[[198,200]],"inputs":[["(/.f64 -1/4 (pow.f64 N 4))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 -1/4 (pow.f64 N 4))","(*.f64 -1/4 (pow.f64 N -4))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(fma.f64 1/3 (pow.f64 N -3) (*.f64 -1/4 (pow.f64 N -4)))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","(+.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) (*.f64 -1/4 (pow.f64 N -4)))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (+.f64 1/3 (*.f64 N (-.f64 N 1/2))) (pow.f64 N 3))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (+.f64 1/3 (*.f64 N (-.f64 N 1/2))) (pow.f64 N 3))"]],"time":54.071044921875,"type":"simplify"},{"compiler":[[5292,4293]],"time":69.342041015625,"type":"eval"},{"alts":[["(+.f64 (*.f64 -1/4 (pow.f64 N -4)) (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))))","next",31.924108411600688],["(-.f64 (log1p.f64 N) (log.f64 N))","done",29.64113548263881],["(fma.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4))) (pow.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4))) 2) (/.f64 -1/2 (*.f64 N N)))","fresh",54.18983292439784],["(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","fresh",32.02157608901248]],"compiler":[[20,16],[6,4],[37,29],[8,6],[20,16],[37,29],[8,6]],"count":[[203,4]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[200,3],"picked":[1,0]}],"min-error":[0],"time":49.48388671875,"type":"prune"},{"compiler":[[71,55]],"locations":[["(+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)))",0.01171875,true],["(*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))",0.06640625,true],["(/.f64 1/3 N)",0.421875,true],["(+.f64 (*.f64 -1/4 (pow.f64 N -4)) (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))))",22.007630853058117,true]],"time":18.64208984375,"type":"localize"},{"count":[[4,36]],"series":[["(+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)))","N","-inf",0.2041015625],["(+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)))","N","inf",0.162841796875],["(+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)))","N","0",0.216064453125],["(*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))","N","-inf",0.216064453125],["(*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))","N","inf",0.244140625],["(*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))","N","0",0.333984375],["(/.f64 1/3 N)","N","-inf",0.25390625],["(/.f64 1/3 N)","N","inf",0.469970703125],["(/.f64 1/3 N)","N","0",0.31396484375],["(+.f64 (*.f64 -1/4 (pow.f64 N -4)) (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))))","N","-inf",0.26611328125],["(+.f64 (*.f64 -1/4 (pow.f64 N -4)) (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))))","N","inf",0.308837890625],["(+.f64 (*.f64 -1/4 (pow.f64 N -4)) (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))))","N","0",0.27392578125]],"time":3.450927734375,"type":"series"},{"count":[[4,181]],"inputs":[["(+.f64 (*.f64 -1/4 (pow.f64 N -4)) (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))))","(/.f64 1/3 N)","(*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))","(+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/4 (pow.f64 N -4) (/.f64 1 N)) (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) (fma.f64 -1/4 (pow.f64 N -4) (/.f64 1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 -1/4 (pow.f64 N -4) (/.f64 1 N)) (*.f64 (pow.f64 N -2) (/.f64 1/3 N))) (*.f64 (pow.f64 N -2) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 -1/4 (pow.f64 N -4) (/.f64 1 N)) (/.f64 (/.f64 1/3 N) (*.f64 N N))) (/.f64 -1/2 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 N -2) (/.f64 1/3 N)) (+.f64 (*.f64 (pow.f64 N -2) -1/2) (fma.f64 -1/4 (pow.f64 N -4) (/.f64 1 N))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 1/3 N) (*.f64 N N)) (+.f64 (/.f64 -1/2 (*.f64 N N)) (fma.f64 -1/4 (pow.f64 N -4) (/.f64 1 N))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) 0) (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) (*.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))) (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) (*.f64 0 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/4 (pow.f64 N -4)) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)) (*.f64 -1/4 (pow.f64 N -4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 -1/4 (pow.f64 N -4)) (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2))) (/.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 N) (+.f64 (*.f64 -1/4 (pow.f64 N -4)) (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 N) (*.f64 (+.f64 (*.f64 -1/4 (pow.f64 N -4)) (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (*.f64 -1/4 (pow.f64 N -4)) (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2))) 1) (/.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (+.f64 (*.f64 -1/4 (pow.f64 N -4)) (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2))) 0) (/.f64 -1 N))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 -1 N) (+.f64 (*.f64 -1/4 (pow.f64 N -4)) (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 -1/4 (pow.f64 N -4) (/.f64 1 N)) (*.f64 (+.f64 1/2 (/.f64 -1/3 N)) (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 -1/4 (pow.f64 N -4)) (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2))) (/.f64 -1 N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))) (cbrt.f64 (pow.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)) 2)) (-.f64 (cbrt.f64 (*.f64 1/16 (pow.f64 N -8))) (cbrt.f64 (*.f64 (*.f64 -1/4 (pow.f64 N -4)) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))))) (+.f64 (cbrt.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) (cbrt.f64 (*.f64 -1/4 (pow.f64 N -4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 1/16 (pow.f64 N -8))) (-.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)) 2)) (cbrt.f64 (*.f64 (*.f64 -1/4 (pow.f64 N -4)) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))))) (+.f64 (cbrt.f64 (*.f64 -1/4 (pow.f64 N -4))) (cbrt.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) 2)) (cbrt.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 N -4) -1/4 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -1/4 (pow.f64 N -4))) (cbrt.f64 (*.f64 1/16 (pow.f64 N -8))) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) (cbrt.f64 (pow.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)) 2)) (*.f64 -1/4 (pow.f64 N -4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -1/4 (pow.f64 N -4)) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)) (*.f64 -1/4 (pow.f64 N -4)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/3 N) 0) (/.f64 1/3 N))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/3 N) (*.f64 (/.f64 1/3 N) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 1/3 N)) (/.f64 1/3 N))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/3 N) (*.f64 0 (/.f64 1/3 N)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -1/3 N))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 N 3)) (/.f64 -1/3 N))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/3 N) (/.f64 0 (*.f64 N 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/3 N)) (cbrt.f64 (/.f64 1/9 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/9 (*.f64 N N))) (cbrt.f64 (/.f64 1/3 N)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1/3 N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 N) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (/.f64 (cbrt.f64 1/9) N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (/.f64 (sqrt.f64 1/3) N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 1/3) (cbrt.f64 N)) (*.f64 (sqrt.f64 1/3) (cbrt.f64 (pow.f64 N -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/27 N)) (cbrt.f64 (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 N -1/3) (cbrt.f64 (/.f64 1/27 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (/.f64 -1 N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 N) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1/3 N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1/3 (neg.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1/27 N)) (cbrt.f64 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/3 N)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 N 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 N -1/3) 1/3) (cbrt.f64 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/3 N)) (cbrt.f64 1/9)) (cbrt.f64 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1/3 N) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sqrt.f64 1/3) (cbrt.f64 N)) (sqrt.f64 1/3)) (cbrt.f64 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/9 (*.f64 N N))) (cbrt.f64 -1/3)) (cbrt.f64 (neg.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/9 (*.f64 N N))) (cbrt.f64 1/3)) (cbrt.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 N) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 1/27 N)) 1) (cbrt.f64 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1/27 (*.f64 N N))) (cbrt.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 1/27 N)) (pow.f64 (cbrt.f64 (cbrt.f64 N)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 N)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1/3 -1) (neg.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1/3 (cbrt.f64 N)) (neg.f64 (cbrt.f64 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (*.f64 N 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (neg.f64 N) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 N -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (*.f64 N 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 1/27 N))) (neg.f64 (cbrt.f64 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/3 N)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1/3 N) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/3 N) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 N 3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/3 N)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/3 N)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -1/3 N))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1/3 N) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 N -2) (/.f64 1/3 N)) (*.f64 (pow.f64 N -2) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 1/3 N) (*.f64 N N)) (/.f64 -1/2 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 N -2) -1/2) (*.f64 (pow.f64 N -2) (/.f64 1/3 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/2 (*.f64 N N)) (/.f64 (/.f64 1/3 N) (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (pow.f64 N -2) (/.f64 1/3 N))) (*.f64 1 (*.f64 (pow.f64 N -2) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (/.f64 (/.f64 1/3 N) (*.f64 N N))) (*.f64 1 (/.f64 -1/2 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) 0) (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) (*.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 N -2) (/.f64 1/3 N)) 1) (*.f64 (*.f64 (pow.f64 N -2) -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 1/3 N) (*.f64 N N)) 1) (*.f64 (/.f64 -1/2 (*.f64 N N)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2))) (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) (*.f64 0 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 1/2 (/.f64 -1/3 N)) (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 1/3 N) -1/2)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1/3 N) -1/2) 2)) (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2))) (cbrt.f64 (pow.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) 2)) (cbrt.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 N -2) (cbrt.f64 (+.f64 (/.f64 1/3 N) -1/2))) (cbrt.f64 (pow.f64 (+.f64 (/.f64 1/3 N) -1/2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (/.f64 1/3 N) -1/2) (cbrt.f64 (pow.f64 N -2))) (pow.f64 (pow.f64 N -1/3) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 1/2 (/.f64 -1/3 N)) (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 N -2)) (*.f64 (pow.f64 (pow.f64 N -1/3) 4) (+.f64 (/.f64 1/3 N) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 N -2)) (+.f64 1/2 (/.f64 -1/3 N)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1/2 (/.f64 -1/3 N)) (neg.f64 (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 1/27 (pow.f64 N -3) -1/8) (pow.f64 N -2)) (/.f64 1 (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 1/27 (pow.f64 N -3) -1/8) (pow.f64 N -2)) (-.f64 (+.f64 (/.f64 1/9 (*.f64 N N)) 1/4) (neg.f64 (/.f64 1/6 N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 1/27 (pow.f64 N -3) -1/8) (pow.f64 N -2)) (cbrt.f64 (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N)))) (pow.f64 (cbrt.f64 (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 1/27 (pow.f64 N -3) -1/8) (pow.f64 N -2)) (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 N -2) (-.f64 1/8 (pow.f64 (/.f64 1/3 N) 3))) (neg.f64 (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (/.f64 1/3 N) -1/2) (/.f64 -1 N)) (neg.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 1/3 N) -1/2) (*.f64 N N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/2 (/.f64 -1/3 N)) (neg.f64 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (/.f64 1/3 N) -1/2) (/.f64 1 N)) N)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (fma.f64 1/27 (pow.f64 N -3) -1/8) (pow.f64 N -2))) (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 1/27 (pow.f64 N -3) -1/8) (pow.f64 N -2)) 1) (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fma.f64 1/27 (pow.f64 N -3) -1/8) (pow.f64 N -2))) (neg.f64 (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 1/2 (/.f64 -1/3 N)) (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) (/.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (/.f64 1/3 N))) (*.f64 (pow.f64 N -2) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 1 N) (/.f64 (/.f64 1/3 N) (*.f64 N N))) (/.f64 -1/2 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 N -2) (/.f64 1/3 N)) (+.f64 (*.f64 (pow.f64 N -2) -1/2) (/.f64 1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 1/3 N) (*.f64 N N)) (+.f64 (/.f64 -1/2 (*.f64 N N)) (/.f64 1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)) 0) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)) (*.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)) (*.f64 0 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) 0) (/.f64 -1 N))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 -1 N) (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 N) (*.f64 (+.f64 1/2 (/.f64 -1/3 N)) (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) (/.f64 -1 N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) (cbrt.f64 (pow.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) 2)) (-.f64 (cbrt.f64 (pow.f64 N -2)) (cbrt.f64 (*.f64 (pow.f64 N -3) (+.f64 (/.f64 1/3 N) -1/2))))) (+.f64 (cbrt.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2))) (pow.f64 N -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 N -2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) 2)) (cbrt.f64 (*.f64 (pow.f64 N -3) (+.f64 (/.f64 1/3 N) -1/2))))) (+.f64 (pow.f64 N -1/3) (cbrt.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)) 2)) (cbrt.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 (+.f64 1/2 (/.f64 -1/3 N)) (pow.f64 N -2)) (/.f64 -1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 N -2)) (+.f64 (*.f64 (pow.f64 (pow.f64 N -1/3) 4) (+.f64 (/.f64 1/3 N) -1/2)) (pow.f64 N -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 N -2)) (+.f64 (pow.f64 N -1/3) (*.f64 (pow.f64 (pow.f64 N -1/3) 4) (+.f64 (/.f64 1/3 N) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N))) (*.f64 (neg.f64 N) (*.f64 (fma.f64 1/27 (pow.f64 N -3) -1/8) (pow.f64 N -2)))) (*.f64 (neg.f64 N) (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N)) (*.f64 N (*.f64 (fma.f64 1/27 (pow.f64 N -3) -1/8) (pow.f64 N -2)))) (*.f64 N (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 N -1/3) (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N))) (*.f64 (cbrt.f64 (*.f64 N N)) (*.f64 (fma.f64 1/27 (pow.f64 N -3) -1/8) (pow.f64 N -2)))) (*.f64 (cbrt.f64 (*.f64 N N)) (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 1/27 (pow.f64 N -3) -1/8) (pow.f64 N -2)) (cbrt.f64 (*.f64 N N))) (*.f64 (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N)) (pow.f64 N -1/3))) (*.f64 (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N)) (cbrt.f64 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 1/27 (pow.f64 N -3) -1/8) (pow.f64 N -2)) N) (*.f64 (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N)) 1)) (*.f64 (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N)) N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 1/27 (pow.f64 N -3) -1/8) (pow.f64 N -2)) (neg.f64 N)) (*.f64 (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N)) -1)) (*.f64 (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/9 N) 1/6) N)) (neg.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 (+.f64 1/2 (/.f64 -1/3 N)) (pow.f64 N -2)) (/.f64 -1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (/.f64 1/3 N) -1/2) (pow.f64 N -2) (/.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2))) (cbrt.f64 (pow.f64 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) 2)) (/.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2) (/.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 N -1/3) (cbrt.f64 (pow.f64 N -2)) (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)) (/.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 N) (*.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2)))))))"]],"rules":[["egg-rr",43],["egg-rr",46],["egg-rr",49],["egg-rr",43]],"time":43.37890625,"type":"rewrite"},{"count":[[217,201]],"inputs":[["(/.f64 -1/4 (pow.f64 N 4))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","(/.f64 1/3 (pow.f64 N 3))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 -1/2 (pow.f64 N 2))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 -1/2 (pow.f64 N 2))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 1/3 (pow.f64 N 3))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (/.f64 1 N)) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (/.f64 1 N)) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 -1/4 (pow.f64 N 4))","(*.f64 -1/4 (pow.f64 N -4))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(fma.f64 1/3 (pow.f64 N -3) (*.f64 -1/4 (pow.f64 N -4)))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","(+.f64 (*.f64 (pow.f64 N -2) (+.f64 -1/2 (/.f64 1/3 N))) (*.f64 -1/4 (pow.f64 N -4)))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","(+.f64 (/.f64 (-.f64 1/3 (*.f64 N (-.f64 1/2 N))) (pow.f64 N 3)) (*.f64 -1/4 (pow.f64 N -4)))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1/3 (*.f64 N (-.f64 1/2 N))) (pow.f64 N 3))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","(+.f64 (/.f64 (-.f64 1/3 (*.f64 N (-.f64 1/2 N))) (pow.f64 N 3)) (*.f64 -1/4 (pow.f64 N -4)))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1/3 (*.f64 N (-.f64 1/2 N))) (pow.f64 N 3))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","(+.f64 (/.f64 (-.f64 1/3 (*.f64 N (-.f64 1/2 N))) (pow.f64 N 3)) (*.f64 -1/4 (pow.f64 N -4)))","(/.f64 1/3 (pow.f64 N 3))","(*.f64 1/3 (pow.f64 N -3))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(*.f64 (pow.f64 N -2) (+.f64 -1/2 (/.f64 1/3 N)))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(*.f64 (pow.f64 N -2) (+.f64 -1/2 (/.f64 1/3 N)))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(*.f64 (pow.f64 N -2) (+.f64 -1/2 (/.f64 1/3 N)))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (*.f64 N N))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(*.f64 (pow.f64 N -2) (+.f64 -1/2 (/.f64 1/3 N)))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(*.f64 (pow.f64 N -2) (+.f64 -1/2 (/.f64 1/3 N)))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(*.f64 (pow.f64 N -2) (+.f64 -1/2 (/.f64 1/3 N)))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (*.f64 N N))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(*.f64 (pow.f64 N -2) (+.f64 -1/2 (/.f64 1/3 N)))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(*.f64 (pow.f64 N -2) (+.f64 -1/2 (/.f64 1/3 N)))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(*.f64 (pow.f64 N -2) (+.f64 -1/2 (/.f64 1/3 N)))","(/.f64 1/3 (pow.f64 N 3))","(*.f64 1/3 (pow.f64 N -3))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(*.f64 (pow.f64 N -2) (+.f64 -1/2 (/.f64 1/3 N)))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (/.f64 1 N)) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1/3 (*.f64 N (-.f64 1/2 N))) (pow.f64 N 3))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (/.f64 1 N)) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1/3 (*.f64 N (-.f64 1/2 N))) (pow.f64 N 3))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1/3 (*.f64 N (-.f64 1/2 N))) (pow.f64 N 3))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1/3 (*.f64 N (-.f64 1/2 N))) (pow.f64 N 3))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1/3 (*.f64 N (-.f64 1/2 N))) (pow.f64 N 3))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1/3 (*.f64 N (-.f64 1/2 N))) (pow.f64 N 3))"]],"time":143.31396484375,"type":"simplify"},{"compiler":[[4912,3850]],"time":65.26611328125,"type":"eval"},{"alts":[["(+.f64 (*.f64 -1/4 (pow.f64 N -4)) (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))))","done",31.924108411600688],["(-.f64 (log1p.f64 N) (log.f64 N))","done",29.64113548263881],["(fma.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4))) (pow.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4))) 2) (/.f64 -1/2 (*.f64 N N)))","fresh",54.18983292439784],["(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","next",32.02157608901248]],"compiler":[[20,16],[6,4],[37,29],[8,6],[37,29],[8,6]],"count":[[205,4]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[201,0],"picked":[1,1]}],"min-error":[0],"time":50.243896484375,"type":"prune"},{"compiler":[[19,14]],"locations":[["(/.f64 (-.f64 1 (/.f64 1/2 N)) N)",0.07421875,true]],"time":4.666015625,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","N","-inf",0.410888671875],["(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","N","inf",0.320068359375],["(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","N","0",0.39501953125]],"time":1.172119140625,"type":"series"},{"count":[[1,92]],"inputs":[["(/.f64 (-.f64 1 (/.f64 1/2 N)) N)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 N) (/.f64 (/.f64 -1/2 N) N))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 -1/2 N) N) (/.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 N) (*.f64 (/.f64 1 N) (/.f64 -1/2 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 N) (/.f64 -1/2 N)) (/.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N) 0) (/.f64 (/.f64 (+.f64 N -1/2) N) N))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N) (*.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 N) (*.f64 (/.f64 (/.f64 -1/2 N) N) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (/.f64 (+.f64 N -1/2) N) N)) (/.f64 (/.f64 (+.f64 N -1/2) N) N))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N) (*.f64 0 (/.f64 (/.f64 (+.f64 N -1/2) N) N)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 N) (*.f64 1/2 (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (/.f64 (-.f64 1/2 N) N) N))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 1 (+.f64 1 (/.f64 (+.f64 1/2 (/.f64 1/4 N)) N))) N) (/.f64 (/.f64 (pow.f64 (/.f64 1/2 N) 3) (+.f64 1 (/.f64 (+.f64 1/2 (/.f64 1/4 N)) N))) N))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 N) (/.f64 (/.f64 (-.f64 1/2 N) N) N))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 N (*.f64 N N)) (/.f64 (/.f64 N (*.f64 N 2)) (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 -1/2 N) N) (/.f64 -1 N))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 N)) (/.f64 (/.f64 (-.f64 1/2 N) N) N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 N -1/2) N)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 N -1/2) N) 2)) N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 N)) (/.f64 (/.f64 (+.f64 N -1/2) N) (cbrt.f64 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (/.f64 (-.f64 1/2 N) N) N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) (cbrt.f64 N)) (pow.f64 (cbrt.f64 N) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N) 2)) (cbrt.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1/2 N) N) (/.f64 -1 N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N)) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (+.f64 N -1/2) N) 2) (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 N -1/2) N) (/.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 N) (/.f64 (+.f64 N -1/2) N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 (+.f64 N -1/2) N) N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (-.f64 1/2 N) N) N) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) (cbrt.f64 (*.f64 N N))) (cbrt.f64 (/.f64 1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 N) (/.f64 (-.f64 1/2 N) N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (/.f64 (+.f64 N -1/2) N) 2) (*.f64 N N))) (cbrt.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 N -1/2) N) 2)) N) (cbrt.f64 (/.f64 (+.f64 N -1/2) N)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (/.f64 -1/2 N) 3)) (/.f64 1 (*.f64 (+.f64 1 (/.f64 (+.f64 1/2 (/.f64 1/4 N)) N)) N)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 1 (pow.f64 (/.f64 -1/2 N) 3)) N) (/.f64 1 (+.f64 1 (/.f64 (+.f64 1/2 (/.f64 1/4 N)) N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 N (/.f64 N (*.f64 N 2))) (/.f64 1 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) (cbrt.f64 N)) (pow.f64 (cbrt.f64 (cbrt.f64 N)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 N)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 1 (pow.f64 (/.f64 -1/2 N) 3)) N) (cbrt.f64 (+.f64 1 (/.f64 (+.f64 1/2 (/.f64 1/4 N)) N)))) (pow.f64 (cbrt.f64 (+.f64 1 (/.f64 (+.f64 1/2 (/.f64 1/4 N)) N))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (cbrt.f64 (*.f64 N N))) (*.f64 (neg.f64 N) (/.f64 (/.f64 1/2 N) (cbrt.f64 N)))) (*.f64 (neg.f64 N) (cbrt.f64 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1 N)) (neg.f64 N)) (*.f64 (cbrt.f64 (*.f64 N N)) (/.f64 -1/2 N))) (*.f64 (cbrt.f64 (*.f64 N N)) (neg.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1 N)) N) (*.f64 (cbrt.f64 (*.f64 N N)) (/.f64 1/2 N))) (*.f64 (cbrt.f64 (*.f64 N N)) N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (*.f64 N N)) (*.f64 N (/.f64 (/.f64 1/2 N) (cbrt.f64 N)))) (*.f64 N (cbrt.f64 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/8 (pow.f64 N -3) -1) (neg.f64 (*.f64 (+.f64 1 (/.f64 (+.f64 1/2 (/.f64 1/4 N)) N)) N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1/2 N) N) (neg.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 (pow.f64 (/.f64 -1/2 N) 3)) N) (+.f64 1 (/.f64 (+.f64 1/2 (/.f64 1/4 N)) N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) (cbrt.f64 N)) (cbrt.f64 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 N -1/2) N) N)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 N (/.f64 N (*.f64 N 2))) (*.f64 N N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (/.f64 -1/2 N) 3)) (*.f64 (+.f64 1 (/.f64 (+.f64 1/2 (/.f64 1/4 N)) N)) N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N) 2)) (cbrt.f64 (/.f64 (+.f64 N -1/2) N))) (cbrt.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N) 2)) (cbrt.f64 (/.f64 (-.f64 1/2 N) N))) (cbrt.f64 (neg.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 N)) (/.f64 (+.f64 N -1/2) N)) (cbrt.f64 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 N -1/2) N) 2))) (cbrt.f64 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 N) (fma.f64 1/8 (pow.f64 N -3) -1)) (+.f64 (neg.f64 (/.f64 (+.f64 1/2 (/.f64 1/4 N)) N)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) (cbrt.f64 (*.f64 N N))) (cbrt.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 N -1/2) N)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N) 2))) (cbrt.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 N -1/2) N)) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (+.f64 N -1/2) N) 2) (*.f64 N N)))) (cbrt.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 1/2 N) N)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N) 2))) (cbrt.f64 (neg.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 1/2 N) N)) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (+.f64 N -1/2) N) 2) (*.f64 N N)))) (cbrt.f64 (neg.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 1/8 (pow.f64 N -3) -1) (/.f64 1 N)) (+.f64 (neg.f64 (/.f64 (+.f64 1/2 (/.f64 1/4 N)) N)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (/.f64 -1/2 N) 3)) N) 1) (+.f64 1 (/.f64 (+.f64 1/2 (/.f64 1/4 N)) N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 N (/.f64 N (*.f64 N 2))) 1) (*.f64 N N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) (cbrt.f64 N)) 1) (cbrt.f64 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 1 (pow.f64 (/.f64 -1/2 N) 3))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 N -1/2) N) 2)) N)) (cbrt.f64 (+.f64 1 (/.f64 (+.f64 1/2 (/.f64 1/4 N)) N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 1/8 (pow.f64 N -3) -1) (/.f64 -1 N)) (+.f64 1 (/.f64 (+.f64 1/2 (/.f64 1/4 N)) N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) (cbrt.f64 N)) 1) (cbrt.f64 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 1 (pow.f64 (/.f64 -1/2 N) 3)) N) 1) (+.f64 1 (/.f64 (+.f64 1/2 (/.f64 1/4 N)) N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) -1) (neg.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1/2 N) N) (cbrt.f64 N)) (neg.f64 (cbrt.f64 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 N (/.f64 N (*.f64 N 2))) N) N)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (/.f64 -1/2 N) 3)) (/.f64 (*.f64 (+.f64 1 (/.f64 (+.f64 1/2 (/.f64 1/4 N)) N)) N) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 N (*.f64 (neg.f64 N) (/.f64 -1/2 N))) (*.f64 N N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 N) (*.f64 (neg.f64 N) (/.f64 1/2 N))) (neg.f64 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1 N)) (cbrt.f64 (*.f64 N N))) (*.f64 (cbrt.f64 (*.f64 N N)) (/.f64 (/.f64 1/2 N) (cbrt.f64 N)))) (*.f64 (cbrt.f64 (*.f64 N N)) (cbrt.f64 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 N) (*.f64 N (/.f64 -1/2 N))) (neg.f64 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) (cbrt.f64 N))) (neg.f64 (cbrt.f64 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 1 (pow.f64 (/.f64 -1/2 N) 3)) N)) (+.f64 (neg.f64 (/.f64 (+.f64 1/2 (/.f64 1/4 N)) N)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 N (/.f64 N (*.f64 N 2)))) (neg.f64 (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (-.f64 1/2 N) N) N))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 (-.f64 1/2 N) N) N) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 (+.f64 N -1/2) N) N) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 -1 N) (/.f64 (/.f64 -1/2 N) N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 N)) (pow.f64 (cbrt.f64 N) -2) (/.f64 (/.f64 -1/2 N) N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 N)) (cbrt.f64 (pow.f64 N -2)) (/.f64 (/.f64 -1/2 N) N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1 N)) (neg.f64 (pow.f64 (cbrt.f64 N) -2)) (/.f64 (/.f64 -1/2 N) N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 N) (/.f64 (/.f64 -1/2 N) N))))))"]],"rules":[["egg-rr",92]],"time":24.656005859375,"type":"rewrite"},{"count":[[104,97]],"inputs":[["(/.f64 -1/2 (pow.f64 N 2))","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (*.f64 N N))","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)"]],"time":50.197021484375,"type":"simplify"},{"compiler":[[1454,927]],"time":17.35400390625,"type":"eval"},{"alts":[["(+.f64 (*.f64 -1/4 (pow.f64 N -4)) (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))))","done",31.924108411600688],["(-.f64 (log1p.f64 N) (log.f64 N))","done",29.64113548263881],["(fma.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4))) (pow.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4))) 2) (/.f64 -1/2 (*.f64 N N)))","fresh",54.18983292439784],["(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","done",32.02157608901248]],"compiler":[[20,16],[6,4],[37,29],[8,6]],"count":[[101,4]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[97,0],"picked":[1,1]}],"min-error":[0],"time":15.203857421875,"type":"prune"},{"accuracy":[0.01171875],"baseline":[29.64113548263881],"branch":[["N",0.01171875,2],["(-.f64 (log.f64 (+.f64 N 1)) (log.f64 N))",0.01171875,2]],"compiler":[[2,1],[8,6],[109,84]],"count":[[7,2]],"inputs":[["(+.f64 (*.f64 -1/4 (pow.f64 N -4)) (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))))","(fma.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4))) (pow.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/3 N) (pow.f64 N 3)) 1/4) (pow.f64 N 4))) 2) (/.f64 -1/2 (*.f64 N N)))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","(/.f64 (-.f64 1 (/.f64 1/2 N)) N)","(-.f64 (log1p.f64 N) (log.f64 N))","(-.f64 (log.f64 (+.f64 N 1)) (log.f64 N))"]],"link":["."],"name":["2log (problem 3.3.6)"],"oracle":[62.884459247464875],"outputs":[["(+.f64 (*.f64 -1/4 (pow.f64 N -4)) (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2))))","(-.f64 (log1p.f64 N) (log.f64 N))"]],"time":13.22216796875,"times":[["N",6.677001953125],["(-.f64 (log.f64 (+.f64 N 1)) (log.f64 N))",4.380126953125]],"type":"regimes"},{"bstep":[[3.1358257277958046e-5,1.7135645235516355,0.0791015625]],"compiler":[[4,3],[8,6]],"method":["left-value"],"time":0.163818359375,"type":"bsearch"},{"compiler":[[35,26]],"inputs":[["(if (<=.f64 (-.f64 (log.f64 (+.f64 N 1)) (log.f64 N)) 7378697629483821/147573952589676412928) (+.f64 (*.f64 -1/4 (pow.f64 N -4)) (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)))) (-.f64 (log1p.f64 N) (log.f64 N)))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (-.f64 (log.f64 (+.f64 N 1)) (log.f64 N)) 7378697629483821/147573952589676412928) (+.f64 (*.f64 -1/4 (pow.f64 N -4)) (+.f64 (/.f64 1 N) (*.f64 (pow.f64 N -2) (-.f64 (/.f64 1/3 N) 1/2)))) (-.f64 (log1p.f64 N) (log.f64 N)))","(if (<=.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 7378697629483821/147573952589676412928) (fma.f64 -1/4 (pow.f64 N -4) (fma.f64 (pow.f64 N -2) (+.f64 (/.f64 1/3 N) -1/2) (/.f64 1 N))) (-.f64 (log1p.f64 N) (log.f64 N)))"]],"stop":[["fuel",1]],"time":26.68115234375,"type":"simplify"},{"time":0.01806640625,"type":"soundness"},{"compiler":[[35,26]],"remove-preprocessing":[[]],"time":15.61181640625,"type":"end"}]
[{"compiler":[[9,7]],"method":["search"],"sampling":[[3,0.9990236759185791,0.0,0.0009763240814208984],[2,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":0.360107421875,"type":"analyze"},{"outcomes":[["body",256,"valid",364.780029296875,8256]],"time":372.77490234375,"type":"sample"},{"compiler":[[8,6]],"inputs":[["0","1"],["(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 re im) (log.f64 10))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 re im) (log.f64 10))"]],"symmetry":[[]],"time":61.800048828125,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(/.f64 (atan2.f64 im re) (log.f64 10))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (atan2.f64 im re) (log.f64 10))"]],"time":39.60888671875,"type":"simplify"},{"compiler":[[8,6]],"time":0.2880859375,"type":"eval"},{"alts":[["(/.f64 (atan2.f64 im re) (log.f64 10))","next",0.874042529305326]],"compiler":[[8,6],[8,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.874042529305326],"time":0.7548828125,"type":"prune"},{"compiler":[[16,9]],"locations":[["(/.f64 (atan2.f64 im re) (log.f64 10))",0.8740425293053261,true]],"time":4.97998046875,"type":"localize"},{"count":[[1,0]],"series":[["(/.f64 (atan2.f64 im re) (log.f64 10))","re","-inf",0.383056640625],["(/.f64 (atan2.f64 im re) (log.f64 10))","re","inf",0.391845703125],["(/.f64 (atan2.f64 im re) (log.f64 10))","re","0",3.95703125],["(/.f64 (atan2.f64 im re) (log.f64 10))","im","-inf",0.388916015625],["(/.f64 (atan2.f64 im re) (log.f64 10))","im","inf",0.39501953125],["(/.f64 (atan2.f64 im re) (log.f64 10))","im","0",15.22607421875]],"time":20.820068359375,"type":"series"},{"count":[[1,52]],"inputs":[["(/.f64 (atan2.f64 im re) (log.f64 10))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (atan2.f64 im re) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (atan2.f64 im re) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (atan2.f64 im re)) (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 10))) (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 2/3) (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (log.f64 10)) (cbrt.f64 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10))) (neg.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 1/10) -1/3) (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 10) -1/3) (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (atan2.f64 im re)) (/.f64 1 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 im re) (/.f64 -1 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (log.f64 1/10)) (atan2.f64 im re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (pow.f64 (log.f64 10) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 1/10)) (neg.f64 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (cbrt.f64 (log.f64 10))) (*.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 10) -2/3) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3)) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3)) (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (cbrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (atan2.f64 im re) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 10))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 10) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 2/3) (cbrt.f64 (neg.f64 (atan2.f64 im re)))) (pow.f64 (log.f64 1/10) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 2/3) (*.f64 0 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)))))) (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (atan2.f64 im re) 2/3)) (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (atan2.f64 im re))) (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (atan2.f64 im re) 2/3) (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 10)) (pow.f64 (atan2.f64 im re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 10))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3)))) (neg.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 2) (neg.f64 (atan2.f64 im re)))) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 10))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (log.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 2/3) (cbrt.f64 (neg.f64 (atan2.f64 im re)))) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 2/3) (cbrt.f64 (neg.f64 (atan2.f64 im re))))) (cbrt.f64 (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 2) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 10))))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 10))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 3))))))"]],"rules":[["egg-rr",52]],"time":42.483154296875,"type":"rewrite"},{"count":[[52,52]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"time":27.017822265625,"type":"simplify"},{"compiler":[[670,445]],"time":10.2099609375,"type":"eval"},{"alts":[["(/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10)))","fresh",0.1387100586106521],["(/.f64 (atan2.f64 im re) (log.f64 10))","done",0.874042529305326],["(*.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (pow.f64 (log.f64 10) -1/3))","fresh",0.8046875],["(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))","next",0.09212875976844201]],"compiler":[[15,13],[8,6],[15,13],[15,13],[15,13],[15,13],[15,13]],"count":[[53,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[52,3],"picked":[1,1]}],"min-error":[0],"time":8.62109375,"type":"prune"},{"compiler":[[46,36]],"locations":[["(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))",0.826503759768442,true],["(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))",0.84765625,true],["(log.f64 1/10)",1.0,true],["(cbrt.f64 (log.f64 1/10))",1.0,true]],"time":21.056884765625,"type":"localize"},{"count":[[4,48]],"series":[["(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","re","-inf",0.2919921875],["(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","re","inf",0.296875],["(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","re","0",1.06298828125],["(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","im","-inf",0.263916015625],["(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","im","inf",0.294921875],["(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","im","0",1.4130859375],["(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))","re","-inf",0.51318359375],["(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))","re","inf",0.548828125],["(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))","re","0",5.2919921875],["(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))","im","-inf",0.5078125],["(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))","im","inf",0.539794921875],["(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))","im","0",13.035888671875]],"time":24.26611328125,"type":"series"},{"count":[[4,218]],"inputs":[["(cbrt.f64 (log.f64 1/10))","(log.f64 1/10)","(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (log.f64 1/10)) (*.f64 (cbrt.f64 (log.f64 1/10)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (log.f64 1/10)) 0) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (log.f64 1/10)) (*.f64 0 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)) (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (log.f64 1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 1/10) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (log.f64 1/10))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 1/10) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 1/10) (*.f64 (log.f64 1/10) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 1/10) 0) (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 1/10) (*.f64 0 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (log.f64 1/10)) (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)) (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 1/10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 1/10) 2/3) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 1/10)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)) (pow.f64 (log.f64 1/10) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (log.f64 1/1000))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (log.f64 1/10) 2/3) (*.f64 0 (cbrt.f64 (log.f64 1/10))))) (+.f64 0 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 1/10)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 1/10) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 1/10)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 1/10)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 1/10) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 1/10)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 1/10) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 1/10) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 1/10)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (log.f64 1/10))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10))) (*.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10))) 0) (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10))) (*.f64 0 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10)))) (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (pow.f64 (log.f64 10) 2/3)) (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10)))) (pow.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10))) 2/3) (cbrt.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))) (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 2/3) (neg.f64 (pow.f64 (log.f64 10) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (log.f64 1/10) -1/3) (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 im re) (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3)))) (/.f64 (pow.f64 (log.f64 1/10) -1/3) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10))))) (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 2/3) (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3)) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3))) (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (neg.f64 (log.f64 1/10)))) (atan2.f64 im re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 1/10) -1/3) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) (*.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 1/10) -1/3) (pow.f64 (log.f64 10) -2/3)) (neg.f64 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 2/3) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (log.f64 10) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 2/3) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)))) (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (atan2.f64 im re)) (/.f64 1 (*.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) 2/3)) (neg.f64 (pow.f64 (log.f64 1/10) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (pow.f64 (log.f64 1/10) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10)))) (pow.f64 (log.f64 10) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 10) -2/3) (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)))) -1) (*.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3))))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3))) (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))) (*.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3))) (atan2.f64 im re)) (*.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3))) (neg.f64 (atan2.f64 im re))) (*.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3)))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) 1) (*.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)) (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) -1) (*.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3)))) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3)))) (*.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3))))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (neg.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10)))) (pow.f64 (log.f64 10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) 2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (*.f64 (cbrt.f64 (log.f64 1/10)) (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (log.f64 10) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10))) 2/3) (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10)))))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10))) 2/3) (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3)))) (pow.f64 (log.f64 1/10) -1/3)) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10)))) (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 2/3)) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3)) (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) 1) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)))) 1) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) 2/3)) 1) (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) (*.f64 (pow.f64 (log.f64 1/10) -1/3) (pow.f64 (log.f64 10) -2/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) (/.f64 (pow.f64 (log.f64 1/10) -1/3) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))) (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 2/3) (pow.f64 (log.f64 10) -2/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10))))) (pow.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10))) 2/3)) (cbrt.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))) (pow.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10))) 2/3)) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 2/3) (neg.f64 (pow.f64 (log.f64 10) -2/3)))) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (atan2.f64 im re))) (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 2/3) (neg.f64 (pow.f64 (log.f64 10) -2/3)))) (neg.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10)))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) (cbrt.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10)))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)))) 1) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) 2/3)) (neg.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10))))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) 2/3)) 1) (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) 2/3)) -1) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) 1) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) -1) (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (/.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (/.f64 (*.f64 (cbrt.f64 (log.f64 1/10)) (neg.f64 (pow.f64 (log.f64 10) 2/3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (*.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) -1) (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (*.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (*.f64 (cbrt.f64 (log.f64 1/10)) (neg.f64 (pow.f64 (log.f64 10) 2/3))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (*.f64 (*.f64 (cbrt.f64 (log.f64 1/10)) (neg.f64 (pow.f64 (log.f64 10) 2/3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) 2/3)) -1) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (*.f64 -1 (*.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) 2/3))) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3)))) (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (*.f64 -1 (*.f64 (cbrt.f64 (log.f64 1/10)) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (*.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) 2/3))) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (log.f64 1/10)) (neg.f64 (pow.f64 (log.f64 10) 2))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (log.f64 10) 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10)))) (neg.f64 (pow.f64 (log.f64 10) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3)) (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (log.f64 1/10)) (neg.f64 (pow.f64 (log.f64 10) 2))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (*.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 0) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (*.f64 0 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (cbrt.f64 (neg.f64 (log.f64 1/10)))) (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (atan2.f64 im re)) (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (atan2.f64 im re)) (neg.f64 (pow.f64 (log.f64 1/10) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 im re) (pow.f64 (log.f64 1/10) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 1/10) -1/3) (atan2.f64 im re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) -1/3)) (/.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))) (cbrt.f64 (pow.f64 (log.f64 1/10) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 1/10) -1/3)) (neg.f64 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10))))) (neg.f64 (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))) (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 2/3) (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))) (pow.f64 (atan2.f64 im re) 2/3)) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) -1/3)) (atan2.f64 im re)) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 2/3) (cbrt.f64 (atan2.f64 im re))) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 2/3) (cbrt.f64 (neg.f64 (atan2.f64 im re)))) (neg.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) 1) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (atan2.f64 im re))) (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 2/3)) (neg.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) 1) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) -1) (*.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (log.f64 1/10)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (log.f64 1/10)))))))"]],"rules":[["egg-rr",48],["egg-rr",115],["egg-rr",33],["egg-rr",22]],"time":45.027099609375,"type":"rewrite"},{"count":[[266,221]],"inputs":[["(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))"]],"time":144.89892578125,"type":"simplify"},{"compiler":[[4139,3356]],"time":60.094970703125,"type":"eval"},{"alts":[["(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))","done",0.09212875976844201],["(/.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3))))","fresh",0.109375],["(/.f64 (atan2.f64 im re) (log.f64 10))","done",0.874042529305326],["(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))))","next",0.10546875]],"compiler":[[15,13],[23,21],[8,6],[15,13],[23,21],[15,13]],"count":[[225,4]],"kept":[{"done":[1,1],"fresh":[2,0],"new":[221,2],"picked":[1,1]}],"min-error":[0],"time":57.31689453125,"type":"prune"},{"compiler":[[46,35]],"locations":[["(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))))",0.8740425293053261,true],["(*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))",1.0,true],["(log.f64 1/10)",1.0,false],["(cbrt.f64 (log.f64 1/10))",1.0,false]],"time":20.736083984375,"type":"localize"},{"count":[[2,24]],"series":[["(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))))","re","-inf",0.19384765625],["(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))))","re","inf",0.51318359375],["(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))))","re","0",0.203857421875],["(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))))","im","-inf",0.195068359375],["(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))))","im","inf",0.22998046875],["(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))))","im","0",0.2451171875]],"time":1.68798828125,"type":"series"},{"count":[[2,148]],"inputs":[["(*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) (*.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 0) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) (*.f64 0 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 10) 2/3)) (*.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2/3))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)) (pow.f64 (log.f64 10) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)) (cbrt.f64 (log.f64 1/10))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) (cbrt.f64 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)) (cbrt.f64 (log.f64 1/10)))) (neg.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))) (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3) (cbrt.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)) (cbrt.f64 (log.f64 1/10))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (log.f64 10) 2) (log.f64 1/10)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (log.f64 10) 2) (log.f64 1/10)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))) (*.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))) 0) (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (log.f64 1/10))) 0) (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))) (*.f64 0 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10))))) (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (atan2.f64 im re) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10))))) (pow.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))) 2/3) (cbrt.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (atan2.f64 im re))) (/.f64 (*.f64 (pow.f64 (atan2.f64 im re) 2/3) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3)) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 1/10) -1/3)) (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (atan2.f64 im re) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (neg.f64 (log.f64 1/10))))) (/.f64 (atan2.f64 im re) (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 (atan2.f64 im re))) (pow.f64 (log.f64 10) -2/3)) (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (log.f64 1/10))) (*.f64 (pow.f64 (atan2.f64 im re) 2/3) (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (atan2.f64 im re)) (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (log.f64 1/10))) (neg.f64 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 im re) (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3)) (pow.f64 (log.f64 1/10) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 10) -2/3) (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 1/10) -1/3) (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (log.f64 1/10)))) (/.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (neg.f64 (log.f64 1/10)))) (atan2.f64 im re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (cbrt.f64 (log.f64 1/10))) (*.f64 (cbrt.f64 (neg.f64 (atan2.f64 im re))) (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 (atan2.f64 im re) 2/3) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (neg.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3)) (cbrt.f64 (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3)) (cbrt.f64 (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (neg.f64 (log.f64 1/10))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (atan2.f64 im re) 2/3) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (neg.f64 (pow.f64 (log.f64 1/10) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (log.f64 10) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))))) (pow.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)))) (*.f64 (pow.f64 (atan2.f64 im re) 2/3) (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3))) (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))))) (neg.f64 (pow.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10))) (neg.f64 (*.f64 (pow.f64 (atan2.f64 im re) 2/3) (pow.f64 (log.f64 10) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (atan2.f64 im re)) (neg.f64 (/.f64 (*.f64 (pow.f64 (atan2.f64 im re) 2/3) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3)) (neg.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (log.f64 1/10))))) (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) 1) (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))) (*.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (*.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)) (cbrt.f64 (log.f64 1/10)))) (*.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) (neg.f64 (atan2.f64 im re)))) (*.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) (*.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (pow.f64 (log.f64 10) 2/3)) (*.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))))) (*.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3)) (*.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) (*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (log.f64 1/10))))))) (*.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (cbrt.f64 (log.f64 1/10))) (*.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)))) (*.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3))) (pow.f64 (atan2.f64 im re) 2/3)) (*.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10))) (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))) 1) (*.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (*.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (log.f64 10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (log.f64 1/10))))) (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))) 2/3) (cbrt.f64 (atan2.f64 im re))) (cbrt.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))) 2/3) (cbrt.f64 (neg.f64 (atan2.f64 im re)))) (cbrt.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))) 2/3) (cbrt.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3)))) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 1/10) -1/3) (neg.f64 (atan2.f64 im re))) (pow.f64 (log.f64 10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 1/10) -1/3) (atan2.f64 im re)) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 1/10) -1/3) (*.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3)))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 1/10) -1/3)) (atan2.f64 im re)) (pow.f64 (log.f64 10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (neg.f64 (log.f64 1/10))))) (atan2.f64 im re)) (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (log.f64 1/10))) (pow.f64 (atan2.f64 im re) 2/3)) (pow.f64 (log.f64 10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (log.f64 1/10)))))) (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))) (pow.f64 (log.f64 10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (log.f64 1/10)))) (neg.f64 (atan2.f64 im re))) (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10))))) (pow.f64 (atan2.f64 im re) 2/3)) (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 (neg.f64 (atan2.f64 im re))) (pow.f64 (log.f64 10) -2/3)) (pow.f64 (atan2.f64 im re) 2/3)) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3)) (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3)) (cbrt.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))) 2/3)) (cbrt.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (atan2.f64 im re))) (pow.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))) 2/3)) (cbrt.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3))) (pow.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (atan2.f64 im re) (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3))) (cbrt.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))) (pow.f64 (log.f64 1/10) -1/3)) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (log.f64 1/10))))) 1) (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) 1) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) 1) (pow.f64 (log.f64 10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (atan2.f64 im re))) (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (cbrt.f64 (log.f64 1/10)))) (pow.f64 (log.f64 10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (log.f64 1/10))))) (neg.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2/3)))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) -1) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) (cbrt.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (log.f64 1/10))))) (cbrt.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (/.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (log.f64 1/10))))) 1) (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) 1) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -2/3)) -1) (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))) (*.f64 (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))) (atan2.f64 im re))) (pow.f64 (*.f64 (pow.f64 (log.f64 10) 2) (log.f64 1/10)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (neg.f64 (pow.f64 (atan2.f64 im re) 3)) (*.f64 (pow.f64 (log.f64 10) 2) (log.f64 1/10))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (atan2.f64 im re) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (atan2.f64 im re) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (neg.f64 (pow.f64 (atan2.f64 im re) 3)) (*.f64 (pow.f64 (log.f64 10) 2) (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))))"]],"rules":[["egg-rr",115],["egg-rr",33]],"time":35.8291015625,"type":"rewrite"},{"count":[[172,150]],"inputs":[["(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 1/10) (pow.f64 (log.f64 10) 2))) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 10) 2/3)))"]],"time":83.44482421875,"type":"simplify"},{"compiler":[[4029,3172]],"time":62.63916015625,"type":"eval"},{"alts":[["(/.f64 (atan2.f64 im re) (log.f64 10))","done",0.874042529305326],["(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))))","done",0.10546875],["(/.f64 (/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) (cbrt.f64 (pow.f64 (log.f64 10) 2/3)))","next",0.109375],["(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))","done",0.09212875976844201]],"compiler":[[8,6],[15,13],[23,21],[15,13],[23,21]],"count":[[209,4]],"kept":[{"done":[2,2],"fresh":[1,0],"new":[205,1],"picked":[1,1]}],"min-error":[0],"time":45.2138671875,"type":"prune"},{"compiler":[[80,61]],"locations":[["(/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))",0.78515625,true],["(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))",0.826503759768442,true],["(log.f64 1/10)",1.0,false],["(cbrt.f64 (log.f64 1/10))",1.0,false]],"time":39.547119140625,"type":"localize"},{"count":[[2,48]],"series":[["(/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))","re","-inf",0.703125],["(/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))","re","inf",0.73583984375],["(/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))","re","0",5.846923828125],["(/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))","im","-inf",0.69091796875],["(/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))","im","inf",0.683837890625],["(/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))","im","0",11.77587890625],["(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","re","-inf",0.343017578125],["(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","re","inf",0.36083984375],["(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","re","0",0.22607421875],["(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","im","-inf",0.35498046875],["(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","im","inf",0.35302734375],["(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","im","0",0.408935546875]],"time":22.705078125,"type":"series"},{"count":[[2,163]],"inputs":[["(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 1/10) -1/3) 0) (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) 0) (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (*.f64 0 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))) (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log.f64 1/10) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))) (pow.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 1/10) -1/3) (neg.f64 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) 2/3) (cbrt.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (atan2.f64 im re))) (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 1/10) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 1/10) -1/3))) (/.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) -1/3)) (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 1/10) -1/3)) (atan2.f64 im re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (neg.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 1/10) -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))) (cbrt.f64 (pow.f64 (log.f64 1/10) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))) (neg.f64 (pow.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (atan2.f64 im re)) (neg.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))) (pow.f64 (atan2.f64 im re) 2/3)) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) -1/3)) (neg.f64 (atan2.f64 im re))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 1/10) -1/3))) (atan2.f64 im re)) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) 2/3) (cbrt.f64 (neg.f64 (atan2.f64 im re)))) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) 2/3) (cbrt.f64 (atan2.f64 im re))) (neg.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) 1) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (atan2.f64 im re))) (pow.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) 2/3)) (neg.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) 1) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (cbrt.f64 (log.f64 1/10))) (*.f64 (cbrt.f64 (log.f64 1/10)) (atan2.f64 im re))) (pow.f64 (log.f64 1/10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))) (*.f64 (cbrt.f64 (log.f64 1/10)) (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10))) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (cbrt.f64 (neg.f64 (log.f64 1/10)))) (*.f64 (cbrt.f64 (log.f64 1/10)) (neg.f64 (atan2.f64 im re)))) (*.f64 (cbrt.f64 (log.f64 1/10)) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (neg.f64 (pow.f64 (atan2.f64 im re) 3)) (log.f64 1/10)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (neg.f64 (pow.f64 (atan2.f64 im re) 3)) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) (*.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) 0) (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) (*.f64 0 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))) (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))) (pow.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) 2/3) (cbrt.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))) (*.f64 (pow.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) 2/3) (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) (/.f64 (pow.f64 (log.f64 1/10) -1/3) (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (atan2.f64 im re)) (/.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3) (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3)) (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 1/10) -1/3) (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3)) (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3)) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3) (cbrt.f64 (log.f64 1/10))) (neg.f64 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) 2/3) (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3)) (cbrt.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) (neg.f64 (pow.f64 (log.f64 1/10) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) (pow.f64 (log.f64 1/10) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 im re) (/.f64 1 (*.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) 1) (*.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) 1) (*.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) -1) (*.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)) (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3))) (*.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))) (*.f64 (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3)) (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))) (*.f64 (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3)) (atan2.f64 im re)) (*.f64 (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3)) (neg.f64 (atan2.f64 im re))) (*.f64 (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (*.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) 2/3) (cbrt.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) 2/3) (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))))) (cbrt.f64 (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3) (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))) (pow.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) 2/3)) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10)))) (pow.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) 2/3)) (cbrt.f64 (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (/.f64 (pow.f64 (log.f64 1/10) -1/3) (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3))) (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3))) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (atan2.f64 im re) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) 1) (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) 1) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3)) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (atan2.f64 im re))) (*.f64 (pow.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) 2/3) (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3))) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) 2/3) (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) -1) (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) 1) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))) (cbrt.f64 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) (neg.f64 (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) (neg.f64 (cbrt.f64 (cbrt.f64 (log.f64 1/10))))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) 1) (cbrt.f64 (neg.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) -1) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) -1) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (/.f64 (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (/.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (/.f64 (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (*.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (*.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (*.f64 (cbrt.f64 (log.f64 1/10)) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) (cbrt.f64 (neg.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (*.f64 (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (cbrt.f64 (log.f64 1/10)))) (*.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))) (neg.f64 (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (neg.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3)) (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))) (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))) (pow.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) 2/3)) (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) (pow.f64 (log.f64 1/10) -1/3)) (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) 1) (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) 1) (pow.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (atan2.f64 im re) 3)) (log.f64 1/10)) (pow.f64 (log.f64 10) (+.f64 2/3 2/3))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (atan2.f64 im re) (/.f64 (pow.f64 (pow.f64 (log.f64 10) 2/3) -2/3) (cbrt.f64 (log.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (atan2.f64 im re) 3)) (log.f64 1/10)) (pow.f64 (log.f64 10) (+.f64 2/3 2/3))))))))"]],"rules":[["egg-rr",101],["egg-rr",62]],"time":36.93798828125,"type":"rewrite"},{"count":[[211,166]],"inputs":[["(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (atan2.f64 im re)))","(/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 1/10)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (log.f64 10) 4)) 1/9) (atan2.f64 im re))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) -4) 1/9))"]],"time":155.764892578125,"type":"simplify"},{"compiler":[[6010,5102]],"time":88.575927734375,"type":"eval"},{"alts":[["(/.f64 (atan2.f64 im re) (log.f64 10))","done",0.874042529305326],["(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))))","done",0.10546875],["(/.f64 (/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) (cbrt.f64 (pow.f64 (log.f64 10) 2/3)))","done",0.109375],["(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))","done",0.09212875976844201]],"compiler":[[8,6],[15,13],[23,21],[15,13]],"count":[[225,4]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[221,0],"picked":[1,1]}],"min-error":[0],"time":56.18701171875,"type":"prune"},{"accuracy":[0.09212875976844202],"baseline":[0.09212875976844201],"branch":[["re",0.09212875976844202,1],["im",0.09212875976844202,1],["(/.f64 (atan2.f64 im re) (log.f64 10))",0.09212875976844202,1],["(atan2.f64 im re)",0.09212875976844202,1]],"compiler":[[3,2],[3,2],[8,6],[5,3],[102,81]],"count":[[7,1]],"inputs":[["(/.f64 (/.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) (cbrt.f64 (pow.f64 (log.f64 10) 2/3)))","(/.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (pow.f64 (pow.f64 (log.f64 10) 2/3) 2/3)) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3))))","(/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (log.f64 10) 2/3) (cbrt.f64 (log.f64 1/10))))","(/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10)))","(*.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -2/3)) (pow.f64 (log.f64 10) -1/3))","(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))","(/.f64 (atan2.f64 im re) (log.f64 10))"]],"link":["."],"name":["math.log10 on complex, imaginary part"],"oracle":[0.9619713379159782],"outputs":[["(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))"]],"time":14.34912109375,"times":[["re",3.68212890625],["im",3.622802734375],["(/.f64 (atan2.f64 im re) (log.f64 10))",2.341064453125],["(atan2.f64 im re)",2.469970703125]],"type":"regimes"},{"compiler":[[15,13]],"inputs":[["(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))","(/.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (log.f64 1/10)))"]],"stop":[["done",1]],"time":21.049072265625,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[15,13]],"remove-preprocessing":[[]],"time":13.214111328125,"type":"end"}]
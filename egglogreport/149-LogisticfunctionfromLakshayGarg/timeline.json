[{"compiler":[[13,12]],"method":["search"],"sampling":[[1,0.9990236759185791,0.0,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":0.19287109375,"type":"analyze"},{"outcomes":[["body",512,"valid",91.558837890625,1040],["body",1024,"valid",317.9658203125,2060],["body",256,"valid",201.300048828125,4933],["body",2048,"valid",43.556396484375,223]],"time":662.218017578125,"type":"sample"},{"compiler":[[12,11]],"inputs":[["0","1"],["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)","(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 y)))) 1)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)","(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)","(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 y)))) 1)","(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 y)))) -1)"]],"symmetry":[[]],"time":61.714111328125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)","(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)"]],"time":19.416015625,"type":"simplify"},{"compiler":[[22,20]],"time":0.450927734375,"type":"eval"},{"alts":[["(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)","next",27.720908701775]],"compiler":[[12,11],[12,11]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[27.720908701775],"time":0.929931640625,"type":"prune"},{"compiler":[[38,32]],"locations":[["(/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))",0.01171875,true],["(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)",2.4566261596699297,true]],"time":10.401123046875,"type":"localize"},{"count":[[2,16]],"series":[["(/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))","x","-inf",0.40087890625],["(/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))","x","inf",0.402099609375],["(/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))","x","0",0.191162109375],["(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)","x","-inf",0.610107421875],["(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)","x","inf",0.705810546875],["(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)","x","0",0.528076171875]],"time":2.925048828125,"type":"series"},{"count":[[2,161]],"inputs":[["(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)","(/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1) 0) (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1) (*.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)) (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1) (*.f64 0 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 3) (+.f64 (/.f64 (-.f64 (/.f64 -4 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2) (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 1)) (/.f64 1 (+.f64 (/.f64 (-.f64 (/.f64 -4 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2) (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 1 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)) (cbrt.f64 (pow.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2)) (cbrt.f64 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x))))))) (+.f64 -1 (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2)) (-.f64 1 (cbrt.f64 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x))))))) (+.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2)) (+.f64 1 (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))))) (-.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1) 2)) (cbrt.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 8 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -3) -1) (/.f64 1 (+.f64 (/.f64 (-.f64 (/.f64 -4 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2) (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 1 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (/.f64 (-.f64 (/.f64 -4 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2) (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 1)) (fma.f64 8 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 3)) (/.f64 1 (neg.f64 (+.f64 (/.f64 (-.f64 (/.f64 -4 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2) (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 8 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -3) -1) (cbrt.f64 (+.f64 (/.f64 (-.f64 (/.f64 -4 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2) (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 1))) (pow.f64 (cbrt.f64 (+.f64 (/.f64 (-.f64 (/.f64 -4 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2) (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 8 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -3) -1) (+.f64 (/.f64 (-.f64 (/.f64 -4 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2) (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 1/2)) 1) (*.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (*.f64 (*.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 1/2) -1)) (*.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (*.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 1/2)) (*.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 3) 3) -1) 1) (*.f64 (+.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 6) (fma.f64 8 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -3) 1)) (+.f64 (/.f64 (-.f64 (/.f64 -4 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2) (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 3)) 1) (*.f64 (neg.f64 (+.f64 (/.f64 (-.f64 (/.f64 -4 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2) (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 3)) (neg.f64 (+.f64 (/.f64 (-.f64 (/.f64 -4 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2) (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1) 2)) (cbrt.f64 (fma.f64 8 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -3) -1))) (cbrt.f64 (+.f64 (/.f64 (-.f64 (/.f64 -4 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2) (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 3)) 1) (neg.f64 (+.f64 (/.f64 (-.f64 (/.f64 -4 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2) (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 8 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -3) -1)) (cbrt.f64 (pow.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1) 2))) (cbrt.f64 (+.f64 (/.f64 (-.f64 (/.f64 -4 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2) (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (-.f64 -1 (exp.f64 (*.f64 -2 x))) 2) (+.f64 1 (exp.f64 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 2))) (cbrt.f64 (/.f64 8 (+.f64 1 (exp.f64 (*.f64 -2 x)))))) (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -2) (-.f64 -1 (exp.f64 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 8 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 2)) -1)) (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))) (+.f64 1 (exp.f64 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) (-.f64 -1 (exp.f64 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 8 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1) (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 2))) (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) (+.f64 1 (exp.f64 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))) (-.f64 -1 (exp.f64 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 3) 3) -1) (/.f64 1 (+.f64 (/.f64 (-.f64 (/.f64 -4 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2) (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 1))) (+.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 6) (fma.f64 8 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -3) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 8 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -3) -1) (neg.f64 (+.f64 (/.f64 (-.f64 (/.f64 -4 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2) (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 1 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 1 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) (neg.f64 1/3)) (*.f64 2 (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 2) (/.f64 (sqrt.f64 2) (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (sqrt.f64 8) (+.f64 1 (exp.f64 (*.f64 -2 x))))) (*.f64 (sqrt.f64 2) (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 2) (/.f64 (cbrt.f64 4) (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -2 (/.f64 1 (-.f64 -1 (exp.f64 (*.f64 -2 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))) (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -1 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 1 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2)) (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x)))) (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 0) (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) (*.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 0) (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))) (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) (*.f64 0 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x))))) (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) (/.f64 0 (*.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 1/2)) (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 (exp.f64 (*.f64 -2 x)))) (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (/.f64 (sqrt.f64 2) (+.f64 1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sqrt.f64 8) (+.f64 1 (exp.f64 (*.f64 -2 x))))) (*.f64 (sqrt.f64 2) (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (/.f64 (cbrt.f64 4) (+.f64 1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) (neg.f64 1/3)) (*.f64 2 (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (/.f64 1 (-.f64 -1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -2))) (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 2) (+.f64 1 (exp.f64 (*.f64 -2 x)))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -2))) (cbrt.f64 (/.f64 (sqrt.f64 8) (+.f64 1 (exp.f64 (*.f64 -2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 4) (+.f64 1 (exp.f64 (*.f64 -2 x)))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 (exp.f64 (*.f64 -2 x)))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x))))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 8 (+.f64 1 (exp.f64 (*.f64 -2 x))))) (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2)) (-.f64 0 (*.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 0))) (+.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2)) (+.f64 0 (*.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 0))) (-.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))) (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2)) (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 8 (+.f64 1 (exp.f64 (*.f64 -2 x))))) (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -2 (-.f64 -1 (exp.f64 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 8) (+.f64 1 (exp.f64 (*.f64 -2 x))))) (sqrt.f64 2)) (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) (neg.f64 1/3)) 2) (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))) (cbrt.f64 4)) (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2)) (cbrt.f64 2)) (cbrt.f64 (+.f64 1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2)) (cbrt.f64 -2)) (cbrt.f64 (-.f64 -1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -2))) (cbrt.f64 (+.f64 1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 8 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1) (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2))) (cbrt.f64 (+.f64 1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -2) (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2))) (cbrt.f64 (-.f64 -1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 2) (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -2)))) (cbrt.f64 (+.f64 1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -2 (cbrt.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 (*.f64 -2 x) 3)))) (/.f64 1 (-.f64 (exp.f64 (*.f64 x -4)) (expm1.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 -1) (-.f64 -1 (exp.f64 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 8 (+.f64 1 (exp.f64 (*.f64 -2 x))))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 8 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1) (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (-.f64 -1 (exp.f64 (*.f64 -2 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (*.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 1/2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (*.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 8 (+.f64 1 (exp.f64 (*.f64 -2 x)))))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) 1/2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) (neg.f64 1/3)) (*.f64 2 (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -2))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 2) (/.f64 (sqrt.f64 2) (+.f64 1 (exp.f64 (*.f64 -2 x)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (sqrt.f64 8) (+.f64 1 (exp.f64 (*.f64 -2 x))))) (*.f64 (sqrt.f64 2) (cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 (*.f64 -2 x))) -2))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 2 (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 2) (/.f64 (cbrt.f64 4) (+.f64 1 (exp.f64 (*.f64 -2 x)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -2 (/.f64 1 (-.f64 -1 (exp.f64 (*.f64 -2 x)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))) (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 2)) (cbrt.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1 0)))))"]],"rules":[["egg-rr",85],["egg-rr",76]],"time":33.682861328125,"type":"rewrite"},{"count":[[177,175]],"inputs":[["x","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(+.f64 (*.f64 -17/315 (pow.f64 x 7)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","1","(+.f64 1 x)","(+.f64 1 (+.f64 (*.f64 -1/3 (pow.f64 x 3)) x))","(+.f64 1 (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5)))))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) x)","(fma.f64 -1/3 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(+.f64 (*.f64 -17/315 (pow.f64 x 7)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(fma.f64 -17/315 (pow.f64 x 7) (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)))","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(+.f64 -1 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(+.f64 -1 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(+.f64 -1 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(+.f64 -1 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(+.f64 -1 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(+.f64 -1 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(+.f64 -1 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(+.f64 -1 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))))","1","(+.f64 1 x)","(+.f64 1 (+.f64 (*.f64 -1/3 (pow.f64 x 3)) x))","(+.f64 1 (fma.f64 -1/3 (pow.f64 x 3) x))","(+.f64 1 (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5)))))","(+.f64 1 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)))"]],"time":78.323974609375,"type":"simplify"},{"compiler":[[3306,3000]],"time":48.860107421875,"type":"eval"},{"alts":[["(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","next",33.38529000712595],["(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)","done",27.720908701775]],"compiler":[[13,10],[12,11],[13,10]],"count":[[176,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[175,1],"picked":[1,1]}],"min-error":[0],"time":39.637939453125,"type":"prune"},{"compiler":[[30,22]],"locations":[["(fma.f64 2/15 (pow.f64 x 5) x)",0.0078125,true],["(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))",19.316325747378034,true]],"time":9.208984375,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 2/15 (pow.f64 x 5) x)","x","-inf",0.40087890625],["(fma.f64 2/15 (pow.f64 x 5) x)","x","inf",0.385986328125],["(fma.f64 2/15 (pow.f64 x 5) x)","x","0",0.241943359375],["(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","x","-inf",0.48681640625],["(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","x","inf",0.506103515625],["(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","x","0",0.72607421875]],"time":2.838134765625,"type":"series"},{"count":[[2,82]],"inputs":[["(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(fma.f64 2/15 (pow.f64 x 5) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/3 (pow.f64 x 3) (*.f64 2/15 (pow.f64 x 5))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/3 (pow.f64 x 3)) (fma.f64 2/15 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2/15 (pow.f64 x 5) x) (*.f64 -1/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (fma.f64 -1/3 (pow.f64 x 3) (*.f64 2/15 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 -1/3 (pow.f64 x 3)) x) (*.f64 2/15 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/15 (pow.f64 x 5)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (fma.f64 -1/3 (pow.f64 x 3) (*.f64 2/15 (pow.f64 x 5))))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (fma.f64 -1/3 (pow.f64 x 3) (*.f64 2/15 (pow.f64 x 5))) -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -1/3 (pow.f64 x 3)) (neg.f64 (fma.f64 2/15 (pow.f64 x 5) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 -1/3 (pow.f64 x 3) (*.f64 2/15 (pow.f64 x 5))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 2/15 (pow.f64 x 5) x) (*.f64 1/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 -1/3 (pow.f64 x 3)) x) (*.f64 -2/15 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))) (pow.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) 2/3) (cbrt.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)))) (neg.f64 (pow.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (cbrt.f64 -1/3) x) 2) (-.f64 (pow.f64 (fma.f64 2/15 (pow.f64 x 5) x) 2/3) (*.f64 (*.f64 (cbrt.f64 -1/3) x) (cbrt.f64 (fma.f64 2/15 (pow.f64 x 5) x))))) (+.f64 (*.f64 (cbrt.f64 -1/3) x) (cbrt.f64 (fma.f64 2/15 (pow.f64 x 5) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 2/15 (pow.f64 x 5) x) 2/3) (-.f64 (pow.f64 (*.f64 (cbrt.f64 -1/3) x) 2) (*.f64 (cbrt.f64 (fma.f64 2/15 (pow.f64 x 5) x)) (*.f64 (cbrt.f64 -1/3) x)))) (+.f64 (cbrt.f64 (fma.f64 2/15 (pow.f64 x 5) x)) (*.f64 (cbrt.f64 -1/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/3 x) (*.f64 x x) (fma.f64 2/15 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/3 (*.f64 x x)) x (fma.f64 2/15 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 -1/3) x) (pow.f64 (*.f64 (cbrt.f64 -1/3) x) 2) (fma.f64 2/15 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/3) (*.f64 (cbrt.f64 1/9) (pow.f64 x 3)) (fma.f64 2/15 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 2/15 (pow.f64 x 5) x) 2/3) (cbrt.f64 (fma.f64 2/15 (pow.f64 x 5) x)) (*.f64 -1/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 2/15 (pow.f64 x 5) x)) (pow.f64 (fma.f64 2/15 (pow.f64 x 5) x) 2/3) (*.f64 -1/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3) -1/3 (fma.f64 2/15 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 2/15 (pow.f64 x 5) x)) (*.f64 -1/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/3 (pow.f64 x 3)) 1 (fma.f64 2/15 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -1/3 (pow.f64 x 3)) (fma.f64 2/15 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 2/15 (pow.f64 x 5) x) (*.f64 -1/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 2/15 (pow.f64 x 5) x) 1 (*.f64 -1/3 (pow.f64 x 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/15 (pow.f64 x 5)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 2/15 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 2/15 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2/15 (pow.f64 x 5) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 2/15 (pow.f64 x 5)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 -2/15 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 2/15 (pow.f64 x 5) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 2/15 (pow.f64 x 5) x)) (pow.f64 (fma.f64 2/15 (pow.f64 x 5) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 2/15 (pow.f64 x 5) x) 2/3) (cbrt.f64 (fma.f64 2/15 (pow.f64 x 5) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 2/15 (pow.f64 x 5) x))) (neg.f64 (pow.f64 (fma.f64 2/15 (pow.f64 x 5) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 (*.f64 4/225 (pow.f64 x 10))) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 2/15 (pow.f64 x 5)))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 2/15 (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 4/225 (pow.f64 x 10))) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (*.f64 2/15 (pow.f64 x 5))) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (*.f64 2/15 (pow.f64 x 5))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 2/15 (pow.f64 x 5) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 2/15 (pow.f64 x 5) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 2/15 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 2/15 (pow.f64 x 5) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 2/15 (pow.f64 x 5) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 2/15 (pow.f64 x 5) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 2/15 (pow.f64 x 5) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 2/15 (pow.f64 x 5) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 2/15 (pow.f64 x 5) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 2/15 (pow.f64 x 5) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 2/15 (pow.f64 x 5) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 2/15 (pow.f64 x 5) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2/15 (pow.f64 x 5) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 2/15 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 2/15 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 2/15) (*.f64 (sqrt.f64 2/15) (pow.f64 x 5)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 2/15 (pow.f64 x 5))) (cbrt.f64 (*.f64 4/225 (pow.f64 x 10))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2/15 (cbrt.f64 (pow.f64 x 5))) (cbrt.f64 (pow.f64 x 10)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 2/15) (*.f64 (cbrt.f64 4/225) (pow.f64 x 5)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 5) 2/15 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 2/15 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2/15 (pow.f64 x 5)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 2/15 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 2/15 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 2/15 (pow.f64 x 5)) x)))))"]],"rules":[["egg-rr",37],["egg-rr",45]],"time":45.6279296875,"type":"rewrite"},{"count":[[106,90]],"inputs":[["x","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(*.f64 2/15 (pow.f64 x 5))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 2/15 (pow.f64 x 5)))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5))))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5))))","(*.f64 2/15 (pow.f64 x 5))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 2/15 (pow.f64 x 5)))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5))))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5))))","x","(+.f64 (*.f64 2/15 (pow.f64 x 5)) x)","(+.f64 (*.f64 2/15 (pow.f64 x 5)) x)","(+.f64 (*.f64 2/15 (pow.f64 x 5)) x)","(*.f64 2/15 (pow.f64 x 5))","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(*.f64 2/15 (pow.f64 x 5))","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) x)","(fma.f64 -1/3 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(*.f64 2/15 (pow.f64 x 5))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 2/15 (pow.f64 x 5)))","(fma.f64 -1/3 (pow.f64 x 3) (*.f64 2/15 (pow.f64 x 5)))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5))))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5))))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(*.f64 2/15 (pow.f64 x 5))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 2/15 (pow.f64 x 5)))","(fma.f64 -1/3 (pow.f64 x 3) (*.f64 2/15 (pow.f64 x 5)))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5))))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5))))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","x","(+.f64 (*.f64 2/15 (pow.f64 x 5)) x)","(fma.f64 2/15 (pow.f64 x 5) x)","(+.f64 (*.f64 2/15 (pow.f64 x 5)) x)","(fma.f64 2/15 (pow.f64 x 5) x)","(+.f64 (*.f64 2/15 (pow.f64 x 5)) x)","(fma.f64 2/15 (pow.f64 x 5) x)","(*.f64 2/15 (pow.f64 x 5))","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(fma.f64 2/15 (pow.f64 x 5) x)","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(fma.f64 2/15 (pow.f64 x 5) x)","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(fma.f64 2/15 (pow.f64 x 5) x)","(*.f64 2/15 (pow.f64 x 5))","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(fma.f64 2/15 (pow.f64 x 5) x)","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(fma.f64 2/15 (pow.f64 x 5) x)","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(fma.f64 2/15 (pow.f64 x 5) x)"]],"time":84.125,"type":"simplify"},{"compiler":[[1352,1034]],"time":21.219970703125,"type":"eval"},{"alts":[["(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","done",33.38529000712595],["(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)","done",27.720908701775]],"compiler":[[13,10],[12,11]],"count":[[92,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[90,0],"picked":[1,1]}],"min-error":[0],"time":12.68408203125,"type":"prune"},{"accuracy":[0],"baseline":[27.720908701775],"branch":[["x",0,3],["y",20.73410130624487,9],["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)",0,3],["(/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))",0,3],["(/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))",0,3],["(+.f64 1 (exp.f64 (*.f64 -2 x)))",0,3],["(+.f64 1 (exp.f64 (*.f64 -2 x)))",0,3],["(exp.f64 (*.f64 -2 x))",0,3],["(exp.f64 (*.f64 -2 x))",0,3],["(*.f64 -2 x)",0,3],["(*.f64 -2 x)",0,3]],"compiler":[[3,2],[3,2],[12,11],[10,9],[10,9],[8,7],[8,7],[6,5],[6,5],[5,4],[5,4],[33,28]],"count":[[3,3]],"inputs":[["(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)","(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)"]],"link":["."],"name":["Logistic function from Lakshay Garg"],"oracle":[61.1061987089009],"outputs":[["(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)"]],"time":75.77490234375,"times":[["x",7.429931640625],["y",21.558837890625],["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)",4.380859375],["(/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))",4.450927734375],["(/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))",4.368896484375],["(+.f64 1 (exp.f64 (*.f64 -2 x)))",4.223876953125],["(+.f64 1 (exp.f64 (*.f64 -2 x)))",4.265869140625],["(exp.f64 (*.f64 -2 x))",4.3330078125],["(exp.f64 (*.f64 -2 x))",4.20703125],["(*.f64 -2 x)",7.889892578125],["(*.f64 -2 x)",7.4560546875]],"type":"regimes"},{"bstep":[[0.00019563268756774205,14.429106844547825,0.032958984375],[-1778798.6917585193,-0.0013626466248336448,0.092041015625]],"compiler":[[12,11],[5,4]],"method":["left-value","left-value"],"time":0.22607421875,"type":"bsearch"},{"compiler":[[45,38]],"inputs":[["(if (<=.f64 (*.f64 -2 x) -1000000) (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1) (if (<=.f64 (*.f64 -2 x) 7378697629483821/36893488147419103232) (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (*.f64 -2 x) -1000000) (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1) (if (<=.f64 (*.f64 -2 x) 7378697629483821/36893488147419103232) (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)))"]],"stop":[["done",1]],"time":23.333984375,"type":"simplify"},{"time":0.02197265625,"type":"soundness"},{"compiler":[[45,38]],"remove-preprocessing":[[]],"time":19.655029296875,"type":"end"}]
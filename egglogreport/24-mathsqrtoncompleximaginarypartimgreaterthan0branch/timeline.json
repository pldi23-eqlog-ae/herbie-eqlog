[{"compiler":[[20,14]],"method":["search"],"sampling":[[12,0.34780462936032563,0.15170720859896392,0.5004881620407104],[11,0.3365851251874119,0.16292671277187765,0.5004881620407104],[10,0.32195098930969834,0.1775608486495912,0.5004881620407104],[9,0.3004875900223851,0.19902424793690443,0.5004881620407104],[8,0.2731705363839865,0.22634130157530308,0.5004881620407104],[7,0.23414617404341698,0.2653656639158726,0.5004881620407104],[6,0.18731693923473358,0.31219489872455597,0.5004881620407104],[5,0.12487795948982239,0.37463387846946716,0.5004881620407104],[4,0.062438979744911194,0.43707285821437836,0.5004881620407104],[3,0.0,0.49951183795928955,0.5004881620407104],[2,0.0,0.49951183795928955,0.5004881620407104],[1,0.0,0.49951183795928955,0.5004881620407104],[0,0.0,0.49951183795928955,0.5004881620407104]],"time":74.302001953125,"type":"analyze"},{"outcomes":[["body",4096,"valid",138.583740234375,582],["body",1024,"valid",59.186279296875,415],["body",512,"valid",23.164306640625,235],["body",2048,"valid",126.857177734375,677],["body",256,"valid",343.1005859375,6347]],"time":699.6630859375,"type":"sample"},{"compiler":[[17,12]],"inputs":[["0","1"],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (-.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (-.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re))) im))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (-.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))","(sqrt.f64 (*.f64 (*.f64 -2 (-.f64 re (hypot.f64 im re))) 1/4))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (-.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re))) im))))","(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 im (hypot.f64 im re)))))"]],"symmetry":[[]],"time":62.282958984375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 1/2 (sqrt.f64 (*.f64 2 (-.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (sqrt.f64 (*.f64 2 (-.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))","(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (hypot.f64 re im)))))"]],"time":20.449951171875,"type":"simplify"},{"compiler":[[27,19]],"time":1.505126953125,"type":"eval"},{"alts":[["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (hypot.f64 re im)))))","next",13.649392540296237]],"compiler":[[12,9],[12,9]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[13.649392540296237],"time":0.906005859375,"type":"prune"},{"compiler":[[40,17]],"locations":[["(hypot.f64 re im)",0.00390625,true],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (hypot.f64 re im)))))",0.00390625,true],["(-.f64 re (hypot.f64 re im))",0.7712326283710756,true]],"time":7.10302734375,"type":"localize"},{"count":[[3,48]],"series":[["(hypot.f64 re im)","im","-inf",0.27001953125],["(hypot.f64 re im)","im","inf",0.239013671875],["(hypot.f64 re im)","im","0",0.18505859375],["(hypot.f64 re im)","re","-inf",0.22607421875],["(hypot.f64 re im)","re","inf",0.201171875],["(hypot.f64 re im)","re","0",0.2880859375],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (hypot.f64 re im)))))","im","-inf",0.4169921875],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (hypot.f64 re im)))))","im","inf",0.843994140625],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (hypot.f64 re im)))))","im","0",1.005126953125],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (hypot.f64 re im)))))","re","-inf",0.5498046875],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (hypot.f64 re im)))))","re","inf",0.903076171875],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (hypot.f64 re im)))))","re","0",0.9150390625],["(-.f64 re (hypot.f64 re im))","im","-inf",0.254150390625],["(-.f64 re (hypot.f64 re im))","im","inf",0.298828125],["(-.f64 re (hypot.f64 re im))","im","0",0.553955078125],["(-.f64 re (hypot.f64 re im))","re","-inf",0.4560546875],["(-.f64 re (hypot.f64 re im))","re","inf",0.683837890625],["(-.f64 re (hypot.f64 re im))","re","0",0.510009765625]],"time":9.06884765625,"type":"series"},{"count":[[3,121]],"inputs":[["(-.f64 re (hypot.f64 re im))","(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (hypot.f64 re im)))))","(hypot.f64 re im)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 re (hypot.f64 re im)) 0) (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 re (hypot.f64 re im)) (*.f64 (-.f64 re (hypot.f64 re im)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 re (hypot.f64 re im)) 1/2) (*.f64 (-.f64 re (hypot.f64 re im)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 re (hypot.f64 re im))) (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 re (hypot.f64 re im)) (*.f64 0 (-.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 re (hypot.f64 re im))) (*.f64 1/2 (-.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 re (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (hypot.f64 re im)) re)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (hypot.f64 re im) re))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (hypot.f64 re im)) (neg.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 re (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 re 0) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (hypot.f64 re im) re))) (cbrt.f64 (pow.f64 (-.f64 re (hypot.f64 re im)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 re re)) (+.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2)) (cbrt.f64 (*.f64 re (hypot.f64 re im))))) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 re (hypot.f64 re im))) (cbrt.f64 (pow.f64 (-.f64 re (hypot.f64 re im)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 re (hypot.f64 re im)) 2)) (cbrt.f64 (-.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 re (hypot.f64 re im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (hypot.f64 re im) re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (hypot.f64 re im) re) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 re) (neg.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (hypot.f64 re im) re)) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 re (hypot.f64 re im)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 re (hypot.f64 re im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 re (hypot.f64 re im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 re (hypot.f64 re im))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 re (hypot.f64 re im))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 re (hypot.f64 re im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 re (hypot.f64 re im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (hypot.f64 re im) re))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (hypot.f64 re im) re) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 re (hypot.f64 re im)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 re) (cbrt.f64 (*.f64 re re)) (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (hypot.f64 re im)) (neg.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2))) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (hypot.f64 re im))) (cbrt.f64 (pow.f64 (hypot.f64 re im) 2)) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 re re)) (cbrt.f64 re) (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 re (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (hypot.f64 re im)) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (hypot.f64 re im) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 re) (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 re 1 (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 re (hypot.f64 re im)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))) 0) (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))) (*.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))) 1/2) (*.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))) (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))) (*.f64 0 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))) (*.f64 1/2 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))) (sqrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))) (cbrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))) (cbrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))))) (fabs.f64 (cbrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))) (pow.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))) 0) (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (hypot.f64 re im) re)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (hypot.f64 re im) 0) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (hypot.f64 re im) (*.f64 (hypot.f64 re im) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (hypot.f64 re im) 1/2) (*.f64 (hypot.f64 re im) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (hypot.f64 re im)) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (hypot.f64 re im) (*.f64 0 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (hypot.f64 re im)) (*.f64 1/2 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (hypot.f64 re im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (hypot.f64 re im)) (sqrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (sqrt.f64 (hypot.f64 re im))) (*.f64 -1 (sqrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (hypot.f64 re im)) -1) (*.f64 (sqrt.f64 (hypot.f64 re im)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2)) (cbrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 re im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (hypot.f64 re im)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 re im) (pow.f64 (hypot.f64 re im) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 re im) 0) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (hypot.f64 re im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 re im)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 re im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 re im)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 re im)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 re im) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 re im) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 4) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (hypot.f64 re im) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (hypot.f64 re im) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 re im)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 im re)))))"]],"rules":[["egg-rr",35],["egg-rr",40],["egg-rr",46]],"time":30.773193359375,"type":"rewrite"},{"count":[[169,179]],"inputs":[["(*.f64 -1 im)","(+.f64 re (*.f64 -1 im))","(+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))","(*.f64 -1/2 (/.f64 (pow.f64 im 2) re))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 re 7))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(*.f64 2 re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(*.f64 -1/2 (/.f64 (pow.f64 im 2) re))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 re 3)) 2) (*.f64 1/16 (/.f64 1 (pow.f64 re 6)))) (pow.f64 im 8)) re)) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(*.f64 -1 im)","(+.f64 re (*.f64 -1 im))","(+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))","im","(+.f64 re im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","im","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im)","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) im)))","re","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(*.f64 -1 re)","(+.f64 (*.f64 -1 re) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(+.f64 (*.f64 -1 re) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(+.f64 (*.f64 -1 re) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","re","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","im","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im)","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) im)))","(*.f64 -1 im)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 (*.f64 -1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 im)","(neg.f64 im)","(+.f64 re (*.f64 -1 im))","(-.f64 re im)","(+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 re (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))","(fma.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 re (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im))))","(*.f64 -1/2 (/.f64 (pow.f64 im 2) re))","(/.f64 (*.f64 -1/2 (*.f64 im im)) re)","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 re 7))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 1/2 (/.f64 (fma.f64 1/16 (pow.f64 im 8) (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2)) (pow.f64 re 7)) (fma.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re))))","(*.f64 2 re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (*.f64 2 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 (/.f64 (*.f64 im im) re) 1/2 (fma.f64 2 re (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 (/.f64 (*.f64 im im) re) 1/2 (fma.f64 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) 1/16 (fma.f64 2 re (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3)))))","(*.f64 -1/2 (/.f64 (pow.f64 im 2) re))","(/.f64 (*.f64 -1/2 (*.f64 im im)) re)","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 re 3)) 2) (*.f64 1/16 (/.f64 1 (pow.f64 re 6)))) (pow.f64 im 8)) re)) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 (/.f64 (*.f64 (fma.f64 1/16 (pow.f64 re -6) (pow.f64 (pow.f64 (/.f64 -1/2 re) 3) 2)) (pow.f64 im 8)) re) 1/2 (fma.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re))))","(*.f64 -1 im)","(neg.f64 im)","(+.f64 re (*.f64 -1 im))","(-.f64 re im)","(+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 re (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))","(fma.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 re (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im))))","im","(+.f64 re im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 re im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 re im)))","im","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im)","(fma.f64 1/2 (/.f64 (*.f64 re re) im) im)","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) im)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 (/.f64 (*.f64 re re) im) 1/2 (fma.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5)) im)))","re","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) re)","(fma.f64 1/2 (/.f64 (*.f64 im im) re) re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 (/.f64 (*.f64 im im) re) 1/2 (fma.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) -1/8 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 (/.f64 (*.f64 im im) re) 1/2 (fma.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (fma.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) -1/8 re)))","(*.f64 -1 re)","(neg.f64 re)","(+.f64 (*.f64 -1 re) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(fma.f64 (/.f64 (*.f64 im im) re) -1/2 (neg.f64 re))","(+.f64 (*.f64 -1 re) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(-.f64 (fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re)) re)","(+.f64 (*.f64 -1 re) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(-.f64 (fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re))) re)","re","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) re)","(fma.f64 1/2 (/.f64 (*.f64 im im) re) re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 (/.f64 (*.f64 im im) re) 1/2 (fma.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) -1/8 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 (/.f64 (*.f64 im im) re) 1/2 (fma.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (fma.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) -1/8 re)))","im","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im)","(fma.f64 1/2 (/.f64 (*.f64 re re) im) im)","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) im)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 (/.f64 (*.f64 re re) im) 1/2 (fma.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5)) im)))","(*.f64 -1 im)","(neg.f64 im)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))","(fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(fma.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im)))","(+.f64 (*.f64 -1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))","(fma.f64 (/.f64 (pow.f64 re 6) (pow.f64 im 5)) -1/16 (fma.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im))))"]],"time":157.35791015625,"type":"simplify"},{"compiler":[[3135,1987]],"time":37.81494140625,"type":"eval"},{"alts":[["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))))","fresh",55.78502343306061],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","fresh",53.70147470250502],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (hypot.f64 re im)))))","done",13.649392540296237],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (neg.f64 im))))","fresh",31.475829992306036],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)))))","next",14.672425051997138]],"compiler":[[24,20],[14,12],[12,9],[9,8],[15,12],[24,20],[14,12],[9,8],[15,12]],"count":[[180,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[179,4],"picked":[1,1]}],"min-error":[7.195824815750364],"time":44.30712890625,"type":"prune"},{"compiler":[[63,32]],"locations":[["(hypot.f64 re im)",0.00390625,false],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)))))",0.00390625,true],["(pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)",0.52734375,true],["(-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2))",7.345497208937994,true]],"time":13.544921875,"type":"localize"},{"count":[[3,18]],"series":[["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)))))","im","-inf",0.68896484375],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)))))","im","inf",1.22412109375],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)))))","im","0",1.68310546875],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)))))","re","-inf",0.531982421875],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)))))","re","inf",0.995849609375],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)))))","re","0",0.2890625],["(pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)","im","-inf",0.343994140625],["(pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)","im","inf",0.369140625],["(pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)","im","0",0.242919921875],["(pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)","re","-inf",0.634033203125],["(pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)","re","inf",0.468994140625],["(pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)","re","0",0.526123046875],["(-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2))","im","-inf",0.41015625],["(-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2))","im","inf",0.663818359375],["(-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2))","im","0",1.9599609375],["(-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2))","re","-inf",0.280029296875],["(-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2))","re","inf",0.39599609375],["(-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2))","re","0",0.583984375]],"time":12.576904296875,"type":"series"},{"count":[[3,188]],"inputs":[["(-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2))","(pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)","(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 re (hypot.f64 re im)) 0) (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 re (hypot.f64 re im)) (*.f64 (-.f64 re (hypot.f64 re im)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 re (hypot.f64 re im)) 1/2) (*.f64 (-.f64 re (hypot.f64 re im)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 re (hypot.f64 re im))) (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 re (hypot.f64 re im)) (*.f64 0 (-.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 re (hypot.f64 re im))) (*.f64 1/2 (-.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 re (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (hypot.f64 re im)) re)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (hypot.f64 re im)) (neg.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 re (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (hypot.f64 re im) re))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 re 0) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (-.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (hypot.f64 re im) re))) (cbrt.f64 (pow.f64 (-.f64 re (hypot.f64 re im)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 re re)) (+.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2)) (cbrt.f64 (*.f64 re (hypot.f64 re im))))) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 re (hypot.f64 re im))) (cbrt.f64 (pow.f64 (-.f64 re (hypot.f64 re im)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 re (hypot.f64 re im)) 2)) (cbrt.f64 (-.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 2 (-.f64 re (hypot.f64 re im))) 4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (hypot.f64 re im) re)) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 re (hypot.f64 re im)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 re (hypot.f64 re im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (hypot.f64 re im) re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (hypot.f64 re im) re) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 re) (neg.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (-.f64 re (hypot.f64 re im))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 re (hypot.f64 re im)) 8) 8)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -2 (-.f64 re (hypot.f64 re im))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (-.f64 re (hypot.f64 re im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 re (hypot.f64 re im)) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 re (hypot.f64 re im)) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 re (hypot.f64 re im)) (cbrt.f64 2)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 4) (-.f64 re (hypot.f64 re im))) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 2 (-.f64 re (hypot.f64 re im)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 2 (-.f64 re (hypot.f64 re im))) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 2 (-.f64 re (hypot.f64 re im))) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 2 (-.f64 re (hypot.f64 re im))) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 2 (-.f64 re (hypot.f64 re im))) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 2 (-.f64 re (hypot.f64 re im))) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 2 re) (*.f64 2 (hypot.f64 re im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 2 re) 2) (*.f64 2 (*.f64 2 (hypot.f64 re im)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 re (hypot.f64 re im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 re (hypot.f64 re im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 re (hypot.f64 re im))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 re (hypot.f64 re im))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 re (hypot.f64 re im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 re (hypot.f64 re im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (hypot.f64 re im) re) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (hypot.f64 re im) re))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 re (hypot.f64 re im)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 re) (cbrt.f64 (*.f64 re re)) (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (hypot.f64 re im))) (cbrt.f64 (pow.f64 (hypot.f64 re im) 2)) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (hypot.f64 re im)) (neg.f64 (sqrt.f64 (hypot.f64 re im))) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (hypot.f64 re im)) (neg.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2))) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (hypot.f64 re im))) (sqrt.f64 (hypot.f64 re im)) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 re re)) (cbrt.f64 re) (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 re (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (hypot.f64 re im) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (hypot.f64 re im)) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 re) (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 re 1 (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 0 (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 re (hypot.f64 re im)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (hypot.f64 re im) 0) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (hypot.f64 re im) (*.f64 (hypot.f64 re im) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (hypot.f64 re im) 1/2) (*.f64 (hypot.f64 re im) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (hypot.f64 re im)) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (hypot.f64 re im) (*.f64 0 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (hypot.f64 re im)) (*.f64 1/2 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (hypot.f64 re im)) (sqrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (hypot.f64 re im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (hypot.f64 re im))) (neg.f64 (sqrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (hypot.f64 re im))) (pow.f64 (hypot.f64 re im) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2)) (cbrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (hypot.f64 re im) 3/2)) (sqrt.f64 (sqrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (hypot.f64 re im))) (sqrt.f64 (pow.f64 (hypot.f64 re im) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 re im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (hypot.f64 re im)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 re im) (+.f64 1/3 1/2)) (cbrt.f64 (sqrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 2 (hypot.f64 re im)) 4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 re im) (pow.f64 (hypot.f64 re im) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 re im) 0) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (hypot.f64 re im)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (hypot.f64 re im)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (hypot.f64 re im) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (hypot.f64 re im) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (hypot.f64 re im) (cbrt.f64 2)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (hypot.f64 re im) -2) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (hypot.f64 re im) (cbrt.f64 4)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (hypot.f64 re im) 8) 8)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (hypot.f64 re im)) (sqrt.f64 (*.f64 4 (hypot.f64 re im)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 2 (hypot.f64 re im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 2 (hypot.f64 re im)) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 2 (hypot.f64 re im)) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 2 (hypot.f64 re im)) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 2 (hypot.f64 re im)) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 2 (hypot.f64 re im)) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 2 (hypot.f64 re im)) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 2 (hypot.f64 re im))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (hypot.f64 re im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 re im)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 re im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (hypot.f64 re im))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 3/2) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (hypot.f64 re im))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 re im)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 re im)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 3/2) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (hypot.f64 re im)) (*.f64 6 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 re im) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 re im) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (hypot.f64 re im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 4) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (hypot.f64 re im) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (hypot.f64 re im) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 re im)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 im re)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) 0) (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) (*.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) 1/2) (*.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) (*.f64 0 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) (*.f64 1/2 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))))) (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))) (fabs.f64 (cbrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) (sqrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) (cbrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) (cbrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 2 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) 4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) (pow.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) 0) (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) -2) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) 8) 8)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 2 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 2 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) (cbrt.f64 2)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) (cbrt.f64 4)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 2 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 2 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 2 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 2 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 2 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 2 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fabs.f64 (*.f64 2 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (*.f64 (-.f64 (hypot.f64 re im) re) 1/2))))))))"]],"rules":[["egg-rr",59],["egg-rr",62],["egg-rr",67]],"time":35.552978515625,"type":"rewrite"},{"count":[[206,218]],"inputs":[["(*.f64 -1 im)","(+.f64 re (*.f64 -1 im))","(+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 re 4) (+.f64 (*.f64 -1 (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 im 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 im 3))))) (*.f64 1/16 (/.f64 1 (pow.f64 im 3)))))) (+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))","re","re","(*.f64 -1/2 (/.f64 (pow.f64 im 2) re))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 -1 (*.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 re 3))) (*.f64 -1 (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 re 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 re 3)))))) (pow.f64 im 4))))","(+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 -1 (*.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 re 3))) (*.f64 -1 (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 re 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 re 3)))))) (pow.f64 im 4)))))","(+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 (-.f64 (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 re 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 re 3)))))) 2) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 re 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 re 3)))) 2) re)) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 re 3)) 2) (*.f64 1/16 (/.f64 1 (pow.f64 re 6)))) re)))) (pow.f64 im 8)) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 -1 (*.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 re 3))) (*.f64 -1 (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 re 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 re 3)))))) (pow.f64 im 4))))))","im","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 (*.f64 (pow.f64 re 4) (+.f64 (*.f64 -1 (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 im 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 im 3))))) (*.f64 1/16 (/.f64 1 (pow.f64 im 3))))) im))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) (+.f64 (*.f64 (pow.f64 re 4) (+.f64 (*.f64 -1 (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 im 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 im 3))))) (*.f64 1/16 (/.f64 1 (pow.f64 im 3))))) im)))","re","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 re 3))) (*.f64 -1 (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 re 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 re 3)))))) (pow.f64 im 4)) re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 re 3))) (*.f64 -1 (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 re 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 re 3)))))) (pow.f64 im 4)) re)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 im)","(neg.f64 im)","(+.f64 re (*.f64 -1 im))","(-.f64 re im)","(+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 re (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 re 4) (+.f64 (*.f64 -1 (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 im 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 im 3))))) (*.f64 1/16 (/.f64 1 (pow.f64 im 3)))))) (+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))","(fma.f64 (neg.f64 (pow.f64 re 4)) (fma.f64 1/16 (pow.f64 im -3) (neg.f64 (fma.f64 1/16 (pow.f64 im -3) (pow.f64 (/.f64 1/2 im) 3)))) (+.f64 re (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im))))","re","re","(*.f64 -1/2 (/.f64 (pow.f64 im 2) re))","(/.f64 (*.f64 -1/2 (*.f64 im im)) re)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 -1 (*.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 re 3))) (*.f64 -1 (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 re 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 re 3)))))) (pow.f64 im 4))))","(fma.f64 -1/2 (/.f64 (*.f64 im im) re) (*.f64 (neg.f64 (pow.f64 im 4)) (fma.f64 1/16 (pow.f64 re -3) (neg.f64 (fma.f64 1/16 (pow.f64 re -3) (pow.f64 (/.f64 1/2 re) 3))))))","(+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 -1 (*.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 re 3))) (*.f64 -1 (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 re 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 re 3)))))) (pow.f64 im 4)))))","(fma.f64 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) -1/16 (fma.f64 -1/2 (/.f64 (*.f64 im im) re) (*.f64 (neg.f64 (pow.f64 im 4)) (fma.f64 1/16 (pow.f64 re -3) (neg.f64 (fma.f64 1/16 (pow.f64 re -3) (pow.f64 (/.f64 1/2 re) 3)))))))","(+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 (-.f64 (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 re 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 re 3)))))) 2) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 re 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 re 3)))) 2) re)) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 re 3)) 2) (*.f64 1/16 (/.f64 1 (pow.f64 re 6)))) re)))) (pow.f64 im 8)) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 -1 (*.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 re 3))) (*.f64 -1 (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 re 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 re 3)))))) (pow.f64 im 4))))))","(fma.f64 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) -1/16 (fma.f64 (-.f64 (/.f64 (*.f64 1/4 (pow.f64 (fma.f64 1/16 (pow.f64 re -3) (pow.f64 (/.f64 1/2 re) 3)) 2)) re) (/.f64 (+.f64 (*.f64 -1/2 (fma.f64 (pow.f64 re -6) 1/16 (pow.f64 (pow.f64 (/.f64 -1/2 re) 3) 2))) (*.f64 1/4 (pow.f64 (fma.f64 1/16 (pow.f64 re -3) (pow.f64 (/.f64 1/2 re) 3)) 2))) re)) (pow.f64 im 8) (fma.f64 -1/2 (/.f64 (*.f64 im im) re) (*.f64 (neg.f64 (pow.f64 im 4)) (fma.f64 1/16 (pow.f64 re -3) (neg.f64 (fma.f64 1/16 (pow.f64 re -3) (pow.f64 (/.f64 1/2 re) 3))))))))","im","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im)","(fma.f64 1/2 (/.f64 (*.f64 re re) im) im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 (*.f64 (pow.f64 re 4) (+.f64 (*.f64 -1 (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 im 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 im 3))))) (*.f64 1/16 (/.f64 1 (pow.f64 im 3))))) im))","(fma.f64 1/2 (/.f64 (*.f64 re re) im) (fma.f64 (pow.f64 re 4) (fma.f64 1/16 (pow.f64 im -3) (neg.f64 (fma.f64 1/16 (pow.f64 im -3) (pow.f64 (/.f64 1/2 im) 3)))) im))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) (+.f64 (*.f64 (pow.f64 re 4) (+.f64 (*.f64 -1 (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 im 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 im 3))))) (*.f64 1/16 (/.f64 1 (pow.f64 im 3))))) im)))","(fma.f64 1/2 (/.f64 (*.f64 re re) im) (fma.f64 (/.f64 (pow.f64 re 6) (pow.f64 im 5)) 1/16 (fma.f64 (pow.f64 re 4) (fma.f64 1/16 (pow.f64 im -3) (neg.f64 (fma.f64 1/16 (pow.f64 im -3) (pow.f64 (/.f64 1/2 im) 3)))) im)))","re","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) re)","(fma.f64 1/2 (/.f64 (*.f64 im im) re) re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 re 3))) (*.f64 -1 (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 re 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 re 3)))))) (pow.f64 im 4)) re))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 (pow.f64 im 4) (fma.f64 1/16 (pow.f64 re -3) (neg.f64 (fma.f64 1/16 (pow.f64 re -3) (pow.f64 (/.f64 1/2 re) 3)))) re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 re 3))) (*.f64 -1 (+.f64 (pow.f64 (*.f64 1/4 (sqrt.f64 (/.f64 1 (pow.f64 re 3)))) 2) (*.f64 1/8 (/.f64 1 (pow.f64 re 3)))))) (pow.f64 im 4)) re)))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (fma.f64 (pow.f64 im 4) (fma.f64 1/16 (pow.f64 re -3) (neg.f64 (fma.f64 1/16 (pow.f64 re -3) (pow.f64 (/.f64 1/2 re) 3)))) re)))"]],"time":73.0400390625,"type":"simplify"},{"compiler":[[5207,3468]],"time":64.5439453125,"type":"eval"},{"alts":[["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))))","fresh",55.78502343306061],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","fresh",53.70147470250502],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (neg.f64 im))))","next",31.475829992306036],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (hypot.f64 re im)))))","done",13.649392540296237],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)))))","done",14.672425051997138]],"compiler":[[24,20],[14,12],[9,8],[12,9],[15,12],[24,20],[14,12],[9,8]],"count":[[285,5]],"kept":[{"done":[1,1],"fresh":[3,2],"new":[280,1],"picked":[1,1]}],"min-error":[7.195824815750364],"time":105.26904296875,"type":"prune"},{"compiler":[[24,16]],"time":5.51708984375,"type":"localize"},{"compiler":[[2,2]],"time":0.116943359375,"type":"eval"},{"alts":[["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))))","fresh",55.78502343306061],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","next",53.70147470250502],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (neg.f64 im))))","done",31.475829992306036],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (hypot.f64 re im)))))","done",13.649392540296237],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)))))","done",14.672425051997138]],"compiler":[[24,20],[14,12],[9,8],[12,9],[15,12],[24,20],[14,12]],"count":[[5,5]],"kept":[{"done":[2,2],"fresh":[2,2],"new":[0,0],"picked":[1,1]}],"min-error":[7.195824815750364],"time":2.43798828125,"type":"prune"},{"compiler":[[55,42]],"locations":[["(*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))",0.01171875,true],["(/.f64 (pow.f64 im 2) re)",6.694267068492117,true],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))",18.251122312070923,true]],"time":14.9990234375,"type":"localize"},{"count":[[3,36]],"series":[["(*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","re","-inf",0.178955078125],["(*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","re","inf",0.1591796875],["(*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","re","0",0.1708984375],["(*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","im","-inf",0.223876953125],["(*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","im","inf",0.178955078125],["(*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","im","0",1.54296875],["(/.f64 (pow.f64 im 2) re)","re","-inf",0.315185546875],["(/.f64 (pow.f64 im 2) re)","re","inf",0.419921875],["(/.f64 (pow.f64 im 2) re)","re","0",0.610107421875],["(/.f64 (pow.f64 im 2) re)","im","-inf",0.220947265625],["(/.f64 (pow.f64 im 2) re)","im","inf",0.970947265625],["(/.f64 (pow.f64 im 2) re)","im","0",2.801025390625],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","re","-inf",0.653076171875],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","re","inf",0.63916015625],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","re","0",0.877197265625],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","im","-inf",0.47119140625],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","im","inf",0.94091796875],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","im","0",1.09619140625]],"time":12.927001953125,"type":"series"},{"count":[[3,212]],"inputs":[["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(/.f64 (pow.f64 im 2) re)","(*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)) (*.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)) 1/2) (*.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)) 0) (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)) (*.f64 0 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))) (*.f64 1/2 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))) (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))))) (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))) (fabs.f64 (cbrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))) (fabs.f64 (cbrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))) (cbrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)) (pow.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)) 0) (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))) (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)) (cbrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (fabs.f64 (*.f64 -1/2 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (*.f64 -1/2 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/2 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (*.f64 -1/2 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 2 (*.f64 -1/2 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 im im) re) (*.f64 (/.f64 (*.f64 im im) re) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) re) (/.f64 (*.f64 1/2 (*.f64 im im)) re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 im im) re) 0) (/.f64 (*.f64 im im) re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 im im) re) (*.f64 0 (/.f64 (*.f64 im im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 im im) re)) (/.f64 (*.f64 im im) re))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (*.f64 im im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 re)) (neg.f64 (/.f64 (*.f64 im im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 im im) re)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 im im) re) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 im (/.f64 im re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 im im) re) 2)) (cbrt.f64 (/.f64 (*.f64 im im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -2 (cbrt.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -2) (*.f64 (cbrt.f64 4) (/.f64 (*.f64 -1/2 (*.f64 im im)) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) 2)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) (cbrt.f64 -2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 im im)) (/.f64 -1 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 im im)) (/.f64 (cbrt.f64 (pow.f64 im 4)) re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 im (cbrt.f64 re)) (/.f64 im (cbrt.f64 (*.f64 re re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 im im) (/.f64 1 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 re) (*.f64 im im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 im im) re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 re)) (/.f64 (*.f64 im im) (cbrt.f64 (*.f64 re re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 im im) re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) 2)) -2) (cbrt.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) 2)) (*.f64 -2 (cbrt.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 im re) im)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 im 4)) re) (cbrt.f64 (*.f64 im im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 4) (/.f64 (*.f64 -1/2 (*.f64 im im)) re)) (cbrt.f64 -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 im (cbrt.f64 (*.f64 re re))) (/.f64 im (cbrt.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 im im) (cbrt.f64 (*.f64 re re))) (cbrt.f64 (/.f64 1 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 re) (neg.f64 (*.f64 im im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 4) (*.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) (cbrt.f64 -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 im im) (cbrt.f64 re)) (pow.f64 (cbrt.f64 re) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (/.f64 (*.f64 -1/2 (*.f64 im im)) re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 im im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 im im) re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -2 (*.f64 im im)) re) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/2 (/.f64 (*.f64 -2 (*.f64 im im)) re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -2 (*.f64 im im)) (*.f64 re -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 im im) (cbrt.f64 re)) (pow.f64 (cbrt.f64 (cbrt.f64 re)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 re)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) (cbrt.f64 re)) 2) (*.f64 (cbrt.f64 (*.f64 re re)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 im im) re)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 im im) (cbrt.f64 re)) (cbrt.f64 (*.f64 re re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 im im) re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 im im) re) 2)) (cbrt.f64 (*.f64 im im))) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 im im) re) 2)) (cbrt.f64 (neg.f64 (*.f64 im im)))) (cbrt.f64 (neg.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 re)) (*.f64 im im)) (cbrt.f64 (*.f64 re re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 im im) re)) (cbrt.f64 (pow.f64 im 4))) (cbrt.f64 (*.f64 re re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -2 (/.f64 (*.f64 -1/2 (*.f64 im im)) (cbrt.f64 re))) (cbrt.f64 (*.f64 re re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 im (cbrt.f64 re)) im) (cbrt.f64 (*.f64 re re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 -2 (*.f64 im im)) re) -1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -1/2 (*.f64 im im))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) 2)) -2)) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 im (/.f64 im (cbrt.f64 (*.f64 re re)))) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 im im)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 im im) re) 2))) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 im im))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 im im) re) 2))) (cbrt.f64 (neg.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) (cbrt.f64 re)) -2) (cbrt.f64 (*.f64 re re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 im im) (cbrt.f64 (*.f64 re re))) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 im im) (cbrt.f64 re)) 1) (cbrt.f64 (*.f64 re re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (*.f64 -2 (*.f64 im im)) re)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 im im)) (cbrt.f64 re)) (neg.f64 (cbrt.f64 (*.f64 re re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 im im) (cbrt.f64 re)) 1) (cbrt.f64 (*.f64 re re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (*.f64 im im)) (*.f64 -1/2 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (*.f64 im im)) (/.f64 re -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (*.f64 1/2 (*.f64 im im))) re)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (/.f64 (*.f64 -1/2 (*.f64 im im)) (cbrt.f64 re))) (neg.f64 (cbrt.f64 (*.f64 re re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/2 (*.f64 im im)) 2) re)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 im im) (cbrt.f64 re))) (neg.f64 (cbrt.f64 (*.f64 re re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 im im)) (neg.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) 2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/2 (*.f64 im im)) -2) (neg.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (/.f64 (*.f64 -1/2 (*.f64 im im)) re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 im im) -1) (neg.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -1/2 (*.f64 im im)) 2) (neg.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 im im) re) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 im im) re)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 im im) re)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 im im) re)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 im im) re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 im im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (*.f64 im im) re)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 2 (/.f64 (*.f64 -1/2 (*.f64 im im)) re)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 im im) re) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 im im) re) (*.f64 (/.f64 (*.f64 im im) re) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) re) (/.f64 (*.f64 1/2 (*.f64 im im)) re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 im im) re) 0) (/.f64 (*.f64 im im) re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 im im) re) (*.f64 0 (/.f64 (*.f64 im im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 im im) re)) (/.f64 (*.f64 im im) re))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (*.f64 im im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 re)) (neg.f64 (/.f64 (*.f64 im im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 im im) re)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 im im) re) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 im (/.f64 im re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 im im) re) 2)) (cbrt.f64 (/.f64 (*.f64 im im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -2 (cbrt.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -2) (*.f64 (cbrt.f64 4) (/.f64 (*.f64 -1/2 (*.f64 im im)) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) 2)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) (cbrt.f64 -2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 im im)) (/.f64 -1 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 im im)) (/.f64 (cbrt.f64 (pow.f64 im 4)) re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 im (cbrt.f64 re)) (/.f64 im (cbrt.f64 (*.f64 re re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 im im) (/.f64 1 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 re) (*.f64 im im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 im im) re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 re)) (/.f64 (*.f64 im im) (cbrt.f64 (*.f64 re re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 im im) re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) 2)) -2) (cbrt.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) 2)) (*.f64 -2 (cbrt.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 im re) im)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 im 4)) re) (cbrt.f64 (*.f64 im im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 4) (/.f64 (*.f64 -1/2 (*.f64 im im)) re)) (cbrt.f64 -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 im (cbrt.f64 (*.f64 re re))) (/.f64 im (cbrt.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 im im) (cbrt.f64 (*.f64 re re))) (cbrt.f64 (/.f64 1 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 re) (neg.f64 (*.f64 im im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 4) (*.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) (cbrt.f64 -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 im im) (cbrt.f64 re)) (pow.f64 (cbrt.f64 re) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (/.f64 (*.f64 -1/2 (*.f64 im im)) re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 im im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 im im) re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -2 (*.f64 im im)) re) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/2 (/.f64 (*.f64 -2 (*.f64 im im)) re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -2 (*.f64 im im)) (*.f64 re -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 im im) (cbrt.f64 re)) (pow.f64 (cbrt.f64 (cbrt.f64 re)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 re)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) (cbrt.f64 re)) 2) (*.f64 (cbrt.f64 (*.f64 re re)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 im im) re)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 im im) (cbrt.f64 re)) (cbrt.f64 (*.f64 re re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 im im) re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 im im) re) 2)) (cbrt.f64 (*.f64 im im))) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 im im) re) 2)) (cbrt.f64 (neg.f64 (*.f64 im im)))) (cbrt.f64 (neg.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 re)) (*.f64 im im)) (cbrt.f64 (*.f64 re re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 im im) re)) (cbrt.f64 (pow.f64 im 4))) (cbrt.f64 (*.f64 re re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -2 (/.f64 (*.f64 -1/2 (*.f64 im im)) (cbrt.f64 re))) (cbrt.f64 (*.f64 re re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 im (cbrt.f64 re)) im) (cbrt.f64 (*.f64 re re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 -2 (*.f64 im im)) re) -1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -1/2 (*.f64 im im))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) 2)) -2)) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 im (/.f64 im (cbrt.f64 (*.f64 re re)))) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 im im)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 im im) re) 2))) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 im im))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 im im) re) 2))) (cbrt.f64 (neg.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) (cbrt.f64 re)) -2) (cbrt.f64 (*.f64 re re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 im im) (cbrt.f64 (*.f64 re re))) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 im im) (cbrt.f64 re)) 1) (cbrt.f64 (*.f64 re re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (*.f64 -2 (*.f64 im im)) re)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 im im)) (cbrt.f64 re)) (neg.f64 (cbrt.f64 (*.f64 re re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 im im) (cbrt.f64 re)) 1) (cbrt.f64 (*.f64 re re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (*.f64 im im)) (*.f64 -1/2 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (*.f64 im im)) (/.f64 re -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (*.f64 1/2 (*.f64 im im))) re)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (/.f64 (*.f64 -1/2 (*.f64 im im)) (cbrt.f64 re))) (neg.f64 (cbrt.f64 (*.f64 re re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/2 (*.f64 im im)) 2) re)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 im im) (cbrt.f64 re))) (neg.f64 (cbrt.f64 (*.f64 re re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 im im)) (neg.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) 2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/2 (*.f64 im im)) -2) (neg.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (/.f64 (*.f64 -1/2 (*.f64 im im)) re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 im im) -1) (neg.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -1/2 (*.f64 im im)) 2) (neg.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 im im) re) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 im im) re)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 im im) re)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 im im) re)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 im im) re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 im im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (*.f64 im im) re)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 2 (/.f64 (*.f64 -1/2 (*.f64 im im)) re)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 im im) re) 3))))))"]],"rules":[["egg-rr",83],["egg-rr",83],["egg-rr",46]],"time":47.172119140625,"type":"rewrite"},{"count":[[248,134]],"inputs":[["(*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (pow.f64 im 2) re)"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 (sqrt.f64 (/.f64 (/.f64 1 re) 4)) im)","(*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 (sqrt.f64 (/.f64 (/.f64 1 re) 4)) im)","(*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 (sqrt.f64 (/.f64 (/.f64 1 re) 4)) im)","(*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 (sqrt.f64 (/.f64 (/.f64 1 re) 4)) im)","(*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 (sqrt.f64 (/.f64 (/.f64 1 re) 4)) im)","(*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 (sqrt.f64 (/.f64 (/.f64 1 re) 4)) im)","(*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 (sqrt.f64 (/.f64 (/.f64 1 re) 4)) im)","(*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 (sqrt.f64 (/.f64 (/.f64 1 re) 4)) im)","(*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 (*.f64 -1/2 im) (sqrt.f64 (/.f64 1 re)))","(*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 (*.f64 -1/2 im) (sqrt.f64 (/.f64 1 re)))","(*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 (*.f64 -1/2 im) (sqrt.f64 (/.f64 1 re)))","(*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 re)) im))","(*.f64 (*.f64 -1/2 im) (sqrt.f64 (/.f64 1 re)))","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)","(/.f64 (pow.f64 im 2) re)","(/.f64 (*.f64 im im) re)"]],"time":118.513916015625,"type":"simplify"},{"compiler":[[2263,1437]],"time":25.8388671875,"type":"eval"},{"alts":[["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)))))","done",14.672425051997138],["(*.f64 (sqrt.f64 (/.f64 (/.f64 1 re) 4)) im)","fresh",46.349259582773186],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))))","fresh",55.78502343306061],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (*.f64 -1/2 (*.f64 im (/.f64 im re))))))","fresh",52.30191739291118],["(pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))) 2)","fresh",53.74572502325781],["(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (hypot.f64 re im)))))","done",13.649392540296237]],"compiler":[[15,12],[10,8],[24,20],[14,11],[13,10],[12,9]],"count":[[139,6]],"kept":[{"done":[3,2],"fresh":[1,1],"new":[134,3],"picked":[1,0]}],"min-error":[0.02734375],"time":19.38623046875,"type":"prune"},{"accuracy":[6.4280448616181936],"baseline":[13.649392540296237],"branch":[["re",7.037067100673221,2],["im",13.64939254029623,1],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (-.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))",6.4280448616181936,2],["(sqrt.f64 (*.f64 2 (-.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re)))",6.4280448616181936,2],["(*.f64 2 (-.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))",6.619362022037653,2],["(-.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re)",6.619362022037653,2],["(*.f64 im im)",13.64939254029623,1],["(*.f64 im im)",13.64939254029623,1]],"compiler":[[3,2],[3,2],[17,12],[15,10],[14,9],[12,7],[5,3],[5,3],[119,89]],"count":[[10,2]],"inputs":[["(*.f64 (sqrt.f64 (/.f64 (/.f64 1 re) 4)) im)","(sqrt.f64 (*.f64 1/4 (*.f64 -2 (*.f64 -1/2 (*.f64 im (/.f64 im re))))))","(pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 1/4 (*.f64 im im)) re))) 2)","(sqrt.f64 (*.f64 1/4 (*.f64 -2 (neg.f64 im))))","(sqrt.f64 (*.f64 1/4 (*.f64 -2 (+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))))","(sqrt.f64 (*.f64 1/4 (*.f64 -2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(sqrt.f64 (*.f64 1/4 (*.f64 -2 (neg.f64 im))))","(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)))))","(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (hypot.f64 re im)))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (-.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))"]],"link":["."],"name":["math.sqrt on complex, imaginary part, im greater than 0 branch"],"oracle":[63.71452529299631],"outputs":[["(*.f64 (sqrt.f64 (/.f64 (/.f64 1 re) 4)) im)","(sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (hypot.f64 re im)))))"]],"time":51.56982421875,"times":[["re",12.176025390625],["im",4.449951171875],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (-.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))",6.330078125],["(sqrt.f64 (*.f64 2 (-.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re)))",6.153076171875],["(*.f64 2 (-.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))",6.58203125],["(-.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re)",6.4091796875],["(*.f64 im im)",3.175048828125],["(*.f64 im im)",3.393798828125]],"type":"regimes"},{"bstep":[[0.0,7.69786522844005e-147,0.029052734375]],"compiler":[[7,6],[15,10]],"method":["left-value"],"time":0.14208984375,"type":"bsearch"},{"compiler":[[36,26]],"inputs":[["(if (<=.f64 (sqrt.f64 (*.f64 2 (-.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))) 0) (*.f64 (sqrt.f64 (/.f64 (/.f64 1 re) 4)) im) (sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (hypot.f64 re im))))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (sqrt.f64 (*.f64 2 (-.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))) 0) (*.f64 (sqrt.f64 (/.f64 (/.f64 1 re) 4)) im) (sqrt.f64 (*.f64 1/4 (*.f64 -2 (-.f64 re (hypot.f64 re im))))))","(if (<=.f64 (sqrt.f64 (*.f64 -2 (-.f64 re (hypot.f64 re im)))) 0) (*.f64 (sqrt.f64 (/.f64 1/4 re)) im) (sqrt.f64 (*.f64 -1/2 (-.f64 re (hypot.f64 re im)))))"]],"stop":[["fuel",1]],"time":25.2900390625,"type":"simplify"},{"time":0.02197265625,"type":"soundness"},{"compiler":[[36,26]],"remove-preprocessing":[[]],"time":16.27490234375,"type":"end"}]
[{"compiler":[[11,9]],"method":["search"],"sampling":[[12,0.7496337890625,0.0009760856628417969,0.2493901252746582],[11,0.7496337890625,0.0019521713256835938,0.2484140396118164],[10,0.7496337890625,0.0039043426513671875,0.2464618682861328],[9,0.7496337890625,0.007808685302734375,0.24255752563476563],[8,0.7496337890625,0.01561737060546875,0.23474884033203125],[7,0.7496337890625,0.0312347412109375,0.2191314697265625],[6,0.7496337890625,0.062469482421875,0.187896728515625],[5,0.7496337890625,0.12493896484375,0.12542724609375],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.48486328125,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.092041015625,3],["body",256,"valid",264.51708984375,8256]],"time":272.123046875,"type":"sample"},{"compiler":[[10,8]],"inputs":[["0"],["(-.f64 1 (*.f64 x (+.f64 253/1000 (*.f64 x 3/25))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 1 (*.f64 x (+.f64 253/1000 (*.f64 x 3/25))))","(fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)"]],"symmetry":[[]],"time":54.0830078125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 1 (*.f64 x (+.f64 253/1000 (*.f64 x 3/25))))"]],"method":["egg-herbie"],"outputs":[["(-.f64 1 (*.f64 x (+.f64 253/1000 (*.f64 x 3/25))))","(fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)"]],"time":19.885986328125,"type":"simplify"},{"compiler":[[18,14]],"time":0.43505859375,"type":"eval"},{"alts":[["(fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)","next",0.1015625],["(-.f64 1 (*.f64 x (+.f64 253/1000 (*.f64 x 3/25))))","fresh",0.109375]],"compiler":[[9,7],[10,8],[9,7],[10,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.09765625],"time":2.447998046875,"type":"prune"},{"compiler":[[19,13]],"locations":[["(fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)",0.07421875,true],["(fma.f64 3/25 x 253/1000)",0.0859375,true]],"time":4.9580078125,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)","x","-inf",0.239013671875],["(fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)","x","inf",0.23095703125],["(fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)","x","0",0.275146484375],["(fma.f64 3/25 x 253/1000)","x","-inf",0.3798828125],["(fma.f64 3/25 x 253/1000)","x","inf",0.340087890625],["(fma.f64 3/25 x 253/1000)","x","0",0.2958984375]],"time":1.844970703125,"type":"series"},{"count":[[2,128]],"inputs":[["(fma.f64 3/25 x 253/1000)","(fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3/25 x) 253/1000)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 253/1000 (*.f64 3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 3/25 x 253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 3/25 x 253/1000) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 3/25 x) -253/1000)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 253/1000 (*.f64 -3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (*.f64 -3/25 x) -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 -3/25 x) -253/1000)) (neg.f64 (pow.f64 (fma.f64 3/25 x 253/1000) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 64009/1000000) (-.f64 (cbrt.f64 (*.f64 (*.f64 x x) 9/625)) (*.f64 (cbrt.f64 253/1000) (cbrt.f64 (*.f64 3/25 x))))) (+.f64 (cbrt.f64 253/1000) (cbrt.f64 (*.f64 3/25 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 (*.f64 x x) 9/625)) (-.f64 (cbrt.f64 64009/1000000) (*.f64 (cbrt.f64 (*.f64 3/25 x)) (cbrt.f64 253/1000)))) (+.f64 (cbrt.f64 (*.f64 3/25 x)) (cbrt.f64 253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 3/25 x) 3) 16194277/1000000000) (/.f64 1 (+.f64 64009/1000000 (*.f64 (*.f64 3/25 x) (fma.f64 3/25 x -253/1000)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 3/25 x 253/1000)) (pow.f64 (fma.f64 3/25 x 253/1000) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 3/25 x 253/1000) 2/3) (cbrt.f64 (fma.f64 3/25 x 253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 -3/25 x) -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -3/25 x) -253/1000) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 3/25 x 253/1000) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -16194277/1000000000 (neg.f64 (pow.f64 (*.f64 3/25 x) 3))) (/.f64 1 (neg.f64 (+.f64 64009/1000000 (*.f64 (*.f64 3/25 x) (fma.f64 3/25 x -253/1000))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 3/25 x 253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 3/25 x 253/1000) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 3/25 x) 3) 16194277/1000000000) (+.f64 64009/1000000 (*.f64 (*.f64 3/25 x) (fma.f64 3/25 x -253/1000))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 -16194277/1000000000 (neg.f64 (pow.f64 (*.f64 3/25 x) 3)))) (+.f64 64009/1000000 (*.f64 (*.f64 3/25 x) (fma.f64 3/25 x -253/1000))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -16194277/1000000000 (neg.f64 (pow.f64 (*.f64 3/25 x) 3))) (neg.f64 (+.f64 64009/1000000 (*.f64 (*.f64 3/25 x) (fma.f64 3/25 x -253/1000)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -3/25 x) -253/1000) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 -16194277/1000000000 (neg.f64 (pow.f64 (*.f64 3/25 x) 3)))) (neg.f64 (neg.f64 (+.f64 64009/1000000 (*.f64 (*.f64 3/25 x) (fma.f64 3/25 x -253/1000))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 3/25 x 253/1000) 2) (+.f64 (pow.f64 (*.f64 3/25 x) 3) 16194277/1000000000))) (cbrt.f64 (+.f64 64009/1000000 (*.f64 (*.f64 3/25 x) (fma.f64 3/25 x -253/1000)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 3/25 x 253/1000) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 3/25 x 253/1000) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 3/25 x 253/1000)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 3/25 x 253/1000) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 -3/25 x) -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 (pow.f64 (*.f64 3/25 x) 3) 16194277/1000000000) (neg.f64 (+.f64 64009/1000000 (*.f64 (*.f64 3/25 x) (fma.f64 3/25 x -253/1000))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 3/25 x 253/1000) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3/25 x 253/1000)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 253/1000)) (neg.f64 (sqrt.f64 253/1000)) (*.f64 3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 253/1000) (sqrt.f64 253/1000) (*.f64 3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 64009/1000000) (cbrt.f64 253/1000) (*.f64 3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 253/1000) (cbrt.f64 64009/1000000) (*.f64 3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 3/25 x)) (cbrt.f64 (*.f64 (*.f64 x x) 9/625)) 253/1000)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 3/25 253/1000)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 3/25) (*.f64 (sqrt.f64 3/25) x) 253/1000)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x) 253/1000)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -253/1000 (*.f64 3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 27/15625 x)) (pow.f64 x 2/3) 253/1000)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 253/1000 (*.f64 3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 253/1000 1 (*.f64 3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3/25 x) 1 253/1000)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 3/25 x) 253/1000)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (-.f64 1/2 (*.f64 (fma.f64 3/25 x 253/1000) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (neg.f64 x) (*.f64 3/25 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 253/1000 (neg.f64 x)) (-.f64 (*.f64 (*.f64 3/25 x) (neg.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 x) (*.f64 3/25 x)) (-.f64 (*.f64 (neg.f64 x) 253/1000) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3/25 x) (neg.f64 x)) (-.f64 (*.f64 253/1000 (neg.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 9) 9)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 x) (fma.f64 3/25 x 253/1000) -1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x)) 3) 4)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (*.f64 (fma.f64 3/25 x 253/1000) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x)) 3) 2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 9) 9)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 2 (*.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (-.f64 9 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 3 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 2 (*.f64 (fma.f64 3/25 x 253/1000) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (+.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (+.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (+.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) (/.f64 0 (+.f64 1 (+.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2) (*.f64 (fma.f64 3/25 x 253/1000) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x)) 3) (+.f64 1 (+.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2) (*.f64 (fma.f64 3/25 x 253/1000) x)))) (/.f64 -1 (+.f64 1 (+.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2) (*.f64 (fma.f64 3/25 x 253/1000) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)) (pow.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 2/3) (cbrt.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 3)) (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2) (*.f64 (fma.f64 3/25 x 253/1000) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) -1)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 1 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 3))) (/.f64 1 (+.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2)) (fma.f64 (neg.f64 x) (fma.f64 3/25 x 253/1000) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2)) (cbrt.f64 (*.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x))))) (+.f64 1 (cbrt.f64 (*.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 2/3) (*.f64 0 (cbrt.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1))))) (+.f64 0 (cbrt.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2)) (-.f64 1 (*.f64 (cbrt.f64 (*.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x))) 1))) (+.f64 (cbrt.f64 (*.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 2/3) (-.f64 0 (*.f64 (cbrt.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)) 0))) (+.f64 (cbrt.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 3/25 x 253/1000) x)) 2) (cbrt.f64 (*.f64 (fma.f64 3/25 x 253/1000) x)))) (-.f64 1 (cbrt.f64 (*.f64 (fma.f64 3/25 x 253/1000) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2)) (+.f64 1 (*.f64 (cbrt.f64 (*.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x))) -1))) (-.f64 (cbrt.f64 (*.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 2/3) (+.f64 0 (*.f64 (cbrt.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)) 0))) (-.f64 (cbrt.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 3))) (+.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2)) (fma.f64 (neg.f64 x) (fma.f64 3/25 x 253/1000) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 3)) (+.f64 1 (+.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2) (*.f64 (fma.f64 3/25 x 253/1000) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 64009/1000000 (*.f64 (*.f64 3/25 x) (fma.f64 3/25 x -253/1000))) (*.f64 1 (*.f64 (+.f64 (pow.f64 (*.f64 3/25 x) 3) 16194277/1000000000) x))) (+.f64 64009/1000000 (*.f64 (*.f64 3/25 x) (fma.f64 3/25 x -253/1000))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 2 (+.f64 64009/1000000 (*.f64 (*.f64 3/25 x) (fma.f64 3/25 x -253/1000)))) (*.f64 2 (*.f64 (+.f64 (pow.f64 (*.f64 3/25 x) 3) 16194277/1000000000) x))) (*.f64 2 (+.f64 64009/1000000 (*.f64 (*.f64 3/25 x) (fma.f64 3/25 x -253/1000)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (+.f64 64009/1000000 (*.f64 (*.f64 3/25 x) (fma.f64 3/25 x -253/1000)))) (*.f64 -1 (*.f64 (+.f64 (pow.f64 (*.f64 3/25 x) 3) 16194277/1000000000) x))) (neg.f64 (+.f64 64009/1000000 (*.f64 (*.f64 3/25 x) (fma.f64 3/25 x -253/1000)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (neg.f64 x) (+.f64 (pow.f64 (*.f64 3/25 x) 3) 16194277/1000000000)) 1) (*.f64 (+.f64 64009/1000000 (*.f64 (*.f64 3/25 x) (fma.f64 3/25 x -253/1000))) -1)) (+.f64 64009/1000000 (*.f64 (*.f64 3/25 x) (fma.f64 3/25 x -253/1000))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (neg.f64 x) (+.f64 (pow.f64 (*.f64 3/25 x) 3) 16194277/1000000000)) -1) (+.f64 64009/1000000 (*.f64 (*.f64 3/25 x) (fma.f64 3/25 x -253/1000)))) (*.f64 (+.f64 64009/1000000 (*.f64 (*.f64 3/25 x) (fma.f64 3/25 x -253/1000))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (-.f64 1 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 3)) (*.f64 (+.f64 1 (+.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2) (*.f64 (fma.f64 3/25 x 253/1000) x))) 0)) (*.f64 (+.f64 1 (+.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2) (*.f64 (fma.f64 3/25 x 253/1000) x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 1 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 3)) 2) (*.f64 (+.f64 1 (+.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2) (*.f64 (fma.f64 3/25 x 253/1000) x))) 0)) (*.f64 (+.f64 1 (+.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2) (*.f64 (fma.f64 3/25 x 253/1000) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 1 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 3)) 3) (*.f64 (+.f64 1 (+.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2) (*.f64 (fma.f64 3/25 x 253/1000) x))) 0)) (*.f64 (+.f64 1 (+.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2) (*.f64 (fma.f64 3/25 x 253/1000) x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (-.f64 1 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 3))) 1) (*.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2)) (fma.f64 (neg.f64 x) (fma.f64 3/25 x 253/1000) -1)) 0)) (*.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2)) (fma.f64 (neg.f64 x) (fma.f64 3/25 x 253/1000) -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (-.f64 1 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 3))) 2) (*.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2)) (fma.f64 (neg.f64 x) (fma.f64 3/25 x 253/1000) -1)) 0)) (*.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2)) (fma.f64 (neg.f64 x) (fma.f64 3/25 x 253/1000) -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (-.f64 1 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 3))) 3) (*.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2)) (fma.f64 (neg.f64 x) (fma.f64 3/25 x 253/1000) -1)) 0)) (*.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2)) (fma.f64 (neg.f64 x) (fma.f64 3/25 x 253/1000) -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 2) 0) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 3) 0) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 3)) (neg.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2)) (fma.f64 (neg.f64 x) (fma.f64 3/25 x 253/1000) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 2) (-.f64 1 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 3)))) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2) (*.f64 (fma.f64 3/25 x 253/1000) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (*.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (*.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 3/25 x 253/1000) (cbrt.f64 (neg.f64 x))) (pow.f64 x 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (*.f64 -3/25 x) -253/1000) x 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x))) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 3/25 x 253/1000) x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (fma.f64 3/25 x 253/1000) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 3/25 x 253/1000)) (*.f64 (pow.f64 (fma.f64 3/25 x 253/1000) 2/3) (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x)) 1 1)))))"]],"rules":[["egg-rr",81],["egg-rr",47]],"time":50.221923828125,"type":"rewrite"},{"count":[[152,139]],"inputs":[["253/1000","(+.f64 253/1000 (*.f64 3/25 x))","(+.f64 253/1000 (*.f64 3/25 x))","(+.f64 253/1000 (*.f64 3/25 x))","(*.f64 3/25 x)","(+.f64 253/1000 (*.f64 3/25 x))","(+.f64 253/1000 (*.f64 3/25 x))","(+.f64 253/1000 (*.f64 3/25 x))","(*.f64 3/25 x)","(+.f64 253/1000 (*.f64 3/25 x))","(+.f64 253/1000 (*.f64 3/25 x))","(+.f64 253/1000 (*.f64 3/25 x))","1","(+.f64 1 (*.f64 -253/1000 x))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(*.f64 -3/25 (pow.f64 x 2))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (*.f64 -253/1000 x))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(*.f64 -3/25 (pow.f64 x 2))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (*.f64 -253/1000 x))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))"]],"method":["egg-herbie"],"outputs":[["253/1000","(+.f64 253/1000 (*.f64 3/25 x))","(fma.f64 3/25 x 253/1000)","(+.f64 253/1000 (*.f64 3/25 x))","(fma.f64 3/25 x 253/1000)","(+.f64 253/1000 (*.f64 3/25 x))","(fma.f64 3/25 x 253/1000)","(*.f64 3/25 x)","(+.f64 253/1000 (*.f64 3/25 x))","(fma.f64 3/25 x 253/1000)","(+.f64 253/1000 (*.f64 3/25 x))","(fma.f64 3/25 x 253/1000)","(+.f64 253/1000 (*.f64 3/25 x))","(fma.f64 3/25 x 253/1000)","(*.f64 3/25 x)","(+.f64 253/1000 (*.f64 3/25 x))","(fma.f64 3/25 x 253/1000)","(+.f64 253/1000 (*.f64 3/25 x))","(fma.f64 3/25 x 253/1000)","(+.f64 253/1000 (*.f64 3/25 x))","(fma.f64 3/25 x 253/1000)","1","(+.f64 1 (*.f64 -253/1000 x))","(fma.f64 x -253/1000 1)","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 x (+.f64 (*.f64 -3/25 x) -253/1000)) 1)","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 x (+.f64 (*.f64 -3/25 x) -253/1000)) 1)","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (*.f64 -253/1000 x))","(*.f64 x (+.f64 (*.f64 -3/25 x) -253/1000))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 x (+.f64 (*.f64 -3/25 x) -253/1000)) 1)","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 x (+.f64 (*.f64 -3/25 x) -253/1000)) 1)","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (*.f64 -253/1000 x))","(*.f64 x (+.f64 (*.f64 -3/25 x) -253/1000))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 x (+.f64 (*.f64 -3/25 x) -253/1000)) 1)","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 x (+.f64 (*.f64 -3/25 x) -253/1000)) 1)"]],"time":87.27197265625,"type":"simplify"},{"compiler":[[2375,1797]],"time":35.703125,"type":"eval"},{"alts":[["(fma.f64 (fma.f64 (sqrt.f64 3/25) (*.f64 (sqrt.f64 3/25) x) 253/1000) (neg.f64 x) 1)","fresh",0.125],["(fma.f64 (fma.f64 (cbrt.f64 (*.f64 3/25 x)) (cbrt.f64 (*.f64 (*.f64 x x) 9/625)) 253/1000) (neg.f64 x) 1)","fresh",0.39357377930532605],["(pow.f64 (cbrt.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)) 3)","fresh",0.23312382814753613],["(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (neg.f64 x) (*.f64 3/25 x)) -1))","next",0.09375],["(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","fresh",0.35384750976844204],["(fma.f64 (fma.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x) 253/1000) (neg.f64 x) 1)","fresh",0.13671875]],"compiler":[[13,11],[17,13],[12,10],[14,10],[12,10],[13,11],[13,11],[17,13],[12,10],[14,10],[12,10],[13,11]],"count":[[141,6]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[139,6],"picked":[1,0]}],"min-error":[0],"time":40.515869140625,"type":"prune"},{"compiler":[[41,25]],"locations":[["(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (neg.f64 x) (*.f64 3/25 x)) -1))",0.0078125,true],["(*.f64 (neg.f64 x) 253/1000)",0.046875,true],["(*.f64 (neg.f64 x) (*.f64 3/25 x))",0.1484375,true],["(*.f64 3/25 x)",0.21484375,true]],"time":8.93408203125,"type":"localize"},{"count":[[4,36]],"series":[["(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (neg.f64 x) (*.f64 3/25 x)) -1))","x","-inf",0.171875],["(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (neg.f64 x) (*.f64 3/25 x)) -1))","x","inf",0.239990234375],["(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (neg.f64 x) (*.f64 3/25 x)) -1))","x","0",0.1689453125],["(*.f64 (neg.f64 x) 253/1000)","x","-inf",0.298828125],["(*.f64 (neg.f64 x) 253/1000)","x","inf",0.285888671875],["(*.f64 (neg.f64 x) 253/1000)","x","0",0.251953125],["(*.f64 (neg.f64 x) (*.f64 3/25 x))","x","-inf",0.14794921875],["(*.f64 (neg.f64 x) (*.f64 3/25 x))","x","inf",0.27294921875],["(*.f64 (neg.f64 x) (*.f64 3/25 x))","x","0",0.360107421875],["(*.f64 3/25 x)","x","-inf",0.284912109375],["(*.f64 3/25 x)","x","inf",0.31103515625],["(*.f64 3/25 x)","x","0",0.37890625]],"time":3.31201171875,"type":"series"},{"count":[[4,248]],"inputs":[["(*.f64 3/25 x)","(*.f64 (neg.f64 x) (*.f64 3/25 x))","(*.f64 (neg.f64 x) 253/1000)","(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (neg.f64 x) (*.f64 3/25 x)) -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3/25 x) (*.f64 (*.f64 3/25 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3/25 x) 0) (*.f64 3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3/25 x) (*.f64 0 (*.f64 3/25 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 3/25 x)) (*.f64 3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3/25 x)) (cbrt.f64 (*.f64 (*.f64 x x) 9/625)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) 9/625)) (cbrt.f64 (*.f64 3/25 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 9/625))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 3/25)) (sqrt.f64 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 3/25) (*.f64 (sqrt.f64 3/25) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x x) 27/15625)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3/25 x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x 3/25)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 27/15625 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3/25 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -3/25 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) -3/25)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -3/25 x)) (neg.f64 (cbrt.f64 (*.f64 (*.f64 x x) 9/625))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (neg.f64 (cbrt.f64 (*.f64 (*.f64 x x) 27/15625))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (cbrt.f64 3/25)) (neg.f64 (cbrt.f64 9/625)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (sqrt.f64 3/25)) (neg.f64 (sqrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 1 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3/25 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -3/25 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 3/25 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3/25 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3/25 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3/25 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3/25 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 3/25 x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) -3/25) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 3/25 x) x) 0) (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3/25 x) 0) (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) -3/25) (*.f64 (*.f64 (*.f64 x x) -3/25) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 x x) -3/25) 0) (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 3/25 x) x)) (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 3/25 x)) (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) -3/25) (*.f64 0 (*.f64 (*.f64 x x) -3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 x x) -3/25)) (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (*.f64 x x) -3/25) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (*.f64 3/25 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 (*.f64 3/25 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (*.f64 (*.f64 3/25 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3/25 x)) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 9/625)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (*.f64 3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3/25 x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3/25 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 -3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3/25 x) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x x)) 3/25)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 3/25 x))) (cbrt.f64 (*.f64 (*.f64 x x) 9/625)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 -3/25 x) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 3/25 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (*.f64 3/25 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3/25 (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3/25 x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) -3/25) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 (*.f64 3/25 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 (*.f64 3/25 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 3/25 x) x)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 3/25 x) x)) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) -3/25)) (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) -3/25)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (*.f64 3/25 x))) (neg.f64 (cbrt.f64 (*.f64 (*.f64 x x) 9/625))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 3/25 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2)) (-.f64 0 (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) -3/25)) 0))) (+.f64 (cbrt.f64 (*.f64 (*.f64 x x) -3/25)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2)) (+.f64 0 (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) -3/25)) 0))) (-.f64 (cbrt.f64 (*.f64 (*.f64 x x) -3/25)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) -3/25)) (cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2)) (cbrt.f64 (*.f64 (*.f64 x x) -3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 3/25 x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) -3/25) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x x)) 1) (/.f64 1 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (neg.f64 (*.f64 x x))) (/.f64 1 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x x)) (/.f64 1 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) -3/25)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) -3/25) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) -3/25)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) -3/25)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 3/25 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 (*.f64 3/25 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (*.f64 3/25 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 (*.f64 3/25 x) x) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 -3/25 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3/25 (neg.f64 (*.f64 x x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 3/25 x) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (*.f64 x x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3/25 x) (neg.f64 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 3/25 x)) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 9/625)) (neg.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 3/25 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 x x)) 3/25 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 3/25 x))) (cbrt.f64 (*.f64 (*.f64 x x) 9/625)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (*.f64 3/25 x) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 -3/25 x) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -3/25 x) x 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (*.f64 3/25 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2)) (cbrt.f64 (*.f64 (*.f64 x x) -3/25)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 x x) -3/25) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) -3/25) 1 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) -3/25)) (cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 (*.f64 x x) -3/25))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 253/1000 0) (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x -253/1000) (*.f64 (*.f64 x -253/1000) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x -253/1000) 0) (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 253/1000) (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x -253/1000) (*.f64 0 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x -253/1000)) (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 x 253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 253/1000) (*.f64 (cbrt.f64 64009/1000000) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (cbrt.f64 253/1000)) (cbrt.f64 64009/1000000))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (*.f64 (*.f64 x x) 16194277/1000000000)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x -253/1000)) (cbrt.f64 (pow.f64 (*.f64 x -253/1000) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 253/1000) (*.f64 (sqrt.f64 253/1000) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) 253/1000)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 253/1000 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x -253/1000) 2)) (cbrt.f64 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 253/1000 (cbrt.f64 (neg.f64 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (sqrt.f64 253/1000)) (sqrt.f64 253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 x 253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x -253/1000)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x -253/1000) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -253/1000 x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 x 253/1000))) (cbrt.f64 (pow.f64 (*.f64 x -253/1000) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (neg.f64 (cbrt.f64 (*.f64 (*.f64 x x) 16194277/1000000000))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 253/1000)) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 x -253/1000) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 253/1000)) (neg.f64 (cbrt.f64 64009/1000000)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 253/1000)) (neg.f64 (sqrt.f64 253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (/.f64 1 253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x -253/1000) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x 253/1000) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x -253/1000) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x -253/1000)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x -253/1000)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x -253/1000)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x -253/1000) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 x 253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 x 253/1000) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x -253/1000) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 x -253/1000))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) -3/25) (+.f64 1 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (*.f64 x -253/1000)) (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) -3/25) (-.f64 (*.f64 x -253/1000) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x -253/1000) -1) (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1) (*.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1) 0) (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1) (*.f64 0 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1)) (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x -253/1000) (fma.f64 (*.f64 -3/25 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 -3/25 x) x 1) (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x -253/1000) 0) (fma.f64 (*.f64 -3/25 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (*.f64 x x) -3/25) (+.f64 -1 (*.f64 x 253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x -253/1000) (fma.f64 (*.f64 x x) 3/25 -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (*.f64 -3/25 x) x 1) (*.f64 x 253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 x -253/1000) (/.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 3) (+.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2) (fma.f64 (*.f64 3/25 x) x 1)))) (/.f64 -1 (+.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2) (fma.f64 (*.f64 3/25 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 x -253/1000) 0) (fma.f64 (*.f64 x x) 3/25 -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 -1 (*.f64 x (+.f64 253/1000 (*.f64 3/25 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 3) (+.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2) (fma.f64 (*.f64 3/25 x) x 1))) (-.f64 (/.f64 -1 (+.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2) (fma.f64 (*.f64 3/25 x) x 1))) (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 (*.f64 3/25 x) x) (+.f64 1 (*.f64 x -253/1000))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (*.f64 x -253/1000) -1) (*.f64 (*.f64 3/25 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 3) (+.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2) (fma.f64 (*.f64 3/25 x) x 1))) (+.f64 (/.f64 -1 (+.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2) (fma.f64 (*.f64 3/25 x) x 1))) (*.f64 x 253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 3) (+.f64 (pow.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 2) (+.f64 1 (/.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) -1)))) (/.f64 -1 (+.f64 (pow.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 2) (+.f64 1 (/.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1)) (cbrt.f64 (pow.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1) 2)) (cbrt.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x -253/1000) 2)) (-.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 -3/25 x) x 1) 2)) (cbrt.f64 (*.f64 (*.f64 x -253/1000) (fma.f64 (*.f64 -3/25 x) x 1))))) (+.f64 (cbrt.f64 (*.f64 x -253/1000)) (cbrt.f64 (fma.f64 (*.f64 -3/25 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 -3/25 x) x 1) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 x -253/1000) 2)) (cbrt.f64 (*.f64 (*.f64 x -253/1000) (fma.f64 (*.f64 -3/25 x) x 1))))) (+.f64 (cbrt.f64 (fma.f64 (*.f64 -3/25 x) x 1)) (cbrt.f64 (*.f64 x -253/1000))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 -1 (*.f64 x (+.f64 253/1000 (*.f64 3/25 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 3) 1) (/.f64 1 (+.f64 (pow.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 2) (+.f64 1 (/.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 3) 1) 1) (+.f64 (pow.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 2) (+.f64 1 (/.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 3) 1) (+.f64 (pow.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 2) (-.f64 1 (*.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 3) 1) 1) (*.f64 (+.f64 (pow.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 2) (+.f64 1 (/.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 3) 1)) (neg.f64 (+.f64 (pow.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 2) (+.f64 1 (/.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 3) 1) (+.f64 (pow.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 2) (+.f64 1 (/.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (*.f64 x (+.f64 253/1000 (*.f64 3/25 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 -1 (*.f64 x (+.f64 253/1000 (*.f64 3/25 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 -1 (*.f64 x (+.f64 253/1000 (*.f64 3/25 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 x (+.f64 253/1000 (*.f64 3/25 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (*.f64 -3/25 x) x 1)) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 -3/25 x) x 1) 2)) (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 -3/25 x) (+.f64 1 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3/25 (neg.f64 (*.f64 x x)) (+.f64 1 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 3/25 x) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (*.f64 x x)) (+.f64 1 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3/25 x) (neg.f64 x) (+.f64 1 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 3/25 x)) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 9/625)) (neg.f64 x)) (+.f64 1 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 3/25 x)) (+.f64 1 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 x x)) 3/25 (+.f64 1 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 3/25 x))) (cbrt.f64 (*.f64 (*.f64 x x) 9/625)) (+.f64 1 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (*.f64 3/25 x) x) (+.f64 1 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 -3/25 x) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (+.f64 1 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -3/25 x) x (+.f64 1 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (*.f64 3/25 x) (+.f64 1 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 -3/25 x) x 1) 2)) (cbrt.f64 (fma.f64 (*.f64 -3/25 x) x 1)) (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (fma.f64 (*.f64 x x) 3/25 -1) (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) 253/1000 (fma.f64 (*.f64 -3/25 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 253/1000 (neg.f64 x) (fma.f64 (*.f64 -3/25 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x -253/1000)) (cbrt.f64 (pow.f64 (*.f64 x -253/1000) 2)) (fma.f64 (*.f64 -3/25 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x -253/1000) (fma.f64 (*.f64 -3/25 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (*.f64 -3/25 x) x 1) (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x)))) (cbrt.f64 (pow.f64 (*.f64 x (+.f64 -253/1000 (*.f64 -3/25 x))) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2)) (cbrt.f64 (*.f64 (*.f64 x x) -3/25)) (+.f64 1 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 x x) -3/25) (+.f64 1 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) -3/25) 1 (+.f64 1 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) -3/25)) (cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2)) (+.f64 1 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 253/1000 (cbrt.f64 (neg.f64 x))) (cbrt.f64 (*.f64 x x)) (fma.f64 (*.f64 -3/25 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 253/1000) (*.f64 (cbrt.f64 64009/1000000) (neg.f64 x)) (fma.f64 (*.f64 -3/25 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x -253/1000 (fma.f64 (*.f64 -3/25 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (*.f64 (*.f64 x x) 16194277/1000000000)) (fma.f64 (*.f64 -3/25 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 x) (cbrt.f64 253/1000)) (cbrt.f64 64009/1000000) (fma.f64 (*.f64 -3/25 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 253/1000) (*.f64 (sqrt.f64 253/1000) (neg.f64 x)) (fma.f64 (*.f64 -3/25 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 x -253/1000) 2)) (cbrt.f64 (*.f64 x -253/1000)) (fma.f64 (*.f64 -3/25 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 x 253/1000) (fma.f64 (*.f64 -3/25 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x -253/1000) 1 (fma.f64 (*.f64 -3/25 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 x) (sqrt.f64 253/1000)) (sqrt.f64 253/1000) (fma.f64 (*.f64 -3/25 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -253/1000 x (fma.f64 (*.f64 -3/25 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (*.f64 -3/25 x) x 1) 1 (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 3) 1) (/.f64 1 (+.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2) (fma.f64 (*.f64 3/25 x) x 1))) (*.f64 x -253/1000))))))"]],"rules":[["egg-rr",93],["egg-rr",44],["egg-rr",77],["egg-rr",34]],"time":42.5029296875,"type":"rewrite"},{"count":[[284,257]],"inputs":[["(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","1","(+.f64 1 (*.f64 -253/1000 x))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(*.f64 -3/25 (pow.f64 x 2))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (*.f64 -253/1000 x))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(*.f64 -3/25 (pow.f64 x 2))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (*.f64 -253/1000 x))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","(*.f64 -253/1000 x)","1","(+.f64 1 (*.f64 -253/1000 x))","(fma.f64 x -253/1000 1)","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 x (+.f64 (*.f64 -3/25 x) -253/1000)) 1)","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 x (+.f64 (*.f64 -3/25 x) -253/1000)) 1)","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (*.f64 -253/1000 x))","(*.f64 x (+.f64 (*.f64 -3/25 x) -253/1000))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 x (+.f64 (*.f64 -3/25 x) -253/1000)) 1)","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 x (+.f64 (*.f64 -3/25 x) -253/1000)) 1)","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (*.f64 -253/1000 x))","(*.f64 x (+.f64 (*.f64 -3/25 x) -253/1000))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 x (+.f64 (*.f64 -3/25 x) -253/1000)) 1)","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 x (+.f64 (*.f64 -3/25 x) -253/1000)) 1)"]],"time":116.80615234375,"type":"simplify"},{"compiler":[[4235,2912]],"time":53.177978515625,"type":"eval"},{"alts":[["(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (neg.f64 x) (*.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 9/625))) -1))","next",0.1171875],["(fma.f64 (fma.f64 (sqrt.f64 3/25) (*.f64 (sqrt.f64 3/25) x) 253/1000) (neg.f64 x) 1)","fresh",0.125],["(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (cbrt.f64 (*.f64 3/25 x)) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 9/625)) (neg.f64 x))) -1))","fresh",0.379570019536884],["(-.f64 (*.f64 x -253/1000) (fma.f64 (*.f64 x x) 3/25 -1))","fresh",0.35384750976844204],["(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (neg.f64 x) (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))) -1))","fresh",0.1328125]],"compiler":[[18,14],[13,11],[22,16],[11,8],[18,14],[18,14],[13,11],[22,16],[11,8],[18,14]],"count":[[263,5]],"kept":[{"done":[0,0],"fresh":[5,1],"new":[257,4],"picked":[1,0]}],"min-error":[0],"time":115.700927734375,"type":"prune"},{"compiler":[[66,49]],"locations":[["(*.f64 (neg.f64 x) (*.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 9/625)))",0.1484375,true],["(*.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 9/625))",0.26171875,true],["(*.f64 x (cbrt.f64 3/25))",0.375,true],["(cbrt.f64 3/25)",1.0,true]],"time":16.493896484375,"type":"localize"},{"count":[[4,36]],"series":[["(*.f64 (neg.f64 x) (*.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 9/625)))","x","-inf",0.193115234375],["(*.f64 (neg.f64 x) (*.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 9/625)))","x","inf",0.35302734375],["(*.f64 (neg.f64 x) (*.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 9/625)))","x","0",0.43212890625],["(*.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 9/625))","x","-inf",0.31494140625],["(*.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 9/625))","x","inf",0.4609375],["(*.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 9/625))","x","0",1.26513671875],["(*.f64 x (cbrt.f64 3/25))","x","-inf",0.306884765625],["(*.f64 x (cbrt.f64 3/25))","x","inf",0.317138671875],["(*.f64 x (cbrt.f64 3/25))","x","0",1.863037109375]],"time":5.634033203125,"type":"series"},{"count":[[4,154]],"inputs":[["(cbrt.f64 3/25)","(*.f64 x (cbrt.f64 3/25))","(*.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 9/625))","(*.f64 (neg.f64 x) (*.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 9/625)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 3/25) 0) (cbrt.f64 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 3/25) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 3/25)) (cbrt.f64 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 3/25) (*.f64 0 (cbrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 3/25)) (cbrt.f64 (sqrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (cbrt.f64 (sqrt.f64 3/25))) (*.f64 -1 (cbrt.f64 (sqrt.f64 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sqrt.f64 3/25))) (cbrt.f64 (neg.f64 (sqrt.f64 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 3/25)) (cbrt.f64 (cbrt.f64 9/625)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 9/625)) (cbrt.f64 (cbrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3/25) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -3/25) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 3/25)) -1) (*.f64 (cbrt.f64 (sqrt.f64 3/25)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 3/25))) (pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 81/390625))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 3/25 (cbrt.f64 9/625)))) (cbrt.f64 (cbrt.f64 (cbrt.f64 81/390625))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 3/25) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 3/25 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 729/244140625 (*.f64 1/3 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 27/15625 (*.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 9/625 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 3/25)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 3/25) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 3/25) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 3/25 (*.f64 2 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 3/25)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 81/390625 (/.f64 1/6 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 3/25)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 3/25 (+.f64 1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 3/25)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 3/25)))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 3/25) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 3/25) 1/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 0 (*.f64 (log.f64 3/25) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 3/25) 1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 9/625) 1/6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (cbrt.f64 3/25)) 0) (*.f64 x (cbrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cbrt.f64 3/25)) (*.f64 (*.f64 x (cbrt.f64 3/25)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (cbrt.f64 3/25))) (*.f64 x (cbrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cbrt.f64 3/25)) (*.f64 0 (*.f64 x (cbrt.f64 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 3/25))) (pow.f64 (*.f64 x (cbrt.f64 3/25)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (cbrt.f64 3/25)) 2/3) (cbrt.f64 (*.f64 x (cbrt.f64 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 3/25)) (*.f64 (cbrt.f64 (cbrt.f64 9/625)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x x) 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 3/25)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (cbrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 3/25)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (cbrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (cbrt.f64 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3/25) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (cbrt.f64 3/25))) (cbrt.f64 (cbrt.f64 9/625)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) 3/25)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (cbrt.f64 3/25)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 x 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 9/625)) (*.f64 x (cbrt.f64 (cbrt.f64 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 9/625)) x) (cbrt.f64 (cbrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (cbrt.f64 3/25)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3/25 (pow.f64 x 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 3/25))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 3/25))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 3/25))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 3/25)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (cbrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 3/25 (pow.f64 x 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 3/25) 0) (*.f64 x 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 3/25) (*.f64 (*.f64 x 3/25) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x 3/25)) (*.f64 x 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 3/25) (*.f64 0 (*.f64 x 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 9/625))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 9/625) (*.f64 x (cbrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 3/25))) (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 9/625)) 9/625)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 3/25)) (pow.f64 (*.f64 x 3/25) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x 3/25) 2/3) (cbrt.f64 (*.f64 x 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 9/625 (*.f64 x (cbrt.f64 3/25)))) (pow.f64 (*.f64 x (cbrt.f64 3/25)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 9/625)) (*.f64 (cbrt.f64 (cbrt.f64 81/390625)) (*.f64 x (cbrt.f64 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 3/25) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x 3/25)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3/25 x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 9/625) x) (cbrt.f64 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 (cbrt.f64 9/625))) (cbrt.f64 (cbrt.f64 81/390625)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 81/390625)) (*.f64 x (cbrt.f64 3/25))) (cbrt.f64 (cbrt.f64 9/625)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 81/390625)) (*.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 (cbrt.f64 9/625))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (cbrt.f64 3/25)) 2/3) (cbrt.f64 (*.f64 9/625 (*.f64 x (cbrt.f64 3/25)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 9/625)) 9/625)) (cbrt.f64 (*.f64 x (cbrt.f64 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) 3/25) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3/25 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x 3/25) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x 3/25)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x 3/25)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x 3/25)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x 3/25) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x 3/25) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x 3/25) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 3/25) 0) (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 x x) -3/25) 0) (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) -3/25) (*.f64 (*.f64 (*.f64 x x) -3/25) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x 3/25)) (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 x x) -3/25)) (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) -3/25) (*.f64 0 (*.f64 (*.f64 x x) -3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (*.f64 x x) 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 3/25)) (*.f64 (pow.f64 (*.f64 x 3/25) 2/3) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x 3/25) 2/3) (neg.f64 x)) (cbrt.f64 (*.f64 x 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (*.f64 (pow.f64 x 2/3) (*.f64 x 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (*.f64 x 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 3/25) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) -3/25)) (pow.f64 (*.f64 (*.f64 x x) -3/25) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2/3) (cbrt.f64 (*.f64 (*.f64 x x) -3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (cbrt.f64 9/625)) (*.f64 x (cbrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 x 3/25))) (pow.f64 (*.f64 x 3/25) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3/25 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x 3/25) (cbrt.f64 (neg.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 3/25)) (*.f64 (neg.f64 x) (cbrt.f64 9/625)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 -3/25 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) -3/25) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (*.f64 x x) 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (*.f64 x x)) (cbrt.f64 3/25)) (cbrt.f64 9/625))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 9/625) (*.f64 (neg.f64 (*.f64 x x)) (cbrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x x)) 3/25)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (neg.f64 (*.f64 x x)) (cbrt.f64 3/25)) (cbrt.f64 (cbrt.f64 9/625))) (cbrt.f64 (cbrt.f64 81/390625)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) 3/25) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 81/390625)) (*.f64 (*.f64 (neg.f64 (*.f64 x x)) (cbrt.f64 3/25)) (cbrt.f64 (cbrt.f64 9/625))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x 3/25) 2/3) (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 x 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 x 3/25) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 x 3/25)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3/25 (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 (*.f64 x x) 3/25))) (pow.f64 (*.f64 (*.f64 x x) -3/25) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (*.f64 x 3/25))) (neg.f64 (pow.f64 (*.f64 x 3/25) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (cbrt.f64 3/25)) x) (cbrt.f64 -9/625))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (neg.f64 (*.f64 (pow.f64 x 2/3) (*.f64 x 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) 3/25)) (neg.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) -3/25)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 9/625) x) (*.f64 (neg.f64 x) (cbrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) -3/25) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) -3/25)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) -3/25)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) -3/25)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) -3/25) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 x x) 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (*.f64 x x) 3/25) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) -3/25) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 (*.f64 x x) -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 (*.f64 x x) -3/25))))))"]],"rules":[["egg-rr",55],["egg-rr",34],["egg-rr",28],["egg-rr",37]],"time":32.037109375,"type":"rewrite"},{"count":[[190,156]],"inputs":[["(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) x)","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 3/25 x)","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 3/25 x)","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 3/25 x)","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 3/25 x)","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 3/25 x)","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 3/25 x)","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 3/25 x)","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 3/25 x)","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 3/25 x)","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 3/25 x)","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 3/25 x)","(*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))","(*.f64 3/25 x)","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -3/25 (*.f64 x x))","(*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2))))","(*.f64 -3/25 (*.f64 x x))"]],"time":108.471923828125,"type":"simplify"},{"compiler":[[2940,2088]],"time":36.741943359375,"type":"eval"},{"alts":[["(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (neg.f64 x) (*.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 9/625))) -1))","done",0.1171875],["(fma.f64 (fma.f64 (sqrt.f64 3/25) (*.f64 (sqrt.f64 3/25) x) 253/1000) (neg.f64 x) 1)","fresh",0.125],["(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (*.f64 (*.f64 x (cbrt.f64 3/25)) x) (cbrt.f64 -9/625)) -1))","next",0.10546875],["(-.f64 (*.f64 x -253/1000) (fma.f64 (*.f64 x x) 3/25 -1))","fresh",0.35384750976844204],["(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2)))) -1))","fresh",0.36166000976844204]],"compiler":[[18,14],[13,11],[17,14],[11,8],[19,17],[13,11],[17,14],[11,8],[19,17]],"count":[[161,5]],"kept":[{"done":[0,0],"fresh":[4,2],"new":[156,2],"picked":[1,1]}],"min-error":[0],"time":48.2900390625,"type":"prune"},{"compiler":[[62,47]],"locations":[["(*.f64 (*.f64 x (cbrt.f64 3/25)) x)",0.17578125,true],["(*.f64 (*.f64 (*.f64 x (cbrt.f64 3/25)) x) (cbrt.f64 -9/625))",0.18359375,true],["(*.f64 x (cbrt.f64 3/25))",0.375,false],["(cbrt.f64 3/25)",1.0,false]],"time":16.2080078125,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 (*.f64 x (cbrt.f64 3/25)) x)","x","-inf",0.15185546875],["(*.f64 (*.f64 x (cbrt.f64 3/25)) x)","x","inf",0.27294921875],["(*.f64 (*.f64 x (cbrt.f64 3/25)) x)","x","0",0.283935546875],["(*.f64 (*.f64 (*.f64 x (cbrt.f64 3/25)) x) (cbrt.f64 -9/625))","x","-inf",0.177978515625],["(*.f64 (*.f64 (*.f64 x (cbrt.f64 3/25)) x) (cbrt.f64 -9/625))","x","inf",1.5068359375],["(*.f64 (*.f64 (*.f64 x (cbrt.f64 3/25)) x) (cbrt.f64 -9/625))","x","0",1.28515625]],"time":3.76806640625,"type":"series"},{"count":[[2,66]],"inputs":[["(*.f64 (*.f64 (*.f64 x (cbrt.f64 3/25)) x) (cbrt.f64 -9/625))","(*.f64 (*.f64 x (cbrt.f64 3/25)) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625)))) 0) (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625)))) (*.f64 (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625))))) (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625)))) (*.f64 0 (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25)) (cbrt.f64 -9/625))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -9/625) (*.f64 (*.f64 x x) (cbrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 3/25)) (*.f64 x (cbrt.f64 -9/625)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 -9/625)) (*.f64 x (cbrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 -9/625)) (*.f64 (cbrt.f64 (cbrt.f64 81/390625)) (*.f64 (*.f64 x x) (cbrt.f64 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25))) (*.f64 (pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25)) 2/3) (cbrt.f64 -9/625)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 3/25))) (*.f64 (pow.f64 (*.f64 x (cbrt.f64 3/25)) 2/3) (*.f64 x (cbrt.f64 -9/625))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 -9/625) (*.f64 x (cbrt.f64 3/25))) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (cbrt.f64 -9/625) (*.f64 x (cbrt.f64 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (cbrt.f64 3/25) (*.f64 x (cbrt.f64 -9/625))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25)) 2/3) (cbrt.f64 -9/625)) (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x (cbrt.f64 3/25)) 2/3) (*.f64 x (cbrt.f64 -9/625))) (cbrt.f64 (*.f64 x (cbrt.f64 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 3/25) (*.f64 x (cbrt.f64 -9/625))) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 81/390625)) (*.f64 (*.f64 x x) (cbrt.f64 3/25))) (cbrt.f64 (cbrt.f64 -9/625)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625))))) (pow.f64 (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625)))) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -9/625 (*.f64 (*.f64 x x) (cbrt.f64 3/25)))) (pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25)) 2/3) (cbrt.f64 (*.f64 -9/625 (*.f64 (*.f64 x x) (cbrt.f64 3/25)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25)) (cbrt.f64 (cbrt.f64 -9/625))) (cbrt.f64 (cbrt.f64 81/390625)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 81/390625)) (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25)) (cbrt.f64 (cbrt.f64 -9/625))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (*.f64 x (cbrt.f64 -9/625))) (cbrt.f64 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -9/625 (*.f64 (pow.f64 (*.f64 x x) 3) 3/25)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cbrt.f64 3/25) (*.f64 x (*.f64 x (cbrt.f64 -9/625))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 -9/625 (*.f64 (pow.f64 (*.f64 x x) 3) 3/25)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25)) 0) (*.f64 (*.f64 x x) (cbrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25)) (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 x x) (cbrt.f64 3/25))) (*.f64 (*.f64 x x) (cbrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25)) (*.f64 0 (*.f64 (*.f64 x x) (cbrt.f64 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 3/25)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 x (cbrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 3/25))) (*.f64 (pow.f64 (*.f64 x (cbrt.f64 3/25)) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 x (cbrt.f64 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 x (cbrt.f64 3/25))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x (cbrt.f64 3/25)) 2/3) x) (cbrt.f64 (*.f64 x (cbrt.f64 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (sqrt.f64 3/25))) (*.f64 x (cbrt.f64 (sqrt.f64 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 3/25)) x) (*.f64 (cbrt.f64 (sqrt.f64 3/25)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25))) (pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25)) 2/3) (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (*.f64 x (cbrt.f64 3/25)))) (pow.f64 (*.f64 x (cbrt.f64 3/25)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (cbrt.f64 3/25)) 2/3) (*.f64 x (cbrt.f64 (*.f64 x (cbrt.f64 3/25)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x x) (cbrt.f64 3/25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (cbrt.f64 3/25))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3/25) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 x x) 3) 3/25) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 x x) (cbrt.f64 3/25))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 x x) 3) 3/25))))))"]],"rules":[["egg-rr",30],["egg-rr",36]],"time":27.363037109375,"type":"rewrite"},{"count":[[90,69]],"inputs":[["(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 -3/25 (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 -3/25 (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 -3/25 (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 -3/25 (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 -3/25 (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 -3/25 (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 -3/25 (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 -3/25 (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 -3/25 (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 -3/25 (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 -3/25 (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (*.f64 (pow.f64 x 2) (cbrt.f64 -9/625)))","(*.f64 -3/25 (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (*.f64 x x))","(*.f64 (cbrt.f64 3/25) (pow.f64 x 2))","(*.f64 (cbrt.f64 3/25) (*.f64 x x))"]],"time":79.634033203125,"type":"simplify"},{"compiler":[[2716,2079]],"time":35.212890625,"type":"eval"},{"alts":[["(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (neg.f64 x) (*.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 9/625))) -1))","done",0.1171875],["(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (*.f64 (*.f64 (cbrt.f64 (cbrt.f64 9/625)) (*.f64 x (cbrt.f64 (cbrt.f64 3/25)))) x) (cbrt.f64 -9/625)) -1))","fresh",0.11556625976844202],["(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 (cbrt.f64 (cbrt.f64 9/625)) x) (cbrt.f64 (cbrt.f64 3/25))) x) (cbrt.f64 -9/625)) -1))","fresh",0.109375],["(-.f64 (*.f64 x -253/1000) (fma.f64 (*.f64 x x) 3/25 -1))","fresh",0.35384750976844204]],"compiler":[[18,14],[22,19],[22,19],[11,8]],"count":[[139,4]],"kept":[{"done":[1,1],"fresh":[3,1],"new":[134,2],"picked":[1,0]}],"min-error":[0],"time":35.114013671875,"type":"prune"},{"accuracy":[0.09375],"baseline":[0.09375],"branch":[["x",0.09375,1],["(-.f64 1 (*.f64 x (+.f64 253/1000 (*.f64 x 3/25))))",0.09375,1],["(*.f64 x (+.f64 253/1000 (*.f64 x 3/25)))",0.09375,1]],"compiler":[[2,1],[10,8],[8,6],[234,172]],"count":[[16,1]],"inputs":[["(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (*.f64 (*.f64 (cbrt.f64 (cbrt.f64 9/625)) (*.f64 x (cbrt.f64 (cbrt.f64 3/25)))) x) (cbrt.f64 -9/625)) -1))","(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 (cbrt.f64 (cbrt.f64 9/625)) x) (cbrt.f64 (cbrt.f64 3/25))) x) (cbrt.f64 -9/625)) -1))","(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (*.f64 (*.f64 x (cbrt.f64 3/25)) x) (cbrt.f64 -9/625)) -1))","(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 -1 (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) (pow.f64 x 2)))) -1))","(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (neg.f64 x) (*.f64 (*.f64 x (cbrt.f64 3/25)) (cbrt.f64 9/625))) -1))","(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (cbrt.f64 (*.f64 3/25 x)) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 9/625)) (neg.f64 x))) -1))","(-.f64 (*.f64 x -253/1000) (fma.f64 (*.f64 x x) 3/25 -1))","(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (neg.f64 x) (*.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x))) -1))","(fma.f64 (fma.f64 (sqrt.f64 3/25) (*.f64 (sqrt.f64 3/25) x) 253/1000) (neg.f64 x) 1)","(fma.f64 (fma.f64 (cbrt.f64 (*.f64 3/25 x)) (cbrt.f64 (*.f64 (*.f64 x x) 9/625)) 253/1000) (neg.f64 x) 1)","(pow.f64 (cbrt.f64 (fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)) 3)","(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (neg.f64 x) (*.f64 3/25 x)) -1))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(fma.f64 (fma.f64 (cbrt.f64 3/25) (*.f64 (cbrt.f64 9/625) x) 253/1000) (neg.f64 x) 1)","(fma.f64 (fma.f64 3/25 x 253/1000) (neg.f64 x) 1)","(-.f64 1 (*.f64 x (+.f64 253/1000 (*.f64 x 3/25))))"]],"link":["."],"name":["Numeric.SpecFunctions:invIncompleteGamma from math-functions-0.1.5.2, A"],"oracle":[0.6211701172213043],"outputs":[["(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (neg.f64 x) (*.f64 3/25 x)) -1))"]],"time":19.0419921875,"times":[["x",5.380126953125],["(-.f64 1 (*.f64 x (+.f64 253/1000 (*.f64 x 3/25))))",4.27490234375],["(*.f64 x (+.f64 253/1000 (*.f64 x 3/25)))",4.927978515625]],"type":"regimes"},{"compiler":[[14,10]],"inputs":[["(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (neg.f64 x) (*.f64 3/25 x)) -1))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (neg.f64 x) 253/1000) (-.f64 (*.f64 (neg.f64 x) (*.f64 3/25 x)) -1))","(fma.f64 (neg.f64 x) (+.f64 253/1000 (*.f64 3/25 x)) 1)"]],"stop":[["fuel",1]],"time":21.364990234375,"type":"simplify"},{"time":0.01611328125,"type":"soundness"},{"compiler":[[14,10]],"remove-preprocessing":[[]],"time":10.075927734375,"type":"end"}]
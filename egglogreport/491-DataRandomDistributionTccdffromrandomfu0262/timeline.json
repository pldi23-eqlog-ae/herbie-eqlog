[{"compiler":[[10,6]],"method":["search"],"sampling":[[12,0.7658531109336764,0.15024379501119256,0.08390309405513108],[11,0.7512189750559628,0.1775608486495912,0.07122017629444599],[10,0.6595117235556245,0.28878028132021427,0.05170799512416124],[9,0.6321946699172258,0.33560951612889767,0.032195813953876495],[8,0.45268260315060616,0.5307313278317451,0.016586069017648697],[7,0.40585336834192276,0.5931703075766563,0.0009763240814208984],[6,0.0,0.9990236759185791,0.0009763240814208984],[5,0.0,0.9990236759185791,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":34.947998046875,"type":"analyze"},{"outcomes":[["body",256,"invalid",14.489501953125,432],["body",256,"valid",280.18359375,8256]],"time":302.73291015625,"type":"sample"},{"compiler":[[9,5]],"inputs":[["0","1"],["(/.f64 (+.f64 x y) (+.f64 y y))","(/.f64 (+.f64 y x) (+.f64 x x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (+.f64 x y) (+.f64 y y))","(/.f64 (+.f64 y x) (+.f64 x x))","(/.f64 (+.f64 x y) (+.f64 x x))"]],"symmetry":[[]],"time":58.406982421875,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(/.f64 (+.f64 x y) (+.f64 y y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 x y) (+.f64 y y))"]],"time":17.30615234375,"type":"simplify"},{"compiler":[[9,5]],"time":0.19287109375,"type":"eval"},{"alts":[["(/.f64 (+.f64 x y) (+.f64 y y))","next",0.015625]],"compiler":[[9,5],[9,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.015625],"time":0.68505859375,"type":"prune"},{"compiler":[[17,5]],"locations":[["(/.f64 (+.f64 x y) (+.f64 y y))",0.015625,true]],"time":3.60693359375,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (+.f64 x y) (+.f64 y y))","y","-inf",0.363037109375],["(/.f64 (+.f64 x y) (+.f64 y y))","y","inf",0.410888671875],["(/.f64 (+.f64 x y) (+.f64 y y))","y","0",0.470947265625],["(/.f64 (+.f64 x y) (+.f64 y y))","x","-inf",0.363037109375],["(/.f64 (+.f64 x y) (+.f64 y y))","x","inf",0.488037109375],["(/.f64 (+.f64 x y) (+.f64 y y))","x","0",0.4990234375]],"time":2.677001953125,"type":"series"},{"count":[[1,71]],"inputs":[["(/.f64 (+.f64 x y) (+.f64 y y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/2 y) y) (*.f64 (/.f64 1/2 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/2 y) x) (*.f64 (/.f64 1/2 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x y) (+.f64 y y)) (*.f64 (/.f64 (+.f64 x y) (+.f64 y y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 x y) (+.f64 y y)) 0) (/.f64 (+.f64 x y) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (/.f64 1/2 y)) (*.f64 x (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (/.f64 1/2 y)) (*.f64 y (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x y) (+.f64 y y)) (*.f64 0 (/.f64 (+.f64 x y) (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 x y) (+.f64 y y))) (/.f64 (+.f64 x y) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 -2 y)) (/.f64 (+.f64 x y) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (+.f64 x y) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (+.f64 x y) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) 1/2) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y y))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y y)) 2)) (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x y)) (/.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 x y) 8)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 y) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (/.f64 (+.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/2 y)) (/.f64 (+.f64 x y) (cbrt.f64 (*.f64 (*.f64 y y) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 x y) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (+.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (/.f64 1/2 y)) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) y) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (*.f64 -2 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 (*.f64 (*.f64 y y) 4))) (cbrt.f64 (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) y) (cbrt.f64 (/.f64 (+.f64 x y) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/2 y) (neg.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) (cbrt.f64 (/.f64 1/2 y))) (pow.f64 (cbrt.f64 (+.f64 y y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) (cbrt.f64 (/.f64 1/2 y))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y y))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y y))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 y)) (*.f64 2 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (*.f64 8 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 2)) (*.f64 (cbrt.f64 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (sqrt.f64 2)) (*.f64 (sqrt.f64 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (+.f64 x y)) 2) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x y) 1/2)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x y) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 x y)) (*.f64 -2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) 1/2) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (cbrt.f64 (/.f64 1/2 y))) (cbrt.f64 (*.f64 (*.f64 y y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 x y) 8)) (cbrt.f64 (pow.f64 (+.f64 x y) 2))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y y)) 2)) (cbrt.f64 (+.f64 x y))) (cbrt.f64 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y y)) 2)) (cbrt.f64 (neg.f64 (+.f64 x y)))) (cbrt.f64 (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y y))) (cbrt.f64 (pow.f64 (+.f64 x y) 2))) (cbrt.f64 (*.f64 (*.f64 y y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (+.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (+.f64 x y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/2 y)) (+.f64 x y)) (cbrt.f64 (*.f64 (*.f64 y y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 x y) (cbrt.f64 (/.f64 1/2 y))) 1) (cbrt.f64 (*.f64 (*.f64 y y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 x y) 1/2) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y y)) 2))) (cbrt.f64 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (+.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y y)) 2))) (cbrt.f64 (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 (*.f64 (*.f64 y y) 4))) (cbrt.f64 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) (cbrt.f64 (/.f64 1/2 y))) 1) (cbrt.f64 (*.f64 (*.f64 y y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 (*.f64 8 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) -1) (*.f64 -2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (+.f64 y y))) (neg.f64 (cbrt.f64 (*.f64 (*.f64 y y) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x y) (cbrt.f64 (/.f64 1/2 y)))) (neg.f64 (cbrt.f64 (*.f64 (*.f64 y y) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x y) (+.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 x y) (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 -2 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y y)) 3))))))"]],"rules":[["egg-rr",71]],"time":20.8349609375,"type":"rewrite"},{"count":[[95,76]],"inputs":[["1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(*.f64 1/2 (/.f64 x y))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(*.f64 1/2 (/.f64 x y))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(*.f64 1/2 (/.f64 x y))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))"]],"method":["egg-herbie"],"outputs":[["1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(*.f64 1/2 (/.f64 x y))","(/.f64 (*.f64 1/2 x) y)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(*.f64 1/2 (/.f64 x y))","(/.f64 (*.f64 1/2 x) y)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(*.f64 1/2 (/.f64 x y))","(/.f64 (*.f64 1/2 x) y)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)"]],"time":79.26123046875,"type":"simplify"},{"compiler":[[925,397]],"time":10.48681640625,"type":"eval"},{"alts":[["(fma.f64 1/2 (/.f64 x y) 1/2)","next",0]],"compiler":[[8,6],[8,6]],"count":[[77,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[76,1],"picked":[1,0]}],"min-error":[0],"time":14.423095703125,"type":"prune"},{"compiler":[[14,7]],"time":3.31591796875,"type":"localize"},{"compiler":[[2,2]],"time":0.087158203125,"type":"eval"},{"alts":[["(fma.f64 1/2 (/.f64 x y) 1/2)","done",0]],"compiler":[[8,6]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.47998046875,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["(/.f64 (+.f64 x y) (+.f64 y y))",0,1]],"compiler":[[3,2],[3,2],[9,5],[15,9]],"count":[[2,1]],"inputs":[["(fma.f64 1/2 (/.f64 x y) 1/2)","(/.f64 (+.f64 x y) (+.f64 y y))"]],"link":["."],"name":["Data.Random.Distribution.T:$ccdf from random-fu-0.2.6.2"],"oracle":[0.015625],"outputs":[["(fma.f64 1/2 (/.f64 x y) 1/2)"]],"time":7.371826171875,"times":[["x",2.324951171875],["y",2.468017578125],["(/.f64 (+.f64 x y) (+.f64 y y))",2.02197265625]],"type":"regimes"},{"compiler":[[8,6]],"inputs":[["(fma.f64 1/2 (/.f64 x y) 1/2)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 1/2 (/.f64 x y) 1/2)"]],"stop":[["done",1]],"time":21.72314453125,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":8.279052734375,"type":"end"}]
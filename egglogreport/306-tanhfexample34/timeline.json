[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.4992678165435791,0.5002439022064209,0.00048828125],[11,0.4987797737121582,0.5007319450378418,0.00048828125],[10,0.4978036880493164,0.5017080307006836,0.00048828125],[9,0.4958515167236328,0.5036602020263672,0.00048828125],[8,0.4919471740722656,0.5075645446777344,0.00048828125],[7,0.48413848876953125,0.5153732299804688,0.00048828125],[6,0.4685211181640625,0.5309906005859375,0.00048828125],[5,0.437286376953125,0.562225341796875,0.00048828125],[4,0.37481689453125,0.62469482421875,0.00048828125],[3,0.0,0.99951171875,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":99.43798828125,"type":"analyze"},{"outcomes":[["body",4096,"valid",86.022705078125,115],["body",8192,"valid",3.176025390625,2],["body",512,"valid",204.491455078125,1546],["body",1024,"valid",750.2109375,3040],["body",2048,"valid",1638.2177734375,2040],["body",256,"valid",105.862060546875,1513]],"time":2796.623046875,"type":"sample"},{"compiler":[[8,6]],"inputs":[["0"],["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))","(tan.f64 (*.f64 x 1/2))"]],"symmetry":[[]],"time":51.642822265625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))","(tan.f64 (*.f64 x 1/2))"]],"time":18.239990234375,"type":"simplify"},{"compiler":[[12,9]],"time":0.362060546875,"type":"eval"},{"alts":[["(tan.f64 (*.f64 x 1/2))","next",0.23503876953688405],["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))","fresh",28.783673387641333]],"compiler":[[5,4],[8,6],[5,4],[8,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.109375],"time":1.218017578125,"type":"prune"},{"compiler":[[10,7]],"locations":[["(tan.f64 (*.f64 x 1/2))",0.23503876953688402,true]],"time":4.27099609375,"type":"localize"},{"count":[[1,12]],"series":[["(tan.f64 (*.f64 x 1/2))","x","-inf",0.411865234375],["(tan.f64 (*.f64 x 1/2))","x","inf",0.455078125],["(tan.f64 (*.f64 x 1/2))","x","0",0.447021484375]],"time":1.364990234375,"type":"series"},{"count":[[1,40]],"inputs":[["(tan.f64 (*.f64 x 1/2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (tan.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 (*.f64 x 1/2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (tan.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 (*.f64 x 1/2))) (pow.f64 (tan.f64 (*.f64 x 1/2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (tan.f64 (*.f64 x 1/2)) 2/3) (cbrt.f64 (tan.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 x 1/2)) -1/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (pow.f64 (cos.f64 (*.f64 x 1/2)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 x 1/2)) 2/3) (cbrt.f64 (sin.f64 (*.f64 x 1/2)))) (pow.f64 (cos.f64 (*.f64 x 1/2)) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (cos.f64 (*.f64 x 1/2)))) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 -1 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2/3) (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 1 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (tan.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (tan.f64 (*.f64 x 1/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (tan.f64 (*.f64 x 1/2)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (tan.f64 (*.f64 x 1/2)))) (neg.f64 (pow.f64 (tan.f64 (*.f64 x 1/2)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (neg.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2)))) 3) (pow.f64 (neg.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 x 1/2)) 2/3) (cbrt.f64 (sin.f64 (*.f64 x 1/2))))) (neg.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (cos.f64 (*.f64 x 1/2))))) (neg.f64 (pow.f64 (cos.f64 (*.f64 x 1/2)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))) (neg.f64 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (sin.f64 0) (sin.f64 x)) (+.f64 (cos.f64 0) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (sin.f64 x) (sin.f64 0)) (+.f64 (cos.f64 x) (cos.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 x 1/2)) 2/3) (cbrt.f64 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (cos.f64 (*.f64 x 1/2)))) (pow.f64 (cos.f64 (*.f64 x 1/2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 x 1/2)) (cos.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (tan.f64 (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (tan.f64 (*.f64 x 1/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 x 1/2)) 2) (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 x 1/2)) 2) (neg.f64 (sin.f64 (*.f64 x 1/2))))) (cbrt.f64 (neg.f64 (cos.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (tan.f64 0) (tan.f64 (*.f64 x 1/2))) (-.f64 1 (*.f64 (tan.f64 0) (tan.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (tan.f64 (*.f64 x 1/2)) (tan.f64 0)) (-.f64 1 (*.f64 (tan.f64 (*.f64 x 1/2)) (tan.f64 0))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 (*.f64 x 1/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 (*.f64 x 1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (tan.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (tan.f64 (*.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 (*.f64 x 1/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 (*.f64 x 1/2))))))"]],"rules":[["egg-rr",40]],"time":35.632080078125,"type":"rewrite"},{"count":[[52,49]],"inputs":[["(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/24 (pow.f64 x 3)))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3))))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (+.f64 (*.f64 17/40320 (pow.f64 x 7)) (*.f64 1/24 (pow.f64 x 3)))))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/24 (pow.f64 x 3)))","(fma.f64 (pow.f64 x 3) 1/24 (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3))))","(fma.f64 1/2 x (fma.f64 1/240 (pow.f64 x 5) (*.f64 1/24 (pow.f64 x 3))))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (+.f64 (*.f64 17/40320 (pow.f64 x 7)) (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 1/2 x (fma.f64 1/240 (pow.f64 x 5) (fma.f64 17/40320 (pow.f64 x 7) (*.f64 1/24 (pow.f64 x 3)))))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))"]],"time":59.10986328125,"type":"simplify"},{"compiler":[[559,462]],"time":9.359130859375,"type":"eval"},{"alts":[["(/.f64 (+.f64 (sin.f64 x) (sin.f64 0)) (+.f64 (cos.f64 x) (cos.f64 0)))","fresh",0.5340682370639838],["(*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (cos.f64 (*.f64 x 1/2)))) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2))) -2))","fresh",0.3777314453688404],["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","next",0.19921875],["(/.f64 (cbrt.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 x 1/2)) 2) (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (cos.f64 (*.f64 x 1/2))))","fresh",17.69878676455818],["(tan.f64 (*.f64 x 1/2))","done",0.23503876953688405],["(*.f64 (pow.f64 (cos.f64 (*.f64 x 1/2)) -1/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (pow.f64 (cos.f64 (*.f64 x 1/2)) 2/3)))","fresh",18.38546757814754],["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))","fresh",28.783673387641333]],"compiler":[[12,10],[19,16],[10,8],[19,16],[5,4],[19,16],[8,6],[12,10],[19,16],[10,8],[19,16],[19,16],[8,6]],"count":[[51,7]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[49,5],"picked":[1,1]}],"min-error":[0.015625],"time":10.68701171875,"type":"prune"},{"compiler":[[23,17]],"locations":[["(cos.f64 (*.f64 1/2 x))",0.01171875,true],["(sin.f64 (*.f64 1/2 x))",0.03125,true],["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))",0.1875,true]],"time":8.56787109375,"type":"localize"},{"count":[[3,12]],"series":[["(cos.f64 (*.f64 1/2 x))","x","-inf",0.138916015625],["(cos.f64 (*.f64 1/2 x))","x","inf",0.1708984375],["(cos.f64 (*.f64 1/2 x))","x","0",0.39697265625],["(sin.f64 (*.f64 1/2 x))","x","-inf",0.137939453125],["(sin.f64 (*.f64 1/2 x))","x","inf",0.14501953125],["(sin.f64 (*.f64 1/2 x))","x","0",0.212158203125],["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","x","-inf",0.1650390625],["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","x","inf",0.192138671875],["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","x","0",0.18603515625]],"time":1.841064453125,"type":"series"},{"count":[[3,128]],"inputs":[["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(sin.f64 (*.f64 1/2 x))","(cos.f64 (*.f64 1/2 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (tan.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 (*.f64 1/2 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3) (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) (pow.f64 (tan.f64 (*.f64 1/2 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 2/3) (cbrt.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3) (cos.f64 (*.f64 1/2 x))) (cbrt.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (tan.f64 (*.f64 1/2 x)))) (neg.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3)) (*.f64 (sin.f64 (*.f64 1/2 x)) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3) (*.f64 (sin.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)) (*.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) (cbrt.f64 (sin.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) (cbrt.f64 (sin.f64 (*.f64 1/2 x)))) (*.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))) (/.f64 -1 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 1/2 x)) (/.f64 1 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) (sin.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (cos.f64 (*.f64 1/2 x))) (neg.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)) (/.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (tan.f64 (*.f64 1/2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 2/3) (cbrt.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))))) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 2/3) (*.f64 0 (cbrt.f64 (neg.f64 (tan.f64 (*.f64 1/2 x))))))) (cbrt.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 (*.f64 1/2 x)))) (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3) (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3)) (/.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (cos.f64 (*.f64 1/2 x))) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3) (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3) (/.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3)))) (neg.f64 (cbrt.f64 (pow.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3))) (cbrt.f64 (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 2) (neg.f64 (sin.f64 (*.f64 1/2 x))))) (cbrt.f64 (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 2) (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (sin.f64 0) (sin.f64 x)) (+.f64 (cos.f64 0) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (sin.f64 x) (sin.f64 0)) (+.f64 (cos.f64 x) (cos.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)) (cbrt.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))) (neg.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))) (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 2/3) (cbrt.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))))) (cbrt.f64 (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (tan.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (tan.f64 (*.f64 1/2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 2/3) (cbrt.f64 (neg.f64 (sin.f64 (*.f64 1/2 x)))))) (cbrt.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (tan.f64 0) (tan.f64 (*.f64 1/2 x))) (-.f64 1 (*.f64 (tan.f64 0) (tan.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (tan.f64 (*.f64 1/2 x)) (tan.f64 0)) (-.f64 1 (*.f64 (tan.f64 (*.f64 1/2 x)) (tan.f64 0))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (tan.f64 (*.f64 1/2 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (tan.f64 (neg.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 (*.f64 1/2 x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sin.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 (*.f64 1/2 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 (*.f64 1/2 x)) 3/2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 (*.f64 1/2 x)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 (*.f64 1/2 x)) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 (*.f64 1/2 x)) 6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 (*.f64 1/2 x)) 9) 9)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 (*.f64 1/2 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 (*.f64 1/2 x)) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 (*.f64 1/2 x)) 1/3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 0) (cos.f64 (*.f64 1/2 x))) (*.f64 (cos.f64 0) (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 0)) (*.f64 (cos.f64 (*.f64 1/2 x)) (sin.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 (*.f64 1/2 x)) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sin.f64 (*.f64 1/2 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3) 0)) (+.f64 0 (cbrt.f64 (sin.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3) (+.f64 0 (*.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 0))) (-.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3) (*.f64 0 (cbrt.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))))))) (cbrt.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 (*.f64 1/2 x)))) (neg.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3)) (cbrt.f64 (neg.f64 (sin.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3) (cbrt.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (sin.f64 (neg.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 (*.f64 1/2 x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (*.f64 1/2 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cos.f64 (*.f64 1/2 x)) 3/2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cos.f64 (*.f64 1/2 x)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cos.f64 (*.f64 1/2 x)) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cos.f64 (*.f64 1/2 x)) 6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cos.f64 (*.f64 1/2 x)) 9) 9)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cos.f64 (*.f64 1/2 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cos.f64 (*.f64 1/2 x)) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cos.f64 (*.f64 1/2 x)) 1/3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cos.f64 (*.f64 1/2 x)) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 0) (cos.f64 (*.f64 1/2 x))) (*.f64 (sin.f64 0) (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 (*.f64 1/2 x)) (cos.f64 0)) (*.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cos.f64 (*.f64 1/2 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 (*.f64 1/2 x)))) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3)) (cbrt.f64 (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3) 0)) (+.f64 0 (cbrt.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3) (+.f64 0 (*.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) 0))) (-.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 (*.f64 1/2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3) (*.f64 0 (cbrt.f64 (neg.f64 (cos.f64 (*.f64 1/2 x))))))) (cbrt.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3) (cbrt.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 (*.f64 1/2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (*.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (neg.f64 (*.f64 1/2 x)))))))"]],"rules":[["egg-rr",35],["egg-rr",35],["egg-rr",58]],"time":51.39111328125,"type":"rewrite"},{"count":[[140,148]],"inputs":[["(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/24 (pow.f64 x 3)))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3))))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (+.f64 (*.f64 17/40320 (pow.f64 x 7)) (*.f64 1/24 (pow.f64 x 3)))))","(*.f64 1/2 x)","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (*.f64 1/2 x))","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5))))","(+.f64 (*.f64 -1/645120 (pow.f64 x 7)) (+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5)))))","1","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 1 (*.f64 1/384 (pow.f64 x 4))))","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 -1/46080 (pow.f64 x 6)) (*.f64 1/384 (pow.f64 x 4)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/24 (pow.f64 x 3)))","(fma.f64 (pow.f64 x 3) 1/24 (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3))))","(fma.f64 x 1/2 (fma.f64 1/240 (pow.f64 x 5) (*.f64 1/24 (pow.f64 x 3))))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (+.f64 (*.f64 17/40320 (pow.f64 x 7)) (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 x 1/2 (fma.f64 1/240 (pow.f64 x 5) (fma.f64 17/40320 (pow.f64 x 7) (*.f64 1/24 (pow.f64 x 3)))))","(*.f64 1/2 x)","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (*.f64 1/2 x))","(fma.f64 -1/48 (pow.f64 x 3) (*.f64 1/2 x))","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5))))","(fma.f64 -1/48 (pow.f64 x 3) (fma.f64 (pow.f64 x 5) 1/3840 (*.f64 1/2 x)))","(+.f64 (*.f64 -1/645120 (pow.f64 x 7)) (+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5)))))","(fma.f64 (pow.f64 x 7) -1/645120 (fma.f64 -1/48 (pow.f64 x 3) (fma.f64 (pow.f64 x 5) 1/3840 (*.f64 1/2 x))))","1","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) 1)","(fma.f64 -1/8 (*.f64 x x) 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 1 (*.f64 1/384 (pow.f64 x 4))))","(fma.f64 -1/8 (*.f64 x x) (fma.f64 (pow.f64 x 4) 1/384 1))","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 -1/46080 (pow.f64 x 6)) (*.f64 1/384 (pow.f64 x 4)))))","(+.f64 (fma.f64 -1/8 (*.f64 x x) 1) (fma.f64 -1/46080 (pow.f64 x 6) (*.f64 1/384 (pow.f64 x 4))))"]],"time":44.762939453125,"type":"simplify"},{"compiler":[[2154,1790]],"time":34.618896484375,"type":"eval"},{"alts":[["(*.f64 (*.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)) (*.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) (cbrt.f64 (sin.f64 (*.f64 1/2 x)))))","fresh",18.74197652583171],["(*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (cos.f64 (*.f64 x 1/2)))) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2))) -2))","fresh",0.3777314453688404],["(/.f64 (+.f64 (sin.f64 x) (sin.f64 0)) (+.f64 (cos.f64 x) (cos.f64 0)))","fresh",0.5340682370639838],["(/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 3) (cos.f64 (*.f64 1/2 x)))","fresh",0.6805803712007971],["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","done",0.19921875],["(/.f64 (sin.f64 (*.f64 1/2 x)) (+.f64 (-.f64 (cos.f64 (*.f64 1/2 x)) 1) 1))","fresh",0.41027292692962175],["(*.f64 (sin.f64 (*.f64 1/2 x)) (/.f64 1 (cos.f64 (*.f64 1/2 x))))","next",0.26400375976844204],["(*.f64 (pow.f64 (cos.f64 (*.f64 x 1/2)) -1/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (pow.f64 (cos.f64 (*.f64 x 1/2)) 2/3)))","fresh",18.38546757814754],["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))","fresh",28.783673387641333]],"compiler":[[25,21],[19,16],[12,10],[13,11],[10,8],[14,12],[12,10],[19,16],[8,6],[25,21],[19,16],[12,10],[13,11],[14,12],[12,10],[19,16],[8,6]],"count":[[155,9]],"kept":[{"done":[1,0],"fresh":[5,3],"new":[148,5],"picked":[1,1]}],"min-error":[0],"time":38.300048828125,"type":"prune"},{"compiler":[[32,25]],"locations":[["(cos.f64 (*.f64 1/2 x))",0.01171875,false],["(sin.f64 (*.f64 1/2 x))",0.03125,false],["(/.f64 1 (cos.f64 (*.f64 1/2 x)))",0.09765625,true],["(*.f64 (sin.f64 (*.f64 1/2 x)) (/.f64 1 (cos.f64 (*.f64 1/2 x))))",0.23503876953688402,true]],"time":11.155029296875,"type":"localize"},{"count":[[2,16]],"series":[["(/.f64 1 (cos.f64 (*.f64 1/2 x)))","x","-inf",0.35205078125],["(/.f64 1 (cos.f64 (*.f64 1/2 x)))","x","inf",0.3359375],["(/.f64 1 (cos.f64 (*.f64 1/2 x)))","x","0",0.246826171875],["(*.f64 (sin.f64 (*.f64 1/2 x)) (/.f64 1 (cos.f64 (*.f64 1/2 x))))","x","-inf",0.168212890625],["(*.f64 (sin.f64 (*.f64 1/2 x)) (/.f64 1 (cos.f64 (*.f64 1/2 x))))","x","inf",0.190185546875],["(*.f64 (sin.f64 (*.f64 1/2 x)) (/.f64 1 (cos.f64 (*.f64 1/2 x))))","x","0",0.2119140625]],"time":1.5849609375,"type":"series"},{"count":[[2,116]],"inputs":[["(*.f64 (sin.f64 (*.f64 1/2 x)) (/.f64 1 (cos.f64 (*.f64 1/2 x))))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 (*.f64 1/2 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (tan.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)) (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3)) (/.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))) (*.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3) (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) (pow.f64 (tan.f64 (*.f64 1/2 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 2/3) (cbrt.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (cos.f64 (*.f64 1/2 x))) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3) (cos.f64 (*.f64 1/2 x))) (cbrt.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3) (/.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3) (*.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3) (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 (*.f64 1/2 x)))) (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3) (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 1/2 x)) (/.f64 1 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) (sin.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3) (sin.f64 (*.f64 1/2 x))) (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))) (/.f64 -1 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3)) (*.f64 (sin.f64 (*.f64 1/2 x)) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)) (/.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (cos.f64 (*.f64 1/2 x))) (neg.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3))) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (tan.f64 (*.f64 1/2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 2/3) (cbrt.f64 (sin.f64 (*.f64 1/2 x)))) (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3) (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3))) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 2/3) (cbrt.f64 (sin.f64 (*.f64 1/2 x))))) (cbrt.f64 (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3)))) (neg.f64 (cbrt.f64 (pow.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))) (pow.f64 (tan.f64 (*.f64 1/2 x)) 2))) (cbrt.f64 (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 2) (neg.f64 (sin.f64 (*.f64 1/2 x))))) (cbrt.f64 (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (sin.f64 0) (sin.f64 x)) (+.f64 (cos.f64 0) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (sin.f64 x) (sin.f64 0)) (+.f64 (cos.f64 x) (cos.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))) (neg.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))) (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 2/3) (cbrt.f64 (sin.f64 (*.f64 1/2 x)))) (cbrt.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3)) (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3) (sin.f64 (*.f64 1/2 x))) (cbrt.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3))) (cbrt.f64 (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (tan.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (tan.f64 (*.f64 1/2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 2) (sin.f64 (*.f64 1/2 x)))) (cbrt.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (pow.f64 (tan.f64 (*.f64 1/2 x)) 2))) (cbrt.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 2) (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))) (pow.f64 (tan.f64 (*.f64 1/2 x)) 2))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (tan.f64 (*.f64 1/2 x)) (tan.f64 0)) (-.f64 1 (*.f64 (tan.f64 (*.f64 1/2 x)) (tan.f64 0))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (tan.f64 0) (tan.f64 (*.f64 1/2 x))) (-.f64 1 (*.f64 (tan.f64 0) (tan.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (tan.f64 (neg.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 (*.f64 1/2 x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) 3/2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) 1/3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) 6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) 9) 9)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -1 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) 4/3)) (cbrt.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3) (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3)) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)) (/.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3) (cbrt.f64 (pow.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (cos.f64 (*.f64 1/2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3) -1) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3))) (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3) (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3))) (cbrt.f64 (pow.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3) (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3) -1) (cbrt.f64 (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)) (cbrt.f64 (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3)) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (cos.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (cos.f64 (*.f64 1/2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3)) 0) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 (*.f64 1/2 x))) (neg.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3) -1)) (cbrt.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)))) (neg.f64 (cbrt.f64 (pow.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3) 7)) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2) -1)) (cbrt.f64 (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 1/2 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3) (cbrt.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -1/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (*.f64 1/2 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -1 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) -3))))))"]],"rules":[["egg-rr",53],["egg-rr",63]],"time":50.362060546875,"type":"rewrite"},{"count":[[132,130]],"inputs":[["(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/24 (pow.f64 x 3)))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3))))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (+.f64 (*.f64 17/40320 (pow.f64 x 7)) (*.f64 1/24 (pow.f64 x 3)))))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","1","(+.f64 (*.f64 1/8 (pow.f64 x 2)) 1)","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 1 (*.f64 5/384 (pow.f64 x 4))))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 61/46080 (pow.f64 x 6)) (+.f64 1 (*.f64 5/384 (pow.f64 x 4)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/24 (pow.f64 x 3)))","(fma.f64 1/24 (pow.f64 x 3) (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3))))","(fma.f64 1/2 x (fma.f64 1/240 (pow.f64 x 5) (*.f64 1/24 (pow.f64 x 3))))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (+.f64 (*.f64 17/40320 (pow.f64 x 7)) (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 1/2 x (fma.f64 1/240 (pow.f64 x 5) (fma.f64 17/40320 (pow.f64 x 7) (*.f64 1/24 (pow.f64 x 3)))))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","1","(+.f64 (*.f64 1/8 (pow.f64 x 2)) 1)","(fma.f64 1/8 (*.f64 x x) 1)","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 1 (*.f64 5/384 (pow.f64 x 4))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 5/384 (pow.f64 x 4) 1))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 61/46080 (pow.f64 x 6)) (+.f64 1 (*.f64 5/384 (pow.f64 x 4)))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 61/46080 (pow.f64 x 6) (fma.f64 5/384 (pow.f64 x 4) 1)))"]],"time":84.075927734375,"type":"simplify"},{"compiler":[[3454,2909]],"time":52.364990234375,"type":"eval"},{"alts":[["(*.f64 (sin.f64 (*.f64 1/2 x)) (/.f64 1 (cos.f64 (*.f64 1/2 x))))","done",0.26400375976844204],["(*.f64 (sin.f64 (*.f64 1/2 x)) (*.f64 (cos.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2)))","next",0.26400375976844204],["(*.f64 (*.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)) (*.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) (cbrt.f64 (sin.f64 (*.f64 1/2 x)))))","fresh",18.74197652583171],["(*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (cos.f64 (*.f64 x 1/2)))) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2))) -2))","fresh",0.3777314453688404],["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","done",0.19921875],["(/.f64 (sin.f64 (*.f64 1/2 x)) (+.f64 (-.f64 (cos.f64 (*.f64 1/2 x)) 1) 1))","fresh",0.41027292692962175],["(/.f64 (+.f64 (sin.f64 x) (sin.f64 0)) (+.f64 (cos.f64 x) (cos.f64 0)))","fresh",0.5340682370639838],["(*.f64 (pow.f64 (cos.f64 (*.f64 x 1/2)) -1/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (pow.f64 (cos.f64 (*.f64 x 1/2)) 2/3)))","fresh",18.38546757814754],["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))","fresh",28.783673387641333]],"compiler":[[12,10],[17,14],[25,21],[19,16],[10,8],[14,12],[12,10],[19,16],[8,6],[17,14],[25,21],[19,16],[14,12],[12,10],[19,16],[8,6]],"count":[[222,9]],"kept":[{"done":[1,1],"fresh":[7,5],"new":[213,2],"picked":[1,1]}],"min-error":[0],"time":64.9169921875,"type":"prune"},{"compiler":[[48,38]],"locations":[["(sin.f64 (*.f64 1/2 x))",0.03125,false],["(*.f64 (cos.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2))",0.1875,true],["(pow.f64 (cos.f64 (*.f64 1/2 x)) -2)",0.22332001953688405,true],["(*.f64 (sin.f64 (*.f64 1/2 x)) (*.f64 (cos.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2)))",0.23503876953688402,true]],"time":17.711181640625,"type":"localize"},{"count":[[3,36]],"series":[["(*.f64 (cos.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2))","x","-inf",0.14404296875],["(*.f64 (cos.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2))","x","inf",0.1630859375],["(*.f64 (cos.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2))","x","0",0.157958984375],["(pow.f64 (cos.f64 (*.f64 1/2 x)) -2)","x","-inf",0.785888671875],["(pow.f64 (cos.f64 (*.f64 1/2 x)) -2)","x","inf",0.464111328125],["(pow.f64 (cos.f64 (*.f64 1/2 x)) -2)","x","0",0.2490234375],["(*.f64 (sin.f64 (*.f64 1/2 x)) (*.f64 (cos.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2)))","x","-inf",0.200927734375],["(*.f64 (sin.f64 (*.f64 1/2 x)) (*.f64 (cos.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2)))","x","inf",0.18603515625],["(*.f64 (sin.f64 (*.f64 1/2 x)) (*.f64 (cos.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2)))","x","0",0.260986328125]],"time":2.744873046875,"type":"series"},{"count":[[3,115]],"inputs":[["(*.f64 (sin.f64 (*.f64 1/2 x)) (*.f64 (cos.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2)))","(pow.f64 (cos.f64 (*.f64 1/2 x)) -2)","(*.f64 (cos.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3) (cos.f64 (*.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x)))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)) (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3) (cos.f64 (*.f64 -1/2 x))) (cbrt.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)) (sin.f64 (*.f64 1/2 x))) (cbrt.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x)))) (pow.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x))) 2/3) (cbrt.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (cos.f64 (*.f64 -1/2 x))) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x))))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2/3) (/.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (cos.f64 (*.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)) (*.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (+.f64 0 (sin.f64 x)) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2))) 1/2) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -4)) (*.f64 (*.f64 (+.f64 0 (sin.f64 x)) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x)))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x))))) (neg.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)) (cos.f64 (*.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 -1/2 x)) (*.f64 (sin.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 1/2 x)) (/.f64 1 (cos.f64 (*.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x))) (sin.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2) (+.f64 0 (sin.f64 x))) 1) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2) (+.f64 0 (sin.f64 x))) 4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2) (+.f64 0 (sin.f64 x))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 0 (sin.f64 x)) 1/2) (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2) (*.f64 (+.f64 0 (sin.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2) (+.f64 0 (sin.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2) (+.f64 0 (sin.f64 x)))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (neg.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 -1/2 x))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x))) (/.f64 1 (cos.f64 (*.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) 2/3) (pow.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) 2/3) (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -5/3) 2) (pow.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (cos.f64 (*.f64 -1/2 x))) (/.f64 -1 (cos.f64 (*.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 -1/2 x)) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2))) 2) (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -4)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -4)) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -4)) (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -4)) (cos.f64 (*.f64 -1/2 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)) (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2))) (neg.f64 (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (cos.f64 x) 1) 1/2) (pow.f64 (cos.f64 (*.f64 -1/2 x)) -4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -4) (*.f64 (+.f64 (cos.f64 x) 1) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x))) (cos.f64 (*.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x))) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1 (cos.f64 (*.f64 -1/2 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (cos.f64 (*.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (cos.f64 (*.f64 -1/2 x))) (/.f64 -2 (cos.f64 (*.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 3 (cos.f64 (*.f64 -1/2 x))) (/.f64 2 (cos.f64 (*.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 2 (cos.f64 (*.f64 -1/2 x))) (/.f64 1 (cos.f64 (*.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -1 (cos.f64 (*.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -5/3) (pow.f64 (cos.f64 (*.f64 -1/2 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (*.f64 -1/2 x))) (*.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) 2/3) (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) 2/3) (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)) (cbrt.f64 (cos.f64 (*.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) 2/3) (pow.f64 (cos.f64 (*.f64 -1/2 x)) -5/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x)))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)) (cbrt.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -4)) (cos.f64 (*.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -4)) (cos.f64 (*.f64 -1/2 x))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (*.f64 -1/2 x)) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -4)) (*.f64 (cos.f64 (*.f64 -1/2 x)) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x)))) (pow.f64 (cbrt.f64 (/.f64 -1 (cos.f64 (*.f64 -1/2 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (cos.f64 (*.f64 -1/2 x)))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 -1 (cos.f64 (*.f64 -1/2 x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 -1/2 x)) (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2) (cos.f64 (*.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1 (cos.f64 (*.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (cos.f64 (*.f64 -1/2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (cos.f64 (*.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (cos.f64 (*.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (cos.f64 (*.f64 -1/2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (cos.f64 (*.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) 3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (*.f64 -1/2 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (*.f64 -1/2 x))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -1 (cos.f64 (*.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (neg.f64 (cbrt.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x))) 3))))))"]],"rules":[["egg-rr",39],["egg-rr",34],["egg-rr",42]],"time":51.01708984375,"type":"rewrite"},{"count":[[151,140]],"inputs":[["(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/24 (pow.f64 x 3)))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3))))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (+.f64 (*.f64 17/40320 (pow.f64 x 7)) (*.f64 1/24 (pow.f64 x 3)))))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","1","(+.f64 1 (*.f64 1/4 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 1/4 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 1/4 (pow.f64 x 2)) (+.f64 (*.f64 17/2880 (pow.f64 x 6)) (*.f64 1/24 (pow.f64 x 4)))))","(/.f64 1 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2))","(/.f64 1 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2))","(/.f64 1 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2))","(/.f64 1 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2))","(/.f64 1 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2))","(/.f64 1 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2))","(/.f64 1 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2))","(/.f64 1 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2))","1","(+.f64 (*.f64 1/8 (pow.f64 x 2)) 1)","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 1 (*.f64 5/384 (pow.f64 x 4))))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 61/46080 (pow.f64 x 6)) (+.f64 1 (*.f64 5/384 (pow.f64 x 4)))))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/24 (pow.f64 x 3)))","(fma.f64 (pow.f64 x 3) 1/24 (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3))))","(fma.f64 1/2 x (fma.f64 1/240 (pow.f64 x 5) (*.f64 1/24 (pow.f64 x 3))))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (+.f64 (*.f64 17/40320 (pow.f64 x 7)) (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 1/2 x (fma.f64 1/240 (pow.f64 x 5) (fma.f64 17/40320 (pow.f64 x 7) (*.f64 1/24 (pow.f64 x 3)))))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))","1","(+.f64 1 (*.f64 1/4 (pow.f64 x 2)))","(fma.f64 (*.f64 x x) 1/4 1)","(+.f64 1 (+.f64 (*.f64 1/4 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (fma.f64 (pow.f64 x 4) 1/24 (*.f64 1/4 (*.f64 x x))))","(+.f64 1 (+.f64 (*.f64 1/4 (pow.f64 x 2)) (+.f64 (*.f64 17/2880 (pow.f64 x 6)) (*.f64 1/24 (pow.f64 x 4)))))","(+.f64 (fma.f64 (*.f64 x x) 1/4 1) (fma.f64 17/2880 (pow.f64 x 6) (*.f64 1/24 (pow.f64 x 4))))","(/.f64 1 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2))","(pow.f64 (cos.f64 (*.f64 1/2 x)) -2)","(/.f64 1 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2))","(pow.f64 (cos.f64 (*.f64 1/2 x)) -2)","(/.f64 1 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2))","(pow.f64 (cos.f64 (*.f64 1/2 x)) -2)","(/.f64 1 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2))","(pow.f64 (cos.f64 (*.f64 1/2 x)) -2)","(/.f64 1 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2))","(pow.f64 (cos.f64 (*.f64 1/2 x)) -2)","(/.f64 1 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2))","(pow.f64 (cos.f64 (*.f64 1/2 x)) -2)","(/.f64 1 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2))","(pow.f64 (cos.f64 (*.f64 1/2 x)) -2)","(/.f64 1 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2))","(pow.f64 (cos.f64 (*.f64 1/2 x)) -2)","1","(+.f64 (*.f64 1/8 (pow.f64 x 2)) 1)","(fma.f64 1/8 (*.f64 x x) 1)","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 1 (*.f64 5/384 (pow.f64 x 4))))","(fma.f64 (*.f64 x x) 1/8 (fma.f64 (pow.f64 x 4) 5/384 1))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 61/46080 (pow.f64 x 6)) (+.f64 1 (*.f64 5/384 (pow.f64 x 4)))))","(fma.f64 (*.f64 x x) 1/8 (fma.f64 (pow.f64 x 6) 61/46080 (fma.f64 (pow.f64 x 4) 5/384 1)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))"]],"time":109.27294921875,"type":"simplify"},{"compiler":[[3311,2748]],"time":50.051025390625,"type":"eval"},{"alts":[["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","done",0.19921875],["(*.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)) (cos.f64 (*.f64 -1/2 x)))","fresh",0.260761279305326],["(/.f64 (+.f64 (sin.f64 x) (sin.f64 0)) (+.f64 (cos.f64 x) (cos.f64 0)))","fresh",0.5340682370639838],["(*.f64 (sin.f64 (*.f64 1/2 x)) (/.f64 1 (cos.f64 (*.f64 1/2 x))))","done",0.26400375976844204],["(*.f64 (*.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)) (*.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) (cbrt.f64 (sin.f64 (*.f64 1/2 x)))))","fresh",18.74197652583171],["(*.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x))))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)))","fresh",0.30019384768442015],["(*.f64 (pow.f64 (cos.f64 (*.f64 x 1/2)) -1/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (pow.f64 (cos.f64 (*.f64 x 1/2)) 2/3)))","fresh",18.38546757814754],["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))","fresh",28.783673387641333]],"compiler":[[10,8],[17,14],[12,10],[12,10],[25,21],[21,18],[19,16],[8,6]],"count":[[190,8]],"kept":[{"done":[2,2],"fresh":[6,4],"new":[181,2],"picked":[1,0]}],"min-error":[0],"time":50.911865234375,"type":"prune"},{"accuracy":[0.19921875],"baseline":[0.19921875],"branch":[["x",0.19921875,1],["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))",0.19921875,1]],"compiler":[[2,1],[8,6],[220,175]],"count":[[16,1]],"inputs":[["(*.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)) (cos.f64 (*.f64 -1/2 x)))","(*.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (/.f64 1 (cos.f64 (*.f64 -1/2 x))))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 -1/2 x)) -2)))","(*.f64 (sin.f64 (*.f64 1/2 x)) (*.f64 (cos.f64 (*.f64 1/2 x)) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2)))","(/.f64 (+.f64 (sin.f64 x) (sin.f64 0)) (+.f64 (cos.f64 x) (cos.f64 0)))","(*.f64 (*.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (pow.f64 (cos.f64 (*.f64 1/2 x)) -2/3)) (*.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) (cbrt.f64 (sin.f64 (*.f64 1/2 x)))))","(/.f64 (+.f64 (sin.f64 x) (sin.f64 0)) (+.f64 (cos.f64 x) (cos.f64 0)))","(/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 3) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (+.f64 (-.f64 (cos.f64 (*.f64 1/2 x)) 1) 1))","(*.f64 (sin.f64 (*.f64 1/2 x)) (/.f64 1 (cos.f64 (*.f64 1/2 x))))","(/.f64 (+.f64 (sin.f64 x) (sin.f64 0)) (+.f64 (cos.f64 x) (cos.f64 0)))","(*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (cos.f64 (*.f64 x 1/2)))) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2))) -2))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (cbrt.f64 (*.f64 (pow.f64 (tan.f64 (*.f64 x 1/2)) 2) (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (cos.f64 (*.f64 x 1/2))))","(*.f64 (pow.f64 (cos.f64 (*.f64 x 1/2)) -1/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (pow.f64 (cos.f64 (*.f64 x 1/2)) 2/3)))","(tan.f64 (*.f64 x 1/2))","(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))"]],"link":["."],"name":["tanhf (example 3.4)"],"oracle":[47.01358473388708],"outputs":[["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))"]],"time":14.211181640625,"times":[["x",5.68212890625],["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))",4.181884765625]],"type":"regimes"},{"compiler":[[10,8]],"inputs":[["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(tan.f64 (*.f64 1/2 x))"]],"stop":[["fuel",1]],"time":39.98291015625,"type":"simplify"},{"time":0.01611328125,"type":"soundness"},{"compiler":[[10,8]],"remove-preprocessing":[[]],"time":8.866943359375,"type":"end"}]
[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.46829234808683395,0.349268042948097,0.18243960896506906],[11,0.46829234808683395,0.3551216972991824,0.17658595461398363],[10,0.43707285821437836,0.44487773068249226,0.11804941110312939],[9,0.43707285821437836,0.45268260315060616,0.11024453863501549],[8,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[7,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[6,0.062438979744911194,0.9365846961736679,0.0009763240814208984],[5,0.0,0.9990236759185791,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":82.767822265625,"type":"analyze"},{"outcomes":[["body",512,"invalid",112.57421875,1032],["body",2048,"invalid",0.3388671875,1],["body",256,"invalid",120.670654296875,2131],["body",1024,"invalid",345.38623046875,1930],["body",1024,"valid",397.05029296875,2097],["body",512,"valid",108.849365234375,1002],["body",2048,"valid",1.8291015625,4],["body",256,"valid",282.87841796875,5153]],"time":1383.01708984375,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 (sinh.f64 x) x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 (sinh.f64 x) x))"]],"symmetry":[[]],"time":58.51708984375,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))"]],"time":18.706787109375,"type":"simplify"},{"compiler":[[9,6]],"time":0.217041015625,"type":"eval"},{"alts":[["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))","next",0.27181625976844204]],"compiler":[[9,6],[9,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.27181625976844204],"time":0.7099609375,"type":"prune"},{"compiler":[[19,6]],"locations":[["(sin.f64 x)",0.01171875,true],["(/.f64 (sinh.f64 y) y)",0.015625,true],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))",0.23125896750900723,true]],"time":4.946044921875,"type":"localize"},{"count":[[3,40]],"series":[["(sin.f64 x)","x","-inf",0.153076171875],["(sin.f64 x)","x","inf",0.137939453125],["(sin.f64 x)","x","0",0.19091796875],["(/.f64 (sinh.f64 y) y)","y","-inf",0.545166015625],["(/.f64 (sinh.f64 y) y)","y","inf",0.320068359375],["(/.f64 (sinh.f64 y) y)","y","0",0.238037109375],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))","y","-inf",1.838134765625],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))","y","inf",1.190185546875],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))","y","0",0.91796875],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))","x","-inf",0.555908203125],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))","x","inf",0.97705078125],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))","x","0",0.929931640625]],"time":8.18505859375,"type":"series"},{"count":[[3,181]],"inputs":[["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))","(/.f64 (sinh.f64 y) y)","(sin.f64 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 0) (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) (*.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) (*.f64 0 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sinh.f64 y) y)) (*.f64 (pow.f64 (/.f64 (sinh.f64 y) y) 2/3) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (cbrt.f64 y)) (/.f64 (sinh.f64 y) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (sinh.f64 y) y) 2/3) (sin.f64 x)) (cbrt.f64 (/.f64 (sinh.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sinh.f64 y) (pow.f64 y 2/3)) (/.f64 (sin.f64 x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3) (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sinh.f64 y) y) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (sinh.f64 y) y) (cbrt.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (cbrt.f64 (/.f64 (sinh.f64 y) y))) (pow.f64 (/.f64 (sinh.f64 y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) 2/3) (/.f64 (sinh.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sinh.f64 y) (/.f64 (sin.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 (sin.f64 x) (sinh.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 x) 2/3) (/.f64 (sinh.f64 y) y)) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sinh.f64 y) y) 2/3) (*.f64 (sin.f64 x) (cbrt.f64 (/.f64 (sinh.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) y) (sinh.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) 2/3) (*.f64 (/.f64 (sinh.f64 y) y) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (*.f64 2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (/.f64 (sin.f64 x) y)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (pow.f64 (cbrt.f64 (pow.f64 y 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) -1) (*.f64 2 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (pow.f64 y -1/3)) (*.f64 2 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) 1) (*.f64 2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3) (cbrt.f64 (*.f64 (sin.f64 x) (sinh.f64 y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 y)) (sinh.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sinh.f64 y)) (*.f64 (pow.f64 (/.f64 (sinh.f64 y) y) 2/3) (sin.f64 x))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sinh.f64 y))) (*.f64 (pow.f64 (/.f64 (sinh.f64 y) y) 2/3) (sin.f64 x))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sinh.f64 y) (cbrt.f64 y)) (sin.f64 x)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) (pow.f64 y 2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sinh.f64 y))) (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (/.f64 (sin.f64 x) y)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (/.f64 (sin.f64 x) y)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (/.f64 1 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) y) (sin.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (/.f64 (sin.f64 x) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (sinh.f64 y) y)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sin.f64 x) (neg.f64 (/.f64 (sinh.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (sinh.f64 y) y) 0) (/.f64 (sinh.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sinh.f64 y) y) (*.f64 (/.f64 (sinh.f64 y) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (sinh.f64 y) y)) (/.f64 (sinh.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sinh.f64 y) y) (*.f64 0 (/.f64 (sinh.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (neg.f64 (/.f64 (sinh.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (exp.f64 y) 1/2) y) (/.f64 (*.f64 (exp.f64 (neg.f64 y)) 1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (sinh.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sinh.f64 y) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sinh.f64 y) y)) (pow.f64 (/.f64 (sinh.f64 y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sinh.f64 y) y) 2/3) (cbrt.f64 (/.f64 (sinh.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sinh.f64 y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sinh.f64 y)) (/.f64 (pow.f64 (sinh.f64 y) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sinh.f64 y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (sinh.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (/.f64 (sinh.f64 y) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sinh.f64 y) 2/3) y) (cbrt.f64 (sinh.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (neg.f64 (sinh.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sinh.f64 y) (pow.f64 y 2/3)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (/.f64 1 (*.f64 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (sinh.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sinh.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sinh.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (sinh.f64 y) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) y) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2))) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (/.f64 (pow.f64 (sinh.f64 y) 2/3) y)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (/.f64 1 y)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sinh.f64 y) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (pow.f64 (cbrt.f64 (pow.f64 y 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) y) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) y) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) y) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2))) (*.f64 (pow.f64 y 2/3) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2))) (*.f64 (pow.f64 y 2/3) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y))) (*.f64 (pow.f64 y 2/3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (*.f64 (pow.f64 y 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (*.f64 y (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (*.f64 y (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2))) (*.f64 (neg.f64 y) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2))) (*.f64 (neg.f64 y) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) -1) (*.f64 2 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (pow.f64 y -1/3)) (*.f64 2 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) -1) (*.f64 (cbrt.f64 4) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (pow.f64 y -1/3)) (*.f64 (cbrt.f64 4) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) 1) (*.f64 (cbrt.f64 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) -1) (*.f64 -2 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (pow.f64 y -1/3)) (*.f64 -2 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) 1) (*.f64 -2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) -1) (*.f64 (sqrt.f64 2) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (pow.f64 y -1/3)) (*.f64 (sqrt.f64 2) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) 1) (*.f64 (sqrt.f64 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) 1) (*.f64 2 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (neg.f64 (*.f64 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sinh.f64 y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sinh.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sinh.f64 y) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (*.f64 2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (sinh.f64 y) y) 2/3) (cbrt.f64 (sinh.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (sinh.f64 y) y) 2/3) (cbrt.f64 (neg.f64 (sinh.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sinh.f64 y) y)) (pow.f64 (sinh.f64 y) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (sinh.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sinh.f64 y)) (pow.f64 (/.f64 (sinh.f64 y) y) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sinh.f64 y))) (pow.f64 (/.f64 (sinh.f64 y) y) 2/3)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sinh.f64 y) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sinh.f64 y) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (/.f64 1 y)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (sinh.f64 y)) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sinh.f64 y) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) y) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sinh.f64 y) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (/.f64 (*.f64 2 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (/.f64 y 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (*.f64 (*.f64 2 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (*.f64 y -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (*.f64 (neg.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (*.f64 (neg.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sinh.f64 y) (cbrt.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (/.f64 1 y)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) y) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) y)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sinh.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) y) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (/.f64 -1 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) y) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sinh.f64 y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sinh.f64 y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sinh.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (sinh.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (sinh.f64 y) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sinh.f64 y) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) 0) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 x) (*.f64 (sin.f64 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sin.f64 x)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 x) (*.f64 0 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) 2/3) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 x)))))"]],"rules":[["egg-rr",19],["egg-rr",92],["egg-rr",70]],"time":33.160888671875,"type":"rewrite"},{"count":[[221,213]],"inputs":[["(*.f64 1/2 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x) y))","(+.f64 (*.f64 -1/12 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 3)) y)) (*.f64 1/2 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x) y)))","(+.f64 (*.f64 -1/12 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 3)) y)) (+.f64 (*.f64 1/240 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 5)) y)) (*.f64 1/2 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x) y))))","(+.f64 (*.f64 -1/12 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 3)) y)) (+.f64 (*.f64 -1/10080 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 7)) y)) (+.f64 (*.f64 1/240 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 5)) y)) (*.f64 1/2 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x) y)))))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(sin.f64 x)","(+.f64 (sin.f64 x) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) (sin.f64 x))) (+.f64 (sin.f64 x) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x)))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) (sin.f64 x))) (+.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","1","(+.f64 1 (*.f64 1/6 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 1 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) y))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) y))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) y))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) y))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) y))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) y))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) y))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) y))","x","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) x))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 -1/5040 (pow.f64 x 7)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x) y))","(/.f64 (*.f64 1/2 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) x)) y)","(+.f64 (*.f64 -1/12 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 3)) y)) (*.f64 1/2 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x) y)))","(/.f64 (+.f64 (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (pow.f64 x 3))) (*.f64 1/2 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) x))) y)","(+.f64 (*.f64 -1/12 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 3)) y)) (+.f64 (*.f64 1/240 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 5)) y)) (*.f64 1/2 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x) y))))","(fma.f64 -1/12 (/.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (pow.f64 x 3)) y) (/.f64 (+.f64 (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (pow.f64 x 5))) (*.f64 1/2 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) x))) y))","(+.f64 (*.f64 -1/12 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 3)) y)) (+.f64 (*.f64 -1/10080 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 7)) y)) (+.f64 (*.f64 1/240 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 5)) y)) (*.f64 1/2 (/.f64 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x) y)))))","(+.f64 (/.f64 (+.f64 (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (pow.f64 x 3))) (*.f64 -1/10080 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (pow.f64 x 7)))) y) (/.f64 (+.f64 (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (pow.f64 x 5))) (*.f64 1/2 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) x))) y))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) y)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) y)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) y)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) y)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) y)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) y)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) y)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) y)","(sin.f64 x)","(+.f64 (sin.f64 x) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/6 (*.f64 y y) 1))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) (sin.f64 x))) (+.f64 (sin.f64 x) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x)))))","(fma.f64 1/120 (*.f64 (pow.f64 y 4) (sin.f64 x)) (*.f64 (sin.f64 x) (fma.f64 1/6 (*.f64 y y) 1)))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) (sin.f64 x))) (+.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))))","(+.f64 (fma.f64 (*.f64 (pow.f64 y 4) (sin.f64 x)) 1/120 (sin.f64 x)) (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) y)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) y)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) y)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) y)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) y)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) y)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) y)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) y)","1","(+.f64 1 (*.f64 1/6 (pow.f64 y 2)))","(fma.f64 1/6 (*.f64 y y) 1)","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 (fma.f64 1/6 (*.f64 y y) 1) (*.f64 1/120 (pow.f64 y 4)))","(+.f64 1 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","(+.f64 1 (fma.f64 (pow.f64 y 6) 1/5040 (fma.f64 1/6 (*.f64 y y) (*.f64 1/120 (pow.f64 y 4)))))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) y))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) y))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) y))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) y))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) y))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) y))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) y))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) y))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y)","x","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) x))","(fma.f64 -1/6 (pow.f64 x 3) (fma.f64 1/120 (pow.f64 x 5) x))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 -1/5040 (pow.f64 x 7)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) x)))","(fma.f64 (pow.f64 x 3) -1/6 (fma.f64 -1/5040 (pow.f64 x 7) (fma.f64 1/120 (pow.f64 x 5) x)))"]],"time":127.365234375,"type":"simplify"},{"compiler":[[3093,1237]],"time":29.77880859375,"type":"eval"},{"alts":[["(+.f64 (fma.f64 (*.f64 (pow.f64 y 4) (sin.f64 x)) 1/120 (sin.f64 x)) (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))))","next",0.9495044543433179],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 3)","fresh",0.9633752442110507],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))","done",0.27181625976844204],["(/.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))","fresh",17.05814264918669]],"compiler":[[26,17],[12,9],[9,6],[16,9],[26,17],[12,9],[16,9]],"count":[[214,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[213,3],"picked":[1,1]}],"min-error":[0.25060482007700186],"time":58.156005859375,"type":"prune"},{"compiler":[[88,49]],"locations":[["(sin.f64 x)",0.01171875,false],["(*.f64 (pow.f64 y 4) (sin.f64 x))",0.046875,true],["(*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))",0.1015625,true],["(*.f64 1/6 (*.f64 y y))",0.140625,true]],"time":19.760986328125,"type":"localize"},{"count":[[3,40]],"series":[["(*.f64 (pow.f64 y 4) (sin.f64 x))","x","-inf",0.27099609375],["(*.f64 (pow.f64 y 4) (sin.f64 x))","x","inf",0.467041015625],["(*.f64 (pow.f64 y 4) (sin.f64 x))","x","0",0.342041015625],["(*.f64 (pow.f64 y 4) (sin.f64 x))","y","-inf",0.177978515625],["(*.f64 (pow.f64 y 4) (sin.f64 x))","y","inf",0.345947265625],["(*.f64 (pow.f64 y 4) (sin.f64 x))","y","0",0.37109375],["(*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))","y","-inf",0.68994140625],["(*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))","y","inf",0.734130859375],["(*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))","y","0",0.43701171875],["(*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))","x","-inf",0.31982421875],["(*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))","x","inf",0.907958984375],["(*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))","x","0",0.6669921875],["(*.f64 1/6 (*.f64 y y))","y","-inf",0.18994140625],["(*.f64 1/6 (*.f64 y y))","y","inf",0.35009765625],["(*.f64 1/6 (*.f64 y y))","y","0",0.429931640625]],"time":6.9091796875,"type":"series"},{"count":[[3,108]],"inputs":[["(*.f64 1/6 (*.f64 y y))","(*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))","(*.f64 (pow.f64 y 4) (sin.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/6 (*.f64 y y)) 0) (*.f64 1/6 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/6 (*.f64 y y)) (*.f64 (*.f64 1/6 (*.f64 y y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 1/6 (*.f64 y y))) (*.f64 1/6 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/6 (*.f64 y y)) (*.f64 0 (*.f64 1/6 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 1/6) y) (*.f64 (sqrt.f64 1/6) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/6 y) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sqrt.f64 1/6) y) 1) (*.f64 (*.f64 (sqrt.f64 1/6) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sqrt.f64 1/6) y) -1) (*.f64 (*.f64 (sqrt.f64 1/6) y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/6 (*.f64 y y))) (cbrt.f64 (*.f64 1/36 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/6 (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y y) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/36 (pow.f64 y 4))) (cbrt.f64 (*.f64 1/6 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (cbrt.f64 (pow.f64 y 4)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 1/6 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y y) (cbrt.f64 1/6)) (cbrt.f64 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/6)) (sqrt.f64 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/216 (*.f64 y y))) (cbrt.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 1/6 y) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/6) (*.f64 (cbrt.f64 1/36) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/6) (*.f64 (*.f64 y y) (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 1/6 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 1/6 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/6 (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/36) (*.f64 (*.f64 y y) (cbrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 1/6 (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y 4)) (cbrt.f64 (*.f64 1/216 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (*.f64 1/6 y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 y 4)) 1/6) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/36) (*.f64 y y)) (cbrt.f64 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 1/6)) (neg.f64 y)) (*.f64 (neg.f64 (sqrt.f64 1/6)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 1/6) (neg.f64 y)) (*.f64 (sqrt.f64 1/6) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 1/6)) y) (*.f64 (neg.f64 (sqrt.f64 1/6)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 y) (neg.f64 (sqrt.f64 1/6))) (*.f64 (neg.f64 y) (neg.f64 (sqrt.f64 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (neg.f64 (sqrt.f64 1/6))) (*.f64 y (neg.f64 (sqrt.f64 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 y) (sqrt.f64 1/6)) (*.f64 (neg.f64 y) (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (*.f64 (sqrt.f64 1/6) y)) (*.f64 -1 (*.f64 (sqrt.f64 1/6) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/6 (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 y 6) 1/216) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/6 (*.f64 y y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/6 (*.f64 y y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/6 (*.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/6 (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 1/6) y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 1/6 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 6) 1/216))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) 0) (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) (*.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 x) (*.f64 (pow.f64 y 6) 1/5040)) 1) (*.f64 (*.f64 (sin.f64 x) (*.f64 1/6 (*.f64 y y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (*.f64 (pow.f64 y 6) 1/5040)) (*.f64 (sin.f64 x) (*.f64 1/6 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))) (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) (*.f64 0 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (*.f64 1/6 (*.f64 y y))) (*.f64 (sin.f64 x) (*.f64 (pow.f64 y 6) 1/5040)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))) 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (cbrt.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))) (cbrt.f64 (pow.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))) 2)) (sin.f64 x)) (cbrt.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))) 2)) (*.f64 (sin.f64 x) (cbrt.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) 2)) (cbrt.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (*.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 y 6) 1/5040) (sin.f64 x) (*.f64 (sin.f64 x) (*.f64 1/6 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (*.f64 (pow.f64 y 6) 1/5040) (*.f64 (sin.f64 x) (*.f64 1/6 (*.f64 y y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 y 4) (sin.f64 x)) 0) (*.f64 (pow.f64 y 4) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 y 4) (sin.f64 x)) (*.f64 (*.f64 (pow.f64 y 4) (sin.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 y 4) (sin.f64 x))) (*.f64 (pow.f64 y 4) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 y 4) (sin.f64 x)) (*.f64 0 (*.f64 (pow.f64 y 4) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (*.f64 y y)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (pow.f64 y 4) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y y) (*.f64 (sin.f64 x) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (pow.f64 y 4)) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (pow.f64 y 4) (sin.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 y 4) (sin.f64 x))) (cbrt.f64 (pow.f64 (*.f64 (pow.f64 y 4) (sin.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 4) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (pow.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (pow.f64 y 4) (sin.f64 x)) 2)) (cbrt.f64 (*.f64 (pow.f64 y 4) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (cbrt.f64 (pow.f64 y 4))) (cbrt.f64 (pow.f64 y 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 4) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y 4)) (*.f64 (cbrt.f64 (pow.f64 y 8)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 y 4) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 4) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 y 8)) (sin.f64 x)) (cbrt.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (*.f64 (pow.f64 y 4) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y 8)) (*.f64 (sin.f64 x) (cbrt.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y 4) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (pow.f64 y 4) (sin.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 y 4) (sin.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 y 4) (sin.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 y 4) (sin.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 y 4) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (pow.f64 y 4) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (pow.f64 y 4) (sin.f64 x)) 3))))))"]],"rules":[["egg-rr",30],["egg-rr",33],["egg-rr",45]],"time":29.94091796875,"type":"rewrite"},{"count":[[148,130]],"inputs":[["(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) x)","(+.f64 (*.f64 -1/6 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 3))) (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) x))","(+.f64 (*.f64 -1/6 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 3))) (+.f64 (*.f64 1/120 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 5))) (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) x)))","(+.f64 (*.f64 -1/5040 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 7))) (+.f64 (*.f64 -1/6 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 3))) (+.f64 (*.f64 1/120 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 5))) (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) x))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x)))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x)))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x)))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (pow.f64 y 4) x)","(+.f64 (*.f64 (pow.f64 y 4) x) (*.f64 -1/6 (*.f64 (pow.f64 y 4) (pow.f64 x 3))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) (pow.f64 x 5))) (+.f64 (*.f64 (pow.f64 y 4) x) (*.f64 -1/6 (*.f64 (pow.f64 y 4) (pow.f64 x 3)))))","(+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 4) (pow.f64 x 7))) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) (pow.f64 x 5))) (+.f64 (*.f64 (pow.f64 y 4) x) (*.f64 -1/6 (*.f64 (pow.f64 y 4) (pow.f64 x 3))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (*.f64 y y))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (*.f64 y y))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (*.f64 y y))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (*.f64 y y))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (*.f64 y y))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (*.f64 y y))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (*.f64 y y))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (*.f64 y y))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (*.f64 y y))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (*.f64 y y))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (*.f64 y y))","(*.f64 1/6 (pow.f64 y 2))","(*.f64 1/6 (*.f64 y y))","(*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) x)","(*.f64 (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))) x)","(+.f64 (*.f64 -1/6 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 3))) (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) x))","(fma.f64 (*.f64 -1/6 (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y)))) (pow.f64 x 3) (*.f64 (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))) x))","(+.f64 (*.f64 -1/6 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 3))) (+.f64 (*.f64 1/120 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 5))) (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) x)))","(fma.f64 (*.f64 -1/6 (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y)))) (pow.f64 x 3) (fma.f64 1/120 (*.f64 (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))) (pow.f64 x 5)) (*.f64 (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))) x)))","(+.f64 (*.f64 -1/5040 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 7))) (+.f64 (*.f64 -1/6 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 3))) (+.f64 (*.f64 1/120 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 5))) (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) x))))","(fma.f64 -1/5040 (*.f64 (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))) (pow.f64 x 7)) (fma.f64 (*.f64 -1/6 (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y)))) (pow.f64 x 3) (fma.f64 1/120 (*.f64 (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))) (pow.f64 x 5)) (*.f64 (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))) x))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x)))","(*.f64 (*.f64 1/6 (*.f64 y y)) (sin.f64 x))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x)))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x)))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 (pow.f64 y 4) x)","(+.f64 (*.f64 (pow.f64 y 4) x) (*.f64 -1/6 (*.f64 (pow.f64 y 4) (pow.f64 x 3))))","(fma.f64 (pow.f64 y 4) x (*.f64 -1/6 (*.f64 (pow.f64 y 4) (pow.f64 x 3))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) (pow.f64 x 5))) (+.f64 (*.f64 (pow.f64 y 4) x) (*.f64 -1/6 (*.f64 (pow.f64 y 4) (pow.f64 x 3)))))","(fma.f64 1/120 (*.f64 (pow.f64 y 4) (pow.f64 x 5)) (fma.f64 (pow.f64 y 4) x (*.f64 -1/6 (*.f64 (pow.f64 y 4) (pow.f64 x 3)))))","(+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 4) (pow.f64 x 7))) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) (pow.f64 x 5))) (+.f64 (*.f64 (pow.f64 y 4) x) (*.f64 -1/6 (*.f64 (pow.f64 y 4) (pow.f64 x 3))))))","(fma.f64 (*.f64 -1/5040 (pow.f64 y 4)) (pow.f64 x 7) (fma.f64 1/120 (*.f64 (pow.f64 y 4) (pow.f64 x 5)) (fma.f64 (pow.f64 y 4) x (*.f64 -1/6 (*.f64 (pow.f64 y 4) (pow.f64 x 3))))))"]],"time":119.194091796875,"type":"simplify"},{"compiler":[[6200,3703]],"time":68.199951171875,"type":"eval"},{"alts":[["(+.f64 (fma.f64 (*.f64 (pow.f64 y 4) (sin.f64 x)) 1/120 (sin.f64 x)) (*.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 3) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))))","next",0.9495044543433179],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 3)","fresh",0.9633752442110507],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))","done",0.27181625976844204],["(/.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))","fresh",17.05814264918669]],"compiler":[[29,20],[12,9],[9,6],[16,9],[29,20],[12,9],[16,9]],"count":[[209,4]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[205,1],"picked":[1,0]}],"min-error":[0.25060482007700186],"time":86.33203125,"type":"prune"},{"compiler":[[103,57]],"locations":[["(*.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 3) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))",0.1015625,true],["(cbrt.f64 (sin.f64 x))",0.10546875,true],["(*.f64 1/6 (*.f64 y y))",0.140625,false],["(pow.f64 (cbrt.f64 (sin.f64 x)) 3)",0.6944313965266304,true]],"time":22.677978515625,"type":"localize"},{"count":[[3,40]],"series":[["(*.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 3) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))","y","-inf",0.2939453125],["(*.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 3) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))","y","inf",0.281005859375],["(*.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 3) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))","y","0",0.302001953125],["(*.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 3) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))","x","-inf",0.345947265625],["(*.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 3) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))","x","inf",0.321044921875],["(*.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 3) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))","x","0",0.324951171875],["(cbrt.f64 (sin.f64 x))","x","-inf",0.14306640625],["(cbrt.f64 (sin.f64 x))","x","inf",0.180908203125],["(cbrt.f64 (sin.f64 x))","x","0",0.264892578125],["(pow.f64 (cbrt.f64 (sin.f64 x)) 3)","x","-inf",1.31494140625],["(pow.f64 (cbrt.f64 (sin.f64 x)) 3)","x","inf",1.491943359375],["(pow.f64 (cbrt.f64 (sin.f64 x)) 3)","x","0",2.408935546875]],"time":7.85205078125,"type":"series"},{"count":[[3,79]],"inputs":[["(pow.f64 (cbrt.f64 (sin.f64 x)) 3)","(cbrt.f64 (sin.f64 x))","(*.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 3) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 x) (*.f64 (sin.f64 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) 0) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 x) (*.f64 0 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sin.f64 x)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sin.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2/3)) (pow.f64 (sin.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2/3)) (pow.f64 (sin.f64 x) 2/3)) (cbrt.f64 (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (sin.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) 2/3) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (sin.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2/3)) (pow.f64 (cbrt.f64 (sin.f64 x)) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 x) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 x) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (sin.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (sin.f64 x)) 0) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (sin.f64 x)) (*.f64 0 (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (sin.f64 x))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (sin.f64 x)))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2/3)) (pow.f64 (sin.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2/3)) (cbrt.f64 (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) (+.f64 2 1/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (sin.f64 x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) (*.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) 0) (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (*.f64 (pow.f64 y 6) 1/5040)) (*.f64 (sin.f64 x) (*.f64 1/6 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 x) (*.f64 (pow.f64 y 6) 1/5040)) 1) (*.f64 (*.f64 (sin.f64 x) (*.f64 1/6 (*.f64 y y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) (*.f64 0 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))) (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (*.f64 1/6 (*.f64 y y))) (*.f64 (sin.f64 x) (*.f64 (pow.f64 y 6) 1/5040)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) (*.f64 (pow.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))) 2/3) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))) (pow.f64 (sin.f64 x) 2/3)) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))) (pow.f64 (sin.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))) 2/3) (sin.f64 x)) (cbrt.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))) (pow.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) 2/3) (cbrt.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))) (cbrt.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (cbrt.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))) (pow.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) 2/3) (*.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))) 2/3) (*.f64 (sin.f64 x) (cbrt.f64 (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (*.f64 (pow.f64 y 6) 1/5040) (*.f64 (sin.f64 x) (*.f64 1/6 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 y 6) 1/5040) (sin.f64 x) (*.f64 (sin.f64 x) (*.f64 1/6 (*.f64 y y))))))))"]],"rules":[["egg-rr",33],["egg-rr",20],["egg-rr",26]],"time":28.722900390625,"type":"rewrite"},{"count":[[119,94]],"inputs":[["(*.f64 (pow.f64 1 1/3) (sin.f64 x))","(*.f64 (pow.f64 1 1/3) (sin.f64 x))","(*.f64 (pow.f64 1 1/3) (sin.f64 x))","(*.f64 (pow.f64 1 1/3) (sin.f64 x))","(*.f64 (pow.f64 1 1/3) (sin.f64 x))","(*.f64 (pow.f64 1 1/3) (sin.f64 x))","(*.f64 (pow.f64 1 1/3) (sin.f64 x))","(*.f64 (pow.f64 1 1/3) (sin.f64 x))","(pow.f64 (sin.f64 x) 1/3)","(pow.f64 (sin.f64 x) 1/3)","(pow.f64 (sin.f64 x) 1/3)","(pow.f64 (sin.f64 x) 1/3)","(pow.f64 (sin.f64 x) 1/3)","(pow.f64 (sin.f64 x) 1/3)","(pow.f64 (sin.f64 x) 1/3)","(pow.f64 (sin.f64 x) 1/3)","(*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) x)","(+.f64 (*.f64 -1/6 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 3))) (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) x))","(+.f64 (*.f64 -1/6 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 3))) (+.f64 (*.f64 1/120 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 5))) (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) x)))","(+.f64 (*.f64 -1/5040 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 7))) (+.f64 (*.f64 -1/6 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 3))) (+.f64 (*.f64 1/120 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 5))) (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) x))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x)))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x)))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x)))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 1 1/3) (sin.f64 x))","(sin.f64 x)","(*.f64 (pow.f64 1 1/3) (sin.f64 x))","(sin.f64 x)","(*.f64 (pow.f64 1 1/3) (sin.f64 x))","(sin.f64 x)","(*.f64 (pow.f64 1 1/3) (sin.f64 x))","(sin.f64 x)","(*.f64 (pow.f64 1 1/3) (sin.f64 x))","(sin.f64 x)","(*.f64 (pow.f64 1 1/3) (sin.f64 x))","(sin.f64 x)","(*.f64 (pow.f64 1 1/3) (sin.f64 x))","(sin.f64 x)","(*.f64 (pow.f64 1 1/3) (sin.f64 x))","(sin.f64 x)","(pow.f64 (sin.f64 x) 1/3)","(cbrt.f64 (sin.f64 x))","(pow.f64 (sin.f64 x) 1/3)","(cbrt.f64 (sin.f64 x))","(pow.f64 (sin.f64 x) 1/3)","(cbrt.f64 (sin.f64 x))","(pow.f64 (sin.f64 x) 1/3)","(cbrt.f64 (sin.f64 x))","(pow.f64 (sin.f64 x) 1/3)","(cbrt.f64 (sin.f64 x))","(pow.f64 (sin.f64 x) 1/3)","(cbrt.f64 (sin.f64 x))","(pow.f64 (sin.f64 x) 1/3)","(cbrt.f64 (sin.f64 x))","(pow.f64 (sin.f64 x) 1/3)","(cbrt.f64 (sin.f64 x))","(*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) x)","(*.f64 (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))) x)","(+.f64 (*.f64 -1/6 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 3))) (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) x))","(*.f64 (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))) (+.f64 x (*.f64 (pow.f64 x 3) -1/6)))","(+.f64 (*.f64 -1/6 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 3))) (+.f64 (*.f64 1/120 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 5))) (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) x)))","(fma.f64 -1/6 (*.f64 (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))) (pow.f64 x 3)) (*.f64 (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))) (+.f64 x (*.f64 (pow.f64 x 5) 1/120))))","(+.f64 (*.f64 -1/5040 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 7))) (+.f64 (*.f64 -1/6 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 3))) (+.f64 (*.f64 1/120 (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) (pow.f64 x 5))) (*.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))) x))))","(+.f64 (*.f64 (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))) (+.f64 (*.f64 (pow.f64 x 7) -1/5040) (*.f64 (pow.f64 x 3) -1/6))) (*.f64 (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))) (+.f64 x (*.f64 (pow.f64 x 5) 1/120))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 1/5040 (pow.f64 y 6)) (*.f64 1/6 (pow.f64 y 2))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x)))","(*.f64 (*.f64 1/6 (*.f64 y y)) (sin.f64 x))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x)))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x)))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 6) (sin.f64 x))) (*.f64 1/6 (*.f64 (pow.f64 y 2) (sin.f64 x))))","(*.f64 (sin.f64 x) (fma.f64 1/5040 (pow.f64 y 6) (*.f64 1/6 (*.f64 y y))))"]],"time":158.3388671875,"type":"simplify"},{"compiler":[[4384,2620]],"time":47.688232421875,"type":"eval"},{"alts":[["(+.f64 (fma.f64 (*.f64 (pow.f64 y 4) (sin.f64 x)) 1/120 (sin.f64 x)) (*.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 3) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))))","done",0.9495044543433179],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 3)","next",0.9633752442110507],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))","done",0.27181625976844204],["(/.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))","fresh",17.05814264918669]],"compiler":[[29,20],[12,9],[9,6],[16,9],[12,9],[16,9]],"count":[[144,4]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[140,0],"picked":[1,1]}],"min-error":[0.25060482007700186],"time":45.3369140625,"type":"prune"},{"compiler":[[38,10]],"locations":[["(/.f64 (sinh.f64 y) y)",0.015625,false],["(cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))",0.09765625,true],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))",0.23125896750900723,false],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 3)",0.6928101562950725,true]],"time":7.430908203125,"type":"localize"},{"count":[[2,24]],"series":[["(cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))","y","-inf",0.759033203125],["(cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))","y","inf",0.27392578125],["(cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))","y","0",0.363037109375],["(cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))","x","-inf",0.2060546875],["(cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))","x","inf",0.22607421875],["(cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))","x","0",0.332763671875],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 3)","y","-inf",1.007080078125],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 3)","y","inf",0.616943359375],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 3)","y","0",1.965087890625],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 3)","x","-inf",1.66796875],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 3)","x","inf",1.93896484375],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 3)","x","0",1.526123046875]],"time":11.125,"type":"series"},{"count":[[2,124]],"inputs":[["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 3)","(cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) (*.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 0) (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) (*.f64 0 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sinh.f64 y) y)) (*.f64 (pow.f64 (/.f64 (sinh.f64 y) y) 2/3) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (cbrt.f64 y)) (/.f64 (sinh.f64 y) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (/.f64 (sinh.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (cbrt.f64 (/.f64 (sinh.f64 y) y))) (pow.f64 (/.f64 (sinh.f64 y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (sinh.f64 y) y) (cbrt.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))) 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) 2/3) (*.f64 (/.f64 (sinh.f64 y) y) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))) 4) 2) (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (sinh.f64 y) y) 2/3) (sin.f64 x)) (cbrt.f64 (/.f64 (sinh.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sinh.f64 y) y)) (*.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sinh.f64 y) y) 2/3) (*.f64 (sin.f64 x) (cbrt.f64 (/.f64 (sinh.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sinh.f64 y) (pow.f64 y 2/3)) (/.f64 (sin.f64 x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) 2/3) (/.f64 (sinh.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sinh.f64 y) y) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3) (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (/.f64 (sinh.f64 y) y)) (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sinh.f64 y) (/.f64 (sin.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) y) (sinh.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 (sin.f64 x) (sinh.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3)) (pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 (sinh.f64 y) y)) (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3)) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 x) 2/3) (/.f64 (sinh.f64 y) y)) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (*.f64 2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (/.f64 (sin.f64 x) y)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (pow.f64 (cbrt.f64 (pow.f64 y 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) 1) (*.f64 2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (pow.f64 y -1/3)) (*.f64 2 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) -1) (*.f64 2 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (neg.f64 (sinh.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (sinh.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3) (cbrt.f64 (*.f64 (sin.f64 x) (sinh.f64 y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 y)) (sinh.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (/.f64 1 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (/.f64 (sin.f64 x) y)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (/.f64 (sin.f64 x) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (/.f64 (sin.f64 x) y)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sinh.f64 y))) (*.f64 (pow.f64 (/.f64 (sinh.f64 y) y) 2/3) (sin.f64 x))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sinh.f64 y)) (*.f64 (pow.f64 (/.f64 (sinh.f64 y) y) 2/3) (sin.f64 x))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sinh.f64 y) (cbrt.f64 y)) (sin.f64 x)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) y) (sin.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sinh.f64 y))) (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) (pow.f64 y 2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (sinh.f64 y) y)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sin.f64 x) (neg.f64 (/.f64 (sinh.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) (*.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 0) (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) (*.f64 0 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))) (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 (sinh.f64 y) y) (cbrt.f64 (sin.f64 x)))) (cbrt.f64 (pow.f64 (sin.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (cbrt.f64 (/.f64 (sinh.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sin.f64 x))) (cbrt.f64 (*.f64 (pow.f64 (sin.f64 x) 2/3) (/.f64 (sinh.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sin.f64 x))) (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 (sinh.f64 y) y)) (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 x) (cbrt.f64 y))) (cbrt.f64 (/.f64 (sinh.f64 y) (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) (+.f64 2 1/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sinh.f64 y) y))) (cbrt.f64 (*.f64 (pow.f64 (/.f64 (sinh.f64 y) y) 2/3) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3) (cbrt.f64 (sin.f64 x)))) (cbrt.f64 (cbrt.f64 (/.f64 (sinh.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))) 4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sinh.f64 y) y)) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sinh.f64 y))) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sinh.f64 y)) (cbrt.f64 (/.f64 (sin.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 x) (cbrt.f64 (/.f64 (sinh.f64 y) y)))) (cbrt.f64 (pow.f64 (/.f64 (sinh.f64 y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sinh.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 x)) (cbrt.f64 (neg.f64 (sinh.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sinh.f64 y))) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sinh.f64 y))) 1) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sinh.f64 y))) 1) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sinh.f64 y))) (cbrt.f64 (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sinh.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))))))"]],"rules":[["egg-rr",40],["egg-rr",84]],"time":27.774169921875,"type":"rewrite"},{"count":[[148,144]],"inputs":[["(*.f64 1/2 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y)))","(*.f64 1/2 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y)))","(*.f64 1/2 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y)))","(*.f64 1/2 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y)))","(*.f64 1/2 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y)))","(*.f64 1/2 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y)))","(*.f64 1/2 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y)))","(*.f64 1/2 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y)))","(*.f64 (pow.f64 1 1/3) (sin.f64 x))","(+.f64 (*.f64 (pow.f64 1 1/3) (sin.f64 x)) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 1 1/3) (sin.f64 x))) (*.f64 1/18 (*.f64 (pow.f64 1 1/3) (sin.f64 x))))))","(+.f64 (*.f64 (pow.f64 y 4) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x))))) (+.f64 (*.f64 1/162 (*.f64 (pow.f64 1 1/3) (sin.f64 x))) (*.f64 (pow.f64 (*.f64 1 (sin.f64 x)) 1/3) (+.f64 (*.f64 1/324 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 2)) 1/3)) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (sin.f64 x)) 1/3) (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x)))))))))) (+.f64 (*.f64 (pow.f64 1 1/3) (sin.f64 x)) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 1 1/3) (sin.f64 x))) (*.f64 1/18 (*.f64 (pow.f64 1 1/3) (sin.f64 x)))))))","(+.f64 (*.f64 (pow.f64 y 4) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x))))) (+.f64 (*.f64 1/162 (*.f64 (pow.f64 1 1/3) (sin.f64 x))) (*.f64 (pow.f64 (*.f64 1 (sin.f64 x)) 1/3) (+.f64 (*.f64 1/324 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 2)) 1/3)) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (sin.f64 x)) 1/3) (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x)))))))))) (+.f64 (*.f64 (pow.f64 y 6) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (sin.f64 x)) 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (sin.f64 x)) 1/3) (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x))))) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (sin.f64 x)) 1/3) (-.f64 (*.f64 1/5040 (sin.f64 x)) (+.f64 (*.f64 1/9 (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x)))) (*.f64 1/5832 (sin.f64 x)))))))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 1/5040 (sin.f64 x)) (+.f64 (*.f64 1/9 (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x)))) (*.f64 1/5832 (sin.f64 x)))))) (*.f64 1/18 (*.f64 (pow.f64 (*.f64 1 (sin.f64 x)) 1/3) (+.f64 (*.f64 1/324 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 2)) 1/3)) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (sin.f64 x)) 1/3) (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x)))))))))))) (+.f64 (*.f64 (pow.f64 1 1/3) (sin.f64 x)) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 1 1/3) (sin.f64 x))) (*.f64 1/18 (*.f64 (pow.f64 1 1/3) (sin.f64 x))))))))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))) y) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))) y) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))) y) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))) y) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))) y) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))) y) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))) y) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))) y) 1/3) (cbrt.f64 1/2))","(pow.f64 (sin.f64 x) 1/3)","(+.f64 (*.f64 1/18 (*.f64 (pow.f64 (*.f64 1 (sin.f64 x)) 1/3) (pow.f64 y 2))) (pow.f64 (sin.f64 x) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 2)) 1/3) (*.f64 (pow.f64 y 4) (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x)))))) (+.f64 (*.f64 1/18 (*.f64 (pow.f64 (*.f64 1 (sin.f64 x)) 1/3) (pow.f64 y 2))) (pow.f64 (sin.f64 x) 1/3)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 2)) 1/3) (*.f64 (pow.f64 y 4) (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x)))))) (+.f64 (*.f64 1/18 (*.f64 (pow.f64 (*.f64 1 (sin.f64 x)) 1/3) (pow.f64 y 2))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 2)) 1/3) (*.f64 (pow.f64 y 6) (-.f64 (*.f64 1/5040 (sin.f64 x)) (+.f64 (*.f64 1/9 (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x)))) (*.f64 1/5832 (sin.f64 x))))))) (pow.f64 (sin.f64 x) 1/3))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y)))","(*.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y) 1/2)","(*.f64 1/2 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y)))","(*.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y) 1/2)","(*.f64 1/2 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y)))","(*.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y) 1/2)","(*.f64 1/2 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y)))","(*.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y) 1/2)","(*.f64 1/2 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y)))","(*.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y) 1/2)","(*.f64 1/2 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y)))","(*.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y) 1/2)","(*.f64 1/2 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y)))","(*.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y) 1/2)","(*.f64 1/2 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) y)))","(*.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y) 1/2)","(*.f64 (pow.f64 1 1/3) (sin.f64 x))","(sin.f64 x)","(+.f64 (*.f64 (pow.f64 1 1/3) (sin.f64 x)) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 1 1/3) (sin.f64 x))) (*.f64 1/18 (*.f64 (pow.f64 1 1/3) (sin.f64 x))))))","(fma.f64 (*.f64 (sin.f64 x) 1/6) (*.f64 y y) (sin.f64 x))","(+.f64 (*.f64 (pow.f64 y 4) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x))))) (+.f64 (*.f64 1/162 (*.f64 (pow.f64 1 1/3) (sin.f64 x))) (*.f64 (pow.f64 (*.f64 1 (sin.f64 x)) 1/3) (+.f64 (*.f64 1/324 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 2)) 1/3)) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (sin.f64 x)) 1/3) (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x)))))))))) (+.f64 (*.f64 (pow.f64 1 1/3) (sin.f64 x)) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 1 1/3) (sin.f64 x))) (*.f64 1/18 (*.f64 (pow.f64 1 1/3) (sin.f64 x)))))))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) -1/1080) 1/3 (fma.f64 1/162 (sin.f64 x) (*.f64 (cbrt.f64 (sin.f64 x)) (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (sin.f64 x))) (*.f64 (sin.f64 x) -1/1080)) 2/3 (cbrt.f64 (pow.f64 (*.f64 1/5832 (sin.f64 x)) 2)))))) (pow.f64 y 4) (fma.f64 (*.f64 (sin.f64 x) 1/6) (*.f64 y y) (sin.f64 x)))","(+.f64 (*.f64 (pow.f64 y 4) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x))))) (+.f64 (*.f64 1/162 (*.f64 (pow.f64 1 1/3) (sin.f64 x))) (*.f64 (pow.f64 (*.f64 1 (sin.f64 x)) 1/3) (+.f64 (*.f64 1/324 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 2)) 1/3)) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (sin.f64 x)) 1/3) (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x)))))))))) (+.f64 (*.f64 (pow.f64 y 6) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (sin.f64 x)) 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (sin.f64 x)) 1/3) (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x))))) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (sin.f64 x)) 1/3) (-.f64 (*.f64 1/5040 (sin.f64 x)) (+.f64 (*.f64 1/9 (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x)))) (*.f64 1/5832 (sin.f64 x)))))))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 1/5040 (sin.f64 x)) (+.f64 (*.f64 1/9 (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x)))) (*.f64 1/5832 (sin.f64 x)))))) (*.f64 1/18 (*.f64 (pow.f64 (*.f64 1 (sin.f64 x)) 1/3) (+.f64 (*.f64 1/324 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 2)) 1/3)) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (sin.f64 x)) 1/3) (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x)))))))))))) (+.f64 (*.f64 (pow.f64 1 1/3) (sin.f64 x)) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 1 1/3) (sin.f64 x))) (*.f64 1/18 (*.f64 (pow.f64 1 1/3) (sin.f64 x))))))))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) -1/1080) 1/3 (fma.f64 1/162 (sin.f64 x) (*.f64 (cbrt.f64 (sin.f64 x)) (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (sin.f64 x))) (*.f64 (sin.f64 x) -1/1080)) 2/3 (cbrt.f64 (pow.f64 (*.f64 1/5832 (sin.f64 x)) 2)))))) (pow.f64 y 4) (fma.f64 (fma.f64 1/27 (*.f64 (sin.f64 x) -1/1080) (fma.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 (sin.f64 x))) (-.f64 (*.f64 1/5040 (sin.f64 x)) (fma.f64 1/9 (*.f64 (sin.f64 x) -1/1080) (*.f64 1/5832 (sin.f64 x))))) (*.f64 1/27 (*.f64 (cbrt.f64 (/.f64 1 (sin.f64 x))) (*.f64 (sin.f64 x) -1/1080)))) (cbrt.f64 (sin.f64 x)) (fma.f64 1/3 (-.f64 (*.f64 1/5040 (sin.f64 x)) (fma.f64 1/9 (*.f64 (sin.f64 x) -1/1080) (*.f64 1/5832 (sin.f64 x)))) (+.f64 (*.f64 1/5832 (sin.f64 x)) (*.f64 (*.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 (sin.f64 x))) (*.f64 (sin.f64 x) -1/1080))) (cbrt.f64 (*.f64 1/5832 (sin.f64 x)))))))) (pow.f64 y 6) (fma.f64 (*.f64 (sin.f64 x) 1/6) (*.f64 y y) (sin.f64 x))))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))) y) 1/3) (cbrt.f64 1/2))","(cbrt.f64 (*.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y) 1/2))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))) y) 1/3) (cbrt.f64 1/2))","(cbrt.f64 (*.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y) 1/2))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))) y) 1/3) (cbrt.f64 1/2))","(cbrt.f64 (*.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y) 1/2))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))) y) 1/3) (cbrt.f64 1/2))","(cbrt.f64 (*.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y) 1/2))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))) y) 1/3) (cbrt.f64 1/2))","(cbrt.f64 (*.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y) 1/2))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))) y) 1/3) (cbrt.f64 1/2))","(cbrt.f64 (*.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y) 1/2))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))) y) 1/3) (cbrt.f64 1/2))","(cbrt.f64 (*.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y) 1/2))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))) y) 1/3) (cbrt.f64 1/2))","(cbrt.f64 (*.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) y) 1/2))","(pow.f64 (sin.f64 x) 1/3)","(cbrt.f64 (sin.f64 x))","(+.f64 (*.f64 1/18 (*.f64 (pow.f64 (*.f64 1 (sin.f64 x)) 1/3) (pow.f64 y 2))) (pow.f64 (sin.f64 x) 1/3))","(fma.f64 (cbrt.f64 (*.f64 1/5832 (sin.f64 x))) (*.f64 y y) (cbrt.f64 (sin.f64 x)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 2)) 1/3) (*.f64 (pow.f64 y 4) (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x)))))) (+.f64 (*.f64 1/18 (*.f64 (pow.f64 (*.f64 1 (sin.f64 x)) 1/3) (pow.f64 y 2))) (pow.f64 (sin.f64 x) 1/3)))","(fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) -2)) (*.f64 (pow.f64 y 4) (*.f64 (sin.f64 x) -1/1080))) (fma.f64 (cbrt.f64 (*.f64 1/5832 (sin.f64 x))) (*.f64 y y) (cbrt.f64 (sin.f64 x))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 2)) 1/3) (*.f64 (pow.f64 y 4) (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x)))))) (+.f64 (*.f64 1/18 (*.f64 (pow.f64 (*.f64 1 (sin.f64 x)) 1/3) (pow.f64 y 2))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 2)) 1/3) (*.f64 (pow.f64 y 6) (-.f64 (*.f64 1/5040 (sin.f64 x)) (+.f64 (*.f64 1/9 (-.f64 (*.f64 1/120 (sin.f64 x)) (*.f64 1/108 (sin.f64 x)))) (*.f64 1/5832 (sin.f64 x))))))) (pow.f64 (sin.f64 x) 1/3))))","(fma.f64 (*.f64 1/3 (cbrt.f64 (pow.f64 (sin.f64 x) -2))) (*.f64 (pow.f64 y 4) (*.f64 (sin.f64 x) -1/1080)) (fma.f64 (cbrt.f64 (*.f64 1/5832 (sin.f64 x))) (*.f64 y y) (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) -2)) (*.f64 (pow.f64 y 6) (-.f64 (*.f64 1/5040 (sin.f64 x)) (fma.f64 1/9 (*.f64 (sin.f64 x) -1/1080) (*.f64 1/5832 (sin.f64 x)))))) (cbrt.f64 (sin.f64 x)))))"]],"time":91.7587890625,"type":"simplify"},{"compiler":[[6022,2750]],"time":59.022216796875,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 3)","done",0.9633752442110507],["(/.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))","fresh",17.05814264918669],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))","done",0.27181625976844204],["(pow.f64 (fma.f64 (*.f64 1/3 (cbrt.f64 (pow.f64 (sin.f64 x) -2))) (*.f64 (pow.f64 y 4) (*.f64 (sin.f64 x) -1/1080)) (fma.f64 (cbrt.f64 (*.f64 1/5832 (sin.f64 x))) (*.f64 y y) (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) -2)) (*.f64 (pow.f64 y 6) (-.f64 (*.f64 1/5040 (sin.f64 x)) (fma.f64 1/9 (*.f64 (sin.f64 x) -1/1080) (*.f64 1/5832 (sin.f64 x)))))) (cbrt.f64 (sin.f64 x))))) 3)","fresh",18.98333540327856]],"compiler":[[12,9],[16,9],[9,6],[59,40]],"count":[[336,4]],"kept":[{"done":[2,1],"fresh":[1,0],"new":[332,2],"picked":[1,1]}],"min-error":[0.2501673985009846],"time":77.852783203125,"type":"prune"},{"accuracy":[0.27181625976844204],"baseline":[0.27181625976844204],"branch":[["x",0.27181625976844204,1],["y",0.27181625976844204,1],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))",0.27181625976844204,1],["(sin.f64 x)",0.27181625976844204,1],["(/.f64 (sinh.f64 y) y)",0.27181625976844204,1]],"compiler":[[3,2],[3,2],[9,6],[4,3],[6,4],[155,79]],"count":[[7,1]],"inputs":[["(/.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))","(pow.f64 (fma.f64 (*.f64 1/3 (cbrt.f64 (pow.f64 (sin.f64 x) -2))) (*.f64 (pow.f64 y 4) (*.f64 (sin.f64 x) -1/1080)) (fma.f64 (cbrt.f64 (*.f64 1/5832 (sin.f64 x))) (*.f64 y y) (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) -2)) (*.f64 (pow.f64 y 6) (-.f64 (*.f64 1/5040 (sin.f64 x)) (fma.f64 1/9 (*.f64 (sin.f64 x) -1/1080) (*.f64 1/5832 (sin.f64 x)))))) (cbrt.f64 (sin.f64 x))))) 3)","(+.f64 (fma.f64 (*.f64 (pow.f64 y 4) (sin.f64 x)) 1/120 (sin.f64 x)) (*.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 3) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))))","(+.f64 (fma.f64 (*.f64 (pow.f64 y 4) (sin.f64 x)) 1/120 (sin.f64 x)) (*.f64 (sin.f64 x) (fma.f64 (pow.f64 y 6) 1/5040 (*.f64 1/6 (*.f64 y y)))))","(pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))) 3)","(/.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))","(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))"]],"link":["."],"name":["Linear.Quaternion:$ccos from linear-1.19.1.3"],"oracle":[22.555522348851852],"outputs":[["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))"]],"time":19.14111328125,"times":[["x",3.598876953125],["y",3.6162109375],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))",3.60205078125],["(sin.f64 x)",3.7939453125],["(/.f64 (sinh.f64 y) y)",1.744873046875]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y))"]],"stop":[["fuel",1]],"time":19.2509765625,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.942138671875,"type":"end"}]
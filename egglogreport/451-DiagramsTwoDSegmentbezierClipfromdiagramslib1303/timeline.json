[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.4680636897137447,0.4407599744804429,0.09117633580581241],[11,0.40565519775191206,0.5382732431708064,0.05607155907728156],[10,0.34324670579007943,0.600681735132639,0.05607155907728156],[9,0.2496339678473305,0.7176976575610752,0.03266837459159433],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":88.641845703125,"type":"analyze"},{"outcomes":[["body",256,"invalid",48.609619140625,1198],["body",256,"valid",339.516357421875,8256]],"time":397.003173828125,"type":"sample"},{"compiler":[[12,8]],"inputs":[["0","1","2"],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 z y) (*.f64 x (-.f64 1 y)))","(+.f64 (*.f64 x z) (*.f64 y (-.f64 1 z)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","(fma.f64 x y (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 y x (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 z y) (*.f64 x (-.f64 1 y)))","(fma.f64 z y (*.f64 x (-.f64 1 y)))","(+.f64 (*.f64 x z) (*.f64 y (-.f64 1 z)))","(fma.f64 x z (*.f64 y (-.f64 1 z)))"]],"symmetry":[[]],"time":73.343017578125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","(fma.f64 (-.f64 1 y) z (*.f64 x y))"]],"time":18.02197265625,"type":"simplify"},{"compiler":[[20,11]],"time":0.35986328125,"type":"eval"},{"alts":[["(fma.f64 (-.f64 1 y) z (*.f64 x y))","next",0.020788781620653757]],"compiler":[[11,7],[11,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.020788781620653757],"time":0.857177734375,"type":"prune"},{"compiler":[[21,10]],"locations":[["(fma.f64 (-.f64 1 y) z (*.f64 x y))",0.020788781620653757,true]],"time":5.012939453125,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 (-.f64 1 y) z (*.f64 x y))","x","-inf",0.27490234375],["(fma.f64 (-.f64 1 y) z (*.f64 x y))","x","inf",0.25390625],["(fma.f64 (-.f64 1 y) z (*.f64 x y))","x","0",0.30908203125],["(fma.f64 (-.f64 1 y) z (*.f64 x y))","z","-inf",0.35888671875],["(fma.f64 (-.f64 1 y) z (*.f64 x y))","z","inf",0.283935546875],["(fma.f64 (-.f64 1 y) z (*.f64 x y))","z","0",0.444091796875],["(fma.f64 (-.f64 1 y) z (*.f64 x y))","y","-inf",0.34521484375],["(fma.f64 (-.f64 1 y) z (*.f64 x y))","y","inf",0.498046875],["(fma.f64 (-.f64 1 y) z (*.f64 x y))","y","0",0.4560546875]],"time":3.341064453125,"type":"series"},{"count":[[1,37]],"inputs":[["(fma.f64 (-.f64 1 y) z (*.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (-.f64 1 y) z (*.f64 x y)) 0) (fma.f64 (-.f64 1 y) z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 1 y) z (*.f64 x y)) (*.f64 (fma.f64 (-.f64 1 y) z (*.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (-.f64 1 y) z (*.f64 x y))) (fma.f64 (-.f64 1 y) z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 1 y) z (*.f64 x y)) (*.f64 0 (fma.f64 (-.f64 1 y) z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 y) z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 (-.f64 1 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x y) (*.f64 (+.f64 y -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 1 y) z (*.f64 x y))) (pow.f64 (fma.f64 (-.f64 1 y) z (*.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (-.f64 1 y) z (*.f64 x y)) 2/3) (cbrt.f64 (fma.f64 (-.f64 1 y) z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (-.f64 1 y) z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (-.f64 1 y) z (*.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (-.f64 1 y) z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 1 y) z (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (-.f64 1 y) z (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 1 y) z (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 1 y) z (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 1 y) z (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (-.f64 1 y) z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (-.f64 1 y) z (*.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 y) z (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) x) (*.f64 (-.f64 1 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) y) (*.f64 (-.f64 1 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 y)) (pow.f64 y 2/3) (*.f64 (-.f64 1 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 (-.f64 1 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (*.f64 x y) 2/3) (*.f64 (-.f64 1 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 (*.f64 x y)) (*.f64 (-.f64 1 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 1 y) z)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 y) z) 2)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (-.f64 1 y) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 y)) (*.f64 (pow.f64 (-.f64 1 y) 2/3) z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 y) (cbrt.f64 z)) (pow.f64 z 2/3) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 (-.f64 1 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 (-.f64 1 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x y)) (*.f64 (-.f64 1 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (*.f64 (-.f64 1 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (*.f64 (-.f64 1 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 y) z) 1 (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (-.f64 1 y) z) (*.f64 x y))))))"]],"rules":[["egg-rr",37]],"time":21.77392578125,"type":"rewrite"},{"count":[[73,47]],"inputs":[["z","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z))) z)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z))) z)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z))) z)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(*.f64 z (-.f64 1 y))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(*.f64 z (-.f64 1 y))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(*.f64 z (-.f64 1 y))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))"]],"method":["egg-herbie"],"outputs":[["z","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(fma.f64 y (-.f64 x z) z)","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(fma.f64 y (-.f64 x z) z)","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(fma.f64 y (-.f64 x z) z)","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (-.f64 x z))","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(fma.f64 y (-.f64 x z) z)","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(fma.f64 y (-.f64 x z) z)","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(fma.f64 y (-.f64 x z) z)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z))) z)","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z))) z)","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z))) z)","(fma.f64 y (-.f64 x z) z)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(*.f64 z (-.f64 1 y))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(*.f64 z (-.f64 1 y))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(*.f64 z (-.f64 1 y))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)"]],"time":122.013916015625,"type":"simplify"},{"compiler":[[528,271]],"time":7.296142578125,"type":"eval"},{"alts":[["(fma.f64 y (-.f64 x z) z)","next",0.00390625],["(fma.f64 (-.f64 1 y) z (*.f64 x y))","done",0.020788781620653757]],"compiler":[[9,5],[11,7],[9,5]],"count":[[48,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[47,1],"picked":[1,1]}],"min-error":[0],"time":8.099853515625,"type":"prune"},{"compiler":[[15,5]],"locations":[["(fma.f64 y (-.f64 x z) z)",0.00390625,true]],"time":3.5830078125,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 y (-.f64 x z) z)","z","-inf",0.300048828125],["(fma.f64 y (-.f64 x z) z)","z","inf",0.244873046875],["(fma.f64 y (-.f64 x z) z)","z","0",0.27392578125],["(fma.f64 y (-.f64 x z) z)","x","-inf",0.260986328125],["(fma.f64 y (-.f64 x z) z)","x","inf",0.31591796875],["(fma.f64 y (-.f64 x z) z)","x","0",0.281982421875],["(fma.f64 y (-.f64 x z) z)","y","-inf",0.276123046875],["(fma.f64 y (-.f64 x z) z)","y","inf",0.241943359375],["(fma.f64 y (-.f64 x z) z)","y","0",0.5859375]],"time":2.884033203125,"type":"series"},{"count":[[1,45]],"inputs":[["(fma.f64 y (-.f64 x z) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (+.f64 (neg.f64 (*.f64 z y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 z (*.f64 y x)) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z y)) (+.f64 z (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (*.f64 z y)) z) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 x z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 z (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (-.f64 x z) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (-.f64 x z) z) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 z (*.f64 y z)) (*.f64 y (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 z (*.f64 z y)) (*.f64 (neg.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 z (*.f64 y x)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 z (*.f64 y x)) (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 z (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 z (-.f64 (*.f64 y (-.f64 z x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y (-.f64 x z)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 y (-.f64 z x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (-.f64 x z) z)) (pow.f64 (fma.f64 y (-.f64 x z) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y (-.f64 x z) z) 2/3) (cbrt.f64 (fma.f64 y (-.f64 x z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 y (-.f64 z x)) z)) (neg.f64 (pow.f64 (fma.f64 y (-.f64 x z) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 z 2/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2)) (*.f64 (cbrt.f64 z) (cbrt.f64 (*.f64 y (-.f64 x z)))))) (+.f64 (cbrt.f64 z) (cbrt.f64 (*.f64 y (-.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2)) (-.f64 (pow.f64 z 2/3) (*.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) (cbrt.f64 z)))) (+.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 y (-.f64 z x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 y (-.f64 z x)) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (-.f64 x z) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (-.f64 x z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 y (-.f64 x z) z) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (-.f64 x z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y (-.f64 z x)) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (-.f64 x z) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (-.f64 x z) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (-.f64 x z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 y (-.f64 z x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (-.f64 x z) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (pow.f64 z 2/3) (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z 2/3) (cbrt.f64 z) (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (-.f64 x z) z)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (-.f64 x z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (-.f64 x z))) (pow.f64 (-.f64 x z) 2/3) z)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x z) y z)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) (cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2)) z)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 z) (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z 1 (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 z (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (-.f64 x z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (-.f64 x z)) 1 z)))))"]],"rules":[["egg-rr",45]],"time":38.27197265625,"type":"rewrite"},{"count":[[81,56]],"inputs":[["z","(+.f64 (*.f64 y (-.f64 x z)) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y (-.f64 x z)) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y (-.f64 x z)) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 y z)) z))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 y z)) z))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 y z)) z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(*.f64 (+.f64 1 (*.f64 -1 y)) z)","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(*.f64 -1 (*.f64 z (-.f64 y 1)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z (-.f64 y 1))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z (-.f64 y 1))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z (-.f64 y 1))))"]],"method":["egg-herbie"],"outputs":[["z","(+.f64 (*.f64 y (-.f64 x z)) z)","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(fma.f64 y (-.f64 x z) z)","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y (-.f64 x z)) z)","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(fma.f64 y (-.f64 x z) z)","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y (-.f64 x z)) z)","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(*.f64 (-.f64 1 y) z)","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 y z)) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 y z)) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 y z)) z))","(fma.f64 y (-.f64 x z) z)","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(fma.f64 y (-.f64 x z) z)","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(fma.f64 y (-.f64 x z) z)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(fma.f64 y (-.f64 x z) z)","(*.f64 (+.f64 1 (*.f64 -1 y)) z)","(*.f64 (-.f64 1 y) z)","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(fma.f64 y (-.f64 x z) z)","(*.f64 -1 (*.f64 z (-.f64 y 1)))","(*.f64 (-.f64 1 y) z)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z (-.f64 y 1))))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z (-.f64 y 1))))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z (-.f64 y 1))))","(fma.f64 y (-.f64 x z) z)"]],"time":126.797119140625,"type":"simplify"},{"compiler":[[557,171]],"time":6.015869140625,"type":"eval"},{"alts":[["(fma.f64 y (-.f64 x z) z)","done",0.00390625],["(fma.f64 (-.f64 1 y) z (*.f64 x y))","done",0.020788781620653757]],"compiler":[[9,5],[11,7]],"count":[[58,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[56,0],"picked":[1,1]}],"min-error":[0],"time":10.39111328125,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["z",0.00390625,1],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))",0.00390625,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[26,13]],"count":[[3,1]],"inputs":[["(fma.f64 y (-.f64 x z) z)","(fma.f64 (-.f64 1 y) z (*.f64 x y))","(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))"]],"link":["."],"name":["Diagrams.TwoD.Segment:bezierClip from diagrams-lib-1.3.0.3"],"oracle":[0.03250753162065376],"outputs":[["(fma.f64 y (-.f64 x z) z)"]],"time":12.593017578125,"times":[["x",2.759033203125],["y",2.73486328125],["z",3.5078125],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))",2.85205078125]],"type":"regimes"},{"compiler":[[9,5]],"inputs":[["(fma.f64 y (-.f64 x z) z)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 y (-.f64 x z) z)"]],"stop":[["done",1]],"time":36.663818359375,"type":"simplify"},{"time":0.01611328125,"type":"soundness"},{"compiler":[[9,5]],"remove-preprocessing":[[]],"time":7.919921875,"type":"end"}]
[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.7492677569389343,0.1326828319579363,0.11804941110312939],[11,0.7492677569389343,0.1404877044260502,0.11024453863501549],[10,0.7492677569389343,0.1404877044260502,0.11024453863501549],[9,0.7492677569389343,0.15609744936227798,0.09463479369878769],[8,0.7492677569389343,0.15609744936227798,0.09463479369878769],[7,0.7492677569389343,0.18731693923473358,0.06341530382633209],[6,0.7492677569389343,0.18731693923473358,0.06341530382633209],[5,0.7492677569389343,0.24975591897964478,0.0009763240814208984],[4,0.7492677569389343,0.24975591897964478,0.0009763240814208984],[3,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[2,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":24.85791015625,"type":"analyze"},{"outcomes":[["body",512,"invalid",29.261962890625,310],["body",256,"invalid",22.585693359375,415],["body",1024,"invalid",112.450927734375,717],["body",512,"valid",69.319580078125,670],["body",1024,"valid",269.54052734375,1344],["body",2048,"valid",2.39501953125,4],["body",256,"valid",286.783203125,6238]],"time":802.467041015625,"type":"sample"},{"compiler":[[7,5]],"inputs":[["0","1"],["(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 im) (cos.f64 re))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 im) (cos.f64 re))"]],"symmetry":[[]],"time":76.533935546875,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(*.f64 (exp.f64 re) (cos.f64 im))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (exp.f64 re) (cos.f64 im))"]],"time":32.449951171875,"type":"simplify"},{"compiler":[[7,5]],"time":0.2041015625,"type":"eval"},{"alts":[["(*.f64 (exp.f64 re) (cos.f64 im))","next",0.0078125]],"compiler":[[7,5],[7,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.68994140625,"type":"prune"},{"compiler":[[13,5]],"locations":[["(*.f64 (exp.f64 re) (cos.f64 im))",0.00390625,true],["(cos.f64 im)",0.0078125,true]],"time":4.0029296875,"type":"localize"},{"count":[[2,12]],"series":[["(*.f64 (exp.f64 re) (cos.f64 im))","im","-inf",0.298828125],["(*.f64 (exp.f64 re) (cos.f64 im))","im","inf",0.2900390625],["(*.f64 (exp.f64 re) (cos.f64 im))","im","0",0.296875],["(*.f64 (exp.f64 re) (cos.f64 im))","re","-inf",0.4208984375],["(*.f64 (exp.f64 re) (cos.f64 im))","re","inf",0.593994140625],["(*.f64 (exp.f64 re) (cos.f64 im))","re","0",0.35888671875],["(cos.f64 im)","im","-inf",0.1611328125],["(cos.f64 im)","im","inf",0.185791015625],["(cos.f64 im)","im","0",0.3271484375]],"time":3.0341796875,"type":"series"},{"count":[[2,50]],"inputs":[["(cos.f64 im)","(*.f64 (exp.f64 re) (cos.f64 im))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 im) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 0) (cos.f64 im)) (*.f64 (sin.f64 0) (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 im) (cos.f64 0)) (*.f64 (sin.f64 im) (sin.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 im)) (pow.f64 (cos.f64 im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 im) 2/3) (cbrt.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 im))) (neg.f64 (pow.f64 (cos.f64 im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 im)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 im) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 im)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 im) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 im)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 im) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 im)))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (neg.f64 im))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (exp.f64 re) (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (exp.f64 re) (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 re) (cos.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 im) (exp.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 im)) (*.f64 (pow.f64 (cos.f64 im) 2/3) (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 re) (cbrt.f64 (cos.f64 im))) (pow.f64 (cos.f64 im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 im) 2/3) (exp.f64 re)) (cbrt.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)) (cbrt.f64 (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 im) 2/3) (*.f64 (exp.f64 re) (cbrt.f64 (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (exp.f64 re) (cos.f64 im))) (pow.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 2/3) (cbrt.f64 (*.f64 (exp.f64 re) (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 im) (cbrt.f64 (exp.f64 re))) (pow.f64 (exp.f64 re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 re) 2/3) (*.f64 (cos.f64 im) (cbrt.f64 (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (exp.f64 re) (cos.f64 im)))) (neg.f64 (pow.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (exp.f64 re) (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (exp.f64 re) (cos.f64 im))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (exp.f64 re) (cos.f64 im))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (exp.f64 re) (cos.f64 im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (exp.f64 re) (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 3))))))"]],"rules":[["egg-rr",28],["egg-rr",22]],"time":37.20703125,"type":"rewrite"},{"count":[[62,70]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 im 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 im 2)) (*.f64 1/24 (pow.f64 im 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 im 2)) (+.f64 (*.f64 1/24 (pow.f64 im 4)) (*.f64 -1/720 (pow.f64 im 6)))))","(cos.f64 im)","(+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)))","(+.f64 (*.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))))","(exp.f64 re)","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (exp.f64 re))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (exp.f64 re)))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (+.f64 (exp.f64 re) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6))))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 im 2)))","(fma.f64 (*.f64 im im) -1/2 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 im 2)) (*.f64 1/24 (pow.f64 im 4))))","(+.f64 1 (fma.f64 (pow.f64 im 4) 1/24 (*.f64 -1/2 (*.f64 im im))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 im 2)) (+.f64 (*.f64 1/24 (pow.f64 im 4)) (*.f64 -1/720 (pow.f64 im 6)))))","(+.f64 (fma.f64 (*.f64 im im) -1/2 1) (fma.f64 1/24 (pow.f64 im 4) (*.f64 -1/720 (pow.f64 im 6))))","(cos.f64 im)","(+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))","(*.f64 (cos.f64 im) (+.f64 1 re))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)))","(fma.f64 (*.f64 1/2 (cos.f64 im)) (*.f64 re re) (*.f64 (cos.f64 im) (+.f64 1 re)))","(+.f64 (*.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))))","(fma.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3)) (fma.f64 (*.f64 1/2 (cos.f64 im)) (*.f64 re re) (*.f64 (cos.f64 im) (+.f64 1 re))))","(exp.f64 re)","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (exp.f64 re))","(fma.f64 (*.f64 -1/2 (exp.f64 re)) (*.f64 im im) (exp.f64 re))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (exp.f64 re)))","(fma.f64 (*.f64 -1/2 (exp.f64 re)) (*.f64 im im) (fma.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4)) (exp.f64 re)))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (+.f64 (exp.f64 re) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6))))))","(fma.f64 (*.f64 -1/2 (exp.f64 re)) (*.f64 im im) (fma.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4)) (fma.f64 (*.f64 (exp.f64 re) (pow.f64 im 6)) -1/720 (exp.f64 re))))"]],"time":46.158935546875,"type":"simplify"},{"compiler":[[747,335]],"time":9.10302734375,"type":"eval"},{"alts":[["(*.f64 (exp.f64 re) (pow.f64 (cbrt.f64 (cos.f64 im)) 3))","fresh",0.2464638183790941],["(*.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)))","next",0.0078125]],"compiler":[[10,8],[13,9],[10,8],[13,9]],"count":[[71,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[70,2],"picked":[1,0]}],"min-error":[0],"time":13.910888671875,"type":"prune"},{"compiler":[[34,15]],"locations":[["(*.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)))",0.00390625,true],["(cos.f64 im)",0.0078125,false]],"time":8.916015625,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)))","im","-inf",0.286865234375],["(*.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)))","im","inf",0.98095703125],["(*.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)))","im","0",0.279052734375],["(*.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)))","re","-inf",0.666015625],["(*.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)))","re","inf",1.294921875],["(*.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)))","re","0",0.3369140625]],"time":3.94091796875,"type":"series"},{"count":[[1,34]],"inputs":[["(*.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 re) (cos.f64 im)) (*.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 0) (*.f64 (exp.f64 re) (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1/3) (*.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 re) (cos.f64 im)) (*.f64 0 (*.f64 (exp.f64 re) (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (exp.f64 re) (cos.f64 im))) (*.f64 (exp.f64 re) (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (*.f64 (exp.f64 re) (cos.f64 im))) (*.f64 2/3 (*.f64 (exp.f64 re) (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 re) (cos.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (exp.f64 (*.f64 re 2/3)) (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 (*.f64 re 2/3)) (cos.f64 im)) (cbrt.f64 (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 im) (exp.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 re) (cbrt.f64 (cos.f64 im))) (pow.f64 (cos.f64 im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (exp.f64 (*.f64 re 2/3)) (cos.f64 im))) (*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 re 2/3)) (cos.f64 im)) 2/3) (cbrt.f64 (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (exp.f64 re))) (*.f64 (cbrt.f64 (exp.f64 (*.f64 re 2/3))) (*.f64 (exp.f64 (*.f64 re 2/3)) (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 re 2/3)) (cos.f64 im)) 2/3) (cbrt.f64 (exp.f64 re))) (cbrt.f64 (*.f64 (exp.f64 (*.f64 re 2/3)) (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 im) 2/3) (*.f64 (exp.f64 re) (cbrt.f64 (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 re 2/3))) (*.f64 (exp.f64 (*.f64 re 2/3)) (cos.f64 im))) (cbrt.f64 (cbrt.f64 (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (exp.f64 re) (cos.f64 im))) (pow.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 2/3) (cbrt.f64 (*.f64 (exp.f64 re) (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (exp.f64 re)) (cos.f64 im)) (exp.f64 (*.f64 re 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (exp.f64 re) (*.f64 (exp.f64 (*.f64 re 2/3)) (cos.f64 im)))) (pow.f64 (*.f64 (exp.f64 (*.f64 re 2/3)) (cos.f64 im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (exp.f64 (*.f64 re 2/3)) (cos.f64 im)) (cbrt.f64 (cbrt.f64 (exp.f64 re)))) (cbrt.f64 (exp.f64 (*.f64 re 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 re 2/3)) (*.f64 (cbrt.f64 (exp.f64 re)) (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 re 2/3))) (*.f64 (*.f64 (exp.f64 (*.f64 re 2/3)) (cos.f64 im)) (cbrt.f64 (cbrt.f64 (exp.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 re 2/3)) (cos.f64 im)) 2/3) (cbrt.f64 (*.f64 (exp.f64 re) (*.f64 (exp.f64 (*.f64 re 2/3)) (cos.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (exp.f64 re) (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (exp.f64 re) (cos.f64 im))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (exp.f64 re) (cos.f64 im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (exp.f64 re) (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 3))))))"]],"rules":[["egg-rr",34]],"time":23.488037109375,"type":"rewrite"},{"count":[[58,48]],"inputs":[["(cos.f64 im)","(+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)))","(+.f64 (*.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(exp.f64 re)","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (exp.f64 re))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (exp.f64 re)))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (+.f64 (exp.f64 re) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6))))))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))"]],"method":["egg-herbie"],"outputs":[["(cos.f64 im)","(+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))","(*.f64 (cos.f64 im) (+.f64 re 1))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)))","(*.f64 (cos.f64 im) (+.f64 (*.f64 1/2 (*.f64 re re)) (+.f64 re 1)))","(+.f64 (*.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))))","(fma.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3)) (*.f64 (cos.f64 im) (+.f64 (*.f64 1/2 (*.f64 re re)) (+.f64 re 1))))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(exp.f64 re)","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (exp.f64 re))","(*.f64 (exp.f64 re) (+.f64 1 (*.f64 (*.f64 im im) -1/2)))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (exp.f64 re)))","(+.f64 (*.f64 (exp.f64 re) (+.f64 (*.f64 (pow.f64 im 4) 1/24) (*.f64 (*.f64 im im) -1/2))) (exp.f64 re))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (+.f64 (exp.f64 re) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6))))))","(+.f64 (fma.f64 1/24 (*.f64 (pow.f64 im 4) (exp.f64 re)) (exp.f64 re)) (*.f64 (exp.f64 re) (+.f64 (*.f64 (pow.f64 im 6) -1/720) (*.f64 (*.f64 im im) -1/2))))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))"]],"time":103.531005859375,"type":"simplify"},{"compiler":[[1072,517]],"time":11.634033203125,"type":"eval"},{"alts":[["(*.f64 (exp.f64 re) (pow.f64 (cbrt.f64 (cos.f64 im)) 3))","next",0.2464638183790941],["(*.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)))","done",0.0078125]],"compiler":[[10,8],[13,9],[10,8]],"count":[[78,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[76,0],"picked":[1,1]}],"min-error":[0],"time":16.2021484375,"type":"prune"},{"compiler":[[25,11]],"locations":[["(*.f64 (exp.f64 re) (pow.f64 (cbrt.f64 (cos.f64 im)) 3))",0.00390625,true],["(cos.f64 im)",0.0078125,false],["(cbrt.f64 (cos.f64 im))",0.0625,true],["(pow.f64 (cbrt.f64 (cos.f64 im)) 3)",0.3750763672213042,true]],"time":6.31591796875,"type":"localize"},{"count":[[3,48]],"series":[["(*.f64 (exp.f64 re) (pow.f64 (cbrt.f64 (cos.f64 im)) 3))","im","-inf",0.315185546875],["(*.f64 (exp.f64 re) (pow.f64 (cbrt.f64 (cos.f64 im)) 3))","im","inf",0.237060546875],["(*.f64 (exp.f64 re) (pow.f64 (cbrt.f64 (cos.f64 im)) 3))","im","0",0.180908203125],["(*.f64 (exp.f64 re) (pow.f64 (cbrt.f64 (cos.f64 im)) 3))","re","-inf",0.238037109375],["(*.f64 (exp.f64 re) (pow.f64 (cbrt.f64 (cos.f64 im)) 3))","re","inf",0.22509765625],["(*.f64 (exp.f64 re) (pow.f64 (cbrt.f64 (cos.f64 im)) 3))","re","0",0.197998046875],["(cbrt.f64 (cos.f64 im))","im","-inf",0.14208984375],["(cbrt.f64 (cos.f64 im))","im","inf",0.179931640625],["(cbrt.f64 (cos.f64 im))","im","0",0.193115234375],["(pow.f64 (cbrt.f64 (cos.f64 im)) 3)","im","-inf",1.56396484375],["(pow.f64 (cbrt.f64 (cos.f64 im)) 3)","im","inf",1.4140625],["(pow.f64 (cbrt.f64 (cos.f64 im)) 3)","im","0",0.370849609375]],"time":5.409912109375,"type":"series"},{"count":[[3,74]],"inputs":[["(pow.f64 (cbrt.f64 (cos.f64 im)) 3)","(cbrt.f64 (cos.f64 im))","(*.f64 (exp.f64 re) (pow.f64 (cbrt.f64 (cos.f64 im)) 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 im) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 im) (cos.f64 0)) (*.f64 (sin.f64 im) (sin.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 0) (cos.f64 im)) (*.f64 (sin.f64 0) (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 im))) (pow.f64 (pow.f64 (cos.f64 im) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cos.f64 im) 2/3) 4/3) (cbrt.f64 (cbrt.f64 (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 im)) (pow.f64 (cos.f64 im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 im) 2/3) (cbrt.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 im)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 im) 2/3)) (pow.f64 (cbrt.f64 (cos.f64 im)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 im))) (neg.f64 (pow.f64 (cos.f64 im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 im)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 im) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 im)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 im)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 im) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 im) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 im)))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (neg.f64 im))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (cos.f64 im)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 im) 2/3)) (cbrt.f64 (cbrt.f64 (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 im))) (cbrt.f64 (pow.f64 (cos.f64 im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (cos.f64 im)))) (cbrt.f64 (pow.f64 (pow.f64 (cos.f64 im) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 im)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 im) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (cos.f64 im)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 im) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 im))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (cos.f64 im)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (cos.f64 im))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (cos.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 im) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (cos.f64 im))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (exp.f64 re) (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (exp.f64 re) (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 re) (cos.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 im) (exp.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 re) (pow.f64 (cos.f64 im) 2/3)) (cbrt.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 im) (cbrt.f64 (exp.f64 re))) (pow.f64 (exp.f64 re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 im)) (*.f64 (exp.f64 re) (pow.f64 (cos.f64 im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)) (cbrt.f64 (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 re) 2/3) (*.f64 (cos.f64 im) (cbrt.f64 (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (exp.f64 re) (cos.f64 im))) (pow.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 2/3) (cbrt.f64 (*.f64 (exp.f64 re) (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 re) (cbrt.f64 (cos.f64 im))) (pow.f64 (cos.f64 im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 im) 2/3) (*.f64 (exp.f64 re) (cbrt.f64 (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (exp.f64 re) (cos.f64 im)))) (neg.f64 (pow.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (exp.f64 re) (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (exp.f64 re) (cos.f64 im))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (exp.f64 re) (cos.f64 im))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (exp.f64 re) (cos.f64 im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (exp.f64 re) (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 3))))))"]],"rules":[["egg-rr",28],["egg-rr",20],["egg-rr",26]],"time":47.3720703125,"type":"rewrite"},{"count":[[122,101]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 im 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 im 2)) (*.f64 1/24 (pow.f64 im 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 im 2)) (+.f64 (*.f64 1/24 (pow.f64 im 4)) (*.f64 -1/720 (pow.f64 im 6)))))","(*.f64 (pow.f64 1 1/3) (cos.f64 im))","(*.f64 (pow.f64 1 1/3) (cos.f64 im))","(*.f64 (pow.f64 1 1/3) (cos.f64 im))","(*.f64 (pow.f64 1 1/3) (cos.f64 im))","(*.f64 (pow.f64 1 1/3) (cos.f64 im))","(*.f64 (pow.f64 1 1/3) (cos.f64 im))","(*.f64 (pow.f64 1 1/3) (cos.f64 im))","(*.f64 (pow.f64 1 1/3) (cos.f64 im))","1","(+.f64 1 (*.f64 -1/6 (pow.f64 im 2)))","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 im 2)) (*.f64 -1/72 (pow.f64 im 4))))","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 im 2)) (+.f64 (*.f64 -23/6480 (pow.f64 im 6)) (*.f64 -1/72 (pow.f64 im 4)))))","(pow.f64 (cos.f64 im) 1/3)","(pow.f64 (cos.f64 im) 1/3)","(pow.f64 (cos.f64 im) 1/3)","(pow.f64 (cos.f64 im) 1/3)","(pow.f64 (cos.f64 im) 1/3)","(pow.f64 (cos.f64 im) 1/3)","(pow.f64 (cos.f64 im) 1/3)","(pow.f64 (cos.f64 im) 1/3)","(cos.f64 im)","(+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)))","(+.f64 (*.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(exp.f64 re)","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (exp.f64 re))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (exp.f64 re)))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (+.f64 (exp.f64 re) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6))))))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 im 2)))","(fma.f64 (*.f64 im im) -1/2 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 im 2)) (*.f64 1/24 (pow.f64 im 4))))","(+.f64 (fma.f64 (*.f64 im im) -1/2 1) (*.f64 1/24 (pow.f64 im 4)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 im 2)) (+.f64 (*.f64 1/24 (pow.f64 im 4)) (*.f64 -1/720 (pow.f64 im 6)))))","(+.f64 (fma.f64 (*.f64 im im) -1/2 1) (fma.f64 1/24 (pow.f64 im 4) (*.f64 -1/720 (pow.f64 im 6))))","(*.f64 (pow.f64 1 1/3) (cos.f64 im))","(cos.f64 im)","(*.f64 (pow.f64 1 1/3) (cos.f64 im))","(cos.f64 im)","(*.f64 (pow.f64 1 1/3) (cos.f64 im))","(cos.f64 im)","(*.f64 (pow.f64 1 1/3) (cos.f64 im))","(cos.f64 im)","(*.f64 (pow.f64 1 1/3) (cos.f64 im))","(cos.f64 im)","(*.f64 (pow.f64 1 1/3) (cos.f64 im))","(cos.f64 im)","(*.f64 (pow.f64 1 1/3) (cos.f64 im))","(cos.f64 im)","(*.f64 (pow.f64 1 1/3) (cos.f64 im))","(cos.f64 im)","1","(+.f64 1 (*.f64 -1/6 (pow.f64 im 2)))","(fma.f64 -1/6 (*.f64 im im) 1)","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 im 2)) (*.f64 -1/72 (pow.f64 im 4))))","(+.f64 (fma.f64 -1/6 (*.f64 im im) 1) (*.f64 -1/72 (pow.f64 im 4)))","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 im 2)) (+.f64 (*.f64 -23/6480 (pow.f64 im 6)) (*.f64 -1/72 (pow.f64 im 4)))))","(+.f64 (fma.f64 -1/6 (*.f64 im im) 1) (fma.f64 -23/6480 (pow.f64 im 6) (*.f64 -1/72 (pow.f64 im 4))))","(pow.f64 (cos.f64 im) 1/3)","(cbrt.f64 (cos.f64 im))","(pow.f64 (cos.f64 im) 1/3)","(cbrt.f64 (cos.f64 im))","(pow.f64 (cos.f64 im) 1/3)","(cbrt.f64 (cos.f64 im))","(pow.f64 (cos.f64 im) 1/3)","(cbrt.f64 (cos.f64 im))","(pow.f64 (cos.f64 im) 1/3)","(cbrt.f64 (cos.f64 im))","(pow.f64 (cos.f64 im) 1/3)","(cbrt.f64 (cos.f64 im))","(pow.f64 (cos.f64 im) 1/3)","(cbrt.f64 (cos.f64 im))","(pow.f64 (cos.f64 im) 1/3)","(cbrt.f64 (cos.f64 im))","(cos.f64 im)","(+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))","(*.f64 (cos.f64 im) (+.f64 1 re))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)))","(fma.f64 1/2 (*.f64 (cos.f64 im) (*.f64 re re)) (*.f64 (cos.f64 im) (+.f64 1 re)))","(+.f64 (*.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))))","(fma.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3)) (fma.f64 1/2 (*.f64 (cos.f64 im) (*.f64 re re)) (*.f64 (cos.f64 im) (+.f64 1 re))))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(exp.f64 re)","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (exp.f64 re))","(fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) (exp.f64 re))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (exp.f64 re)))","(fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) (fma.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4)) (exp.f64 re)))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (+.f64 (exp.f64 re) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6))))))","(fma.f64 (*.f64 (exp.f64 re) (*.f64 im im)) -1/2 (fma.f64 (*.f64 (exp.f64 re) (pow.f64 im 4)) 1/24 (fma.f64 (*.f64 (exp.f64 re) (pow.f64 im 6)) -1/720 (exp.f64 re))))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))"]],"time":141.881103515625,"type":"simplify"},{"compiler":[[1520,782]],"time":18.350830078125,"type":"eval"},{"alts":[["(*.f64 (exp.f64 re) (pow.f64 (cbrt.f64 (cos.f64 im)) 3))","done",0.2464638183790941],["(*.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)))","done",0.0078125]],"compiler":[[10,8],[13,9]],"count":[[131,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[129,0],"picked":[1,1]}],"min-error":[0],"time":32.136962890625,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["re",0.0078125,1],["im",0.0078125,1],["(*.f64 (exp.f64 re) (cos.f64 im))",0.0078125,1],["(exp.f64 re)",0.0078125,1],["(cos.f64 im)",0.0078125,1]],"compiler":[[3,2],[3,2],[7,5],[4,3],[4,3],[26,14]],"count":[[3,1]],"inputs":[["(*.f64 (exp.f64 re) (pow.f64 (cbrt.f64 (cos.f64 im)) 3))","(*.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)))","(*.f64 (exp.f64 re) (cos.f64 im))"]],"link":["."],"name":["math.exp on complex, real part"],"oracle":[0.2542763183790941],"outputs":[["(*.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)))"]],"time":12.548095703125,"times":[["re",2.56787109375],["im",2.81689453125],["(*.f64 (exp.f64 re) (cos.f64 im))",2.20703125],["(exp.f64 re)",1.65478515625],["(cos.f64 im)",2.52294921875]],"type":"regimes"},{"compiler":[[13,9]],"inputs":[["(*.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (pow.f64 (exp.f64 re) 2/3) (cos.f64 im)))","(*.f64 (exp.f64 re) (cos.f64 im))"]],"stop":[["done",1]],"time":22.154052734375,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[13,9]],"remove-preprocessing":[[]],"time":9.261962890625,"type":"end"}]
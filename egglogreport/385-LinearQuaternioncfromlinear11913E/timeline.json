[{"compiler":[[18,8]],"method":["search"],"sampling":[[12,0.4936581836082041,0.06829263409599662,0.43804918229579926],[11,0.4721947843208909,0.08975603338330984,0.43804918229579926],[10,0.42926798574626446,0.1326828319579363,0.43804918229579926],[9,0.39024362340569496,0.17170719429850578,0.43804918229579926],[8,0.31219489872455597,0.24975591897964478,0.43804918229579926],[7,0.24975591897964478,0.31219489872455597,0.43804918229579926],[6,0.24975591897964478,0.49951183795928955,0.2507322430610657],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":20.121826171875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.254150390625,7],["body",256,"valid",310.015869140625,8256]],"time":317.74609375,"type":"sample"},{"compiler":[[17,7]],"inputs":[["0","1"],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","(+.f64 (+.f64 (+.f64 (*.f64 y y) (*.f64 x x)) (*.f64 x x)) (*.f64 x x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","(+.f64 (*.f64 x x) (*.f64 y (+.f64 (+.f64 y y) y)))","(+.f64 (+.f64 (+.f64 (*.f64 y y) (*.f64 x x)) (*.f64 x x)) (*.f64 x x))","(+.f64 (*.f64 y y) (*.f64 x (+.f64 x (+.f64 x x))))"]],"symmetry":[[]],"time":59.89892578125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","(+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y))))"]],"time":18.465087890625,"type":"simplify"},{"compiler":[[28,11]],"time":0.322021484375,"type":"eval"},{"alts":[["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","next",0.1171875],["(+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y))))","fresh",0.12890625]],"compiler":[[17,7],[13,7],[17,7],[13,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.05078125],"time":1.182861328125,"type":"prune"},{"compiler":[[43,7]],"locations":[["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y))",0.0078125,true],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))",0.109375,true]],"time":5.8662109375,"type":"localize"},{"count":[[2,48]],"series":[["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y))","y","-inf",0.16796875],["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y))","y","inf",0.159912109375],["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y))","y","0",0.162109375],["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y))","x","-inf",0.14794921875],["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y))","x","inf",0.162109375],["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y))","x","0",0.176025390625],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","y","-inf",0.18603515625],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","y","inf",0.338134765625],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","y","0",0.35498046875],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","x","-inf",0.19384765625],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","x","inf",0.403076171875],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","x","0",0.572998046875]],"time":3.182861328125,"type":"series"},{"count":[[2,66]],"inputs":[["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y)))) 0) (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y)))) (*.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y))))) (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y)))) (*.f64 0 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y y (*.f64 x x)) (*.f64 y (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 y y)) (fma.f64 y y (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 (*.f64 y (+.f64 y (+.f64 y y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y))))) (cbrt.f64 (pow.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 y 4)) (-.f64 (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 2)) (cbrt.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) y) y)))) (+.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 2)) (-.f64 (cbrt.f64 (pow.f64 y 4)) (cbrt.f64 (*.f64 (*.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) y) y)))) (+.f64 (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y)))) 2)) (cbrt.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 y y (*.f64 x x))) (cbrt.f64 (pow.f64 (fma.f64 y y (*.f64 x x)) 2)) (*.f64 y (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 2)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (pow.f64 y 4)) (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y y) (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x x (*.f64 y (+.f64 y y))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 y y (*.f64 x x)) (*.f64 y (+.f64 y y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 0) (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) (*.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x x (*.f64 y (+.f64 y y)))) (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) (*.f64 0 (fma.f64 x x (*.f64 y (+.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 y (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 y y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y y (*.f64 x x)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (fma.f64 y y (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 2)) (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 y y (*.f64 x x)) 2)) (-.f64 (cbrt.f64 (pow.f64 y 4)) (cbrt.f64 (+.f64 (pow.f64 y 4) (pow.f64 (*.f64 x y) 2))))) (+.f64 (cbrt.f64 (fma.f64 y y (*.f64 x x))) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 y 4)) (-.f64 (cbrt.f64 (pow.f64 (fma.f64 y y (*.f64 x x)) 2)) (cbrt.f64 (+.f64 (pow.f64 y 4) (pow.f64 (*.f64 x y) 2))))) (+.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (fma.f64 y y (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y y (fma.f64 y y (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (*.f64 y (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 x 4)) (*.f64 y (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (pow.f64 y 4)) (fma.f64 y y (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 y y (*.f64 x x))) (cbrt.f64 (pow.f64 (fma.f64 y y (*.f64 x x)) 2)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y y) (fma.f64 y y (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (*.f64 y (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 y y (*.f64 x x)) (*.f64 y y))))))"]],"rules":[["egg-rr",32],["egg-rr",34]],"time":24.983154296875,"type":"rewrite"},{"count":[[114,77]],"inputs":[["(+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(*.f64 3 (pow.f64 y 2))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(*.f64 3 (pow.f64 y 2))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(*.f64 2 (pow.f64 y 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(*.f64 2 (pow.f64 y 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(*.f64 2 (pow.f64 y 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2)))","(*.f64 3 (*.f64 y y))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(*.f64 2 (pow.f64 y 2))","(*.f64 y (+.f64 y y))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(*.f64 2 (pow.f64 y 2))","(*.f64 y (+.f64 y y))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(*.f64 2 (pow.f64 y 2))","(*.f64 y (+.f64 y y))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))"]],"time":153.387939453125,"type":"simplify"},{"compiler":[[1286,304]],"time":8.928955078125,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (pow.f64 y 4)) (fma.f64 x x (*.f64 y (+.f64 y y))))","fresh",14.134812901402775],["(fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))","next",0.046875],["(+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x))","fresh",0.12890625],["(+.f64 (pow.f64 (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) 3) (*.f64 y y))","fresh",0.6042939453688405]],"compiler":[[19,11],[13,6],[13,7],[17,10],[19,11],[13,6],[13,7],[17,10]],"count":[[79,4]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[77,4],"picked":[1,0]}],"min-error":[0.00390625],"time":16.720947265625,"type":"prune"},{"compiler":[[31,6]],"locations":[["(fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))",0.046875,true]],"time":5.489990234375,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))","x","-inf",0.287109375],["(fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))","x","inf",0.284912109375],["(fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))","x","0",0.239990234375],["(fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))","y","-inf",0.363037109375],["(fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))","y","inf",0.414794921875],["(fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))","y","0",0.47216796875]],"time":2.14599609375,"type":"series"},{"count":[[1,42]],"inputs":[["(fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (fma.f64 x x (*.f64 y y)) -1)) (*.f64 y (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x (*.f64 y y)) (*.f64 y (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 y y)) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 y (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y y) (neg.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y (*.f64 3 y)) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x x (*.f64 y y)) (*.f64 -2 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x))) (pow.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x)) 2/3) (cbrt.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x)))) (neg.f64 (pow.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 y 4/3) (-.f64 (pow.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 2/3) (*.f64 (pow.f64 y 2/3) (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y))))))) (+.f64 (pow.f64 y 2/3) (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 2/3) (-.f64 (pow.f64 y 4/3) (*.f64 (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) (pow.f64 y 2/3)))) (+.f64 (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 2/3) (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) (pow.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 2/3) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 4/3) (pow.f64 y 2/3) (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 2/3) (pow.f64 y 4/3) (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) 1 (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y y) (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x x (*.f64 y (+.f64 y y))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 1 (*.f64 y y))))))"]],"rules":[["egg-rr",42]],"time":40.01708984375,"type":"rewrite"},{"count":[[66,50]],"inputs":[["(pow.f64 x 2)","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(*.f64 3 (pow.f64 y 2))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(*.f64 3 (pow.f64 y 2))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2)))","(*.f64 3 (*.f64 y y))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))"]],"time":84.1259765625,"type":"simplify"},{"compiler":[[681,267]],"time":6.580078125,"type":"eval"},{"alts":[["(fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))","done",0.046875],["(+.f64 (*.f64 x x) (*.f64 y (*.f64 3 y)))","next",0.12890625],["(+.f64 (pow.f64 (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) 3) (*.f64 y y))","fresh",0.6042939453688405],["(fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (fma.f64 x x (*.f64 y (+.f64 y y))))","fresh",0.2614250488422101]],"compiler":[[13,6],[11,7],[17,10],[17,9],[11,7],[17,10],[17,9]],"count":[[54,4]],"kept":[{"done":[0,0],"fresh":[3,1],"new":[50,2],"picked":[1,1]}],"min-error":[0.00390625],"time":9.697998046875,"type":"prune"},{"compiler":[[25,13]],"locations":[["(+.f64 (*.f64 x x) (*.f64 y (*.f64 3 y)))",0.00390625,true],["(*.f64 y (*.f64 3 y))",0.171875,true]],"time":5.551025390625,"type":"localize"},{"count":[[2,36]],"series":[["(+.f64 (*.f64 x x) (*.f64 y (*.f64 3 y)))","y","-inf",0.14892578125],["(+.f64 (*.f64 x x) (*.f64 y (*.f64 3 y)))","y","inf",0.193115234375],["(+.f64 (*.f64 x x) (*.f64 y (*.f64 3 y)))","y","0",0.176025390625],["(+.f64 (*.f64 x x) (*.f64 y (*.f64 3 y)))","x","-inf",0.14990234375],["(+.f64 (*.f64 x x) (*.f64 y (*.f64 3 y)))","x","inf",0.161865234375],["(+.f64 (*.f64 x x) (*.f64 y (*.f64 3 y)))","x","0",0.23193359375],["(*.f64 y (*.f64 3 y))","y","-inf",0.15185546875],["(*.f64 y (*.f64 3 y))","y","inf",0.31689453125],["(*.f64 y (*.f64 3 y))","y","0",0.339111328125]],"time":2.009765625,"type":"series"},{"count":[[2,82]],"inputs":[["(*.f64 y (*.f64 3 y))","(+.f64 (*.f64 x x) (*.f64 y (*.f64 3 y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y y) 3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 y y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -3 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 y) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 y)) (*.f64 (pow.f64 (*.f64 3 y) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 3 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 3 y) 2/3) y) (cbrt.f64 (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (sqrt.f64 3)) (*.f64 y (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 3)) y) (*.f64 (neg.f64 (sqrt.f64 3)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (neg.f64 (sqrt.f64 3))) (*.f64 y (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y y) 3)) (pow.f64 (*.f64 (*.f64 y y) 3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 y y) 3) 2/3) (cbrt.f64 (*.f64 (*.f64 y y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (*.f64 3 y))) (pow.f64 (*.f64 3 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 y) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 3 y) 2/3) (*.f64 y (cbrt.f64 (*.f64 3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 3 y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3 (*.f64 y y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y y) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 y y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y y) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 y y) 3) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y y) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -3 (*.f64 y y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 y y) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 y y) 3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 y y) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (sqrt.f64 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (neg.f64 (sqrt.f64 3)) y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (neg.f64 (sqrt.f64 3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 y y) 3) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y y) 3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x (*.f64 (*.f64 y y) 3)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x x (*.f64 (*.f64 y y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x x) 0) (*.f64 (*.f64 y y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x x) (*.f64 -3 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (*.f64 y y) 3) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 -3 (*.f64 y y)) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x (*.f64 (*.f64 y y) 3))) (pow.f64 (fma.f64 x x (*.f64 (*.f64 y y) 3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 4/3) (*.f64 (cbrt.f64 (*.f64 (*.f64 y y) 3)) (-.f64 (cbrt.f64 (*.f64 (*.f64 y y) 3)) (pow.f64 x 2/3)))) (+.f64 (cbrt.f64 (*.f64 (*.f64 y y) 3)) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (*.f64 y y) 3) 2/3) (*.f64 (pow.f64 x 2/3) (+.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 -3 (*.f64 y y)))))) (+.f64 (cbrt.f64 (*.f64 (*.f64 y y) 3)) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x (*.f64 (*.f64 y y) 3)) 2/3) (cbrt.f64 (fma.f64 x x (*.f64 (*.f64 y y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 4/3) (+.f64 (pow.f64 (*.f64 (*.f64 y y) 3) 2/3) (*.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 -3 (*.f64 y y)))))) (+.f64 (cbrt.f64 (*.f64 (*.f64 y y) 3)) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 -3 (*.f64 y y)) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 -3 (*.f64 y y)) (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x x (*.f64 (*.f64 y y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x (*.f64 (*.f64 y y) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x x (*.f64 (*.f64 y y) 3)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x (*.f64 (*.f64 y y) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -3 (*.f64 y y)) (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x (*.f64 (*.f64 y y) 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x (*.f64 (*.f64 y y) 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x (*.f64 (*.f64 y y) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 -3 (*.f64 y y)) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 (*.f64 y y) 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (*.f64 (*.f64 y y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 3 y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 y) y (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (pow.f64 x 4/3) (*.f64 (*.f64 y y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 y y) 3)) (pow.f64 (*.f64 (*.f64 y y) 3) 2/3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (*.f64 3 y))) (pow.f64 (*.f64 3 y) 2/3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 3 y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 3 y) (cbrt.f64 y)) (pow.f64 y 2/3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (*.f64 y y) 3) 2/3) (cbrt.f64 (*.f64 (*.f64 y y) 3)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 3 y)) (*.f64 (pow.f64 (*.f64 3 y) 2/3) y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 5) (*.f64 (*.f64 y y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 4/3) (pow.f64 x 2/3) (*.f64 (*.f64 y y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (neg.f64 x) (*.f64 (*.f64 y y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) 3 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 (*.f64 y y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 -3 (*.f64 y y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x x)) (*.f64 (*.f64 y y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (*.f64 (*.f64 y y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 y y) 3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y y) 3) 1 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1 (*.f64 (*.f64 y y) 3))))))"]],"rules":[["egg-rr",46],["egg-rr",36]],"time":43.953125,"type":"rewrite"},{"count":[[118,87]],"inputs":[["(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(pow.f64 x 2)","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(pow.f64 x 2)","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(pow.f64 x 2)","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(*.f64 3 (pow.f64 y 2))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(*.f64 3 (pow.f64 y 2))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(fma.f64 x x (*.f64 3 (*.f64 y y)))"]],"time":109.4990234375,"type":"simplify"},{"compiler":[[1063,540]],"time":12.880859375,"type":"eval"},{"alts":[["(fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))","done",0.046875],["(+.f64 (*.f64 x x) (*.f64 y (*.f64 3 y)))","done",0.12890625],["(+.f64 (pow.f64 (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) 3) (*.f64 y y))","fresh",0.6042939453688405],["(fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (fma.f64 x x (*.f64 y (+.f64 y y))))","next",0.2614250488422101],["(+.f64 (*.f64 x x) (pow.f64 (*.f64 y (sqrt.f64 3)) 2))","fresh",0.31943139652663033]],"compiler":[[13,6],[11,7],[17,10],[17,9],[12,9],[17,10],[17,9],[12,9]],"count":[[91,5]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[87,1],"picked":[1,1]}],"min-error":[0],"time":18.632080078125,"type":"prune"},{"compiler":[[42,12]],"locations":[["(cbrt.f64 y)",0.07421875,true],["(fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (fma.f64 x x (*.f64 y (+.f64 y y))))",0.08203125,true],["(pow.f64 (cbrt.f64 y) 5)",0.7813518062940645,true]],"time":8.4189453125,"type":"localize"},{"count":[[3,19]],"series":[["(cbrt.f64 y)","y","-inf",1.296142578125],["(cbrt.f64 y)","y","inf",0.277099609375],["(cbrt.f64 y)","y","0",0.23486328125],["(fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (fma.f64 x x (*.f64 y (+.f64 y y))))","x","-inf",0.196044921875],["(fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (fma.f64 x x (*.f64 y (+.f64 y y))))","x","inf",0.18896484375],["(fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (fma.f64 x x (*.f64 y (+.f64 y y))))","x","0",1.234130859375],["(fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (fma.f64 x x (*.f64 y (+.f64 y y))))","y","-inf",0.433837890625],["(fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (fma.f64 x x (*.f64 y (+.f64 y y))))","y","inf",0.3271484375],["(fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (fma.f64 x x (*.f64 y (+.f64 y y))))","y","0",0.219970703125],["(pow.f64 (cbrt.f64 y) 5)","y","-inf",1.5419921875],["(pow.f64 (cbrt.f64 y) 5)","y","inf",0.718994140625],["(pow.f64 (cbrt.f64 y) 5)","y","0",1.39404296875]],"time":8.233154296875,"type":"series"},{"count":[[3,73]],"inputs":[["(pow.f64 (cbrt.f64 y) 5)","(fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (fma.f64 x x (*.f64 y (+.f64 y y))))","(cbrt.f64 y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cbrt.f64 y) 5) (*.f64 (pow.f64 (cbrt.f64 y) 5) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cbrt.f64 y) 5) 0) (pow.f64 (cbrt.f64 y) 5))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cbrt.f64 y) 5) (*.f64 0 (pow.f64 (cbrt.f64 y) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (cbrt.f64 y) 5)) (pow.f64 (cbrt.f64 y) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cbrt.f64 y) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 y) 5)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 y) 5)) (pow.f64 (pow.f64 (cbrt.f64 y) 5) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 y) 5) 2/3) (cbrt.f64 (pow.f64 (cbrt.f64 y) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 y) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) 5) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 y) 5) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (cbrt.f64 y) 5) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 y) 5)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 y) 5)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 y) 5)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 y) 5)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 y) 5) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cbrt.f64 y) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 y) 5) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x)) (*.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x)) 0) (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x)) (*.f64 0 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x))) (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x (*.f64 y y)) (*.f64 y (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 y y)) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1) (*.f64 y (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x))) (pow.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x)) 2/3) (cbrt.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) (pow.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 2/3) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 2/3) (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 5) (cbrt.f64 y) (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 2/3) (cbrt.f64 (pow.f64 y 4)) (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 y)) (*.f64 (cbrt.f64 (pow.f64 y 2/3)) (pow.f64 (cbrt.f64 y) 5)) (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (pow.f64 (cbrt.f64 y) 5))) (pow.f64 (pow.f64 (cbrt.f64 y) 5) 2/3) (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y y) (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) 1 (fma.f64 x x (*.f64 y (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x x (*.f64 y (+.f64 y y))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x x (*.f64 y (+.f64 y y))) 1 (*.f64 y y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 y))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 y 2/3)) (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 y 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 y)))))"]],"rules":[["egg-rr",17],["egg-rr",37],["egg-rr",19]],"time":26.780029296875,"type":"rewrite"},{"count":[[92,83]],"inputs":[["(pow.f64 x 2)","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(*.f64 2 (pow.f64 y 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(*.f64 2 (pow.f64 y 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2)))","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2)))","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2)))","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2)))","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2)))","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2)))","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(*.f64 2 (pow.f64 y 2))","(*.f64 y (+.f64 y y))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(*.f64 2 (pow.f64 y 2))","(*.f64 y (+.f64 y y))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 x x (*.f64 y (+.f64 y y)))","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))","(*.f64 3 (*.f64 y y))","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2)))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2)))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2)))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2)))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2)))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2)))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2)))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2)))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(+.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 y 2)) (+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2)))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))"]],"time":71.537841796875,"type":"simplify"},{"compiler":[[1674,478]],"time":14.123046875,"type":"eval"},{"alts":[["(fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))","done",0.046875],["(+.f64 (*.f64 x x) (*.f64 y (*.f64 3 y)))","done",0.12890625],["(+.f64 (pow.f64 (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) 3) (*.f64 y y))","fresh",0.6042939453688405],["(fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (fma.f64 x x (*.f64 y (+.f64 y y))))","done",0.2614250488422101],["(+.f64 (*.f64 x x) (pow.f64 (*.f64 y (sqrt.f64 3)) 2))","fresh",0.31943139652663033]],"compiler":[[13,6],[11,7],[17,10],[17,9],[12,9]],"count":[[105,5]],"kept":[{"done":[2,2],"fresh":[2,2],"new":[100,0],"picked":[1,1]}],"min-error":[0],"time":23.489013671875,"type":"prune"},{"accuracy":[0.046875],"baseline":[0.046875],"branch":[["x",0.046875,1],["y",0.046875,1],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))",0.046875,1],["(*.f64 x x)",0.046875,1],["(*.f64 x x)",0.046875,1],["(*.f64 y y)",0.046875,1]],"compiler":[[3,2],[3,2],[17,7],[5,3],[5,3],[5,3],[116,38]],"count":[[9,1]],"inputs":[["(+.f64 (*.f64 x x) (pow.f64 (*.f64 y (sqrt.f64 3)) 2))","(+.f64 (*.f64 x x) (*.f64 y (*.f64 3 y)))","(fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (fma.f64 x x (*.f64 y (+.f64 y y))))","(fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (pow.f64 y 4)) (fma.f64 x x (*.f64 y (+.f64 y y))))","(fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))","(+.f64 (*.f64 y (+.f64 y (+.f64 y y))) (*.f64 x x))","(+.f64 (pow.f64 (cbrt.f64 (fma.f64 x x (*.f64 y (+.f64 y y)))) 3) (*.f64 y y))","(+.f64 (*.f64 x x) (*.f64 y (+.f64 y (+.f64 y y))))","(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))"]],"link":["."],"name":["Linear.Quaternion:$c/ from linear-1.19.1.3, E"],"oracle":[14.68250440538227],"outputs":[["(fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))"]],"time":22.35302734375,"times":[["x",4.05419921875],["y",4.073974609375],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))",3.698974609375],["(*.f64 x x)",2.756103515625],["(*.f64 x x)",2.887939453125],["(*.f64 y y)",2.942138671875]],"type":"regimes"},{"compiler":[[13,6]],"inputs":[["(fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))","(+.f64 (*.f64 y (*.f64 3 y)) (*.f64 x x))"]],"stop":[["fuel",1]],"time":37.94287109375,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[13,6]],"remove-preprocessing":[[]],"time":8.716064453125,"type":"end"}]
[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.6731702503748238,0.09170725150033832,0.23512249812483788],[11,0.6595117235556245,0.12097552325576544,0.21951275318861008],[10,0.6009751800447702,0.17951206676661968,0.21951275318861008],[9,0.5775605626404285,0.23414617404341698,0.18829326331615448],[8,0.46829234808683395,0.34341438859701157,0.18829326331615448],[7,0.43707285821437836,0.43707285821437836,0.1258542835712433],[6,0.24975591897964478,0.6243897974491119,0.1258542835712433],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":24.8291015625,"type":"analyze"},{"outcomes":[["body",256,"invalid",6.018798828125,179],["body",256,"valid",282.956298828125,8256]],"time":296.693115234375,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(*.f64 x (-.f64 1 (*.f64 x y)))","(*.f64 y (-.f64 1 (*.f64 y x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 x (-.f64 1 (*.f64 x y)))","(*.f64 x (fma.f64 x (neg.f64 y) 1))","(*.f64 y (-.f64 1 (*.f64 y x)))","(*.f64 y (fma.f64 x (neg.f64 y) 1))"]],"symmetry":[[]],"time":58.06787109375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 x (-.f64 1 (*.f64 x y)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (-.f64 1 (*.f64 x y)))","(*.f64 x (fma.f64 x (neg.f64 y) 1))"]],"time":20.155029296875,"type":"simplify"},{"compiler":[[16,10]],"time":0.35791015625,"type":"eval"},{"alts":[["(*.f64 x (fma.f64 x (neg.f64 y) 1))","next",0.109375]],"compiler":[[9,6],[9,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.109375],"time":0.837158203125,"type":"prune"},{"compiler":[[19,9]],"locations":[["(*.f64 x (fma.f64 x (neg.f64 y) 1))",0.109375,true]],"time":4.703857421875,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 x (fma.f64 x (neg.f64 y) 1))","y","-inf",0.296875],["(*.f64 x (fma.f64 x (neg.f64 y) 1))","y","inf",0.39306640625],["(*.f64 x (fma.f64 x (neg.f64 y) 1))","y","0",0.36181640625],["(*.f64 x (fma.f64 x (neg.f64 y) 1))","x","-inf",0.63720703125],["(*.f64 x (fma.f64 x (neg.f64 y) 1))","x","inf",0.501220703125],["(*.f64 x (fma.f64 x (neg.f64 y) 1))","x","0",0.60400390625]],"time":2.905029296875,"type":"series"},{"count":[[1,44]],"inputs":[["(*.f64 x (fma.f64 x (neg.f64 y) 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 x y) x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (neg.f64 (*.f64 (*.f64 x y) x)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 (*.f64 x y) x)) -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (neg.f64 (*.f64 x y)) x x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 (*.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 x (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 (*.f64 x y) x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 (*.f64 x y) -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3) (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (fma.f64 x (neg.f64 y) 1))) (pow.f64 (fma.f64 x (neg.f64 y) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (fma.f64 x (neg.f64 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (neg.f64 y) 1)) (*.f64 (pow.f64 (fma.f64 x (neg.f64 y) 1) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (neg.f64 y) 1) 2/3) (*.f64 x (cbrt.f64 (fma.f64 x (neg.f64 y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (fma.f64 x (neg.f64 y) 1)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 x (neg.f64 y) 1) 2/3) x) (cbrt.f64 (fma.f64 x (neg.f64 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 (*.f64 x y) -1) x)) (neg.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x (neg.f64 y) 1) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (fma.f64 x (neg.f64 y) 1) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 x (neg.f64 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (neg.f64 y) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 (*.f64 x y) -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (*.f64 x y) -1) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 x y) 3))) (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (*.f64 x y) 2) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (neg.f64 (*.f64 x y)) x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 x y) -1) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 x y) 3)))) (+.f64 (neg.f64 (pow.f64 (*.f64 x y) 2)) (fma.f64 (neg.f64 y) x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 x y) 3))) (+.f64 1 (+.f64 (pow.f64 (*.f64 x y) 2) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 (*.f64 x y) -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (neg.f64 x) (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (neg.f64 x) (*.f64 x (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 (*.f64 x y) x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 x (*.f64 x y)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 x y)) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 (*.f64 x y)) x)))))"]],"rules":[["egg-rr",44]],"time":40.8720703125,"type":"rewrite"},{"count":[[68,49]],"inputs":[["x","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","x","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 y x)) x x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 y x)) x x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 y x)) x x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(neg.f64 (*.f64 y (*.f64 x x)))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 y x)) x x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 y x)) x x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 y x)) x x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(neg.f64 (*.f64 y (*.f64 x x)))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 y x)) x x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 y x)) x x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 y x)) x x)","x","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 y x)) x x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 y x)) x x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 y x)) x x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(neg.f64 (*.f64 y (*.f64 x x)))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 y x)) x x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 y x)) x x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 y x)) x x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(neg.f64 (*.f64 y (*.f64 x x)))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 y x)) x x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 y x)) x x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 y x)) x x)"]],"time":108.837890625,"type":"simplify"},{"compiler":[[530,216]],"time":5.964111328125,"type":"eval"},{"alts":[["(/.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 x y) 3))) (+.f64 1 (+.f64 (pow.f64 (*.f64 x y) 2) (*.f64 x y))))","fresh",12.8359375],["(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","fresh",6.778734399139254],["(-.f64 x (*.f64 x (*.f64 x y)))","next",0.09765625],["(pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 3)","fresh",0.7270853028217029]],"compiler":[[23,14],[11,8],[9,5],[12,8],[23,14],[11,8],[9,5],[12,8]],"count":[[50,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[49,4],"picked":[1,0]}],"min-error":[0.0390625],"time":8.989013671875,"type":"prune"},{"compiler":[[19,5]],"locations":[["(-.f64 x (*.f64 x (*.f64 x y)))",0.01171875,true],["(*.f64 x (*.f64 x y))",0.1796875,true]],"time":3.593994140625,"type":"localize"},{"count":[[2,48]],"series":[["(-.f64 x (*.f64 x (*.f64 x y)))","y","-inf",0.18896484375],["(-.f64 x (*.f64 x (*.f64 x y)))","y","inf",0.1669921875],["(-.f64 x (*.f64 x (*.f64 x y)))","y","0",0.1640625],["(-.f64 x (*.f64 x (*.f64 x y)))","x","-inf",0.18701171875],["(-.f64 x (*.f64 x (*.f64 x y)))","x","inf",0.174072265625],["(-.f64 x (*.f64 x (*.f64 x y)))","x","0",0.18896484375],["(*.f64 x (*.f64 x y))","y","-inf",0.242919921875],["(*.f64 x (*.f64 x y))","y","inf",0.31103515625],["(*.f64 x (*.f64 x y))","y","0",0.44287109375],["(*.f64 x (*.f64 x y))","x","-inf",0.157958984375],["(*.f64 x (*.f64 x y))","x","inf",0.60009765625],["(*.f64 x (*.f64 x y))","x","0",0.406005859375]],"time":3.365966796875,"type":"series"},{"count":[[2,87]],"inputs":[["(*.f64 x (*.f64 x y))","(-.f64 x (*.f64 x (*.f64 x y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 x x) y) 0) (*.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) y) (*.f64 (*.f64 (*.f64 x x) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 x x) y)) (*.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) y) (*.f64 0 (*.f64 (*.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) y)) (pow.f64 (*.f64 (*.f64 x x) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 x x) y) 2/3) (cbrt.f64 (*.f64 (*.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (*.f64 x y))) (pow.f64 (*.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (*.f64 (pow.f64 (*.f64 x y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 x y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 x x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 x y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x y) 2/3) x) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x y) 2/3) (*.f64 x (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 x x) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 x x) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (neg.f64 (*.f64 x y)) x) 0) (fma.f64 x (neg.f64 (*.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (neg.f64 (*.f64 x y)) x) (*.f64 (fma.f64 x (neg.f64 (*.f64 x y)) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (neg.f64 (*.f64 x y)) x)) (fma.f64 x (neg.f64 (*.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (neg.f64 (*.f64 x y)) x) (*.f64 0 (fma.f64 x (neg.f64 (*.f64 x y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (*.f64 (*.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 x x) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (neg.f64 (*.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 (*.f64 x x) y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x 0) (*.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 x (fma.f64 y x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (-.f64 (pow.f64 x 2/3) (*.f64 (pow.f64 x 2/3) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (+.f64 -1 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (fma.f64 y x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 x (fma.f64 y x -1)))) (pow.f64 (fma.f64 x (neg.f64 (*.f64 x y)) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (+.f64 (pow.f64 (*.f64 (*.f64 x x) y) 2/3) (*.f64 x (cbrt.f64 y)))) (-.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (neg.f64 (*.f64 x y)) x)) (pow.f64 (fma.f64 x (neg.f64 (*.f64 x y)) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (neg.f64 (*.f64 x y)) x) 2/3) (cbrt.f64 (fma.f64 x (neg.f64 (*.f64 x y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (-.f64 1 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (*.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (neg.f64 (*.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 x) (*.f64 (*.f64 x y) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (*.f64 x y)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (fma.f64 y x -1))) (neg.f64 (pow.f64 (fma.f64 x (neg.f64 (*.f64 x y)) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 x (fma.f64 y x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (fma.f64 y x -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 x) (neg.f64 (*.f64 (*.f64 x x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (neg.f64 (*.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (neg.f64 (*.f64 x y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (neg.f64 (*.f64 x y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (neg.f64 (*.f64 x y)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (neg.f64 (*.f64 x y)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (neg.f64 (*.f64 x y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 x (fma.f64 y x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 x (fma.f64 y x -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (neg.f64 (*.f64 x y)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (neg.f64 (*.f64 (*.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 (*.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 x x)) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) y)) (neg.f64 (pow.f64 (*.f64 (*.f64 x x) y) 2/3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 x y)) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 x x) y))) (pow.f64 (*.f64 (*.f64 x x) y) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) (neg.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (neg.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (*.f64 x y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 x y))) (pow.f64 (*.f64 x y) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (neg.f64 (*.f64 (*.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (*.f64 (*.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 x (neg.f64 (*.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 x (neg.f64 (*.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 x (neg.f64 (*.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (*.f64 (*.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 (*.f64 x x) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (*.f64 x x) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (*.f64 (*.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 x (neg.f64 (*.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 x (neg.f64 (*.f64 x y)) x))))))"]],"rules":[["egg-rr",57],["egg-rr",30]],"time":25.801025390625,"type":"rewrite"},{"count":[[135,93]],"inputs":[["(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","x","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","x","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","x","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 x x)) y x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 x x)) y x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 x x)) y x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(neg.f64 (*.f64 (*.f64 y x) x))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 x x)) y x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 x x)) y x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 x x)) y x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(neg.f64 (*.f64 (*.f64 y x) x))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 x x)) y x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 x x)) y x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 x x)) y x)","x","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 x x)) y x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 x x)) y x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 x x)) y x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(neg.f64 (*.f64 (*.f64 y x) x))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 x x)) y x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 x x)) y x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 x x)) y x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(neg.f64 (*.f64 (*.f64 y x) x))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 x x)) y x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 x x)) y x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 (*.f64 x x)) y x)"]],"time":185.044921875,"type":"simplify"},{"compiler":[[996,318]],"time":10.75,"type":"eval"},{"alts":[["(/.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 x y) 3))) (+.f64 1 (+.f64 (pow.f64 (*.f64 x y) 2) (*.f64 x y))))","fresh",12.8359375],["(fma.f64 (neg.f64 (*.f64 x x)) y x)","fresh",6.767015649139254],["(-.f64 x (*.f64 x (*.f64 x y)))","done",0.09765625],["(pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 3)","next",0.7270853028217029]],"compiler":[[23,14],[9,5],[9,5],[12,8],[23,14],[9,5],[12,8]],"count":[[97,4]],"kept":[{"done":[0,0],"fresh":[3,2],"new":[93,1],"picked":[1,1]}],"min-error":[0.0390625],"time":19.5771484375,"type":"prune"},{"compiler":[[37,9]],"locations":[["(cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x))",0.05078125,true],["(fma.f64 (neg.f64 (*.f64 x y)) x x)",0.09765625,true],["(pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 3)",0.6798402344426088,true]],"time":6.61376953125,"type":"localize"},{"count":[[3,32]],"series":[["(cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x))","y","-inf",0.237060546875],["(cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x))","y","inf",0.2568359375],["(cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x))","y","0",0.532958984375],["(cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x))","x","-inf",0.238037109375],["(cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x))","x","inf",0.260009765625],["(cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x))","x","0",0.22705078125],["(fma.f64 (neg.f64 (*.f64 x y)) x x)","y","-inf",0.248046875],["(fma.f64 (neg.f64 (*.f64 x y)) x x)","y","inf",0.260986328125],["(fma.f64 (neg.f64 (*.f64 x y)) x x)","y","0",0.243896484375],["(fma.f64 (neg.f64 (*.f64 x y)) x x)","x","-inf",0.260009765625],["(fma.f64 (neg.f64 (*.f64 x y)) x x)","x","inf",0.23681640625],["(fma.f64 (neg.f64 (*.f64 x y)) x x)","x","0",0.26806640625],["(pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 3)","y","-inf",0.5009765625],["(pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 3)","y","inf",0.591064453125],["(pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 3)","y","0",2.198974609375],["(pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 3)","x","-inf",0.513916015625],["(pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 3)","x","inf",0.60009765625],["(pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 3)","x","0",0.839111328125]],"time":8.74609375,"type":"series"},{"count":[[3,111]],"inputs":[["(pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 3)","(fma.f64 (neg.f64 (*.f64 x y)) x x)","(cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 x y) x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (neg.f64 (*.f64 x y)) x x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 (*.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 (*.f64 x y) x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 (*.f64 x y) x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x))) (pow.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3) 4/3) (cbrt.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3) (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 7/3) (cbrt.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3)) (pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 y (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (neg.f64 x) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (fma.f64 y (neg.f64 x) 1) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 (*.f64 x y) x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (*.f64 x y) x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 x y) x) 2)) (*.f64 (cbrt.f64 x) (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) x)))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 x y) x) 2)) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) x))) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) x))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (+.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) x)) 2) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x y) x))))) (-.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (neg.f64 (*.f64 x y)) x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x y) x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (*.f64 x y) x) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 x y)) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 x)) (pow.f64 x 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 (*.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (*.f64 x y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (*.f64 (pow.f64 (*.f64 x y) 2/3) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) x))) (cbrt.f64 (pow.f64 (*.f64 (*.f64 x y) x) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (neg.f64 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (neg.f64 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (*.f64 x y) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 (*.f64 x y) x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 (*.f64 x y) x)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (*.f64 (*.f64 x y) x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 x y) x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (neg.f64 (*.f64 x y)) x x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 (*.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 (*.f64 x y) x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 (*.f64 x y) x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x))) (pow.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3) 4/3) (cbrt.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3) (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 7/3) (cbrt.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3)) (pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 y (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (neg.f64 x) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (fma.f64 y (neg.f64 x) 1) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 (*.f64 x y) x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (*.f64 x y) x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 x y) x) 2)) (*.f64 (cbrt.f64 x) (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) x)))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 x y) x) 2)) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) x))) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) x))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (+.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) x)) 2) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x y) x))))) (-.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (neg.f64 (*.f64 x y)) x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x y) x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (*.f64 x y) x) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 x y)) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 x)) (pow.f64 x 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 (*.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (*.f64 x y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (*.f64 (pow.f64 (*.f64 x y) 2/3) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) x))) (cbrt.f64 (pow.f64 (*.f64 (*.f64 x y) x) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (neg.f64 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (neg.f64 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (*.f64 x y) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 (*.f64 x y) x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 (*.f64 x y) x)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (*.f64 (*.f64 x y) x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (-.f64 (*.f64 (*.f64 x y) x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x))) (cbrt.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)))) (cbrt.f64 (pow.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (fma.f64 y (neg.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (-.f64 (*.f64 (*.f64 x y) x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 (*.f64 x y) x) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (-.f64 (*.f64 (*.f64 x y) x) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (-.f64 (*.f64 (*.f64 x y) x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x))))))"]],"rules":[["egg-rr",21],["egg-rr",45],["egg-rr",45]],"time":51.0390625,"type":"rewrite"},{"count":[[143,86]],"inputs":[["(*.f64 (pow.f64 1 1/3) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9))) y) (*.f64 (pow.f64 1 1/3) x))","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9))) y) (+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 x 35)) 1/9)) (+.f64 (*.f64 -1/9 (pow.f64 (*.f64 1 (pow.f64 x 35)) 1/9)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)))))) (pow.f64 y 2))))","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9))) y) (+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/9) (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/3)) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 16) 1/3)))))) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 16) 1/3))) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (pow.f64 x 5))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 16) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/3)))))))))) (pow.f64 y 3)) (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 x 35)) 1/9)) (+.f64 (*.f64 -1/9 (pow.f64 (*.f64 1 (pow.f64 x 35)) 1/9)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)))))) (pow.f64 y 2)))))","x","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","x","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(pow.f64 x 1/3)","(+.f64 (pow.f64 x 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/9) y)))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 29)) 1/9) (pow.f64 y 2))) (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/9) y))))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 29)) 1/9) (pow.f64 y 2))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/9) y)) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 16) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/3)))))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 1 1/3) x)","x","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9))) y) (*.f64 (pow.f64 1 1/3) x))","(fma.f64 (neg.f64 (pow.f64 (pow.f64 x 22) 1/9)) y x)","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9))) y) (+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 x 35)) 1/9)) (+.f64 (*.f64 -1/9 (pow.f64 (*.f64 1 (pow.f64 x 35)) 1/9)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)))))) (pow.f64 y 2))))","(fma.f64 (neg.f64 (pow.f64 (pow.f64 x 22) 1/9)) y (fma.f64 (+.f64 (*.f64 (pow.f64 (pow.f64 x 35) 1/9) (+.f64 2/9 -1/9)) (*.f64 (cbrt.f64 x) (*.f64 (pow.f64 (pow.f64 x 32) 1/9) -1/9))) (*.f64 y y) x))","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9))) y) (+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/9) (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/3)) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 16) 1/3)))))) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 16) 1/3))) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (pow.f64 x 5))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 16) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/3)))))))))) (pow.f64 y 3)) (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 x 35)) 1/9)) (+.f64 (*.f64 -1/9 (pow.f64 (*.f64 1 (pow.f64 x 35)) 1/9)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)))))) (pow.f64 y 2)))))","(+.f64 (fma.f64 (neg.f64 (pow.f64 (pow.f64 x 22) 1/9)) y x) (fma.f64 (+.f64 (*.f64 -1/3 (+.f64 (*.f64 (pow.f64 (pow.f64 x 16) 1/9) (*.f64 (pow.f64 (pow.f64 x 32) 1/9) -1/9)) (*.f64 (cbrt.f64 (pow.f64 x 16)) (+.f64 2/9 -1/27)))) (fma.f64 (cbrt.f64 x) (fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 x)) (*.f64 (cbrt.f64 (pow.f64 x 16)) (+.f64 2/9 -1/27))) (*.f64 2/27 (pow.f64 x 5))) (*.f64 2/27 (cbrt.f64 (pow.f64 x 16))))) (pow.f64 y 3) (*.f64 (+.f64 (*.f64 (pow.f64 (pow.f64 x 35) 1/9) (+.f64 2/9 -1/9)) (*.f64 (cbrt.f64 x) (*.f64 (pow.f64 (pow.f64 x 32) 1/9) -1/9))) (*.f64 y y))))","x","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 y) (*.f64 x x) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 y) (*.f64 x x) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 y) (*.f64 x x) x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(*.f64 (neg.f64 y) (*.f64 x x))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 y) (*.f64 x x) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 y) (*.f64 x x) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 y) (*.f64 x x) x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(*.f64 (neg.f64 y) (*.f64 x x))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 y) (*.f64 x x) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 y) (*.f64 x x) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 y) (*.f64 x x) x)","x","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 y) (*.f64 x x) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 y) (*.f64 x x) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 y) (*.f64 x x) x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(*.f64 (neg.f64 y) (*.f64 x x))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 y) (*.f64 x x) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 y) (*.f64 x x) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 y) (*.f64 x x) x)","(*.f64 -1 (*.f64 y (pow.f64 x 2)))","(*.f64 (neg.f64 y) (*.f64 x x))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 y) (*.f64 x x) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 y) (*.f64 x x) x)","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(fma.f64 (neg.f64 y) (*.f64 x x) x)","(pow.f64 x 1/3)","(cbrt.f64 x)","(+.f64 (pow.f64 x 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/9) y)))","(fma.f64 (*.f64 -1/3 (pow.f64 (pow.f64 x 16) 1/9)) y (cbrt.f64 x))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 29)) 1/9) (pow.f64 y 2))) (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/9) y))))","(+.f64 (cbrt.f64 x) (fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x 29) 1/9) (*.f64 y y)) (*.f64 -1/3 (*.f64 (pow.f64 (pow.f64 x 16) 1/9) y))))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 29)) 1/9) (pow.f64 y 2))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/9) y)) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 16) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/3)))))))))","(+.f64 (cbrt.f64 x) (fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x 29) 1/9) (*.f64 y y)) (*.f64 -1/3 (fma.f64 y (pow.f64 (pow.f64 x 16) 1/9) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 y 3)) (*.f64 (cbrt.f64 (pow.f64 x 16)) (+.f64 2/9 -1/27)))))))"]],"time":109.8330078125,"type":"simplify"},{"compiler":[[1551,824]],"time":18.06298828125,"type":"eval"},{"alts":[["(/.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 x y) 3))) (+.f64 1 (+.f64 (pow.f64 (*.f64 x y) 2) (*.f64 x y))))","fresh",12.8359375],["(pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x))) 3) 3)","fresh",1.5738554094157773],["(fma.f64 (neg.f64 (*.f64 x x)) y x)","fresh",6.767015649139254],["(-.f64 x (*.f64 x (*.f64 x y)))","done",0.09765625],["(pow.f64 (*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x)) 3)","next",0.8963243039787367]],"compiler":[[23,14],[15,11],[9,5],[9,5],[13,10],[23,14],[15,11],[9,5],[13,10]],"count":[[90,5]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[86,2],"picked":[1,0]}],"min-error":[0.03125],"time":14.885009765625,"type":"prune"},{"compiler":[[41,21]],"locations":[["(cbrt.f64 (fma.f64 y (neg.f64 x) 1))",0.05078125,true],["(cbrt.f64 x)",0.07421875,true],["(*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x))",0.162441259768442,true],["(pow.f64 (*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x)) 3)",0.6798402344426088,true]],"time":10.451904296875,"type":"localize"},{"count":[[4,16]],"series":[["(cbrt.f64 (fma.f64 y (neg.f64 x) 1))","x","-inf",0.18505859375],["(cbrt.f64 (fma.f64 y (neg.f64 x) 1))","x","inf",0.181884765625],["(cbrt.f64 (fma.f64 y (neg.f64 x) 1))","x","0",0.31591796875],["(cbrt.f64 (fma.f64 y (neg.f64 x) 1))","y","-inf",0.200927734375],["(cbrt.f64 (fma.f64 y (neg.f64 x) 1))","y","inf",0.18408203125],["(cbrt.f64 (fma.f64 y (neg.f64 x) 1))","y","0",0.34619140625],["(cbrt.f64 x)","x","-inf",0.22802734375],["(cbrt.f64 x)","x","inf",0.198974609375],["(cbrt.f64 x)","x","0",0.19091796875],["(*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x))","x","-inf",0.5341796875],["(*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x))","x","inf",0.171142578125],["(*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x))","x","0",0.172119140625],["(*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x))","y","-inf",0.18994140625],["(*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x))","y","inf",0.1708984375],["(*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x))","y","0",0.223876953125],["(pow.f64 (*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x)) 3)","x","-inf",0.98095703125],["(pow.f64 (*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x)) 3)","x","inf",0.3779296875],["(pow.f64 (*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x)) 3)","x","0",0.346923828125],["(pow.f64 (*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x)) 3)","y","-inf",0.3701171875],["(pow.f64 (*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x)) 3)","y","inf",0.416015625],["(pow.f64 (*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x)) 3)","y","0",0.531005859375]],"time":6.7880859375,"type":"series"},{"count":[[4,117]],"inputs":[["(pow.f64 (*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x)) 3)","(*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x))","(cbrt.f64 x)","(cbrt.f64 (fma.f64 y (neg.f64 x) 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 x (neg.f64 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (neg.f64 (*.f64 y x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (fma.f64 y (neg.f64 x) 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (neg.f64 (*.f64 y x))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x))) (pow.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2/3) 4/3) (cbrt.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)) (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2/3) (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)) 7/3) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2/3)) (pow.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2/3) (cbrt.f64 x)) (cbrt.f64 (fma.f64 y (neg.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (*.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (*.f64 (pow.f64 (fma.f64 y (neg.f64 x) 1) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 y (neg.f64 x) 1) 2/3) x) (cbrt.f64 (fma.f64 y (neg.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (fma.f64 y (neg.f64 x) 1))) (pow.f64 (fma.f64 y (neg.f64 x) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (neg.f64 x) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 y (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2/3) (cbrt.f64 (fma.f64 y (neg.f64 x) 1))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2/3) (cbrt.f64 (fma.f64 y (neg.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (fma.f64 y (neg.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 y x) 3))) (/.f64 1 (+.f64 (+.f64 (pow.f64 (*.f64 y x) 2) 1) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (fma.f64 y (neg.f64 x) 1) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fma.f64 y (neg.f64 x) 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 y x) 3)))) (+.f64 (neg.f64 (pow.f64 (*.f64 y x) 2)) (fma.f64 y (neg.f64 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 y x) 3))) (+.f64 (+.f64 (pow.f64 (*.f64 y x) 2) 1) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1))) (cbrt.f64 (*.f64 (pow.f64 (fma.f64 y (neg.f64 x) 1) 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 y (neg.f64 x) 1) 2/3) x)) (cbrt.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x))) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (fma.f64 y (neg.f64 x) 1)))) (cbrt.f64 (pow.f64 (fma.f64 y (neg.f64 x) 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y (neg.f64 x) 1) 2/3)) (cbrt.f64 (*.f64 x (cbrt.f64 (fma.f64 y (neg.f64 x) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1))) (cbrt.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2/3) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)))) (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2/3) (cbrt.f64 x))) (cbrt.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 (pow.f64 x 2/3) (fma.f64 y (neg.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 x 2/3) (fma.f64 y (neg.f64 x) 1))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2/3) (cbrt.f64 (fma.f64 y (neg.f64 x) 1)))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (fma.f64 y (neg.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 2/3) (cbrt.f64 (fma.f64 y (neg.f64 x) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 y x) 3)))) (cbrt.f64 (+.f64 (+.f64 (pow.f64 (*.f64 y x) 2) 1) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 (pow.f64 x 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (cbrt.f64 (pow.f64 x 2/3)) (*.f64 0 (cbrt.f64 (cbrt.f64 x))))) (+.f64 0 (cbrt.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 x 2/3)) (+.f64 0 (*.f64 (cbrt.f64 (cbrt.f64 x)) 0))) (-.f64 (cbrt.f64 (cbrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (+.f64 (*.f64 y x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1))) (cbrt.f64 (pow.f64 (fma.f64 y (neg.f64 x) 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)))) (cbrt.f64 (pow.f64 (pow.f64 (fma.f64 y (neg.f64 x) 1) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y (neg.f64 x) 1) 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (+.f64 (*.f64 y x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 y x) -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (*.f64 y x) 3))) (/.f64 1 (cbrt.f64 (+.f64 (+.f64 (pow.f64 (*.f64 y x) 2) 1) (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (-.f64 1 (pow.f64 (*.f64 y x) 3)))) (neg.f64 (cbrt.f64 (+.f64 (+.f64 (pow.f64 (*.f64 y x) 2) 1) (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (-.f64 1 (pow.f64 (*.f64 y x) 3))) (cbrt.f64 (+.f64 (+.f64 (pow.f64 (*.f64 y x) 2) 1) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 (*.f64 y x) -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (-.f64 1 (pow.f64 (*.f64 y x) 3)))) (cbrt.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 y x) 2)) (fma.f64 y (neg.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (-.f64 1 (pow.f64 (*.f64 y x) 3))) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (*.f64 y x) 2) (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (neg.f64 x) 1) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (+.f64 (*.f64 y x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (fma.f64 y (neg.f64 x) 1))))))"]],"rules":[["egg-rr",23],["egg-rr",21],["egg-rr",34],["egg-rr",39]],"time":55.05908203125,"type":"rewrite"},{"count":[[133,140]],"inputs":[["(*.f64 (pow.f64 1 1/3) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9))) y) (*.f64 (pow.f64 1 1/3) x))","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9))) y) (+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 x 35)) 1/9)) (+.f64 (*.f64 -1/9 (pow.f64 (*.f64 1 (pow.f64 x 35)) 1/9)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)))))) (pow.f64 y 2))))","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9))) y) (+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/9) (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/3)) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 16) 1/3)))))) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 16) 1/3))) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (pow.f64 x 5))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 16) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/3)))))))))) (pow.f64 y 3)) (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 x 35)) 1/9)) (+.f64 (*.f64 -1/9 (pow.f64 (*.f64 1 (pow.f64 x 35)) 1/9)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)))))) (pow.f64 y 2)))))","(pow.f64 x 1/3)","(+.f64 (pow.f64 x 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/9) y)))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 29)) 1/9) (pow.f64 y 2))) (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/9) y))))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 29)) 1/9) (pow.f64 y 2))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/9) y)) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 16) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/3)))))))))","1","(+.f64 1 (*.f64 -1/3 (*.f64 y x)))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) (+.f64 1 (*.f64 -1/3 (*.f64 y x))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) (+.f64 1 (+.f64 (*.f64 -1/3 (*.f64 y x)) (*.f64 -1/3 (*.f64 (+.f64 (*.f64 2/9 (pow.f64 x 3)) (*.f64 -1/27 (pow.f64 x 3))) (pow.f64 y 3))))))","1","(+.f64 1 (*.f64 -1/3 (*.f64 y x)))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) (+.f64 1 (*.f64 -1/3 (*.f64 y x))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) (+.f64 1 (+.f64 (*.f64 -1/3 (*.f64 y x)) (*.f64 -1/3 (*.f64 (+.f64 (*.f64 -1/27 (pow.f64 y 3)) (*.f64 2/9 (pow.f64 y 3))) (pow.f64 x 3))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 1 1/3) x)","x","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9))) y) (*.f64 (pow.f64 1 1/3) x))","(fma.f64 (*.f64 (pow.f64 (pow.f64 x 22) 1/9) -1) y x)","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9))) y) (+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 x 35)) 1/9)) (+.f64 (*.f64 -1/9 (pow.f64 (*.f64 1 (pow.f64 x 35)) 1/9)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)))))) (pow.f64 y 2))))","(fma.f64 (*.f64 (pow.f64 (pow.f64 x 22) 1/9) -1) y (fma.f64 (*.f64 y y) (+.f64 (*.f64 (pow.f64 (pow.f64 x 35) 1/9) (+.f64 2/9 -1/9)) (*.f64 (cbrt.f64 x) (*.f64 (pow.f64 (pow.f64 x 32) 1/9) -1/9))) x))","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 22)) 1/9))) y) (+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/9) (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/3)) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 16) 1/3)))))) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 16) 1/3))) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (pow.f64 x 5))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 16) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/3)))))))))) (pow.f64 y 3)) (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 x 35)) 1/9)) (+.f64 (*.f64 -1/9 (pow.f64 (*.f64 1 (pow.f64 x 35)) 1/9)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 32)) 1/9)))))) (pow.f64 y 2)))))","(+.f64 (fma.f64 (*.f64 (pow.f64 (pow.f64 x 22) 1/9) -1) y x) (fma.f64 (+.f64 (*.f64 -1/3 (+.f64 (*.f64 (pow.f64 (pow.f64 x 16) 1/9) (*.f64 (pow.f64 (pow.f64 x 32) 1/9) -1/9)) (*.f64 (cbrt.f64 (pow.f64 x 16)) 5/27))) (fma.f64 (fma.f64 (*.f64 -2/3 (cbrt.f64 (/.f64 1 x))) (*.f64 (cbrt.f64 (pow.f64 x 16)) 5/27) (*.f64 2/27 (pow.f64 x 5))) (cbrt.f64 x) (*.f64 2/27 (cbrt.f64 (pow.f64 x 16))))) (pow.f64 y 3) (*.f64 (+.f64 (*.f64 (pow.f64 (pow.f64 x 35) 1/9) (+.f64 2/9 -1/9)) (*.f64 (cbrt.f64 x) (*.f64 (pow.f64 (pow.f64 x 32) 1/9) -1/9))) (*.f64 y y))))","(pow.f64 x 1/3)","(cbrt.f64 x)","(+.f64 (pow.f64 x 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/9) y)))","(fma.f64 (*.f64 -1/3 (pow.f64 (pow.f64 x 16) 1/9)) y (cbrt.f64 x))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 29)) 1/9) (pow.f64 y 2))) (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/9) y))))","(+.f64 (cbrt.f64 x) (fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x 29) 1/9) (*.f64 y y)) (*.f64 -1/3 (*.f64 (pow.f64 (pow.f64 x 16) 1/9) y))))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 29)) 1/9) (pow.f64 y 2))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/9) y)) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 16) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 16)) 1/3)))))))))","(+.f64 (cbrt.f64 x) (fma.f64 -1/3 (fma.f64 (pow.f64 (pow.f64 x 16) 1/9) y (*.f64 (*.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 y 3)) (*.f64 (cbrt.f64 (pow.f64 x 16)) 5/27))) (*.f64 (*.f64 -1/9 (pow.f64 (pow.f64 x 29) 1/9)) (*.f64 y y))))","1","(+.f64 1 (*.f64 -1/3 (*.f64 y x)))","(fma.f64 (*.f64 y x) -1/3 1)","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) (+.f64 1 (*.f64 -1/3 (*.f64 y x))))","(fma.f64 (pow.f64 (*.f64 y x) 2) -1/9 (fma.f64 (*.f64 y x) -1/3 1))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) (+.f64 1 (+.f64 (*.f64 -1/3 (*.f64 y x)) (*.f64 -1/3 (*.f64 (+.f64 (*.f64 2/9 (pow.f64 x 3)) (*.f64 -1/27 (pow.f64 x 3))) (pow.f64 y 3))))))","(fma.f64 -1/9 (pow.f64 (*.f64 y x) 2) (fma.f64 -1/3 (fma.f64 x y (pow.f64 (*.f64 y (*.f64 x (cbrt.f64 5/27))) 3)) 1))","1","(+.f64 1 (*.f64 -1/3 (*.f64 y x)))","(fma.f64 (*.f64 y x) -1/3 1)","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) (+.f64 1 (*.f64 -1/3 (*.f64 y x))))","(fma.f64 (pow.f64 (*.f64 y x) 2) -1/9 (fma.f64 (*.f64 y x) -1/3 1))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) (+.f64 1 (+.f64 (*.f64 -1/3 (*.f64 y x)) (*.f64 -1/3 (*.f64 (+.f64 (*.f64 -1/27 (pow.f64 y 3)) (*.f64 2/9 (pow.f64 y 3))) (pow.f64 x 3))))))","(fma.f64 (pow.f64 (*.f64 y x) 2) -1/9 (fma.f64 -1/3 (fma.f64 x y (pow.f64 (*.f64 x (*.f64 y (cbrt.f64 5/27))) 3)) 1))"]],"time":69.811767578125,"type":"simplify"},{"compiler":[[2638,1749]],"time":34.904052734375,"type":"eval"},{"alts":[["(pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x))) 3) 3)","fresh",1.5707016792514898],["(/.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 x y) 3))) (+.f64 1 (+.f64 (pow.f64 (*.f64 x y) 2) (*.f64 x y))))","fresh",12.8359375],["(fma.f64 (neg.f64 (*.f64 x x)) y x)","fresh",6.767015649139254],["(-.f64 x (*.f64 x (*.f64 x y)))","done",0.09765625],["(pow.f64 (*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x)) 3)","done",0.8963243039787367]],"compiler":[[15,12],[23,14],[9,5],[9,5],[13,10]],"count":[[145,5]],"kept":[{"done":[1,1],"fresh":[3,2],"new":[140,1],"picked":[1,1]}],"min-error":[0.03125],"time":22.614013671875,"type":"prune"},{"accuracy":[0.09765625],"baseline":[0.09765625],"branch":[["x",0.09765625,1],["y",0.09765625,1],["(*.f64 x (-.f64 1 (*.f64 x y)))",0.09765625,1]],"compiler":[[3,2],[3,2],[9,6],[107,59]],"count":[[10,1]],"inputs":[["(pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fma.f64 y (neg.f64 x) 1) x))) 3) 3)","(pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x))) 3) 3)","(pow.f64 (*.f64 (cbrt.f64 (fma.f64 y (neg.f64 x) 1)) (cbrt.f64 x)) 3)","(fma.f64 (neg.f64 (*.f64 x x)) y x)","(/.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 x y) 3))) (+.f64 1 (+.f64 (pow.f64 (*.f64 x y) 2) (*.f64 x y))))","(+.f64 (*.f64 -1 (*.f64 y (pow.f64 x 2))) x)","(-.f64 x (*.f64 x (*.f64 x y)))","(pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 x y)) x x)) 3)","(*.f64 x (fma.f64 x (neg.f64 y) 1))","(*.f64 x (-.f64 1 (*.f64 x y)))"]],"link":["."],"name":["Numeric.SpecFunctions:log1p from math-functions-0.1.5.2, A"],"oracle":[19.35658846130089],"outputs":[["(-.f64 x (*.f64 x (*.f64 x y)))"]],"time":16.274169921875,"times":[["x",5.546142578125],["y",4.16796875],["(*.f64 x (-.f64 1 (*.f64 x y)))",4.43798828125]],"type":"regimes"},{"compiler":[[9,5]],"inputs":[["(-.f64 x (*.f64 x (*.f64 x y)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 x (*.f64 x (*.f64 x y)))","(fma.f64 x (neg.f64 (*.f64 x y)) x)"]],"stop":[["fuel",1]],"time":21.014892578125,"type":"simplify"},{"time":0.015869140625,"type":"soundness"},{"compiler":[[9,5]],"remove-preprocessing":[[]],"time":7.504150390625,"type":"end"}]
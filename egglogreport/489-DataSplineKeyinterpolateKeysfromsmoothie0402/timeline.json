[{"compiler":[[11,8]],"method":["search"],"sampling":[[12,0.6656904220581055,0.0009760856628417969,0.33333349227905273],[11,0.6656904220581055,0.0019521713256835938,0.33235740661621094],[10,0.6637382507324219,0.0039043426513671875,0.33235740661621094],[9,0.6637382507324219,0.007808685302734375,0.32845306396484375],[8,0.6559295654296875,0.01561737060546875,0.32845306396484375],[7,0.6559295654296875,0.0312347412109375,0.312835693359375],[6,0.62469482421875,0.062469482421875,0.312835693359375],[5,0.62469482421875,0.12493896484375,0.2503662109375],[4,0.499755859375,0.2498779296875,0.2503662109375],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.452880859375,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.280029296875,9],["body",256,"valid",267.800048828125,8256]],"time":275.6640625,"type":"sample"},{"compiler":[[10,7]],"inputs":[["0"],["(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))","(*.f64 (*.f64 x x) (fma.f64 -2 x 3))"]],"symmetry":[[]],"time":50.97314453125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))","(*.f64 (*.f64 x x) (fma.f64 -2 x 3))"]],"time":17.583984375,"type":"simplify"},{"compiler":[[18,11]],"time":1.8330078125,"type":"eval"},{"alts":[["(*.f64 (*.f64 x x) (fma.f64 -2 x 3))","next",0.171875]],"compiler":[[9,6],[9,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.171875],"time":0.830810546875,"type":"prune"},{"compiler":[[19,11]],"locations":[["(*.f64 (*.f64 x x) (fma.f64 -2 x 3))",0.171875,true]],"time":4.529052734375,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 (*.f64 x x) (fma.f64 -2 x 3))","x","-inf",0.572021484375],["(*.f64 (*.f64 x x) (fma.f64 -2 x 3))","x","inf",0.488037109375],["(*.f64 (*.f64 x x) (fma.f64 -2 x 3))","x","0",0.501953125]],"time":1.626953125,"type":"series"},{"count":[[1,53]],"inputs":[["(*.f64 (*.f64 x x) (fma.f64 -2 x 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 x (*.f64 -2 x))) (*.f64 x (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (*.f64 -2 x)) x) (*.f64 (*.f64 x 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) (*.f64 -2 x)) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 3) (*.f64 (*.f64 x x) (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 3) x) (*.f64 (*.f64 x (*.f64 -2 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 x 3)) (*.f64 x (*.f64 x (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 0 (*.f64 x (*.f64 x (*.f64 -2 x)))) (*.f64 x (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 0 (*.f64 (*.f64 x x) 3)) (*.f64 (*.f64 x x) (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 0 (*.f64 (*.f64 x x) (*.f64 -2 x))) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 0 (*.f64 (*.f64 x (*.f64 -2 x)) x)) (*.f64 (*.f64 x 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) (*.f64 -2 x)) (+.f64 (*.f64 (*.f64 x x) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (*.f64 -2 x)) x) (+.f64 (*.f64 (*.f64 x 3) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 3) (+.f64 (*.f64 (*.f64 x x) (*.f64 -2 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 x (*.f64 -2 x))) (+.f64 (*.f64 x (*.f64 x 3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 -2 x)) -1)) (neg.f64 (/.f64 (*.f64 (*.f64 x x) 3) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (*.f64 (*.f64 x x) (*.f64 -2 x)))) (neg.f64 (neg.f64 (*.f64 (*.f64 x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) (fma.f64 -2 x 3)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 x x) (fma.f64 -2 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 (*.f64 2 x) -3) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 x (fma.f64 -2 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -2 x 3)) (pow.f64 (*.f64 x (cbrt.f64 (fma.f64 -2 x 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (pow.f64 x 4/3) (fma.f64 -2 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 x (fma.f64 -2 x 3))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 4/3) (fma.f64 -2 x 3)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (cbrt.f64 (fma.f64 -2 x 3))) 2) (cbrt.f64 (fma.f64 -2 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) (fma.f64 -2 x 3))) (pow.f64 (*.f64 (*.f64 x x) (fma.f64 -2 x 3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 x x) (fma.f64 -2 x 3)) 2/3) (cbrt.f64 (*.f64 (*.f64 x x) (fma.f64 -2 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 x 6) (fma.f64 -2 x 3))) (pow.f64 (fma.f64 -2 x 3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -2 x 3) (pow.f64 x 2/3)) (pow.f64 x 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 4/3) (*.f64 (fma.f64 -2 x 3) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 -2 x 3) 2/3) (cbrt.f64 (*.f64 (pow.f64 x 6) (fma.f64 -2 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (fma.f64 -2 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -2 x 3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 (*.f64 2 x) -3) (*.f64 x x))) (neg.f64 (pow.f64 (*.f64 (*.f64 x x) (fma.f64 -2 x 3)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 x (fma.f64 -2 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (fma.f64 -2 x 3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 (*.f64 2 x) -3) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (*.f64 2 x) -3) (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x x) (fma.f64 -2 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (fma.f64 -2 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 x x) (fma.f64 -2 x 3)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (pow.f64 (*.f64 -2 x) 3) 27) (*.f64 x x)) (/.f64 1 (+.f64 9 (*.f64 (*.f64 -2 x) (fma.f64 -2 x -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (*.f64 -2 x) 3) 27) (*.f64 x x)) (+.f64 9 (*.f64 (*.f64 -2 x) (fma.f64 -2 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) (fma.f64 -2 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 2 x) -3) (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 -2 x) 3) 27) (*.f64 x x))) (neg.f64 (+.f64 9 (*.f64 (*.f64 -2 x) (fma.f64 -2 x -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 x x) (fma.f64 -2 x 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) (fma.f64 -2 x 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) (fma.f64 -2 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 (*.f64 2 x) -3) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) (fma.f64 -2 x 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -2 x) (*.f64 x x) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (*.f64 -2 x) (*.f64 (*.f64 x x) 3))))))"]],"rules":[["egg-rr",53]],"time":36.76513671875,"type":"rewrite"},{"count":[[65,58]],"inputs":[["(*.f64 3 (pow.f64 x 2))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))"]],"time":48.98291015625,"type":"simplify"},{"compiler":[[754,485]],"time":10.037109375,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (fma.f64 -2 x 3)) (pow.f64 (*.f64 x (cbrt.f64 (fma.f64 -2 x 3))) 2))","fresh",0.5560977660632626],["(+.f64 (*.f64 (*.f64 x 3) x) (*.f64 (*.f64 x (*.f64 -2 x)) x))","fresh",0.19921875],["(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 -2 x) 3) 27) (*.f64 x x)) (+.f64 9 (*.f64 (*.f64 -2 x) (fma.f64 -2 x -3))))","fresh",7.963222509768443],["(*.f64 (*.f64 x (fma.f64 -2 x 3)) x)","fresh",0.203125],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) (fma.f64 -2 x 3))) 3)","fresh",0.5261689453688406],["(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","next",0.12109375]],"compiler":[[16,13],[14,9],[23,18],[9,6],[12,9],[12,10],[16,13],[14,9],[23,18],[9,6],[12,9],[12,10]],"count":[[59,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[58,6],"picked":[1,0]}],"min-error":[0.015625],"time":11.930908203125,"type":"prune"},{"compiler":[[32,25]],"locations":[["(pow.f64 x 2)",0.00390625,true],["(*.f64 -2 (pow.f64 x 3))",0.00390625,true],["(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))",0.0234375,true],["(*.f64 3 (pow.f64 x 2))",0.15234375,true]],"time":8.5009765625,"type":"localize"},{"count":[[4,3]],"series":[["(pow.f64 x 2)","x","-inf",0.3369140625],["(pow.f64 x 2)","x","inf",0.27685546875],["(pow.f64 x 2)","x","0",0.156005859375],["(*.f64 -2 (pow.f64 x 3))","x","-inf",0.325927734375],["(*.f64 -2 (pow.f64 x 3))","x","inf",0.2822265625],["(*.f64 -2 (pow.f64 x 3))","x","0",0.26806640625],["(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","x","-inf",0.190185546875],["(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","x","inf",0.392822265625],["(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","x","0",0.26806640625],["(*.f64 3 (pow.f64 x 2))","x","-inf",0.1630859375],["(*.f64 3 (pow.f64 x 2))","x","inf",0.351806640625],["(*.f64 3 (pow.f64 x 2))","x","0",0.341064453125]],"time":3.471923828125,"type":"series"},{"count":[[4,149]],"inputs":[["(*.f64 3 (pow.f64 x 2))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 -2 (pow.f64 x 3))","(pow.f64 x 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 (*.f64 x x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 2) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 x x)) (*.f64 (*.f64 3 (*.f64 x x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3 (*.f64 x x)) 0) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (*.f64 x x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 x x)) (*.f64 0 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 3 (*.f64 x x))) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 3)) (*.f64 x (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (*.f64 x (sqrt.f64 3))) (*.f64 -1 (*.f64 x (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (sqrt.f64 3)) -1) (*.f64 (*.f64 x (sqrt.f64 3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (sqrt.f64 3)) 1) (*.f64 (*.f64 x (sqrt.f64 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) (*.f64 (cbrt.f64 9) (pow.f64 x 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 9) (pow.f64 x 4/3)) (cbrt.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (pow.f64 x 4/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (sqrt.f64 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (pow.f64 x 2/3)) (pow.f64 x 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 3) (*.f64 (*.f64 x x) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 9) (*.f64 (*.f64 x x) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 4/3) (*.f64 3 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 9) (*.f64 x x)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 4/3) 3) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (neg.f64 (sqrt.f64 3))) (*.f64 x (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (neg.f64 (sqrt.f64 3))) (*.f64 (neg.f64 x) (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (sqrt.f64 3)) (*.f64 (neg.f64 x) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 3)) x) (*.f64 (neg.f64 (sqrt.f64 3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 3)) (neg.f64 x)) (*.f64 (neg.f64 (sqrt.f64 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 3) (neg.f64 x)) (*.f64 (sqrt.f64 3) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3 (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 27 (pow.f64 x 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 27 (pow.f64 x 6)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) (*.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 0) (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) (*.f64 0 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))) (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 x x)) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -2 (pow.f64 x 3)) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (*.f64 3 x) (*.f64 -2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (*.f64 -2 (*.f64 x x)) (*.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))) (pow.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (cbrt.f64 9) (pow.f64 x 4/3)) (-.f64 (*.f64 (cbrt.f64 4) (*.f64 x x)) (*.f64 (cbrt.f64 (*.f64 (*.f64 3 (*.f64 x x)) -2)) x))) (+.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) (*.f64 x (cbrt.f64 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (cbrt.f64 4) (*.f64 x x)) (-.f64 (*.f64 (cbrt.f64 9) (pow.f64 x 4/3)) (*.f64 (cbrt.f64 (*.f64 (*.f64 3 (*.f64 x x)) -2)) x))) (+.f64 (*.f64 x (cbrt.f64 -2)) (cbrt.f64 (*.f64 3 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 2/3) (cbrt.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (+.f64 (*.f64 -2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) (*.f64 (cbrt.f64 9) (pow.f64 x 4/3)) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 -2)) (*.f64 (cbrt.f64 4) (*.f64 x x)) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -2 (*.f64 x x)) x (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 -2 (*.f64 x x)) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 4) (*.f64 x x)) (*.f64 x (cbrt.f64 -2)) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -2 x) (*.f64 x x) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (*.f64 -2 x) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -2) (*.f64 (cbrt.f64 4) (pow.f64 x 3)) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 3) (cbrt.f64 -2)) (cbrt.f64 4) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) (cbrt.f64 9) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 x) x (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) (sqrt.f64 3)) (sqrt.f64 3) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 3) (*.f64 (*.f64 x x) (sqrt.f64 3)) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 3)) (*.f64 x (sqrt.f64 3)) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 9) (pow.f64 x 4/3)) (cbrt.f64 (*.f64 3 (*.f64 x x))) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 (pow.f64 x 2/3)) (pow.f64 x 4/3) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 x x)) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 3 x) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (*.f64 (pow.f64 x 4/3) 3) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3) -2 (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 2 (pow.f64 x 3)) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 -3 (*.f64 x x)) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 3 (*.f64 x x)) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -2 (pow.f64 x 3)) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -2 (pow.f64 x 3)) 1 (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 (*.f64 x x)) 1 (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 3 (*.f64 -2 (pow.f64 x 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -2 (pow.f64 x 3)) (*.f64 (*.f64 -2 (pow.f64 x 3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -2 (pow.f64 x 3)) 0) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -2 (pow.f64 x 3)) (*.f64 0 (*.f64 -2 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 -2 (pow.f64 x 3))) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -2) (*.f64 (cbrt.f64 4) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -2 (*.f64 x x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 -2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 4) (pow.f64 x 3)) (cbrt.f64 -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 -2)) (*.f64 (cbrt.f64 4) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 4) (*.f64 x x)) (*.f64 x (cbrt.f64 -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -2 x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 3) (cbrt.f64 -2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 4) (*.f64 (pow.f64 x 3) (cbrt.f64 -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (pow.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 3) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -2 (pow.f64 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (pow.f64 x 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -2 (pow.f64 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (pow.f64 x 3) 3) -8) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -2 (pow.f64 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 -2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 x 3) 3) -8))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 (*.f64 x x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 0) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 0 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (pow.f64 x 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 4/3) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 5) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) 1) (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 x) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 x 6))))))"]],"rules":[["egg-rr",25],["egg-rr",26],["egg-rr",53],["egg-rr",45]],"time":34.653076171875,"type":"rewrite"},{"count":[[152,150]],"inputs":[["(*.f64 3 (pow.f64 x 2))","(*.f64 -2 (pow.f64 x 3))","(*.f64 -2 (pow.f64 x 3))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 -2 (pow.f64 x 3))","(*.f64 -2 (pow.f64 x 3))"]],"time":40.608154296875,"type":"simplify"},{"compiler":[[2156,1521]],"time":29.81494140625,"type":"eval"},{"alts":[["(fma.f64 (*.f64 -2 x) (*.f64 x x) (*.f64 3 (*.f64 x x)))","fresh",0.1640625],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3) (*.f64 -2 (pow.f64 x 3)))","fresh",0.3360138672213042],["(fma.f64 x (*.f64 3 x) (*.f64 -2 (pow.f64 x 3)))","fresh",0.1484375],["(*.f64 (*.f64 x (fma.f64 -2 x 3)) x)","fresh",0.203125],["(fma.f64 (*.f64 x (sqrt.f64 3)) (*.f64 x (sqrt.f64 3)) (*.f64 -2 (pow.f64 x 3)))","fresh",0.3393327149057245],["(fma.f64 (*.f64 x x) 3 (*.f64 -2 (pow.f64 x 3)))","next",0.13671875]],"compiler":[[13,7],[15,12],[11,8],[9,6],[15,12],[11,8],[13,7],[15,12],[11,8],[9,6],[15,12],[11,8]],"count":[[156,6]],"kept":[{"done":[0,0],"fresh":[5,1],"new":[150,5],"picked":[1,0]}],"min-error":[0.01171875],"time":41.68603515625,"type":"prune"},{"compiler":[[25,16]],"locations":[["(*.f64 -2 (pow.f64 x 3))",0.00390625,false],["(fma.f64 (*.f64 x x) 3 (*.f64 -2 (pow.f64 x 3)))",0.13671875,true]],"time":6.31591796875,"type":"localize"},{"count":[[1,12]],"series":[["(fma.f64 (*.f64 x x) 3 (*.f64 -2 (pow.f64 x 3)))","x","-inf",0.183837890625],["(fma.f64 (*.f64 x x) 3 (*.f64 -2 (pow.f64 x 3)))","x","inf",0.197998046875],["(fma.f64 (*.f64 x x) 3 (*.f64 -2 (pow.f64 x 3)))","x","0",0.300048828125]],"time":0.73095703125,"type":"series"},{"count":[[1,49]],"inputs":[["(fma.f64 (*.f64 x x) 3 (*.f64 -2 (pow.f64 x 3)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 3) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -2 (pow.f64 x 3)) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (*.f64 x x) 3) (*.f64 2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -2 (pow.f64 x 3)) (*.f64 -3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 (*.f64 x x)) (+.f64 3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))) (pow.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 2/3) (cbrt.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 (*.f64 x x)) (+.f64 3 (*.f64 -2 x)))) (neg.f64 (pow.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (cbrt.f64 4) (*.f64 x x)) (-.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) (*.f64 (*.f64 x (cbrt.f64 -2)) (cbrt.f64 (*.f64 (*.f64 x x) 3))))) (+.f64 (*.f64 x (cbrt.f64 -2)) (cbrt.f64 (*.f64 (*.f64 x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) (-.f64 (*.f64 (cbrt.f64 4) (*.f64 x x)) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 3)) (*.f64 x (cbrt.f64 -2))))) (+.f64 (cbrt.f64 (*.f64 (*.f64 x x) 3)) (*.f64 x (cbrt.f64 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (*.f64 x 3) (*.f64 -2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (*.f64 x x)) (+.f64 3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (*.f64 x x)) (+.f64 3 (*.f64 -2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x x)) (+.f64 3 (*.f64 -2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (*.f64 x x)) (+.f64 3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -2 x) (*.f64 x x) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 3) (cbrt.f64 -2)) (cbrt.f64 4) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (*.f64 -2 x) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -2) (*.f64 (cbrt.f64 4) (pow.f64 x 3)) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 4) (*.f64 x x)) (*.f64 x (cbrt.f64 -2)) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 -2 (*.f64 x x)) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 -2)) (*.f64 (cbrt.f64 4) (*.f64 x x)) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -2 (*.f64 x x)) x (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (*.f64 (pow.f64 x 4/3) 3) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 3)) (*.f64 x (sqrt.f64 3)) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) (cbrt.f64 9) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) (sqrt.f64 3)) (sqrt.f64 3) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 x 3) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) 3)) (cbrt.f64 (*.f64 9 (pow.f64 x 4))) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 2 (pow.f64 x 3)) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3) -2 (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -2 (pow.f64 x 3) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -2 (pow.f64 x 3)) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -2 (pow.f64 x 3)) 1 (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) 3) 1 (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 x x) 3) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 3 (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))))))"]],"rules":[["egg-rr",49]],"time":37.123046875,"type":"rewrite"},{"count":[[61,53]],"inputs":[["(*.f64 3 (pow.f64 x 2))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))"]],"time":52.925048828125,"type":"simplify"},{"compiler":[[1039,665]],"time":14.760009765625,"type":"eval"},{"alts":[["(+.f64 (pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3) (*.f64 -2 (pow.f64 x 3)))","fresh",0.3360138672213042],["(fma.f64 x (*.f64 3 x) (*.f64 -2 (pow.f64 x 3)))","next",0.1484375],["(*.f64 (*.f64 x (fma.f64 -2 x 3)) x)","fresh",0.203125],["(fma.f64 (*.f64 x x) 3 (*.f64 -2 (pow.f64 x 3)))","done",0.13671875],["(fma.f64 (*.f64 x (sqrt.f64 3)) (*.f64 x (sqrt.f64 3)) (*.f64 -2 (pow.f64 x 3)))","fresh",0.3393327149057245],["(fma.f64 (*.f64 -2 (*.f64 x x)) x (*.f64 (*.f64 x x) 3))","fresh",0.1640625]],"compiler":[[15,12],[11,8],[9,6],[11,8],[15,12],[13,7],[15,12],[11,8],[9,6],[15,12],[13,7]],"count":[[84,6]],"kept":[{"done":[0,0],"fresh":[5,3],"new":[78,2],"picked":[1,1]}],"min-error":[0.01171875],"time":18.719970703125,"type":"prune"},{"compiler":[[25,18]],"locations":[["(*.f64 -2 (pow.f64 x 3))",0.00390625,false],["(fma.f64 x (*.f64 3 x) (*.f64 -2 (pow.f64 x 3)))",0.1484375,true]],"time":6.820068359375,"type":"localize"},{"count":[[1,12]],"series":[["(fma.f64 x (*.f64 3 x) (*.f64 -2 (pow.f64 x 3)))","x","-inf",0.31689453125],["(fma.f64 x (*.f64 3 x) (*.f64 -2 (pow.f64 x 3)))","x","inf",0.2548828125],["(fma.f64 x (*.f64 3 x) (*.f64 -2 (pow.f64 x 3)))","x","0",0.760009765625]],"time":1.3837890625,"type":"series"},{"count":[[1,47]],"inputs":[["(fma.f64 x (*.f64 3 x) (*.f64 -2 (pow.f64 x 3)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 3) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -2 (pow.f64 x 3)) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 x x) (+.f64 (*.f64 -2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 -2 x) 3)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -2 (pow.f64 x 3)) (*.f64 -3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (*.f64 x x) 3) (*.f64 2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 (*.f64 x x)) (+.f64 (*.f64 -2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (*.f64 -2 (*.f64 x x)) (*.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 -2 x) 3))) (pow.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 -2 x) 3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 -2 x) 3)) 2/3) (cbrt.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 -2 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (+.f64 (*.f64 -2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 (*.f64 x x)) (+.f64 (*.f64 -2 x) 3))) (neg.f64 (pow.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 -2 x) 3)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 9)) (-.f64 (*.f64 (*.f64 x x) (cbrt.f64 4)) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 3)) (*.f64 (cbrt.f64 -2) x)))) (+.f64 (cbrt.f64 (*.f64 (*.f64 x x) 3)) (*.f64 (cbrt.f64 -2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (*.f64 x x) (cbrt.f64 4)) (-.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 9)) (*.f64 (*.f64 (cbrt.f64 -2) x) (cbrt.f64 (*.f64 (*.f64 x x) 3))))) (+.f64 (*.f64 (cbrt.f64 -2) x) (cbrt.f64 (*.f64 (*.f64 x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (*.f64 x x)) (+.f64 (*.f64 -2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (*.f64 x x)) (+.f64 (*.f64 -2 x) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x x) (+.f64 (*.f64 -2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 -2 x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 -2 x) 3)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 -2 x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x x)) (+.f64 (*.f64 -2 x) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 -2 x) 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 -2 x) 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 -2 x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (*.f64 x x)) (+.f64 (*.f64 -2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 -2 x) 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 3 x) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) 3)) (cbrt.f64 (*.f64 (pow.f64 x 4) 9)) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 3 x)) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (*.f64 3 x))) (pow.f64 (*.f64 3 x) 2/3) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 x) x (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 -2 (*.f64 x x)) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 3) (cbrt.f64 -2)) (cbrt.f64 4) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) (cbrt.f64 4)) (*.f64 (cbrt.f64 -2) x) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -2 (*.f64 x x)) x (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (*.f64 -2 x) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -2 x) (*.f64 x x) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -2) (*.f64 (cbrt.f64 4) (pow.f64 x 3)) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 -2) x) (*.f64 (*.f64 x x) (cbrt.f64 4)) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 3 (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -2 (pow.f64 x 3) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3) -2 (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 2 (pow.f64 x 3)) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) 3) 1 (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 x x) 3) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -2 (pow.f64 x 3)) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -2 (pow.f64 x 3)) 1 (*.f64 (*.f64 x x) 3))))))"]],"rules":[["egg-rr",47]],"time":44.281982421875,"type":"rewrite"},{"count":[[59,52]],"inputs":[["(*.f64 3 (pow.f64 x 2))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))"]],"time":50.9912109375,"type":"simplify"},{"compiler":[[1024,678]],"time":14.572021484375,"type":"eval"},{"alts":[["(+.f64 (pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3) (*.f64 -2 (pow.f64 x 3)))","fresh",0.3360138672213042],["(fma.f64 (*.f64 x x) (*.f64 -2 x) (*.f64 (*.f64 x x) 3))","fresh",0.1640625],["(fma.f64 x (*.f64 3 x) (*.f64 -2 (pow.f64 x 3)))","done",0.1484375],["(*.f64 (*.f64 x (fma.f64 -2 x 3)) x)","fresh",0.203125],["(fma.f64 (*.f64 x x) 3 (*.f64 -2 (pow.f64 x 3)))","done",0.13671875],["(fma.f64 (*.f64 x (sqrt.f64 3)) (*.f64 x (sqrt.f64 3)) (*.f64 -2 (pow.f64 x 3)))","fresh",0.3393327149057245]],"compiler":[[15,12],[13,7],[11,8],[9,6],[11,8],[15,12]],"count":[[83,6]],"kept":[{"done":[1,1],"fresh":[4,3],"new":[77,1],"picked":[1,1]}],"min-error":[0.01171875],"time":17.719970703125,"type":"prune"},{"accuracy":[0.12109375],"baseline":[0.12109375],"branch":[["x",0.12109375,1],["(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))",0.12109375,1]],"compiler":[[2,1],[10,7],[196,128]],"count":[[16,1]],"inputs":[["(fma.f64 (*.f64 x x) (*.f64 -2 x) (*.f64 (*.f64 x x) 3))","(fma.f64 (*.f64 x (sqrt.f64 3)) (*.f64 x (sqrt.f64 3)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 (*.f64 -2 (*.f64 x x)) x (*.f64 (*.f64 x x) 3))","(fma.f64 (*.f64 -2 x) (*.f64 x x) (*.f64 3 (*.f64 x x)))","(+.f64 (pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 x (*.f64 3 x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 (*.f64 x (sqrt.f64 3)) (*.f64 x (sqrt.f64 3)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 (*.f64 x x) 3 (*.f64 -2 (pow.f64 x 3)))","(*.f64 (cbrt.f64 (fma.f64 -2 x 3)) (pow.f64 (*.f64 x (cbrt.f64 (fma.f64 -2 x 3))) 2))","(+.f64 (*.f64 (*.f64 x 3) x) (*.f64 (*.f64 x (*.f64 -2 x)) x))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 -2 x) 3) 27) (*.f64 x x)) (+.f64 9 (*.f64 (*.f64 -2 x) (fma.f64 -2 x -3))))","(*.f64 (*.f64 x (fma.f64 -2 x 3)) x)","(pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) (fma.f64 -2 x 3))) 3)","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (fma.f64 -2 x 3))","(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))"]],"link":["."],"name":["Data.Spline.Key:interpolateKeys from smoothie-0.4.0.2"],"oracle":[8.423438000505874],"outputs":[["(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))"]],"time":13.454833984375,"times":[["x",5.783935546875],["(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))",4.166015625]],"type":"regimes"},{"compiler":[[12,10]],"inputs":[["(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 -2 x)))"]],"stop":[["fuel",1]],"time":21.340087890625,"type":"simplify"},{"time":0.01904296875,"type":"soundness"},{"compiler":[[12,10]],"remove-preprocessing":[[]],"time":10.037841796875,"type":"end"}]
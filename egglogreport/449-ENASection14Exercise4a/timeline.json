[{"compiler":[[15,10]],"method":["search"],"sampling":[[12,0.4992678165435791,0.00024390220642089844,0.50048828125],[11,0.4990239143371582,0.0004878044128417969,0.50048828125],[10,0.4985361099243164,0.0009756088256835938,0.50048828125],[9,0.4975605010986328,0.0019512176513671875,0.50048828125],[8,0.4956092834472656,0.003902435302734375,0.50048828125],[7,0.49170684814453125,0.00780487060546875,0.50048828125],[6,0.4839019775390625,0.0156097412109375,0.50048828125],[5,0.468292236328125,0.031219482421875,0.50048828125],[4,0.43707275390625,0.06243896484375,0.50048828125],[3,0.3746337890625,0.1248779296875,0.50048828125],[2,0.0,0.49951171875,0.50048828125],[1,0.0,0.49951171875,0.50048828125],[0,0.0,0.49951171875,0.50048828125]],"time":1.6279296875,"type":"analyze"},{"outcomes":[["body",512,"valid",163.85498046875,1060],["body",1024,"valid",834.98583984375,2054],["body",256,"valid",58.737060546875,798],["body",2048,"valid",6186.521240234375,4344]],"time":7253.493896484375,"type":"sample"},{"compiler":[[8,5]],"inputs":[["0"],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))"]],"symmetry":[[]],"time":51.51806640625,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))"]],"time":18.034912109375,"type":"simplify"},{"compiler":[[8,5]],"time":0.2021484375,"type":"eval"},{"alts":[["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))","next",31.807563089926195]],"compiler":[[8,5],[8,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[31.807563089926195],"time":0.697021484375,"type":"prune"},{"compiler":[[17,5]],"locations":[["(tan.f64 x)",0.01171875,true],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))",0.01171875,true],["(-.f64 x (sin.f64 x))",2.5976791352422697,true]],"time":3.760009765625,"type":"localize"},{"count":[[3,36]],"series":[["(tan.f64 x)","x","-inf",0.22802734375],["(tan.f64 x)","x","inf",0.259033203125],["(tan.f64 x)","x","0",0.19189453125],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))","x","-inf",0.64111328125],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))","x","inf",0.614013671875],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))","x","0",0.39697265625],["(-.f64 x (sin.f64 x))","x","-inf",0.202880859375],["(-.f64 x (sin.f64 x))","x","inf",0.30712890625],["(-.f64 x (sin.f64 x))","x","0",0.455810546875]],"time":3.416015625,"type":"series"},{"count":[[3,151]],"inputs":[["(-.f64 x (sin.f64 x))","(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))","(tan.f64 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sin.f64 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 x (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (sin.f64 x)) (*.f64 (-.f64 x (sin.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 x (sin.f64 x)) 0) (-.f64 x (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (sin.f64 x)) (*.f64 0 (-.f64 x (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 x (sin.f64 x))) (-.f64 x (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x 0) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (neg.f64 x)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (sin.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) (cbrt.f64 (pow.f64 (-.f64 x (sin.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 x (sin.f64 x)) 2)) (cbrt.f64 (-.f64 x (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 x (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sin.f64 x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sin.f64 x) x)) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 x (sin.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (cbrt.f64 (*.f64 x (sin.f64 x))))) (-.f64 (cbrt.f64 x) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sin.f64 x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (sin.f64 x)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 x (sin.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 x (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (sin.f64 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 x (sin.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (sin.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 x (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 x (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 x (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (sin.f64 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 x (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 x (sin.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (tan.f64 x)) (neg.f64 (/.f64 (sin.f64 x) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 (sin.f64 x) (tan.f64 x))) (/.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (tan.f64 x)) (*.f64 (/.f64 1 (tan.f64 x)) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (tan.f64 x)) (neg.f64 (sin.f64 x))) (/.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) (*.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 0) (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) (*.f64 0 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))) (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (tan.f64 x)) (*.f64 (neg.f64 (/.f64 (sin.f64 x) (tan.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (tan.f64 x)) (/.f64 (sin.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 (sin.f64 x) x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (tan.f64 x)) (/.f64 (-.f64 (sin.f64 x) x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (tan.f64 x))) (/.f64 (-.f64 (sin.f64 x) x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (/.f64 (sin.f64 x) (tan.f64 x))) (/.f64 x (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x (tan.f64 x)) (pow.f64 (tan.f64 x) 2)) (/.f64 (*.f64 (tan.f64 x) (sin.f64 x)) (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) (/.f64 (cbrt.f64 (pow.f64 (-.f64 x (sin.f64 x)) 2)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (tan.f64 x) (neg.f64 1/3)) (/.f64 (-.f64 x (sin.f64 x)) (cbrt.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 (sin.f64 x) x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 2)) (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sin.f64 x) x) (/.f64 -1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (sin.f64 x)) (/.f64 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (tan.f64 x)) (-.f64 x (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x (sin.f64 x)) (cbrt.f64 (pow.f64 (tan.f64 x) 2))) (pow.f64 (tan.f64 x) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (sin.f64 x) x) (tan.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 x (sin.f64 x)) 2)) (tan.f64 x)) (cbrt.f64 (-.f64 x (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (tan.f64 x)) (-.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x (sin.f64 x)) (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (tan.f64 x) (neg.f64 (*.f64 (tan.f64 x) (sin.f64 x)))) (/.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (sin.f64 x)) (sin.f64 x)) (/.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x (sin.f64 x)) (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (tan.f64 x))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (tan.f64 x))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (cbrt.f64 (tan.f64 x))) (tan.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (sin.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (cbrt.f64 (tan.f64 x))) (cbrt.f64 (pow.f64 (tan.f64 x) 2))) (*.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (tan.f64 x))))) (*.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (cbrt.f64 (tan.f64 x))) (neg.f64 (tan.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (neg.f64 (sin.f64 x)))) (*.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) (tan.f64 x)) (*.f64 (neg.f64 (tan.f64 x)) (sin.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) (cbrt.f64 (pow.f64 (tan.f64 x) 2))) (*.f64 (neg.f64 (tan.f64 x)) (/.f64 (sin.f64 x) (cbrt.f64 (tan.f64 x))))) (*.f64 (neg.f64 (tan.f64 x)) (cbrt.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) (neg.f64 (tan.f64 x))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (cbrt.f64 (pow.f64 (tan.f64 x) 2))) (*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cbrt.f64 (tan.f64 x))))) (*.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (neg.f64 (tan.f64 x))) (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x)))) (*.f64 (tan.f64 x) (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x (tan.f64 x) (neg.f64 (*.f64 (tan.f64 x) (sin.f64 x))))) (neg.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sin.f64 x) x) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (sin.f64 x)) (cbrt.f64 (tan.f64 x))) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (tan.f64 x) (neg.f64 (*.f64 (tan.f64 x) (sin.f64 x)))) (pow.f64 (tan.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (tan.f64 x) (neg.f64 1/3)) (-.f64 x (sin.f64 x))) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))) (cbrt.f64 (pow.f64 (-.f64 x (sin.f64 x)) 2))) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 2)) (cbrt.f64 (-.f64 (sin.f64 x) x))) (cbrt.f64 (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 2)) (cbrt.f64 (-.f64 x (sin.f64 x)))) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (sin.f64 x)) (cbrt.f64 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x (tan.f64 x) (neg.f64 (*.f64 (tan.f64 x) (sin.f64 x)))) 1) (pow.f64 (tan.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x (sin.f64 x)) (cbrt.f64 (tan.f64 x))) 1) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (sin.f64 x) x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 2))) (cbrt.f64 (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 2))) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (sin.f64 x)) -1) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (sin.f64 x) x) (cbrt.f64 (tan.f64 x))) (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x (sin.f64 x)) (cbrt.f64 (tan.f64 x))) 1) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (tan.f64 x) (neg.f64 (*.f64 (tan.f64 x) (sin.f64 x)))) (tan.f64 x)) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 x (sin.f64 x)) (cbrt.f64 (tan.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 (sin.f64 x) x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 (sin.f64 x) x) (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (tan.f64 x) (neg.f64 1/3)) (/.f64 x (cbrt.f64 (pow.f64 (tan.f64 x) 2))) (neg.f64 (/.f64 (sin.f64 x) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x (tan.f64 x))) (cbrt.f64 (pow.f64 (/.f64 x (tan.f64 x)) 2)) (neg.f64 (/.f64 (sin.f64 x) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (/.f64 (cbrt.f64 (*.f64 x x)) (tan.f64 x)) (neg.f64 (/.f64 (sin.f64 x) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 (tan.f64 x)) (neg.f64 (/.f64 (sin.f64 x) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 x (tan.f64 x)) (neg.f64 (/.f64 (sin.f64 x) (tan.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 x) (*.f64 (tan.f64 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (tan.f64 x) 0) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 x) (*.f64 0 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (tan.f64 x)) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (cos.f64 x))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (tan.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (tan.f64 x))) (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 x)) (/.f64 1 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 x)) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 x)) (cbrt.f64 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (tan.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 x)))))"]],"rules":[["egg-rr",32],["egg-rr",74],["egg-rr",45]],"time":30.932861328125,"type":"rewrite"},{"count":[[187,177]],"inputs":[["(*.f64 1/6 (pow.f64 x 3))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (*.f64 -1/120 (pow.f64 x 5)))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 (*.f64 1/5040 (pow.f64 x 7)) (*.f64 -1/120 (pow.f64 x 5))))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 (*.f64 -1/362880 (pow.f64 x 9)) (+.f64 (*.f64 1/5040 (pow.f64 x 7)) (*.f64 -1/120 (pow.f64 x 5)))))","x","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(+.f64 (*.f64 -1 (sin.f64 x)) x)","x","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(*.f64 1/6 (pow.f64 x 2))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 (*.f64 -11/15120 (pow.f64 x 6)) (*.f64 -23/360 (pow.f64 x 4))))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 (*.f64 -143/604800 (pow.f64 x 8)) (+.f64 (*.f64 -11/15120 (pow.f64 x 6)) (*.f64 -23/360 (pow.f64 x 4)))))","(/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","x","(+.f64 (*.f64 1/3 (pow.f64 x 3)) x)","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/6 (pow.f64 x 3))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (*.f64 -1/120 (pow.f64 x 5)))","(fma.f64 1/6 (pow.f64 x 3) (*.f64 -1/120 (pow.f64 x 5)))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 (*.f64 1/5040 (pow.f64 x 7)) (*.f64 -1/120 (pow.f64 x 5))))","(fma.f64 (pow.f64 x 3) 1/6 (fma.f64 1/5040 (pow.f64 x 7) (*.f64 -1/120 (pow.f64 x 5))))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 (*.f64 -1/362880 (pow.f64 x 9)) (+.f64 (*.f64 1/5040 (pow.f64 x 7)) (*.f64 -1/120 (pow.f64 x 5)))))","(fma.f64 (pow.f64 x 3) 1/6 (fma.f64 (pow.f64 x 9) -1/362880 (fma.f64 1/5040 (pow.f64 x 7) (*.f64 -1/120 (pow.f64 x 5)))))","x","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(-.f64 x (sin.f64 x))","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(-.f64 x (sin.f64 x))","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(-.f64 x (sin.f64 x))","x","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(-.f64 x (sin.f64 x))","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(-.f64 x (sin.f64 x))","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(-.f64 x (sin.f64 x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -23/360 (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 (*.f64 -11/15120 (pow.f64 x 6)) (*.f64 -23/360 (pow.f64 x 4))))","(fma.f64 1/6 (*.f64 x x) (fma.f64 -11/15120 (pow.f64 x 6) (*.f64 -23/360 (pow.f64 x 4))))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 (*.f64 -143/604800 (pow.f64 x 8)) (+.f64 (*.f64 -11/15120 (pow.f64 x 6)) (*.f64 -23/360 (pow.f64 x 4)))))","(fma.f64 1/6 (*.f64 x x) (fma.f64 (pow.f64 x 8) -143/604800 (fma.f64 -11/15120 (pow.f64 x 6) (*.f64 -23/360 (pow.f64 x 4)))))","(/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(-.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (cos.f64 x))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(-.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (cos.f64 x))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(-.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (cos.f64 x))","(/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(-.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (cos.f64 x))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(-.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (cos.f64 x))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(-.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (cos.f64 x))","x","(+.f64 (*.f64 1/3 (pow.f64 x 3)) x)","(fma.f64 1/3 (pow.f64 x 3) x)","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(fma.f64 (pow.f64 x 3) 1/3 (fma.f64 2/15 (pow.f64 x 5) x))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(fma.f64 17/315 (pow.f64 x 7) (fma.f64 (pow.f64 x 3) 1/3 (fma.f64 2/15 (pow.f64 x 5) x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)"]],"time":109.738037109375,"type":"simplify"},{"compiler":[[2371,885]],"time":22.989013671875,"type":"eval"},{"alts":[["(/.f64 (fma.f64 1/6 (pow.f64 x 3) (*.f64 -1/120 (pow.f64 x 5))) (tan.f64 x))","fresh",9.56733911458777],["(fma.f64 (pow.f64 x 4) -23/360 (*.f64 1/6 (*.f64 x x)))","next",0.36557802903992576],["(pow.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 3) 1/3)","fresh",31.80527808022206]],"compiler":[[14,11],[11,8],[12,9],[14,11],[11,8],[12,9]],"count":[[178,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[177,3],"picked":[1,0]}],"min-error":[0.17578125],"time":32.30810546875,"type":"prune"},{"compiler":[[26,15]],"locations":[["(fma.f64 (pow.f64 x 4) -23/360 (*.f64 1/6 (*.f64 x x)))",0.0078125,true],["(*.f64 1/6 (*.f64 x x))",0.23828125,true]],"time":5.786865234375,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 (pow.f64 x 4) -23/360 (*.f64 1/6 (*.f64 x x)))","x","-inf",0.448974609375],["(fma.f64 (pow.f64 x 4) -23/360 (*.f64 1/6 (*.f64 x x)))","x","inf",0.3359375],["(fma.f64 (pow.f64 x 4) -23/360 (*.f64 1/6 (*.f64 x x)))","x","0",0.302001953125],["(*.f64 1/6 (*.f64 x x))","x","-inf",0.172119140625],["(*.f64 1/6 (*.f64 x x))","x","inf",0.705810546875],["(*.f64 1/6 (*.f64 x x))","x","0",0.423095703125]],"time":2.491943359375,"type":"series"},{"count":[[2,95]],"inputs":[["(*.f64 1/6 (*.f64 x x))","(fma.f64 (pow.f64 x 4) -23/360 (*.f64 1/6 (*.f64 x x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/6 x) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 1/6 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -1/6 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 1/6) x) (*.f64 (sqrt.f64 1/6) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (neg.f64 (sqrt.f64 1/6))) (*.f64 (neg.f64 x) (neg.f64 (sqrt.f64 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 1/6) (neg.f64 x)) (*.f64 (sqrt.f64 1/6) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 1/6 x) x)) (*.f64 (cbrt.f64 1/36) (pow.f64 x 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/36) (pow.f64 x 4/3)) (cbrt.f64 (*.f64 (*.f64 1/6 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 1/6 x) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/6 (pow.f64 x 2/3)) (pow.f64 x 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/6)) (cbrt.f64 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (pow.f64 x 4/3) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/36) (*.f64 (*.f64 x x) (cbrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 4/3) (*.f64 1/6 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 4/3) 1/6) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 1/6 x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 1/6)) (neg.f64 x)) (*.f64 (neg.f64 (sqrt.f64 1/6)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sqrt.f64 1/6) x) -1) (*.f64 (*.f64 (sqrt.f64 1/6) x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -1/6 (*.f64 x x))) (*.f64 (neg.f64 (pow.f64 x 4/3)) (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/6 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 1/6 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (sqrt.f64 1/6)) (sqrt.f64 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/6) (*.f64 (*.f64 x x) (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/6) (*.f64 (cbrt.f64 1/36) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/36) (*.f64 x x)) (cbrt.f64 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/6 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -1/6 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 1/6 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 1/6 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/6 (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 1/6 x) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/6 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/6 (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x x) (/.f64 1 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/216 (pow.f64 x 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 1/6 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 1/6 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 1/6) x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 1/6) (neg.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (sqrt.f64 1/6) x) -1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (neg.f64 x) (neg.f64 (sqrt.f64 1/6))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (neg.f64 (sqrt.f64 1/6)) (neg.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -1/6 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 1/216 (pow.f64 x 6)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x 4) -23/360) (*.f64 (*.f64 1/6 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/6 x) x) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (pow.f64 x 4) -23/360) (*.f64 -1/6 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (*.f64 1/6 x) x) (*.f64 23/360 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x))) (pow.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x)) 2/3) (cbrt.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x)))) (neg.f64 (pow.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (cbrt.f64 1/36) (pow.f64 x 4/3)) (-.f64 (cbrt.f64 (*.f64 (pow.f64 x 8) 529/129600)) (*.f64 (cbrt.f64 (*.f64 (*.f64 1/6 x) x)) (*.f64 (cbrt.f64 -23/360) (pow.f64 x 4/3))))) (+.f64 (cbrt.f64 (*.f64 (*.f64 1/6 x) x)) (*.f64 (cbrt.f64 -23/360) (pow.f64 x 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 (pow.f64 x 8) 529/129600)) (-.f64 (*.f64 (cbrt.f64 1/36) (pow.f64 x 4/3)) (*.f64 (*.f64 (cbrt.f64 -23/360) (pow.f64 x 4/3)) (cbrt.f64 (*.f64 (*.f64 1/6 x) x))))) (+.f64 (*.f64 (cbrt.f64 -23/360) (pow.f64 x 4/3)) (cbrt.f64 (*.f64 (*.f64 1/6 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (+.f64 1/6 (*.f64 (*.f64 x x) -23/360)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 -23/360) (pow.f64 x 4/3)) (cbrt.f64 (*.f64 (pow.f64 x 8) 529/129600)) (*.f64 (*.f64 1/6 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) -23/360) (*.f64 (*.f64 1/6 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 4) (cbrt.f64 -23/360)) (cbrt.f64 529/129600) (*.f64 (*.f64 1/6 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 4/3) (*.f64 (cbrt.f64 (pow.f64 x 8)) -23/360) (*.f64 (*.f64 1/6 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -23/360 (pow.f64 x 4) (*.f64 (*.f64 1/6 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/6)) (cbrt.f64 1/36) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/6) (*.f64 (*.f64 x x) (sqrt.f64 1/6)) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 1/6 x) x)) (*.f64 (cbrt.f64 1/36) (pow.f64 x 4/3)) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/6 (pow.f64 x 2/3)) (pow.f64 x 4/3) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/6) (*.f64 (cbrt.f64 1/36) (*.f64 x x)) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (*.f64 (pow.f64 x 4/3) 1/6) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 1/6) x) (*.f64 (sqrt.f64 1/6) x) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 1/36) (pow.f64 x 4/3)) (cbrt.f64 (*.f64 (*.f64 1/6 x) x)) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) (sqrt.f64 1/6)) (sqrt.f64 1/6) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/6 x) x (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 1/6 x) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 1/6 x) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1/6 (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/6 (*.f64 x x) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 -1/6 (*.f64 x x)) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 4) -23/360) 1 (*.f64 (*.f64 1/6 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (pow.f64 x 4) -23/360) (*.f64 (*.f64 1/6 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 1/6 x) x) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 1/6 x) x) 1 (*.f64 (pow.f64 x 4) -23/360))))))"]],"rules":[["egg-rr",50],["egg-rr",45]],"time":45.2890625,"type":"rewrite"},{"count":[[119,99]],"inputs":[["(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))"]],"time":77.62109375,"type":"simplify"},{"compiler":[[1372,1016]],"time":20.493896484375,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 x 4) -23/360 (/.f64 (*.f64 x x) (/.f64 1 1/6)))","next",0.29526552903992576],["(pow.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 3) 1/3)","fresh",31.80527808022206],["(pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x))) 3)","fresh",0.5362782244083298],["(fma.f64 (sqrt.f64 1/6) (*.f64 (*.f64 x x) (sqrt.f64 1/6)) (*.f64 (pow.f64 x 4) -23/360))","fresh",0.3327067888088043],["(fma.f64 -23/360 (pow.f64 x 4) (*.f64 (*.f64 1/6 x) x))","fresh",0.3092692888083678],["(fma.f64 (pow.f64 x 4) -23/360 (*.f64 1/6 (*.f64 x x)))","done",0.36557802903992576],["(fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 (sqrt.f64 1/6) x) (*.f64 (sqrt.f64 1/6) x)))","fresh",0.37014804857680983]],"compiler":[[13,10],[12,9],[14,11],[15,12],[11,8],[11,8],[15,12],[13,10],[12,9],[14,11],[15,12],[11,8],[15,12]],"count":[[102,7]],"kept":[{"done":[0,0],"fresh":[2,1],"new":[99,5],"picked":[1,1]}],"min-error":[0.0078125],"time":22.734130859375,"type":"prune"},{"compiler":[[34,23]],"locations":[["(fma.f64 (pow.f64 x 4) -23/360 (/.f64 (*.f64 x x) (/.f64 1 1/6)))",0.0078125,true],["(/.f64 (*.f64 x x) (/.f64 1 1/6))",0.16015625,true]],"time":7.9599609375,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 (pow.f64 x 4) -23/360 (/.f64 (*.f64 x x) (/.f64 1 1/6)))","x","-inf",0.173095703125],["(fma.f64 (pow.f64 x 4) -23/360 (/.f64 (*.f64 x x) (/.f64 1 1/6)))","x","inf",0.155029296875],["(fma.f64 (pow.f64 x 4) -23/360 (/.f64 (*.f64 x x) (/.f64 1 1/6)))","x","0",0.174072265625],["(/.f64 (*.f64 x x) (/.f64 1 1/6))","x","-inf",0.14404296875],["(/.f64 (*.f64 x x) (/.f64 1 1/6))","x","inf",0.156982421875],["(/.f64 (*.f64 x x) (/.f64 1 1/6))","x","0",0.202880859375]],"time":1.083984375,"type":"series"},{"count":[[2,135]],"inputs":[["(/.f64 (*.f64 x x) (/.f64 1 1/6))","(fma.f64 (pow.f64 x 4) -23/360 (/.f64 (*.f64 x x) (/.f64 1 1/6)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 1/6) (*.f64 (*.f64 (*.f64 x x) 1/6) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 x x) 1/6) 0) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 1/6) (*.f64 0 (*.f64 (*.f64 x x) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 x x) 1/6)) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (*.f64 x x) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 -6) (*.f64 (*.f64 x x) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (sqrt.f64 1/6)) (*.f64 (neg.f64 x) (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (neg.f64 (sqrt.f64 1/6))) (*.f64 (neg.f64 x) (neg.f64 (sqrt.f64 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (neg.f64 (sqrt.f64 1/6))) (*.f64 x (neg.f64 (sqrt.f64 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 1/6)) (*.f64 x (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 1/6)) (neg.f64 x)) (*.f64 (neg.f64 (sqrt.f64 1/6)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 1/6) (neg.f64 x)) (*.f64 (sqrt.f64 1/6) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 1/6)) x) (*.f64 (neg.f64 (sqrt.f64 1/6)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (*.f64 x (sqrt.f64 1/6))) (*.f64 -1 (*.f64 x (sqrt.f64 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (sqrt.f64 1/6)) 1) (*.f64 (*.f64 x (sqrt.f64 1/6)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (sqrt.f64 1/6)) -1) (*.f64 (*.f64 x (sqrt.f64 1/6)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/6)) (cbrt.f64 (*.f64 (pow.f64 x 4) 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 1/36)) (cbrt.f64 (*.f64 (*.f64 x x) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 1/6)) (*.f64 (cbrt.f64 (pow.f64 x 4)) (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (sqrt.f64 1/6)) (sqrt.f64 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/6)) (cbrt.f64 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 (pow.f64 x 4)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/6) (*.f64 (*.f64 x x) (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/6) (*.f64 (*.f64 x x) (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x x)) -1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/6 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (*.f64 x x) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 1/6) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 1/36)) (*.f64 x (cbrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/36)) (cbrt.f64 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 x 4)) 1/6) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/6 (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 x 4)) (sqrt.f64 1/6)) (*.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) -1/6) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/36) (*.f64 (*.f64 x x) (cbrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) (sqrt.f64 1/6)) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/6)) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x x)) -6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x x) 6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/6 (neg.f64 (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (sqrt.f64 1/6)) x) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/6)) (cbrt.f64 (pow.f64 x 4))) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 1/36)) (cbrt.f64 (*.f64 x x))) (cbrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 1/36)) (cbrt.f64 (neg.f64 (*.f64 x x)))) (cbrt.f64 -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) -1/6) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 1/6)) (cbrt.f64 (pow.f64 x 4))) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 (pow.f64 x 4)) (sqrt.f64 1/6))) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 x (sqrt.f64 1/6))) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/6)) 1) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 x x) (sqrt.f64 1/6)) 1) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 x (cbrt.f64 1/36))) (cbrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 (pow.f64 x 4) 1/36))) (cbrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 x x))) (cbrt.f64 (*.f64 (pow.f64 x 4) 1/36))) (cbrt.f64 -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/6 (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/36)) (cbrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x x)) (sqrt.f64 6)) (neg.f64 (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x x)) (cbrt.f64 6)) (neg.f64 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/6)) (cbrt.f64 (cbrt.f64 36))) (pow.f64 (cbrt.f64 (cbrt.f64 36)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x x) (neg.f64 (sqrt.f64 6))) (neg.f64 (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x x) (cbrt.f64 -6)) (neg.f64 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x x) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 x x) (sqrt.f64 1/6)) (cbrt.f64 (sqrt.f64 6))) (cbrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 x x) (sqrt.f64 1/6)) (sqrt.f64 (sqrt.f64 6))) (sqrt.f64 (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x x)) (sqrt.f64 1/6)) (neg.f64 (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x x)) (cbrt.f64 1/6)) (neg.f64 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/6) (neg.f64 (*.f64 x x))) (neg.f64 (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/6) (neg.f64 (*.f64 x x))) (*.f64 (cbrt.f64 36) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 x x) (sqrt.f64 1/6))) (neg.f64 (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/6))) (neg.f64 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/6)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 6) 1/216) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/6)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/6)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 1/6)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 x x) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (*.f64 x x) -1/6) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -1/6 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 6) 1/216))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) (*.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 0) (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) (*.f64 0 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))) (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x 4) -23/360) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 1/6) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (pow.f64 x 4) -23/360) (*.f64 (*.f64 x x) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))) (cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 2)) (cbrt.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (+.f64 (*.f64 (*.f64 x x) -23/360) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (+.f64 1/6 (*.f64 (*.f64 x x) -23/360)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 x 1/6) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/6) (*.f64 (*.f64 x x) (cbrt.f64 1/36)) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/6)) (cbrt.f64 (*.f64 (pow.f64 x 4) 1/36)) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) (sqrt.f64 1/6)) (sqrt.f64 1/6) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 (pow.f64 x 4)) 1/6) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 1/6)) (*.f64 x (sqrt.f64 1/6)) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 1/36)) (cbrt.f64 (*.f64 (*.f64 x x) 1/6)) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 1/6)) (*.f64 (cbrt.f64 (pow.f64 x 4)) (sqrt.f64 1/6)) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/6) (*.f64 (*.f64 x x) (sqrt.f64 1/6)) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (*.f64 x x) -1/6) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/6)) (cbrt.f64 1/36) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) 1/6) 1 (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 x x)) -1/6 (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1/6 (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/6 (*.f64 x x) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 x x) 1/6) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 4) -23/360) 1 (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 4) (cbrt.f64 -23/360)) (cbrt.f64 529/129600) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) -23/360)) (cbrt.f64 (*.f64 (pow.f64 x 8) 529/129600)) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 4)) (*.f64 (cbrt.f64 (pow.f64 x 8)) -23/360) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) -23/360) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (pow.f64 x 4) -23/360) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -23/360 (pow.f64 x 4) (*.f64 (*.f64 x x) 1/6))))))"]],"rules":[["egg-rr",49],["egg-rr",86]],"time":28.06298828125,"type":"rewrite"},{"count":[[159,139]],"inputs":[["(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))"]],"time":77.453857421875,"type":"simplify"},{"compiler":[[2029,1415]],"time":29.091064453125,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 x 4) -23/360 (/.f64 (*.f64 x x) (/.f64 1 1/6)))","done",0.29526552903992576],["(pow.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 3) 1/3)","fresh",31.80527808022206],["(fma.f64 (pow.f64 x 4) -23/360 (/.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 36)))","fresh",0.31089052903992576],["(fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x 1/6) x))","next",0.3092692888083678],["(fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 (sqrt.f64 1/6) x) (*.f64 (sqrt.f64 1/6) x)))","fresh",0.37014804857680983],["(fma.f64 (pow.f64 x 4) -23/360 (/.f64 (/.f64 (*.f64 (*.f64 x x) (sqrt.f64 1/6)) (cbrt.f64 (sqrt.f64 6))) (cbrt.f64 6)))","fresh",0.32327304857724626]],"compiler":[[13,10],[12,9],[15,12],[11,8],[15,12],[19,16],[12,9],[15,12],[11,8],[15,12],[19,16]],"count":[[146,6]],"kept":[{"done":[1,0],"fresh":[5,2],"new":[139,3],"picked":[1,1]}],"min-error":[0.00390625],"time":39.508056640625,"type":"prune"},{"compiler":[[26,18]],"locations":[["(fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x 1/6) x))",0.0078125,true],["(*.f64 (*.f64 x 1/6) x)",0.11328125,true],["(*.f64 x 1/6)",0.33203125,true]],"time":6.48193359375,"type":"localize"},{"count":[[3,36]],"series":[["(fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x 1/6) x))","x","-inf",0.60302734375],["(fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x 1/6) x))","x","inf",0.169921875],["(fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x 1/6) x))","x","0",0.155029296875],["(*.f64 (*.f64 x 1/6) x)","x","-inf",0.14599609375],["(*.f64 (*.f64 x 1/6) x)","x","inf",0.1650390625],["(*.f64 (*.f64 x 1/6) x)","x","0",0.14697265625],["(*.f64 x 1/6)","x","-inf",0.303955078125],["(*.f64 x 1/6)","x","inf",0.276123046875],["(*.f64 x 1/6)","x","0",0.325927734375]],"time":2.39501953125,"type":"series"},{"count":[[3,114]],"inputs":[["(*.f64 x 1/6)","(*.f64 (*.f64 x 1/6) x)","(fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x 1/6) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 1/6) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -1/6 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 1/6)) (cbrt.f64 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) 1/6) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/36) (*.f64 x (cbrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 1/6)) (pow.f64 (*.f64 x 1/6) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x 1/6) 2/3) (cbrt.f64 (*.f64 x 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/216 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 1/216 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -1/6 x)) (neg.f64 (pow.f64 (*.f64 x 1/6) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 1/6)) (sqrt.f64 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/6) (*.f64 x (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/6 x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/6) (*.f64 (cbrt.f64 1/36) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/36) x) (cbrt.f64 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -1/6 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/6 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x 1/6) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 1 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/6 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x 1/6) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x 1/6)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -1/6 x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x 1/6) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 1/6) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -1/6 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 1/6) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 1/6)) (*.f64 (pow.f64 (*.f64 x 1/6) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 x 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x 1/6) 2/3) x) (cbrt.f64 (*.f64 x 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 x 1/6)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 1/6)) (*.f64 x (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (neg.f64 (sqrt.f64 1/6))) (*.f64 x (neg.f64 (sqrt.f64 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 1/6)) x) (*.f64 (neg.f64 (sqrt.f64 1/6)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/6)) (cbrt.f64 (*.f64 (pow.f64 x 4) 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 1/36)) (cbrt.f64 (*.f64 (*.f64 x x) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (*.f64 x 1/6))) (pow.f64 (*.f64 x 1/6) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x 1/6) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 x 1/6) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x 1/6) 2/3) (*.f64 x (cbrt.f64 (*.f64 x 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -1/6 (*.f64 x x))) (neg.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 1/36))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -1/6 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/6 (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/6 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 x x) 1/6) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/6 (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x x) (/.f64 1 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/6)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 1/6)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (neg.f64 (sqrt.f64 1/6)) x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (neg.f64 (sqrt.f64 1/6))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -1/6 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x 4) -23/360) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 1/6) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (pow.f64 x 4) -23/360) (*.f64 -1/6 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (*.f64 x x) 1/6) (*.f64 23/360 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))) (pow.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 2/3) (cbrt.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)))) (neg.f64 (pow.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 1/36)) (-.f64 (cbrt.f64 (*.f64 529/129600 (pow.f64 x 8))) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/6)) (cbrt.f64 (*.f64 (pow.f64 x 4) -23/360))))) (+.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/6)) (cbrt.f64 (*.f64 (pow.f64 x 4) -23/360))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 529/129600 (pow.f64 x 8))) (-.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 1/36)) (*.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) -23/360)) (cbrt.f64 (*.f64 (*.f64 x x) 1/6))))) (+.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) -23/360)) (cbrt.f64 (*.f64 (*.f64 x x) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (+.f64 (*.f64 (*.f64 x x) -23/360) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x 1/6) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/6)) (cbrt.f64 (*.f64 (pow.f64 x 4) 1/36)) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x 1/6)) (*.f64 (pow.f64 (*.f64 x 1/6) 2/3) x) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 x 1/6)) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 1/6) x (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (*.f64 x 1/6))) (pow.f64 (*.f64 x 1/6) 2/3) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 1/36)) (cbrt.f64 (*.f64 (*.f64 x x) 1/6)) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 x 1/6) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -23/360 (pow.f64 x 4) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (*.f64 (*.f64 x x) -23/360) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 4)) (*.f64 (cbrt.f64 (pow.f64 x 8)) -23/360) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) -23/360)) (cbrt.f64 (*.f64 529/129600 (pow.f64 x 8))) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 4) (cbrt.f64 -23/360)) (cbrt.f64 529/129600) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1/6 (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/6 (*.f64 x x) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 -1/6 (*.f64 x x)) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 x x) 1/6) (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) 1/6) 1 (*.f64 (pow.f64 x 4) -23/360))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (pow.f64 x 4) -23/360) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 4) -23/360) 1 (*.f64 (*.f64 x x) 1/6))))))"]],"rules":[["egg-rr",46],["egg-rr",37],["egg-rr",31]],"time":48.322021484375,"type":"rewrite"},{"count":[[150,118]],"inputs":[["(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -23/360 (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -23/360 (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -23/360 (*.f64 1/6 (*.f64 x x)))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -23/360 (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -23/360 (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -23/360 (*.f64 1/6 (*.f64 x x)))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -23/360 (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -23/360 (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -23/360 (*.f64 1/6 (*.f64 x x)))"]],"time":107.84814453125,"type":"simplify"},{"compiler":[[1634,1162]],"time":24.02490234375,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 x 4) -23/360 (/.f64 (*.f64 x x) (/.f64 1 1/6)))","done",0.29526552903992576],["(pow.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 3) 1/3)","fresh",31.80527808022206],["(fma.f64 (pow.f64 x 4) -23/360 (/.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 36)))","fresh",0.31089052903992576],["(fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x 1/6) x))","done",0.3092692888083678],["(fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x (sqrt.f64 1/6)) (*.f64 x (sqrt.f64 1/6))))","fresh",0.37014804857680983],["(fma.f64 (pow.f64 x 4) -23/360 (/.f64 (/.f64 (*.f64 (*.f64 x x) (sqrt.f64 1/6)) (cbrt.f64 (sqrt.f64 6))) (cbrt.f64 6)))","fresh",0.32327304857724626]],"compiler":[[13,10],[12,9],[15,12],[11,8],[15,12],[19,16]],"count":[[124,6]],"kept":[{"done":[1,1],"fresh":[4,3],"new":[118,1],"picked":[1,1]}],"min-error":[0.00390625],"time":27.987060546875,"type":"prune"},{"accuracy":[0.29526552903992576],"baseline":[0.29526552903992576],"branch":[["x",0.29526552903992576,1],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))",0.29526552903992576,1],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))",0.29526552903992576,1]],"compiler":[[2,1],[8,5],[8,5],[161,114]],"count":[[13,1]],"inputs":[["(fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x (sqrt.f64 1/6)) (*.f64 x (sqrt.f64 1/6))))","(fma.f64 (pow.f64 x 4) -23/360 (/.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 36)))","(fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x 1/6) x))","(fma.f64 (pow.f64 x 4) -23/360 (/.f64 (/.f64 (*.f64 (*.f64 x x) (sqrt.f64 1/6)) (cbrt.f64 (sqrt.f64 6))) (cbrt.f64 6)))","(fma.f64 (pow.f64 x 4) -23/360 (/.f64 (*.f64 x x) (/.f64 1 1/6)))","(pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 1/6 x) x))) 3)","(fma.f64 (sqrt.f64 1/6) (*.f64 (*.f64 x x) (sqrt.f64 1/6)) (*.f64 (pow.f64 x 4) -23/360))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 (*.f64 1/6 x) x))","(fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 (sqrt.f64 1/6) x) (*.f64 (sqrt.f64 1/6) x)))","(/.f64 (fma.f64 1/6 (pow.f64 x 3) (*.f64 -1/120 (pow.f64 x 5))) (tan.f64 x))","(fma.f64 (pow.f64 x 4) -23/360 (*.f64 1/6 (*.f64 x x)))","(pow.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 3) 1/3)","(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))"]],"link":["."],"name":["ENA, Section 1.4, Exercise 4a"],"oracle":[31.93257485926377],"outputs":[["(fma.f64 (pow.f64 x 4) -23/360 (/.f64 (*.f64 x x) (/.f64 1 1/6)))"]],"time":12.89697265625,"times":[["x",4.91796875],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))",2.93798828125],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))",1.9599609375]],"type":"regimes"},{"compiler":[[13,10]],"inputs":[["(fma.f64 (pow.f64 x 4) -23/360 (/.f64 (*.f64 x x) (/.f64 1 1/6)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (pow.f64 x 4) -23/360 (/.f64 (*.f64 x x) (/.f64 1 1/6)))","(fma.f64 (pow.f64 x 4) -23/360 (*.f64 (*.f64 x x) 1/6))"]],"stop":[["fuel",1]],"time":19.583984375,"type":"simplify"},{"time":0.015869140625,"type":"soundness"},{"compiler":[[13,10]],"remove-preprocessing":[[]],"time":9.791015625,"type":"end"}]
[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.9073164244182408,0.09170725150033832,0.0009763240814208984],[11,0.8780481526628137,0.12097552325576544,0.0009763240814208984],[10,0.8195116091519594,0.17951206676661968,0.0009763240814208984],[9,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[8,0.6556092873215675,0.34341438859701157,0.0009763240814208984],[7,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":22.76318359375,"type":"analyze"},{"outcomes":[["body",256,"invalid",2.92578125,82],["body",1024,"valid",0.541015625,7],["body",512,"valid",1.73486328125,13],["body",2048,"valid",1.253662109375,12],["body",256,"valid",292.698486328125,8224]],"time":308.7119140625,"type":"sample"},{"compiler":[[7,5]],"inputs":[["0","1"],["(*.f64 500 (-.f64 x y))","(*.f64 500 (-.f64 y x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 500 (-.f64 x y))","(*.f64 500 (-.f64 y x))"]],"symmetry":[[]],"time":58.47607421875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 500 (-.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 500 (-.f64 x y))","(*.f64 -500 (-.f64 y x))"]],"time":37.387939453125,"type":"simplify"},{"compiler":[[12,8]],"time":0.301025390625,"type":"eval"},{"alts":[["(*.f64 -500 (-.f64 y x))","next",0.015625]],"compiler":[[7,5],[7,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.015625],"time":0.781005859375,"type":"prune"},{"compiler":[[13,6]],"locations":[["(*.f64 -500 (-.f64 y x))",0.01171875,true]],"time":3.9560546875,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 -500 (-.f64 y x))","x","-inf",0.23583984375],["(*.f64 -500 (-.f64 y x))","x","inf",0.298095703125],["(*.f64 -500 (-.f64 y x))","x","0",0.22509765625],["(*.f64 -500 (-.f64 y x))","y","-inf",0.307861328125],["(*.f64 -500 (-.f64 y x))","y","inf",0.363037109375],["(*.f64 -500 (-.f64 y x))","y","0",0.296875]],"time":1.802978515625,"type":"series"},{"count":[[1,53]],"inputs":[["(*.f64 -500 (-.f64 y x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -500 y) (*.f64 500 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 500 x) (*.f64 -500 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 500 x) (neg.f64 (*.f64 -500 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 -500 y) -1)) (neg.f64 (*.f64 (*.f64 500 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (*.f64 -500 y))) (neg.f64 (neg.f64 (*.f64 500 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 500 x) (neg.f64 (*.f64 (neg.f64 y) -500)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -500 (-.f64 y x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 -500 (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 500 x) (*.f64 -500 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (*.f64 (*.f64 -500 y) -1)) (*.f64 (*.f64 500 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (neg.f64 (*.f64 -500 y))) (neg.f64 (*.f64 500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 500 x) (*.f64 (neg.f64 y) -500))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -500 y) (*.f64 x -500))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -500 y) (*.f64 -500 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (*.f64 (-.f64 x y) -500)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 x y) -500))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 (-.f64 x y) -500) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (*.f64 (-.f64 x y) -500)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (*.f64 (-.f64 x y) -500)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 y x) (cbrt.f64 -500)) (cbrt.f64 250000))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -500) (*.f64 (cbrt.f64 250000) (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 250000) (*.f64 (-.f64 y x) (cbrt.f64 -500)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 250000) (-.f64 y x)) (cbrt.f64 -500))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -500 (-.f64 y x))) (pow.f64 (*.f64 -500 (-.f64 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 -500 (-.f64 y x)) 2/3) (cbrt.f64 (*.f64 -500 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -125000000 (-.f64 y x))) (pow.f64 (-.f64 y x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 y x) 2/3) (cbrt.f64 (*.f64 -125000000 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -500 (-.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y x) -500)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 y x)) (*.f64 (pow.f64 (-.f64 y x) 2/3) -500))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 y x) 2/3) -500) (cbrt.f64 (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 500 (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x y) 500)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 x y) -500)) (neg.f64 (pow.f64 (*.f64 -500 (-.f64 y x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (*.f64 -500 (-.f64 y x)) 2/3) (*.f64 0 (cbrt.f64 (*.f64 (-.f64 x y) -500))))) (cbrt.f64 (*.f64 -500 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 x y) -500))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 x y) -500) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 -500 (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -500 (-.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -500 (-.f64 y x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y x) (/.f64 1 -500))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -500 (-.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x y) -500) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 2 (*.f64 (-.f64 x y) -500))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 3 (*.f64 (-.f64 x y) -500))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -500 (-.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -500 (-.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -500 (-.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 x y) -500))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (-.f64 x y) -500) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 -500 (-.f64 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -500 y (*.f64 500 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y -500 (*.f64 500 x))))))"]],"rules":[["egg-rr",53]],"time":38.408935546875,"type":"rewrite"},{"count":[[77,55]],"inputs":[["(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))"]],"time":78.557861328125,"type":"simplify"},{"compiler":[[485,309]],"time":7.189208984375,"type":"eval"},{"alts":[["(fma.f64 y -500 (*.f64 500 x))","next",0.01171875],["(*.f64 -500 (-.f64 y x))","done",0.015625]],"compiler":[[8,6],[7,5],[8,6]],"count":[[56,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[55,1],"picked":[1,1]}],"min-error":[0],"time":9.36181640625,"type":"prune"},{"compiler":[[15,10]],"locations":[["(fma.f64 y -500 (*.f64 500 x))",0.015625,true]],"time":3.6611328125,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 y -500 (*.f64 500 x))","x","-inf",0.2529296875],["(fma.f64 y -500 (*.f64 500 x))","x","inf",0.256103515625],["(fma.f64 y -500 (*.f64 500 x))","x","0",0.26611328125],["(fma.f64 y -500 (*.f64 500 x))","y","-inf",0.323974609375],["(fma.f64 y -500 (*.f64 500 x))","y","inf",0.197021484375],["(fma.f64 y -500 (*.f64 500 x))","y","0",0.455810546875]],"time":1.825927734375,"type":"series"},{"count":[[1,45]],"inputs":[["(fma.f64 y -500 (*.f64 500 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y -500) (*.f64 500 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 500 x) (*.f64 y -500))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y -500 (*.f64 500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y -500 (*.f64 500 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 500 x) (*.f64 500 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y -500) (*.f64 -500 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (*.f64 500 y) (*.f64 -500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y -500 (*.f64 500 x))) (pow.f64 (fma.f64 y -500 (*.f64 500 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y -500 (*.f64 500 x)) 2/3) (cbrt.f64 (fma.f64 y -500 (*.f64 500 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 250000) (+.f64 (*.f64 x (cbrt.f64 500)) (*.f64 y (cbrt.f64 -500))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 500 y) (*.f64 -500 x))) (neg.f64 (pow.f64 (fma.f64 y -500 (*.f64 500 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 250000 (*.f64 y y))) (-.f64 (pow.f64 (*.f64 500 x) 2/3) (*.f64 (cbrt.f64 (*.f64 y -500)) (cbrt.f64 (*.f64 500 x))))) (+.f64 (cbrt.f64 (*.f64 y -500)) (cbrt.f64 (*.f64 500 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 500 x) 2/3) (-.f64 (cbrt.f64 (*.f64 250000 (*.f64 y y))) (*.f64 (cbrt.f64 (*.f64 500 x)) (cbrt.f64 (*.f64 y -500))))) (+.f64 (cbrt.f64 (*.f64 500 x)) (cbrt.f64 (*.f64 y -500))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 500 y) (*.f64 -500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 500 y) (*.f64 -500 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y -500 (*.f64 500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y -500 (*.f64 500 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 y -500 (*.f64 500 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y -500 (*.f64 500 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 500 y) (*.f64 -500 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y -500 (*.f64 500 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y -500 (*.f64 500 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y -500 (*.f64 500 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 500 y) (*.f64 -500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y -500 (*.f64 500 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y -500 (*.f64 500 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) -500) (*.f64 500 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -500 y (*.f64 500 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 -500)) (cbrt.f64 250000) (*.f64 500 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y -500)) (cbrt.f64 (*.f64 250000 (*.f64 y y))) (*.f64 500 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 500)) (sqrt.f64 500) (*.f64 y -500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 500 (*.f64 y -500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 500 x) 2/3) (cbrt.f64 (*.f64 500 x)) (*.f64 y -500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 500) (*.f64 (cbrt.f64 250000) x) (*.f64 y -500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) 500) (*.f64 y -500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 500 x)) (pow.f64 (*.f64 500 x) 2/3) (*.f64 y -500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 125000000 x)) (pow.f64 x 2/3) (*.f64 y -500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 500)) (cbrt.f64 250000) (*.f64 y -500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 500) (*.f64 x (sqrt.f64 500)) (*.f64 y -500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 500 x (*.f64 y -500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 -500 x) (*.f64 y -500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y -500) 1 (*.f64 500 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y -500) (*.f64 500 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 500 x) 1 (*.f64 y -500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 500 x) (*.f64 y -500))))))"]],"rules":[["egg-rr",45]],"time":36.2529296875,"type":"rewrite"},{"count":[[69,48]],"inputs":[["(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))"]],"time":77.830078125,"type":"simplify"},{"compiler":[[486,367]],"time":8.044921875,"type":"eval"},{"alts":[["(fma.f64 y -500 (*.f64 500 x))","done",0.01171875],["(*.f64 -500 (-.f64 y x))","done",0.015625]],"compiler":[[8,6],[7,5]],"count":[[50,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[48,0],"picked":[1,1]}],"min-error":[0],"time":7.401123046875,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1],["y",0.01171875,1],["(*.f64 500 (-.f64 x y))",0.01171875,1],["(-.f64 x y)",0.01171875,1]],"compiler":[[3,2],[3,2],[7,5],[5,3],[18,12]],"count":[[3,1]],"inputs":[["(fma.f64 y -500 (*.f64 500 x))","(*.f64 -500 (-.f64 y x))","(*.f64 500 (-.f64 x y))"]],"link":["."],"name":["Data.Colour.CIE:cieLABView from colour-2.3.3, B"],"oracle":[0.02734375],"outputs":[["(fma.f64 y -500 (*.f64 500 x))"]],"time":12.117919921875,"times":[["x",2.715087890625],["y",2.663818359375],["(*.f64 500 (-.f64 x y))",2.781005859375],["(-.f64 x y)",2.759033203125]],"type":"regimes"},{"compiler":[[8,6]],"inputs":[["(fma.f64 y -500 (*.f64 500 x))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 y -500 (*.f64 500 x))"]],"stop":[["done",1]],"time":34.695068359375,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":8.110107421875,"type":"end"}]
[{"compiler":[[12,9]],"method":["search"],"sampling":[[12,0.7980482098646462,0.09853651490993798,0.10341527522541583],[11,0.7687799381092191,0.13463405007496476,0.09658601181581616],[10,0.7258531395345926,0.19121937546879053,0.08292748499661684],[9,0.6712190322577953,0.2575607914477587,0.07122017629444599],[8,0.5931703075766563,0.35902413353323936,0.047805558890104294],[7,0.49951183795928955,0.46829234808683395,0.032195813953876495],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":27.154052734375,"type":"analyze"},{"outcomes":[["body",256,"invalid",9.45556640625,226],["body",1024,"valid",67.083740234375,700],["body",512,"valid",52.252685546875,784],["body",2048,"valid",0.13818359375,1],["body",256,"valid",249.126708984375,6771]],"time":388.35986328125,"type":"sample"},{"compiler":[[11,8]],"inputs":[["0","1"],["(+.f64 x (*.f64 (-.f64 1 x) (-.f64 1 y)))","(+.f64 y (*.f64 (-.f64 1 y) (-.f64 1 x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 x (*.f64 (-.f64 1 x) (-.f64 1 y)))","(fma.f64 (-.f64 1 x) (-.f64 1 y) x)","(+.f64 y (*.f64 (-.f64 1 y) (-.f64 1 x)))","(fma.f64 (-.f64 1 x) (-.f64 1 y) y)"]],"symmetry":[[]],"time":62.883056640625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 x (*.f64 (-.f64 1 x) (-.f64 1 y)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (*.f64 (-.f64 1 x) (-.f64 1 y)))","(fma.f64 (-.f64 1 y) (-.f64 1 x) x)"]],"time":20.64697265625,"type":"simplify"},{"compiler":[[19,13]],"time":0.44091796875,"type":"eval"},{"alts":[["(+.f64 x (*.f64 (-.f64 1 x) (-.f64 1 y)))","fresh",15.463400315908315],["(fma.f64 (-.f64 1 y) (-.f64 1 x) x)","next",15.455248664081521]],"compiler":[[11,8],[10,7],[11,8],[10,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[15.454278927852142],"time":1.5322265625,"type":"prune"},{"compiler":[[19,12]],"locations":[["(fma.f64 (-.f64 1 y) (-.f64 1 x) x)",3.063270248274215,true]],"time":4.950927734375,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 (-.f64 1 y) (-.f64 1 x) x)","x","-inf",0.47998046875],["(fma.f64 (-.f64 1 y) (-.f64 1 x) x)","x","inf",0.35009765625],["(fma.f64 (-.f64 1 y) (-.f64 1 x) x)","x","0",0.279052734375],["(fma.f64 (-.f64 1 y) (-.f64 1 x) x)","y","-inf",0.326904296875],["(fma.f64 (-.f64 1 y) (-.f64 1 x) x)","y","inf",0.406982421875],["(fma.f64 (-.f64 1 y) (-.f64 1 x) x)","y","0",0.487060546875]],"time":2.424072265625,"type":"series"},{"count":[[1,35]],"inputs":[["(fma.f64 (-.f64 1 y) (-.f64 1 x) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 y) (+.f64 (neg.f64 (*.f64 x (-.f64 1 y))) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x) 0) (fma.f64 (-.f64 1 y) (-.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x) (*.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (-.f64 1 y) (-.f64 1 x) x)) (fma.f64 (-.f64 1 y) (-.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x) (*.f64 0 (fma.f64 (-.f64 1 y) (-.f64 1 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (-.f64 1 y)) (neg.f64 (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 y) (-.f64 1 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (-.f64 1 y) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 (+.f64 y -1) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x)) (cbrt.f64 (pow.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x) 2)) (cbrt.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (-.f64 1 y) (-.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (-.f64 1 y) (-.f64 1 x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (*.f64 (-.f64 1 y) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (*.f64 (-.f64 1 y) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 (-.f64 1 y) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 y) (-.f64 1 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 y) (-.f64 1 x)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (-.f64 1 y) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (-.f64 1 y) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 y) (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 y)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) (-.f64 1 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 x) (-.f64 1 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (-.f64 1 y) (-.f64 1 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 1 y) (-.f64 1 x))) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 y) (-.f64 1 x)) 2)) x)))))"]],"rules":[["egg-rr",35]],"time":20.221923828125,"type":"rewrite"},{"count":[[59,47]],"inputs":[["1","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(*.f64 -1 (*.f64 y (-.f64 1 x)))","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(*.f64 -1 (*.f64 y (-.f64 1 x)))","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(-.f64 1 y)","(-.f64 (+.f64 1 (*.f64 (+.f64 1 (*.f64 -1 (-.f64 1 y))) x)) y)","(-.f64 (+.f64 1 (*.f64 (+.f64 1 (*.f64 -1 (-.f64 1 y))) x)) y)","(-.f64 (+.f64 1 (*.f64 (+.f64 1 (*.f64 -1 (-.f64 1 y))) x)) y)","(*.f64 (+.f64 1 (*.f64 -1 (-.f64 1 y))) x)","(-.f64 (+.f64 1 (*.f64 (+.f64 1 (*.f64 -1 (-.f64 1 y))) x)) y)","(-.f64 (+.f64 1 (*.f64 (+.f64 1 (*.f64 -1 (-.f64 1 y))) x)) y)","(-.f64 (+.f64 1 (*.f64 (+.f64 1 (*.f64 -1 (-.f64 1 y))) x)) y)","(*.f64 y x)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(-.f64 (fma.f64 y x 1) y)","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(-.f64 (fma.f64 y x 1) y)","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(-.f64 (fma.f64 y x 1) y)","(*.f64 -1 (*.f64 y (-.f64 1 x)))","(*.f64 y (+.f64 x -1))","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(-.f64 (fma.f64 y x 1) y)","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(-.f64 (fma.f64 y x 1) y)","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(-.f64 (fma.f64 y x 1) y)","(*.f64 -1 (*.f64 y (-.f64 1 x)))","(*.f64 y (+.f64 x -1))","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(-.f64 (fma.f64 y x 1) y)","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(-.f64 (fma.f64 y x 1) y)","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(-.f64 (fma.f64 y x 1) y)","(-.f64 1 y)","(-.f64 (+.f64 1 (*.f64 (+.f64 1 (*.f64 -1 (-.f64 1 y))) x)) y)","(-.f64 (fma.f64 (+.f64 (+.f64 1 -1) y) x 1) y)","(-.f64 (+.f64 1 (*.f64 (+.f64 1 (*.f64 -1 (-.f64 1 y))) x)) y)","(-.f64 (fma.f64 (+.f64 (+.f64 1 -1) y) x 1) y)","(-.f64 (+.f64 1 (*.f64 (+.f64 1 (*.f64 -1 (-.f64 1 y))) x)) y)","(-.f64 (fma.f64 (+.f64 (+.f64 1 -1) y) x 1) y)","(*.f64 (+.f64 1 (*.f64 -1 (-.f64 1 y))) x)","(*.f64 (+.f64 (+.f64 1 -1) y) x)","(-.f64 (+.f64 1 (*.f64 (+.f64 1 (*.f64 -1 (-.f64 1 y))) x)) y)","(-.f64 (fma.f64 (+.f64 (+.f64 1 -1) y) x 1) y)","(-.f64 (+.f64 1 (*.f64 (+.f64 1 (*.f64 -1 (-.f64 1 y))) x)) y)","(-.f64 (fma.f64 (+.f64 (+.f64 1 -1) y) x 1) y)","(-.f64 (+.f64 1 (*.f64 (+.f64 1 (*.f64 -1 (-.f64 1 y))) x)) y)","(-.f64 (fma.f64 (+.f64 (+.f64 1 -1) y) x 1) y)","(*.f64 y x)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (fma.f64 y x 1) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (fma.f64 y x 1) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (fma.f64 y x 1) y)"]],"time":93.909912109375,"type":"simplify"},{"compiler":[[530,368]],"time":8.09716796875,"type":"eval"},{"alts":[["(-.f64 (fma.f64 y x 1) y)","next",0.0078125],["(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","fresh",0.015625]],"compiler":[[8,5],[11,9],[8,5],[11,9]],"count":[[49,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[47,2],"picked":[1,0]}],"min-error":[0],"time":8.466796875,"type":"prune"},{"compiler":[[15,8]],"locations":[["(-.f64 (fma.f64 y x 1) y)",0.0078125,true]],"time":3.912109375,"type":"localize"},{"count":[[1,24]],"series":[["(-.f64 (fma.f64 y x 1) y)","x","-inf",0.240966796875],["(-.f64 (fma.f64 y x 1) y)","x","inf",0.266845703125],["(-.f64 (fma.f64 y x 1) y)","x","0",0.235107421875],["(-.f64 (fma.f64 y x 1) y)","y","-inf",0.3291015625],["(-.f64 (fma.f64 y x 1) y)","y","inf",0.22802734375],["(-.f64 (fma.f64 y x 1) y)","y","0",0.31884765625]],"time":1.694091796875,"type":"series"},{"count":[[1,84]],"inputs":[["(-.f64 (fma.f64 y x 1) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (-.f64 1/2 (*.f64 y (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y x 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 y) (fma.f64 y x 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x y (-.f64 1 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x y (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 y) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 y (-.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 y) (-.f64 -1 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (-.f64 9 (fma.f64 x y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (-.f64 y (fma.f64 y x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 y x 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 y (fma.f64 y x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (*.f64 y (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x y (-.f64 1 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 y (-.f64 x 1)) 3) 2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 y (-.f64 x 1)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 y) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y (-.f64 x 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y x) (+.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 2 (*.f64 y (-.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 1 (fma.f64 x y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 3 (fma.f64 x y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 (neg.f64 (*.f64 y x)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 2 (*.f64 y (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (-.f64 y (fma.f64 y x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (-.f64 y (fma.f64 y x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x y (-.f64 1 y))) (pow.f64 (fma.f64 x y (-.f64 1 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 y x 1) 2/3) (+.f64 (pow.f64 y 2/3) (cbrt.f64 (*.f64 (fma.f64 y x 1) y)))) (-.f64 (cbrt.f64 (fma.f64 y x 1)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x y (-.f64 1 y)) 2/3) (cbrt.f64 (fma.f64 x y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 y (fma.f64 y x 1))) (neg.f64 (pow.f64 (fma.f64 x y (-.f64 1 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 y (fma.f64 y x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y (fma.f64 y x 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x y (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x y (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x y (-.f64 1 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 y x 1) 2/3) (cbrt.f64 (*.f64 (fma.f64 y x 1) y))) (pow.f64 y 2/3))) (-.f64 (cbrt.f64 y) (cbrt.f64 (fma.f64 y x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 x y (-.f64 1 y)) 2/3)) (cbrt.f64 (-.f64 y (fma.f64 y x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 y x 1) 2/3) (cbrt.f64 (*.f64 (fma.f64 y x 1) y))) (pow.f64 y 2/3)) (-.f64 (cbrt.f64 (fma.f64 y x 1)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (fma.f64 x y (-.f64 1 y)) 2/3) (*.f64 0 (cbrt.f64 (fma.f64 x y (-.f64 1 y)))))) (+.f64 0 (cbrt.f64 (fma.f64 x y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 y x 1) 2/3) (-.f64 (pow.f64 y 2/3) (neg.f64 (cbrt.f64 (*.f64 (fma.f64 y x 1) y))))) (-.f64 (cbrt.f64 (fma.f64 y x 1)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 y 2/3) (-.f64 (pow.f64 (fma.f64 y x 1) 2/3) (neg.f64 (cbrt.f64 (*.f64 (fma.f64 y x 1) y))))) (+.f64 (cbrt.f64 (neg.f64 y)) (cbrt.f64 (fma.f64 y x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (fma.f64 x y (-.f64 1 y)) 2/3) (*.f64 0 (cbrt.f64 (-.f64 y (fma.f64 y x 1)))))) (cbrt.f64 (fma.f64 x y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 y 2/3) (+.f64 (pow.f64 (fma.f64 y x 1) 2/3) (*.f64 (cbrt.f64 (neg.f64 y)) (cbrt.f64 (-.f64 -1 (*.f64 y x)))))) (-.f64 (cbrt.f64 (neg.f64 y)) (cbrt.f64 (-.f64 -1 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (*.f64 y (-.f64 x 1)) 3)) (+.f64 1 (-.f64 (pow.f64 (*.f64 y (-.f64 1 x)) 2) (*.f64 y (-.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (*.f64 y (-.f64 1 x)) 3)) (+.f64 1 (+.f64 (pow.f64 (*.f64 y (-.f64 1 x)) 2) (*.f64 y (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (+.f64 (pow.f64 (*.f64 y (-.f64 1 x)) 2) (-.f64 y (fma.f64 y x -1)))) (*.f64 2 (+.f64 (pow.f64 (*.f64 y (-.f64 1 x)) 3) -1))) (*.f64 2 (+.f64 (pow.f64 (*.f64 y (-.f64 1 x)) 2) (-.f64 y (fma.f64 y x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (+.f64 (pow.f64 (*.f64 y (-.f64 1 x)) 2) (-.f64 y (fma.f64 y x -1)))) (*.f64 1 (+.f64 (pow.f64 (*.f64 y (-.f64 1 x)) 3) -1))) (*.f64 1 (+.f64 (pow.f64 (*.f64 y (-.f64 1 x)) 2) (-.f64 y (fma.f64 y x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (+.f64 (pow.f64 (*.f64 y (-.f64 1 x)) 2) (-.f64 y (fma.f64 y x -1)))) (*.f64 3 (+.f64 (pow.f64 (*.f64 y (-.f64 1 x)) 3) -1))) (*.f64 3 (+.f64 (pow.f64 (*.f64 y (-.f64 1 x)) 2) (-.f64 y (fma.f64 y x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 (pow.f64 (*.f64 y x) 3) 1) (*.f64 (-.f64 (pow.f64 (*.f64 y x) 2) (fma.f64 y x -1)) y)) (*.f64 (-.f64 (pow.f64 (*.f64 y x) 2) (fma.f64 y x -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 -1 (neg.f64 (pow.f64 (*.f64 y x) 3))) 1) (*.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 y x) 2)) (fma.f64 y x -1)) y)) (*.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 y x) 2)) (fma.f64 y x -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x y (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y (fma.f64 y x 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (-.f64 x 1)) 3) 1) (+.f64 (pow.f64 (*.f64 y (-.f64 1 x)) 2) (-.f64 1 (*.f64 (*.f64 y (-.f64 x 1)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 2 (-.f64 y (fma.f64 y x 1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 3 (-.f64 y (fma.f64 y x 1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 y (-.f64 1 x)) 3) -1)) (+.f64 (pow.f64 (*.f64 y (-.f64 1 x)) 2) (-.f64 y (fma.f64 y x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 y) (-.f64 (pow.f64 (*.f64 y x) 2) (fma.f64 y x -1))) (+.f64 -1 (neg.f64 (pow.f64 (*.f64 y x) 3)))) (-.f64 (pow.f64 (*.f64 y x) 2) (fma.f64 y x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x y (-.f64 1 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x y (-.f64 1 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x y (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 y (fma.f64 y x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x y (-.f64 1 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 y x 1)) (pow.f64 (fma.f64 y x 1) 2/3) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 y x 1) 2/3) (cbrt.f64 (fma.f64 y x 1)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) x) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y x)) (cbrt.f64 (pow.f64 (*.f64 y x) 2)) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 x)) (pow.f64 x 2/3) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 y)) (pow.f64 y 2/3) (fma.f64 y x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (neg.f64 (pow.f64 y 2/3)) (fma.f64 y x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (-.f64 -1 (*.f64 y x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 x y (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 x y (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 x y (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 y x 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y x) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 y) (fma.f64 y x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 y (fma.f64 y x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 y x 1) 1 (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 x y (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 x y (-.f64 1 y)))))))"]],"rules":[["egg-rr",84]],"time":42.0888671875,"type":"rewrite"},{"count":[[108,93]],"inputs":[["1","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (*.f64 y (-.f64 x 1)))","(*.f64 y (-.f64 x 1))","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (*.f64 y (-.f64 x 1)))","(*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x))))","(+.f64 1 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))))","(+.f64 1 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))))","(+.f64 1 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))))","(-.f64 1 y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(*.f64 y x)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(*.f64 y x)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 y (-.f64 x 1)))","(fma.f64 (+.f64 x -1) y 1)","(+.f64 1 (*.f64 y (-.f64 x 1)))","(fma.f64 (+.f64 x -1) y 1)","(+.f64 1 (*.f64 y (-.f64 x 1)))","(fma.f64 (+.f64 x -1) y 1)","(*.f64 y (-.f64 x 1))","(*.f64 y (+.f64 x -1))","(+.f64 1 (*.f64 y (-.f64 x 1)))","(fma.f64 (+.f64 x -1) y 1)","(+.f64 1 (*.f64 y (-.f64 x 1)))","(fma.f64 (+.f64 x -1) y 1)","(+.f64 1 (*.f64 y (-.f64 x 1)))","(fma.f64 (+.f64 x -1) y 1)","(*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x))))","(*.f64 y (+.f64 x -1))","(+.f64 1 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))))","(fma.f64 (+.f64 x -1) y 1)","(+.f64 1 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))))","(fma.f64 (+.f64 x -1) y 1)","(+.f64 1 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))))","(fma.f64 (+.f64 x -1) y 1)","(-.f64 1 y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(fma.f64 (+.f64 x -1) y 1)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(fma.f64 (+.f64 x -1) y 1)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(fma.f64 (+.f64 x -1) y 1)","(*.f64 y x)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(fma.f64 (+.f64 x -1) y 1)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(fma.f64 (+.f64 x -1) y 1)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(fma.f64 (+.f64 x -1) y 1)","(*.f64 y x)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(fma.f64 (+.f64 x -1) y 1)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(fma.f64 (+.f64 x -1) y 1)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(fma.f64 (+.f64 x -1) y 1)"]],"time":91.14501953125,"type":"simplify"},{"compiler":[[1235,797]],"time":17.91796875,"type":"eval"},{"alts":[["(-.f64 1 (-.f64 (neg.f64 (*.f64 y x)) (neg.f64 y)))","fresh",0.00390625],["(fma.f64 x y (-.f64 1 y))","next",0.00390625]],"compiler":[[11,8],[8,5],[11,8],[8,5]],"count":[[95,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[93,2],"picked":[1,0]}],"min-error":[0],"time":21.51904296875,"type":"prune"},{"compiler":[[14,8]],"locations":[["(fma.f64 x y (-.f64 1 y))",0.00390625,true]],"time":3.64599609375,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 x y (-.f64 1 y))","y","-inf",0.242919921875],["(fma.f64 x y (-.f64 1 y))","y","inf",0.462890625],["(fma.f64 x y (-.f64 1 y))","y","0",0.2060546875],["(fma.f64 x y (-.f64 1 y))","x","-inf",0.235107421875],["(fma.f64 x y (-.f64 1 y))","x","inf",0.199951171875],["(fma.f64 x y (-.f64 1 y))","x","0",0.31689453125]],"time":1.737060546875,"type":"series"},{"count":[[1,73]],"inputs":[["(fma.f64 x y (-.f64 1 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x y 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 y) (fma.f64 x y 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 y (-.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (-.f64 0 (*.f64 y (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (-.f64 1/2 (*.f64 y (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x y) (/.f64 (pow.f64 y 3) (fma.f64 y y (+.f64 1 y)))) (/.f64 -1 (-.f64 -1 (fma.f64 y y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 y (-.f64 x 1)) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (fma.f64 x y 1))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (fma.f64 x y 1) -1)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x y) (/.f64 -1 (-.f64 -1 (fma.f64 y y y)))) (/.f64 (pow.f64 y 3) (-.f64 -1 (fma.f64 y y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (-.f64 -1 (fma.f64 y y y))) (neg.f64 (-.f64 (/.f64 (pow.f64 y 3) (fma.f64 y y (+.f64 1 y))) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x y (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x y (-.f64 1 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 y) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 y (-.f64 x 1)) 3) 4)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 x y) (/.f64 -1 (-.f64 -1 (fma.f64 y y y)))) (/.f64 (pow.f64 y 3) (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x y) (+.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x y 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (-.f64 -1 (fma.f64 y y y))) (-.f64 (/.f64 (pow.f64 y 3) (fma.f64 y y (+.f64 1 y))) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y (-.f64 x 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (*.f64 y (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (-.f64 y (fma.f64 x y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (-.f64 y (fma.f64 x y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (-.f64 y (fma.f64 x y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 2 (*.f64 y (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (-.f64 -1 (fma.f64 y y y))) (+.f64 0 (-.f64 (/.f64 (pow.f64 y 3) (fma.f64 y y (+.f64 1 y))) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 (*.f64 x y) (/.f64 -1 (-.f64 -1 (fma.f64 y y y)))) 1) (/.f64 (/.f64 (pow.f64 y 3) (fma.f64 y y (+.f64 1 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 -1 (-.f64 -1 (fma.f64 y y y))) 1) (/.f64 (-.f64 (/.f64 (pow.f64 y 3) (fma.f64 y y (+.f64 1 y))) (*.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 y (-.f64 x 1)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (/.f64 (*.f64 y (-.f64 1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 y (fma.f64 x y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x y (-.f64 1 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (/.f64 1 (-.f64 -1 (fma.f64 y y y))) (-.f64 (/.f64 (pow.f64 y 3) (fma.f64 y y (+.f64 1 y))) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 y) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x y (-.f64 1 y))) (pow.f64 (fma.f64 x y (-.f64 1 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x y (-.f64 1 y)) 2/3) (cbrt.f64 (fma.f64 x y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 y (fma.f64 x y 1))) (neg.f64 (pow.f64 (fma.f64 x y (-.f64 1 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 y -1) 2/3) (-.f64 (pow.f64 (*.f64 x y) 2/3) (*.f64 (cbrt.f64 (-.f64 1 y)) (cbrt.f64 (*.f64 x y))))) (+.f64 (cbrt.f64 (-.f64 1 y)) (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x y) 2/3) (-.f64 (pow.f64 (+.f64 y -1) 2/3) (*.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (-.f64 1 y))))) (+.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x y) 2/3) (+.f64 (pow.f64 (+.f64 y -1) 2/3) (*.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (+.f64 y -1))))) (-.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 y (fma.f64 x y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y (fma.f64 x y 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x y (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x y (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x y (-.f64 1 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (*.f64 y (-.f64 x 1)) 3)) (+.f64 1 (-.f64 (*.f64 (*.f64 y (-.f64 x 1)) (*.f64 y (-.f64 x 1))) (*.f64 y (-.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (*.f64 y (-.f64 1 x)) 3)) (+.f64 1 (+.f64 (*.f64 (*.f64 y (-.f64 1 x)) (*.f64 y (-.f64 1 x))) (*.f64 y (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y (-.f64 x 1)) 3) -1) (+.f64 (*.f64 (*.f64 y (-.f64 x 1)) (*.f64 y (-.f64 x 1))) (+.f64 1 (*.f64 (*.f64 y (-.f64 x 1)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x y (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y (fma.f64 x y 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (-.f64 x 1)) 3) 1) (+.f64 (*.f64 (*.f64 y (-.f64 x 1)) (*.f64 y (-.f64 x 1))) (-.f64 1 (*.f64 (*.f64 y (-.f64 x 1)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x y (-.f64 1 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x y (-.f64 1 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x y (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 y (fma.f64 x y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (/.f64 (pow.f64 y 3) (fma.f64 y y (+.f64 1 y))) (*.f64 x y)) (/.f64 -1 (-.f64 -1 (fma.f64 y y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 -1 (*.f64 y (-.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x y (-.f64 1 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 y -1) 2/3) (cbrt.f64 (-.f64 1 y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 y)) (pow.f64 (+.f64 y -1) 2/3) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 y -1) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 y)) (pow.f64 y 2/3) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) y) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (*.f64 x y) 2/3) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 y 3)) (/.f64 -1 (-.f64 -1 (fma.f64 y y y))) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 y) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 y) 1 (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (-.f64 1 y))))))"]],"rules":[["egg-rr",73]],"time":42.596923828125,"type":"rewrite"},{"count":[[97,82]],"inputs":[["(-.f64 1 y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(*.f64 y x)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(*.f64 y x)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","1","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (*.f64 y (-.f64 x 1)))","(*.f64 y (-.f64 x 1))","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (*.f64 y (-.f64 x 1)))","(*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x))))","(+.f64 1 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))))","(+.f64 1 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))))","(+.f64 1 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))))"]],"method":["egg-herbie"],"outputs":[["(-.f64 1 y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(fma.f64 y (+.f64 x -1) 1)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(fma.f64 y (+.f64 x -1) 1)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(fma.f64 y (+.f64 x -1) 1)","(*.f64 y x)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(fma.f64 y (+.f64 x -1) 1)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(fma.f64 y (+.f64 x -1) 1)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(fma.f64 y (+.f64 x -1) 1)","(*.f64 y x)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(fma.f64 y (+.f64 x -1) 1)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(fma.f64 y (+.f64 x -1) 1)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(fma.f64 y (+.f64 x -1) 1)","1","(+.f64 1 (*.f64 y (-.f64 x 1)))","(fma.f64 y (+.f64 x -1) 1)","(+.f64 1 (*.f64 y (-.f64 x 1)))","(fma.f64 y (+.f64 x -1) 1)","(+.f64 1 (*.f64 y (-.f64 x 1)))","(fma.f64 y (+.f64 x -1) 1)","(*.f64 y (-.f64 x 1))","(*.f64 y (+.f64 x -1))","(+.f64 1 (*.f64 y (-.f64 x 1)))","(fma.f64 y (+.f64 x -1) 1)","(+.f64 1 (*.f64 y (-.f64 x 1)))","(fma.f64 y (+.f64 x -1) 1)","(+.f64 1 (*.f64 y (-.f64 x 1)))","(fma.f64 y (+.f64 x -1) 1)","(*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x))))","(*.f64 y (+.f64 x -1))","(+.f64 1 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))))","(fma.f64 y (+.f64 x -1) 1)","(+.f64 1 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))))","(fma.f64 y (+.f64 x -1) 1)","(+.f64 1 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))))","(fma.f64 y (+.f64 x -1) 1)"]],"time":88.818115234375,"type":"simplify"},{"compiler":[[1018,626]],"time":13.768798828125,"type":"eval"},{"alts":[["(-.f64 1 (-.f64 (neg.f64 (*.f64 y x)) (neg.f64 y)))","next",0.00390625],["(fma.f64 x y (-.f64 1 y))","done",0.00390625]],"compiler":[[11,8],[8,5],[11,8]],"count":[[84,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[82,0],"picked":[1,1]}],"min-error":[0],"time":16.59521484375,"type":"prune"},{"compiler":[[30,9]],"locations":[["(-.f64 (neg.f64 (*.f64 y x)) (neg.f64 y))",0.0078125,true]],"time":5.46484375,"type":"localize"},{"count":[[1,24]],"series":[["(-.f64 (neg.f64 (*.f64 y x)) (neg.f64 y))","x","-inf",0.248046875],["(-.f64 (neg.f64 (*.f64 y x)) (neg.f64 y))","x","inf",0.258056640625],["(-.f64 (neg.f64 (*.f64 y x)) (neg.f64 y))","x","0",0.169921875],["(-.f64 (neg.f64 (*.f64 y x)) (neg.f64 y))","y","-inf",0.27099609375],["(-.f64 (neg.f64 (*.f64 y x)) (neg.f64 y))","y","inf",0.503173828125],["(-.f64 (neg.f64 (*.f64 y x)) (neg.f64 y))","y","0",0.31298828125]],"time":1.85693359375,"type":"series"},{"count":[[1,69]],"inputs":[["(-.f64 (neg.f64 (*.f64 y x)) (neg.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 y x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (-.f64 1 x)) 0) (*.f64 y (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 1 x)) (*.f64 (*.f64 y (-.f64 1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y (-.f64 1 x))) (*.f64 y (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 1 x)) (*.f64 0 (*.f64 y (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 y x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 y (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 y (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 y x) 2/3) (-.f64 (pow.f64 y 2/3) (*.f64 (cbrt.f64 (neg.f64 (*.f64 y x))) (cbrt.f64 y)))) (+.f64 (cbrt.f64 (neg.f64 (*.f64 y x))) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 y 2/3) (-.f64 (pow.f64 (*.f64 y x) 2/3) (*.f64 (cbrt.f64 y) (cbrt.f64 (neg.f64 (*.f64 y x)))))) (+.f64 (cbrt.f64 y) (cbrt.f64 (neg.f64 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 y x) 2/3) (+.f64 (pow.f64 y 2/3) (cbrt.f64 (*.f64 (*.f64 y x) y)))) (-.f64 (cbrt.f64 (neg.f64 (*.f64 y x))) (cbrt.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (-.f64 1 x))) (pow.f64 (*.f64 y (-.f64 1 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (-.f64 1 x)) 2/3) (cbrt.f64 (*.f64 y (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (+.f64 (pow.f64 y 2/3) (*.f64 (pow.f64 y 2/3) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 y)) (+.f64 (neg.f64 (pow.f64 y 2/3)) (*.f64 (pow.f64 y 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (+.f64 1 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (+.f64 (*.f64 (pow.f64 y 2/3) (neg.f64 x)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 y)) (+.f64 (*.f64 (pow.f64 y 2/3) x) (neg.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (+.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (-.f64 (*.f64 (pow.f64 y 2/3) (neg.f64 x)) (neg.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (-.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 y)) (-.f64 (*.f64 (pow.f64 y 2/3) x) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (-.f64 (neg.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (-.f64 (pow.f64 y 2/3) (*.f64 (pow.f64 y 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (+.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (-.f64 (cbrt.f64 y) (*.f64 x (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 x) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (+.f64 -1 x))) (neg.f64 (pow.f64 (*.f64 y (-.f64 1 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 y 2/3) (+.f64 (pow.f64 (*.f64 y x) 2/3) (cbrt.f64 (*.f64 (*.f64 y x) y)))) (-.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 y (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (+.f64 -1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (-.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 y (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 y (+.f64 -1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (-.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 y x))) (pow.f64 (*.f64 y x) 2/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) x y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (neg.f64 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y x)) (neg.f64 (pow.f64 (*.f64 y x) 2/3)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 y) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) y y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 y) (cbrt.f64 x)) (pow.f64 x 2/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (neg.f64 x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 y)) (*.f64 (pow.f64 y 2/3) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 y x) 2/3) (cbrt.f64 (neg.f64 (*.f64 y x))) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (pow.f64 y 2/3) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 2/3) (cbrt.f64 y) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 y)) (neg.f64 (pow.f64 y 2/3)) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 y x) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) -1 y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 y) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 y (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 y (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 y (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 y x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 y x)) 1 y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1 (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 y (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 y (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 y (-.f64 1 x)))))))"]],"rules":[["egg-rr",69]],"time":23.494140625,"type":"rewrite"},{"count":[[93,74]],"inputs":[["(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (+.f64 1 (*.f64 -1 x)))","(*.f64 y (+.f64 1 (*.f64 -1 x)))","(*.f64 y (+.f64 1 (*.f64 -1 x)))","(*.f64 y (+.f64 1 (*.f64 -1 x)))","y","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (*.f64 -1 (*.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (+.f64 1 (*.f64 -1 x)))","(*.f64 y (-.f64 1 x))","(*.f64 y (+.f64 1 (*.f64 -1 x)))","(*.f64 y (-.f64 1 x))","(*.f64 y (+.f64 1 (*.f64 -1 x)))","(*.f64 y (-.f64 1 x))","(*.f64 y (+.f64 1 (*.f64 -1 x)))","(*.f64 y (-.f64 1 x))","y","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))"]],"time":78.139892578125,"type":"simplify"},{"compiler":[[849,506]],"time":11.050048828125,"type":"eval"},{"alts":[["(-.f64 1 (-.f64 (neg.f64 (*.f64 y x)) (neg.f64 y)))","done",0.00390625],["(fma.f64 x y (-.f64 1 y))","done",0.00390625]],"compiler":[[11,8],[8,5]],"count":[[76,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[74,0],"picked":[1,1]}],"min-error":[0],"time":14.593994140625,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["(+.f64 x (*.f64 (-.f64 1 x) (-.f64 1 y)))",0.00390625,1],["(-.f64 1 y)",0.00390625,1],["(-.f64 1 y)",0.00390625,1]],"compiler":[[3,2],[3,2],[11,8],[5,4],[5,4],[49,32]],"count":[[6,1]],"inputs":[["(-.f64 1 (-.f64 (neg.f64 (*.f64 y x)) (neg.f64 y)))","(fma.f64 x y (-.f64 1 y))","(-.f64 (fma.f64 y x 1) y)","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 1 x))))","(fma.f64 (-.f64 1 y) (-.f64 1 x) x)","(+.f64 x (*.f64 (-.f64 1 x) (-.f64 1 y)))"]],"link":["."],"name":["Graphics.Rendering.Chart.Plot.Vectors:renderPlotVectors from Chart-1.5.3"],"oracle":[15.468276302137694],"outputs":[["(-.f64 1 (-.f64 (neg.f64 (*.f64 y x)) (neg.f64 y)))"]],"time":15.51611328125,"times":[["x",3.43505859375],["y",3.350830078125],["(+.f64 x (*.f64 (-.f64 1 x) (-.f64 1 y)))",2.47998046875],["(-.f64 1 y)",2.4970703125],["(-.f64 1 y)",2.5009765625]],"type":"regimes"},{"compiler":[[11,8]],"inputs":[["(-.f64 1 (-.f64 (neg.f64 (*.f64 y x)) (neg.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 1 (-.f64 (neg.f64 (*.f64 y x)) (neg.f64 y)))","(+.f64 1 (*.f64 y (+.f64 x -1)))"]],"stop":[["done",1]],"time":19.52099609375,"type":"simplify"},{"time":0.015869140625,"type":"soundness"},{"compiler":[[11,8]],"remove-preprocessing":[[]],"time":8.116943359375,"type":"end"}]
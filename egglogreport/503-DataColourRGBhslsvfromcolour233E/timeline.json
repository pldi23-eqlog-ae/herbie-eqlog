[{"compiler":[[8,5]],"method":["search"],"sampling":[[12,0.7892677283380181,0.12097552325576544,0.0897567484062165],[11,0.7512189750559628,0.1775608486495912,0.07122017629444599],[10,0.7063409583643079,0.23414617404341698,0.05951286759227514],[9,0.6321946699172258,0.33560951612889767,0.032195813953876495],[8,0.546341072767973,0.43707285821437836,0.016586069017648697],[7,0.40585336834192276,0.5931703075766563,0.0009763240814208984],[6,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[5,0.0,0.9990236759185791,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":30.107177734375,"type":"analyze"},{"outcomes":[["body",256,"invalid",11.58837890625,349],["body",256,"valid",267.76953125,8256]],"time":287.27880859375,"type":"sample"},{"compiler":[[7,4]],"inputs":[["0","1"],["(/.f64 (-.f64 x y) x)","(/.f64 (-.f64 y x) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (-.f64 x y) x)","(/.f64 (-.f64 y x) y)"]],"symmetry":[[]],"time":57.67919921875,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(/.f64 (-.f64 x y) x)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 x y) x)"]],"time":18.5830078125,"type":"simplify"},{"compiler":[[7,4]],"time":0.182861328125,"type":"eval"},{"alts":[["(/.f64 (-.f64 x y) x)","next",0.00390625]],"compiler":[[7,4],[7,4]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.658935546875,"type":"prune"},{"compiler":[[12,4]],"locations":[["(/.f64 (-.f64 x y) x)",0.00390625,true]],"time":2.68701171875,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (-.f64 x y) x)","y","-inf",0.41015625],["(/.f64 (-.f64 x y) x)","y","inf",0.316162109375],["(/.f64 (-.f64 x y) x)","y","0",0.31396484375],["(/.f64 (-.f64 x y) x)","x","-inf",0.322998046875],["(/.f64 (-.f64 x y) x)","x","inf",0.400146484375],["(/.f64 (-.f64 x y) x)","x","0",0.342041015625]],"time":2.18505859375,"type":"series"},{"count":[[1,112]],"inputs":[["(/.f64 (-.f64 x y) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (neg.f64 (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x y) x) (*.f64 (/.f64 (-.f64 x y) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 x y) x) 0) (/.f64 (-.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (/.f64 1 x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 x) (neg.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x y) x) (*.f64 0 (/.f64 (-.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 x y) x)) (/.f64 (-.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (/.f64 y x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (/.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (neg.f64 (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 -1 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 y x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 x) (/.f64 (-.f64 y x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 x)) (/.f64 (-.f64 y x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (/.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 x y) x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) x) 2)) (cbrt.f64 (/.f64 (-.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y x) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x y)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x y) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 y x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2)) x) (cbrt.f64 (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) (-.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 x y)) (/.f64 1 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 x)) (/.f64 (-.f64 x y) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) (cbrt.f64 (*.f64 x x))) (cbrt.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) (cbrt.f64 x)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (neg.f64 (/.f64 y x)) 3)) (+.f64 1 (-.f64 (*.f64 (neg.f64 (/.f64 y x)) (neg.f64 (/.f64 y x))) (neg.f64 (/.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (/.f64 y x) 3)) (+.f64 1 (+.f64 (pow.f64 (/.f64 y x) 2) (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 y))) (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (neg.f64 x)) (neg.f64 (*.f64 x y))) (*.f64 x (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) y)) (*.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x y) (neg.f64 x)) (*.f64 x (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 x y)) (cbrt.f64 (*.f64 x x))) (*.f64 (*.f64 x x) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y x) x) (*.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) (cbrt.f64 x)) (neg.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 x (-.f64 x y))) (*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (-.f64 y x)) (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 y x)) (*.f64 x (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (-.f64 x y)) (*.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (-.f64 x y))) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) x) (neg.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 x y) x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 x y)) (cbrt.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 x y)) (cbrt.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 x 4)) (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 y (cbrt.f64 x)))) (cbrt.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (*.f64 x x)) x) (*.f64 x (/.f64 y (cbrt.f64 x)))) (*.f64 (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 x x))) (*.f64 (neg.f64 x) (/.f64 y (cbrt.f64 x)))) (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x y) (cbrt.f64 (*.f64 x x))) (*.f64 (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 x y)) x) (pow.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 x y)) (neg.f64 x)) (neg.f64 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y x) (cbrt.f64 (*.f64 x x))) (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) (cbrt.f64 x)) x) (*.f64 (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (-.f64 x y)) (*.f64 (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 (-.f64 x y) (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 x (-.f64 x y))) (pow.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (-.f64 x y) (cbrt.f64 x))) (*.f64 (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (*.f64 x (-.f64 x y))) (neg.f64 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 x y) (cbrt.f64 x))) (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x y) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 x y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) x) (cbrt.f64 (*.f64 x x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) x) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 x y)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 x y) x)) (cbrt.f64 (pow.f64 (-.f64 x y) 2))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) x) 2)) (cbrt.f64 (-.f64 y x))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) x) 2)) (cbrt.f64 (-.f64 x y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 x y)) 1) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) (cbrt.f64 x)) 1) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 (-.f64 x y) x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (-.f64 x y) x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 y x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) x) 2))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x y)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) x) 2))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) (cbrt.f64 x)) (neg.f64 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 x y)) 1) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 x y)) (cbrt.f64 (pow.f64 x 4))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) (cbrt.f64 x)) 1) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (*.f64 x x)) x) (*.f64 (cbrt.f64 (*.f64 x x)) y)) (*.f64 (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (*.f64 (neg.f64 x) (neg.f64 y))) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x y) x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y x) (neg.f64 x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (-.f64 y x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 x y) (cbrt.f64 x))) (neg.f64 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 x y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x y) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x y) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 x y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 y x) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 y x) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 -1 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 x) (neg.f64 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 x) (neg.f64 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 1 x)) (neg.f64 (/.f64 y x)))))))"]],"rules":[["egg-rr",112]],"time":22.5361328125,"type":"rewrite"},{"count":[[136,116]],"inputs":[["(*.f64 -1 (/.f64 y x))","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(+.f64 1 (*.f64 -1 (/.f64 y x)))","1","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(+.f64 1 (*.f64 -1 (/.f64 y x)))","1","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(+.f64 1 (*.f64 -1 (/.f64 y x)))","1","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(*.f64 -1 (/.f64 y x))","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(*.f64 -1 (/.f64 y x))","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(+.f64 1 (*.f64 -1 (/.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 y x))","(neg.f64 (/.f64 y x))","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(/.f64 (-.f64 x y) x)","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(/.f64 (-.f64 x y) x)","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(/.f64 (-.f64 x y) x)","1","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(/.f64 (-.f64 x y) x)","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(/.f64 (-.f64 x y) x)","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(/.f64 (-.f64 x y) x)","1","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(/.f64 (-.f64 x y) x)","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(/.f64 (-.f64 x y) x)","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(/.f64 (-.f64 x y) x)","1","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(/.f64 (-.f64 x y) x)","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(/.f64 (-.f64 x y) x)","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(/.f64 (-.f64 x y) x)","(*.f64 -1 (/.f64 y x))","(neg.f64 (/.f64 y x))","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(/.f64 (-.f64 x y) x)","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(/.f64 (-.f64 x y) x)","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(/.f64 (-.f64 x y) x)","(*.f64 -1 (/.f64 y x))","(neg.f64 (/.f64 y x))","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(/.f64 (-.f64 x y) x)","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(/.f64 (-.f64 x y) x)","(+.f64 1 (*.f64 -1 (/.f64 y x)))","(/.f64 (-.f64 x y) x)"]],"time":77.0,"type":"simplify"},{"compiler":[[1334,394]],"time":11.789794921875,"type":"eval"},{"alts":[["(-.f64 1 (/.f64 y x))","next",0]],"compiler":[[7,5],[7,5]],"count":[[117,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[116,1],"picked":[1,0]}],"min-error":[0],"time":25.7919921875,"type":"prune"},{"compiler":[[13,6]],"time":2.968994140625,"type":"localize"},{"compiler":[[2,2]],"time":0.086181640625,"type":"eval"},{"alts":[["(-.f64 1 (/.f64 y x))","done",0]],"compiler":[[7,5]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.467041015625,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["(/.f64 (-.f64 x y) x)",0,1]],"compiler":[[3,2],[3,2],[7,4],[12,7]],"count":[[2,1]],"inputs":[["(-.f64 1 (/.f64 y x))","(/.f64 (-.f64 x y) x)"]],"link":["."],"name":["Data.Colour.RGB:hslsv from colour-2.3.3, E"],"oracle":[0.00390625],"outputs":[["(-.f64 1 (/.f64 y x))"]],"time":6.886962890625,"times":[["x",2.25390625],["y",2.24609375],["(/.f64 (-.f64 x y) x)",1.9189453125]],"type":"regimes"},{"compiler":[[7,5]],"inputs":[["(-.f64 1 (/.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(-.f64 1 (/.f64 y x))","(/.f64 (-.f64 x y) x)"]],"stop":[["done",1]],"time":17.7900390625,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":7.48193359375,"type":"end"}]
[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.8263408725615591,0.08975603338330984,0.08390309405513108],[11,0.809755518566817,0.11902430513873696,0.07122017629444599],[10,0.776584810577333,0.17170719429850578,0.05170799512416124],[9,0.7414628844708204,0.22634130157530308,0.032195813953876495],[8,0.6712190322577953,0.31219489872455597,0.016586069017648697],[7,0.5931703075766563,0.40585336834192276,0.0009763240814208984],[6,0.43707285821437836,0.5619508177042007,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":20.69091796875,"type":"analyze"},{"outcomes":[["body",256,"invalid",12.0322265625,381],["body",256,"valid",264.11767578125,8256]],"time":284.552001953125,"type":"sample"},{"compiler":[[7,5]],"inputs":[["0","1"],["(/.f64 x (*.f64 y 3))","(/.f64 y (*.f64 x 3))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 x (*.f64 y 3))","(/.f64 y (*.f64 x 3))"]],"symmetry":[[]],"time":56.220947265625,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(/.f64 x (*.f64 y 3))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (*.f64 y 3))"]],"time":38.468994140625,"type":"simplify"},{"compiler":[[7,5]],"time":0.22802734375,"type":"eval"},{"alts":[["(/.f64 x (*.f64 y 3))","next",0.20703125]],"compiler":[[7,5],[7,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.20703125],"time":0.6650390625,"type":"prune"},{"compiler":[[13,8]],"locations":[["(/.f64 x (*.f64 y 3))",0.20703125,true]],"time":3.119873046875,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 x (*.f64 y 3))","y","-inf",1.22802734375],["(/.f64 x (*.f64 y 3))","y","inf",0.43994140625],["(/.f64 x (*.f64 y 3))","y","0",0.623046875],["(/.f64 x (*.f64 y 3))","x","-inf",0.39892578125],["(/.f64 x (*.f64 y 3))","x","inf",0.535888671875],["(/.f64 x (*.f64 y 3))","x","0",0.619140625]],"time":3.923095703125,"type":"series"},{"count":[[1,82]],"inputs":[["(/.f64 x (*.f64 y 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (*.f64 y 3)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 x (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 x (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (*.f64 y 3))) (pow.f64 (/.f64 x (*.f64 y 3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x (*.f64 y 3)) 2/3) (cbrt.f64 (/.f64 x (*.f64 y 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) y) (*.f64 (pow.f64 x 2/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x 27)) (/.f64 (pow.f64 x 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (/.f64 1/3 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) 1/3) (/.f64 (cbrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 x 2/3) y) (cbrt.f64 (/.f64 x 27)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x y) (sqrt.f64 1/3)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (/.f64 1/3 y))) (pow.f64 (/.f64 1/3 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) (cbrt.f64 3)) (pow.f64 9 -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 -1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/3 y)) (*.f64 x (pow.f64 (/.f64 1/3 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 1/3) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 (/.f64 1/3 y) 2/3)) (cbrt.f64 (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/3 y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 x (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 y 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 -3 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x y)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 x (*.f64 y 3)) 2/3) (*.f64 0 (cbrt.f64 (/.f64 x (*.f64 -3 y)))))) (cbrt.f64 (/.f64 x (*.f64 y 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 x y) (sqrt.f64 1/3)) (sqrt.f64 (sqrt.f64 3))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 3)) (*.f64 (cbrt.f64 9) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (sqrt.f64 3)) (*.f64 y (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (*.f64 y (cbrt.f64 3))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (cbrt.f64 (/.f64 1/3 y))) (cbrt.f64 (pow.f64 (*.f64 y 3) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 y 3))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 3)) (cbrt.f64 (cbrt.f64 9))) (cbrt.f64 (pow.f64 9 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 x 2/3)) (*.f64 (cbrt.f64 3) (pow.f64 (*.f64 y 3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 (/.f64 x (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/3 y)) x) (pow.f64 (*.f64 y 3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x (*.f64 y 3))) (pow.f64 x 2/3)) (pow.f64 (*.f64 y 3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y 3)) 2/3) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y 3)) 2/3) (cbrt.f64 x)) (cbrt.f64 (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (cbrt.f64 y)) 3) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 (/.f64 x (*.f64 y 3)) 2/3)) (cbrt.f64 (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (pow.f64 (/.f64 x (*.f64 y 3)) 2/3)) (cbrt.f64 (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (pow.f64 (/.f64 1/3 y) 2/3)) (cbrt.f64 (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (*.f64 27 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (cbrt.f64 (/.f64 1/3 y))) (pow.f64 (*.f64 y 3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 x) y) (pow.f64 x 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x 1/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 (neg.f64 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x 27)) (pow.f64 x 2/3)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y 3)) 2/3) (cbrt.f64 (/.f64 x y))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x -3) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (/.f64 x (*.f64 y 3)) 2/3)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) 1/3)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 x y) (sqrt.f64 1/3)) (cbrt.f64 (sqrt.f64 3))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 x y)) (sqrt.f64 3)) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (cbrt.f64 9)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 y)) (*.f64 (pow.f64 y 2/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 3)) (cbrt.f64 3)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (cbrt.f64 -3)) (neg.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 -3 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x y) (sqrt.f64 1/3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (*.f64 -3 y))) (neg.f64 (pow.f64 (*.f64 y 3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (*.f64 y (sqrt.f64 3))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x y)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (*.f64 y 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (*.f64 -3 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (*.f64 y 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (*.f64 y 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (*.f64 y 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 x (*.f64 -3 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (*.f64 y 3)) 3))))))"]],"rules":[["egg-rr",82]],"time":41.905029296875,"type":"rewrite"},{"count":[[106,82]],"inputs":[["(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)"]],"time":78.202880859375,"type":"simplify"},{"compiler":[[807,550]],"time":12.532958984375,"type":"eval"},{"alts":[["(/.f64 x (*.f64 y 3))","done",0.20703125],["(/.f64 (/.f64 x -3) (neg.f64 y))","next",0.171875],["(/.f64 (/.f64 x y) 3)","fresh",0.26953125],["(*.f64 (*.f64 x 1/3) (/.f64 1 y))","fresh",0.3708000488422101],["(/.f64 (/.f64 x (cbrt.f64 3)) (*.f64 (cbrt.f64 9) y))","fresh",0.38576127930532605]],"compiler":[[7,5],[8,6],[7,5],[9,7],[11,9],[8,6],[7,5],[9,7],[11,9]],"count":[[83,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[82,4],"picked":[1,1]}],"min-error":[0],"time":14.549072265625,"type":"prune"},{"compiler":[[16,9]],"locations":[["(/.f64 (/.f64 x -3) (neg.f64 y))",0.171875,true]],"time":3.929931640625,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (/.f64 x -3) (neg.f64 y))","y","-inf",0.14892578125],["(/.f64 (/.f64 x -3) (neg.f64 y))","y","inf",0.153076171875],["(/.f64 (/.f64 x -3) (neg.f64 y))","y","0",0.16015625],["(/.f64 (/.f64 x -3) (neg.f64 y))","x","-inf",0.155029296875],["(/.f64 (/.f64 x -3) (neg.f64 y))","x","inf",0.177978515625],["(/.f64 (/.f64 x -3) (neg.f64 y))","x","0",0.193115234375]],"time":1.05908203125,"type":"series"},{"count":[[1,97]],"inputs":[["(/.f64 (/.f64 x -3) (neg.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x 1/3) y) 0) (/.f64 (*.f64 x 1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x 1/3) y) (*.f64 (/.f64 (*.f64 x 1/3) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 x 1/3) y)) (/.f64 (*.f64 x 1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x 1/3) y) (*.f64 0 (/.f64 (*.f64 x 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 y) (/.f64 (*.f64 x -1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 x -1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x 1/3) y)) (pow.f64 (/.f64 (*.f64 x 1/3) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 x 1/3) y) 2/3) (cbrt.f64 (/.f64 (*.f64 x 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 -1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (neg.f64 y))) (/.f64 -1/3 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 1/3)) (/.f64 (pow.f64 (*.f64 x -1/3) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x -1/3)) (/.f64 (neg.f64 (pow.f64 (*.f64 x -1/3) 2/3)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x 1/3) y)) (/.f64 (pow.f64 (*.f64 x -1/3) 2/3) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x -1/3) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 y)) (/.f64 (*.f64 x -1/3) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 x -1/3) 2/3)) y) (cbrt.f64 (*.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 x -1/3) 2/3) y) (cbrt.f64 (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/3 y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x -1/3) (pow.f64 y 2/3)) (cbrt.f64 (/.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/3 (pow.f64 y 2/3)) (/.f64 x (cbrt.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 x -1/3) 2/3) (pow.f64 y 2/3)) (cbrt.f64 (/.f64 (*.f64 x 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 x) y) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (neg.f64 (*.f64 y 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (neg.f64 y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 1/3) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x 1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x 1/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 x -1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x -1/3) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) -3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x 1/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (neg.f64 (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x -1/3) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x 1/3) y)) (pow.f64 (*.f64 x -1/3) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x 1/3) y) 2/3) (cbrt.f64 (*.f64 x -1/3))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x 1/3) y) 2/3) (cbrt.f64 (*.f64 x 1/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 y)) (*.f64 x -1/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 (neg.f64 y))) -1/3) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 y) (/.f64 (neg.f64 x) (sqrt.f64 3))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 y) (*.f64 x (cbrt.f64 -1/3))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (neg.f64 (pow.f64 (*.f64 x -1/3) 2/3)) y)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (/.f64 (neg.f64 (pow.f64 (*.f64 x -1/3) 2/3)) y)) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x -1/3) (pow.f64 y 2/3)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x -1/3)) (/.f64 (pow.f64 (*.f64 x -1/3) 2/3) (pow.f64 y 2/3))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x -1/3)) (pow.f64 (/.f64 (*.f64 x 1/3) y) 2/3)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x 1/3)) (/.f64 (pow.f64 (*.f64 x -1/3) 2/3) (pow.f64 y 2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x 1/3)) (pow.f64 (/.f64 (*.f64 x 1/3) y) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 x) (sqrt.f64 3)) (/.f64 -1 y)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (cbrt.f64 -1/3)) (/.f64 -1 y)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 -1/3 (pow.f64 y 2/3))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 x) y) (cbrt.f64 9)) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 x) y) (cbrt.f64 -3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x -1/3) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (cbrt.f64 -3)) (neg.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (sqrt.f64 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (cbrt.f64 9)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (neg.f64 (sqrt.f64 3))) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 (neg.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (pow.f64 (cbrt.f64 (pow.f64 y 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (/.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (/.f64 (neg.f64 y) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (/.f64 (neg.f64 (*.f64 y 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x y)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) y) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x -1/3) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x y) 1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 x) y) 1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 -1/3 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x -1/3)) (/.f64 (pow.f64 (*.f64 x -1/3) 2/3) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (/.f64 1 y)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 1 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 x) y) 1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 x) y) -1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) 1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) -1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x 1/3) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x 1/3) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x 1/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 x -1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 x -1/3) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 x 1/3) (/.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 y) (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x 1/3) y) 3))))))"]],"rules":[["egg-rr",97]],"time":25.43701171875,"type":"rewrite"},{"count":[[121,99]],"inputs":[["(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)"]],"time":77.968994140625,"type":"simplify"},{"compiler":[[970,649]],"time":13.916015625,"type":"eval"},{"alts":[["(*.f64 (neg.f64 x) (/.f64 1 (neg.f64 (*.f64 y 3))))","fresh",0.29525375976844204],["(*.f64 x (/.f64 1/3 y))","fresh",0.3287887695368841],["(/.f64 x (*.f64 y 3))","done",0.20703125],["(/.f64 (/.f64 x -3) (neg.f64 y))","done",0.171875],["(/.f64 (/.f64 x y) 3)","next",0.26953125],["(*.f64 (*.f64 x 1/3) (/.f64 1 y))","fresh",0.3708000488422101]],"compiler":[[11,9],[7,5],[7,5],[8,6],[7,5],[9,7],[11,9],[7,5],[7,5],[9,7]],"count":[[104,6]],"kept":[{"done":[1,1],"fresh":[3,2],"new":[99,2],"picked":[1,1]}],"min-error":[0],"time":20.093994140625,"type":"prune"},{"compiler":[[13,6]],"locations":[["(/.f64 (/.f64 x y) 3)",0.26953125,true]],"time":2.93408203125,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (/.f64 x y) 3)","y","-inf",0.166015625],["(/.f64 (/.f64 x y) 3)","y","inf",0.14794921875],["(/.f64 (/.f64 x y) 3)","y","0",0.14111328125],["(/.f64 (/.f64 x y) 3)","x","-inf",0.1748046875],["(/.f64 (/.f64 x y) 3)","x","inf",0.156982421875],["(/.f64 (/.f64 x y) 3)","x","0",0.182861328125]],"time":1.034912109375,"type":"series"},{"count":[[1,122]],"inputs":[["(/.f64 (/.f64 x y) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (*.f64 3 y)) (*.f64 (/.f64 x (*.f64 3 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x (*.f64 3 y)) 0) (/.f64 x (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (*.f64 3 y)) (*.f64 0 (/.f64 x (*.f64 3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 x (*.f64 3 y))) (/.f64 x (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 -3 y)) (/.f64 x (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 x (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (*.f64 3 y))) (pow.f64 (/.f64 x (*.f64 3 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x (*.f64 3 y)) 2/3) (cbrt.f64 (/.f64 x (*.f64 3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) (*.f64 (pow.f64 (/.f64 x y) 2/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x y)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x 27)) (/.f64 (pow.f64 x 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 1/3)) (*.f64 (/.f64 1 y) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 1/3)) (*.f64 (/.f64 1 y) (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (sqrt.f64 1/3)) (*.f64 (pow.f64 (/.f64 x y) 2/3) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (*.f64 (/.f64 x y) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (*.f64 (/.f64 x y) (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 x y) 2/3) 1/3) (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x y) (sqrt.f64 1/3)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 x y) 2/3) (sqrt.f64 1/3)) (*.f64 (cbrt.f64 (/.f64 x y)) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x y) (cbrt.f64 1/9)) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 x 2/3) y) (cbrt.f64 (/.f64 x 27)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 y) (cbrt.f64 1/9)) (*.f64 x (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 y) (sqrt.f64 1/3)) (*.f64 x (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x -3) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 1/3) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 3 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 x (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 -3 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x y) (cbrt.f64 1/3)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 x y) (cbrt.f64 1/3)) 1) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (sqrt.f64 1/3)) (*.f64 (sqrt.f64 3) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (cbrt.f64 1/3)) (*.f64 (cbrt.f64 9) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/3) (neg.f64 x)) (*.f64 (sqrt.f64 3) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/3) x) (*.f64 (sqrt.f64 3) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/3) (/.f64 x (cbrt.f64 y))) (*.f64 (sqrt.f64 3) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 x (cbrt.f64 y))) (*.f64 -3 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/3) (neg.f64 x)) (*.f64 (cbrt.f64 9) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/3) x) (*.f64 (cbrt.f64 9) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/3) (/.f64 x (cbrt.f64 y))) (*.f64 (cbrt.f64 9) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (cbrt.f64 1/3)) (*.f64 (neg.f64 y) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (sqrt.f64 1/3)) (*.f64 (neg.f64 y) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (cbrt.f64 1/3)) (*.f64 (pow.f64 y 2/3) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 y)) -1) (*.f64 (pow.f64 y 2/3) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (sqrt.f64 1/3)) (*.f64 (pow.f64 y 2/3) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 y)) 1) (*.f64 (pow.f64 y 2/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (pow.f64 (/.f64 x y) 2/3)) (*.f64 (cbrt.f64 (*.f64 3 y)) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 x y) (sqrt.f64 1/3))) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 3 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x 1/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x -3) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x y) (sqrt.f64 1/3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x y) (cbrt.f64 1/3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 -3 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (sqrt.f64 1/3)) (/.f64 1 y)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 (/.f64 x (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 3 y)) 2/3) (cbrt.f64 x)) (cbrt.f64 (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 3 y)) 2/3) (cbrt.f64 (/.f64 x y))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 3 y)) 2/3) (cbrt.f64 (neg.f64 (/.f64 x y)))) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (sqrt.f64 1/3)) (pow.f64 (/.f64 x y) 2/3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/3) (/.f64 x y)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (cbrt.f64 1/3)) (/.f64 1 y)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/3) (/.f64 x y)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x (*.f64 3 y))) (pow.f64 (/.f64 x y) 2/3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x 27)) (pow.f64 x 2/3)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 (pow.f64 (/.f64 x y) 2/3) (sqrt.f64 1/3))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 (/.f64 1 y) (sqrt.f64 1/3))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 y)) 1/3) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (*.f64 (pow.f64 (/.f64 x y) 2/3) 1/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (*.f64 (pow.f64 (/.f64 x y) 2/3) 1/3)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) -1/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x -1/3) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x y) (cbrt.f64 1/9)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (pow.f64 (/.f64 x (*.f64 3 y)) 2/3)) (cbrt.f64 (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (/.f64 x (*.f64 3 y)) 2/3)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) (pow.f64 (/.f64 x (*.f64 3 y)) 2/3)) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x -3) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 x y) (sqrt.f64 1/3)) 1) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 (/.f64 1 y) (cbrt.f64 1/9))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x -3) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x -3) -1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x -3) (cbrt.f64 (neg.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x -3) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 x y) (cbrt.f64 1/3)) (cbrt.f64 (cbrt.f64 9))) (pow.f64 (cbrt.f64 (cbrt.f64 9)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 x y) (cbrt.f64 1/3)) 1) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (*.f64 3 y))) (pow.f64 (cbrt.f64 (*.f64 3 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (*.f64 27 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 x y) (sqrt.f64 1/3)) (cbrt.f64 (sqrt.f64 3))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 x y) (sqrt.f64 1/3)) 1) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 x y) (sqrt.f64 1/3)) (sqrt.f64 (sqrt.f64 3))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (neg.f64 (sqrt.f64 3))) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 x y)) (sqrt.f64 3)) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 x y)) (cbrt.f64 3)) (neg.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (/.f64 (neg.f64 y) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 y 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 y)) (*.f64 3 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 -3 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 (neg.f64 y) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 (*.f64 -3 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x -3)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 x y) (cbrt.f64 1/3))) (neg.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x y)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (*.f64 3 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) -1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (*.f64 3 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (*.f64 3 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (*.f64 3 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 x y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 x (*.f64 -3 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1/3 (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (*.f64 3 y)) 3))))))"]],"rules":[["egg-rr",122]],"time":26.041015625,"type":"rewrite"},{"count":[[146,123]],"inputs":[["(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)"]],"time":77.951904296875,"type":"simplify"},{"compiler":[[1231,807]],"time":17.550048828125,"type":"eval"},{"alts":[["(*.f64 x (/.f64 1/3 y))","fresh",0.3287887695368841],["(/.f64 x (*.f64 y 3))","done",0.20703125],["(/.f64 (/.f64 x -3) (neg.f64 y))","done",0.171875],["(/.f64 (/.f64 x y) 3)","done",0.26953125],["(*.f64 (neg.f64 x) (/.f64 1 (*.f64 -3 y)))","fresh",0.29525375976844204],["(*.f64 (/.f64 x -3) (/.f64 -1 y))","next",0.26171875]],"compiler":[[7,5],[7,5],[8,6],[7,5],[10,8],[9,7],[7,5],[10,8],[9,7]],"count":[[129,6]],"kept":[{"done":[2,2],"fresh":[3,1],"new":[123,2],"picked":[1,1]}],"min-error":[0],"time":26.77294921875,"type":"prune"},{"compiler":[[19,13]],"locations":[["(*.f64 (/.f64 x -3) (/.f64 -1 y))",0.26171875,true]],"time":4.570068359375,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (/.f64 x -3) (/.f64 -1 y))","y","-inf",0.155029296875],["(*.f64 (/.f64 x -3) (/.f64 -1 y))","y","inf",0.175048828125],["(*.f64 (/.f64 x -3) (/.f64 -1 y))","y","0",0.14208984375],["(*.f64 (/.f64 x -3) (/.f64 -1 y))","x","-inf",0.1708984375],["(*.f64 (/.f64 x -3) (/.f64 -1 y))","x","inf",0.154052734375],["(*.f64 (/.f64 x -3) (/.f64 -1 y))","x","0",0.18310546875]],"time":1.049072265625,"type":"series"},{"count":[[1,86]],"inputs":[["(*.f64 (/.f64 x -3) (/.f64 -1 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x 1/3) y) (*.f64 (/.f64 (*.f64 x 1/3) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x 1/3) y) 0) (/.f64 (*.f64 x 1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x 1/3) y) (*.f64 0 (/.f64 (*.f64 x 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 x 1/3) y)) (/.f64 (*.f64 x 1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 -3 y)) (/.f64 (*.f64 x -1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 x -1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x 1/3) y)) (pow.f64 (/.f64 (*.f64 x 1/3) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 x 1/3) y) 2/3) (cbrt.f64 (/.f64 (*.f64 x 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x -1/3)) (/.f64 (neg.f64 (pow.f64 (*.f64 x -1/3) 2/3)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 y -1/3)) (*.f64 (cbrt.f64 (pow.f64 (neg.f64 y) -2)) (*.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 -1/3)) (*.f64 (/.f64 -1 y) (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x -1/3) (cbrt.f64 y)) (neg.f64 (pow.f64 (cbrt.f64 y) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x -1/3) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) (cbrt.f64 (pow.f64 (neg.f64 y) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 -1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 1/3) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 -1 y) (cbrt.f64 1/9)) (*.f64 x (cbrt.f64 -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (neg.f64 y) -2)) (/.f64 (*.f64 x 1/3) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/3 y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 y) -2)) (*.f64 x -1/3)) (neg.f64 (pow.f64 y -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (/.f64 (*.f64 x -1/3) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 x -1/3) 2/3)) y) (cbrt.f64 (*.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x y)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x 1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x 1/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 x -1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x -1/3) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) (cbrt.f64 3)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 -1 y) (cbrt.f64 (*.f64 x -1/3))) (pow.f64 (*.f64 x -1/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x -1/3) 2/3) (*.f64 (/.f64 -1 y) (cbrt.f64 (*.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x 1/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x 1/3) y) 2/3) (cbrt.f64 (neg.f64 (/.f64 x y)))) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 3)) (cbrt.f64 -3)) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 3)) (cbrt.f64 (cbrt.f64 9))) (pow.f64 (cbrt.f64 (cbrt.f64 9)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 3)) (cbrt.f64 3)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (neg.f64 (sqrt.f64 3))) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (cbrt.f64 9)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 x y)) (cbrt.f64 9)) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (cbrt.f64 -3)) (*.f64 (cbrt.f64 9) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (cbrt.f64 (*.f64 -3 y))) (pow.f64 (cbrt.f64 (*.f64 -3 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x -1/3) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (pow.f64 (cbrt.f64 (pow.f64 y 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 x y) (cbrt.f64 3))) (neg.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 -3 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 y) (*.f64 x (cbrt.f64 -1/3))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 y) (/.f64 (neg.f64 x) (sqrt.f64 3))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (cbrt.f64 -1/3)) (/.f64 -1 y)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x 1/3) y) 2/3) (cbrt.f64 (*.f64 x 1/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x 1/3) y) 2/3) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x -1/3) (cbrt.f64 y)) -1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 3)) 1) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x -1/3) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (cbrt.f64 -3)) (neg.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (sqrt.f64 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (cbrt.f64 (*.f64 -27 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x y)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 x y)) -1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) 1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 x y)) -1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x 1/3) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x 1/3) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x 1/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 x -1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 x y) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 x 1/3) (/.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 x -1/3) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 x (/.f64 -1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 y) (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 x y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x 1/3) y) 3))))))"]],"rules":[["egg-rr",86]],"time":24.702880859375,"type":"rewrite"},{"count":[[110,88]],"inputs":[["(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)"]],"time":78.1220703125,"type":"simplify"},{"compiler":[[849,573]],"time":12.903076171875,"type":"eval"},{"alts":[["(*.f64 (neg.f64 x) (/.f64 1 (*.f64 -3 y)))","fresh",0.29525375976844204],["(*.f64 x (/.f64 1/3 y))","fresh",0.3287887695368841],["(/.f64 x (*.f64 y 3))","done",0.20703125],["(/.f64 (/.f64 x -3) (neg.f64 y))","done",0.171875],["(/.f64 (/.f64 x y) 3)","done",0.26953125],["(*.f64 (/.f64 x -3) (/.f64 -1 y))","done",0.26171875]],"compiler":[[10,8],[7,5],[7,5],[8,6],[7,5],[9,7]],"count":[[94,6]],"kept":[{"done":[3,3],"fresh":[2,1],"new":[88,1],"picked":[1,1]}],"min-error":[0],"time":16.867919921875,"type":"prune"},{"accuracy":[0.171875],"baseline":[0.171875],"branch":[["x",0.171875,1],["y",0.171875,1],["(/.f64 x (*.f64 y 3))",0.171875,1],["(*.f64 y 3)",0.171875,1],["(*.f64 y 3)",0.171875,1]],"compiler":[[3,2],[3,2],[7,5],[5,4],[5,4],[68,47]],"count":[[10,1]],"inputs":[["(*.f64 x (/.f64 1/3 y))","(*.f64 (neg.f64 x) (/.f64 1 (*.f64 -3 y)))","(*.f64 (/.f64 x -3) (/.f64 -1 y))","(*.f64 (neg.f64 x) (/.f64 1 (neg.f64 (*.f64 y 3))))","(*.f64 x (/.f64 1/3 y))","(/.f64 (/.f64 x -3) (neg.f64 y))","(/.f64 (/.f64 x y) 3)","(*.f64 (*.f64 x 1/3) (/.f64 1 y))","(/.f64 (/.f64 x (cbrt.f64 3)) (*.f64 (cbrt.f64 9) y))","(/.f64 x (*.f64 y 3))"]],"link":["."],"name":["Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, C"],"oracle":[0.7861900879159783],"outputs":[["(/.f64 (/.f64 x -3) (neg.f64 y))"]],"time":23.751953125,"times":[["x",4.347900390625],["y",4.6640625],["(/.f64 x (*.f64 y 3))",4.0810546875],["(*.f64 y 3)",4.5029296875],["(*.f64 y 3)",4.402099609375]],"type":"regimes"},{"compiler":[[8,6]],"inputs":[["(/.f64 (/.f64 x -3) (neg.f64 y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (/.f64 x -3) (neg.f64 y))","(/.f64 (*.f64 x 1/3) y)"]],"stop":[["fuel",1]],"time":21.900146484375,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":7.570068359375,"type":"end"}]
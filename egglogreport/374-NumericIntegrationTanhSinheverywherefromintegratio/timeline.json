[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.6887799953110516,0.09170725150033832,0.21951275318861008],[11,0.6595117235556245,0.12097552325576544,0.21951275318861008],[10,0.6321946699172258,0.17951206676661968,0.18829326331615448],[9,0.5775605626404285,0.23414617404341698,0.18829326331615448],[8,0.5307313278317451,0.34341438859701157,0.1258542835712433],[7,0.43707285821437836,0.43707285821437836,0.1258542835712433],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":23.303955078125,"type":"analyze"},{"outcomes":[["body",256,"invalid",11.444580078125,347],["body",256,"valid",278.930419921875,8256]],"time":298.244140625,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(*.f64 x (+.f64 1 (*.f64 y y)))","(*.f64 y (+.f64 1 (*.f64 x x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 x (+.f64 1 (*.f64 y y)))","(fma.f64 x (*.f64 y y) x)","(*.f64 y (+.f64 1 (*.f64 x x)))","(fma.f64 (*.f64 x x) y y)"]],"symmetry":[[]],"time":57.160888671875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 x (+.f64 1 (*.f64 y y)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (+.f64 1 (*.f64 y y)))","(fma.f64 (*.f64 y y) x x)"]],"time":18.66796875,"type":"simplify"},{"compiler":[[15,7]],"time":0.28515625,"type":"eval"},{"alts":[["(fma.f64 (*.f64 y y) x x)","next",4.33203125]],"compiler":[[8,4],[8,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[4.33203125],"time":0.780029296875,"type":"prune"},{"compiler":[[13,4]],"locations":[["(fma.f64 (*.f64 y y) x x)",4.055063993871492,true]],"time":3.080810546875,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 (*.f64 y y) x x)","x","-inf",0.610107421875],["(fma.f64 (*.f64 y y) x x)","x","inf",0.404052734375],["(fma.f64 (*.f64 y y) x x)","x","0",0.529052734375],["(fma.f64 (*.f64 y y) x x)","y","-inf",0.202880859375],["(fma.f64 (*.f64 y y) x x)","y","inf",1.301025390625],["(fma.f64 (*.f64 y y) x x)","y","0",0.466064453125]],"time":3.59619140625,"type":"series"},{"count":[[1,44]],"inputs":[["(fma.f64 (*.f64 y y) x x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (*.f64 y x) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (*.f64 y x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y (*.f64 y x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (neg.f64 (*.f64 y (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (fma.f64 y y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 y y 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y y 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (fma.f64 y y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x))) (pow.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 4)) (cbrt.f64 (fma.f64 y (*.f64 y x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3) (cbrt.f64 (fma.f64 y (*.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 x) (fma.f64 y y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (fma.f64 y y 1) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (fma.f64 y y 1))) (neg.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 y (*.f64 y x)) 2/3) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (*.f64 y (*.f64 y x))) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (*.f64 y (*.f64 y x))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (pow.f64 (*.f64 y (*.f64 y x)) 2/3) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (*.f64 y x)))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (fma.f64 y y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (fma.f64 y y 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (*.f64 y x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (*.f64 y x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 y (*.f64 y x) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (*.f64 y x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (fma.f64 y y 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (*.f64 y x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (fma.f64 y y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (*.f64 y (cbrt.f64 x))) (pow.f64 x 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (*.f64 y x))) (pow.f64 (*.f64 y (*.f64 y x)) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 2/3) (*.f64 (pow.f64 y 4/3) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 y x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (*.f64 y x)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (*.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 y y) x)))))"]],"rules":[["egg-rr",44]],"time":35.10986328125,"type":"rewrite"},{"count":[[68,50]],"inputs":[["x","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(*.f64 (pow.f64 y 2) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(*.f64 (pow.f64 y 2) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(fma.f64 (*.f64 y y) x x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(fma.f64 (*.f64 y y) x x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(fma.f64 (*.f64 y y) x x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(fma.f64 (*.f64 y y) x x)"]],"time":80.426025390625,"type":"simplify"},{"compiler":[[519,189]],"time":5.81591796875,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 3)","fresh",0.7987253418954711],["(fma.f64 (*.f64 y y) x x)","done",4.33203125],["(fma.f64 y (*.f64 y x) x)","next",0.12109375]],"compiler":[[11,7],[8,4],[8,4],[11,7],[8,4]],"count":[[51,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[50,2],"picked":[1,1]}],"min-error":[0.05078125],"time":7.8310546875,"type":"prune"},{"compiler":[[13,4]],"locations":[["(fma.f64 y (*.f64 y x) x)",0.12109375,true]],"time":3.02197265625,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 y (*.f64 y x) x)","x","-inf",0.41796875],["(fma.f64 y (*.f64 y x) x)","x","inf",0.705078125],["(fma.f64 y (*.f64 y x) x)","x","0",0.420166015625],["(fma.f64 y (*.f64 y x) x)","y","-inf",0.366943359375],["(fma.f64 y (*.f64 y x) x)","y","inf",0.380859375],["(fma.f64 y (*.f64 y x) x)","y","0",0.35205078125]],"time":2.719970703125,"type":"series"},{"count":[[1,39]],"inputs":[["(fma.f64 y (*.f64 y x) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y y) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (*.f64 y y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (*.f64 y x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (*.f64 y x) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (*.f64 y y) x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (neg.f64 (*.f64 (*.f64 y y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 y (*.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3) (cbrt.f64 (fma.f64 y (*.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 y (*.f64 y x) x))) (neg.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (*.f64 y y) x) 2/3) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (*.f64 (*.f64 y y) x)) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (*.f64 (*.f64 y y) x)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (pow.f64 (*.f64 (*.f64 y y) x) 2/3) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 y y) x))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 y y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y (*.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y (*.f64 y x) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (*.f64 y x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (*.f64 y x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 y (*.f64 y x) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (*.f64 y y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 y y) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (*.f64 y x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 y (*.f64 y x) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (*.f64 y x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y (*.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 (*.f64 y y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 (*.f64 y y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 y x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 y y) x)) (pow.f64 (*.f64 (*.f64 y y) x) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (*.f64 y x))) (pow.f64 (*.f64 y x) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 (*.f64 y y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y y) x) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (*.f64 y y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (*.f64 y y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 y y) x) x)))))"]],"rules":[["egg-rr",39]],"time":32.944091796875,"type":"rewrite"},{"count":[[63,45]],"inputs":[["x","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(*.f64 (pow.f64 y 2) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(*.f64 (pow.f64 y 2) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(fma.f64 (*.f64 y y) x x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(fma.f64 (*.f64 y y) x x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(fma.f64 (*.f64 y y) x x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(fma.f64 (*.f64 y y) x x)"]],"time":80.447998046875,"type":"simplify"},{"compiler":[[444,139]],"time":5.511962890625,"type":"eval"},{"alts":[["(fma.f64 (*.f64 y y) x x)","done",4.33203125],["(fma.f64 (*.f64 y (cbrt.f64 (*.f64 y x))) (pow.f64 (*.f64 y x) 2/3) x)","fresh",30.266855745898994],["(pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 3)","next",0.7987253418954711],["(fma.f64 y (*.f64 y x) x)","done",0.12109375]],"compiler":[[8,4],[15,8],[11,7],[8,4],[15,8],[11,7]],"count":[[48,4]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[45,1],"picked":[1,1]}],"min-error":[0.046875],"time":7.464111328125,"type":"prune"},{"compiler":[[30,8]],"locations":[["(cbrt.f64 (fma.f64 y (*.f64 y x) x))",0.08203125,true],["(fma.f64 y (*.f64 y x) x)",0.12109375,false],["(pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 3)",0.7719689942110507,true]],"time":5.658935546875,"type":"localize"},{"count":[[2,8]],"series":[["(cbrt.f64 (fma.f64 y (*.f64 y x) x))","x","-inf",0.25390625],["(cbrt.f64 (fma.f64 y (*.f64 y x) x))","x","inf",0.23388671875],["(cbrt.f64 (fma.f64 y (*.f64 y x) x))","x","0",0.23095703125],["(cbrt.f64 (fma.f64 y (*.f64 y x) x))","y","-inf",0.238037109375],["(cbrt.f64 (fma.f64 y (*.f64 y x) x))","y","inf",0.27001953125],["(cbrt.f64 (fma.f64 y (*.f64 y x) x))","y","0",0.93603515625],["(pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 3)","x","-inf",0.4599609375],["(pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 3)","x","inf",0.595947265625],["(pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 3)","x","0",0.39111328125],["(pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 3)","y","-inf",0.4619140625],["(pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 3)","y","inf",0.8701171875],["(pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 3)","y","0",1.7958984375]],"time":6.916015625,"type":"series"},{"count":[[2,63]],"inputs":[["(pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 3)","(cbrt.f64 (fma.f64 y (*.f64 y x) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (*.f64 y x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (*.f64 y x) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y (*.f64 y x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (neg.f64 (*.f64 y (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 y (*.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x))) (pow.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3) 4/3) (cbrt.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (*.f64 y y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 y y) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3) (cbrt.f64 (fma.f64 y (*.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 7/3) (cbrt.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3)) (pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 y (*.f64 y x) x))) (neg.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 y x)) 2)) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (*.f64 y x)))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 y x)) 2)) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (*.f64 y (*.f64 y x))) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (*.f64 y (*.f64 y x))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y (*.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y (*.f64 y x) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 y (*.f64 y x) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (*.f64 y x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (*.f64 y x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 y (*.f64 y x) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (*.f64 y x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (*.f64 y x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y (*.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 y x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (*.f64 y x))) (pow.f64 (*.f64 y x) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (*.f64 y x))) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 y x)) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (*.f64 y x)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (*.f64 y x)) x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (fma.f64 y (*.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (fma.f64 y (*.f64 y x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x))) (cbrt.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)))) (cbrt.f64 (pow.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (fma.f64 y (*.f64 y x) x)))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (fma.f64 y (*.f64 y x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 y (*.f64 y x) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 y (*.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (fma.f64 y (*.f64 y x) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (*.f64 y x) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (fma.f64 y (*.f64 y x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (fma.f64 y (*.f64 y x) x))))))"]],"rules":[["egg-rr",20],["egg-rr",43]],"time":42.658935546875,"type":"rewrite"},{"count":[[71,79]],"inputs":[["(*.f64 (pow.f64 1 1/3) x)","(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x)))))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (pow.f64 y 4) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 1 1/3) x)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 1 1/3) x)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3))))))) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x))))))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 1 1/3) x)) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 x) (*.f64 1/27 x)))) (*.f64 -2/27 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -2/9 x) (*.f64 1/27 x)))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3)))))))) (pow.f64 y 6)) (+.f64 (*.f64 (pow.f64 y 4) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 1 1/3) x)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 1 1/3) x)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3))))))) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x)))))))","(pow.f64 x 1/3)","(+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (pow.f64 y 2))))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (pow.f64 y 2))) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (pow.f64 y 4)))))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (pow.f64 y 2))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (pow.f64 y 6) (+.f64 (*.f64 -2/9 x) (*.f64 1/27 x))))) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (pow.f64 y 4))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 1 1/3) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x)))))","(fma.f64 x (*.f64 y y) x)","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (pow.f64 y 4) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 1 1/3) x)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 1 1/3) x)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3))))))) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x))))))","(+.f64 (fma.f64 x (*.f64 y y) x) (*.f64 (pow.f64 y 4) (+.f64 (*.f64 x (+.f64 2/9 -1/9)) (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) -1/729) x)))))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 1 1/3) x)) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 x) (*.f64 1/27 x)))) (*.f64 -2/27 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -2/9 x) (*.f64 1/27 x)))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3)))))))) (pow.f64 y 6)) (+.f64 (*.f64 (pow.f64 y 4) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 1 1/3) x)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 1 1/3) x)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3))))))) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x)))))))","(+.f64 (fma.f64 (pow.f64 y 6) (fma.f64 -2/27 x (fma.f64 (cbrt.f64 x) (fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 x)) (*.f64 x -5/27)) (cbrt.f64 (*.f64 (*.f64 x x) -8/19683))) (fma.f64 -1/3 (*.f64 x -5/27) (cbrt.f64 (*.f64 (*.f64 1/27 x) (*.f64 (*.f64 x x) -1/729)))))) (*.f64 (pow.f64 y 4) (+.f64 (*.f64 x (+.f64 2/9 -1/9)) (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) -1/729) x))))) (fma.f64 x (*.f64 y y) x))","(pow.f64 x 1/3)","(cbrt.f64 x)","(+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (pow.f64 y 2))))","(fma.f64 (cbrt.f64 (*.f64 1/27 x)) (*.f64 y y) (cbrt.f64 x))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (pow.f64 y 2))) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (pow.f64 y 4)))))","(+.f64 (fma.f64 (cbrt.f64 (*.f64 1/27 x)) (*.f64 y y) (cbrt.f64 x)) (*.f64 -1/9 (*.f64 (cbrt.f64 x) (pow.f64 y 4))))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (pow.f64 y 2))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (pow.f64 y 6) (+.f64 (*.f64 -2/9 x) (*.f64 1/27 x))))) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (pow.f64 y 4))))))","(+.f64 (fma.f64 (cbrt.f64 (*.f64 1/27 x)) (*.f64 y y) (cbrt.f64 x)) (fma.f64 -1/3 (*.f64 (cbrt.f64 (pow.f64 x -2)) (*.f64 (pow.f64 y 6) (*.f64 x -5/27))) (*.f64 -1/9 (*.f64 (cbrt.f64 x) (pow.f64 y 4)))))"]],"time":37.884033203125,"type":"simplify"},{"compiler":[[1871,899]],"time":21.070068359375,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 3)","done",0.7987253418954711],["(fma.f64 (*.f64 y y) x x)","done",4.33203125],["(fma.f64 y (*.f64 y x) x)","done",0.12109375],["(fma.f64 (cbrt.f64 (*.f64 y (*.f64 y x))) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 y x)) 2)) x)","fresh",10.020644733704378],["(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x)))))","next",4.39033129884221],["(fma.f64 (*.f64 y (cbrt.f64 (*.f64 y x))) (pow.f64 (*.f64 y x) 2/3) x)","fresh",30.266855745898994]],"compiler":[[11,7],[8,4],[8,4],[18,9],[27,23],[15,8],[18,9],[27,23],[15,8]],"count":[[128,6]],"kept":[{"done":[2,2],"fresh":[1,0],"new":[124,3],"picked":[1,1]}],"min-error":[0.03515625],"time":23.8359375,"type":"prune"},{"compiler":[[92,77]],"locations":[["(+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x)))",0.17578125,true],["(*.f64 2/3 (*.f64 (pow.f64 1 1/3) x))",0.3046875,true],["(*.f64 1/3 (*.f64 (pow.f64 1 1/3) x))",0.3046875,true],["(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x))))",8.352097432423964,true]],"time":20.31689453125,"type":"localize"},{"count":[[4,60]],"series":[["(+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x)))","x","-inf",0.15087890625],["(+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x)))","x","inf",0.137939453125],["(+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x)))","x","0",0.133056640625],["(*.f64 2/3 (*.f64 (pow.f64 1 1/3) x))","x","-inf",0.155029296875],["(*.f64 2/3 (*.f64 (pow.f64 1 1/3) x))","x","inf",0.135986328125],["(*.f64 2/3 (*.f64 (pow.f64 1 1/3) x))","x","0",0.135009765625],["(*.f64 1/3 (*.f64 (pow.f64 1 1/3) x))","x","-inf",0.16015625],["(*.f64 1/3 (*.f64 (pow.f64 1 1/3) x))","x","inf",0.13818359375],["(*.f64 1/3 (*.f64 (pow.f64 1 1/3) x))","x","0",0.14013671875],["(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x))))","x","-inf",0.4501953125],["(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x))))","x","inf",0.783935546875],["(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x))))","x","0",1.287109375],["(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x))))","y","-inf",0.177001953125],["(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x))))","y","inf",0.366943359375],["(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x))))","y","0",1.60400390625]],"time":6.147216796875,"type":"series"},{"count":[[4,219]],"inputs":[["(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x))))","(*.f64 1/3 (*.f64 (pow.f64 1 1/3) x))","(*.f64 2/3 (*.f64 (pow.f64 1 1/3) x))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 y y) 2/3) x) (*.f64 (*.f64 1/3 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/3 (*.f64 y y)) x) (*.f64 (*.f64 (*.f64 y y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (*.f64 1/3 (*.f64 y y)) (*.f64 2/3 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (*.f64 2/3 (*.f64 y y)) (*.f64 1/3 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (*.f64 1/3 (*.f64 y y)) (*.f64 (*.f64 y y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (*.f64 (*.f64 y y) 2/3) (*.f64 1/3 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (cbrt.f64 (pow.f64 y 4)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (pow.f64 y 2/3)) (pow.f64 (*.f64 (*.f64 y y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 y y) x) 2/3) (*.f64 (cbrt.f64 x) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 y 2/3)) (cbrt.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 y y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 y y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (+.f64 (*.f64 (cbrt.f64 (pow.f64 y 4)) (*.f64 x 1/3)) (*.f64 (cbrt.f64 (pow.f64 y 4)) (*.f64 2/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (+.f64 (*.f64 y (*.f64 x 1/3)) (*.f64 y (*.f64 2/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (+.f64 (*.f64 (cbrt.f64 (pow.f64 y 4)) (*.f64 2/3 x)) (*.f64 (cbrt.f64 (pow.f64 y 4)) (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (+.f64 (*.f64 y (*.f64 2/3 x)) (*.f64 y (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y 4)) (+.f64 (*.f64 (*.f64 x 1/3) (pow.f64 y 2/3)) (*.f64 (*.f64 2/3 x) (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (+.f64 (*.f64 (*.f64 x 1/3) y) (*.f64 (*.f64 2/3 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y 4)) (+.f64 (*.f64 (*.f64 2/3 x) (pow.f64 y 2/3)) (*.f64 (*.f64 x 1/3) (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (+.f64 (*.f64 (*.f64 2/3 x) y) (*.f64 (*.f64 x 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/3 (*.f64 y y)) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 x) (pow.f64 y 2/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 x) (pow.f64 y 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 y y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) (pow.f64 y 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 y y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (*.f64 y y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (*.f64 y y) x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 y 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2/3 x) (*.f64 y y) (*.f64 (*.f64 1/3 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) (*.f64 2/3 x) (*.f64 (*.f64 1/3 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 y (*.f64 2/3 x)) (*.f64 (*.f64 1/3 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 (*.f64 y y) 2/3) x) (*.f64 (*.f64 1/3 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 2/3 (*.f64 y y)) (*.f64 (*.f64 1/3 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y y) x) 2/3 (*.f64 (*.f64 1/3 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 2/3 x)) (*.f64 (pow.f64 (*.f64 2/3 x) 2/3) (*.f64 y y)) (*.f64 (*.f64 1/3 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 y 2/3) (cbrt.f64 (*.f64 2/3 x))) (pow.f64 (*.f64 (pow.f64 y 2/3) (cbrt.f64 (*.f64 2/3 x))) 2) (*.f64 (*.f64 1/3 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 2/3) (*.f64 (cbrt.f64 (pow.f64 y 4)) (*.f64 2/3 x)) (*.f64 (*.f64 1/3 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 2/3 x) (pow.f64 y 2/3)) (cbrt.f64 (pow.f64 y 4)) (*.f64 (*.f64 1/3 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y y) (cbrt.f64 (*.f64 2/3 x))) (pow.f64 (*.f64 2/3 x) 2/3) (*.f64 (*.f64 1/3 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y y) 2/3) x (*.f64 (*.f64 1/3 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2/3 (*.f64 (*.f64 y y) x) (*.f64 (*.f64 1/3 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 2/3 x) y) y (*.f64 (*.f64 1/3 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 y 2/3) (cbrt.f64 (*.f64 x 1/3))) (pow.f64 (*.f64 (pow.f64 y 2/3) (cbrt.f64 (*.f64 x 1/3))) 2) (*.f64 (*.f64 (*.f64 y y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y y) (cbrt.f64 (*.f64 x 1/3))) (pow.f64 (*.f64 x 1/3) 2/3) (*.f64 (*.f64 (*.f64 y y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 2/3) (*.f64 (cbrt.f64 (pow.f64 y 4)) (*.f64 x 1/3)) (*.f64 (*.f64 (*.f64 y y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 1/3) (*.f64 y y) (*.f64 (*.f64 (*.f64 y y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 1/3 (*.f64 y y)) x) (*.f64 (*.f64 (*.f64 y y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x 1/3)) (*.f64 (pow.f64 (*.f64 x 1/3) 2/3) (*.f64 y y)) (*.f64 (*.f64 (*.f64 y y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x 1/3) (pow.f64 y 2/3)) (cbrt.f64 (pow.f64 y 4)) (*.f64 (*.f64 (*.f64 y y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 1/3 (*.f64 y y)) (*.f64 (*.f64 (*.f64 y y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 y (*.f64 x 1/3)) (*.f64 (*.f64 (*.f64 y y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/3 (*.f64 y y)) x (*.f64 (*.f64 (*.f64 y y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) (*.f64 x 1/3) (*.f64 (*.f64 (*.f64 y y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x 1/3) y) y (*.f64 (*.f64 (*.f64 y y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (*.f64 y y) 2/3) x) 1 (*.f64 (*.f64 1/3 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y y) x) 1/3 (*.f64 (*.f64 (*.f64 y y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 (*.f64 (*.f64 y y) x) (*.f64 (*.f64 (*.f64 y y) 2/3) x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 1/3) 1/3) (*.f64 1/3 (*.f64 2/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (*.f64 2/3 x)) (*.f64 (*.f64 x 1/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 x) (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/3 x) (*.f64 2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 1/3) 2/3) (+.f64 (*.f64 (*.f64 2/3 x) 2/3) (*.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 2/3 x) 2/3) (+.f64 (*.f64 (*.f64 x 1/3) 2/3) (*.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (*.f64 x 1/3)) (+.f64 (*.f64 2/3 (*.f64 2/3 x)) (*.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (*.f64 2/3 x)) (+.f64 (*.f64 2/3 (*.f64 x 1/3)) (*.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 1/3) 2/3) (-.f64 (*.f64 (*.f64 2/3 x) 2/3) (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 2/3 x) 2/3) (-.f64 (*.f64 (*.f64 x 1/3) 2/3) (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (*.f64 x 1/3)) (-.f64 (*.f64 2/3 (*.f64 2/3 x)) (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (*.f64 2/3 x)) (-.f64 (*.f64 2/3 (*.f64 x 1/3)) (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 2/3 x) (*.f64 2/3 x)) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 2/3 x) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (*.f64 2/3 x) (*.f64 2/3 x)) (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (*.f64 2/3 x) (*.f64 1/3 (*.f64 2/3 x))) (*.f64 (*.f64 x 1/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (*.f64 2/3 x) (*.f64 (*.f64 x 1/3) 1/3)) (*.f64 1/3 (*.f64 2/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 1/3)) (pow.f64 (*.f64 x 1/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/27 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x 1/3) 2/3) (cbrt.f64 (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 1/9) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 1/3)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 1/3)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (*.f64 (sqrt.f64 1/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 -2/3 x) (*.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (-.f64 (*.f64 (pow.f64 x 2/3) 2/3) (*.f64 (pow.f64 x 2/3) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 (*.f64 8/27 x)) (cbrt.f64 (*.f64 1/27 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 2/3 x) 2/3) (+.f64 (pow.f64 (*.f64 x 1/3) 2/3) (cbrt.f64 (*.f64 (*.f64 1/3 (*.f64 2/3 x)) x)))) (-.f64 (cbrt.f64 (*.f64 2/3 x)) (cbrt.f64 (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x 1/3) 1/3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x 1/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x 1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 2/3 x)) (pow.f64 (*.f64 2/3 x) 2/3) (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2/3 x (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 2/3 (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 2/3 x) (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 2/3) (*.f64 (cbrt.f64 4/9) x) (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2/3 x) 1 (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 2/3 x) 2/3) (cbrt.f64 (*.f64 2/3 x)) (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) 2/3) (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 2/3)) (cbrt.f64 4/9) (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 8/27 x)) (pow.f64 x 2/3) (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 2/3)) (sqrt.f64 2/3) (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 2/3) (*.f64 (sqrt.f64 2/3) x) (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 -2/3 x) (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 (*.f64 x 1/3) (*.f64 1/3 (*.f64 2/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2/3 x) 1/3 (*.f64 (*.f64 x 1/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 (*.f64 2/3 x) (*.f64 (*.f64 x 1/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 1/3) 1/3 (*.f64 1/3 (*.f64 2/3 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (*.f64 x 1/3)) (*.f64 2/3 (*.f64 2/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (*.f64 2/3 x)) (*.f64 2/3 (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 1/3) 2/3) (*.f64 (*.f64 2/3 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 2/3 x) 2/3) (*.f64 (*.f64 x 1/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2/3 x)) (pow.f64 (*.f64 2/3 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 2/3 x) 2/3) (cbrt.f64 (*.f64 2/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 2/3)) (sqrt.f64 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 8/27 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2/3) (*.f64 (sqrt.f64 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2/3) (*.f64 (cbrt.f64 4/9) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 2/3)) (cbrt.f64 4/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2/3 x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 (*.f64 2/3 x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2/3 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2/3 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 2/3 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 2/3 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2/3 (*.f64 2/3 x) (*.f64 2/3 (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2/3 (*.f64 x 1/3) (*.f64 2/3 (*.f64 2/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 1/3) 2/3 (*.f64 (*.f64 2/3 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2/3 x) 2/3 (*.f64 (*.f64 x 1/3) 2/3))))))","((#(struct:change #<rule egg-rr> (2) ((x . x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 x) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 1/3) (*.f64 2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x 1/3) (*.f64 (*.f64 2/3 x) 2/3)) (*.f64 (*.f64 x 1/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x 1/3) (*.f64 (*.f64 x 1/3) 2/3)) (*.f64 (*.f64 2/3 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x 1/3) (*.f64 2/3 (*.f64 2/3 x))) (*.f64 2/3 (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x 1/3) (*.f64 2/3 (*.f64 x 1/3))) (*.f64 2/3 (*.f64 2/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 2/3 x) (*.f64 2/3 x)) (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 2/3 x) (*.f64 1/3 (*.f64 2/3 x))) (*.f64 (*.f64 x 1/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 2/3 x) (*.f64 (*.f64 x 1/3) 1/3)) (*.f64 1/3 (*.f64 2/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 1/3) 2/3) (+.f64 (*.f64 (*.f64 2/3 x) 2/3) (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 2/3 x) 2/3) (+.f64 (*.f64 (*.f64 x 1/3) 2/3) (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (*.f64 x 1/3)) (+.f64 (*.f64 2/3 (*.f64 2/3 x)) (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (*.f64 2/3 x)) (+.f64 (*.f64 2/3 (*.f64 x 1/3)) (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (*.f64 2/3 x)) (+.f64 (*.f64 (*.f64 x 1/3) 1/3) (*.f64 2/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 1/3) 1/3) (+.f64 (*.f64 1/3 (*.f64 2/3 x)) (*.f64 2/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 2/3 x) (*.f64 2/3 x)) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 2/3 x) (*.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (+.f64 (cbrt.f64 (*.f64 8/27 x)) (cbrt.f64 (*.f64 1/27 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (+.f64 (cbrt.f64 (*.f64 1/27 x)) (cbrt.f64 (*.f64 8/27 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 2/3 x) 2/3) (-.f64 (pow.f64 (*.f64 x 1/3) 2/3) (cbrt.f64 (*.f64 (*.f64 1/3 (*.f64 2/3 x)) x)))) (+.f64 (cbrt.f64 (*.f64 2/3 x)) (cbrt.f64 (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x 1/3) 2/3) (-.f64 (pow.f64 (*.f64 2/3 x) 2/3) (cbrt.f64 (*.f64 (*.f64 1/3 (*.f64 2/3 x)) x)))) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 (*.f64 2/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (+.f64 (*.f64 (pow.f64 x 2/3) 2/3) (*.f64 (pow.f64 x 2/3) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (+.f64 (*.f64 (pow.f64 x 2/3) 1/3) (*.f64 (pow.f64 x 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x 1/3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 x) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2/3 x (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 2/3 (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 2/3 x) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 2/3 x)) (pow.f64 (*.f64 2/3 x) 2/3) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x 1/3) (*.f64 2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x 1/3)) (pow.f64 (*.f64 x 1/3) 2/3) (*.f64 2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 1/3) 1 (*.f64 2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 1/9) x) (*.f64 2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) 1/3) (*.f64 2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/3) (*.f64 (sqrt.f64 1/3) x) (*.f64 2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 1/3)) (sqrt.f64 1/3) (*.f64 2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/27 x)) (pow.f64 x 2/3) (*.f64 2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 -1/3 x) (*.f64 2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 x 1/3) 2/3) (cbrt.f64 (*.f64 x 1/3)) (*.f64 2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 1/3)) (cbrt.f64 1/9) (*.f64 2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 2/3) (*.f64 (cbrt.f64 4/9) x) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2/3 x) 1 (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 2/3 x) 2/3) (cbrt.f64 (*.f64 2/3 x)) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) 2/3) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 2/3)) (cbrt.f64 4/9) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 8/27 x)) (pow.f64 x 2/3) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 2/3)) (sqrt.f64 2/3) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 2/3) (*.f64 (sqrt.f64 2/3) x) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 -2/3 x) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 x (*.f64 2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1/3 (*.f64 2/3 x))))))"]],"rules":[["egg-rr",64],["egg-rr",29],["egg-rr",61],["egg-rr",66]],"time":37.77783203125,"type":"rewrite"},{"count":[[279,222]],"inputs":[["(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","x","x","x","x","x","x","x","x","x","x","x","x"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 x) (*.f64 1/3 x)))","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 y y) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 y y) x)","(*.f64 1/3 x)","(*.f64 x 1/3)","(*.f64 1/3 x)","(*.f64 x 1/3)","(*.f64 1/3 x)","(*.f64 x 1/3)","(*.f64 1/3 x)","(*.f64 x 1/3)","(*.f64 1/3 x)","(*.f64 x 1/3)","(*.f64 1/3 x)","(*.f64 x 1/3)","(*.f64 1/3 x)","(*.f64 x 1/3)","(*.f64 1/3 x)","(*.f64 x 1/3)","(*.f64 1/3 x)","(*.f64 x 1/3)","(*.f64 1/3 x)","(*.f64 x 1/3)","(*.f64 1/3 x)","(*.f64 x 1/3)","(*.f64 1/3 x)","(*.f64 x 1/3)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","(*.f64 2/3 x)","x","x","x","x","x","x","x","x","x","x","x","x"]],"time":174.7939453125,"type":"simplify"},{"compiler":[[5026,3808]],"time":63.363037109375,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 3)","done",0.7987253418954711],["(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 (pow.f64 y 2) (fma.f64 (*.f64 x (cbrt.f64 1/3)) (cbrt.f64 1/9) (*.f64 2/3 x))))","fresh",4.356796289073768],["(fma.f64 y (*.f64 y x) x)","done",0.12109375],["(+.f64 (*.f64 (pow.f64 1 1/3) x) (fma.f64 (*.f64 2/3 x) (*.f64 y y) (*.f64 (*.f64 1/3 (*.f64 y y)) x)))","fresh",4.356132519536884],["(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 (pow.f64 y 2) (pow.f64 (cbrt.f64 x) 3)))","fresh",4.445018798842209],["(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 y (+.f64 (*.f64 (*.f64 x 1/3) y) (*.f64 (*.f64 2/3 x) y))))","fresh",0.19207001953688402],["(fma.f64 (cbrt.f64 (*.f64 y (*.f64 y x))) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 y x)) 2)) x)","fresh",10.020644733704378]],"compiler":[[11,7],[22,18],[8,4],[22,14],[16,13],[21,15],[18,9]],"count":[[228,7]],"kept":[{"done":[3,2],"fresh":[2,1],"new":[222,4],"picked":[1,0]}],"min-error":[0.01171875],"time":78.360107421875,"type":"prune"},{"accuracy":[0.12109375],"baseline":[0.12109375],"branch":[["x",0.12109375,1],["y",0.12109375,1],["(*.f64 x (+.f64 1 (*.f64 y y)))",0.12109375,1],["(+.f64 1 (*.f64 y y))",0.12109375,1],["(*.f64 y y)",0.12109375,1],["(*.f64 y y)",0.12109375,1]],"compiler":[[3,2],[3,2],[9,6],[7,5],[5,3],[5,3],[170,98]],"count":[[12,1]],"inputs":[["(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 (pow.f64 y 2) (fma.f64 (*.f64 x (cbrt.f64 1/3)) (cbrt.f64 1/9) (*.f64 2/3 x))))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (fma.f64 (*.f64 2/3 x) (*.f64 y y) (*.f64 (*.f64 1/3 (*.f64 y y)) x)))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 (pow.f64 y 2) (pow.f64 (cbrt.f64 x) 3)))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 y (+.f64 (*.f64 (*.f64 x 1/3) y) (*.f64 (*.f64 2/3 x) y))))","(fma.f64 (cbrt.f64 (*.f64 y (*.f64 y x))) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 y x)) 2)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) x)) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) x)))))","(fma.f64 (*.f64 y (cbrt.f64 (*.f64 y x))) (pow.f64 (*.f64 y x) 2/3) x)","(fma.f64 (*.f64 y (cbrt.f64 (*.f64 y x))) (pow.f64 (*.f64 y x) 2/3) x)","(pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 3)","(fma.f64 y (*.f64 y x) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 x (+.f64 1 (*.f64 y y)))"]],"link":["."],"name":["Numeric.Integration.TanhSinh:everywhere from integration-0.2.1"],"oracle":[34.647682698533785],"outputs":[["(fma.f64 y (*.f64 y x) x)"]],"time":26.046875,"times":[["x",4.662109375],["y",4.906982421875],["(*.f64 x (+.f64 1 (*.f64 y y)))",4.677001953125],["(+.f64 1 (*.f64 y y))",2.214111328125],["(*.f64 y y)",3.134033203125],["(*.f64 y y)",3.183837890625]],"type":"regimes"},{"compiler":[[8,4]],"inputs":[["(fma.f64 y (*.f64 y x) x)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 y (*.f64 y x) x)"]],"stop":[["fuel",1]],"time":31.8759765625,"type":"simplify"},{"time":0.01611328125,"type":"soundness"},{"compiler":[[8,4]],"remove-preprocessing":[[]],"time":7.4208984375,"type":"end"}]
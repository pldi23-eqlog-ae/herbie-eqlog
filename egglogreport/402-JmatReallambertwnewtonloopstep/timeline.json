[{"compiler":[[19,9]],"method":["search"],"sampling":[[12,0.4536582122091204,0.5453654637094587,0.0009763240814208984],[11,0.43902407633140683,0.5599995995871723,0.0009763240814208984],[10,0.4097558045759797,0.5892678713425994,0.0009763240814208984],[9,0.38243875093758106,0.616584924980998,0.0009763240814208984],[8,0.32780464366078377,0.6712190322577953,0.0009763240814208984],[7,0.2809754088521004,0.7180482670664787,0.0009763240814208984],[6,0.18731693923473358,0.8117067366838455,0.0009763240814208984],[5,0.12487795948982239,0.8741457164287567,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":96.64697265625,"type":"analyze"},{"outcomes":[["body",8192,"exit",816.3515625,3925],["body",256,"invalid",184.85595703125,4008],["body",1024,"valid",2.111572265625,14],["body",512,"valid",65.433837890625,688],["body",256,"valid",364.713134765625,7554]],"time":1449.132080078125,"type":"sample"},{"compiler":[[18,8]],"inputs":[["0","1"],["(-.f64 wj (/.f64 (-.f64 (*.f64 wj (exp.f64 wj)) x) (+.f64 (exp.f64 wj) (*.f64 wj (exp.f64 wj)))))","(-.f64 x (/.f64 (-.f64 (*.f64 x (exp.f64 x)) wj) (+.f64 (exp.f64 x) (*.f64 x (exp.f64 x)))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 wj (/.f64 (-.f64 (*.f64 wj (exp.f64 wj)) x) (+.f64 (exp.f64 wj) (*.f64 wj (exp.f64 wj)))))","(-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 (exp.f64 wj) wj (exp.f64 wj))))","(-.f64 x (/.f64 (-.f64 (*.f64 x (exp.f64 x)) wj) (+.f64 (exp.f64 x) (*.f64 x (exp.f64 x)))))","(-.f64 x (/.f64 (fma.f64 x (exp.f64 x) (neg.f64 wj)) (fma.f64 (exp.f64 x) x (exp.f64 x))))"]],"symmetry":[[]],"time":63.48486328125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 wj (/.f64 (-.f64 (*.f64 wj (exp.f64 wj)) x) (+.f64 (exp.f64 wj) (*.f64 wj (exp.f64 wj)))))"]],"method":["egg-herbie"],"outputs":[["(-.f64 wj (/.f64 (-.f64 (*.f64 wj (exp.f64 wj)) x) (+.f64 (exp.f64 wj) (*.f64 wj (exp.f64 wj)))))","(-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))"]],"time":20.735107421875,"type":"simplify"},{"compiler":[[33,13]],"time":0.384033203125,"type":"eval"},{"alts":[["(-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))","next",14.030664636487524]],"compiler":[[17,8],[17,8]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[14.030664636487524],"time":0.93994140625,"type":"prune"},{"compiler":[[48,8]],"locations":[["(fma.f64 wj (exp.f64 wj) (exp.f64 wj))",0.0234375,true],["(/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))",0.7461020043766449,true],["(-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))",5.184219920191718,true]],"time":8.491943359375,"type":"localize"},{"count":[[3,60]],"series":[["(fma.f64 wj (exp.f64 wj) (exp.f64 wj))","wj","-inf",0.291015625],["(fma.f64 wj (exp.f64 wj) (exp.f64 wj))","wj","inf",0.551025390625],["(fma.f64 wj (exp.f64 wj) (exp.f64 wj))","wj","0",0.177978515625],["(/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))","x","-inf",0.196044921875],["(/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))","x","inf",0.223876953125],["(/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))","x","0",0.2138671875],["(/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))","wj","-inf",0.402099609375],["(/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))","wj","inf",0.3349609375],["(/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))","wj","0",0.27294921875],["(-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))","x","-inf",0.39599609375],["(-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))","x","inf",0.5380859375],["(-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))","x","0",0.637939453125],["(-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))","wj","-inf",0.4599609375],["(-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))","wj","inf",0.462158203125],["(-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))","wj","0",0.614013671875]],"time":6.055908203125,"type":"series"},{"count":[[3,169]],"inputs":[["(-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))","(/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))","(fma.f64 wj (exp.f64 wj) (exp.f64 wj))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 wj (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) wj)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) 0) (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (*.f64 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))) (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (*.f64 0 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) wj))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) (neg.f64 wj))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 wj 0) (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) wj))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) wj) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 wj) (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) wj))) (cbrt.f64 (pow.f64 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 wj wj)) (+.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) 2)) (cbrt.f64 (/.f64 (*.f64 wj (fma.f64 wj (exp.f64 wj) (neg.f64 x))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))) (-.f64 (cbrt.f64 wj) (cbrt.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))) (cbrt.f64 (pow.f64 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) 2)) (cbrt.f64 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) wj)) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) wj))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) wj) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 wj) (cbrt.f64 (*.f64 wj wj)) (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (/.f64 1 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) wj)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) 2))) wj)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (/.f64 -1 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) wj)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 wj wj)) (cbrt.f64 wj) (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 wj) (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 wj (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) wj)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) 2)) wj)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) wj)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 wj 1 (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) 0) (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) (*.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) (neg.f64 x)) (*.f64 (/.f64 1 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) (*.f64 wj (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) (*.f64 wj (exp.f64 wj))) (*.f64 (/.f64 1 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) (*.f64 0 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 x) (/.f64 1 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (*.f64 (*.f64 wj (exp.f64 wj)) (/.f64 1 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 wj (exp.f64 wj)) (/.f64 1 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (*.f64 (neg.f64 x) (/.f64 1 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 wj (exp.f64 wj)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) (/.f64 x (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 (neg.f64 (+.f64 wj 1)) (exp.f64 wj))) (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) 2)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) (neg.f64 1/3)) (*.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 x (*.f64 wj (exp.f64 wj)))) 1) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) 2)) (*.f64 (neg.f64 (+.f64 wj 1)) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (/.f64 (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) 2))) (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x))) -1) (/.f64 (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) 2))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) 2)) (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (/.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x))) (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) 2)) -1) (/.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x))) (*.f64 (neg.f64 (+.f64 wj 1)) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) 2)) (/.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) 2)) (+.f64 wj 1)) (/.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x))) (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) 2)) (exp.f64 wj)) (/.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x))) (+.f64 wj 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) -1) (/.f64 -1 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (+.f64 wj 1)) (/.f64 1 (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (exp.f64 wj)) (/.f64 1 (+.f64 wj 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) -2))) (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 wj 1)) (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (exp.f64 wj)) (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (+.f64 wj 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x))) -1) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) 2)) (*.f64 (neg.f64 (+.f64 wj 1)) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x))) (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 2))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) 2)) (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x))) (+.f64 wj 1)) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) 2)) (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x))) (exp.f64 wj)) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) 2)) (+.f64 wj 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) -2)) (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 wj 1)) (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (exp.f64 wj)) (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (+.f64 wj 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (/.f64 -1 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (/.f64 1 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) 2)) (cbrt.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) (-.f64 x (*.f64 wj (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) -2))) (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) 2)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) (cbrt.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) 2)) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (*.f64 (neg.f64 (+.f64 wj 1)) (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) (neg.f64 1/3)) (fma.f64 wj (exp.f64 wj) (neg.f64 x))) (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) 2))) (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) 2)) (cbrt.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)))) (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) 2)) (cbrt.f64 (-.f64 x (*.f64 wj (exp.f64 wj))))) (cbrt.f64 (*.f64 (neg.f64 (+.f64 wj 1)) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) -2))) (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) 1) (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x (*.f64 wj (exp.f64 wj)))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) 2))) (cbrt.f64 (*.f64 (neg.f64 (+.f64 wj 1)) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) -1) (*.f64 (neg.f64 (+.f64 wj 1)) (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (+.f64 wj 1)) (exp.f64 wj))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (exp.f64 wj)) (+.f64 wj 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) 1) (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 x (*.f64 wj (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 wj) (*.f64 wj (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 0) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) (*.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (*.f64 (neg.f64 wj) (exp.f64 wj))) (exp.f64 wj))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) (*.f64 0 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (neg.f64 wj) (exp.f64 wj)) -1) (exp.f64 wj))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 (+.f64 wj 1)) (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 wj) (+.f64 wj 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 wj 1) (exp.f64 wj))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (+.f64 wj 1)) (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (+.f64 wj 1)) (exp.f64 wj)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) wj)) (+.f64 (cbrt.f64 (exp.f64 wj)) (*.f64 wj (cbrt.f64 (exp.f64 wj)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) wj)) (+.f64 (*.f64 wj (cbrt.f64 (exp.f64 wj))) (cbrt.f64 (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 (+.f64 wj 1)) (exp.f64 wj))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 wj 1) -1) (/.f64 (exp.f64 wj) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 wj 1) 1) (exp.f64 wj))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) -1) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 2)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 wj) -1) (/.f64 (+.f64 wj 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 wj) (/.f64 (+.f64 wj 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 2)) -1) (/.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 2)) (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 wj 1)) (exp.f64 wj)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (+.f64 wj 1)) (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 wj (exp.f64 wj) (exp.f64 wj)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 wj (exp.f64 wj) (exp.f64 wj))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 wj (exp.f64 wj))) (cbrt.f64 (pow.f64 (*.f64 wj (exp.f64 wj)) 2)) (exp.f64 wj))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 wj (cbrt.f64 (exp.f64 wj))) (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) wj)) (exp.f64 wj))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 wj) wj (exp.f64 wj))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 wj) (*.f64 (cbrt.f64 (*.f64 wj wj)) (exp.f64 wj)) (exp.f64 wj))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 wj)) (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) wj)) (*.f64 wj (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) wj)) (cbrt.f64 (exp.f64 wj)) (*.f64 wj (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (exp.f64 wj)) (*.f64 wj (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (exp.f64 wj) (*.f64 wj (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 wj) 1 (*.f64 wj (exp.f64 wj)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 wj (exp.f64 wj)) 1 (exp.f64 wj))))))"]],"rules":[["egg-rr",47],["egg-rr",76],["egg-rr",46]],"time":39.758056640625,"type":"rewrite"},{"count":[[229,230]],"inputs":[["x","(+.f64 (*.f64 -2 (*.f64 wj x)) x)","(+.f64 (*.f64 (-.f64 (+.f64 (*.f64 -3/2 x) (*.f64 2 (-.f64 1 (*.f64 -2 x)))) 1) (pow.f64 wj 2)) (+.f64 (*.f64 -2 (*.f64 wj x)) x))","(+.f64 (*.f64 (-.f64 (+.f64 (*.f64 -3/2 x) (*.f64 2 (-.f64 1 (*.f64 -2 x)))) 1) (pow.f64 wj 2)) (+.f64 (*.f64 (-.f64 (+.f64 (*.f64 2 (-.f64 1 (+.f64 (*.f64 -3/2 x) (*.f64 2 (-.f64 1 (*.f64 -2 x)))))) (+.f64 (*.f64 -2/3 x) (*.f64 3/2 (-.f64 1 (*.f64 -2 x))))) 1/2) (pow.f64 wj 3)) (+.f64 (*.f64 -2 (*.f64 wj x)) x)))","wj","(-.f64 wj 1)","(-.f64 (+.f64 (/.f64 1 wj) wj) (+.f64 1 (*.f64 -1 (/.f64 x (*.f64 wj (exp.f64 wj))))))","(-.f64 (+.f64 (/.f64 1 wj) (+.f64 (*.f64 -1 (/.f64 x (*.f64 (pow.f64 wj 2) (exp.f64 wj)))) wj)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (*.f64 wj (exp.f64 wj)))) (/.f64 1 (pow.f64 wj 2)))))","wj","(-.f64 wj 1)","(-.f64 (+.f64 (/.f64 1 wj) (+.f64 (/.f64 x (*.f64 (exp.f64 wj) wj)) wj)) 1)","(-.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) (pow.f64 wj 2))) (+.f64 (/.f64 1 wj) (+.f64 (/.f64 x (*.f64 wj (exp.f64 wj))) wj))) 1)","(-.f64 wj (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(-.f64 (+.f64 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) wj) (/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(-.f64 (+.f64 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) wj) (/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(-.f64 (+.f64 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) wj) (/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))","(-.f64 (+.f64 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) wj) (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(-.f64 (+.f64 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) wj) (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(-.f64 (+.f64 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) wj) (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))","(-.f64 (+.f64 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) wj) (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(-.f64 (+.f64 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) wj) (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(-.f64 (+.f64 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) wj) (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(*.f64 -1 x)","(+.f64 (*.f64 -1 x) (*.f64 (-.f64 1 (*.f64 -2 x)) wj))","(+.f64 (*.f64 (-.f64 1 (+.f64 (*.f64 -3/2 x) (*.f64 2 (-.f64 1 (*.f64 -2 x))))) (pow.f64 wj 2)) (+.f64 (*.f64 -1 x) (*.f64 (-.f64 1 (*.f64 -2 x)) wj)))","(+.f64 (*.f64 (-.f64 1/2 (+.f64 (*.f64 2 (-.f64 1 (+.f64 (*.f64 -3/2 x) (*.f64 2 (-.f64 1 (*.f64 -2 x)))))) (+.f64 (*.f64 -2/3 x) (*.f64 3/2 (-.f64 1 (*.f64 -2 x)))))) (pow.f64 wj 3)) (+.f64 (*.f64 (-.f64 1 (+.f64 (*.f64 -3/2 x) (*.f64 2 (-.f64 1 (*.f64 -2 x))))) (pow.f64 wj 2)) (+.f64 (*.f64 -1 x) (*.f64 (-.f64 1 (*.f64 -2 x)) wj))))","1","(-.f64 (+.f64 1 (*.f64 -1 (/.f64 x (*.f64 wj (exp.f64 wj))))) (/.f64 1 wj))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (*.f64 wj (exp.f64 wj)))) (/.f64 1 (pow.f64 wj 2)))) (+.f64 (/.f64 1 wj) (*.f64 -1 (/.f64 x (*.f64 (pow.f64 wj 2) (exp.f64 wj))))))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (*.f64 wj (exp.f64 wj)))) (+.f64 (/.f64 1 (pow.f64 wj 2)) (*.f64 -1 (/.f64 x (*.f64 (pow.f64 wj 3) (exp.f64 wj))))))) (+.f64 (/.f64 1 wj) (+.f64 (*.f64 -1 (/.f64 x (*.f64 (pow.f64 wj 2) (exp.f64 wj)))) (/.f64 1 (pow.f64 wj 3)))))","1","(+.f64 1 (*.f64 -1 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) wj)))","(+.f64 1 (+.f64 (/.f64 x (*.f64 (exp.f64 wj) (pow.f64 wj 2))) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) wj)) (/.f64 1 (pow.f64 wj 2)))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) (pow.f64 wj 3))) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) wj)) (+.f64 (/.f64 1 (pow.f64 wj 2)) (/.f64 x (*.f64 (pow.f64 wj 2) (exp.f64 wj)))))))","(/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))","(+.f64 (*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))) (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(+.f64 (*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))) (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(+.f64 (*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))) (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(+.f64 (/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) (*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))))","(+.f64 (/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) (*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))))","(+.f64 (/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) (*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))))","(*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(+.f64 (/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) (*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))))","(+.f64 (/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) (*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))))","(+.f64 (/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) (*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))))","1","(+.f64 1 (*.f64 2 wj))","(+.f64 1 (+.f64 (*.f64 3/2 (pow.f64 wj 2)) (*.f64 2 wj)))","(+.f64 1 (+.f64 (*.f64 3/2 (pow.f64 wj 2)) (+.f64 (*.f64 2/3 (pow.f64 wj 3)) (*.f64 2 wj))))","(*.f64 (exp.f64 wj) wj)","(+.f64 (*.f64 (exp.f64 wj) wj) (exp.f64 wj))","(+.f64 (*.f64 (exp.f64 wj) wj) (exp.f64 wj))","(+.f64 (*.f64 (exp.f64 wj) wj) (exp.f64 wj))","(*.f64 (exp.f64 wj) wj)","(+.f64 (*.f64 (exp.f64 wj) wj) (exp.f64 wj))","(+.f64 (*.f64 (exp.f64 wj) wj) (exp.f64 wj))","(+.f64 (*.f64 (exp.f64 wj) wj) (exp.f64 wj))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -2 (*.f64 wj x)) x)","(fma.f64 -2 (*.f64 wj x) x)","(+.f64 (*.f64 (-.f64 (+.f64 (*.f64 -3/2 x) (*.f64 2 (-.f64 1 (*.f64 -2 x)))) 1) (pow.f64 wj 2)) (+.f64 (*.f64 -2 (*.f64 wj x)) x))","(fma.f64 (+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1)) (*.f64 wj wj) (fma.f64 -2 (*.f64 wj x) x))","(+.f64 (*.f64 (-.f64 (+.f64 (*.f64 -3/2 x) (*.f64 2 (-.f64 1 (*.f64 -2 x)))) 1) (pow.f64 wj 2)) (+.f64 (*.f64 (-.f64 (+.f64 (*.f64 2 (-.f64 1 (+.f64 (*.f64 -3/2 x) (*.f64 2 (-.f64 1 (*.f64 -2 x)))))) (+.f64 (*.f64 -2/3 x) (*.f64 3/2 (-.f64 1 (*.f64 -2 x))))) 1/2) (pow.f64 wj 3)) (+.f64 (*.f64 -2 (*.f64 wj x)) x)))","(fma.f64 (+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1)) (*.f64 wj wj) (fma.f64 (+.f64 (fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))) -1/2) (pow.f64 wj 3) (fma.f64 -2 (*.f64 wj x) x)))","wj","(-.f64 wj 1)","(+.f64 wj -1)","(-.f64 (+.f64 (/.f64 1 wj) wj) (+.f64 1 (*.f64 -1 (/.f64 x (*.f64 wj (exp.f64 wj))))))","(+.f64 (+.f64 (/.f64 1 wj) (+.f64 wj -1)) (/.f64 x (*.f64 wj (exp.f64 wj))))","(-.f64 (+.f64 (/.f64 1 wj) (+.f64 (*.f64 -1 (/.f64 x (*.f64 (pow.f64 wj 2) (exp.f64 wj)))) wj)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (*.f64 wj (exp.f64 wj)))) (/.f64 1 (pow.f64 wj 2)))))","(-.f64 (+.f64 (/.f64 1 wj) (-.f64 wj (/.f64 x (*.f64 (*.f64 wj wj) (exp.f64 wj))))) (+.f64 (-.f64 1 (/.f64 x (*.f64 wj (exp.f64 wj)))) (pow.f64 wj -2)))","wj","(-.f64 wj 1)","(+.f64 wj -1)","(-.f64 (+.f64 (/.f64 1 wj) (+.f64 (/.f64 x (*.f64 (exp.f64 wj) wj)) wj)) 1)","(+.f64 (+.f64 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) wj) wj) -1)","(-.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) (pow.f64 wj 2))) (+.f64 (/.f64 1 wj) (+.f64 (/.f64 x (*.f64 wj (exp.f64 wj))) wj))) 1)","(+.f64 (-.f64 (+.f64 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) wj) wj) (*.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) (pow.f64 wj -2))) -1)","(-.f64 wj (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(-.f64 wj (/.f64 (*.f64 wj (exp.f64 wj)) (fma.f64 (exp.f64 wj) wj (exp.f64 wj))))","(-.f64 (+.f64 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) wj) (/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(neg.f64 (-.f64 (/.f64 (+.f64 (neg.f64 x) (*.f64 wj (exp.f64 wj))) (fma.f64 (exp.f64 wj) wj (exp.f64 wj))) wj))","(-.f64 (+.f64 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) wj) (/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(neg.f64 (-.f64 (/.f64 (+.f64 (neg.f64 x) (*.f64 wj (exp.f64 wj))) (fma.f64 (exp.f64 wj) wj (exp.f64 wj))) wj))","(-.f64 (+.f64 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) wj) (/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(neg.f64 (-.f64 (/.f64 (+.f64 (neg.f64 x) (*.f64 wj (exp.f64 wj))) (fma.f64 (exp.f64 wj) wj (exp.f64 wj))) wj))","(/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))","(/.f64 x (fma.f64 (exp.f64 wj) wj (exp.f64 wj)))","(-.f64 (+.f64 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) wj) (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(neg.f64 (-.f64 (/.f64 (+.f64 (neg.f64 x) (*.f64 wj (exp.f64 wj))) (fma.f64 (exp.f64 wj) wj (exp.f64 wj))) wj))","(-.f64 (+.f64 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) wj) (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(neg.f64 (-.f64 (/.f64 (+.f64 (neg.f64 x) (*.f64 wj (exp.f64 wj))) (fma.f64 (exp.f64 wj) wj (exp.f64 wj))) wj))","(-.f64 (+.f64 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) wj) (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(neg.f64 (-.f64 (/.f64 (+.f64 (neg.f64 x) (*.f64 wj (exp.f64 wj))) (fma.f64 (exp.f64 wj) wj (exp.f64 wj))) wj))","(/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))","(/.f64 x (fma.f64 (exp.f64 wj) wj (exp.f64 wj)))","(-.f64 (+.f64 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) wj) (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(neg.f64 (-.f64 (/.f64 (+.f64 (neg.f64 x) (*.f64 wj (exp.f64 wj))) (fma.f64 (exp.f64 wj) wj (exp.f64 wj))) wj))","(-.f64 (+.f64 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) wj) (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(neg.f64 (-.f64 (/.f64 (+.f64 (neg.f64 x) (*.f64 wj (exp.f64 wj))) (fma.f64 (exp.f64 wj) wj (exp.f64 wj))) wj))","(-.f64 (+.f64 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) wj) (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(neg.f64 (-.f64 (/.f64 (+.f64 (neg.f64 x) (*.f64 wj (exp.f64 wj))) (fma.f64 (exp.f64 wj) wj (exp.f64 wj))) wj))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1 x) (*.f64 (-.f64 1 (*.f64 -2 x)) wj))","(-.f64 (+.f64 wj (*.f64 wj (*.f64 2 x))) x)","(+.f64 (*.f64 (-.f64 1 (+.f64 (*.f64 -3/2 x) (*.f64 2 (-.f64 1 (*.f64 -2 x))))) (pow.f64 wj 2)) (+.f64 (*.f64 -1 x) (*.f64 (-.f64 1 (*.f64 -2 x)) wj)))","(fma.f64 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (*.f64 wj wj) (-.f64 (+.f64 wj (*.f64 wj (*.f64 2 x))) x))","(+.f64 (*.f64 (-.f64 1/2 (+.f64 (*.f64 2 (-.f64 1 (+.f64 (*.f64 -3/2 x) (*.f64 2 (-.f64 1 (*.f64 -2 x)))))) (+.f64 (*.f64 -2/3 x) (*.f64 3/2 (-.f64 1 (*.f64 -2 x)))))) (pow.f64 wj 3)) (+.f64 (*.f64 (-.f64 1 (+.f64 (*.f64 -3/2 x) (*.f64 2 (-.f64 1 (*.f64 -2 x))))) (pow.f64 wj 2)) (+.f64 (*.f64 -1 x) (*.f64 (-.f64 1 (*.f64 -2 x)) wj))))","(fma.f64 (-.f64 1/2 (fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2))))) (pow.f64 wj 3) (fma.f64 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (*.f64 wj wj) (-.f64 (+.f64 wj (*.f64 wj (*.f64 2 x))) x)))","1","(-.f64 (+.f64 1 (*.f64 -1 (/.f64 x (*.f64 wj (exp.f64 wj))))) (/.f64 1 wj))","(+.f64 (-.f64 1 (/.f64 x (*.f64 wj (exp.f64 wj)))) (/.f64 -1 wj))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (*.f64 wj (exp.f64 wj)))) (/.f64 1 (pow.f64 wj 2)))) (+.f64 (/.f64 1 wj) (*.f64 -1 (/.f64 x (*.f64 (pow.f64 wj 2) (exp.f64 wj))))))","(+.f64 (+.f64 (-.f64 (pow.f64 wj -2) (/.f64 x (*.f64 wj (exp.f64 wj)))) (-.f64 1 (/.f64 1 wj))) (/.f64 x (*.f64 (*.f64 wj wj) (exp.f64 wj))))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (*.f64 wj (exp.f64 wj)))) (+.f64 (/.f64 1 (pow.f64 wj 2)) (*.f64 -1 (/.f64 x (*.f64 (pow.f64 wj 3) (exp.f64 wj))))))) (+.f64 (/.f64 1 wj) (+.f64 (*.f64 -1 (/.f64 x (*.f64 (pow.f64 wj 2) (exp.f64 wj)))) (/.f64 1 (pow.f64 wj 3)))))","(-.f64 (+.f64 (-.f64 1 (/.f64 x (*.f64 wj (exp.f64 wj)))) (-.f64 (pow.f64 wj -2) (/.f64 x (*.f64 (pow.f64 wj 3) (exp.f64 wj))))) (+.f64 (/.f64 1 wj) (-.f64 (pow.f64 wj -3) (/.f64 x (*.f64 (*.f64 wj wj) (exp.f64 wj))))))","1","(+.f64 1 (*.f64 -1 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) wj)))","(-.f64 1 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) wj))","(+.f64 1 (+.f64 (/.f64 x (*.f64 (exp.f64 wj) (pow.f64 wj 2))) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) wj)) (/.f64 1 (pow.f64 wj 2)))))","(+.f64 (-.f64 1 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) wj)) (*.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) (pow.f64 wj -2)))","(+.f64 (*.f64 -1 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) (pow.f64 wj 3))) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) wj)) (+.f64 (/.f64 1 (pow.f64 wj 2)) (/.f64 x (*.f64 (pow.f64 wj 2) (exp.f64 wj)))))))","(-.f64 (+.f64 (-.f64 1 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) wj)) (*.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) (pow.f64 wj -2))) (*.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) (pow.f64 wj -3)))","(/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))","(/.f64 (*.f64 wj (exp.f64 wj)) (fma.f64 (exp.f64 wj) wj (exp.f64 wj)))","(+.f64 (*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))) (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(/.f64 (+.f64 (neg.f64 x) (*.f64 wj (exp.f64 wj))) (fma.f64 (exp.f64 wj) wj (exp.f64 wj)))","(+.f64 (*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))) (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(/.f64 (+.f64 (neg.f64 x) (*.f64 wj (exp.f64 wj))) (fma.f64 (exp.f64 wj) wj (exp.f64 wj)))","(+.f64 (*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))) (/.f64 (*.f64 wj (exp.f64 wj)) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(/.f64 (+.f64 (neg.f64 x) (*.f64 wj (exp.f64 wj))) (fma.f64 (exp.f64 wj) wj (exp.f64 wj)))","(*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(/.f64 (neg.f64 x) (fma.f64 (exp.f64 wj) wj (exp.f64 wj)))","(+.f64 (/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) (*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))))","(/.f64 (+.f64 (neg.f64 x) (*.f64 wj (exp.f64 wj))) (fma.f64 (exp.f64 wj) wj (exp.f64 wj)))","(+.f64 (/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) (*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))))","(/.f64 (+.f64 (neg.f64 x) (*.f64 wj (exp.f64 wj))) (fma.f64 (exp.f64 wj) wj (exp.f64 wj)))","(+.f64 (/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) (*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))))","(/.f64 (+.f64 (neg.f64 x) (*.f64 wj (exp.f64 wj))) (fma.f64 (exp.f64 wj) wj (exp.f64 wj)))","(*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))))","(/.f64 (neg.f64 x) (fma.f64 (exp.f64 wj) wj (exp.f64 wj)))","(+.f64 (/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) (*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))))","(/.f64 (+.f64 (neg.f64 x) (*.f64 wj (exp.f64 wj))) (fma.f64 (exp.f64 wj) wj (exp.f64 wj)))","(+.f64 (/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) (*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))))","(/.f64 (+.f64 (neg.f64 x) (*.f64 wj (exp.f64 wj))) (fma.f64 (exp.f64 wj) wj (exp.f64 wj)))","(+.f64 (/.f64 (*.f64 (exp.f64 wj) wj) (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj))) (*.f64 -1 (/.f64 x (+.f64 (*.f64 wj (exp.f64 wj)) (exp.f64 wj)))))","(/.f64 (+.f64 (neg.f64 x) (*.f64 wj (exp.f64 wj))) (fma.f64 (exp.f64 wj) wj (exp.f64 wj)))","1","(+.f64 1 (*.f64 2 wj))","(+.f64 1 (+.f64 (*.f64 3/2 (pow.f64 wj 2)) (*.f64 2 wj)))","(+.f64 1 (fma.f64 3/2 (*.f64 wj wj) (*.f64 2 wj)))","(+.f64 1 (+.f64 (*.f64 3/2 (pow.f64 wj 2)) (+.f64 (*.f64 2/3 (pow.f64 wj 3)) (*.f64 2 wj))))","(+.f64 1 (fma.f64 3/2 (*.f64 wj wj) (fma.f64 2/3 (pow.f64 wj 3) (*.f64 2 wj))))","(*.f64 (exp.f64 wj) wj)","(*.f64 wj (exp.f64 wj))","(+.f64 (*.f64 (exp.f64 wj) wj) (exp.f64 wj))","(fma.f64 (exp.f64 wj) wj (exp.f64 wj))","(+.f64 (*.f64 (exp.f64 wj) wj) (exp.f64 wj))","(fma.f64 (exp.f64 wj) wj (exp.f64 wj))","(+.f64 (*.f64 (exp.f64 wj) wj) (exp.f64 wj))","(fma.f64 (exp.f64 wj) wj (exp.f64 wj))","(*.f64 (exp.f64 wj) wj)","(*.f64 wj (exp.f64 wj))","(+.f64 (*.f64 (exp.f64 wj) wj) (exp.f64 wj))","(fma.f64 (exp.f64 wj) wj (exp.f64 wj))","(+.f64 (*.f64 (exp.f64 wj) wj) (exp.f64 wj))","(fma.f64 (exp.f64 wj) wj (exp.f64 wj))","(+.f64 (*.f64 (exp.f64 wj) wj) (exp.f64 wj))","(fma.f64 (exp.f64 wj) wj (exp.f64 wj))"]],"time":219.510986328125,"type":"simplify"},{"compiler":[[5087,1549]],"time":35.547119140625,"type":"eval"},{"alts":[["(fma.f64 (+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1)) (*.f64 wj wj) (fma.f64 (+.f64 (fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))) -1/2) (pow.f64 wj 3) (fma.f64 -2 (*.f64 wj x) x)))","next",1.1753076994278795],["(-.f64 wj (-.f64 (+.f64 (-.f64 1 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) wj)) (*.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) (pow.f64 wj -2))) (*.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) (pow.f64 wj -3))))","fresh",62.677750758332245],["(-.f64 wj (/.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (+.f64 wj 1)) (exp.f64 wj)))","fresh",13.989573154405944]],"compiler":[[54,42],[36,22],[17,10],[54,42],[36,22],[17,10]],"count":[[231,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[230,3],"picked":[1,0]}],"min-error":[0.058506397228147954],"time":73.56201171875,"type":"prune"},{"compiler":[[246,189]],"locations":[["(+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1))",0.04296875,true],["(+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2))",0.046875,true],["(fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))",0.20703125,true],["(fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2))))",0.27572250976844204,true]],"time":56.176025390625,"type":"localize"},{"count":[[4,48]],"series":[["(+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1))","x","-inf",0.22705078125],["(+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1))","x","inf",0.296875],["(+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1))","x","0",0.81591796875],["(+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2))","x","-inf",0.14501953125],["(+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2))","x","inf",0.14501953125],["(+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2))","x","0",0.1630859375],["(fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))","x","-inf",0.14892578125],["(fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))","x","inf",0.14599609375],["(fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))","x","0",0.166015625],["(fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2))))","x","-inf",0.535888671875],["(fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2))))","x","inf",0.576904296875],["(fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2))))","x","0",0.619140625]],"time":4.161865234375,"type":"series"},{"count":[[4,199]],"inputs":[["(fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2))))","(fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))","(+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2))","(+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2) (*.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))) (fma.f64 3 x 3/2)) (*.f64 -2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2) (+.f64 (*.f64 x 3) 2)) (*.f64 2 (*.f64 (fma.f64 -2 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2) (*.f64 2 (*.f64 (fma.f64 -2 x -1) 2))) (+.f64 (*.f64 x 3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2) (*.f64 (*.f64 (fma.f64 -2 x -1) 2) 2)) (*.f64 (+.f64 1 (*.f64 3/2 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2) (*.f64 (+.f64 1 (*.f64 3/2 x)) 2)) (*.f64 (*.f64 (fma.f64 -2 x -1) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (*.f64 (fma.f64 -2 x -1) 2)) (+.f64 (+.f64 (*.f64 x 3) 2) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x 3) 2) (+.f64 (*.f64 2 (*.f64 (fma.f64 -2 x -1) 2)) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 1 (*.f64 3/2 x)) 2) (+.f64 (*.f64 (*.f64 (fma.f64 -2 x -1) 2) 2) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 -2 x -1) 2) 2) (+.f64 (*.f64 (+.f64 1 (*.f64 3/2 x)) 2) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 -2/3 x) 3/2) (+.f64 (*.f64 x 3) (*.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 -2/3 3)) (+.f64 3/2 (*.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -2/3 x) (+.f64 (fma.f64 3 x 3/2) (*.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)) 0) (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)) (*.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2))) (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)) (*.f64 0 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))) (*.f64 -2/3 x)) (fma.f64 3 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 3 x 3/2) (+.f64 (*.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))) (*.f64 -2/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 (*.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))) (*.f64 -2/3 x)) 3/2) (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))) (+.f64 (*.f64 -2/3 x) 3/2)) (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (*.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))) (*.f64 -2/3 x)) 1) (fma.f64 3 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 (*.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))) (*.f64 -2/3 x)) (*.f64 x 3)) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))) (*.f64 x (+.f64 -2/3 3))) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (+.f64 (*.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))) (*.f64 -2/3 x)) (*.f64 x 3)) -3/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))) (*.f64 -2/3 x)) (+.f64 -3/2 (*.f64 -3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2))) (cbrt.f64 (pow.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)) 2)) (cbrt.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2) 0) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2) (*.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2) (*.f64 0 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -2/3 x) (fma.f64 3 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 3 x 3/2) (*.f64 -2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 -2/3 x) 3/2) (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 3) (+.f64 (*.f64 -2/3 x) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (*.f64 -2/3 x) 3/2) 1) (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 3/2 (*.f64 x (+.f64 -2/3 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (+.f64 -2/3 3)) 1) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (+.f64 -2/3 3)) -3/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 0) -3/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -2/3 x) (+.f64 -3/2 (*.f64 -3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x 3) (-.f64 -3/2 (*.f64 -2/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 -2/3 x) 3/2) (*.f64 -3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)) (cbrt.f64 (pow.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2) 2)) (cbrt.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (+.f64 -2/3 3)) 3) 27/8) (+.f64 (*.f64 (*.f64 x (+.f64 -2/3 3)) (*.f64 x (+.f64 -2/3 3))) (-.f64 9/4 (*.f64 (*.f64 x (+.f64 -2/3 3)) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -2/3 x (fma.f64 3 x 3/2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -2 x -1) 2) (*.f64 (fma.f64 x -3/2 -1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -2 x -1) 2) (+.f64 1 (*.f64 3/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 1 (*.f64 3/2 x)) (*.f64 2 (*.f64 -2 x))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 1 (*.f64 3/2 x)) (*.f64 (*.f64 -2 x) 2)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) 0) (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (*.f64 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))) (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) (*.f64 0 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (fma.f64 2 (fma.f64 x 2 1) -1)) (*.f64 3/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3/2 x) (neg.f64 (fma.f64 2 (fma.f64 x 2 1) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (*.f64 -2 x)) (+.f64 -2 (+.f64 1 (*.f64 3/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -2 x) 2) (+.f64 -2 (+.f64 1 (*.f64 3/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (*.f64 -2 x)) (-.f64 -2 (fma.f64 x -3/2 -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -2 x) 2) (-.f64 -2 (fma.f64 x -3/2 -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (*.f64 3/2 x)) (*.f64 (fma.f64 -2 x -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (*.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) (-.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))))) (/.f64 (pow.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) 3) (+.f64 1 (*.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) (-.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (fma.f64 2 (fma.f64 x 2 1) -1)) (*.f64 x -3/2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (fma.f64 -2 x -1) 2) (fma.f64 x -3/2 -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (fma.f64 -2 x -1) 2) (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (*.f64 x -3/2) 2) (*.f64 x -3/2))))) (/.f64 (pow.f64 (*.f64 x -3/2) 3) (+.f64 1 (+.f64 (pow.f64 (*.f64 x -3/2) 2) (*.f64 x -3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (fma.f64 -2 x -1) 2) 0) (fma.f64 x -3/2 -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (*.f64 x -3/2) 2) (*.f64 x -3/2)))) (-.f64 (/.f64 (pow.f64 (*.f64 x -3/2) 3) (+.f64 1 (+.f64 (pow.f64 (*.f64 x -3/2) 2) (*.f64 x -3/2)))) (*.f64 (fma.f64 -2 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (fma.f64 x -3/2 -1) (*.f64 (fma.f64 -2 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 3/2 x)) (*.f64 (fma.f64 x 2 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) 3)) (/.f64 1 (+.f64 1 (*.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) (-.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 x -3/2 -1) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x 2 1) 2) 2)) (*.f64 (cbrt.f64 (+.f64 1 (*.f64 3/2 x))) (cbrt.f64 (*.f64 (fma.f64 -2 x -1) 2))))) (+.f64 (cbrt.f64 (+.f64 1 (*.f64 3/2 x))) (cbrt.f64 (*.f64 (fma.f64 -2 x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x 2 1) 2) 2)) (-.f64 (cbrt.f64 (pow.f64 (fma.f64 x -3/2 -1) 2)) (*.f64 (cbrt.f64 (*.f64 (fma.f64 -2 x -1) 2)) (cbrt.f64 (+.f64 1 (*.f64 3/2 x)))))) (+.f64 (cbrt.f64 (*.f64 (fma.f64 -2 x -1) 2)) (cbrt.f64 (+.f64 1 (*.f64 3/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))) (cbrt.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)) 2)) (cbrt.f64 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) 3)) (+.f64 1 (*.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) (-.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) 3)) 1) (+.f64 1 (*.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) (-.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)) 3)) (+.f64 1 (*.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) (-.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) 3))) (neg.f64 (+.f64 1 (*.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) (-.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (fma.f64 x -3/2 -1) (*.f64 (fma.f64 -2 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (fma.f64 -2 x -1) 2)) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x 2 1) 2) 2)) (+.f64 1 (*.f64 3/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (cbrt.f64 (fma.f64 -2 x -1))) (cbrt.f64 (pow.f64 (fma.f64 x 2 1) 2)) (+.f64 1 (*.f64 3/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x 2 1) 2) 2)) (cbrt.f64 (*.f64 (fma.f64 -2 x -1) 2)) (+.f64 1 (*.f64 3/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 -2 x -1)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x 2 1) 2)) 2) (+.f64 1 (*.f64 3/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (fma.f64 -2 x -1)) (+.f64 1 (*.f64 3/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 -2 x -1) (sqrt.f64 2)) (sqrt.f64 2) (+.f64 1 (*.f64 3/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (fma.f64 x 2 1) 2) (+.f64 1 (*.f64 3/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 -2 x -1) (cbrt.f64 2)) (cbrt.f64 4) (+.f64 1 (*.f64 3/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 2) (fma.f64 -2 x -1)) (+.f64 1 (*.f64 3/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 1 (*.f64 3/2 x))) (cbrt.f64 (pow.f64 (fma.f64 x -3/2 -1) 2)) (*.f64 (fma.f64 -2 x -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 -2 x -1) 2 (+.f64 1 (*.f64 3/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (fma.f64 -2 x -1) (+.f64 1 (*.f64 3/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (fma.f64 -2 x -1) 2) (+.f64 1 (*.f64 3/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 1 (*.f64 3/2 x)) (*.f64 (fma.f64 -2 x -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 -2 x -1) 2) 1 (+.f64 1 (*.f64 3/2 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)) 0) (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)) (*.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1))) (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)) (*.f64 0 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x -3/2) (fma.f64 2 (fma.f64 x 2 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x 2 1) 2) (fma.f64 x -3/2 -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x -3/2 -1) (*.f64 (fma.f64 x 2 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2 (fma.f64 x 2 1) -1) (*.f64 x -3/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (*.f64 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (fma.f64 2 (fma.f64 x 2 1) -1)) -1) (*.f64 (*.f64 3/2 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (fma.f64 x 2 1) 2) (+.f64 1 (*.f64 3/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x -3/2) (neg.f64 (fma.f64 2 (fma.f64 x 2 1) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1))) (cbrt.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)) 2)) (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x -3/2) 2)) (-.f64 (cbrt.f64 (pow.f64 (fma.f64 2 (fma.f64 x 2 1) -1) 2)) (*.f64 (cbrt.f64 (*.f64 x -3/2)) (cbrt.f64 (fma.f64 2 (fma.f64 x 2 1) -1))))) (+.f64 (cbrt.f64 (*.f64 x -3/2)) (cbrt.f64 (fma.f64 2 (fma.f64 x 2 1) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 2 (fma.f64 x 2 1) -1) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 x -3/2) 2)) (*.f64 (cbrt.f64 (fma.f64 2 (fma.f64 x 2 1) -1)) (cbrt.f64 (*.f64 x -3/2))))) (+.f64 (cbrt.f64 (fma.f64 2 (fma.f64 x 2 1) -1)) (cbrt.f64 (*.f64 x -3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (-.f64 1 (pow.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) 3))) (+.f64 1 (*.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) (-.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) 3) -1) (+.f64 (pow.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) 2) (-.f64 1 (*.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) 3) 1) (+.f64 (pow.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) 2) (+.f64 1 (*.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 1 (fma.f64 (fma.f64 -2 x -1) 2 (*.f64 3/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 2 (fma.f64 x 2 1) -1)) (cbrt.f64 (pow.f64 (fma.f64 2 (fma.f64 x 2 1) -1) 2)) (*.f64 x -3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x -3/2)) (cbrt.f64 (pow.f64 (*.f64 x -3/2) 2)) (fma.f64 2 (fma.f64 x 2 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -3/2 x (fma.f64 2 (fma.f64 x 2 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 2 (fma.f64 x 2 1) -1) (*.f64 x -3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x -3/2) (fma.f64 2 (fma.f64 x 2 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x -3/2 (fma.f64 2 (fma.f64 x 2 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) (pow.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) 2) -1)))))"]],"rules":[["egg-rr",49],["egg-rr",73],["egg-rr",34],["egg-rr",43]],"time":48.277099609375,"type":"rewrite"},{"count":[[247,215]],"inputs":[["-1/2","(-.f64 (*.f64 -8/3 x) 1/2)","(-.f64 (*.f64 -8/3 x) 1/2)","(-.f64 (*.f64 -8/3 x) 1/2)","(*.f64 -8/3 x)","(-.f64 (*.f64 -8/3 x) 1/2)","(-.f64 (*.f64 -8/3 x) 1/2)","(-.f64 (*.f64 -8/3 x) 1/2)","(*.f64 -8/3 x)","(-.f64 (*.f64 -8/3 x) 1/2)","(-.f64 (*.f64 -8/3 x) 1/2)","(-.f64 (*.f64 -8/3 x) 1/2)","3/2","(+.f64 3/2 (*.f64 7/3 x))","(+.f64 3/2 (*.f64 7/3 x))","(+.f64 3/2 (*.f64 7/3 x))","(*.f64 7/3 x)","(+.f64 3/2 (*.f64 7/3 x))","(+.f64 3/2 (*.f64 7/3 x))","(+.f64 3/2 (*.f64 7/3 x))","(*.f64 7/3 x)","(+.f64 3/2 (*.f64 7/3 x))","(+.f64 3/2 (*.f64 7/3 x))","(+.f64 3/2 (*.f64 7/3 x))","-1","(-.f64 (*.f64 -5/2 x) 1)","(-.f64 (*.f64 -5/2 x) 1)","(-.f64 (*.f64 -5/2 x) 1)","(*.f64 -5/2 x)","(-.f64 (*.f64 -5/2 x) 1)","(-.f64 (*.f64 -5/2 x) 1)","(-.f64 (*.f64 -5/2 x) 1)","(*.f64 -5/2 x)","(-.f64 (*.f64 -5/2 x) 1)","(-.f64 (*.f64 -5/2 x) 1)","(-.f64 (*.f64 -5/2 x) 1)","1","(+.f64 1 (*.f64 5/2 x))","(+.f64 1 (*.f64 5/2 x))","(+.f64 1 (*.f64 5/2 x))","(*.f64 5/2 x)","(+.f64 1 (*.f64 5/2 x))","(+.f64 1 (*.f64 5/2 x))","(+.f64 1 (*.f64 5/2 x))","(*.f64 5/2 x)","(+.f64 1 (*.f64 5/2 x))","(+.f64 1 (*.f64 5/2 x))","(+.f64 1 (*.f64 5/2 x))"]],"method":["egg-herbie"],"outputs":[["-1/2","(-.f64 (*.f64 -8/3 x) 1/2)","(fma.f64 -8/3 x -1/2)","(-.f64 (*.f64 -8/3 x) 1/2)","(fma.f64 -8/3 x -1/2)","(-.f64 (*.f64 -8/3 x) 1/2)","(fma.f64 -8/3 x -1/2)","(*.f64 -8/3 x)","(-.f64 (*.f64 -8/3 x) 1/2)","(fma.f64 -8/3 x -1/2)","(-.f64 (*.f64 -8/3 x) 1/2)","(fma.f64 -8/3 x -1/2)","(-.f64 (*.f64 -8/3 x) 1/2)","(fma.f64 -8/3 x -1/2)","(*.f64 -8/3 x)","(-.f64 (*.f64 -8/3 x) 1/2)","(fma.f64 -8/3 x -1/2)","(-.f64 (*.f64 -8/3 x) 1/2)","(fma.f64 -8/3 x -1/2)","(-.f64 (*.f64 -8/3 x) 1/2)","(fma.f64 -8/3 x -1/2)","3/2","(+.f64 3/2 (*.f64 7/3 x))","(fma.f64 7/3 x 3/2)","(+.f64 3/2 (*.f64 7/3 x))","(fma.f64 7/3 x 3/2)","(+.f64 3/2 (*.f64 7/3 x))","(fma.f64 7/3 x 3/2)","(*.f64 7/3 x)","(+.f64 3/2 (*.f64 7/3 x))","(fma.f64 7/3 x 3/2)","(+.f64 3/2 (*.f64 7/3 x))","(fma.f64 7/3 x 3/2)","(+.f64 3/2 (*.f64 7/3 x))","(fma.f64 7/3 x 3/2)","(*.f64 7/3 x)","(+.f64 3/2 (*.f64 7/3 x))","(fma.f64 7/3 x 3/2)","(+.f64 3/2 (*.f64 7/3 x))","(fma.f64 7/3 x 3/2)","(+.f64 3/2 (*.f64 7/3 x))","(fma.f64 7/3 x 3/2)","-1","(-.f64 (*.f64 -5/2 x) 1)","(fma.f64 -5/2 x -1)","(-.f64 (*.f64 -5/2 x) 1)","(fma.f64 -5/2 x -1)","(-.f64 (*.f64 -5/2 x) 1)","(fma.f64 -5/2 x -1)","(*.f64 -5/2 x)","(-.f64 (*.f64 -5/2 x) 1)","(fma.f64 -5/2 x -1)","(-.f64 (*.f64 -5/2 x) 1)","(fma.f64 -5/2 x -1)","(-.f64 (*.f64 -5/2 x) 1)","(fma.f64 -5/2 x -1)","(*.f64 -5/2 x)","(-.f64 (*.f64 -5/2 x) 1)","(fma.f64 -5/2 x -1)","(-.f64 (*.f64 -5/2 x) 1)","(fma.f64 -5/2 x -1)","(-.f64 (*.f64 -5/2 x) 1)","(fma.f64 -5/2 x -1)","1","(+.f64 1 (*.f64 5/2 x))","(fma.f64 x 5/2 1)","(+.f64 1 (*.f64 5/2 x))","(fma.f64 x 5/2 1)","(+.f64 1 (*.f64 5/2 x))","(fma.f64 x 5/2 1)","(*.f64 5/2 x)","(+.f64 1 (*.f64 5/2 x))","(fma.f64 x 5/2 1)","(+.f64 1 (*.f64 5/2 x))","(fma.f64 x 5/2 1)","(+.f64 1 (*.f64 5/2 x))","(fma.f64 x 5/2 1)","(*.f64 5/2 x)","(+.f64 1 (*.f64 5/2 x))","(fma.f64 x 5/2 1)","(+.f64 1 (*.f64 5/2 x))","(fma.f64 x 5/2 1)","(+.f64 1 (*.f64 5/2 x))","(fma.f64 x 5/2 1)"]],"time":157.14404296875,"type":"simplify"},{"compiler":[[11840,8793]],"time":156.5498046875,"type":"eval"},{"alts":[["(fma.f64 (+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1)) (*.f64 wj wj) (fma.f64 (+.f64 (fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))) -1/2) (pow.f64 wj 3) (fma.f64 -2 (*.f64 wj x) x)))","done",1.1753076994278795],["(fma.f64 (+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1)) (*.f64 wj wj) (fma.f64 (+.f64 (fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (*.f64 7/3 x)) -1/2) (pow.f64 wj 3) (fma.f64 -2 (*.f64 wj x) x)))","fresh",1.4796286527818125],["(fma.f64 (fma.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) (pow.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) 2) -1) (*.f64 wj wj) (fma.f64 (+.f64 (fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))) -1/2) (pow.f64 wj 3) (fma.f64 -2 (*.f64 wj x) x)))","next",1.3212414581959755],["(-.f64 wj (-.f64 (+.f64 (-.f64 1 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) wj)) (*.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) (pow.f64 wj -2))) (*.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) (pow.f64 wj -3))))","fresh",62.677750758332245],["(-.f64 wj (/.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (+.f64 wj 1)) (exp.f64 wj)))","fresh",13.989573154405944]],"compiler":[[54,42],[47,36],[66,52],[36,22],[17,10],[47,36],[66,52],[36,22],[17,10]],"count":[[218,5]],"kept":[{"done":[0,0],"fresh":[2,2],"new":[215,2],"picked":[1,1]}],"min-error":[0.054598749701171546],"time":104.8740234375,"type":"prune"},{"compiler":[[298,231]],"locations":[["(fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))",0.20703125,false],["(pow.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) 2)",0.2421875,true],["(fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2))))",0.27572250976844204,false],["(fma.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) (pow.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) 2) -1)",0.670253759768442,true]],"time":73.30712890625,"type":"localize"},{"count":[[2,10]],"series":[["(pow.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) 2)","x","-inf",0.31298828125],["(pow.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) 2)","x","inf",0.299072265625],["(pow.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) 2)","x","0",0.336181640625],["(fma.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) (pow.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) 2) -1)","x","-inf",0.43505859375],["(fma.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) (pow.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) 2) -1)","x","inf",0.91796875],["(fma.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) (pow.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) 2) -1)","x","0",1.697021484375]],"time":4.121826171875,"type":"series"},{"count":[[2,82]],"inputs":[["(fma.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) (pow.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) 2) -1)","(pow.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 -1 (*.f64 x -3/2)) (fma.f64 2 (+.f64 x x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2 (+.f64 x x) 2) (+.f64 (*.f64 x -3/2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2 (+.f64 x x) 2) (-.f64 (*.f64 x -3/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1)) (*.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1)) 0) (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1)) (*.f64 0 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1))) (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x -3/2) (*.f64 (+.f64 (*.f64 2 (+.f64 x x)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x -3/2) (+.f64 (*.f64 2 (+.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 2 (+.f64 x x)) 1) (*.f64 x -3/2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 1 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1))) (pow.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3) (-.f64 1 (cbrt.f64 (neg.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))))) (+.f64 (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3) (cbrt.f64 (neg.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))))) (+.f64 -1 (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3) (+.f64 1 (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2))))) (-.f64 (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1)) 2/3) (cbrt.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 3) -1) (/.f64 1 (+.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2) (+.f64 1 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 3) -1) (+.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2) (+.f64 1 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 3) -1) 1) (*.f64 (+.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2) (+.f64 1 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 3) -1)) (neg.f64 (+.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2) (+.f64 1 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 3) -1) (+.f64 1 (-.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2) (neg.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 3) -1) 1) (+.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2) (+.f64 1 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 1 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2))) (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))) 5) (cbrt.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 4/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))) (pow.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3) 4/3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3) (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x -3/2 (+.f64 (*.f64 2 (+.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 -3/2)) (cbrt.f64 9/4) (+.f64 (*.f64 2 (+.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) -3/2) (+.f64 (*.f64 2 (+.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x -3/2)) (cbrt.f64 (*.f64 (*.f64 x x) 9/4)) (+.f64 (*.f64 2 (+.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -3/2 x (+.f64 (*.f64 2 (+.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 1 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -1 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x -3/2) (+.f64 (*.f64 2 (+.f64 x x)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3) (*.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3) 0) (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3) (*.f64 0 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3)) (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2))) (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))) (cbrt.f64 (neg.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3)) (cbrt.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 4/3)) (cbrt.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))) 5) (cbrt.f64 (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))) 1) (*.f64 (cbrt.f64 (neg.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -3/2 x (fma.f64 2 (+.f64 x x) 2)) 2))))))"]],"rules":[["egg-rr",25],["egg-rr",57]],"time":27.772216796875,"type":"rewrite"},{"count":[[92,98]],"inputs":[["1","(+.f64 1 (*.f64 (+.f64 (*.f64 5/6 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3)) (*.f64 5/3 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3))) x))","(+.f64 1 (+.f64 (*.f64 (+.f64 (*.f64 5/6 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3)) (*.f64 5/3 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3))) x) (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 25/36 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3)) (*.f64 -25/18 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3))) (cbrt.f64 2)) (+.f64 (*.f64 25/18 (pow.f64 (/.f64 1 (cbrt.f64 2)) 1/3)) (*.f64 -25/36 (pow.f64 (/.f64 1 (cbrt.f64 2)) 1/3)))) (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 (+.f64 (*.f64 5/6 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3)) (*.f64 5/3 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3))) x) (+.f64 (*.f64 (+.f64 (*.f64 (cbrt.f64 2) (+.f64 (*.f64 -125/216 (pow.f64 1 1/3)) (*.f64 -2/3 (/.f64 (+.f64 (*.f64 125/216 (/.f64 1 (pow.f64 (cbrt.f64 2) 2))) (*.f64 -125/36 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 2) 2))))) (cbrt.f64 2))))) (+.f64 (*.f64 -1/3 (+.f64 (*.f64 125/216 (/.f64 1 (pow.f64 (cbrt.f64 2) 2))) (*.f64 -125/36 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 2) 2)))))) (+.f64 (*.f64 5/6 (*.f64 (+.f64 (*.f64 25/36 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3)) (*.f64 -25/18 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3))) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 2)) 1/3))) (*.f64 -125/108 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 2) 2))))))) (pow.f64 x 3)) (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 25/36 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3)) (*.f64 -25/18 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3))) (cbrt.f64 2)) (+.f64 (*.f64 25/18 (pow.f64 (/.f64 1 (cbrt.f64 2)) 1/3)) (*.f64 -25/36 (pow.f64 (/.f64 1 (cbrt.f64 2)) 1/3)))) (pow.f64 x 2)))))","-1","-1","(pow.f64 (cbrt.f64 2) 2)","(+.f64 (pow.f64 (cbrt.f64 2) 2) (*.f64 5/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 2)) 1/3) x)))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (+.f64 (*.f64 5/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 2)) 1/3) x)) (*.f64 (+.f64 (*.f64 25/36 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3)) (*.f64 -25/18 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3))) (pow.f64 x 2))))","(+.f64 (*.f64 (+.f64 (*.f64 -125/216 (pow.f64 1 1/3)) (*.f64 -2/3 (/.f64 (+.f64 (*.f64 125/216 (/.f64 1 (pow.f64 (cbrt.f64 2) 2))) (*.f64 -125/36 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 2) 2))))) (cbrt.f64 2)))) (pow.f64 x 3)) (+.f64 (pow.f64 (cbrt.f64 2) 2) (+.f64 (*.f64 5/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 2)) 1/3) x)) (*.f64 (+.f64 (*.f64 25/36 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3)) (*.f64 -25/18 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3))) (pow.f64 x 2)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 (+.f64 (*.f64 5/6 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3)) (*.f64 5/3 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3))) x))","(fma.f64 x (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 2) 4)) 5/2) 1)","(+.f64 1 (+.f64 (*.f64 (+.f64 (*.f64 5/6 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3)) (*.f64 5/3 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3))) x) (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 25/36 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3)) (*.f64 -25/18 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3))) (cbrt.f64 2)) (+.f64 (*.f64 25/18 (pow.f64 (/.f64 1 (cbrt.f64 2)) 1/3)) (*.f64 -25/36 (pow.f64 (/.f64 1 (cbrt.f64 2)) 1/3)))) (pow.f64 x 2))))","(+.f64 (fma.f64 x (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 2) 4)) 5/2) 1) (*.f64 (fma.f64 (/.f64 1 (cbrt.f64 (cbrt.f64 2))) 25/36 (cbrt.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 2) -4) -15625/46656) 2))) (*.f64 x x)))","(+.f64 1 (+.f64 (*.f64 (+.f64 (*.f64 5/6 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3)) (*.f64 5/3 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3))) x) (+.f64 (*.f64 (+.f64 (*.f64 (cbrt.f64 2) (+.f64 (*.f64 -125/216 (pow.f64 1 1/3)) (*.f64 -2/3 (/.f64 (+.f64 (*.f64 125/216 (/.f64 1 (pow.f64 (cbrt.f64 2) 2))) (*.f64 -125/36 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 2) 2))))) (cbrt.f64 2))))) (+.f64 (*.f64 -1/3 (+.f64 (*.f64 125/216 (/.f64 1 (pow.f64 (cbrt.f64 2) 2))) (*.f64 -125/36 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 2) 2)))))) (+.f64 (*.f64 5/6 (*.f64 (+.f64 (*.f64 25/36 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3)) (*.f64 -25/18 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3))) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 2)) 1/3))) (*.f64 -125/108 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 2) 2))))))) (pow.f64 x 3)) (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 25/36 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3)) (*.f64 -25/18 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3))) (cbrt.f64 2)) (+.f64 (*.f64 25/18 (pow.f64 (/.f64 1 (cbrt.f64 2)) 1/3)) (*.f64 -25/36 (pow.f64 (/.f64 1 (cbrt.f64 2)) 1/3)))) (pow.f64 x 2)))))","(+.f64 (fma.f64 x (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 2) 4)) 5/2) 1) (fma.f64 (fma.f64 (cbrt.f64 2) (fma.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 2) -2) (+.f64 -125/36 125/216)) (cbrt.f64 2)) -2/3 -125/216) (fma.f64 (*.f64 (pow.f64 (cbrt.f64 2) -2) (+.f64 -125/36 125/216)) -1/3 (fma.f64 5/6 (cbrt.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 2) -4) -15625/46656) (pow.f64 (cbrt.f64 2) -2))) (/.f64 -125/108 (cbrt.f64 (*.f64 2 2)))))) (pow.f64 x 3) (*.f64 (fma.f64 (/.f64 1 (cbrt.f64 (cbrt.f64 2))) 25/36 (cbrt.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 2) -4) -15625/46656) 2))) (*.f64 x x))))","-1","-1","(pow.f64 (cbrt.f64 2) 2)","(cbrt.f64 (*.f64 2 2))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (*.f64 5/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 2)) 1/3) x)))","(fma.f64 (*.f64 (cbrt.f64 (cbrt.f64 2)) x) 5/3 (cbrt.f64 (*.f64 2 2)))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (+.f64 (*.f64 5/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 2)) 1/3) x)) (*.f64 (+.f64 (*.f64 25/36 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3)) (*.f64 -25/18 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3))) (pow.f64 x 2))))","(+.f64 (cbrt.f64 (*.f64 2 2)) (fma.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 2) -4)) -25/36) (*.f64 x x) (*.f64 (*.f64 5/3 (cbrt.f64 (cbrt.f64 2))) x)))","(+.f64 (*.f64 (+.f64 (*.f64 -125/216 (pow.f64 1 1/3)) (*.f64 -2/3 (/.f64 (+.f64 (*.f64 125/216 (/.f64 1 (pow.f64 (cbrt.f64 2) 2))) (*.f64 -125/36 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 2) 2))))) (cbrt.f64 2)))) (pow.f64 x 3)) (+.f64 (pow.f64 (cbrt.f64 2) 2) (+.f64 (*.f64 5/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 2)) 1/3) x)) (*.f64 (+.f64 (*.f64 25/36 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3)) (*.f64 -25/18 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3))) (pow.f64 x 2)))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 2) -2) (+.f64 -125/36 125/216)) (cbrt.f64 2)) -2/3 -125/216) (pow.f64 x 3) (+.f64 (cbrt.f64 (*.f64 2 2)) (fma.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 2) -4)) -25/36) (*.f64 x x) (*.f64 (*.f64 5/3 (cbrt.f64 (cbrt.f64 2))) x))))"]],"time":45.747802734375,"type":"simplify"},{"compiler":[[11891,8821]],"time":143.59912109375,"type":"eval"},{"alts":[["(fma.f64 (+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1)) (*.f64 wj wj) (fma.f64 (+.f64 (fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))) -1/2) (pow.f64 wj 3) (fma.f64 -2 (*.f64 wj x) x)))","done",1.1753076994278795],["(fma.f64 (+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1)) (*.f64 wj wj) (fma.f64 (+.f64 (fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (*.f64 7/3 x)) -1/2) (pow.f64 wj 3) (fma.f64 -2 (*.f64 wj x) x)))","next",1.4796286527818125],["(fma.f64 (fma.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) (pow.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) 2) -1) (*.f64 wj wj) (fma.f64 (+.f64 (fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))) -1/2) (pow.f64 wj 3) (fma.f64 -2 (*.f64 wj x) x)))","done",1.3212414581959755],["(-.f64 wj (-.f64 (+.f64 (-.f64 1 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) wj)) (*.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) (pow.f64 wj -2))) (*.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) (pow.f64 wj -3))))","fresh",62.677750758332245],["(-.f64 wj (/.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (+.f64 wj 1)) (exp.f64 wj)))","fresh",13.989573154405944]],"compiler":[[54,42],[47,36],[66,52],[36,22],[17,10],[47,36],[36,22],[17,10]],"count":[[188,5]],"kept":[{"done":[1,1],"fresh":[3,3],"new":[183,0],"picked":[1,1]}],"min-error":[0.054598749701171546],"time":64.4189453125,"type":"prune"},{"compiler":[[198,148]],"locations":[["(+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1))",0.04296875,false],["(+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2))",0.046875,false],["(fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (*.f64 7/3 x))",0.248378759768442,true],["(*.f64 7/3 x)",0.39453125,true]],"time":45.60205078125,"type":"localize"},{"count":[[2,12]],"series":[["(fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (*.f64 7/3 x))","x","-inf",0.158203125],["(fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (*.f64 7/3 x))","x","inf",0.17822265625],["(fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (*.f64 7/3 x))","x","0",0.16796875],["(*.f64 7/3 x)","x","-inf",0.300048828125],["(*.f64 7/3 x)","x","inf",0.31982421875],["(*.f64 7/3 x)","x","0",0.31201171875]],"time":1.511962890625,"type":"series"},{"count":[[2,77]],"inputs":[["(*.f64 7/3 x)","(fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (*.f64 7/3 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 7/3 x) 0) (*.f64 7/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 7/3 x) (*.f64 (*.f64 7/3 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 7/3 x)) (*.f64 7/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 7/3 x) (*.f64 0 (*.f64 7/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 7/3)) (cbrt.f64 49/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 7/3) (*.f64 (cbrt.f64 49/9) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 7/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 7/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 7/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 7/3 x)) (cbrt.f64 (pow.f64 (*.f64 7/3 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 7/3 x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x 7/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 7/3 x) 2)) (cbrt.f64 (*.f64 7/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 7/3)) (sqrt.f64 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 343/27 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 7/3) (*.f64 (sqrt.f64 7/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 7/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 7/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 7/3 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 7/3 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 7/3 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 7/3 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 7/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 7/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 7/3 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 7/3 x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))) (*.f64 7/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 7/3 x) (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 7/3 x) (*.f64 (fma.f64 3/2 x 1) 2)) (*.f64 (fma.f64 (*.f64 -2 x) 2 -2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 7/3 x) (*.f64 2 (fma.f64 (*.f64 -2 x) 2 -2))) (*.f64 2 (fma.f64 3/2 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 7/3 x) (*.f64 2 (fma.f64 3/2 x 1))) (*.f64 2 (fma.f64 (*.f64 -2 x) 2 -2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 7/3 x) (*.f64 (fma.f64 (*.f64 -2 x) 2 -2) 2)) (*.f64 (fma.f64 3/2 x 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (*.f64 -2 x) 2 -2) 2) (+.f64 (*.f64 (fma.f64 3/2 x 1) 2) (*.f64 7/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (fma.f64 3/2 x 1)) (+.f64 (*.f64 2 (fma.f64 (*.f64 -2 x) 2 -2)) (*.f64 7/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (fma.f64 (*.f64 -2 x) 2 -2)) (+.f64 (*.f64 2 (fma.f64 3/2 x 1)) (*.f64 7/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 3/2 x 1) 2) (+.f64 (*.f64 (fma.f64 (*.f64 -2 x) 2 -2) 2) (*.f64 7/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x)) 0) (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x)) (*.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x))) (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x)) (*.f64 0 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x))) (cbrt.f64 (pow.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x)) 2)) (cbrt.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) (*.f64 7/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))) (*.f64 7/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)))) (cbrt.f64 (pow.f64 (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))) 2)) (*.f64 7/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))) (*.f64 7/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 8 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)))) (cbrt.f64 (pow.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2)) (*.f64 7/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1)) 2 (*.f64 7/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 2) (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))) (*.f64 7/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))) 1 (*.f64 7/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 343/27 x)) (cbrt.f64 (*.f64 x x)) (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 7/3 x) 2)) (cbrt.f64 (*.f64 7/3 x)) (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 7/3) (*.f64 (sqrt.f64 7/3) x) (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 7/3 x)) (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 7/3 (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 7/3) (*.f64 (cbrt.f64 49/9) x) (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 7/3 x) (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 7/3)) (cbrt.f64 49/9) (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 7/3 x (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 7/3 x)) (cbrt.f64 (pow.f64 (*.f64 7/3 x) 2)) (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 7/3 x) 1 (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 7/3)) (sqrt.f64 7/3) (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) 7/3) (*.f64 2 (fma.f64 2 (fma.f64 -2 x -1) (fma.f64 3/2 x 1))))))))"]],"rules":[["egg-rr",50],["egg-rr",27]],"time":27.9150390625,"type":"rewrite"},{"count":[[89,81]],"inputs":[["-2","(-.f64 (*.f64 -8/3 x) 2)","(-.f64 (*.f64 -8/3 x) 2)","(-.f64 (*.f64 -8/3 x) 2)","(*.f64 -8/3 x)","(-.f64 (*.f64 -8/3 x) 2)","(-.f64 (*.f64 -8/3 x) 2)","(-.f64 (*.f64 -8/3 x) 2)","(*.f64 -8/3 x)","(-.f64 (*.f64 -8/3 x) 2)","(-.f64 (*.f64 -8/3 x) 2)","(-.f64 (*.f64 -8/3 x) 2)"]],"method":["egg-herbie"],"outputs":[["-2","(-.f64 (*.f64 -8/3 x) 2)","(fma.f64 -8/3 x -2)","(-.f64 (*.f64 -8/3 x) 2)","(fma.f64 -8/3 x -2)","(-.f64 (*.f64 -8/3 x) 2)","(fma.f64 -8/3 x -2)","(*.f64 -8/3 x)","(-.f64 (*.f64 -8/3 x) 2)","(fma.f64 -8/3 x -2)","(-.f64 (*.f64 -8/3 x) 2)","(fma.f64 -8/3 x -2)","(-.f64 (*.f64 -8/3 x) 2)","(fma.f64 -8/3 x -2)","(*.f64 -8/3 x)","(-.f64 (*.f64 -8/3 x) 2)","(fma.f64 -8/3 x -2)","(-.f64 (*.f64 -8/3 x) 2)","(fma.f64 -8/3 x -2)","(-.f64 (*.f64 -8/3 x) 2)","(fma.f64 -8/3 x -2)"]],"time":47.260986328125,"type":"simplify"},{"compiler":[[10385,7521]],"time":128.781982421875,"type":"eval"},{"alts":[["(fma.f64 (+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1)) (*.f64 wj wj) (fma.f64 (+.f64 (fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))) -1/2) (pow.f64 wj 3) (fma.f64 -2 (*.f64 wj x) x)))","done",1.1753076994278795],["(fma.f64 (+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1)) (*.f64 wj wj) (fma.f64 (+.f64 (fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (*.f64 7/3 x)) -1/2) (pow.f64 wj 3) (fma.f64 -2 (*.f64 wj x) x)))","done",1.4796286527818125],["(fma.f64 (fma.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) (pow.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) 2) -1) (*.f64 wj wj) (fma.f64 (+.f64 (fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))) -1/2) (pow.f64 wj 3) (fma.f64 -2 (*.f64 wj x) x)))","done",1.3212414581959755],["(-.f64 wj (-.f64 (+.f64 (-.f64 1 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) wj)) (*.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) (pow.f64 wj -2))) (*.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) (pow.f64 wj -3))))","fresh",62.677750758332245],["(-.f64 wj (/.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (+.f64 wj 1)) (exp.f64 wj)))","fresh",13.989573154405944]],"compiler":[[54,42],[47,36],[66,52],[36,22],[17,10]],"count":[[216,5]],"kept":[{"done":[2,2],"fresh":[2,2],"new":[211,0],"picked":[1,1]}],"min-error":[0.054598749701171546],"time":100.6279296875,"type":"prune"},{"accuracy":[1.1753076994278793],"baseline":[1.1753076994278795],"branch":[["wj",1.1753076994278793,1],["x",1.1753076994278795,1],["(-.f64 wj (/.f64 (-.f64 (*.f64 wj (exp.f64 wj)) x) (+.f64 (exp.f64 wj) (*.f64 wj (exp.f64 wj)))))",1.1753076994278793,1]],"compiler":[[3,2],[3,2],[18,8],[243,157]],"count":[[7,1]],"inputs":[["(fma.f64 (+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1)) (*.f64 wj wj) (fma.f64 (+.f64 (fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (*.f64 7/3 x)) -1/2) (pow.f64 wj 3) (fma.f64 -2 (*.f64 wj x) x)))","(fma.f64 (fma.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) (pow.f64 (cbrt.f64 (fma.f64 x -3/2 (*.f64 (fma.f64 x 2 1) 2))) 2) -1) (*.f64 wj wj) (fma.f64 (+.f64 (fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))) -1/2) (pow.f64 wj 3) (fma.f64 -2 (*.f64 wj x) x)))","(fma.f64 (+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1)) (*.f64 wj wj) (fma.f64 (+.f64 (fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))) -1/2) (pow.f64 wj 3) (fma.f64 -2 (*.f64 wj x) x)))","(-.f64 wj (-.f64 (+.f64 (-.f64 1 (/.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) wj)) (*.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) (pow.f64 wj -2))) (*.f64 (+.f64 1 (/.f64 x (exp.f64 wj))) (pow.f64 wj -3))))","(-.f64 wj (/.f64 (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (+.f64 wj 1)) (exp.f64 wj)))","(-.f64 wj (/.f64 (fma.f64 wj (exp.f64 wj) (neg.f64 x)) (fma.f64 wj (exp.f64 wj) (exp.f64 wj))))","(-.f64 wj (/.f64 (-.f64 (*.f64 wj (exp.f64 wj)) x) (+.f64 (exp.f64 wj) (*.f64 wj (exp.f64 wj)))))"]],"link":["."],"name":["Jmat.Real.lambertw, newton loop step"],"oracle":[63.45763552379186],"outputs":[["(fma.f64 (+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1)) (*.f64 wj wj) (fma.f64 (+.f64 (fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))) -1/2) (pow.f64 wj 3) (fma.f64 -2 (*.f64 wj x) x)))"]],"time":16.696044921875,"times":[["wj",3.68408203125],["x",3.822998046875],["(-.f64 wj (/.f64 (-.f64 (*.f64 wj (exp.f64 wj)) x) (+.f64 (exp.f64 wj) (*.f64 wj (exp.f64 wj)))))",4.41796875]],"type":"regimes"},{"compiler":[[54,42]],"inputs":[["(fma.f64 (+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1)) (*.f64 wj wj) (fma.f64 (+.f64 (fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))) -1/2) (pow.f64 wj 3) (fma.f64 -2 (*.f64 wj x) x)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (+.f64 (*.f64 -3/2 x) (fma.f64 (+.f64 1 (*.f64 2 x)) 2 -1)) (*.f64 wj wj) (fma.f64 (+.f64 (fma.f64 2 (+.f64 (-.f64 1 (*.f64 -3/2 x)) (*.f64 (fma.f64 -2 x -1) 2)) (fma.f64 -2/3 x (+.f64 3/2 (*.f64 (*.f64 2 x) 3/2)))) -1/2) (pow.f64 wj 3) (fma.f64 -2 (*.f64 wj x) x)))","(+.f64 (*.f64 (*.f64 wj wj) (+.f64 (fma.f64 -3/2 x (fma.f64 (fma.f64 2 x 1) 2 -1)) (*.f64 (+.f64 (fma.f64 2 (fma.f64 (fma.f64 -2 x -1) 2 (+.f64 1 (*.f64 3/2 x))) (+.f64 (*.f64 x (+.f64 -2/3 3)) 3/2)) -1/2) wj))) (fma.f64 -2 (*.f64 wj x) x))"]],"stop":[["fuel",1]],"time":29.484130859375,"type":"simplify"},{"time":0.02490234375,"type":"soundness"},{"compiler":[[54,42]],"remove-preprocessing":[[]],"time":22.9189453125,"type":"end"}]
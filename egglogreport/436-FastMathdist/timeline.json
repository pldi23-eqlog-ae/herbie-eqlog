[{"compiler":[[11,7]],"method":["search"],"sampling":[[12,0.4680636897137447,0.4407599744804429,0.09117633580581241],[11,0.41345625924714113,0.5148700586851191,0.07167368206773972],[10,0.34324670579007943,0.600681735132639,0.05607155907728156],[9,0.2496339678473305,0.7176976575610752,0.03266837459159433],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":80.338134765625,"type":"analyze"},{"outcomes":[["body",256,"invalid",48.91552734375,1271],["body",256,"valid",310.698486328125,8256]],"time":368.804931640625,"type":"sample"},{"compiler":[[10,6]],"inputs":[["0","1","2"],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d2 d3))","(+.f64 (*.f64 d3 d2) (*.f64 d3 d1))","(+.f64 (*.f64 d1 d3) (*.f64 d1 d2))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d3 d2))","(+.f64 (*.f64 d2 d1) (*.f64 d2 d3))","(*.f64 d2 (+.f64 d1 d3))","(+.f64 (*.f64 d3 d2) (*.f64 d3 d1))","(*.f64 d3 (+.f64 d2 d1))","(+.f64 (*.f64 d1 d3) (*.f64 d1 d2))","(*.f64 d1 (+.f64 d3 d2))"]],"symmetry":[[]],"time":65.303955078125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))"]],"time":19.666015625,"type":"simplify"},{"compiler":[[15,8]],"time":0.30712890625,"type":"eval"},{"alts":[["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","next",0.0078125]],"compiler":[[10,6],[10,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.764892578125,"type":"prune"},{"compiler":[[19,6]],"locations":[["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))",0.0078125,true]],"time":3.9599609375,"type":"localize"},{"count":[[1,36]],"series":[["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","d3","-inf",0.223876953125],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","d3","inf",0.22509765625],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","d3","0",0.26513671875],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","d2","-inf",0.22900390625],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","d2","inf",0.27099609375],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","d2","0",0.30615234375],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","d1","-inf",0.611083984375],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","d1","inf",1.48193359375],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","d1","0",0.63818359375]],"time":4.364013671875,"type":"series"},{"count":[[1,48]],"inputs":[["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 d2) (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 d3) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d1 (+.f64 d2 d3)) 0) (*.f64 d1 (+.f64 d2 d3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (+.f64 d2 d3)) (*.f64 (*.f64 d1 (+.f64 d2 d3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 d1 (+.f64 d2 d3))) (*.f64 d1 (+.f64 d2 d3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (+.f64 d2 d3)) (*.f64 0 (*.f64 d1 (+.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 d1 (+.f64 d2 d3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 d2 d3) d1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 d1) (*.f64 (pow.f64 d1 2/3) (+.f64 d2 d3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 d1 2/3) (+.f64 d2 d3)) (cbrt.f64 d1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 d1 2/3) (+.f64 (*.f64 d3 (cbrt.f64 d1)) (*.f64 d2 (cbrt.f64 d1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 d1 2/3) (+.f64 (*.f64 d2 (cbrt.f64 d1)) (*.f64 d3 (cbrt.f64 d1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 d3))) (pow.f64 (*.f64 d1 (+.f64 d2 d3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 d1 d2) 2/3) (-.f64 (pow.f64 (*.f64 d1 d3) 2/3) (cbrt.f64 (*.f64 (*.f64 d1 d2) (*.f64 d1 d3))))) (+.f64 (cbrt.f64 (*.f64 d1 d2)) (cbrt.f64 (*.f64 d1 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 d1 d3) 2/3) (-.f64 (pow.f64 (*.f64 d1 d2) 2/3) (cbrt.f64 (*.f64 (*.f64 d1 d2) (*.f64 d1 d3))))) (+.f64 (cbrt.f64 (*.f64 d1 d3)) (cbrt.f64 (*.f64 d1 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 d1 (+.f64 d2 d3)) 2/3) (cbrt.f64 (*.f64 d1 (+.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 d1 (+.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 d1 (+.f64 d2 d3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 d1 (+.f64 d2 d3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (+.f64 d2 d3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 d1 (+.f64 d2 d3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 d1 (+.f64 d2 d3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 d3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 d1 (+.f64 d2 d3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 d1 (+.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 d2 d3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 d2 (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 d1 d2)) (pow.f64 (*.f64 d1 d2) 2/3) (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d2 d1 (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 d3 (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d3 d1 (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 d1 d3)) (pow.f64 (*.f64 d1 d3) 2/3) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (cbrt.f64 d2)) (pow.f64 d2 2/3) (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d2 (cbrt.f64 d1)) (pow.f64 d1 2/3) (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 d2) (*.f64 (pow.f64 d2 2/3) d1) (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 d1) (*.f64 (pow.f64 d1 2/3) d2) (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 d1 d2) 2/3) (cbrt.f64 (*.f64 d1 d2)) (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 d1 d3) 2/3) (cbrt.f64 (*.f64 d1 d3)) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 d1) (*.f64 (pow.f64 d1 2/3) d3) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 d3) (*.f64 (pow.f64 d3 2/3) d1) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d3 (cbrt.f64 d1)) (pow.f64 d1 2/3) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (cbrt.f64 d3)) (pow.f64 d3 2/3) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 d1 d2)) (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 d1 d3)) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 d1 d2) (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 d1 d3) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 d2) 1 (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 d3) 1 (*.f64 d1 d2))))))"]],"rules":[["egg-rr",48]],"time":21.7490234375,"type":"rewrite"},{"count":[[84,52]],"inputs":[["(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))"]],"method":["egg-herbie"],"outputs":[["(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))"]],"time":108.671142578125,"type":"simplify"},{"compiler":[[527,163]],"time":5.3818359375,"type":"eval"},{"alts":[["(fma.f64 d1 d2 (*.f64 d1 d3))","next",0.00390625]],"compiler":[[9,5],[9,5]],"count":[[53,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[52,1],"picked":[1,0]}],"min-error":[0.00390625],"time":9.030029296875,"type":"prune"},{"compiler":[[15,5]],"locations":[["(fma.f64 d1 d2 (*.f64 d1 d3))",0.00390625,true]],"time":3.419921875,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 d1 d2 (*.f64 d1 d3))","d3","-inf",0.173095703125],["(fma.f64 d1 d2 (*.f64 d1 d3))","d3","inf",0.156982421875],["(fma.f64 d1 d2 (*.f64 d1 d3))","d3","0",0.195068359375],["(fma.f64 d1 d2 (*.f64 d1 d3))","d2","-inf",0.287841796875],["(fma.f64 d1 d2 (*.f64 d1 d3))","d2","inf",0.281982421875],["(fma.f64 d1 d2 (*.f64 d1 d3))","d2","0",0.184814453125],["(fma.f64 d1 d2 (*.f64 d1 d3))","d1","-inf",0.695068359375],["(fma.f64 d1 d2 (*.f64 d1 d3))","d1","inf",0.37890625],["(fma.f64 d1 d2 (*.f64 d1 d3))","d1","0",0.3330078125]],"time":2.783203125,"type":"series"},{"count":[[1,45]],"inputs":[["(fma.f64 d1 d2 (*.f64 d1 d3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 d2) (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 d3) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 d1 (+.f64 d2 d3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (+.f64 d2 d3)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 d1 d2) (neg.f64 (*.f64 d1 d3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 d1 d3) (neg.f64 (*.f64 d1 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 d1 (+.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 d3))) (pow.f64 (*.f64 d1 (+.f64 d2 d3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 d1 (+.f64 d2 d3)) 2/3) (cbrt.f64 (*.f64 d1 (+.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 d1 (+.f64 d2 d3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 d2 d3) d1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 d1) (+.f64 (*.f64 (pow.f64 d1 2/3) d2) (*.f64 (pow.f64 d1 2/3) d3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 d1 (+.f64 d2 d3)))) (neg.f64 (pow.f64 (*.f64 d1 (+.f64 d2 d3)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 d1 d3) 2/3) (-.f64 (pow.f64 (*.f64 d1 d2) 2/3) (*.f64 (cbrt.f64 (*.f64 d1 d3)) (cbrt.f64 (*.f64 d1 d2))))) (+.f64 (cbrt.f64 (*.f64 d1 d3)) (cbrt.f64 (*.f64 d1 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 d1 d2) 2/3) (-.f64 (pow.f64 (*.f64 d1 d3) 2/3) (*.f64 (cbrt.f64 (*.f64 d1 d2)) (cbrt.f64 (*.f64 d1 d3))))) (+.f64 (cbrt.f64 (*.f64 d1 d2)) (cbrt.f64 (*.f64 d1 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 d1 (+.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 d1 (+.f64 d2 d3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 d1 (+.f64 d2 d3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (+.f64 d2 d3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 d1 (+.f64 d2 d3)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 d1 (+.f64 d2 d3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 d1 (+.f64 d2 d3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 d1 (+.f64 d2 d3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 d3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 d1 (+.f64 d2 d3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 d1 (+.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 d2 d3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 d1 d3)) (pow.f64 (*.f64 d1 d3) 2/3) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 d3) (*.f64 (pow.f64 d3 2/3) d1) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 d1 d3) 2/3) (cbrt.f64 (*.f64 d1 d3)) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 d3 (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d3 (cbrt.f64 d1)) (pow.f64 d1 2/3) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (cbrt.f64 d3)) (pow.f64 d3 2/3) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 d1) (*.f64 (pow.f64 d1 2/3) d3) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d3 d1 (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 d2 (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (cbrt.f64 d2)) (pow.f64 d2 2/3) (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 d1 d2)) (pow.f64 (*.f64 d1 d2) 2/3) (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d2 d1 (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 d1) (*.f64 (pow.f64 d1 2/3) d2) (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 d1 d3)) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 d2) 1 (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 d3) 1 (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 d1 d3) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 d1 d2) (*.f64 d1 d3))))))"]],"rules":[["egg-rr",45]],"time":34.159912109375,"type":"rewrite"},{"count":[[81,49]],"inputs":[["(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))"]],"method":["egg-herbie"],"outputs":[["(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))"]],"time":108.556884765625,"type":"simplify"},{"compiler":[[472,149]],"time":5.38916015625,"type":"eval"},{"alts":[["(fma.f64 d1 d2 (*.f64 d1 d3))","done",0.00390625]],"compiler":[[9,5]],"count":[[50,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[49,0],"picked":[1,1]}],"min-error":[0.00390625],"time":7.85595703125,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["d1",0.00390625,1],["d2",0.00390625,1],["d3",0.00390625,1],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))",0.00390625,1]],"compiler":[[4,3],[4,3],[4,3],[10,6],[16,7]],"count":[[2,1]],"inputs":[["(fma.f64 d1 d2 (*.f64 d1 d3))","(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))"]],"link":["."],"name":["FastMath dist"],"oracle":[0.0078125],"outputs":[["(fma.f64 d1 d2 (*.f64 d1 d3))"]],"time":9.865966796875,"times":[["d1",2.28515625],["d2",2.2861328125],["d3",2.389892578125],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))",2.385986328125]],"type":"regimes"},{"compiler":[[9,5]],"inputs":[["(fma.f64 d1 d2 (*.f64 d1 d3))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 d1 d2 (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))"]],"stop":[["done",1]],"time":32.484130859375,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[9,5]],"remove-preprocessing":[[]],"time":7.531982421875,"type":"end"}]
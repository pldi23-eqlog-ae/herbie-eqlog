[{"compiler":[[14,11]],"method":["search"],"sampling":[[12,0.7980482098646462,0.10536577831953764,0.09658601181581616],[11,0.7687799381092191,0.13463405007496476,0.09658601181581616],[10,0.7258531395345926,0.20292668417096138,0.07122017629444599],[9,0.6712190322577953,0.2575607914477587,0.07122017629444599],[8,0.5931703075766563,0.37463387846946716,0.032195813953876495],[7,0.49951183795928955,0.46829234808683395,0.032195813953876495],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":30.35400390625,"type":"analyze"},{"outcomes":[["body",256,"invalid",11.442626953125,296],["body",256,"valid",321.353515625,8256]],"time":340.843994140625,"type":"sample"},{"compiler":[[13,10]],"inputs":[["0","1"],["(+.f64 (-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2)) 918938533204673/1000000000000000)","(+.f64 (-.f64 (*.f64 y (-.f64 x 1)) (*.f64 x 1/2)) 918938533204673/1000000000000000)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 (-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2)) 918938533204673/1000000000000000)","(+.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) 918938533204673/1000000000000000)","(+.f64 (-.f64 (*.f64 y (-.f64 x 1)) (*.f64 x 1/2)) 918938533204673/1000000000000000)","(+.f64 (fma.f64 y (+.f64 x -1) (*.f64 -1/2 x)) 918938533204673/1000000000000000)"]],"symmetry":[[]],"time":64.2890625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2)) 918938533204673/1000000000000000)"]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2)) 918938533204673/1000000000000000)","(+.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) 918938533204673/1000000000000000)"]],"time":20.471923828125,"type":"simplify"},{"compiler":[[23,17]],"time":0.453125,"type":"eval"},{"alts":[["(+.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) 918938533204673/1000000000000000)","next",0.0078125]],"compiler":[[12,9],[12,9]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.9150390625,"type":"prune"},{"compiler":[[31,21]],"locations":[["(fma.f64 x (+.f64 y -1) (*.f64 -1/2 y))",0.0078125,true]],"time":7.60498046875,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 x (+.f64 y -1) (*.f64 -1/2 y))","y","-inf",0.394775390625],["(fma.f64 x (+.f64 y -1) (*.f64 -1/2 y))","y","inf",0.510986328125],["(fma.f64 x (+.f64 y -1) (*.f64 -1/2 y))","y","0",0.35595703125],["(fma.f64 x (+.f64 y -1) (*.f64 -1/2 y))","x","-inf",0.373046875],["(fma.f64 x (+.f64 y -1) (*.f64 -1/2 y))","x","inf",0.3359375],["(fma.f64 x (+.f64 y -1) (*.f64 -1/2 y))","x","0",0.5]],"time":2.556884765625,"type":"series"},{"count":[[1,40]],"inputs":[["(fma.f64 x (+.f64 y -1) (*.f64 -1/2 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 -1/2 y) (*.f64 x y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 -1/2 y) (neg.f64 x)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (+.f64 (*.f64 x y) (*.f64 -1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (+.f64 (neg.f64 x) (*.f64 -1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) 0) (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) (*.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y -1)) (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y))) (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) (*.f64 0 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/2 y) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y))) (pow.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) 2/3) (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 y -1) (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y -1) x (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (+.f64 y -1)) (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2)) (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (+.f64 y -1))) (pow.f64 (+.f64 y -1) 2/3) (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 -1/2 y) 2/3) (cbrt.f64 (*.f64 -1/2 y)) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -1/2 y)) (pow.f64 (*.f64 -1/2 y) 2/3) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 -1/2)) (cbrt.f64 1/4) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/2) (*.f64 (cbrt.f64 1/4) y) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) -1/2) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -1/8 y)) (pow.f64 y 2/3) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 -1/2 y)) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y -1/2 (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 y (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (+.f64 y -1)) 1 (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (+.f64 y -1)) (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/2 y) 1 (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -1/2 y) (*.f64 x (+.f64 y -1)))))))"]],"rules":[["egg-rr",40]],"time":22.2880859375,"type":"rewrite"},{"count":[[64,54]],"inputs":[["(*.f64 -1/2 y)","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(*.f64 (-.f64 y 1) x)","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(*.f64 (-.f64 y 1) x)","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(*.f64 -1 x)","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(*.f64 y (-.f64 x 1/2))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x))))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x)))) (*.f64 -1 x))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x)))) (*.f64 -1 x))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x)))) (*.f64 -1 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/2 y)","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","(*.f64 y (-.f64 x 1/2))","(*.f64 y (+.f64 x -1/2))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","(*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x))))","(*.f64 y (+.f64 x -1/2))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x)))) (*.f64 -1 x))","(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x)))) (*.f64 -1 x))","(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x)))) (*.f64 -1 x))","(fma.f64 (+.f64 x -1/2) y (neg.f64 x))"]],"time":92.697998046875,"type":"simplify"},{"compiler":[[692,503]],"time":10.236083984375,"type":"eval"},{"alts":[["(+.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) 918938533204673/1000000000000000)","done",0.0078125],["(+.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x)) 918938533204673/1000000000000000)","next",0.015625]],"compiler":[[12,9],[11,8],[11,8]],"count":[[55,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[54,1],"picked":[1,1]}],"min-error":[0],"time":10.423828125,"type":"prune"},{"compiler":[[27,15]],"locations":[["(fma.f64 (+.f64 x -1/2) y (neg.f64 x))",0.015625,true]],"time":6.458984375,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","y","-inf",0.320068359375],["(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","y","inf",0.2587890625],["(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","y","0",0.234130859375],["(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","x","-inf",0.305908203125],["(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","x","inf",0.239990234375],["(fma.f64 (+.f64 x -1/2) y (neg.f64 x))","x","0",0.31396484375]],"time":1.7509765625,"type":"series"},{"count":[[1,36]],"inputs":[["(fma.f64 (+.f64 x -1/2) y (neg.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x)) 0) (fma.f64 (+.f64 x -1/2) y (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x)) (*.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (+.f64 x -1/2) y (neg.f64 x))) (fma.f64 (+.f64 x -1/2) y (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x)) (*.f64 0 (fma.f64 (+.f64 x -1/2) y (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1/2) y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (*.f64 (+.f64 x -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (+.f64 x -1/2) y (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (+.f64 x -1/2) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 x (*.f64 (+.f64 x -1/2) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x))) (pow.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x)) 2/3) (cbrt.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (+.f64 x -1/2) y (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 x (*.f64 (+.f64 x -1/2) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x -1/2) y (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 (neg.f64 x)) (*.f64 (+.f64 x -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 x 2/3) (*.f64 (+.f64 x -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (neg.f64 (pow.f64 x 2/3)) (*.f64 (+.f64 x -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1/2) (cbrt.f64 y)) (pow.f64 y 2/3) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (+.f64 x -1/2) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x -1/2)) (*.f64 (pow.f64 (+.f64 x -1/2) 2/3) y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 x -1/2) y)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1/2) y) 2)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x -1 (*.f64 (+.f64 x -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 x (*.f64 (+.f64 x -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 x) (*.f64 (+.f64 x -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) 1 (*.f64 (+.f64 x -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 x -1/2) y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1/2) y) 1 (neg.f64 x))))))"]],"rules":[["egg-rr",36]],"time":22.30419921875,"type":"rewrite"},{"count":[[60,49]],"inputs":[["(*.f64 -1/2 y)","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(*.f64 (-.f64 y 1) x)","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(+.f64 (*.f64 -1/2 y) (*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x)))","(+.f64 (*.f64 -1/2 y) (*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x)))","(+.f64 (*.f64 -1/2 y) (*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x)))","(*.f64 -1 x)","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(*.f64 y (-.f64 x 1/2))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(*.f64 y (-.f64 x 1/2))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/2 y)","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(fma.f64 y (+.f64 x -1/2) (neg.f64 x))","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(fma.f64 y (+.f64 x -1/2) (neg.f64 x))","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(fma.f64 y (+.f64 x -1/2) (neg.f64 x))","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 y (+.f64 x -1/2) (neg.f64 x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 y (+.f64 x -1/2) (neg.f64 x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 y (+.f64 x -1/2) (neg.f64 x))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 (+.f64 y -1) x)","(+.f64 (*.f64 -1/2 y) (*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x)))","(fma.f64 y (+.f64 x -1/2) (neg.f64 x))","(+.f64 (*.f64 -1/2 y) (*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x)))","(fma.f64 y (+.f64 x -1/2) (neg.f64 x))","(+.f64 (*.f64 -1/2 y) (*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x)))","(fma.f64 y (+.f64 x -1/2) (neg.f64 x))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(fma.f64 y (+.f64 x -1/2) (neg.f64 x))","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(fma.f64 y (+.f64 x -1/2) (neg.f64 x))","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(fma.f64 y (+.f64 x -1/2) (neg.f64 x))","(*.f64 y (-.f64 x 1/2))","(*.f64 y (+.f64 x -1/2))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(fma.f64 y (+.f64 x -1/2) (neg.f64 x))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(fma.f64 y (+.f64 x -1/2) (neg.f64 x))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(fma.f64 y (+.f64 x -1/2) (neg.f64 x))","(*.f64 y (-.f64 x 1/2))","(*.f64 y (+.f64 x -1/2))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(fma.f64 y (+.f64 x -1/2) (neg.f64 x))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(fma.f64 y (+.f64 x -1/2) (neg.f64 x))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(fma.f64 y (+.f64 x -1/2) (neg.f64 x))"]],"time":91.264892578125,"type":"simplify"},{"compiler":[[580,382]],"time":8.651123046875,"type":"eval"},{"alts":[["(+.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) 918938533204673/1000000000000000)","done",0.0078125],["(+.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x)) 918938533204673/1000000000000000)","done",0.015625]],"compiler":[[12,9],[11,8]],"count":[[51,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[49,0],"picked":[1,1]}],"min-error":[0],"time":8.768798828125,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["y",0.0078125,1],["(+.f64 (-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2)) 918938533204673/1000000000000000)",0.0078125,1],["(-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2))",0.0078125,1]],"compiler":[[3,2],[3,2],[13,10],[11,8],[32,23]],"count":[[3,1]],"inputs":[["(+.f64 (fma.f64 (+.f64 x -1/2) y (neg.f64 x)) 918938533204673/1000000000000000)","(+.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) 918938533204673/1000000000000000)","(+.f64 (-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2)) 918938533204673/1000000000000000)"]],"link":["."],"name":["Numeric.SpecFunctions:logGamma from math-functions-0.1.5.2, A"],"oracle":[0.0390625],"outputs":[["(+.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) 918938533204673/1000000000000000)"]],"time":12.2509765625,"times":[["x",2.902099609375],["y",2.77001953125],["(+.f64 (-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2)) 918938533204673/1000000000000000)",2.708984375],["(-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2))",2.93701171875]],"type":"regimes"},{"compiler":[[12,9]],"inputs":[["(+.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) 918938533204673/1000000000000000)"]],"method":["egg-herbie"],"outputs":[["(+.f64 (fma.f64 x (+.f64 y -1) (*.f64 -1/2 y)) 918938533204673/1000000000000000)","(fma.f64 x (+.f64 y -1) (fma.f64 y -1/2 918938533204673/1000000000000000))"]],"stop":[["done",1]],"time":19.09619140625,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[12,9]],"remove-preprocessing":[[]],"time":10.804931640625,"type":"end"}]
[{"compiler":[[9,6]],"method":["search"],"sampling":[[12,0.4463411442702636,0.07658531109336764,0.47707354463636875],[11,0.42438994045369327,0.10634138737805188,0.46926867216825485],[10,0.3960972777567804,0.15024379501119256,0.45365892723202705],[9,0.3551216972991824,0.20682912040501833,0.43804918229579926],[8,0.30439002625644207,0.28878028132021427,0.40682969242334366],[7,0.23414617404341698,0.39024362340569496,0.37561020255088806],[6,0.15609744936227798,0.5307313278317451,0.31317122280597687],[5,0.062438979744911194,0.6868287771940231,0.2507322430610657],[4,0.0,0.8741457164287567,0.1258542835712433],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":23.111083984375,"type":"analyze"},{"outcomes":[["body",256,"invalid",15.30078125,418],["body",256,"valid",376.5341796875,8256]],"time":400.09912109375,"type":"sample"},{"compiler":[[8,5]],"inputs":[["0","1"],["(*.f64 x (log.f64 (/.f64 x y)))","(*.f64 y (log.f64 (/.f64 y x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 x (log.f64 (/.f64 x y)))","(*.f64 y (log.f64 (/.f64 y x)))"]],"symmetry":[[]],"time":77.698974609375,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(*.f64 x (log.f64 (/.f64 x y)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (log.f64 (/.f64 x y)))"]],"time":36.0400390625,"type":"simplify"},{"compiler":[[8,5]],"time":0.199951171875,"type":"eval"},{"alts":[["(*.f64 x (log.f64 (/.f64 x y)))","next",14.508686291601665]],"compiler":[[8,5],[8,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[14.508686291601665],"time":0.7119140625,"type":"prune"},{"compiler":[[17,5]],"locations":[["(*.f64 x (log.f64 (/.f64 x y)))",0.234375,true],["(log.f64 (/.f64 x y))",13.87224641405028,true]],"time":5.419921875,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 x (log.f64 (/.f64 x y)))","y","-inf",0.281982421875],["(*.f64 x (log.f64 (/.f64 x y)))","y","inf",0.297119140625],["(*.f64 x (log.f64 (/.f64 x y)))","y","0",0.275146484375],["(*.f64 x (log.f64 (/.f64 x y)))","x","-inf",0.531982421875],["(*.f64 x (log.f64 (/.f64 x y)))","x","inf",0.35107421875],["(*.f64 x (log.f64 (/.f64 x y)))","x","0",12.1669921875],["(log.f64 (/.f64 x y))","y","-inf",10.615966796875],["(log.f64 (/.f64 x y))","y","inf",4.115966796875],["(log.f64 (/.f64 x y))","y","0",6.90087890625],["(log.f64 (/.f64 x y))","x","-inf",11.7822265625],["(log.f64 (/.f64 x y))","x","inf",4.302001953125],["(log.f64 (/.f64 x y))","x","0",15.114013671875]],"time":66.962158203125,"type":"series"},{"count":[[2,43]],"inputs":[["(log.f64 (/.f64 x y))","(*.f64 x (log.f64 (/.f64 x y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 x y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (pow.f64 (log.f64 (/.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (/.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 (/.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (/.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 x y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 (/.f64 x y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))) (pow.f64 (log.f64 (/.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) x) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2/3) (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (log.f64 (/.f64 x y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (log.f64 (/.f64 x y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (log.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (/.f64 x y)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (log.f64 (/.f64 x y)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (log.f64 (/.f64 x y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (log.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 3))))))"]],"rules":[["egg-rr",26],["egg-rr",17]],"time":40.8369140625,"type":"rewrite"},{"count":[[91,53]],"inputs":[["(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x)","(*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x)","(*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x)","(*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)"]],"method":["egg-herbie"],"outputs":[["(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(log.f64 (/.f64 x y))","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(*.f64 (log.f64 (/.f64 x y)) x)"]],"time":155.626953125,"type":"simplify"},{"compiler":[[530,205]],"time":7.170166015625,"type":"eval"},{"alts":[["(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","fresh",33.31495850001146],["(*.f64 x (log.f64 (/.f64 x y)))","done",14.508686291601665],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 3)","fresh",14.93668177620642],["(*.f64 x (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) (cbrt.f64 (log.f64 (/.f64 x y)))))","fresh",40.16259399421106],["(*.f64 (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))) (pow.f64 (log.f64 (/.f64 x y)) 2/3))","fresh",40.156109033284835],["(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","fresh",31.391318855889793],["(*.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3))","next",14.923935548058635]],"compiler":[[11,8],[8,5],[11,8],[16,9],[16,9],[13,10],[11,8],[11,8],[11,8],[16,9],[16,9],[13,10],[11,8]],"count":[[54,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[53,6],"picked":[1,1]}],"min-error":[0.171875],"time":10.041015625,"type":"prune"},{"compiler":[[33,11]],"locations":[["(cbrt.f64 (log.f64 (/.f64 x y)))",0.09765625,true],["(*.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3))",0.234375,true],["(pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)",0.7746240723585869,true],["(log.f64 (/.f64 x y))",13.87224641405028,false]],"time":7.783935546875,"type":"localize"},{"count":[[3,72]],"series":[["(cbrt.f64 (log.f64 (/.f64 x y)))","y","-inf",0.203857421875],["(cbrt.f64 (log.f64 (/.f64 x y)))","y","inf",0.15185546875],["(cbrt.f64 (log.f64 (/.f64 x y)))","y","0",0.179931640625],["(cbrt.f64 (log.f64 (/.f64 x y)))","x","-inf",0.239990234375],["(cbrt.f64 (log.f64 (/.f64 x y)))","x","inf",0.18896484375],["(cbrt.f64 (log.f64 (/.f64 x y)))","x","0",0.194091796875],["(*.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3))","y","-inf",0.299072265625],["(*.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3))","y","inf",0.31884765625],["(*.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3))","y","0",0.3291015625],["(*.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3))","x","-inf",0.503173828125],["(*.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3))","x","inf",0.462158203125],["(*.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3))","x","0",0.31396484375],["(pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)","y","-inf",1.43505859375],["(pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)","y","inf",1.385986328125],["(pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)","y","0",1.4609375],["(pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)","x","-inf",1.47412109375],["(pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)","x","inf",1.4609375],["(pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)","x","0",1.794921875]],"time":12.64892578125,"type":"series"},{"count":[[3,65]],"inputs":[["(pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)","(*.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3))","(cbrt.f64 (log.f64 (/.f64 x y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 x y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x y)))) (pow.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) 4/3) (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (pow.f64 (log.f64 (/.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 7/3) (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3)) (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (/.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 (/.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (/.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 x y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 (/.f64 x y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 (log.f64 (/.f64 x y)) 2/3)) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (*.f64 x (pow.f64 (log.f64 (/.f64 x y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2/3) (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))) (pow.f64 (log.f64 (/.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (log.f64 (/.f64 x y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (log.f64 (/.f64 x y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (/.f64 x y)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (log.f64 (/.f64 x y)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (log.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (log.f64 (/.f64 x y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (log.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x y))))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x y)))) (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 (/.f64 x y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (log.f64 (/.f64 x y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 x y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (log.f64 (/.f64 x y)))))))"]],"rules":[["egg-rr",18],["egg-rr",26],["egg-rr",21]],"time":49.533935546875,"type":"rewrite"},{"count":[[137,80]],"inputs":[["(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))))","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 1/3)","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 1/3)","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 1/3)","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 1/3)","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))))","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) 1/3)","(pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 1/3)","(pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 1/3)","(pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 1/3)","(pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) 1/3)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))))","(log.f64 (/.f64 x y))","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 1/3)","(log.f64 (/.f64 x y))","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 1/3)","(log.f64 (/.f64 x y))","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 1/3)","(log.f64 (/.f64 x y))","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 1/3)","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))))","(log.f64 (/.f64 x y))","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))"]],"time":233.27099609375,"type":"simplify"},{"compiler":[[1210,570]],"time":17.315185546875,"type":"eval"},{"alts":[["(*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))))","fresh",40.156109033284835],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 3)","next",14.93668177620642],["(*.f64 x (pow.f64 (cbrt.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))) 3))","fresh",33.47115048740784],["(*.f64 x (log.f64 (/.f64 x y)))","done",14.508686291601665],["(*.f64 x (pow.f64 (cbrt.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))) 3))","fresh",31.577855878906135],["(*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x)","fresh",33.31495850001146],["(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","fresh",31.391318855889793],["(*.f64 x (*.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (pow.f64 (log.f64 (/.f64 x y)) 2/3)))","fresh",40.16259399421106],["(*.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3))","done",14.923935548058635]],"compiler":[[16,9],[11,8],[14,11],[8,5],[16,13],[11,8],[13,10],[16,9],[11,8],[16,9],[11,8],[14,11],[16,13],[11,8],[13,10],[16,9]],"count":[[109,9]],"kept":[{"done":[1,1],"fresh":[5,2],"new":[102,5],"picked":[1,1]}],"min-error":[0.14453125],"time":19.706787109375,"type":"prune"},{"compiler":[[34,9]],"locations":[["(cbrt.f64 (*.f64 x (log.f64 (/.f64 x y))))",0.12109375,true],["(*.f64 x (log.f64 (/.f64 x y)))",0.234375,false],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 3)",0.7671052735163769,true],["(log.f64 (/.f64 x y))",13.87224641405028,false]],"time":6.856201171875,"type":"localize"},{"count":[[2,24]],"series":[["(cbrt.f64 (*.f64 x (log.f64 (/.f64 x y))))","y","-inf",0.21484375],["(cbrt.f64 (*.f64 x (log.f64 (/.f64 x y))))","y","inf",0.198974609375],["(cbrt.f64 (*.f64 x (log.f64 (/.f64 x y))))","y","0",0.18603515625],["(cbrt.f64 (*.f64 x (log.f64 (/.f64 x y))))","x","-inf",0.324951171875],["(cbrt.f64 (*.f64 x (log.f64 (/.f64 x y))))","x","inf",0.25],["(cbrt.f64 (*.f64 x (log.f64 (/.f64 x y))))","x","0",0.22119140625],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 3)","y","-inf",1.469970703125],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 3)","y","inf",1.445068359375],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 3)","y","0",1.534912109375],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 3)","x","-inf",1.01513671875],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 3)","x","inf",0.656005859375],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 3)","x","0",0.73291015625]],"time":8.44384765625,"type":"series"},{"count":[[2,60]],"inputs":[["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 3)","(cbrt.f64 (*.f64 x (log.f64 (/.f64 x y))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (log.f64 (/.f64 x y))) 0) (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 (/.f64 x y))) (*.f64 (*.f64 x (log.f64 (/.f64 x y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (log.f64 (/.f64 x y)))) (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 (/.f64 x y))) (*.f64 0 (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y))))) (pow.f64 (pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2/3) (cbrt.f64 x)) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 4/3) 2) (cbrt.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (*.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) x) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2/3) (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 7/3) (cbrt.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))) (pow.f64 (log.f64 (/.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (/.f64 x y)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2/3)) (pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (log.f64 (/.f64 x y)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (log.f64 (/.f64 x y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (log.f64 (/.f64 x y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (log.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (log.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 0) (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) (*.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y))))) (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) (*.f64 0 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x y)))) (cbrt.f64 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2/3) (cbrt.f64 x))) (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 4/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y))))) (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y))))) (cbrt.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 (pow.f64 x 2/3) (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (*.f64 x (log.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 x (log.f64 (/.f64 x y))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (*.f64 x (log.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 x (log.f64 (/.f64 x y))))))))"]],"rules":[["egg-rr",26],["egg-rr",34]],"time":27.797119140625,"type":"rewrite"},{"count":[[84,67]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) (pow.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) 2))) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) (pow.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) 2))) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) (pow.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) 2))) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) (pow.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) 2))) 1/3) x)","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) 1/3)","(pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) 1/3)","(pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) 1/3)","(pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) 1/3)","(pow.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) 1/3)","(pow.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) 1/3)","(pow.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) 1/3)","(pow.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) 1/3)","(pow.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) 1/3)","(pow.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) 1/3)","(pow.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) 1/3)","(pow.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) 1/3)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) (pow.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) 2))) 1/3) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) (pow.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) 2))) 1/3) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) (pow.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) 2))) 1/3) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) (pow.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) 2))) 1/3) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(*.f64 (log.f64 (/.f64 x y)) x)","(pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) 1/3)","(cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x))","(pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) 1/3)","(cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x))","(pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) 1/3)","(cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x))","(pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) 1/3)","(cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x))","(pow.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) 1/3)","(cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x))","(pow.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) 1/3)","(cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x))","(pow.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) 1/3)","(cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x))","(pow.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) 1/3)","(cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x))","(pow.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) 1/3)","(cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x))","(pow.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) 1/3)","(cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x))","(pow.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) 1/3)","(cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x))","(pow.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) 1/3)","(cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x))"]],"time":89.45703125,"type":"simplify"},{"compiler":[[1627,673]],"time":22.660888671875,"type":"eval"},{"alts":[["(*.f64 x (log.f64 (/.f64 x y)))","done",14.508686291601665],["(*.f64 (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))) (pow.f64 (log.f64 (/.f64 x y)) 2/3))","fresh",40.156109033284835],["(*.f64 x (pow.f64 (cbrt.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))) 3))","fresh",33.47115048740784],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)) 3)","fresh",33.49154989422276],["(*.f64 x (pow.f64 (cbrt.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))) 3))","fresh",31.577855878906135],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 3)","done",14.93668177620642],["(pow.f64 (cbrt.f64 (*.f64 x (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))))) 3)","fresh",31.582809759226098],["(*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x)","fresh",33.31495850001146],["(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","next",31.391318855889793],["(*.f64 x (*.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (pow.f64 (log.f64 (/.f64 x y)) 2/3)))","fresh",40.16259399421106],["(*.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3))","done",14.923935548058635]],"compiler":[[8,5],[16,9],[14,11],[14,11],[16,13],[11,8],[16,13],[11,8],[13,10],[16,9],[11,8],[16,9],[14,11],[14,11],[16,13],[16,13],[11,8],[13,10],[16,9]],"count":[[129,11]],"kept":[{"done":[2,2],"fresh":[6,5],"new":[120,3],"picked":[1,1]}],"min-error":[0.1328125],"time":20.44091796875,"type":"prune"},{"compiler":[[39,28]],"locations":[["(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)",0.12109375,true],["(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))",0.3427814344956104,true]],"time":11.9560546875,"type":"localize"},{"count":[[2,40]],"series":[["(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","x","-inf",0.39404296875],["(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","x","inf",0.416015625],["(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","x","0",5.077880859375],["(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","y","-inf",0.297119140625],["(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","y","inf",0.33203125],["(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","y","0",0.39111328125],["(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","x","-inf",4.618896484375],["(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","x","inf",6.14990234375],["(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","x","0",9.007080078125],["(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","y","-inf",6.53515625],["(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","y","inf",5.2060546875],["(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","y","0",11.93017578125]],"time":50.573974609375,"type":"series"},{"count":[[2,81]],"inputs":[["(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 (neg.f64 y))) (log.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (neg.f64 x)) (neg.f64 (log.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (/.f64 x y)) 0) (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 x y)) (*.f64 (log.f64 (/.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (log.f64 (/.f64 x y))) (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 x y)) (*.f64 0 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (log.f64 (neg.f64 y))) (neg.f64 (log.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (neg.f64 x)) (log.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (log.f64 (neg.f64 x)) 2)) (-.f64 (cbrt.f64 (pow.f64 (log.f64 (neg.f64 y)) 2)) (cbrt.f64 (neg.f64 (*.f64 (log.f64 (neg.f64 y)) (log.f64 (neg.f64 x))))))) (+.f64 (cbrt.f64 (log.f64 (neg.f64 x))) (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (log.f64 (neg.f64 y)) 2)) (-.f64 (cbrt.f64 (pow.f64 (log.f64 (neg.f64 x)) 2)) (cbrt.f64 (neg.f64 (*.f64 (log.f64 (neg.f64 y)) (log.f64 (neg.f64 x))))))) (+.f64 (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) (cbrt.f64 (log.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (/.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 (/.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (/.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (log.f64 (/.f64 x y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) (cbrt.f64 (pow.f64 (log.f64 (neg.f64 y)) 2)) (log.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 (neg.f64 x))) (cbrt.f64 (pow.f64 (log.f64 (neg.f64 x)) 2)) (neg.f64 (log.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (log.f64 (neg.f64 x))) (neg.f64 (log.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (log.f64 (neg.f64 x)) 2)) (cbrt.f64 (log.f64 (neg.f64 x))) (neg.f64 (log.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (log.f64 (neg.f64 y)) 2)) (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) (log.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (log.f64 (neg.f64 y)) (log.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (log.f64 (neg.f64 y))) (log.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log.f64 (neg.f64 x)) (neg.f64 (log.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 (neg.f64 x)) 1 (neg.f64 (log.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (log.f64 (neg.f64 y))) 1 (log.f64 (neg.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)) (*.f64 x (log.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 (neg.f64 x))) (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log.f64 (/.f64 x y)) x) 0) (*.f64 (log.f64 (/.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (/.f64 x y)) x) (*.f64 (*.f64 (log.f64 (/.f64 x y)) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (log.f64 (/.f64 x y)) x)) (*.f64 (log.f64 (/.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (/.f64 x y)) x) (*.f64 0 (*.f64 (log.f64 (/.f64 x y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (log.f64 (neg.f64 x))) 1) (*.f64 (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)) 1) (*.f64 (*.f64 x (log.f64 (neg.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (log.f64 (/.f64 x y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)) x) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x)) (cbrt.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 2)) (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))) (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (/.f64 x y)) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (log.f64 (/.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (/.f64 x y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (log.f64 (/.f64 x y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)) (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (log.f64 (/.f64 x y)) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (log.f64 (/.f64 x y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (log.f64 (/.f64 x y)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 (/.f64 x y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (log.f64 (/.f64 x y)) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (log.f64 (/.f64 x y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (log.f64 (/.f64 x y))) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (*.f64 (log.f64 (/.f64 x y)) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 x (neg.f64 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (log.f64 (/.f64 x y)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (log.f64 (neg.f64 y))) x (*.f64 x (log.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 (neg.f64 x)) (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 (neg.f64 x)) x (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 (log.f64 (neg.f64 y))) (*.f64 x (log.f64 (neg.f64 x))))))))"]],"rules":[["egg-rr",43],["egg-rr",38]],"time":25.72802734375,"type":"rewrite"},{"count":[[121,91]],"inputs":[["(+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y))))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y))))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y))))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y))))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x))))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x))))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x))))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x))))","(+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 -1)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 -1)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 -1)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 -1)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)"]],"method":["egg-herbie"],"outputs":[["(+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y))))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y))))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y))))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y))))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x))))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x))))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x))))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x))))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x)))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x)))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x)))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 -1)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 -1)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 -1)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 -1)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(log.f64 (/.f64 x y))","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)"]],"time":143.64306640625,"type":"simplify"},{"compiler":[[1092,385]],"time":10.553955078125,"type":"eval"},{"alts":[["(fma.f64 x (log.f64 (neg.f64 x)) (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)))","fresh",31.30348888102275],["(*.f64 (fma.f64 (cbrt.f64 (log.f64 (neg.f64 x))) (cbrt.f64 (pow.f64 (log.f64 (neg.f64 x)) 2)) (neg.f64 (log.f64 (neg.f64 y)))) x)","fresh",31.41643555650778],["(*.f64 x (*.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (pow.f64 (log.f64 (/.f64 x y)) 2/3)))","fresh",40.16259399421106],["(*.f64 (fma.f64 (cbrt.f64 (pow.f64 (log.f64 (neg.f64 y)) 2)) (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) (log.f64 (neg.f64 x))) x)","fresh",31.43779292406152],["(*.f64 x (pow.f64 (cbrt.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))) 3))","fresh",33.47115048740784],["(*.f64 x (log.f64 (/.f64 x y)))","done",14.508686291601665],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)) 3)","fresh",33.49154989422276],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)) (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))))","fresh",14.668160213317444],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 3)","done",14.93668177620642],["(+.f64 (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)) (*.f64 x (log.f64 (neg.f64 x))))","fresh",31.346789803303434],["(*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x)","fresh",33.31495850001146],["(*.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)) x))","fresh",14.707886298755952]],"compiler":[[13,9],[19,13],[16,9],[19,13],[14,11],[8,5],[14,11],[17,10],[11,8],[14,10],[11,8],[17,10]],"count":[[102,12]],"kept":[{"done":[3,2],"fresh":[7,4],"new":[91,6],"picked":[1,0]}],"min-error":[0.0390625],"time":17.193115234375,"type":"prune"},{"accuracy":[0.6184473810341966],"baseline":[14.508686291601665],"branch":[["x",0.6184473810341967,2],["y",0.6184473810341966,2],["(*.f64 x (log.f64 (/.f64 x y)))",6.797748791601665,3],["(*.f64 x (log.f64 (/.f64 x y)))",6.797748791601665,3]],"compiler":[[3,2],[3,2],[8,5],[8,5],[264,118]],"count":[[21,2]],"inputs":[["(fma.f64 x (log.f64 (neg.f64 x)) (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)))","(*.f64 (fma.f64 (cbrt.f64 (log.f64 (neg.f64 x))) (cbrt.f64 (pow.f64 (log.f64 (neg.f64 x)) 2)) (neg.f64 (log.f64 (neg.f64 y)))) x)","(*.f64 (fma.f64 (cbrt.f64 (pow.f64 (log.f64 (neg.f64 y)) 2)) (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) (log.f64 (neg.f64 x))) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)) (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))))","(+.f64 (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)) (*.f64 x (log.f64 (neg.f64 x))))","(*.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)) x))","(*.f64 (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))) (pow.f64 (log.f64 (/.f64 x y)) 2/3))","(pow.f64 (cbrt.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)) 3)","(pow.f64 (cbrt.f64 (*.f64 x (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))))) 3)","(*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))))","(*.f64 x (pow.f64 (cbrt.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))) 3))","(*.f64 x (pow.f64 (cbrt.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))) 3))","(*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x)","(*.f64 x (*.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (pow.f64 (log.f64 (/.f64 x y)) 2/3)))","(*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)","(pow.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) 3)","(*.f64 x (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) (cbrt.f64 (log.f64 (/.f64 x y)))))","(*.f64 (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))) (pow.f64 (log.f64 (/.f64 x y)) 2/3))","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(*.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3))","(*.f64 x (log.f64 (/.f64 x y)))"]],"link":["."],"name":["Data.HyperLogLog.Type:size from hyperloglog-0.3.4, B"],"oracle":[64.0],"outputs":[["(fma.f64 x (log.f64 (neg.f64 x)) (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)))","(*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x)"]],"time":64.548828125,"times":[["x",12.93994140625],["y",13.1669921875],["(*.f64 x (log.f64 (/.f64 x y)))",16.22900390625],["(*.f64 x (log.f64 (/.f64 x y)))",17.909912109375]],"type":"regimes"},{"bstep":[[-5.3790719387347215e-297,1.1909090897179861e-304,1.9091796875]],"compiler":[[12,9],[14,10],[10,7],[3,2]],"method":["binary-search"],"time":2.047119140625,"type":"bsearch"},{"compiler":[[26,18]],"inputs":[["(if (<=.f64 y 0) (fma.f64 x (log.f64 (neg.f64 x)) (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x))) (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 y 0) (fma.f64 x (log.f64 (neg.f64 x)) (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x))) (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x))","(if (<=.f64 y 0) (*.f64 x (-.f64 (log.f64 (neg.f64 x)) (log.f64 (neg.f64 y)))) (*.f64 (log.f64 (/.f64 x y)) x))"]],"stop":[["fuel",1]],"time":19.514892578125,"type":"simplify"},{"time":0.006103515625,"type":"soundness"},{"compiler":[[26,18]],"remove-preprocessing":[[]],"time":15.35595703125,"type":"end"}]
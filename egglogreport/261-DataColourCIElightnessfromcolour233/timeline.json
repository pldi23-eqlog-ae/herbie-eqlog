[{"compiler":[[7,6]],"method":["search"],"sampling":[[12,0.9956073760986328,0.0009760856628417969,0.0034165382385253906],[11,0.9956073760986328,0.0019521713256835938,0.0024404525756835938],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.27197265625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.110107421875,4],["body",512,"valid",0.353759765625,8],["body",1024,"valid",2.58056640625,39],["body",256,"valid",216.03466796875,8209]],"time":227.93212890625,"type":"sample"},{"compiler":[[6,5]],"inputs":[["0"],["(-.f64 (*.f64 x 116) 16)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (*.f64 x 116) 16)","(fma.f64 x 116 -16)"]],"symmetry":[[]],"time":51.12890625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (*.f64 x 116) 16)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 x 116) 16)","(fma.f64 x 116 -16)"]],"time":17.634033203125,"type":"simplify"},{"compiler":[[10,8]],"time":0.31591796875,"type":"eval"},{"alts":[["(fma.f64 x 116 -16)","next",0]],"compiler":[[5,4],[5,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0],"time":0.797119140625,"type":"prune"},{"compiler":[[8,6]],"locations":[["(fma.f64 x 116 -16)",0.0078125,true]],"time":2.153076171875,"type":"localize"},{"count":[[1,12]],"series":[["(fma.f64 x 116 -16)","x","-inf",0.3779296875],["(fma.f64 x 116 -16)","x","inf",0.338134765625],["(fma.f64 x 116 -16)","x","0",0.373779296875]],"time":1.1328125,"type":"series"},{"count":[[1,47]],"inputs":[["(fma.f64 x 116 -16)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 116) -16)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -16 (*.f64 x 116))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 116 -16) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x 116 -16))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -16 (*.f64 -116 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x 116) 16)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (*.f64 -116 x) 16))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x 116 -16) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x 116 -16)) 4)) (cbrt.f64 (fma.f64 x 116 -16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 116 -16))) (pow.f64 (pow.f64 (fma.f64 x 116 -16) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x 116 -16)) (pow.f64 (fma.f64 x 116 -16) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x 116 -16) 2/3) (cbrt.f64 (fma.f64 x 116 -16)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 -116 x) 16)) (neg.f64 (pow.f64 (fma.f64 x 116 -16) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x 116) 3) -4096) (/.f64 1 (+.f64 256 (*.f64 (*.f64 x 116) (fma.f64 x 116 16)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 x 116) 3)) 4096) (/.f64 1 (neg.f64 (+.f64 256 (*.f64 (*.f64 x 116) (fma.f64 x 116 16))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x 116) 2/3) (-.f64 (cbrt.f64 256) (*.f64 (cbrt.f64 (*.f64 x 116)) (cbrt.f64 -16)))) (+.f64 (cbrt.f64 (*.f64 x 116)) (cbrt.f64 -16)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 256) (-.f64 (pow.f64 (*.f64 x 116) 2/3) (*.f64 (cbrt.f64 -16) (cbrt.f64 (*.f64 x 116))))) (+.f64 (cbrt.f64 -16) (cbrt.f64 (*.f64 x 116))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 -116 x) 16))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -116 x) 16) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x 116 -16))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x 116 -16) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x 116 -16) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x 116) 3) -4096) (+.f64 256 (*.f64 (*.f64 x 116) (fma.f64 x 116 16))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 x 116) 3)) 4096)) (+.f64 256 (*.f64 (*.f64 x 116) (fma.f64 x 116 16))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 x 116) 3)) 4096) (neg.f64 (+.f64 256 (*.f64 (*.f64 x 116) (fma.f64 x 116 16)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x 116 -16) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -116 x) 16) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 x 116) 3)) 4096)) (neg.f64 (neg.f64 (+.f64 256 (*.f64 (*.f64 x 116) (fma.f64 x 116 16))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 x 116 -16) 2) (+.f64 (pow.f64 (*.f64 x 116) 3) -4096))) (cbrt.f64 (+.f64 256 (*.f64 (*.f64 x 116) (fma.f64 x 116 16)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 116 -16) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x 116 -16)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x 116 -16) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 -116 x) 16))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 (pow.f64 (*.f64 x 116) 3) -4096) (neg.f64 (+.f64 256 (*.f64 (*.f64 x 116) (fma.f64 x 116 16))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x 116 -16) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 256) (cbrt.f64 -16) (*.f64 x 116))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -16) (cbrt.f64 256) (*.f64 x 116))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 116 -16)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 116 x -16)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 116)) (cbrt.f64 13456) -16)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x 116)) (pow.f64 (*.f64 x 116) 2/3) -16)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 116)) (sqrt.f64 116) -16)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) 116) -16)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 16 (*.f64 x 116))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -16 1 (*.f64 x 116))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -16 (*.f64 x 116))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 116) 1 -16)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x 116) -16)))))"]],"rules":[["egg-rr",47]],"time":36.947998046875,"type":"rewrite"},{"count":[[59,50]],"inputs":[["-16","(-.f64 (*.f64 116 x) 16)","(-.f64 (*.f64 116 x) 16)","(-.f64 (*.f64 116 x) 16)","(*.f64 116 x)","(-.f64 (*.f64 116 x) 16)","(-.f64 (*.f64 116 x) 16)","(-.f64 (*.f64 116 x) 16)","(*.f64 116 x)","(-.f64 (*.f64 116 x) 16)","(-.f64 (*.f64 116 x) 16)","(-.f64 (*.f64 116 x) 16)"]],"method":["egg-herbie"],"outputs":[["-16","(-.f64 (*.f64 116 x) 16)","(fma.f64 116 x -16)","(-.f64 (*.f64 116 x) 16)","(fma.f64 116 x -16)","(-.f64 (*.f64 116 x) 16)","(fma.f64 116 x -16)","(*.f64 116 x)","(-.f64 (*.f64 116 x) 16)","(fma.f64 116 x -16)","(-.f64 (*.f64 116 x) 16)","(fma.f64 116 x -16)","(-.f64 (*.f64 116 x) 16)","(fma.f64 116 x -16)","(*.f64 116 x)","(-.f64 (*.f64 116 x) 16)","(fma.f64 116 x -16)","(-.f64 (*.f64 116 x) 16)","(fma.f64 116 x -16)","(-.f64 (*.f64 116 x) 16)","(fma.f64 116 x -16)"]],"time":45.26220703125,"type":"simplify"},{"compiler":[[512,434]],"time":9.73583984375,"type":"eval"},{"alts":[["(fma.f64 x 116 -16)","done",0]],"compiler":[[5,4]],"count":[[51,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[50,0],"picked":[1,1]}],"min-error":[0],"time":7.14794921875,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["(-.f64 (*.f64 x 116) 16)",0,1],["(*.f64 x 116)",0,1]],"compiler":[[2,1],[6,5],[4,3],[10,8]],"count":[[2,1]],"inputs":[["(fma.f64 x 116 -16)","(-.f64 (*.f64 x 116) 16)"]],"link":["."],"name":["Data.Colour.CIE:lightness from colour-2.3.3"],"oracle":[0.0078125],"outputs":[["(fma.f64 x 116 -16)"]],"time":7.51708984375,"times":[["x",2.347900390625],["(-.f64 (*.f64 x 116) 16)",2.083984375],["(*.f64 x 116)",2.55615234375]],"type":"regimes"},{"compiler":[[5,4]],"inputs":[["(fma.f64 x 116 -16)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x 116 -16)"]],"stop":[["done",1]],"time":35.30810546875,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[5,4]],"remove-preprocessing":[[]],"time":7.992919921875,"type":"end"}]
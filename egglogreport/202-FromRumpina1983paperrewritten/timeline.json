[{"compiler":[[24,16]],"method":["search"],"sampling":[[1,2.938735877055719e-39,0.0,1.0],[0,0.0,2.938735877055719e-39,1.0]],"time":0.16796875,"type":"analyze"},{"outcomes":[["body",256,"valid",394.43603515625,8256]],"time":402.202880859375,"type":"sample"},{"compiler":[[17,11]],"inputs":[["0","1"],["(-.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 (*.f64 y y) (-.f64 (*.f64 y y) 2)))","(-.f64 (*.f64 9 (pow.f64 y 4)) (*.f64 (*.f64 x x) (-.f64 (*.f64 x x) 2)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 (*.f64 y y) (-.f64 (*.f64 y y) 2)))","(fma.f64 9 (pow.f64 x 4) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))","(-.f64 (*.f64 9 (pow.f64 y 4)) (*.f64 (*.f64 x x) (-.f64 (*.f64 x x) 2)))","(fma.f64 9 (pow.f64 y 4) (*.f64 (neg.f64 (*.f64 x x)) (fma.f64 x x -2)))"]],"symmetry":[[]],"time":63.55810546875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 (*.f64 y y) (-.f64 (*.f64 y y) 2)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 (*.f64 y y) (-.f64 (*.f64 y y) 2)))","(fma.f64 9 (pow.f64 x 4) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))"]],"time":20.048095703125,"type":"simplify"},{"compiler":[[31,19]],"time":0.476806640625,"type":"eval"},{"alts":[["(fma.f64 9 (pow.f64 x 4) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))","next",61.99859042974503]],"compiler":[[16,11],[16,11]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[61.99859042974503],"time":0.802001953125,"type":"prune"},{"compiler":[[44,21]],"locations":[["(fma.f64 9 (pow.f64 x 4) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))",61.99859042974503,true]],"time":10.580078125,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 9 (pow.f64 x 4) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))","y","-inf",0.373046875],["(fma.f64 9 (pow.f64 x 4) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))","y","inf",0.428955078125],["(fma.f64 9 (pow.f64 x 4) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))","y","0",0.4990234375],["(fma.f64 9 (pow.f64 x 4) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))","x","-inf",0.7138671875],["(fma.f64 9 (pow.f64 x 4) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))","x","inf",0.546142578125],["(fma.f64 9 (pow.f64 x 4) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))","x","0",0.93603515625]],"time":3.59912109375,"type":"series"},{"count":[[1,52]],"inputs":[["(fma.f64 9 (pow.f64 x 4) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 9 (pow.f64 x 4)) (neg.f64 (pow.f64 y 4))) (neg.f64 (*.f64 (*.f64 y y) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))) 0) (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))) (*.f64 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4)))) (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))) (*.f64 0 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 y 4)) (+.f64 (neg.f64 (*.f64 (*.f64 y y) -2)) (*.f64 9 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (*.f64 9 (pow.f64 x 4)) (pow.f64 y 4)) (*.f64 (*.f64 y y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 (*.f64 y y) (fma.f64 y y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 9 (pow.f64 x 4)) 0) (*.f64 (*.f64 y y) (fma.f64 y y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 (*.f64 y y) (fma.f64 y y -2)) (*.f64 9 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4)))) (pow.f64 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))) 2/3) (cbrt.f64 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (*.f64 y y) (fma.f64 y y -2)) (*.f64 9 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 y 2/3)) (*.f64 (pow.f64 y 4/3) (fma.f64 y y -2)) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 y y -2) (neg.f64 (pow.f64 y 2/3))) (pow.f64 y 4/3) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (fma.f64 y y -2)) (*.f64 y y) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 (fma.f64 y y -2) (neg.f64 y)) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (fma.f64 y y -2) 2/3) (pow.f64 y 4/3)) (cbrt.f64 (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2))) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 y y -2) (neg.f64 (*.f64 y y)) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2))) (*.f64 (pow.f64 (fma.f64 y y -2) 2/3) (pow.f64 y 4/3)) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (*.f64 (fma.f64 y y -2) y) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 y y -2)) (*.f64 (pow.f64 (fma.f64 y y -2) 2/3) (neg.f64 (*.f64 y y))) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) (neg.f64 (fma.f64 y y -2)) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (neg.f64 (pow.f64 y 6)) (fma.f64 y y -2))) (pow.f64 (fma.f64 y y -2) 2/3) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 y y -2) y) (neg.f64 y) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 y y -2) (neg.f64 y)) y (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 9) (*.f64 (cbrt.f64 81) (pow.f64 x 4)) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 (*.f64 x x)) (*.f64 3 (*.f64 x x)) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 9 (cbrt.f64 (pow.f64 x 4))) (cbrt.f64 (pow.f64 x 8)) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) (cbrt.f64 (*.f64 81 (pow.f64 x 8))) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 9 (*.f64 x x)) (*.f64 x x) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 9 (pow.f64 x 4) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 (*.f64 3 (pow.f64 x 4)) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 4) 9 (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 9 (pow.f64 x 4)) 1 (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (*.f64 y y) (fma.f64 y y -2)) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)) 1 (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 9 (pow.f64 x 4)) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))))))"]],"rules":[["egg-rr",52]],"time":25.126953125,"type":"rewrite"},{"count":[[76,63]],"inputs":[["(*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2))))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2))))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2))))","(*.f64 9 (pow.f64 x 4))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2))))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2))))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2))))","(*.f64 9 (pow.f64 x 4))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2))))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2))))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2))))","(*.f64 9 (pow.f64 x 4))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 2 (pow.f64 y 2)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (+.f64 (*.f64 2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 y 4))))","(+.f64 (*.f64 9 (pow.f64 x 4)) (+.f64 (*.f64 2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 y 4))))","(*.f64 -1 (pow.f64 y 4))","(+.f64 (*.f64 2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (+.f64 (*.f64 2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 y 4))))","(+.f64 (*.f64 9 (pow.f64 x 4)) (+.f64 (*.f64 2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 y 4))))","(*.f64 -1 (pow.f64 y 4))","(+.f64 (*.f64 2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (+.f64 (*.f64 2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 y 4))))","(+.f64 (*.f64 9 (pow.f64 x 4)) (+.f64 (*.f64 2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 y 4))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2)))","(fma.f64 y (+.f64 y y) (neg.f64 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2))))","(fma.f64 9 (pow.f64 x 4) (fma.f64 y (+.f64 y y) (neg.f64 (pow.f64 y 4))))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2))))","(fma.f64 9 (pow.f64 x 4) (fma.f64 y (+.f64 y y) (neg.f64 (pow.f64 y 4))))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2))))","(fma.f64 9 (pow.f64 x 4) (fma.f64 y (+.f64 y y) (neg.f64 (pow.f64 y 4))))","(*.f64 9 (pow.f64 x 4))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2))))","(fma.f64 9 (pow.f64 x 4) (fma.f64 y (+.f64 y y) (neg.f64 (pow.f64 y 4))))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2))))","(fma.f64 9 (pow.f64 x 4) (fma.f64 y (+.f64 y y) (neg.f64 (pow.f64 y 4))))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2))))","(fma.f64 9 (pow.f64 x 4) (fma.f64 y (+.f64 y y) (neg.f64 (pow.f64 y 4))))","(*.f64 9 (pow.f64 x 4))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2))))","(fma.f64 9 (pow.f64 x 4) (fma.f64 y (+.f64 y y) (neg.f64 (pow.f64 y 4))))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2))))","(fma.f64 9 (pow.f64 x 4) (fma.f64 y (+.f64 y y) (neg.f64 (pow.f64 y 4))))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (*.f64 (-.f64 (pow.f64 y 2) 2) (pow.f64 y 2))))","(fma.f64 9 (pow.f64 x 4) (fma.f64 y (+.f64 y y) (neg.f64 (pow.f64 y 4))))","(*.f64 9 (pow.f64 x 4))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 2 (pow.f64 y 2)))","(fma.f64 9 (pow.f64 x 4) (*.f64 y (+.f64 y y)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (+.f64 (*.f64 2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 y 4))))","(fma.f64 9 (pow.f64 x 4) (fma.f64 y (+.f64 y y) (neg.f64 (pow.f64 y 4))))","(+.f64 (*.f64 9 (pow.f64 x 4)) (+.f64 (*.f64 2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 y 4))))","(fma.f64 9 (pow.f64 x 4) (fma.f64 y (+.f64 y y) (neg.f64 (pow.f64 y 4))))","(*.f64 -1 (pow.f64 y 4))","(neg.f64 (pow.f64 y 4))","(+.f64 (*.f64 2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 y (+.f64 y y) (neg.f64 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (+.f64 (*.f64 2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 y 4))))","(fma.f64 9 (pow.f64 x 4) (fma.f64 y (+.f64 y y) (neg.f64 (pow.f64 y 4))))","(+.f64 (*.f64 9 (pow.f64 x 4)) (+.f64 (*.f64 2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 y 4))))","(fma.f64 9 (pow.f64 x 4) (fma.f64 y (+.f64 y y) (neg.f64 (pow.f64 y 4))))","(*.f64 -1 (pow.f64 y 4))","(neg.f64 (pow.f64 y 4))","(+.f64 (*.f64 2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 y (+.f64 y y) (neg.f64 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (+.f64 (*.f64 2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 y 4))))","(fma.f64 9 (pow.f64 x 4) (fma.f64 y (+.f64 y y) (neg.f64 (pow.f64 y 4))))","(+.f64 (*.f64 9 (pow.f64 x 4)) (+.f64 (*.f64 2 (pow.f64 y 2)) (*.f64 -1 (pow.f64 y 4))))","(fma.f64 9 (pow.f64 x 4) (fma.f64 y (+.f64 y y) (neg.f64 (pow.f64 y 4))))"]],"time":90.717041015625,"type":"simplify"},{"compiler":[[1075,667]],"time":15.0009765625,"type":"eval"},{"alts":[["(fma.f64 (*.f64 y y) (neg.f64 (fma.f64 y y -2)) (*.f64 9 (pow.f64 x 4)))","next",0]],"compiler":[[16,11],[16,11]],"count":[[64,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[63,1],"picked":[1,0]}],"min-error":[0],"time":5.135009765625,"type":"prune"},{"compiler":[[41,25]],"time":11.56396484375,"type":"localize"},{"compiler":[[2,2]],"time":0.0859375,"type":"eval"},{"alts":[["(fma.f64 (*.f64 y y) (neg.f64 (fma.f64 y y -2)) (*.f64 9 (pow.f64 x 4)))","done",0]],"compiler":[[16,11]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.382080078125,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["(-.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 (*.f64 y y) (-.f64 (*.f64 y y) 2)))",0,1],["(*.f64 9 (pow.f64 x 4))",0,1],["(pow.f64 x 4)",0,1],["(*.f64 (*.f64 y y) (-.f64 (*.f64 y y) 2))",0,1],["(*.f64 y y)",0,1]],"compiler":[[3,2],[3,2],[17,11],[7,6],[5,4],[11,6],[5,3],[45,27]],"count":[[3,1]],"inputs":[["(fma.f64 (*.f64 y y) (neg.f64 (fma.f64 y y -2)) (*.f64 9 (pow.f64 x 4)))","(fma.f64 9 (pow.f64 x 4) (*.f64 (neg.f64 (*.f64 y y)) (fma.f64 y y -2)))","(-.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 (*.f64 y y) (-.f64 (*.f64 y y) 2)))"]],"link":["."],"name":["From Rump in a 1983 paper, rewritten"],"oracle":[61.99859042974503],"outputs":[["(fma.f64 (*.f64 y y) (neg.f64 (fma.f64 y y -2)) (*.f64 9 (pow.f64 x 4)))"]],"time":12.531005859375,"times":[["x",1.510009765625],["y",1.530029296875],["(-.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 (*.f64 y y) (-.f64 (*.f64 y y) 2)))",1.739990234375],["(*.f64 9 (pow.f64 x 4))",1.655029296875],["(pow.f64 x 4)",1.587890625],["(*.f64 (*.f64 y y) (-.f64 (*.f64 y y) 2))",1.636962890625],["(*.f64 y y)",1.742919921875]],"type":"regimes"},{"compiler":[[16,11]],"inputs":[["(fma.f64 (*.f64 y y) (neg.f64 (fma.f64 y y -2)) (*.f64 9 (pow.f64 x 4)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (*.f64 y y) (neg.f64 (fma.f64 y y -2)) (*.f64 9 (pow.f64 x 4)))","(fma.f64 (*.f64 y y) (-.f64 2 (*.f64 y y)) (*.f64 9 (pow.f64 x 4)))"]],"stop":[["done",1]],"time":21.432861328125,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[16,11]],"remove-preprocessing":[[]],"time":10.400146484375,"type":"end"}]
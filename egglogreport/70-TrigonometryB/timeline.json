[{"compiler":[[17,9]],"method":["search"],"sampling":[[12,0.499755859375,0.499755859375,0.00048828125],[11,0.499755859375,0.499755859375,0.00048828125],[10,0.499755859375,0.499755859375,0.00048828125],[9,0.499755859375,0.499755859375,0.00048828125],[8,0.499755859375,0.499755859375,0.00048828125],[7,0.499755859375,0.499755859375,0.00048828125],[6,0.499755859375,0.499755859375,0.00048828125],[5,0.499755859375,0.499755859375,0.00048828125],[4,0.499755859375,0.499755859375,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":88.822021484375,"type":"analyze"},{"outcomes":[["body",1024,"valid",337.554931640625,2085],["body",512,"valid",102.16650390625,1035],["body",2048,"valid",0.825927734375,3],["body",256,"valid",244.125732421875,5133]],"time":692.8310546875,"type":"sample"},{"compiler":[[16,8]],"inputs":[["0"],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))"]],"symmetry":[[]],"time":52.975830078125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))"]],"time":19.53515625,"type":"simplify"},{"compiler":[[29,15]],"time":0.428955078125,"type":"eval"},{"alts":[["(/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))","fresh",0.44069363164705],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","next",0.43852136707707645]],"compiler":[[14,9],[16,8],[14,9],[16,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.3879464439652239],"time":1.370849609375,"type":"prune"},{"compiler":[[39,13]],"locations":[["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))",0.16015625,true],["(-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x)))",0.16336319020555173,true],["(*.f64 (tan.f64 x) (tan.f64 x))",0.27181625976844204,true],["(tan.f64 x)",0.2871475586106521,true]],"time":7.528076171875,"type":"localize"},{"count":[[4,48]],"series":[["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","x","-inf",0.916015625],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","x","inf",0.55517578125],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","x","0",0.2529296875],["(-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x)))","x","-inf",0.18701171875],["(-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x)))","x","inf",0.2109375],["(-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x)))","x","0",0.203857421875],["(*.f64 (tan.f64 x) (tan.f64 x))","x","-inf",0.3818359375],["(*.f64 (tan.f64 x) (tan.f64 x))","x","inf",0.403076171875],["(*.f64 (tan.f64 x) (tan.f64 x))","x","0",0.432861328125],["(tan.f64 x)","x","-inf",0.407958984375],["(tan.f64 x)","x","inf",0.43212890625],["(tan.f64 x)","x","0",0.39501953125]],"time":4.966064453125,"type":"series"},{"count":[[4,259]],"inputs":[["(tan.f64 x)","(*.f64 (tan.f64 x) (tan.f64 x))","(-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x)))","(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (tan.f64 x) 0) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 x) (*.f64 (tan.f64 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (tan.f64 x)) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 x) (*.f64 0 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 x)) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (tan.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 x)) (/.f64 1 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (sin.f64 x))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 x)) (cbrt.f64 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) 1) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (tan.f64 x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) 1) (*.f64 (neg.f64 (cos.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (tan.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (tan.f64 x) 2) 0) (pow.f64 (tan.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (tan.f64 x) 2) (*.f64 (pow.f64 (tan.f64 x) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (tan.f64 x) 2)) (pow.f64 (tan.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (tan.f64 x) 2) (*.f64 0 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 x) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (pow.f64 (tan.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 4)) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 x)) (pow.f64 (cbrt.f64 (tan.f64 x)) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (tan.f64 x)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (tan.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (tan.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) (+.f64 2 3)) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))) (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 4))) (cbrt.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (/.f64 1 (cos.f64 x)) (/.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) 2) (/.f64 1 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (tan.f64 x) (sin.f64 x)) (/.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (tan.f64 x) (sin.f64 x)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (tan.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (*.f64 (tan.f64 x) (sin.f64 x)))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (sin.f64 x))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (tan.f64 x) (sin.f64 x)) 1) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 x) 2) 1) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 x)) (pow.f64 (cbrt.f64 (tan.f64 x)) (+.f64 2 3))) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (tan.f64 x))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (tan.f64 x) 2) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (tan.f64 x) (sin.f64 x)) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (tan.f64 x) (sin.f64 x)) 1) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (*.f64 (tan.f64 x) (sin.f64 x)))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (cos.f64 x) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 x) 2) 1) (*.f64 (pow.f64 (cos.f64 x) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (tan.f64 x) (sin.f64 x))) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 3) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (tan.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 3) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 x) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 0) (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (*.f64 0 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 6) (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (tan.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 (tan.f64 x) (tan.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 1 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))) 1) (/.f64 (/.f64 (pow.f64 (tan.f64 x) 6) (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))) (/.f64 (pow.f64 (tan.f64 x) 6) (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (tan.f64 x) -1) (-.f64 -1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (tan.f64 x) 1) (-.f64 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (tan.f64 x)) (+.f64 (tan.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (tan.f64 x)) (+.f64 (tan.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1)) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (tan.f64 x)) (-.f64 -1 (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (tan.f64 x) 6)) (/.f64 1 (neg.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (/.f64 1 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 4)) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))) (-.f64 1 (cbrt.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))) (-.f64 1 (pow.f64 (tan.f64 x) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 6) 3)) (/.f64 1 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))))) (+.f64 1 (+.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 6) (pow.f64 (tan.f64 x) 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (cbrt.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))))) (pow.f64 (cbrt.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cos.f64 x) (neg.f64 (*.f64 (tan.f64 x) (sin.f64 x)))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 (tan.f64 x) (sin.f64 x))) 1) (cos.f64 x)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))) (*.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))) (pow.f64 (tan.f64 x) 6))) (*.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))) (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 x) (*.f64 (tan.f64 x) (sin.f64 x))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (tan.f64 x) 6)) 1) (*.f64 (neg.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 6) 3)) 1) (*.f64 (+.f64 1 (+.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 6) (pow.f64 (tan.f64 x) 6))) (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (tan.f64 x) 6)) (neg.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)))) (cbrt.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2))) (cbrt.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (tan.f64 x) 6)) 1) (neg.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 4))) (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 4))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (pow.f64 (tan.f64 x) 4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (tan.f64 x) (neg.f64 (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 (tan.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (*.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (pow.f64 (tan.f64 x) 2))) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 0) (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (*.f64 0 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 1 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (/.f64 (pow.f64 (tan.f64 x) 6) (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)) (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (/.f64 1 (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 2)) (cbrt.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (/.f64 1 (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (fma.f64 (tan.f64 x) (tan.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) -2))) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (/.f64 1 (*.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 1 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (cbrt.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))))) (pow.f64 (cbrt.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2)) (*.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (tan.f64 x) 2))) (*.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (*.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (pow.f64 (tan.f64 x) 2)))) (*.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2)) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 6) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))) (*.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)) (pow.f64 (tan.f64 x) 2))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)) (neg.f64 (pow.f64 (tan.f64 x) 2)))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)) (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 6) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 (pow.f64 (tan.f64 x) 2)))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 6) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)) (+.f64 -1 (pow.f64 (tan.f64 x) 6))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)) (neg.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)) (-.f64 1 (pow.f64 (tan.f64 x) 6))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)) (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (tan.f64 x) 6)) -1) (*.f64 (neg.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (tan.f64 x) 6)) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3))) (*.f64 (neg.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (tan.f64 x) 6)) 1) (*.f64 (neg.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) -1) (*.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3))) (*.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (-.f64 1 (pow.f64 (tan.f64 x) 2)))) (neg.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (tan.f64 x) 6)) (neg.f64 (*.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (*.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)) (-.f64 1 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1))) (cbrt.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2))) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) -2))) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (-.f64 1 (pow.f64 (tan.f64 x) 2))) 1) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1) (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) 1) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 2))) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 2))) (cbrt.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (tan.f64 x) 6)) (/.f64 1 (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) 1) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (+.f64 1 (pow.f64 (tan.f64 x) 6))) (/.f64 1 (-.f64 (+.f64 1 (pow.f64 (tan.f64 x) 4)) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1) (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (-.f64 1 (pow.f64 (tan.f64 x) 2))) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (/.f64 (*.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (*.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (tan.f64 x) 6)) (*.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2)) (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (tan.f64 x) 6)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (tan.f64 x) 6)) 1) (*.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (*.f64 (*.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (+.f64 -1 (pow.f64 (tan.f64 x) 6))) (neg.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6))) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (tan.f64 x) 6)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) -2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) -2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))))"]],"rules":[["egg-rr",100],["egg-rr",72],["egg-rr",55],["egg-rr",32]],"time":45.824951171875,"type":"rewrite"},{"count":[[307,291]],"inputs":[["x","(+.f64 (*.f64 1/3 (pow.f64 x 3)) x)","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(pow.f64 x 2)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (pow.f64 x 2))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 17/45 (pow.f64 x 6)) (pow.f64 x 2)))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 62/315 (pow.f64 x 8)) (+.f64 (*.f64 17/45 (pow.f64 x 6)) (pow.f64 x 2))))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","1","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (*.f64 -1 (pow.f64 x 2))))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -17/45 (pow.f64 x 6)))))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","1","(+.f64 (*.f64 -2 (pow.f64 x 2)) 1)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) 1))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 1 (*.f64 -4/45 (pow.f64 x 6)))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 1/3 (pow.f64 x 3)) x)","(fma.f64 1/3 (pow.f64 x 3) x)","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(fma.f64 (pow.f64 x 3) 1/3 (fma.f64 2/15 (pow.f64 x 5) x))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(fma.f64 17/315 (pow.f64 x 7) (fma.f64 (pow.f64 x 3) 1/3 (fma.f64 2/15 (pow.f64 x 5) x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (pow.f64 x 2))","(fma.f64 2/3 (pow.f64 x 4) (*.f64 x x))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 17/45 (pow.f64 x 6)) (pow.f64 x 2)))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 17/45 (pow.f64 x 6) (*.f64 x x)))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 62/315 (pow.f64 x 8)) (+.f64 (*.f64 17/45 (pow.f64 x 6)) (pow.f64 x 2))))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 (pow.f64 x 8) 62/315 (fma.f64 17/45 (pow.f64 x 6) (*.f64 x x))))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(*.f64 (tan.f64 x) (tan.f64 x))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(*.f64 (tan.f64 x) (tan.f64 x))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(*.f64 (tan.f64 x) (tan.f64 x))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(*.f64 (tan.f64 x) (tan.f64 x))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(*.f64 (tan.f64 x) (tan.f64 x))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(*.f64 (tan.f64 x) (tan.f64 x))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(*.f64 (tan.f64 x) (tan.f64 x))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(*.f64 (tan.f64 x) (tan.f64 x))","1","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(-.f64 1 (*.f64 x x))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (*.f64 -1 (pow.f64 x 2))))","(-.f64 (fma.f64 -2/3 (pow.f64 x 4) 1) (*.f64 x x))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -17/45 (pow.f64 x 6)))))","(+.f64 (fma.f64 -2/3 (pow.f64 x 4) 1) (fma.f64 -17/45 (pow.f64 x 6) (neg.f64 (*.f64 x x))))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x)))","1","(+.f64 (*.f64 -2 (pow.f64 x 2)) 1)","(fma.f64 -2 (*.f64 x x) 1)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) 1))","(fma.f64 (pow.f64 x 4) 2/3 (fma.f64 -2 (*.f64 x x) 1))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 1 (*.f64 -4/45 (pow.f64 x 6)))))","(fma.f64 (pow.f64 x 4) 2/3 (fma.f64 -2 (*.f64 x x) (fma.f64 (pow.f64 x 6) -4/45 1)))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))"]],"time":148.075927734375,"type":"simplify"},{"compiler":[[10184,5324]],"time":103.18701171875,"type":"eval"},{"alts":[["(/.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))","fresh",0.5204596287446024],["(/.f64 (-.f64 1 (*.f64 (/.f64 (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","fresh",0.4986027899319734],["(/.f64 (*.f64 (+.f64 1 (+.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 4)) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))) (-.f64 1 (cbrt.f64 (pow.f64 (tan.f64 x) 2)))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","fresh",0.5881084861184149],["(/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))","fresh",0.441558896681231],["(fma.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) -2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))","fresh",0.5236564376605585],["(-.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (/.f64 1 (-.f64 -1 (pow.f64 (tan.f64 x) 2))))","fresh",0.523942774619598],["(/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 3) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","fresh",0.6054493710841191],["(pow.f64 (cbrt.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) 3)","fresh",0.5431365964943763],["(/.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (/.f64 1 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","fresh",0.5070153538765361],["(/.f64 (-.f64 1 (*.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (cos.f64 x))) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","fresh",0.4882409747009101],["(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","next",0.38538083753755886],["(/.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","fresh",0.5746741594359597]],"compiler":[[23,14],[26,17],[30,21],[14,9],[31,20],[21,16],[18,13],[17,12],[29,18],[27,18],[24,18],[23,16],[23,14],[26,17],[30,21],[14,9],[31,20],[21,16],[18,13],[17,12],[29,18],[27,18],[24,18],[23,16]],"count":[[473,12]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[471,12],"picked":[1,0]}],"min-error":[0.05885191090022567],"time":255.60107421875,"type":"prune"},{"compiler":[[70,43]],"locations":[["(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))",0.16015625,true],["(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))",0.16336319020555173,true],["(pow.f64 (sin.f64 x) 2)",0.240566259768442,true],["(pow.f64 (cos.f64 x) 2)",0.25228500976844204,true]],"time":15.623046875,"type":"localize"},{"count":[[4,16]],"series":[["(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","x","-inf",0.344970703125],["(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","x","inf",0.3310546875],["(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","x","0",0.197021484375],["(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","x","-inf",0.425048828125],["(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","x","inf",0.427978515625],["(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","x","0",0.18603515625],["(pow.f64 (sin.f64 x) 2)","x","-inf",0.302001953125],["(pow.f64 (sin.f64 x) 2)","x","inf",0.302978515625],["(pow.f64 (sin.f64 x) 2)","x","0",0.26318359375],["(pow.f64 (cos.f64 x) 2)","x","-inf",0.302001953125],["(pow.f64 (cos.f64 x) 2)","x","inf",0.31689453125],["(pow.f64 (cos.f64 x) 2)","x","0",0.284912109375]],"time":3.8310546875,"type":"series"},{"count":[[4,287]],"inputs":[["(pow.f64 (cos.f64 x) 2)","(pow.f64 (sin.f64 x) 2)","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 1/2) (*.f64 1/2 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 1) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) 2) (*.f64 (pow.f64 (cos.f64 x) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cos.f64 x) 2) 0) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 1) (*.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) 2) (*.f64 0 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (cos.f64 x) 2)) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cbrt.f64 (pow.f64 (cos.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4)) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 x) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) (+.f64 2 3)) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (neg.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (cos.f64 x) 2))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (sin.f64 x)) (-.f64 -1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (sin.f64 x)) (-.f64 1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (neg.f64 (sin.f64 x))) (-.f64 -1 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (neg.f64 (sin.f64 x))) (-.f64 1 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4)) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))) (-.f64 1 (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cos.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0)) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cos.f64 x) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0)) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0)) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0)) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0)) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0)) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0)) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 1/2 3) (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) 3)) (+.f64 (*.f64 1/2 1/2) (-.f64 (*.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (*.f64 1/2 (cos.f64 (+.f64 x x)))) (*.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (sin.f64 x) 6)) (+.f64 1 (+.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 2 (-.f64 (cos.f64 0) (cos.f64 (+.f64 x x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 3) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 3) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (cos.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (pow.f64 (sin.f64 x) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 x) 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (pow.f64 (sin.f64 x) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 1) (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (pow.f64 (sin.f64 x) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (sin.f64 x) 2) 0) (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (sin.f64 x) 2) (*.f64 0 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (sin.f64 x) 2)) (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 (neg.f64 1/2) (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (neg.f64 (*.f64 1/2 (cos.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 1/2) (*.f64 1/2 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1/2 (/.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (cos.f64 0) 2) (*.f64 1/2 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (cbrt.f64 (pow.f64 (sin.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4)) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (pow.f64 (cbrt.f64 (sin.f64 x)) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) (+.f64 2 3)) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (neg.f64 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (sin.f64 x) 2))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (neg.f64 (cos.f64 x))) (-.f64 -1 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (neg.f64 (cos.f64 x))) (-.f64 1 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (cos.f64 x)) (-.f64 -1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (cos.f64 x)) (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cos.f64 0) (cos.f64 (+.f64 x x))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4)) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))) (-.f64 1 (cbrt.f64 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 0) (cos.f64 (+.f64 x x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cos.f64 0) (cos.f64 (+.f64 x x))) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (sin.f64 x) 2) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 0) (cos.f64 (+.f64 x x))) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 0) (cos.f64 (+.f64 x x))) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 0) (cos.f64 (+.f64 x x))) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 0) (cos.f64 (+.f64 x x))) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 0) (cos.f64 (+.f64 x x))) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 0) (cos.f64 (+.f64 x x))) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (cos.f64 x) 6)) (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 4) (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 1/2 3) (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) 3)) (+.f64 (*.f64 1/2 1/2) (+.f64 (*.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (*.f64 1/2 (cos.f64 (+.f64 x x)))) (*.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 2 (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (cos.f64 0) (cos.f64 (+.f64 x x)))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 x) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 x) 3) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 x)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 x) 3) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sin.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (pow.f64 (cos.f64 x) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 x) 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (pow.f64 (cos.f64 x) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 0) (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (*.f64 0 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)) (neg.f64 (/.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 3) (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)) (/.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 3) (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (tan.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 (tan.f64 x) (tan.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 1 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)) 1) (/.f64 (/.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 3) (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (/.f64 1 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1)) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (tan.f64 x)) (-.f64 -1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (tan.f64 x)) (-.f64 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (/.f64 1 (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))) (-.f64 1 (cbrt.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)))) (cbrt.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 3) 3)) (/.f64 1 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1))) (+.f64 1 (+.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 6) (pow.f64 (pow.f64 (tan.f64 x) 2) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2))) (cbrt.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) 1) (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (cbrt.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1))) (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2)) (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (cos.f64 x) 2) (neg.f64 (pow.f64 (sin.f64 x) 2))) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (sin.f64 x) 2) (neg.f64 (pow.f64 (cos.f64 x) 2))) (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1) (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1) (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 x) (/.f64 (pow.f64 (sin.f64 x) 2) (cos.f64 x))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (pow.f64 (cos.f64 x) 2)) (neg.f64 (pow.f64 (sin.f64 x) 2))) (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4)) (*.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))) (cbrt.f64 (pow.f64 (cos.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (sin.f64 x) 2) (neg.f64 (pow.f64 (cos.f64 x) -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (neg.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))) (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 (tan.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (*.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (pow.f64 (tan.f64 x) 2))) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 0) (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (*.f64 0 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (/.f64 1 (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 1 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (/.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 3) (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)) (/.f64 (*.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)) (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 2)) (cbrt.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (/.f64 1 (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) (cbrt.f64 (/.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (fma.f64 (tan.f64 x) (tan.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (cbrt.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (pow.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (/.f64 1 (*.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 1 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 1 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (cbrt.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1))) (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))))) (*.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (*.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (pow.f64 (tan.f64 x) 2)))) (*.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2)) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2)) (*.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (tan.f64 x) 2))) (*.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 (pow.f64 (tan.f64 x) 2)))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)) (neg.f64 (pow.f64 (tan.f64 x) 2)))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)) (pow.f64 (tan.f64 x) 2))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (neg.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (-.f64 1 (pow.f64 (tan.f64 x) 2)))) (neg.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2))) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (+.f64 -1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)) (-.f64 1 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1))) (cbrt.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (/.f64 1 (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) 1) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (-.f64 1 (pow.f64 (tan.f64 x) 2))) 1) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1) (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 2))) (cbrt.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1)) (cbrt.f64 (/.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))) (cbrt.f64 (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 2))) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (/.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (/.f64 1 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (-.f64 1 (pow.f64 (tan.f64 x) 2))) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1) (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) 1) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (/.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) -2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)) (pow.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) -2) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) -2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))))))"]],"rules":[["egg-rr",93],["egg-rr",70],["egg-rr",64],["egg-rr",60]],"time":48.708984375,"type":"rewrite"},{"count":[[303,312]],"inputs":[["1","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 1/3 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (+.f64 (*.f64 -2/45 (pow.f64 x 6)) (*.f64 1/3 (pow.f64 x 4)))))","(pow.f64 x 2)","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (pow.f64 x 2))","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (+.f64 (*.f64 2/45 (pow.f64 x 6)) (pow.f64 x 2)))","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (+.f64 (*.f64 -1/315 (pow.f64 x 8)) (+.f64 (*.f64 2/45 (pow.f64 x 6)) (pow.f64 x 2))))","1","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (*.f64 -1 (pow.f64 x 2))))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -17/45 (pow.f64 x 6)))))","1","(+.f64 (*.f64 -2 (pow.f64 x 2)) 1)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) 1))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 1 (*.f64 -4/45 (pow.f64 x 6)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(-.f64 1 (*.f64 x x))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 1/3 (pow.f64 x 4))))","(+.f64 1 (fma.f64 1/3 (pow.f64 x 4) (neg.f64 (*.f64 x x))))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (+.f64 (*.f64 -2/45 (pow.f64 x 6)) (*.f64 1/3 (pow.f64 x 4)))))","(+.f64 (-.f64 1 (*.f64 x x)) (fma.f64 -2/45 (pow.f64 x 6) (*.f64 1/3 (pow.f64 x 4))))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (pow.f64 x 2))","(fma.f64 -1/3 (pow.f64 x 4) (*.f64 x x))","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (+.f64 (*.f64 2/45 (pow.f64 x 6)) (pow.f64 x 2)))","(fma.f64 (pow.f64 x 4) -1/3 (fma.f64 2/45 (pow.f64 x 6) (*.f64 x x)))","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (+.f64 (*.f64 -1/315 (pow.f64 x 8)) (+.f64 (*.f64 2/45 (pow.f64 x 6)) (pow.f64 x 2))))","(fma.f64 (pow.f64 x 4) -1/3 (fma.f64 (pow.f64 x 8) -1/315 (fma.f64 2/45 (pow.f64 x 6) (*.f64 x x))))","1","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(-.f64 1 (*.f64 x x))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (*.f64 -1 (pow.f64 x 2))))","(-.f64 (fma.f64 -2/3 (pow.f64 x 4) 1) (*.f64 x x))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -17/45 (pow.f64 x 6)))))","(+.f64 (fma.f64 -2/3 (pow.f64 x 4) 1) (fma.f64 -17/45 (pow.f64 x 6) (neg.f64 (*.f64 x x))))","1","(+.f64 (*.f64 -2 (pow.f64 x 2)) 1)","(fma.f64 -2 (*.f64 x x) 1)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) 1))","(fma.f64 (pow.f64 x 4) 2/3 (fma.f64 -2 (*.f64 x x) 1))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 1 (*.f64 -4/45 (pow.f64 x 6)))))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 -2 (*.f64 x x) (fma.f64 (pow.f64 x 6) -4/45 1)))"]],"time":58.973876953125,"type":"simplify"},{"compiler":[[12554,8236]],"time":142.242919921875,"type":"eval"},{"alts":[["(/.f64 (-.f64 1 (/.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 x x)))) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","fresh",0.40866392986495487],["(pow.f64 (cbrt.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) 3)","fresh",0.5431365964943763],["(/.f64 (fma.f64 (pow.f64 (sin.f64 x) 2) (neg.f64 (pow.f64 (cos.f64 x) -2)) 1) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","fresh",0.42728732280929893],["(/.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","next",0.2575187988422101],["(-.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (/.f64 1 (-.f64 -1 (pow.f64 (tan.f64 x) 2))))","fresh",0.523942774619598],["(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (+.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4)) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))) (-.f64 1 (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))))","fresh",1.2459930616604051],["(/.f64 (-.f64 1 (*.f64 (/.f64 (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","fresh",0.4986027899319734],["(/.f64 (*.f64 (+.f64 1 (+.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 4)) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))) (-.f64 1 (cbrt.f64 (pow.f64 (tan.f64 x) 2)))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","fresh",0.5881084861184149],["(/.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (/.f64 1 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) -1) 1)))","fresh",0.5147907475776297],["(/.f64 (/.f64 (+.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","fresh",0.44163914392698683]],"compiler":[[28,22],[17,12],[24,18],[22,16],[21,16],[41,31],[26,17],[30,21],[31,22],[28,20],[28,22],[17,12],[24,18],[22,16],[21,16],[41,31],[26,17],[30,21],[31,22],[28,20]],"count":[[463,10]],"kept":[{"done":[0,0],"fresh":[11,4],"new":[451,6],"picked":[1,0]}],"min-error":[0.0078125],"time":269.662109375,"type":"prune"},{"compiler":[[73,37]],"locations":[["(/.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))",0.16015625,true],["(/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))",0.16796875,true],["(pow.f64 (sin.f64 x) 2)",0.240566259768442,false],["(pow.f64 (cos.f64 x) 2)",0.25228500976844204,false]],"time":16.264892578125,"type":"localize"},{"count":[[2,24]],"series":[["(/.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","x","-inf",0.77294921875],["(/.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","x","inf",0.72412109375],["(/.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","x","0",1.093017578125],["(/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))","x","-inf",0.466064453125],["(/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))","x","inf",0.5009765625],["(/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))","x","0",0.401123046875]],"time":4.085205078125,"type":"series"},{"count":[[2,180]],"inputs":[["(/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))","(/.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (neg.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 0) (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (*.f64 0 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (tan.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (neg.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 (tan.f64 x) (tan.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (*.f64 (pow.f64 (cos.f64 x) -2) (pow.f64 (tan.f64 x) 2)))) (/.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 3) (+.f64 1 (*.f64 (pow.f64 (cos.f64 x) -2) (pow.f64 (tan.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (pow.f64 (cos.f64 x) 2))) (fma.f64 (tan.f64 x) (tan.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)) (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (cos.f64 x)) (/.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) -2) (cos.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 x)) (/.f64 (cos.f64 (+.f64 x x)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 (+.f64 x x)) (cos.f64 x)) (/.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)) (cos.f64 x)) (/.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4))) (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 (+.f64 x x)) (+.f64 (cos.f64 (+.f64 x x)) 1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1)) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (tan.f64 x)) (-.f64 -1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (tan.f64 x)) (-.f64 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) -2))) (/.f64 1 (cbrt.f64 (pow.f64 (cos.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (/.f64 1 (+.f64 1 (*.f64 (pow.f64 (cos.f64 x) -2) (pow.f64 (tan.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))) (-.f64 1 (cbrt.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (/.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 4))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 (+.f64 x x))) (neg.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 (tan.f64 x) (tan.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 x) -2)) (neg.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (neg.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) -2))) (cbrt.f64 (pow.f64 (cos.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cos.f64 (+.f64 x x)) (cos.f64 x)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (cos.f64 x)) (cos.f64 (+.f64 x x))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (cos.f64 x)) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)) (cbrt.f64 (cos.f64 (+.f64 x x)))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)) (cbrt.f64 (neg.f64 (cos.f64 (+.f64 x x))))) (cbrt.f64 (neg.f64 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (cos.f64 (+.f64 x x))) (cbrt.f64 (pow.f64 (cos.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 4))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (/.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)) (cos.f64 x))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (cbrt.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4)))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (cos.f64 (+.f64 x x)))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2))) (cbrt.f64 (neg.f64 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (cos.f64 (+.f64 x x)))) (cbrt.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4)))) (cbrt.f64 (neg.f64 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cos.f64 (+.f64 x x)) (cos.f64 x)) 1) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) -2))) 1) (cbrt.f64 (pow.f64 (cos.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) 3)) (+.f64 1 (*.f64 (pow.f64 (cos.f64 x) -2) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4)) (*.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))) (cbrt.f64 (pow.f64 (cos.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 x) (/.f64 (pow.f64 (sin.f64 x) 2) (cos.f64 x))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (pow.f64 (cos.f64 x) 4)) (*.f64 (pow.f64 (cos.f64 x) 2) (neg.f64 (pow.f64 (sin.f64 x) 2)))) (neg.f64 (pow.f64 (cos.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 x) 2) (cbrt.f64 (pow.f64 (cos.f64 x) 4))) (*.f64 (pow.f64 (cos.f64 x) 2) (*.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 (cos.f64 x) -2))))) (*.f64 (pow.f64 (cos.f64 x) 2) (cbrt.f64 (pow.f64 (cos.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (cos.f64 x) 4) (*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 x) 2))) (pow.f64 (cos.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (cos.f64 x) 3) (*.f64 (pow.f64 (cos.f64 x) 2) (/.f64 (pow.f64 (sin.f64 x) 2) (cos.f64 x)))) (pow.f64 (cos.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (cos.f64 (+.f64 x x)) (cos.f64 x))) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (neg.f64 (+.f64 1 (*.f64 (pow.f64 (cos.f64 x) -2) (pow.f64 (tan.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 (+.f64 x x))) (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (+.f64 1 (*.f64 (pow.f64 (cos.f64 x) -2) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (pow.f64 (tan.f64 x) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (neg.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (-.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (cos.f64 x) 2) 1/2) (*.f64 1/2 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) 2) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (cos.f64 x) 2) 1) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (+.f64 x x)) 0) (cos.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (+.f64 x x)) (*.f64 (cos.f64 (+.f64 x x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 (+.f64 x x))) (cos.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (+.f64 x x)) (*.f64 0 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (pow.f64 (cos.f64 x) 2) 0) (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 1 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (pow.f64 (cos.f64 x) -2) -1) (/.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (pow.f64 (cos.f64 x) -2))) (neg.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 x) (sin.f64 x)) (-.f64 (cos.f64 x) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)) (cbrt.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cos.f64 x) (sin.f64 x)) (+.f64 (cos.f64 x) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (cos.f64 x)) (neg.f64 (sin.f64 x))) (-.f64 (neg.f64 (cos.f64 x)) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cos.f64 x) (sin.f64 x)) (-.f64 (cos.f64 x) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (cos.f64 x)) (sin.f64 x)) (-.f64 (neg.f64 (cos.f64 x)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4)) (+.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))) (-.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (/.f64 -1 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (+.f64 x x)) (/.f64 (pow.f64 (cos.f64 x) -2) (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) -2))) (/.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)) (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (cbrt.f64 (/.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2) (pow.f64 (cos.f64 x) (+.f64 -2 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (pow.f64 (cos.f64 x) -2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cos.f64 x) -2) -1) (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cos.f64 x) -2) (neg.f64 1/3)) (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2)))) (/.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (pow.f64 (cos.f64 x) -2)) (cos.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2)))) (pow.f64 (pow.f64 (cos.f64 x) -2) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (pow.f64 (cos.f64 x) -2)) (fma.f64 (tan.f64 x) (tan.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2) (pow.f64 (cos.f64 x) (+.f64 -2 -2)))) (cbrt.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (+.f64 (cos.f64 (+.f64 x x)) 1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (pow.f64 (cos.f64 x) -2))) (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (pow.f64 (cos.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 (+.f64 x x)) (neg.f64 (pow.f64 (cos.f64 x) -2))) (neg.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 (+.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 (+.f64 x x)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (neg.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) -2))) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1))) (cbrt.f64 (neg.f64 (pow.f64 (cos.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (pow.f64 (cos.f64 x) -2) (neg.f64 1/3)) (-.f64 1 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (pow.f64 (cos.f64 x) -2) -1) (/.f64 (cos.f64 (+.f64 x x)) (cos.f64 x))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (pow.f64 (cos.f64 x) -2) -1) (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))) (cbrt.f64 (pow.f64 (cos.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (/.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2) (pow.f64 (cos.f64 x) (+.f64 -2 -2))))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1)) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2))) (cbrt.f64 (neg.f64 (pow.f64 (cos.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1)) (cbrt.f64 (/.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2) (pow.f64 (cos.f64 x) (+.f64 -2 -2))))) (cbrt.f64 (neg.f64 (pow.f64 (cos.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 (+.f64 x x)) (/.f64 -1 (pow.f64 (cos.f64 x) -2))) (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cos.f64 (+.f64 x x)) (neg.f64 (pow.f64 (cos.f64 x) -2))) 1) (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (pow.f64 (cos.f64 x) -2))) 1) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)) (pow.f64 (cos.f64 x) -2))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (cos.f64 (+.f64 x x)))) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2)) (pow.f64 (cos.f64 x) -2))) (cbrt.f64 (neg.f64 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2)))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 (+.f64 x x)) (/.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cos.f64 (+.f64 x x)) (cos.f64 x)) (pow.f64 (pow.f64 (cos.f64 x) -2) -1)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) -2))) (pow.f64 (pow.f64 (cos.f64 x) -2) -1)) (cbrt.f64 (pow.f64 (cos.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) (-.f64 1 (cos.f64 (+.f64 x x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) 2) (*.f64 2 (-.f64 1 (cos.f64 (+.f64 x x))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (cos.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cos.f64 (+.f64 x x)) (neg.f64 (pow.f64 (cos.f64 x) -2))) (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (pow.f64 (cos.f64 x) -2))) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (cos.f64 (+.f64 x x))) (/.f64 -1 (pow.f64 (cos.f64 x) -2))) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) 1) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 (+.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (+.f64 x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (cos.f64 (+.f64 x x))) (/.f64 (pow.f64 (cos.f64 x) -2) (pow.f64 (cos.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (pow.f64 (pow.f64 (cos.f64 x) -2) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (pow.f64 (cos.f64 x) -2) -1) (fma.f64 (tan.f64 x) (tan.f64 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cbrt.f64 (pow.f64 (cos.f64 x) 4)) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) (+.f64 2 3)) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4)) (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 x)) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (cos.f64 x) 2) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cos.f64 x) 2) 1 (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (pow.f64 (cos.f64 x) 2)) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (+.f64 x x))))))"]],"rules":[["egg-rr",98],["egg-rr",82]],"time":35.683837890625,"type":"rewrite"},{"count":[[204,197]],"inputs":[["1","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (*.f64 -1 (pow.f64 x 2))))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -17/45 (pow.f64 x 6)))))","(/.f64 (cos.f64 (*.f64 2 x)) (pow.f64 (cos.f64 x) 2))","(/.f64 (cos.f64 (*.f64 2 x)) (pow.f64 (cos.f64 x) 2))","(/.f64 (cos.f64 (*.f64 2 x)) (pow.f64 (cos.f64 x) 2))","(/.f64 (cos.f64 (*.f64 2 x)) (pow.f64 (cos.f64 x) 2))","(/.f64 (cos.f64 (neg.f64 (*.f64 -2 x))) (pow.f64 (cos.f64 x) 2))","(/.f64 (cos.f64 (neg.f64 (*.f64 -2 x))) (pow.f64 (cos.f64 x) 2))","(/.f64 (cos.f64 (neg.f64 (*.f64 -2 x))) (pow.f64 (cos.f64 x) 2))","(/.f64 (cos.f64 (neg.f64 (*.f64 -2 x))) (pow.f64 (cos.f64 x) 2))","1","(+.f64 (*.f64 -2 (pow.f64 x 2)) 1)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) 1))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 1 (*.f64 -4/45 (pow.f64 x 6)))))","(/.f64 (cos.f64 (*.f64 2 x)) (*.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(/.f64 (cos.f64 (*.f64 2 x)) (*.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(/.f64 (cos.f64 (*.f64 2 x)) (*.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(/.f64 (cos.f64 (*.f64 2 x)) (*.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(/.f64 (cos.f64 (neg.f64 (*.f64 -2 x))) (*.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(/.f64 (cos.f64 (neg.f64 (*.f64 -2 x))) (*.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(/.f64 (cos.f64 (neg.f64 (*.f64 -2 x))) (*.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(/.f64 (cos.f64 (neg.f64 (*.f64 -2 x))) (*.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(-.f64 1 (*.f64 x x))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (*.f64 -1 (pow.f64 x 2))))","(-.f64 (fma.f64 (pow.f64 x 4) -2/3 1) (*.f64 x x))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -17/45 (pow.f64 x 6)))))","(+.f64 (fma.f64 (pow.f64 x 4) -2/3 1) (fma.f64 -17/45 (pow.f64 x 6) (neg.f64 (*.f64 x x))))","(/.f64 (cos.f64 (*.f64 2 x)) (pow.f64 (cos.f64 x) 2))","(-.f64 1 (pow.f64 (tan.f64 x) 2))","(/.f64 (cos.f64 (*.f64 2 x)) (pow.f64 (cos.f64 x) 2))","(-.f64 1 (pow.f64 (tan.f64 x) 2))","(/.f64 (cos.f64 (*.f64 2 x)) (pow.f64 (cos.f64 x) 2))","(-.f64 1 (pow.f64 (tan.f64 x) 2))","(/.f64 (cos.f64 (*.f64 2 x)) (pow.f64 (cos.f64 x) 2))","(-.f64 1 (pow.f64 (tan.f64 x) 2))","(/.f64 (cos.f64 (neg.f64 (*.f64 -2 x))) (pow.f64 (cos.f64 x) 2))","(-.f64 1 (pow.f64 (tan.f64 x) 2))","(/.f64 (cos.f64 (neg.f64 (*.f64 -2 x))) (pow.f64 (cos.f64 x) 2))","(-.f64 1 (pow.f64 (tan.f64 x) 2))","(/.f64 (cos.f64 (neg.f64 (*.f64 -2 x))) (pow.f64 (cos.f64 x) 2))","(-.f64 1 (pow.f64 (tan.f64 x) 2))","(/.f64 (cos.f64 (neg.f64 (*.f64 -2 x))) (pow.f64 (cos.f64 x) 2))","(-.f64 1 (pow.f64 (tan.f64 x) 2))","1","(+.f64 (*.f64 -2 (pow.f64 x 2)) 1)","(fma.f64 -2 (*.f64 x x) 1)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) 1))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 -2 (*.f64 x x) 1))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 1 (*.f64 -4/45 (pow.f64 x 6)))))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 -2 (*.f64 x x) (fma.f64 -4/45 (pow.f64 x 6) 1)))","(/.f64 (cos.f64 (*.f64 2 x)) (*.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(cos.f64 (+.f64 x x))","(/.f64 (cos.f64 (*.f64 2 x)) (*.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(cos.f64 (+.f64 x x))","(/.f64 (cos.f64 (*.f64 2 x)) (*.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(cos.f64 (+.f64 x x))","(/.f64 (cos.f64 (*.f64 2 x)) (*.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(cos.f64 (+.f64 x x))","(/.f64 (cos.f64 (neg.f64 (*.f64 -2 x))) (*.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(cos.f64 (+.f64 x x))","(/.f64 (cos.f64 (neg.f64 (*.f64 -2 x))) (*.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(cos.f64 (+.f64 x x))","(/.f64 (cos.f64 (neg.f64 (*.f64 -2 x))) (*.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(cos.f64 (+.f64 x x))","(/.f64 (cos.f64 (neg.f64 (*.f64 -2 x))) (*.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(cos.f64 (+.f64 x x))"]],"time":116.485107421875,"type":"simplify"},{"compiler":[[9508,5507]],"time":100.029052734375,"type":"eval"},{"alts":[["(*.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (pow.f64 (cos.f64 x) -2))","next",0.06869125976844201],["(/.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (pow.f64 (cos.f64 x) 2))))","fresh",0.2940025879159782],["(/.f64 (*.f64 (/.f64 (cos.f64 (+.f64 x x)) (cos.f64 x)) (pow.f64 (pow.f64 (cos.f64 x) -2) -1)) (cos.f64 x))","fresh",0.2988663086106521],["(*.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)))","fresh",0.127285009768442]],"compiler":[[15,10],[29,21],[18,11],[14,8],[15,10],[29,21],[18,11],[14,8]],"count":[[413,4]],"kept":[{"done":[0,0],"fresh":[9,0],"new":[403,4],"picked":[1,0]}],"min-error":[0],"time":224.40185546875,"type":"prune"},{"compiler":[[39,16]],"locations":[["(cos.f64 (+.f64 x x))",0.01953125,true],["(/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2))",0.203125,true],["(*.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (pow.f64 (cos.f64 x) -2))",0.203125,true],["(pow.f64 (cos.f64 x) -2)",0.24056625976844204,true]],"time":10.041015625,"type":"localize"},{"count":[[4,48]],"series":[["(cos.f64 (+.f64 x x))","x","-inf",0.14111328125],["(cos.f64 (+.f64 x x))","x","inf",0.16015625],["(cos.f64 (+.f64 x x))","x","0",0.156005859375],["(/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2))","x","-inf",0.32421875],["(/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2))","x","inf",0.281982421875],["(/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2))","x","0",0.239013671875],["(*.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (pow.f64 (cos.f64 x) -2))","x","-inf",0.1669921875],["(*.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (pow.f64 (cos.f64 x) -2))","x","inf",0.177978515625],["(*.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (pow.f64 (cos.f64 x) -2))","x","0",0.174072265625],["(pow.f64 (cos.f64 x) -2)","x","-inf",0.528076171875],["(pow.f64 (cos.f64 x) -2)","x","inf",0.553955078125],["(pow.f64 (cos.f64 x) -2)","x","0",0.35205078125]],"time":3.4130859375,"type":"series"},{"count":[[4,258]],"inputs":[["(pow.f64 (cos.f64 x) -2)","(*.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (pow.f64 (cos.f64 x) -2))","(/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2))","(cos.f64 (+.f64 x x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) -2) (*.f64 (pow.f64 (cos.f64 x) -2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cos.f64 x) -2) 0) (pow.f64 (cos.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) -2) (*.f64 0 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (cos.f64 x) -2)) (pow.f64 (cos.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cos.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 x) -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (cos.f64 x) -2))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cos.f64 x) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cos.f64 x) -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (cos.f64 x) -2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (cos.f64 x) -2) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) 2) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (neg.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (-.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (cos.f64 x) 2) 1/2) (*.f64 1/2 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (cos.f64 x) 2) 1) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) 1/2) (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (*.f64 1/2 (cos.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (+.f64 x x)) (*.f64 (cos.f64 (+.f64 x x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (+.f64 x x)) 0) (cos.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2))) (*.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) 2) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (+.f64 x x)) (*.f64 0 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 (+.f64 x x))) (cos.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 1 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)) (cbrt.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))) (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 x) (sin.f64 x)) (-.f64 (cos.f64 x) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (-.f64 3 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)) (pow.f64 (cos.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) -2) (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)))) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))) (*.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4))) (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 (+.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cos.f64 x) (sin.f64 x)) (+.f64 (cos.f64 x) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))) (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (-.f64 3 2)) (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2) (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4))) (*.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4))) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 (+.f64 x x)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 x) -2) (neg.f64 (cos.f64 (+.f64 x x)))) (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (pow.f64 (cos.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cos.f64 x) -2) (neg.f64 (cos.f64 (+.f64 x x)))) (neg.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (+.f64 (cos.f64 (+.f64 x x)) 1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) -1) (neg.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)) (cbrt.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cos.f64 x) -2) (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 (cos.f64 x) -2) (neg.f64 (cos.f64 (+.f64 x x)))) 1) (neg.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) 1) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (-.f64 3 2))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (cos.f64 (+.f64 x x)))) (*.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4))) (pow.f64 (cos.f64 x) -2))) (cbrt.f64 (neg.f64 (pow.f64 (cos.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (*.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4))) (pow.f64 (cos.f64 x) -2))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) 1) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) -2))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) -1) (neg.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2)))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 (+.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 (cos.f64 x) -2) (neg.f64 (cos.f64 (+.f64 x x)))) (cbrt.f64 (pow.f64 (cos.f64 x) -2))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 (cos.f64 x) -2) (neg.f64 (cos.f64 (+.f64 x x)))) 1) (neg.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cos.f64 (+.f64 x x)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) (-.f64 1 (cos.f64 (+.f64 x x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) 2) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))) (-.f64 1 (cos.f64 (+.f64 x x))))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) 2) (*.f64 2 (-.f64 1 (cos.f64 (+.f64 x x))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -2 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) -2)) (-.f64 1 (cos.f64 (+.f64 x x))))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) -2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 2 (*.f64 (pow.f64 (cos.f64 x) -2) (-.f64 1 (cos.f64 (+.f64 x x))))) (*.f64 (pow.f64 (cos.f64 x) -2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (+.f64 x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (neg.f64 (pow.f64 (cos.f64 x) 2))) (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (cos.f64 x) -2) (*.f64 (cos.f64 (+.f64 x x)) (neg.f64 (pow.f64 (cos.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (neg.f64 (pow.f64 (cos.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (pow.f64 (cos.f64 x) 2)) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4)) (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cbrt.f64 (pow.f64 (cos.f64 x) 4)) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) (+.f64 2 3)) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (cos.f64 x) 2) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (pow.f64 (cos.f64 x) 2))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4))) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (+.f64 x x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (*.f64 (cos.f64 (+.f64 x x)) (*.f64 1/2 (cos.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) 4) (*.f64 (pow.f64 (cos.f64 x) 2) (neg.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)) (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)) 0) (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (*.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) 4) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)) (*.f64 0 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))) (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) 4) (neg.f64 (-.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (cos.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (cos.f64 x) 4) (-.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (cos.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (pow.f64 (cos.f64 x) -2))) (*.f64 (cos.f64 (+.f64 x x)) (neg.f64 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (cos.f64 (+.f64 x x)) (neg.f64 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4))) (cbrt.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 (+.f64 x x))) (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)) (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (cos.f64 (+.f64 x x)) (neg.f64 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)) (pow.f64 (cos.f64 x) 2)) (cbrt.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (+.f64 x x)) (neg.f64 (pow.f64 (cos.f64 x) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 4))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 x) 2)) (neg.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 (+.f64 x x))) (neg.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 (+.f64 x x)) (+.f64 (cos.f64 (+.f64 x x)) 1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4))) (cbrt.f64 (neg.f64 (cos.f64 (+.f64 x x))))) (cbrt.f64 (neg.f64 (pow.f64 (cos.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4))) (cbrt.f64 (cos.f64 (+.f64 x x)))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 (+.f64 x x))) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) (cos.f64 (+.f64 x x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (cos.f64 (+.f64 x x)))) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4)))) (cbrt.f64 (neg.f64 (pow.f64 (cos.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4)))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 4))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) 1) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) 1) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cos.f64 (+.f64 x x)) -1) (neg.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (cos.f64 (+.f64 x x))) (cbrt.f64 (pow.f64 (cos.f64 x) -2))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (*.f64 (pow.f64 (cos.f64 x) -2) (pow.f64 (sin.f64 x) 2))) (pow.f64 (cos.f64 x) (+.f64 -2 -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 3) (pow.f64 (cos.f64 x) 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cos.f64 (+.f64 x x)) (neg.f64 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (cos.f64 (+.f64 x x))) (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (neg.f64 (pow.f64 (cos.f64 x) 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (cos.f64 x) 2) (neg.f64 (cos.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (cos.f64 x) 4)) (pow.f64 (cos.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 3) (pow.f64 (cos.f64 x) 6)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) 2) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (neg.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (-.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (cos.f64 x) 2) 1/2) (*.f64 1/2 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (cos.f64 x) 2) 1) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) 1/2) (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (*.f64 1/2 (cos.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (+.f64 x x)) (*.f64 (cos.f64 (+.f64 x x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (+.f64 x x)) 0) (cos.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2))) (*.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) 2) (*.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (+.f64 x x)) (*.f64 0 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 (+.f64 x x))) (cos.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 1 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)) (cbrt.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))) (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 x) (sin.f64 x)) (-.f64 (cos.f64 x) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (-.f64 3 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)) (pow.f64 (cos.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) -2) (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)))) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))) (*.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4))) (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 (+.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cos.f64 x) (sin.f64 x)) (+.f64 (cos.f64 x) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))) (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (-.f64 3 2)) (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2) (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4))) (*.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4))) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 (+.f64 x x)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 x) -2) (neg.f64 (cos.f64 (+.f64 x x)))) (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (pow.f64 (cos.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cos.f64 x) -2) (neg.f64 (cos.f64 (+.f64 x x)))) (neg.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (+.f64 (cos.f64 (+.f64 x x)) 1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) -1) (neg.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)) (cbrt.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cos.f64 x) -2) (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 (cos.f64 x) -2) (neg.f64 (cos.f64 (+.f64 x x)))) 1) (neg.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) 1) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (-.f64 3 2))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (cos.f64 (+.f64 x x)))) (*.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4))) (pow.f64 (cos.f64 x) -2))) (cbrt.f64 (neg.f64 (pow.f64 (cos.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (*.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (pow.f64 (cos.f64 x) 4))) (pow.f64 (cos.f64 x) -2))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) 1) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (cbrt.f64 (pow.f64 (cos.f64 x) -2))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) -1) (neg.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2)))) (cbrt.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 (+.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 (cos.f64 x) -2) (neg.f64 (cos.f64 (+.f64 x x)))) (cbrt.f64 (pow.f64 (cos.f64 x) -2))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 (cos.f64 x) -2) (neg.f64 (cos.f64 (+.f64 x x)))) 1) (neg.f64 (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cos.f64 (+.f64 x x)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) (-.f64 1 (cos.f64 (+.f64 x x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) 2) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))) (-.f64 1 (cos.f64 (+.f64 x x))))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) 2) (*.f64 2 (-.f64 1 (cos.f64 (+.f64 x x))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -2 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) -2)) (-.f64 1 (cos.f64 (+.f64 x x))))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) -2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 2 (*.f64 (pow.f64 (cos.f64 x) -2) (-.f64 1 (cos.f64 (+.f64 x x))))) (*.f64 (pow.f64 (cos.f64 x) -2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 x) (+.f64 -2 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (+.f64 x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x x)) (neg.f64 (pow.f64 (cos.f64 x) 2))) (pow.f64 (cos.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (cos.f64 x) -2) (*.f64 (cos.f64 (+.f64 x x)) (neg.f64 (pow.f64 (cos.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (neg.f64 (pow.f64 (cos.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) (cos.f64 x) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (pow.f64 (cos.f64 x) 2)) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4)) (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cbrt.f64 (pow.f64 (cos.f64 x) 4)) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) (+.f64 2 3)) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (cos.f64 x) 2) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (pow.f64 (cos.f64 x) 2))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4))) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (+.f64 x x))))))"]],"rules":[["egg-rr",89],["egg-rr",58],["egg-rr",89],["egg-rr",22]],"time":43.452880859375,"type":"rewrite"},{"count":[[306,194]],"inputs":[["1","(+.f64 1 (pow.f64 x 2))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 1 (pow.f64 x 2)))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 17/45 (pow.f64 x 6)) (pow.f64 x 2))))","(/.f64 1 (pow.f64 (cos.f64 x) 2))","(/.f64 1 (pow.f64 (cos.f64 x) 2))","(/.f64 1 (pow.f64 (cos.f64 x) 2))","(/.f64 1 (pow.f64 (cos.f64 x) 2))","(/.f64 1 (pow.f64 (cos.f64 x) 2))","(/.f64 1 (pow.f64 (cos.f64 x) 2))","(/.f64 1 (pow.f64 (cos.f64 x) 2))","(/.f64 1 (pow.f64 (cos.f64 x) 2))","1","(+.f64 (*.f64 -2 (pow.f64 x 2)) 1)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) 1))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 1 (*.f64 -4/45 (pow.f64 x 6)))))","(cos.f64 (*.f64 2 x))","(cos.f64 (*.f64 2 x))","(cos.f64 (*.f64 2 x))","(cos.f64 (*.f64 2 x))","(cos.f64 (neg.f64 (*.f64 -2 x)))","(cos.f64 (neg.f64 (*.f64 -2 x)))","(cos.f64 (neg.f64 (*.f64 -2 x)))","(cos.f64 (neg.f64 (*.f64 -2 x)))","1","(+.f64 1 (*.f64 -3 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -3 (pow.f64 x 2)) (*.f64 3 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -3 (pow.f64 x 2)) (+.f64 (*.f64 -22/15 (pow.f64 x 6)) (*.f64 3 (pow.f64 x 4)))))","(*.f64 (cos.f64 (*.f64 2 x)) (pow.f64 (cos.f64 x) 2))","(*.f64 (cos.f64 (*.f64 2 x)) (pow.f64 (cos.f64 x) 2))","(*.f64 (cos.f64 (*.f64 2 x)) (pow.f64 (cos.f64 x) 2))","(*.f64 (cos.f64 (*.f64 2 x)) (pow.f64 (cos.f64 x) 2))","(*.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 (neg.f64 (*.f64 -2 x))))","(*.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 (neg.f64 (*.f64 -2 x))))","(*.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 (neg.f64 (*.f64 -2 x))))","(*.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 (neg.f64 (*.f64 -2 x))))","1","(+.f64 (*.f64 -2 (pow.f64 x 2)) 1)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) 1))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 1 (*.f64 -4/45 (pow.f64 x 6)))))","(cos.f64 (*.f64 2 x))","(cos.f64 (*.f64 2 x))","(cos.f64 (*.f64 2 x))","(cos.f64 (*.f64 2 x))","(cos.f64 (neg.f64 (*.f64 -2 x)))","(cos.f64 (neg.f64 (*.f64 -2 x)))","(cos.f64 (neg.f64 (*.f64 -2 x)))","(cos.f64 (neg.f64 (*.f64 -2 x)))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (pow.f64 x 2))","(fma.f64 x x 1)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 1 (pow.f64 x 2)))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 x x 1))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 17/45 (pow.f64 x 6)) (pow.f64 x 2))))","(+.f64 (fma.f64 (pow.f64 x 4) 2/3 1) (fma.f64 17/45 (pow.f64 x 6) (*.f64 x x)))","(/.f64 1 (pow.f64 (cos.f64 x) 2))","(pow.f64 (cos.f64 x) -2)","(/.f64 1 (pow.f64 (cos.f64 x) 2))","(pow.f64 (cos.f64 x) -2)","(/.f64 1 (pow.f64 (cos.f64 x) 2))","(pow.f64 (cos.f64 x) -2)","(/.f64 1 (pow.f64 (cos.f64 x) 2))","(pow.f64 (cos.f64 x) -2)","(/.f64 1 (pow.f64 (cos.f64 x) 2))","(pow.f64 (cos.f64 x) -2)","(/.f64 1 (pow.f64 (cos.f64 x) 2))","(pow.f64 (cos.f64 x) -2)","(/.f64 1 (pow.f64 (cos.f64 x) 2))","(pow.f64 (cos.f64 x) -2)","(/.f64 1 (pow.f64 (cos.f64 x) 2))","(pow.f64 (cos.f64 x) -2)","1","(+.f64 (*.f64 -2 (pow.f64 x 2)) 1)","(fma.f64 -2 (*.f64 x x) 1)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) 1))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 -2 (*.f64 x x) 1))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 1 (*.f64 -4/45 (pow.f64 x 6)))))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 -2 (*.f64 x x) (fma.f64 -4/45 (pow.f64 x 6) 1)))","(cos.f64 (*.f64 2 x))","(cos.f64 (*.f64 2 x))","(cos.f64 (*.f64 2 x))","(cos.f64 (*.f64 2 x))","(cos.f64 (neg.f64 (*.f64 -2 x)))","(cos.f64 (*.f64 2 x))","(cos.f64 (neg.f64 (*.f64 -2 x)))","(cos.f64 (*.f64 2 x))","(cos.f64 (neg.f64 (*.f64 -2 x)))","(cos.f64 (*.f64 2 x))","(cos.f64 (neg.f64 (*.f64 -2 x)))","(cos.f64 (*.f64 2 x))","1","(+.f64 1 (*.f64 -3 (pow.f64 x 2)))","(fma.f64 -3 (*.f64 x x) 1)","(+.f64 1 (+.f64 (*.f64 -3 (pow.f64 x 2)) (*.f64 3 (pow.f64 x 4))))","(+.f64 1 (fma.f64 (pow.f64 x 4) 3 (*.f64 -3 (*.f64 x x))))","(+.f64 1 (+.f64 (*.f64 -3 (pow.f64 x 2)) (+.f64 (*.f64 -22/15 (pow.f64 x 6)) (*.f64 3 (pow.f64 x 4)))))","(+.f64 (fma.f64 -3 (*.f64 x x) 1) (fma.f64 -22/15 (pow.f64 x 6) (*.f64 3 (pow.f64 x 4))))","(*.f64 (cos.f64 (*.f64 2 x)) (pow.f64 (cos.f64 x) 2))","(*.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 (*.f64 2 x)))","(*.f64 (cos.f64 (*.f64 2 x)) (pow.f64 (cos.f64 x) 2))","(*.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 (*.f64 2 x)))","(*.f64 (cos.f64 (*.f64 2 x)) (pow.f64 (cos.f64 x) 2))","(*.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 (*.f64 2 x)))","(*.f64 (cos.f64 (*.f64 2 x)) (pow.f64 (cos.f64 x) 2))","(*.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 (*.f64 2 x)))","(*.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 (neg.f64 (*.f64 -2 x))))","(*.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 (*.f64 2 x)))","(*.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 (neg.f64 (*.f64 -2 x))))","(*.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 (*.f64 2 x)))","(*.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 (neg.f64 (*.f64 -2 x))))","(*.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 (*.f64 2 x)))","(*.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 (neg.f64 (*.f64 -2 x))))","(*.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 (*.f64 2 x)))","1","(+.f64 (*.f64 -2 (pow.f64 x 2)) 1)","(fma.f64 -2 (*.f64 x x) 1)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) 1))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 -2 (*.f64 x x) 1))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 1 (*.f64 -4/45 (pow.f64 x 6)))))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 -2 (*.f64 x x) (fma.f64 -4/45 (pow.f64 x 6) 1)))","(cos.f64 (*.f64 2 x))","(cos.f64 (*.f64 2 x))","(cos.f64 (*.f64 2 x))","(cos.f64 (*.f64 2 x))","(cos.f64 (neg.f64 (*.f64 -2 x)))","(cos.f64 (*.f64 2 x))","(cos.f64 (neg.f64 (*.f64 -2 x)))","(cos.f64 (*.f64 2 x))","(cos.f64 (neg.f64 (*.f64 -2 x)))","(cos.f64 (*.f64 2 x))","(cos.f64 (neg.f64 (*.f64 -2 x)))","(cos.f64 (*.f64 2 x))"]],"time":140.06005859375,"type":"simplify"},{"compiler":[[4031,2147]],"time":45.097900390625,"type":"eval"},{"alts":[["(cos.f64 (*.f64 2 x))","fresh",0.01953125],["(*.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 3) (pow.f64 (cos.f64 x) 6))) (pow.f64 (cos.f64 x) -2))","fresh",0.170253759768442],["(*.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (/.f64 1 (pow.f64 (cos.f64 x) 2)))","fresh",0.17224506837909412],["(*.f64 (/.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 4))) (cbrt.f64 (pow.f64 (cos.f64 x) -2))) (pow.f64 (cos.f64 x) -2))","fresh",0.2754288086106521]],"compiler":[[5,4],[18,13],[17,12],[22,15]],"count":[[228,4]],"kept":[{"done":[0,0],"fresh":[3,0],"new":[224,4],"picked":[1,0]}],"min-error":[0],"time":78.26318359375,"type":"prune"},{"accuracy":[0.01953125],"baseline":[0.01953125],"branch":[["x",0.01953125,1],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))",0.01953125,1],["(*.f64 (tan.f64 x) (tan.f64 x))",0.01953125,1],["(tan.f64 x)",0.01953125,1],["(tan.f64 x)",0.01953125,1]],"compiler":[[2,1],[16,8],[6,3],[3,2],[3,2],[598,346]],"count":[[28,1]],"inputs":[["(cos.f64 (*.f64 2 x))","(*.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 x x)) 3) (pow.f64 (cos.f64 x) 6))) (pow.f64 (cos.f64 x) -2))","(*.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (/.f64 1 (pow.f64 (cos.f64 x) 2)))","(*.f64 (/.f64 (*.f64 (cos.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (cos.f64 x) 4))) (cbrt.f64 (pow.f64 (cos.f64 x) -2))) (pow.f64 (cos.f64 x) -2))","(*.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) -2)) (pow.f64 (cos.f64 x) -2))","(/.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (pow.f64 (cos.f64 x) 2))))","(/.f64 (*.f64 (/.f64 (cos.f64 (+.f64 x x)) (cos.f64 x)) (pow.f64 (pow.f64 (cos.f64 x) -2) -1)) (cos.f64 x))","(*.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)))","(/.f64 (-.f64 1 (/.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 x x)))) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (fma.f64 (pow.f64 (sin.f64 x) 2) (neg.f64 (pow.f64 (cos.f64 x) -2)) 1) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (/.f64 (cos.f64 (+.f64 x x)) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (+.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4)) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))) (-.f64 1 (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))))","(/.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (/.f64 1 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) -1) 1)))","(/.f64 (/.f64 (+.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))","(/.f64 (-.f64 1 (*.f64 (/.f64 (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(/.f64 (*.f64 (+.f64 1 (+.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 4)) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))) (-.f64 1 (cbrt.f64 (pow.f64 (tan.f64 x) 2)))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))","(fma.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) -2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))))","(-.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 -1 (pow.f64 (tan.f64 x) 2))) (/.f64 1 (-.f64 -1 (pow.f64 (tan.f64 x) 2))))","(/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 3) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(pow.f64 (cbrt.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))) 3)","(/.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (/.f64 1 (+.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 x) 4))))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(/.f64 (-.f64 1 (*.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (cos.f64 x))) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) -1) (-.f64 -1 (pow.f64 (tan.f64 x) 2)))","(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))"]],"link":["."],"name":["Trigonometry B"],"oracle":[1.5802241750180415],"outputs":[["(cos.f64 (*.f64 2 x))"]],"time":47.06591796875,"times":[["x",8.674072265625],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))",6.934814453125],["(*.f64 (tan.f64 x) (tan.f64 x))",5.625],["(tan.f64 x)",8.007080078125],["(tan.f64 x)",8.109130859375]],"type":"regimes"},{"compiler":[[5,4]],"inputs":[["(cos.f64 (*.f64 2 x))"]],"method":["egg-herbie"],"outputs":[["(cos.f64 (*.f64 2 x))","(cos.f64 (+.f64 x x))"]],"stop":[["fuel",1]],"time":37.554931640625,"type":"simplify"},{"time":0.006103515625,"type":"soundness"},{"compiler":[[5,4]],"remove-preprocessing":[[]],"time":7.4619140625,"type":"end"}]
[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.7496337890625,0.0009760856628417969,0.2493901252746582],[11,0.7496337890625,0.0019521713256835938,0.2484140396118164],[10,0.7496337890625,0.0039043426513671875,0.2464618682861328],[9,0.7496337890625,0.007808685302734375,0.24255752563476563],[8,0.7496337890625,0.01561737060546875,0.23474884033203125],[7,0.7496337890625,0.0312347412109375,0.2191314697265625],[6,0.7496337890625,0.062469482421875,0.187896728515625],[5,0.7496337890625,0.12493896484375,0.12542724609375],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.37890625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.23291015625,8],["body",256,"valid",240.09521484375,8256]],"time":247.66015625,"type":"sample"},{"compiler":[[8,6]],"inputs":[["0"],["(*.f64 x (-.f64 1 (*.f64 x 1/2)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 x (-.f64 1 (*.f64 x 1/2)))","(*.f64 x (fma.f64 x -1/2 1))"]],"symmetry":[[]],"time":52.708984375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 x (-.f64 1 (*.f64 x 1/2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (-.f64 1 (*.f64 x 1/2)))","(*.f64 x (fma.f64 x -1/2 1))"]],"time":19.0869140625,"type":"simplify"},{"compiler":[[14,10]],"time":0.376953125,"type":"eval"},{"alts":[["(*.f64 x (fma.f64 x -1/2 1))","next",0.0078125]],"compiler":[[7,5],[7,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.815185546875,"type":"prune"},{"compiler":[[14,10]],"locations":[["(*.f64 x (fma.f64 x -1/2 1))",0.0078125,true]],"time":3.664794921875,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 x (fma.f64 x -1/2 1))","x","-inf",0.600830078125],["(*.f64 x (fma.f64 x -1/2 1))","x","inf",0.458984375],["(*.f64 x (fma.f64 x -1/2 1))","x","0",0.525146484375]],"time":1.631103515625,"type":"series"},{"count":[[1,36]],"inputs":[["(*.f64 x (fma.f64 x -1/2 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 x -1/2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 x (*.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (*.f64 x -1/2) x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x -1/2) x x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (*.f64 x -1/2)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (fma.f64 x -1/2 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (fma.f64 x -1/2 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x -1/2 1) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x -1/2 1)) (*.f64 (pow.f64 (fma.f64 x -1/2 1) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 x -1/2 1) 2/3) x) (cbrt.f64 (fma.f64 x -1/2 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (fma.f64 x -1/2 1) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (fma.f64 x -1/2 1)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 x -1/2) x x)) (pow.f64 (fma.f64 (*.f64 x -1/2) x x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 x -1/2) x x) 2/3) (cbrt.f64 (fma.f64 (*.f64 x -1/2) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (fma.f64 x -1/2 1))) (pow.f64 (fma.f64 x -1/2 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x -1/2 1) 2/3) (*.f64 x (cbrt.f64 (fma.f64 x -1/2 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (fma.f64 x -1/2 1))) (neg.f64 (pow.f64 (fma.f64 (*.f64 x -1/2) x x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 x -1/2 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x -1/2 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (fma.f64 x -1/2 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (fma.f64 x -1/2 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (*.f64 x -1/2) x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 x -1/2) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 x -1/2) x x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 x -1/2) 3) 1)) (/.f64 1 (-.f64 (*.f64 (*.f64 x x) 1/4) (fma.f64 -1/2 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 x -1/2) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (fma.f64 x -1/2 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 x -1/2) 3) 1))) (+.f64 (neg.f64 (*.f64 (*.f64 x x) 1/4)) (fma.f64 -1/2 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 x -1/2) 3) 1)) (-.f64 (*.f64 (*.f64 x x) 1/4) (fma.f64 -1/2 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 x -1/2) x x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 x -1/2) x x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 x -1/2) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (fma.f64 x -1/2 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 x -1/2) x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x -1/2) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 x -1/2) x)))))"]],"rules":[["egg-rr",36]],"time":34.39111328125,"type":"rewrite"},{"count":[[48,41]],"inputs":[["x","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(*.f64 -1/2 (pow.f64 x 2))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(*.f64 -1/2 (pow.f64 x 2))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 x (*.f64 -1/2 x) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 x (*.f64 -1/2 x) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 x (*.f64 -1/2 x) x)","(*.f64 -1/2 (pow.f64 x 2))","(*.f64 -1/2 (*.f64 x x))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 x (*.f64 -1/2 x) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 x (*.f64 -1/2 x) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 x (*.f64 -1/2 x) x)","(*.f64 -1/2 (pow.f64 x 2))","(*.f64 -1/2 (*.f64 x x))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 x (*.f64 -1/2 x) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 x (*.f64 -1/2 x) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 x (*.f64 -1/2 x) x)"]],"time":71.369873046875,"type":"simplify"},{"compiler":[[415,279]],"time":7.260986328125,"type":"eval"},{"alts":[["(fma.f64 x (*.f64 -1/2 x) x)","next",0]],"compiler":[[7,4],[7,4]],"count":[[42,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[41,1],"picked":[1,0]}],"min-error":[0],"time":5.533935546875,"type":"prune"},{"compiler":[[12,7]],"time":3.127197265625,"type":"localize"},{"compiler":[[1,1]],"time":0.0830078125,"type":"eval"},{"alts":[["(fma.f64 x (*.f64 -1/2 x) x)","done",0]],"compiler":[[7,4]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.455810546875,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["(*.f64 x (-.f64 1 (*.f64 x 1/2)))",0,1]],"compiler":[[2,1],[8,6],[20,13]],"count":[[3,1]],"inputs":[["(fma.f64 x (*.f64 -1/2 x) x)","(*.f64 x (fma.f64 x -1/2 1))","(*.f64 x (-.f64 1 (*.f64 x 1/2)))"]],"link":["."],"name":["Numeric.SpecFunctions:log1p from math-functions-0.1.5.2, B"],"oracle":[0.0078125],"outputs":[["(fma.f64 x (*.f64 -1/2 x) x)"]],"time":6.298095703125,"times":[["x",2.52392578125],["(*.f64 x (-.f64 1 (*.f64 x 1/2)))",3.130859375]],"type":"regimes"},{"compiler":[[7,4]],"inputs":[["(fma.f64 x (*.f64 -1/2 x) x)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x (*.f64 -1/2 x) x)"]],"stop":[["done",1]],"time":32.320068359375,"type":"simplify"},{"time":0.016845703125,"type":"soundness"},{"compiler":[[7,4]],"remove-preprocessing":[[]],"time":7.761962890625,"type":"end"}]
[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.4951171875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.091064453125,3],["body",256,"valid",256.596923828125,8256]],"time":264.531982421875,"type":"sample"},{"compiler":[[7,5]],"inputs":[["0"],["(sqrt.f64 (*.f64 (*.f64 2 x) x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(sqrt.f64 (*.f64 (*.f64 2 x) x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))"]],"symmetry":[[]],"time":76.696044921875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(sqrt.f64 (*.f64 (*.f64 2 x) x))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (*.f64 (*.f64 2 x) x))","(*.f64 (sqrt.f64 2) (fabs.f64 x))"]],"time":41.515869140625,"type":"simplify"},{"compiler":[[12,9]],"time":0.341064453125,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 2) (fabs.f64 x))","next",0.42578125],["(sqrt.f64 (*.f64 (*.f64 2 x) x))","fresh",29.699794254532684]],"compiler":[[6,5],[7,5],[6,5],[7,5]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.203125],"time":1.157958984375,"type":"prune"},{"compiler":[[12,8]],"locations":[["(*.f64 (sqrt.f64 2) (fabs.f64 x))",0.42578125,true]],"time":3.175048828125,"type":"localize"},{"count":[[1,0]],"series":[["(*.f64 (sqrt.f64 2) (fabs.f64 x))","x","-inf",0.323974609375],["(*.f64 (sqrt.f64 2) (fabs.f64 x))","x","inf",0.375],["(*.f64 (sqrt.f64 2) (fabs.f64 x))","x","0",0.613037109375]],"time":1.35205078125,"type":"series"},{"count":[[1,32]],"inputs":[["(*.f64 (sqrt.f64 2) (fabs.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 2) (/.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 2) (fabs.f64 x))) (*.f64 1/2 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) (cbrt.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 x)) (*.f64 (pow.f64 x 2/3) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (sqrt.f64 2)) (fabs.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (fabs.f64 (cbrt.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (sqrt.f64 2) (fabs.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (fabs.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 x) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (sqrt.f64 (sqrt.f64 2))) (sqrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (fabs.f64 x) (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 1/2 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (/.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 3))))))"]],"rules":[["egg-rr",32]],"time":43.79296875,"type":"rewrite"},{"count":[[32,32]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"time":27.114990234375,"type":"simplify"},{"compiler":[[287,209]],"time":4.576904296875,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 2) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))","fresh",0.359375],["(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (fabs.f64 x) (sqrt.f64 (sqrt.f64 2))))","fresh",0.4811325195368841],["(sqrt.f64 (*.f64 (*.f64 2 x) x))","fresh",29.699794254532684],["(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 2)))","next",0.3515625],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) 3)","fresh",0.8263755125896408]],"compiler":[[10,9],[11,10],[7,5],[10,9],[9,8],[10,9],[11,10],[7,5],[10,9],[9,8]],"count":[[34,5]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[32,4],"picked":[1,0]}],"min-error":[0.03125],"time":6.037109375,"type":"prune"},{"compiler":[[26,20]],"locations":[["(*.f64 (cbrt.f64 2) (fabs.f64 x))",0.1328125,true],["(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 2)))",0.25,true]],"time":7.431884765625,"type":"localize"},{"count":[[2,12]],"series":[["(*.f64 (cbrt.f64 2) (fabs.f64 x))","x","-inf",0.14697265625],["(*.f64 (cbrt.f64 2) (fabs.f64 x))","x","inf",0.27880859375],["(*.f64 (cbrt.f64 2) (fabs.f64 x))","x","0",0.153076171875],["(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 2)))","x","-inf",0.967041015625],["(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 2)))","x","inf",0.451904296875],["(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 2)))","x","0",2.545166015625]],"time":4.625,"type":"series"},{"count":[[2,62]],"inputs":[["(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 2)))","(*.f64 (cbrt.f64 2) (fabs.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1/2) (*.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 0) (*.f64 (sqrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) (*.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 2) (fabs.f64 x))) (*.f64 1/2 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 2) (fabs.f64 x))) (*.f64 (sqrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) (*.f64 0 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))) (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 4)) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)) (cbrt.f64 (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (cbrt.f64 (cbrt.f64 4)) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x))) (pow.f64 2 1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 4)) (sqrt.f64 2))) (cbrt.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 4)) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))) (cbrt.f64 (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) (cbrt.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (fabs.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 x) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (*.f64 (cbrt.f64 2) (fabs.f64 x)))) (pow.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 2/3) (cbrt.f64 (*.f64 (sqrt.f64 2) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 1/2) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 0) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cbrt.f64 2) (fabs.f64 x))) (*.f64 1/2 (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 2) (fabs.f64 x))) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (*.f64 0 (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fabs.f64 x)) (cbrt.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (cbrt.f64 (cbrt.f64 4)) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 4)) (fabs.f64 x)) (cbrt.f64 (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))) (pow.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (fabs.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (cbrt.f64 2))) (cbrt.f64 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 2 (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 4)) (*.f64 (fabs.f64 x) (cbrt.f64 (cbrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (fabs.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 x) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (fabs.f64 x) 3) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fabs.f64 x) 3) 2))))))"]],"rules":[["egg-rr",28],["egg-rr",34]],"time":27.360107421875,"type":"rewrite"},{"count":[[74,63]],"inputs":[["(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))"]],"time":48.10498046875,"type":"simplify"},{"compiler":[[775,598]],"time":11.825927734375,"type":"eval"},{"alts":[["(*.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)) (cbrt.f64 (cbrt.f64 2)))","fresh",0.3828125],["(*.f64 (cbrt.f64 2) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))","next",0.359375],["(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 2)))","done",0.3515625],["(*.f64 (*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (cbrt.f64 (cbrt.f64 4)) (fabs.f64 x))) (cbrt.f64 (sqrt.f64 2)))","fresh",0.4746475586106521]],"compiler":[[14,13],[10,9],[10,9],[15,14],[14,13],[10,9],[15,14]],"count":[[68,4]],"kept":[{"done":[0,0],"fresh":[4,0],"new":[63,3],"picked":[1,1]}],"min-error":[0],"time":11.09814453125,"type":"prune"},{"compiler":[[27,21]],"locations":[["(*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))",0.19921875,true],["(*.f64 (cbrt.f64 2) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))",0.26953125,true]],"time":7.77099609375,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))","x","-inf",0.283935546875],["(*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))","x","inf",0.27197265625],["(*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))","x","0",0.287841796875],["(*.f64 (cbrt.f64 2) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))","x","-inf",0.179931640625],["(*.f64 (cbrt.f64 2) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))","x","inf",0.34619140625],["(*.f64 (cbrt.f64 2) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))","x","0",0.239990234375]],"time":1.71484375,"type":"series"},{"count":[[2,62]],"inputs":[["(*.f64 (cbrt.f64 2) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))","(*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1/2) (*.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) (*.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 0) (*.f64 (sqrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 2) (fabs.f64 x))) (*.f64 1/2 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) (*.f64 0 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 2) (fabs.f64 x))) (*.f64 (sqrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))) (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)) (cbrt.f64 (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))) (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (cbrt.f64 (cbrt.f64 4)) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 2))) (cbrt.f64 (*.f64 2 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 2)) 2)) (cbrt.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 4)) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))) (cbrt.f64 (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) (cbrt.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (fabs.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 x) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 (cbrt.f64 2))) (cbrt.f64 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 4)) (*.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 (cbrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) 1/2) (*.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) (*.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) 0) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))) (*.f64 1/2 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) (*.f64 0 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))) (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 2))) (cbrt.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (pow.f64 2 1/18)) (cbrt.f64 (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fabs.f64 x)) (*.f64 (pow.f64 x 2/3) (cbrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 (cbrt.f64 2)) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 2)) (fabs.f64 x)) (pow.f64 2 1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (fabs.f64 x) (pow.f64 2 1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (fabs.f64 x) 3) (sqrt.f64 2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fabs.f64 x) 3) (sqrt.f64 2)))))))"]],"rules":[["egg-rr",28],["egg-rr",34]],"time":27.619140625,"type":"rewrite"},{"count":[[86,64]],"inputs":[["(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (fabs.f64 x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (fabs.f64 x))"]],"time":78.06884765625,"type":"simplify"},{"compiler":[[791,612]],"time":11.760009765625,"type":"eval"},{"alts":[["(*.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)) (cbrt.f64 (cbrt.f64 2)))","next",0.3828125],["(*.f64 (cbrt.f64 2) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))","done",0.359375],["(*.f64 (cbrt.f64 (cbrt.f64 4)) (*.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 (cbrt.f64 2))))","fresh",0.46749882814753624],["(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 2)))","done",0.3515625],["(*.f64 (cbrt.f64 2) (*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 (cbrt.f64 2)) (fabs.f64 x))))","fresh",0.39681625976844204]],"compiler":[[14,13],[10,9],[15,14],[10,9],[14,13],[14,13],[15,14],[14,13]],"count":[[68,5]],"kept":[{"done":[1,1],"fresh":[2,0],"new":[64,3],"picked":[1,1]}],"min-error":[0],"time":11.43505859375,"type":"prune"},{"compiler":[[41,33]],"locations":[["(*.f64 (cbrt.f64 2) (fabs.f64 x))",0.1328125,false],["(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18))",0.26953125,true],["(*.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)) (cbrt.f64 (cbrt.f64 2)))",0.37109375,true]],"time":12.613037109375,"type":"localize"},{"count":[[2,16]],"series":[["(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18))","x","-inf",0.31494140625],["(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18))","x","inf",0.2900390625],["(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18))","x","0",0.26904296875],["(*.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)) (cbrt.f64 (cbrt.f64 2)))","x","-inf",0.466064453125],["(*.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)) (cbrt.f64 (cbrt.f64 2)))","x","inf",0.4970703125],["(*.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)) (cbrt.f64 (cbrt.f64 2)))","x","0",16.43603515625]],"time":18.369873046875,"type":"series"},{"count":[[2,78]],"inputs":[["(*.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)) (cbrt.f64 (cbrt.f64 2)))","(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2)) 0) (*.f64 (fabs.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2)) (*.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (fabs.f64 x) (sqrt.f64 2))) (*.f64 (fabs.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2)) (*.f64 0 (*.f64 (fabs.f64 x) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (cbrt.f64 (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (pow.f64 2 1/27)) (cbrt.f64 (cbrt.f64 (cbrt.f64 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 2) (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)))) (pow.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 x) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))) (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 4)) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))) (cbrt.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 4)) (cbrt.f64 (cbrt.f64 2))) (cbrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 4)) (sqrt.f64 2))) (cbrt.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 4)) (cbrt.f64 (cbrt.f64 2))) (cbrt.f64 2))) (cbrt.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 4))) (*.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (pow.f64 2 1/27)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 2) (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (fabs.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x))) (pow.f64 4 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 16)) (*.f64 (fabs.f64 x) (pow.f64 4 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/27) (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 4))) (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 4 1/36) (*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fabs.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 (*.f64 (fabs.f64 x) (pow.f64 4 1/36)) (cbrt.f64 (cbrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 4))) (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))) (pow.f64 2 1/27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (pow.f64 4 1/36)) (cbrt.f64 (cbrt.f64 16)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 4 1/36)) (cbrt.f64 (cbrt.f64 2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))) (cbrt.f64 (*.f64 (*.f64 x x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) 2)) (cbrt.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) 0) (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (*.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))) (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (*.f64 0 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))) (pow.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) 2/3) (cbrt.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 x) (pow.f64 2 (+.f64 1/3 1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))) (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 4)) (cbrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 4)) (cbrt.f64 (sqrt.f64 2)))) (cbrt.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 4 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 4 1/36) (*.f64 (cbrt.f64 2) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 4 1/72)) (pow.f64 4 1/72))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (pow.f64 4 1/36))) (pow.f64 2 1/27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 4 1/72) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 4 1/72)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 4 1/36)) (*.f64 (pow.f64 2 1/27) (*.f64 (cbrt.f64 2) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/27) (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (pow.f64 4 1/36))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 2 1/27) (*.f64 (cbrt.f64 2) (fabs.f64 x))) (cbrt.f64 (pow.f64 4 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (cbrt.f64 (cbrt.f64 4)) (*.f64 (fabs.f64 x) (pow.f64 4 1/36))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 4)) (*.f64 (fabs.f64 x) (pow.f64 4 1/36))) (cbrt.f64 (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 (fabs.f64 x) (pow.f64 4 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (pow.f64 4 1/36)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))) (pow.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) 2/3) (cbrt.f64 (*.f64 (fabs.f64 x) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (*.f64 (pow.f64 (fabs.f64 x) 3) (cbrt.f64 (sqrt.f64 2)))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 2 (*.f64 (pow.f64 (fabs.f64 x) 3) (cbrt.f64 (sqrt.f64 2)))))))))"]],"rules":[["egg-rr",36],["egg-rr",42]],"time":27.655029296875,"type":"rewrite"},{"count":[[94,82]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 2) (fabs.f64 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (*.f64 (pow.f64 2 1/18) (fabs.f64 x)))","(*.f64 (cbrt.f64 (cbrt.f64 (*.f64 16 (sqrt.f64 2)))) (fabs.f64 x))","(*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 2 7/18) (fabs.f64 x))","(*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 2 7/18) (fabs.f64 x))","(*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 2 7/18) (fabs.f64 x))","(*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 2) (fabs.f64 x)))","(*.f64 (pow.f64 2 7/18) (fabs.f64 x))"]],"time":61.197021484375,"type":"simplify"},{"compiler":[[1674,1379]],"time":25.083984375,"type":"eval"},{"alts":[["(*.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)) (cbrt.f64 (cbrt.f64 2)))","done",0.3828125],["(*.f64 (*.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (pow.f64 2 1/27)) (cbrt.f64 (cbrt.f64 (cbrt.f64 4))))","fresh",0.33203125],["(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 2)))","done",0.3515625],["(*.f64 (*.f64 (fabs.f64 x) (pow.f64 4 1/36)) (cbrt.f64 (cbrt.f64 16)))","fresh",0.3515625]],"compiler":[[14,13],[18,17],[10,9],[11,10]],"count":[[115,4]],"kept":[{"done":[2,1],"fresh":[2,0],"new":[110,2],"picked":[1,1]}],"min-error":[0],"time":18.322021484375,"type":"prune"},{"accuracy":[0.33203125],"baseline":[0.33203125],"branch":[["x",0.33203125,1],["(sqrt.f64 (*.f64 (*.f64 2 x) x))",0.33203125,1],["(*.f64 (*.f64 2 x) x)",0.33203125,1]],"compiler":[[2,1],[7,5],[6,4],[151,124]],"count":[[14,1]],"inputs":[["(*.f64 (*.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (pow.f64 2 1/27)) (cbrt.f64 (cbrt.f64 (cbrt.f64 4))))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 4 1/36)) (cbrt.f64 (cbrt.f64 16)))","(*.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)) (cbrt.f64 (cbrt.f64 2)))","(*.f64 (cbrt.f64 (cbrt.f64 4)) (*.f64 (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 (cbrt.f64 2))))","(*.f64 (cbrt.f64 2) (*.f64 (pow.f64 2 1/18) (*.f64 (cbrt.f64 (cbrt.f64 2)) (fabs.f64 x))))","(*.f64 (*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (pow.f64 2 1/18)) (cbrt.f64 (cbrt.f64 2)))","(*.f64 (cbrt.f64 2) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))","(*.f64 (*.f64 (cbrt.f64 (cbrt.f64 2)) (*.f64 (cbrt.f64 (cbrt.f64 4)) (fabs.f64 x))) (cbrt.f64 (sqrt.f64 2)))","(*.f64 (cbrt.f64 2) (*.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 2))))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (fabs.f64 x) (sqrt.f64 (sqrt.f64 2))))","(*.f64 (*.f64 (cbrt.f64 2) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 2)))","(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (fabs.f64 x))) 3)","(*.f64 (sqrt.f64 2) (fabs.f64 x))","(sqrt.f64 (*.f64 (*.f64 2 x) x))"]],"link":["."],"name":["sqrt B"],"oracle":[30.247192057354397],"outputs":[["(*.f64 (*.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (pow.f64 2 1/27)) (cbrt.f64 (cbrt.f64 (cbrt.f64 4))))"]],"time":18.4150390625,"times":[["x",5.431884765625],["(sqrt.f64 (*.f64 (*.f64 2 x) x))",6.0380859375],["(*.f64 (*.f64 2 x) x)",3.7509765625]],"type":"regimes"},{"compiler":[[18,17]],"inputs":[["(*.f64 (*.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (pow.f64 2 1/27)) (cbrt.f64 (cbrt.f64 (cbrt.f64 4))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 (*.f64 (pow.f64 2 (+.f64 1/3 1/18)) (fabs.f64 x)) (pow.f64 2 1/27)) (cbrt.f64 (cbrt.f64 (cbrt.f64 4))))","(*.f64 (*.f64 (pow.f64 2 7/18) (fabs.f64 x)) (pow.f64 2 1/9))"]],"stop":[["fuel",1]],"time":25.384033203125,"type":"simplify"},{"time":0.02392578125,"type":"soundness"},{"compiler":[[18,17]],"remove-preprocessing":[[]],"time":14.484130859375,"type":"end"}]
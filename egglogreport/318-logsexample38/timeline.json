[{"compiler":[[19,14]],"method":["search"],"sampling":[[12,0.23521141843441742,0.0019687809519375165,0.7628198006136451],[11,0.2350956077901858,0.002084591596169135,0.7628198006136451],[10,0.23486398650172255,0.0023162128846323723,0.7628198006136451],[9,0.2344007439247961,0.002779455461558847,0.762819800613645],[8,0.23347425877094313,0.0037059406154117958,0.7628198006136451],[7,0.23347425877094313,0.0037059406154117958,0.7628198006136451],[6,0.22976831815553134,0.0074118812308235915,0.7628198006136451],[5,0.22235643692470775,0.014823762461647183,0.7628198006136451],[4,0.20753267446306056,0.029647524923294366,0.7628198006136451],[3,0.1778851495397662,0.05929504984658873,0.7628198006136451],[2,0.11859009969317746,0.11859009969317746,0.7628198006136451],[1,0.0,0.23718019938635493,0.7628198006136451],[0,0.0,0.23718019938635493,0.7628198006136451]],"time":3.1650390625,"type":"analyze"},{"outcomes":[["body",1024,"valid",872.1015625,4313],["body",512,"valid",269.384521484375,2218],["body",2048,"valid",142.476806640625,441],["body",256,"valid",77.70703125,1284]],"time":1370.1689453125,"type":"sample"},{"compiler":[[16,12]],"inputs":[["0"],["(-.f64 (-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n))) 1)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n))) 1)","(fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1))"]],"symmetry":[[]],"time":53.31591796875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n))) 1)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n))) 1)","(fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1))"]],"time":19.93115234375,"type":"simplify"},{"compiler":[[28,19]],"time":0.48779296875,"type":"eval"},{"alts":[["(fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1))","next",61.94670983746964],["(-.f64 (-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n))) 1)","fresh",62.98030791109286]],"compiler":[[13,9],[16,12],[13,9],[16,12]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[61.798272518526126],"time":1.5380859375,"type":"prune"},{"compiler":[[31,15]],"locations":[["(fma.f64 (neg.f64 n) (log.f64 n) -1)",0.265625,true],["(fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1))",62.431906812705556,true]],"time":9.4560546875,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 (neg.f64 n) (log.f64 n) -1)","n","-inf",2.2919921875],["(fma.f64 (neg.f64 n) (log.f64 n) -1)","n","inf",1.075927734375],["(fma.f64 (neg.f64 n) (log.f64 n) -1)","n","0",2.85302734375],["(fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1))","n","-inf",0.583984375],["(fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1))","n","inf",0.431884765625],["(fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1))","n","0",0.467041015625]],"time":7.8310546875,"type":"series"},{"count":[[2,89]],"inputs":[["(fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1))","(fma.f64 (neg.f64 n) (log.f64 n) -1)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1)) (*.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1)) 0) (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 n 1) (log1p.f64 n)) (fma.f64 (neg.f64 n) (log.f64 n) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1)) (*.f64 0 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1))) (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1) (*.f64 (+.f64 n 1) (log1p.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (+.f64 n 1) (log1p.f64 n)) -1) (*.f64 (neg.f64 n) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 n) (log.f64 n)) (+.f64 -1 (*.f64 (+.f64 n 1) (log1p.f64 n))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (fma.f64 (+.f64 n 1) (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (neg.f64 n) (log.f64 n)) (-.f64 1 (*.f64 (+.f64 n 1) (log1p.f64 n))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1))) (pow.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1)) 2/3) (cbrt.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))) 3) -1) (+.f64 (*.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))) (fma.f64 (+.f64 n 1) (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n)))) (-.f64 1 (*.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (+.f64 (pow.f64 n 3) 1) (log1p.f64 n)) (+.f64 (pow.f64 (*.f64 (neg.f64 n) (log.f64 n)) 2) (+.f64 1 (*.f64 (neg.f64 n) (log.f64 n))))) (*.f64 (fma.f64 n n (-.f64 1 n)) (+.f64 (pow.f64 (*.f64 (neg.f64 n) (log.f64 n)) 3) -1))) (*.f64 (fma.f64 n n (-.f64 1 n)) (+.f64 (pow.f64 (*.f64 (neg.f64 n) (log.f64 n)) 2) (+.f64 1 (*.f64 (neg.f64 n) (log.f64 n))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (neg.f64 n) (log.f64 n)) 3) -1) (fma.f64 n n (-.f64 1 n))) (*.f64 (+.f64 (pow.f64 (*.f64 (neg.f64 n) (log.f64 n)) 2) (+.f64 1 (*.f64 (neg.f64 n) (log.f64 n)))) (*.f64 (+.f64 (pow.f64 n 3) 1) (log1p.f64 n)))) (*.f64 (+.f64 (pow.f64 (*.f64 (neg.f64 n) (log.f64 n)) 2) (+.f64 1 (*.f64 (neg.f64 n) (log.f64 n)))) (fma.f64 n n (-.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1) 2/3) (*.f64 (+.f64 n 1) (log1p.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1) 2/3) (cbrt.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1)) (*.f64 (+.f64 n 1) (log1p.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 n 1)) (*.f64 (pow.f64 (+.f64 n 1) 2/3) (log1p.f64 n)) (fma.f64 (neg.f64 n) (log.f64 n) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 n 1) (log1p.f64 n))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 n 1) (log1p.f64 n)) 2)) (fma.f64 (neg.f64 n) (log.f64 n) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 n 1) (cbrt.f64 (log1p.f64 n))) (pow.f64 (log1p.f64 n) 2/3) (fma.f64 (neg.f64 n) (log.f64 n) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log1p.f64 n) (+.f64 n 1) (fma.f64 (neg.f64 n) (log.f64 n) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1)) (*.f64 (+.f64 n 1) (log1p.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1) 1 (*.f64 (+.f64 n 1) (log1p.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (neg.f64 n) (log.f64 n) -1) (*.f64 (+.f64 n 1) (log1p.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 n 1) (log1p.f64 n)) 1 (fma.f64 (neg.f64 n) (log.f64 n) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 n 1) (log1p.f64 n)) (fma.f64 (neg.f64 n) (log.f64 n) -1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1) 0) (fma.f64 (neg.f64 n) (log.f64 n) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1) (*.f64 0 (fma.f64 (neg.f64 n) (log.f64 n) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (neg.f64 n) (log.f64 n) -1)) (fma.f64 (neg.f64 n) (log.f64 n) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 (neg.f64 n) (log.f64 n)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 n) (log.f64 n)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (*.f64 (neg.f64 n) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (neg.f64 n) (log.f64 n) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (neg.f64 n) (log.f64 n)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 1 (*.f64 (neg.f64 n) (log.f64 n))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (*.f64 (neg.f64 n) (log.f64 n)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1 (*.f64 n (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1) 2/3) (cbrt.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (neg.f64 n) (log.f64 n)) 3) -1) (/.f64 1 (+.f64 (pow.f64 (*.f64 (neg.f64 n) (log.f64 n)) 2) (+.f64 1 (*.f64 (neg.f64 n) (log.f64 n))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 1 (*.f64 n (log.f64 n))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 n (log.f64 n)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 n (log.f64 n)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (neg.f64 n) (log.f64 n) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (neg.f64 n) (log.f64 n)) 3) -1)) (neg.f64 (+.f64 (pow.f64 (*.f64 (neg.f64 n) (log.f64 n)) 2) (+.f64 1 (*.f64 (neg.f64 n) (log.f64 n))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (neg.f64 n) (log.f64 n)) 3) -1) (+.f64 (pow.f64 (*.f64 (neg.f64 n) (log.f64 n)) 2) (+.f64 1 (*.f64 (neg.f64 n) (log.f64 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (neg.f64 n) (log.f64 n)) 3) -1) 1) (+.f64 (pow.f64 (*.f64 (neg.f64 n) (log.f64 n)) 2) (+.f64 1 (*.f64 (neg.f64 n) (log.f64 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (neg.f64 n) (log.f64 n)) 3) -1) (+.f64 1 (-.f64 (pow.f64 (*.f64 (neg.f64 n) (log.f64 n)) 2) (neg.f64 (*.f64 (neg.f64 n) (log.f64 n))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 1 (*.f64 n (log.f64 n))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 n (log.f64 n)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 1 (*.f64 (neg.f64 n) (log.f64 n))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) -1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 n) (log.f64 n) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 n (log.f64 n)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 n)) (*.f64 (pow.f64 n 2/3) (log.f64 n)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (neg.f64 n) (log.f64 n))) (cbrt.f64 (pow.f64 (*.f64 (neg.f64 n) (log.f64 n)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 n) (neg.f64 n) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 n) (cbrt.f64 (log.f64 n))) (pow.f64 (log.f64 n) 2/3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 n) (log.f64 n)) 1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (neg.f64 n) (log.f64 n)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -1 (*.f64 (neg.f64 n) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 1 (*.f64 (neg.f64 n) (log.f64 n)))))))"]],"rules":[["egg-rr",47],["egg-rr",42]],"time":26.90087890625,"type":"rewrite"},{"count":[[113,119]],"inputs":[["-1","(-.f64 (*.f64 n (+.f64 1 (*.f64 -1 (log.f64 n)))) 1)","(-.f64 (+.f64 (*.f64 1/2 (pow.f64 n 2)) (*.f64 n (+.f64 1 (*.f64 -1 (log.f64 n))))) 1)","(-.f64 (+.f64 (*.f64 -1/6 (pow.f64 n 3)) (+.f64 (*.f64 1/2 (pow.f64 n 2)) (*.f64 n (+.f64 1 (*.f64 -1 (log.f64 n)))))) 1)","(*.f64 n (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (/.f64 1 n))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (*.f64 n (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (/.f64 1 n)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (+.f64 (*.f64 1/2 (/.f64 1 n)) (*.f64 n (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (/.f64 1 n))))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (+.f64 (*.f64 1/2 (/.f64 1 n)) (*.f64 n (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (/.f64 1 n)))))) (*.f64 1/6 (/.f64 1 (pow.f64 n 2))))","(*.f64 -1 (*.f64 n (+.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 -1))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 -1)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (+.f64 (log.f64 -1) (*.f64 -1 (*.f64 n (+.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 -1))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 -1)))))))","(+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (+.f64 (*.f64 1/2 (/.f64 1 n)) (*.f64 -1 (*.f64 n (+.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 -1))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 -1))))))))","(-.f64 (+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (+.f64 (*.f64 1/2 (/.f64 1 n)) (*.f64 -1 (*.f64 n (+.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 -1))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 -1)))))))) (*.f64 1/6 (/.f64 1 (pow.f64 n 2))))","-1","(-.f64 (*.f64 -1 (*.f64 n (log.f64 n))) 1)","(-.f64 (*.f64 -1 (*.f64 n (log.f64 n))) 1)","(-.f64 (*.f64 -1 (*.f64 n (log.f64 n))) 1)","(*.f64 n (log.f64 (/.f64 1 n)))","(-.f64 (*.f64 n (log.f64 (/.f64 1 n))) 1)","(-.f64 (*.f64 n (log.f64 (/.f64 1 n))) 1)","(-.f64 (*.f64 n (log.f64 (/.f64 1 n))) 1)","(*.f64 -1 (*.f64 n (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 n))))))","(-.f64 (*.f64 -1 (*.f64 n (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 n)))))) 1)","(-.f64 (*.f64 -1 (*.f64 n (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 n)))))) 1)","(-.f64 (*.f64 -1 (*.f64 n (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 n)))))) 1)"]],"method":["egg-herbie"],"outputs":[["-1","(-.f64 (*.f64 n (+.f64 1 (*.f64 -1 (log.f64 n)))) 1)","(fma.f64 n (-.f64 1 (log.f64 n)) -1)","(-.f64 (+.f64 (*.f64 1/2 (pow.f64 n 2)) (*.f64 n (+.f64 1 (*.f64 -1 (log.f64 n))))) 1)","(fma.f64 1/2 (*.f64 n n) (fma.f64 n (-.f64 1 (log.f64 n)) -1))","(-.f64 (+.f64 (*.f64 -1/6 (pow.f64 n 3)) (+.f64 (*.f64 1/2 (pow.f64 n 2)) (*.f64 n (+.f64 1 (*.f64 -1 (log.f64 n)))))) 1)","(fma.f64 -1/6 (pow.f64 n 3) (fma.f64 1/2 (*.f64 n n) (fma.f64 n (-.f64 1 (log.f64 n)) -1)))","(*.f64 n (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (/.f64 1 n))))","(*.f64 n 0)","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (*.f64 n (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (/.f64 1 n)))))","(fma.f64 0 n (log.f64 n))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (+.f64 (*.f64 1/2 (/.f64 1 n)) (*.f64 n (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (/.f64 1 n))))))","(+.f64 (log.f64 n) (fma.f64 0 n (/.f64 1/2 n)))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (+.f64 (*.f64 1/2 (/.f64 1 n)) (*.f64 n (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (/.f64 1 n)))))) (*.f64 1/6 (/.f64 1 (pow.f64 n 2))))","(+.f64 (fma.f64 0 n (/.f64 1/2 n)) (+.f64 (log.f64 n) (/.f64 -1/6 (*.f64 n n))))","(*.f64 -1 (*.f64 n (+.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 -1))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 -1)))))","(*.f64 n 0)","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (+.f64 (log.f64 -1) (*.f64 -1 (*.f64 n (+.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 -1))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 -1)))))))","(-.f64 (fma.f64 (neg.f64 n) 0 (log.f64 -1)) (neg.f64 (log.f64 (neg.f64 n))))","(+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (+.f64 (*.f64 1/2 (/.f64 1 n)) (*.f64 -1 (*.f64 n (+.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 -1))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 -1))))))))","(+.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 n)))) (fma.f64 0 n (/.f64 1/2 n)))","(-.f64 (+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (+.f64 (*.f64 1/2 (/.f64 1 n)) (*.f64 -1 (*.f64 n (+.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 -1))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 -1)))))))) (*.f64 1/6 (/.f64 1 (pow.f64 n 2))))","(+.f64 (+.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 n)))) (fma.f64 0 n (/.f64 1/2 n))) (/.f64 -1/6 (*.f64 n n)))","-1","(-.f64 (*.f64 -1 (*.f64 n (log.f64 n))) 1)","(fma.f64 (neg.f64 n) (log.f64 n) -1)","(-.f64 (*.f64 -1 (*.f64 n (log.f64 n))) 1)","(fma.f64 (neg.f64 n) (log.f64 n) -1)","(-.f64 (*.f64 -1 (*.f64 n (log.f64 n))) 1)","(fma.f64 (neg.f64 n) (log.f64 n) -1)","(*.f64 n (log.f64 (/.f64 1 n)))","(*.f64 (neg.f64 n) (log.f64 n))","(-.f64 (*.f64 n (log.f64 (/.f64 1 n))) 1)","(fma.f64 (neg.f64 n) (log.f64 n) -1)","(-.f64 (*.f64 n (log.f64 (/.f64 1 n))) 1)","(fma.f64 (neg.f64 n) (log.f64 n) -1)","(-.f64 (*.f64 n (log.f64 (/.f64 1 n))) 1)","(fma.f64 (neg.f64 n) (log.f64 n) -1)","(*.f64 -1 (*.f64 n (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 n))))))","(*.f64 (neg.f64 n) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 n)))))","(-.f64 (*.f64 -1 (*.f64 n (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 n)))))) 1)","(fma.f64 (neg.f64 n) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 n)))) -1)","(-.f64 (*.f64 -1 (*.f64 n (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 n)))))) 1)","(fma.f64 (neg.f64 n) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 n)))) -1)","(-.f64 (*.f64 -1 (*.f64 n (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 n)))))) 1)","(fma.f64 (neg.f64 n) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 n)))) -1)"]],"time":79.5859375,"type":"simplify"},{"compiler":[[2180,1169]],"time":24.611083984375,"type":"eval"},{"alts":[["(fma.f64 0 n (log.f64 n))","next",0]],"compiler":[[6,4],[6,4]],"count":[[121,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[119,1],"picked":[1,0]}],"min-error":[0],"time":8.888916015625,"type":"prune"},{"compiler":[[10,5]],"time":3.18408203125,"type":"localize"},{"compiler":[[1,1]],"time":0.083984375,"type":"eval"},{"alts":[["(fma.f64 0 n (log.f64 n))","done",0]],"compiler":[[6,4]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.447998046875,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["n",0,1],["(-.f64 (-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n))) 1)",0,1],["(-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n)))",0,1]],"compiler":[[2,1],[16,12],[14,10],[33,21]],"count":[[3,1]],"inputs":[["(fma.f64 0 n (log.f64 n))","(fma.f64 (+.f64 n 1) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) -1))","(-.f64 (-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n))) 1)"]],"link":["."],"name":["logs (example 3.8)"],"oracle":[63.12874523003638],"outputs":[["(fma.f64 0 n (log.f64 n))"]],"time":7.948974609375,"times":[["n",2.550048828125],["(-.f64 (-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n))) 1)",2.73876953125],["(-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n)))",1.762939453125]],"type":"regimes"},{"compiler":[[6,4]],"inputs":[["(fma.f64 0 n (log.f64 n))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 0 n (log.f64 n))","(log.f64 n)"]],"stop":[["done",1]],"time":32.30615234375,"type":"simplify"},{"time":0.016845703125,"type":"soundness"},{"compiler":[[6,4]],"remove-preprocessing":[[]],"time":7.675048828125,"type":"end"}]
[{"compiler":[[62,45]],"method":["search"],"sampling":[[12,0.000365317566147508,0.00024354504409833866,0.9993911373897542],[11,0.000365317566147508,0.00024354504409833866,0.9993911373897542],[10,0.000365317566147508,0.00024354504409833866,0.9993911373897542],[9,0.00024354504409833866,0.0004870900881966773,0.999269364867705],[8,0.00024354504409833866,0.0004870900881966773,0.999269364867705],[7,0.00024354504409833866,0.0004870900881966773,0.999269364867705],[6,0.00024354504409833866,0.0004870900881966773,0.999269364867705],[5,0.0,0.0009741801763933546,0.9990258198236066],[4,0.0,0.0009741801763933546,0.9990258198236066],[3,0.0,0.0009741801763933546,0.9990258198236066],[2,0.0,0.0009741801763933546,0.9990258198236066],[1,0.0,0.0009741801763933546,0.9990258198236066],[0,0.0,0.0009741801763933546,0.9990258198236066]],"time":168.156982421875,"type":"analyze"},{"outcomes":[["body",256,"invalid",340.15771484375,2013],["body",256,"valid",1265.07421875,8256]],"time":1615.785888671875,"type":"sample"},{"compiler":[[29,20]],"inputs":[["0","1","2","3"],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 normAngle) u)) (/.f64 1 (sin.f64 u))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 normAngle u)) (/.f64 1 (sin.f64 u))) n1_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) n0_i)) (/.f64 1 (sin.f64 n0_i))) normAngle) (*.f64 (*.f64 (sin.f64 (*.f64 u n0_i)) (/.f64 1 (sin.f64 n0_i))) n1_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) n1_i)) (/.f64 1 (sin.f64 n1_i))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u n1_i)) (/.f64 1 (sin.f64 n1_i))) normAngle))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 n0_i) normAngle)) (/.f64 1 (sin.f64 normAngle))) u) (*.f64 (*.f64 (sin.f64 (*.f64 n0_i normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 n1_i) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 n1_i normAngle)) (/.f64 1 (sin.f64 normAngle))) u))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","(fma.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) n0_i (/.f64 (*.f64 n1_i (sin.f64 (*.f64 u normAngle))) (sin.f64 normAngle)))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 normAngle) u)) (/.f64 1 (sin.f64 u))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 normAngle u)) (/.f64 1 (sin.f64 u))) n1_i))","(fma.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 normAngle) u)) (sin.f64 u)) n0_i (/.f64 (*.f64 n1_i (sin.f64 (*.f64 u normAngle))) (sin.f64 u)))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) n0_i)) (/.f64 1 (sin.f64 n0_i))) normAngle) (*.f64 (*.f64 (sin.f64 (*.f64 u n0_i)) (/.f64 1 (sin.f64 n0_i))) n1_i))","(fma.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) n0_i)) (sin.f64 n0_i)) normAngle (/.f64 (*.f64 n1_i (sin.f64 (*.f64 u n0_i))) (sin.f64 n0_i)))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) n1_i)) (/.f64 1 (sin.f64 n1_i))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u n1_i)) (/.f64 1 (sin.f64 n1_i))) normAngle))","(fma.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) n1_i)) (sin.f64 n1_i)) n0_i (/.f64 (*.f64 normAngle (sin.f64 (*.f64 u n1_i))) (sin.f64 n1_i)))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 n0_i) normAngle)) (/.f64 1 (sin.f64 normAngle))) u) (*.f64 (*.f64 (sin.f64 (*.f64 n0_i normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","(fma.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 n0_i) normAngle)) (sin.f64 normAngle)) u (/.f64 (*.f64 n1_i (sin.f64 (*.f64 n0_i normAngle))) (sin.f64 normAngle)))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 n1_i) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 n1_i normAngle)) (/.f64 1 (sin.f64 normAngle))) u))","(fma.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 n1_i) normAngle)) (sin.f64 normAngle)) n0_i (/.f64 (*.f64 u (sin.f64 (*.f64 n1_i normAngle))) (sin.f64 normAngle)))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i))","(fma.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) n1_i (/.f64 (*.f64 n0_i (sin.f64 (*.f64 u normAngle))) (sin.f64 normAngle)))"]],"symmetry":[[]],"time":73.028076171875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","(/.f64 (+.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (*.f64 n1_i (sin.f64 (*.f64 u normAngle)))) (sin.f64 normAngle))"]],"time":21.260009765625,"type":"simplify"},{"compiler":[[47,28]],"time":0.5380859375,"type":"eval"},{"alts":[["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","next",0.46119851489691627],["(/.f64 (+.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (*.f64 n1_i (sin.f64 (*.f64 u normAngle)))) (sin.f64 normAngle))","fresh",18.732089390540903]],"compiler":[[29,20],[22,15],[29,20],[22,15]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.28180471605470614],"time":1.768798828125,"type":"prune"},{"compiler":[[105,54]],"locations":[["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)",0.171875,true],["(*.f64 (-.f64 1 u) normAngle)",0.1796875,true],["(*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle)))",0.3974133917044398,true],["(*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))",0.43263627930532605,true]],"time":22.64013671875,"type":"localize"},{"count":[[4,96]],"series":[["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)","n0_i","-inf",0.35400390625],["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)","n0_i","inf",0.448974609375],["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)","n0_i","0",1.816162109375],["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)","normAngle","-inf",0.511962890625],["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)","normAngle","inf",0.56298828125],["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)","normAngle","0",0.763916015625],["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)","u","-inf",0.5048828125],["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)","u","inf",0.55712890625],["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)","u","0",0.445068359375],["(*.f64 (-.f64 1 u) normAngle)","normAngle","-inf",0.292236328125],["(*.f64 (-.f64 1 u) normAngle)","normAngle","inf",1.026123046875],["(*.f64 (-.f64 1 u) normAngle)","normAngle","0",0.281982421875],["(*.f64 (-.f64 1 u) normAngle)","u","-inf",0.198974609375],["(*.f64 (-.f64 1 u) normAngle)","u","inf",0.31201171875],["(*.f64 (-.f64 1 u) normAngle)","u","0",0.247802734375],["(*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle)))","normAngle","-inf",0.39501953125],["(*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle)))","normAngle","inf",0.39599609375],["(*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle)))","normAngle","0",0.592041015625],["(*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle)))","u","-inf",0.3759765625],["(*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle)))","u","inf",0.448974609375],["(*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle)))","u","0",0.546142578125],["(*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))","normAngle","-inf",0.777099609375],["(*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))","normAngle","inf",0.440185546875],["(*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))","normAngle","0",0.77294921875],["(*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))","u","-inf",0.553955078125],["(*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))","u","inf",0.68505859375],["(*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))","u","0",0.758056640625]],"time":15.536865234375,"type":"series"},{"count":[[4,194]],"inputs":[["(*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))","(*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle)))","(*.f64 (-.f64 1 u) normAngle)","(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 0) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) (*.f64 0 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)) (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 normAngle) (neg.f64 1/3)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 normAngle) -2)) (sin.f64 (*.f64 (-.f64 1 u) normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 normAngle)) (sin.f64 (*.f64 (-.f64 1 u) normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 normAngle) (neg.f64 1/3)) (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (pow.f64 (sin.f64 normAngle) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (/.f64 -1 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle))) (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 normAngle))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 normAngle))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle))) 1) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)) (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 normAngle) (neg.f64 1/3)) (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle))) 1) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (pow.f64 (sin.f64 normAngle) -2))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 normAngle) -2)) (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (pow.f64 (sin.f64 normAngle) -2)))) (cbrt.f64 (neg.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 normAngle) -2)) (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (cbrt.f64 (neg.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) -1) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (cbrt.f64 (sin.f64 normAngle))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle))) 1) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle)))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 (sin.f64 normAngle)) (sin.f64 (*.f64 (-.f64 1 u) normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 -1 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) (*.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) 0) (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) (*.f64 0 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))) (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 u normAngle))) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 u normAngle)) 2)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) 2)) (cbrt.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 normAngle) (neg.f64 1/3)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 normAngle) -2)) (sin.f64 (*.f64 u normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (cbrt.f64 (sin.f64 normAngle))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 normAngle)) (sin.f64 (*.f64 u normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (sin.f64 (*.f64 u normAngle))) (sin.f64 normAngle)) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 u normAngle)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 normAngle) (neg.f64 1/3)) (*.f64 (sin.f64 (*.f64 u normAngle)) (cbrt.f64 (pow.f64 (sin.f64 normAngle) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (*.f64 u normAngle))) (/.f64 -1 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (cbrt.f64 (sin.f64 normAngle))) (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 normAngle))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 normAngle))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (cbrt.f64 (sin.f64 normAngle))) 1) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 (*.f64 u normAngle))) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (cbrt.f64 (sin.f64 normAngle))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) 2)) (cbrt.f64 (sin.f64 (*.f64 u normAngle)))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (cbrt.f64 (sin.f64 normAngle))) 1) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 u normAngle)) 2))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 normAngle) (neg.f64 1/3)) (sin.f64 (*.f64 u normAngle))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 (*.f64 u normAngle))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) 2))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (cbrt.f64 (pow.f64 (sin.f64 normAngle) -2))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 normAngle) -2)) (sin.f64 (*.f64 u normAngle)))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 normAngle) -2)) (sin.f64 (*.f64 u normAngle)))) (cbrt.f64 (neg.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (sin.f64 (*.f64 u normAngle)) (cbrt.f64 (pow.f64 (sin.f64 normAngle) -2)))) (cbrt.f64 (neg.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) -1) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (sin.f64 (*.f64 u normAngle))) (cbrt.f64 (sin.f64 normAngle))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (cbrt.f64 (sin.f64 normAngle))) 1) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (cbrt.f64 (sin.f64 normAngle)))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 (sin.f64 normAngle)) (sin.f64 (*.f64 u normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 -1 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 normAngle (neg.f64 (*.f64 u normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 u normAngle)) normAngle)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 u) normAngle) (*.f64 (*.f64 (-.f64 1 u) normAngle) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 u) normAngle) 0) (*.f64 (-.f64 1 u) normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 normAngle (*.f64 (neg.f64 (*.f64 u normAngle)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 u) normAngle) (*.f64 0 (*.f64 (-.f64 1 u) normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (-.f64 1 u) normAngle)) (*.f64 (-.f64 1 u) normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 normAngle (*.f64 1 (neg.f64 (*.f64 u normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 normAngle (+.f64 u -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 normAngle) (*.f64 (cbrt.f64 (*.f64 normAngle normAngle)) (-.f64 1 u)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 u)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 u) 2)) normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 u) normAngle)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 normAngle (-.f64 1 u))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 u) normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 u) normAngle) 2)) (cbrt.f64 (*.f64 (-.f64 1 u) normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 1 u) normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 u) normAngle) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 normAngle (+.f64 u -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 u) (cbrt.f64 normAngle)) (cbrt.f64 (*.f64 normAngle normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 normAngle (cbrt.f64 (-.f64 1 u))) (cbrt.f64 (pow.f64 (-.f64 1 u) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 normAngle) (+.f64 u -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 u -1) (neg.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 normAngle (-.f64 1 (pow.f64 u 3))) (/.f64 1 (fma.f64 u u (+.f64 1 u))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 u) normAngle) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 normAngle (-.f64 1 (pow.f64 u 3))) (cbrt.f64 (fma.f64 u u (+.f64 1 u)))) (pow.f64 (cbrt.f64 (fma.f64 u u (+.f64 1 u))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 normAngle (-.f64 1 (pow.f64 u 3))) (fma.f64 u u (+.f64 1 u)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 normAngle (-.f64 1 (pow.f64 u 3)))) (fma.f64 u u (+.f64 1 u)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 normAngle (-.f64 1 (pow.f64 u 3))) 1) (fma.f64 u u (+.f64 1 u)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 normAngle (-.f64 1 (pow.f64 u 3))) 1) (fma.f64 u u (+.f64 1 u)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 normAngle (-.f64 1 (pow.f64 u 3))) 1) (*.f64 (fma.f64 u u (+.f64 1 u)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 normAngle (+.f64 -1 (pow.f64 u 3))) (neg.f64 (fma.f64 u u (+.f64 1 u))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 u 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 u) 2)) normAngle)) (cbrt.f64 (fma.f64 u u (+.f64 1 u))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 u 3)) normAngle) (neg.f64 (fma.f64 u u (+.f64 1 u))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 normAngle (-.f64 1 (pow.f64 u 3)))) (neg.f64 (fma.f64 u u (+.f64 1 u))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 u) normAngle) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 u) normAngle) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 u) normAngle)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 u) normAngle)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 u) normAngle)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 normAngle (+.f64 u -1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 normAngle (+.f64 u -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (*.f64 normAngle (+.f64 u -1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (-.f64 1 u) normAngle) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 u) normAngle) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 normAngle) (neg.f64 (*.f64 u normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 normAngle) (cbrt.f64 (*.f64 normAngle normAngle)) (neg.f64 (*.f64 u normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 normAngle (neg.f64 (*.f64 u normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 normAngle 1 (neg.f64 (*.f64 u normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 normAngle normAngle)) (cbrt.f64 normAngle) (neg.f64 (*.f64 u normAngle)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) (*.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) 0) (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) (*.f64 0 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))) (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)) n0_i))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 n0_i) (/.f64 (*.f64 (cbrt.f64 (*.f64 n0_i n0_i)) (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2)) (/.f64 n0_i (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) n0_i)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 n0_i (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) 2)) (cbrt.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 n0_i)) (sin.f64 normAngle)) (cbrt.f64 (*.f64 n0_i n0_i)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 normAngle)) (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 (-.f64 1 u) normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (/.f64 1 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 n0_i (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 n0_i (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (neg.f64 n0_i)) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) 1) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (pow.f64 (sin.f64 normAngle) (neg.f64 1/3))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) -1) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 normAngle) (neg.f64 1/3)) (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)) n0_i)) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) n0_i) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle))) n0_i) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 n0_i) (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) 1) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) -1) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (cbrt.f64 (sin.f64 normAngle))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 (sin.f64 normAngle)) (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (/.f64 -1 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) 3))))))"]],"rules":[["egg-rr",51],["egg-rr",49],["egg-rr",47],["egg-rr",47]],"time":38.802978515625,"type":"rewrite"},{"count":[[290,243]],"inputs":[["1","(+.f64 1 (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))) (*.f64 -1/2 (*.f64 (pow.f64 u 2) (pow.f64 normAngle 2)))))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))) (+.f64 (*.f64 1/6 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3))) (sin.f64 normAngle))) (*.f64 -1/2 (*.f64 (pow.f64 u 2) (pow.f64 normAngle 2))))))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(-.f64 1 u)","(-.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (pow.f64 normAngle 2))) u)","(-.f64 (+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (pow.f64 normAngle 2)) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u)))) (pow.f64 normAngle 4)))) u)","(-.f64 (+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (pow.f64 normAngle 2)) (+.f64 (*.f64 (-.f64 (*.f64 -1/5040 (pow.f64 (-.f64 1 u) 7)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u))))) (+.f64 (*.f64 1/120 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 -1/5040 (-.f64 1 u))))) (pow.f64 normAngle 6)) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u)))) (pow.f64 normAngle 4))))) u)","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (*.f64 u normAngle) (sin.f64 normAngle))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle)))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 u 5) (pow.f64 normAngle 5)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 u 7) (pow.f64 normAngle 7)) (sin.f64 normAngle))) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 u 5) (pow.f64 normAngle 5)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle)))))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","u","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u)) (pow.f64 normAngle 2)) u)","(+.f64 (*.f64 (-.f64 (*.f64 1/120 (pow.f64 u 5)) (+.f64 (*.f64 1/120 u) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u))))) (pow.f64 normAngle 4)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u)) (pow.f64 normAngle 2)) u))","(+.f64 (*.f64 (-.f64 (*.f64 -1/5040 (pow.f64 u 7)) (+.f64 (*.f64 1/120 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u))) (+.f64 (*.f64 -1/5040 u) (*.f64 -1/6 (-.f64 (*.f64 1/120 (pow.f64 u 5)) (+.f64 (*.f64 1/120 u) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u))))))))) (pow.f64 normAngle 6)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (pow.f64 u 5)) (+.f64 (*.f64 1/120 u) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u))))) (pow.f64 normAngle 4)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u)) (pow.f64 normAngle 2)) u)))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","normAngle","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(*.f64 -1 (*.f64 u normAngle))","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(*.f64 -1 (*.f64 u normAngle))","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","n0_i","(+.f64 n0_i (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 u 2) (*.f64 n0_i (pow.f64 normAngle 2)))) (+.f64 n0_i (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle)))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 (pow.f64 u 3) (*.f64 n0_i (pow.f64 normAngle 3)))) (sin.f64 normAngle))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 u 2) (*.f64 n0_i (pow.f64 normAngle 2)))) (+.f64 n0_i (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle))))))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(*.f64 (-.f64 1 u) n0_i)","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))) (pow.f64 normAngle 2)) (*.f64 (-.f64 1 u) n0_i))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))) (pow.f64 normAngle 2)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 u) n0_i)) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i)))))) (pow.f64 normAngle 4)) (*.f64 (-.f64 1 u) n0_i)))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))) (pow.f64 normAngle 2)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 u) n0_i)) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i)))))) (pow.f64 normAngle 4)) (+.f64 (*.f64 (-.f64 1 u) n0_i) (*.f64 (-.f64 (*.f64 -1/5040 (*.f64 (pow.f64 (-.f64 1 u) 7) n0_i)) (+.f64 (*.f64 -1/5040 (*.f64 (-.f64 1 u) n0_i)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 u) n0_i)) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))))))) (*.f64 1/120 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))))))) (pow.f64 normAngle 6)))))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))))","(-.f64 1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle)))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))) (*.f64 -1/2 (*.f64 (pow.f64 u 2) (pow.f64 normAngle 2)))))","(+.f64 (-.f64 1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))) (*.f64 -1/2 (pow.f64 (*.f64 u normAngle) 2)))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))) (+.f64 (*.f64 1/6 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3))) (sin.f64 normAngle))) (*.f64 -1/2 (*.f64 (pow.f64 u 2) (pow.f64 normAngle 2))))))","(+.f64 (/.f64 (+.f64 (*.f64 (neg.f64 (*.f64 u normAngle)) (cos.f64 normAngle)) (*.f64 1/6 (*.f64 (cos.f64 normAngle) (pow.f64 (*.f64 u normAngle) 3)))) (sin.f64 normAngle)) (+.f64 (*.f64 -1/2 (pow.f64 (*.f64 u normAngle) 2)) 1))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(-.f64 1 u)","(-.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (pow.f64 normAngle 2))) u)","(+.f64 (*.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 normAngle normAngle)) (-.f64 1 u))","(-.f64 (+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (pow.f64 normAngle 2)) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u)))) (pow.f64 normAngle 4)))) u)","(+.f64 (fma.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 normAngle normAngle) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (fma.f64 -1/6 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 1/120 (-.f64 1 u)))) (pow.f64 normAngle 4))) (-.f64 1 u))","(-.f64 (+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (pow.f64 normAngle 2)) (+.f64 (*.f64 (-.f64 (*.f64 -1/5040 (pow.f64 (-.f64 1 u) 7)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u))))) (+.f64 (*.f64 1/120 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 -1/5040 (-.f64 1 u))))) (pow.f64 normAngle 6)) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u)))) (pow.f64 normAngle 4))))) u)","(+.f64 (fma.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 normAngle normAngle) (fma.f64 (-.f64 (*.f64 -1/5040 (pow.f64 (-.f64 1 u) 7)) (fma.f64 -1/6 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (fma.f64 -1/6 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 1/120 (-.f64 1 u)))) (fma.f64 1/120 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 -1/5040 (-.f64 1 u))))) (pow.f64 normAngle 6) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (fma.f64 -1/6 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 1/120 (-.f64 1 u)))) (pow.f64 normAngle 4)))) (-.f64 1 u))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (*.f64 u normAngle) (sin.f64 normAngle))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle)))","(/.f64 (+.f64 (*.f64 -1/6 (pow.f64 (*.f64 u normAngle) 3)) (*.f64 u normAngle)) (sin.f64 normAngle))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 u 5) (pow.f64 normAngle 5)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))))","(fma.f64 -1/6 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle)) (/.f64 (+.f64 (*.f64 u normAngle) (*.f64 1/120 (pow.f64 (*.f64 u normAngle) 5))) (sin.f64 normAngle)))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 u 7) (pow.f64 normAngle 7)) (sin.f64 normAngle))) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 u 5) (pow.f64 normAngle 5)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle)))))","(+.f64 (/.f64 (+.f64 (*.f64 -1/6 (pow.f64 (*.f64 u normAngle) 3)) (*.f64 -1/5040 (pow.f64 (*.f64 u normAngle) 7))) (sin.f64 normAngle)) (/.f64 (+.f64 (*.f64 u normAngle) (*.f64 1/120 (pow.f64 (*.f64 u normAngle) 5))) (sin.f64 normAngle)))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","u","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u)) (pow.f64 normAngle 2)) u)","(fma.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) (*.f64 normAngle normAngle) u)","(+.f64 (*.f64 (-.f64 (*.f64 1/120 (pow.f64 u 5)) (+.f64 (*.f64 1/120 u) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u))))) (pow.f64 normAngle 4)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u)) (pow.f64 normAngle 2)) u))","(fma.f64 (+.f64 (*.f64 1/120 (-.f64 (pow.f64 u 5) u)) (*.f64 1/6 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)))) (pow.f64 normAngle 4) (fma.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) (*.f64 normAngle normAngle) u))","(+.f64 (*.f64 (-.f64 (*.f64 -1/5040 (pow.f64 u 7)) (+.f64 (*.f64 1/120 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u))) (+.f64 (*.f64 -1/5040 u) (*.f64 -1/6 (-.f64 (*.f64 1/120 (pow.f64 u 5)) (+.f64 (*.f64 1/120 u) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u))))))))) (pow.f64 normAngle 6)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (pow.f64 u 5)) (+.f64 (*.f64 1/120 u) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u))))) (pow.f64 normAngle 4)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u)) (pow.f64 normAngle 2)) u)))","(fma.f64 (-.f64 (*.f64 -1/5040 (pow.f64 u 7)) (fma.f64 1/120 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) (fma.f64 -1/5040 u (*.f64 -1/6 (+.f64 (*.f64 1/120 (-.f64 (pow.f64 u 5) u)) (*.f64 1/6 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)))))))) (pow.f64 normAngle 6) (fma.f64 (+.f64 (*.f64 1/120 (-.f64 (pow.f64 u 5) u)) (*.f64 1/6 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)))) (pow.f64 normAngle 4) (fma.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) (*.f64 normAngle normAngle) u)))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","normAngle","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(*.f64 (-.f64 1 u) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(*.f64 (-.f64 1 u) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(*.f64 (-.f64 1 u) normAngle)","(*.f64 -1 (*.f64 u normAngle))","(neg.f64 (*.f64 u normAngle))","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(*.f64 (-.f64 1 u) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(*.f64 (-.f64 1 u) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(*.f64 (-.f64 1 u) normAngle)","(*.f64 -1 (*.f64 u normAngle))","(neg.f64 (*.f64 u normAngle))","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(*.f64 (-.f64 1 u) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(*.f64 (-.f64 1 u) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(*.f64 (-.f64 1 u) normAngle)","n0_i","(+.f64 n0_i (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle))))","(-.f64 n0_i (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 u 2) (*.f64 n0_i (pow.f64 normAngle 2)))) (+.f64 n0_i (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle)))))","(fma.f64 -1/2 (*.f64 (*.f64 u u) (*.f64 n0_i (*.f64 normAngle normAngle))) (-.f64 n0_i (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 (pow.f64 u 3) (*.f64 n0_i (pow.f64 normAngle 3)))) (sin.f64 normAngle))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 u 2) (*.f64 n0_i (pow.f64 normAngle 2)))) (+.f64 n0_i (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle))))))","(fma.f64 1/6 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 (pow.f64 u 3) (*.f64 n0_i (pow.f64 normAngle 3)))) (sin.f64 normAngle)) (fma.f64 -1/2 (*.f64 (*.f64 u u) (*.f64 n0_i (*.f64 normAngle normAngle))) (-.f64 n0_i (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle)))))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(*.f64 (-.f64 1 u) n0_i)","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))) (pow.f64 normAngle 2)) (*.f64 (-.f64 1 u) n0_i))","(fma.f64 (*.f64 n0_i (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))) (*.f64 normAngle normAngle) (*.f64 (-.f64 1 u) n0_i))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))) (pow.f64 normAngle 2)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 u) n0_i)) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i)))))) (pow.f64 normAngle 4)) (*.f64 (-.f64 1 u) n0_i)))","(fma.f64 (*.f64 n0_i (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))) (*.f64 normAngle normAngle) (fma.f64 (+.f64 (*.f64 1/120 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i) (*.f64 (-.f64 1 u) n0_i))) (*.f64 1/6 (*.f64 n0_i (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))))) (pow.f64 normAngle 4) (*.f64 (-.f64 1 u) n0_i)))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))) (pow.f64 normAngle 2)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 u) n0_i)) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i)))))) (pow.f64 normAngle 4)) (+.f64 (*.f64 (-.f64 1 u) n0_i) (*.f64 (-.f64 (*.f64 -1/5040 (*.f64 (pow.f64 (-.f64 1 u) 7) n0_i)) (+.f64 (*.f64 -1/5040 (*.f64 (-.f64 1 u) n0_i)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 u) n0_i)) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))))))) (*.f64 1/120 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))))))) (pow.f64 normAngle 6)))))","(fma.f64 (*.f64 n0_i (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))) (*.f64 normAngle normAngle) (fma.f64 (+.f64 (*.f64 1/120 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i) (*.f64 (-.f64 1 u) n0_i))) (*.f64 1/6 (*.f64 n0_i (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))))) (pow.f64 normAngle 4) (fma.f64 (-.f64 1 u) n0_i (*.f64 (-.f64 (*.f64 -1/5040 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 7) n0_i) (*.f64 (-.f64 1 u) n0_i))) (fma.f64 -1/6 (+.f64 (*.f64 1/120 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i) (*.f64 (-.f64 1 u) n0_i))) (*.f64 1/6 (*.f64 n0_i (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))))) (*.f64 1/120 (*.f64 n0_i (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))))))) (pow.f64 normAngle 6)))))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))"]],"time":352.191162109375,"type":"simplify"},{"compiler":[[8123,4476]],"time":78.35205078125,"type":"eval"},{"alts":[["(+.f64 (*.f64 (*.f64 (sin.f64 (/.f64 (/.f64 (*.f64 normAngle (-.f64 1 (pow.f64 u 3))) (cbrt.f64 (fma.f64 u u (+.f64 1 u)))) (pow.f64 (cbrt.f64 (fma.f64 u u (+.f64 1 u))) 2))) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","fresh",0.7571351235068124],["(+.f64 (fma.f64 -1/2 (*.f64 (*.f64 u u) (*.f64 n0_i (*.f64 normAngle normAngle))) (-.f64 n0_i (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle)))) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","fresh",6.370042178699876],["(+.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)) n0_i)) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","fresh",0.49635476489691627],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (/.f64 (/.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (cbrt.f64 (sin.f64 normAngle))) (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 normAngle))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 normAngle))) 2) 2)) n1_i))","fresh",0.9255990787498465],["(/.f64 (+.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (*.f64 n1_i (sin.f64 (*.f64 u normAngle)))) (sin.f64 normAngle))","fresh",18.732089390540903],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","next",0.3387772258231482],["(+.f64 (*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2))) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","fresh",0.45567102466535825],["(+.f64 (*.f64 (+.f64 (*.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 normAngle normAngle)) (-.f64 1 u)) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","fresh",0.3515836690193219],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (fma.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) (*.f64 normAngle normAngle) u) n1_i))","fresh",0.4173707610492675]],"compiler":[[49,34],[40,24],[41,28],[44,28],[22,15],[39,26],[41,28],[37,27],[32,22],[49,34],[40,24],[41,28],[44,28],[22,15],[39,26],[41,28],[37,27],[32,22]],"count":[[245,9]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[243,8],"picked":[1,0]}],"min-error":[0],"time":97.10693359375,"type":"prune"},{"compiler":[[174,97]],"locations":[["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)",0.171875,false],["(*.f64 (-.f64 1 u) normAngle)",0.1796875,false],["(*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))",0.43263627930532605,false],["(/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))",8.346979362618086,true]],"time":38.093994140625,"type":"localize"},{"count":[[1,4]],"series":[["(/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))","normAngle","-inf",1.0009765625],["(/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))","normAngle","inf",3.164794921875],["(/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))","normAngle","0",0.669921875],["(/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))","u","-inf",0.401123046875],["(/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))","u","inf",0.723876953125],["(/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))","u","0",1.23876953125]],"time":7.405029296875,"type":"series"},{"count":[[1,51]],"inputs":[["(/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (neg.f64 (pow.f64 (*.f64 u normAngle) 3)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 u normAngle) (cbrt.f64 (sin.f64 normAngle))) (pow.f64 (/.f64 (*.f64 u normAngle) (cbrt.f64 (sin.f64 normAngle))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 u normAngle) (cbrt.f64 (sin.f64 normAngle))) 2) (/.f64 (*.f64 u normAngle) (cbrt.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 u normAngle) (/.f64 (pow.f64 (*.f64 u normAngle) 2) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 normAngle 3) (cbrt.f64 (sin.f64 normAngle))) (*.f64 (pow.f64 u 3) (pow.f64 (sin.f64 normAngle) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 u 3) (cbrt.f64 (sin.f64 normAngle))) (*.f64 (pow.f64 normAngle 3) (pow.f64 (sin.f64 normAngle) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 2) (sin.f64 normAngle)) (*.f64 u normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 u 3) (pow.f64 (sin.f64 normAngle) -2/3)) (/.f64 (pow.f64 normAngle 3) (cbrt.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 normAngle 3) (pow.f64 (sin.f64 normAngle) -2/3)) (/.f64 (pow.f64 u 3) (cbrt.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 u 3) (/.f64 (pow.f64 normAngle 3) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 u normAngle) 3)) (/.f64 -1 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 normAngle 3) (/.f64 (pow.f64 u 3) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 u normAngle) 3) (/.f64 1 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 normAngle)) (pow.f64 (*.f64 u normAngle) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 normAngle) -1/3) (*.f64 (pow.f64 (*.f64 u normAngle) 3) (pow.f64 (sin.f64 normAngle) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 u normAngle) 3) (pow.f64 (sin.f64 normAngle) -2/3)) (pow.f64 (sin.f64 normAngle) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (sin.f64 normAngle)) (neg.f64 (pow.f64 (*.f64 u normAngle) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 u 3) (sin.f64 normAngle)) (pow.f64 normAngle 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 normAngle 3) (sin.f64 normAngle)) (pow.f64 u 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (cbrt.f64 (sin.f64 normAngle))) (pow.f64 (sin.f64 normAngle) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (neg.f64 (pow.f64 (*.f64 u normAngle) 3)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 u normAngle) 3)) (sin.f64 normAngle)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (cbrt.f64 (sin.f64 normAngle))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2/3))) (/.f64 1 (cbrt.f64 (pow.f64 (pow.f64 (sin.f64 normAngle) 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 u normAngle) 3)) (cbrt.f64 (sin.f64 normAngle))) (neg.f64 (pow.f64 (sin.f64 normAngle) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (*.f64 u normAngle) (cbrt.f64 (sin.f64 normAngle))) 2) (neg.f64 (*.f64 u normAngle))) (neg.f64 (pow.f64 (sin.f64 normAngle) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 (*.f64 u normAngle) (cbrt.f64 (sin.f64 normAngle))) 2) (*.f64 0 (/.f64 (*.f64 u normAngle) (cbrt.f64 (neg.f64 (sin.f64 normAngle))))))) (/.f64 (*.f64 u normAngle) (cbrt.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (cbrt.f64 (sin.f64 normAngle))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2/3)))) (neg.f64 (cbrt.f64 (pow.f64 (pow.f64 (sin.f64 normAngle) 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (*.f64 u normAngle) 3) (pow.f64 (sin.f64 normAngle) -2/3))) (cbrt.f64 (neg.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 u normAngle) 3)) (cbrt.f64 (sin.f64 normAngle))) (neg.f64 (pow.f64 (sin.f64 normAngle) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 u normAngle) (cbrt.f64 (sin.f64 normAngle))) 6) (neg.f64 (pow.f64 (*.f64 u normAngle) 3)))) (cbrt.f64 (neg.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 u normAngle) (cbrt.f64 (sin.f64 normAngle))) 6) (/.f64 (pow.f64 (*.f64 u normAngle) 3) (cbrt.f64 (sin.f64 normAngle))))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 u normAngle) 3) (pow.f64 (sin.f64 normAngle) -2/3)) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (cbrt.f64 (sin.f64 normAngle))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (sin.f64 normAngle) 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (*.f64 u normAngle) 3)) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (cbrt.f64 (sin.f64 normAngle))) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 u normAngle) (cbrt.f64 (sin.f64 normAngle))) 2) (neg.f64 (*.f64 u normAngle))) (cbrt.f64 (neg.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 u normAngle) 3)) (sin.f64 normAngle)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (*.f64 u normAngle) (cbrt.f64 (sin.f64 normAngle))) 2) (neg.f64 (*.f64 u normAngle)))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 u normAngle) (cbrt.f64 (sin.f64 normAngle))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 u normAngle) 3)) (sin.f64 normAngle)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 u normAngle) 3)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle)) 3))))))"]],"rules":[["egg-rr",51]],"time":44.910888671875,"type":"rewrite"},{"count":[[55,59]],"inputs":[["(*.f64 (pow.f64 u 3) (pow.f64 normAngle 2))","(+.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 2)) (*.f64 1/6 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 4))))","(+.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 2)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 4))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/36 (pow.f64 u 3)) (*.f64 1/120 (pow.f64 u 3))) (pow.f64 normAngle 6)))))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/720 (pow.f64 u 3)) (+.f64 (*.f64 1/6 (+.f64 (*.f64 -1/36 (pow.f64 u 3)) (*.f64 1/120 (pow.f64 u 3)))) (*.f64 -1/5040 (pow.f64 u 3)))) (pow.f64 normAngle 8))) (+.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 2)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 4))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/36 (pow.f64 u 3)) (*.f64 1/120 (pow.f64 u 3))) (pow.f64 normAngle 6))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 u 3) (pow.f64 normAngle 2))","(*.f64 (*.f64 (pow.f64 u 3) normAngle) normAngle)","(+.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 2)) (*.f64 1/6 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 4))))","(*.f64 (pow.f64 u 3) (+.f64 (*.f64 (pow.f64 normAngle 4) 1/6) (*.f64 normAngle normAngle)))","(+.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 2)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 4))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/36 (pow.f64 u 3)) (*.f64 1/120 (pow.f64 u 3))) (pow.f64 normAngle 6)))))","(fma.f64 (pow.f64 u 3) (*.f64 normAngle normAngle) (*.f64 (pow.f64 u 3) (-.f64 (*.f64 (pow.f64 normAngle 4) 1/6) (*.f64 -7/360 (pow.f64 normAngle 6)))))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/720 (pow.f64 u 3)) (+.f64 (*.f64 1/6 (+.f64 (*.f64 -1/36 (pow.f64 u 3)) (*.f64 1/120 (pow.f64 u 3)))) (*.f64 -1/5040 (pow.f64 u 3)))) (pow.f64 normAngle 8))) (+.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 2)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 4))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/36 (pow.f64 u 3)) (*.f64 1/120 (pow.f64 u 3))) (pow.f64 normAngle 6))))))","(fma.f64 (neg.f64 (fma.f64 1/720 (pow.f64 u 3) (*.f64 (pow.f64 u 3) (+.f64 -7/2160 -1/5040)))) (pow.f64 normAngle 8) (fma.f64 (pow.f64 u 3) (*.f64 normAngle normAngle) (*.f64 (pow.f64 u 3) (-.f64 (*.f64 (pow.f64 normAngle 4) 1/6) (*.f64 -7/360 (pow.f64 normAngle 6))))))"]],"time":43.404052734375,"type":"simplify"},{"compiler":[[10279,5724]],"time":100.589111328125,"type":"eval"},{"alts":[["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (/.f64 (/.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (cbrt.f64 (sin.f64 normAngle))) (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 normAngle))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 normAngle))) 2) 2)) n1_i))","fresh",0.9255990787498465],["(/.f64 (+.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (*.f64 n1_i (sin.f64 (*.f64 u normAngle)))) (sin.f64 normAngle))","fresh",18.732089390540903],["(+.f64 (*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2))) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","fresh",0.33324973559159016],["(+.f64 (*.f64 (*.f64 (sin.f64 (/.f64 (/.f64 (*.f64 normAngle (-.f64 1 (pow.f64 u 3))) (cbrt.f64 (fma.f64 u u (+.f64 1 u)))) (pow.f64 (cbrt.f64 (fma.f64 u u (+.f64 1 u))) 2))) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","fresh",0.6347138344330442],["(+.f64 (*.f64 (+.f64 (*.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 normAngle normAngle)) (-.f64 1 u)) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","next",0.22916237994555383],["(+.f64 (fma.f64 -1/2 (*.f64 (*.f64 u u) (*.f64 n0_i (*.f64 normAngle normAngle))) (-.f64 n0_i (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle)))) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","fresh",6.251527139626212],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (fma.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) (*.f64 normAngle normAngle) u) n1_i))","fresh",0.4173707610492675],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (*.f64 normAngle (-.f64 1 (pow.f64 u 3))) (/.f64 1 (fma.f64 u u (+.f64 1 u))))) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","fresh",0.4693810832760104]],"compiler":[[44,28],[22,15],[51,34],[59,40],[47,33],[50,30],[32,22],[50,34],[44,28],[22,15],[51,34],[59,40],[47,33],[50,30],[32,22],[50,34]],"count":[[250,8]],"kept":[{"done":[0,0],"fresh":[8,3],"new":[241,5],"picked":[1,0]}],"min-error":[0],"time":108.725830078125,"type":"prune"},{"compiler":[[230,140]],"locations":[["(*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))",0.359375,true],["(pow.f64 (-.f64 1 u) 3)",0.6625939942110507,true],["(/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))",8.346979362618086,false],["(+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))",12.084090613484543,true]],"time":46.407958984375,"type":"localize"},{"count":[[3,36]],"series":[["(*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))","u","-inf",0.234130859375],["(*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))","u","inf",0.213134765625],["(*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))","u","0",0.23583984375],["(pow.f64 (-.f64 1 u) 3)","u","-inf",0.160888671875],["(pow.f64 (-.f64 1 u) 3)","u","inf",0.1748046875],["(pow.f64 (-.f64 1 u) 3)","u","0",0.19091796875],["(+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))","u","-inf",0.296875],["(+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))","u","inf",0.35009765625],["(+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))","u","0",0.3818359375]],"time":2.3662109375,"type":"series"},{"count":[[3,221]],"inputs":[["(+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))","(pow.f64 (-.f64 1 u) 3)","(*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) (*.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) 0) (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) (*.f64 0 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 u -1) (pow.f64 (-.f64 1 u) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (+.f64 (pow.f64 (-.f64 1 u) 3) u))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) -1) u)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 u (+.f64 (pow.f64 (-.f64 1 u) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 u -1) (pow.f64 (-.f64 1 u) 2)) (*.f64 (pow.f64 (-.f64 1 u) 2) (neg.f64 u)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (-.f64 1 u) 2) (+.f64 (*.f64 (pow.f64 (-.f64 1 u) 2) (neg.f64 u)) (+.f64 u -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 u (*.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) -1) 1) u)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 u (+.f64 1 (pow.f64 (+.f64 u -1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (-.f64 1 u) (pow.f64 (-.f64 1 u) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 1 (+.f64 (pow.f64 (-.f64 1 u) 3) u)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 u -1) (pow.f64 (+.f64 u -1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) 0) (-.f64 1 u))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (pow.f64 (+.f64 u -1) 3) (-.f64 1 u)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 u -1) 3) (-.f64 1 u)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (cbrt.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (-.f64 1 u) 2)) (-.f64 (pow.f64 (-.f64 1 u) 2) (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u) 4))))) (+.f64 (cbrt.f64 (+.f64 u -1)) (-.f64 1 u)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (-.f64 1 u) 2) (-.f64 (cbrt.f64 (pow.f64 (-.f64 1 u) 2)) (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u) 4))))) (+.f64 (-.f64 1 u) (cbrt.f64 (+.f64 u -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) 2)) (cbrt.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 u) (+.f64 (pow.f64 (-.f64 1 u) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 u) (+.f64 -1 (pow.f64 (-.f64 1 u) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 3) -1) (/.f64 1 (+.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 2) (+.f64 1 (+.f64 (pow.f64 (-.f64 1 u) 3) u)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 u) 2)) (+.f64 (pow.f64 (-.f64 1 u) (+.f64 2 1/3)) (cbrt.f64 (+.f64 u -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 u) 2)) (+.f64 (cbrt.f64 (+.f64 u -1)) (pow.f64 (-.f64 1 u) (+.f64 2 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (pow.f64 u 3) -1) (fma.f64 u u (+.f64 1 u))) (*.f64 (fma.f64 u u (+.f64 1 u)) (*.f64 (pow.f64 (-.f64 1 u) 2) (-.f64 1 (pow.f64 u 3))))) (pow.f64 (fma.f64 u u (+.f64 1 u)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 1 (pow.f64 u 3)) (fma.f64 u u (+.f64 1 u))) (*.f64 (neg.f64 (fma.f64 u u (+.f64 1 u))) (*.f64 (pow.f64 (-.f64 1 u) 2) (-.f64 1 (pow.f64 u 3))))) (*.f64 (neg.f64 (fma.f64 u u (+.f64 1 u))) (fma.f64 u u (+.f64 1 u))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (pow.f64 (-.f64 1 u) 2) (-.f64 1 (pow.f64 u 3))) (neg.f64 (fma.f64 u u (+.f64 1 u)))) (*.f64 (fma.f64 u u (+.f64 1 u)) (-.f64 1 (pow.f64 u 3)))) (*.f64 (fma.f64 u u (+.f64 1 u)) (neg.f64 (fma.f64 u u (+.f64 1 u)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (pow.f64 (-.f64 1 u) 2) (-.f64 1 (pow.f64 u 3))) (fma.f64 u u (+.f64 1 u))) (*.f64 (fma.f64 u u (+.f64 1 u)) (+.f64 (pow.f64 u 3) -1))) (pow.f64 (fma.f64 u u (+.f64 1 u)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 (-.f64 1 (pow.f64 u 3)) 3) (neg.f64 (fma.f64 u u (+.f64 1 u)))) (*.f64 (pow.f64 (fma.f64 u u (+.f64 1 u)) 3) (-.f64 1 (pow.f64 u 3)))) (*.f64 (pow.f64 (fma.f64 u u (+.f64 1 u)) 3) (neg.f64 (fma.f64 u u (+.f64 1 u)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 (-.f64 1 (pow.f64 u 3)) 3) (fma.f64 u u (+.f64 1 u))) (*.f64 (pow.f64 (fma.f64 u u (+.f64 1 u)) 3) (+.f64 (pow.f64 u 3) -1))) (*.f64 (pow.f64 (fma.f64 u u (+.f64 1 u)) 3) (fma.f64 u u (+.f64 1 u))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 3) -1)) (neg.f64 (+.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 2) (+.f64 1 (+.f64 (pow.f64 (-.f64 1 u) 3) u)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 3) -1) (+.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 2) (+.f64 1 (+.f64 (pow.f64 (-.f64 1 u) 3) u))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 3) -1) 1) (+.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 2) (+.f64 1 (+.f64 (pow.f64 (-.f64 1 u) 3) u))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 3) -1) (+.f64 1 (-.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 2) (neg.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (pow.f64 u 3) -1) (pow.f64 (fma.f64 u u (+.f64 1 u)) 3)) (*.f64 (fma.f64 u u (+.f64 1 u)) (pow.f64 (-.f64 1 (pow.f64 u 3)) 3))) (*.f64 (fma.f64 u u (+.f64 1 u)) (pow.f64 (fma.f64 u u (+.f64 1 u)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 1 (pow.f64 u 3)) (pow.f64 (fma.f64 u u (+.f64 1 u)) 3)) (*.f64 (neg.f64 (fma.f64 u u (+.f64 1 u))) (pow.f64 (-.f64 1 (pow.f64 u 3)) 3))) (*.f64 (neg.f64 (fma.f64 u u (+.f64 1 u))) (pow.f64 (fma.f64 u u (+.f64 1 u)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (pow.f64 (+.f64 u -1) 3) (-.f64 1 u)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 1 (pow.f64 (+.f64 u -1) 3)) u))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 1 (+.f64 (pow.f64 (-.f64 1 u) 3) u)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 u) (+.f64 (pow.f64 (-.f64 1 u) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u)) (cbrt.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 u)) (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u) 4))) 2) (+.f64 u -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 (+.f64 u -1) 3) (+.f64 u -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 1 u) 2) (-.f64 1 u) (+.f64 u -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 u) (pow.f64 (-.f64 1 u) 2) (+.f64 u -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 u -1)) (cbrt.f64 (pow.f64 (-.f64 1 u) 2)) (pow.f64 (-.f64 1 u) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 u -1) (pow.f64 (-.f64 1 u) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -1 (+.f64 (pow.f64 (-.f64 1 u) 3) u))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 1 (+.f64 (pow.f64 (-.f64 1 u) 3) u))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (-.f64 1 u) (pow.f64 (-.f64 1 u) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 1 u) 2)) (cbrt.f64 (+.f64 u -1)) (pow.f64 (-.f64 1 u) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 u -1) 1 (pow.f64 (-.f64 1 u) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 u 3) -1) (/.f64 1 (fma.f64 u u (+.f64 1 u))) (pow.f64 (-.f64 1 u) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 u u)) (cbrt.f64 u) (+.f64 (pow.f64 (-.f64 1 u) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 u 1 (+.f64 (pow.f64 (-.f64 1 u) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 u) (cbrt.f64 (*.f64 u u)) (+.f64 (pow.f64 (-.f64 1 u) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 u (+.f64 (pow.f64 (-.f64 1 u) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 (pow.f64 (-.f64 1 u) 3) u) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 1 u) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (-.f64 1 u) 2)) (+.f64 u -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 1 u) 3) 1 (+.f64 u -1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (-.f64 1 u) 2) (*.f64 (pow.f64 (-.f64 1 u) 2) (neg.f64 u)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (-.f64 1 u) 2) (neg.f64 u)) (pow.f64 (-.f64 1 u) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 u) (*.f64 (+.f64 u -1) u)) (pow.f64 (-.f64 1 u) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (-.f64 1 u) 2) (*.f64 (-.f64 1 u) (*.f64 (+.f64 u -1) u)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (-.f64 1 u) 3) (*.f64 (pow.f64 (-.f64 1 u) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (-.f64 1 u) 3) 0) (pow.f64 (-.f64 1 u) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 u -1) u) (-.f64 1 u)) (pow.f64 (-.f64 1 u) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (-.f64 1 u) 2) (*.f64 (*.f64 (+.f64 u -1) u) (-.f64 1 u)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (-.f64 1 u) 2) (*.f64 (*.f64 (pow.f64 (-.f64 1 u) 2) (neg.f64 u)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (-.f64 1 u) 3) (*.f64 0 (pow.f64 (-.f64 1 u) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (-.f64 1 u) 3)) (pow.f64 (-.f64 1 u) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 u -1) u) (+.f64 (-.f64 1 u) (*.f64 (pow.f64 (-.f64 1 u) 2) (neg.f64 u))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 u) (+.f64 (*.f64 (+.f64 u -1) u) (*.f64 (pow.f64 (-.f64 1 u) 2) (neg.f64 u))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (pow.f64 (+.f64 u -1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 u) (pow.f64 (-.f64 1 u) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 u) 2) (-.f64 1 u))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 u)) (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u) 4))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (+.f64 u -1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (-.f64 1 u) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 u) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u) 4))) 2) (cbrt.f64 (-.f64 1 u)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 u -1) 3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (-.f64 1 u) 2)) (+.f64 u -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 u -1) (neg.f64 (pow.f64 (-.f64 1 u) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 1 u) 2) (-.f64 1 (pow.f64 u 3))) (/.f64 1 (fma.f64 u u (+.f64 1 u))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (-.f64 1 u) 2) 1) (-.f64 1 u))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 u 3)) 1) (/.f64 (pow.f64 (-.f64 1 u) 2) (fma.f64 u u (+.f64 1 u))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 (pow.f64 u 3)) 3) (pow.f64 (/.f64 1 (fma.f64 u u (+.f64 1 u))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 u -1) (pow.f64 (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 u) 2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 u) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (-.f64 1 u) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 u) 2)) (pow.f64 (-.f64 1 u) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 (pow.f64 u 3)) 3) (/.f64 1 (pow.f64 (fma.f64 u u (+.f64 1 u)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (-.f64 1 u) 2) (cbrt.f64 (fma.f64 u u (+.f64 1 u)))) (/.f64 (-.f64 1 (pow.f64 u 3)) (cbrt.f64 (pow.f64 (fma.f64 u u (+.f64 1 u)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 u 3)) (cbrt.f64 (fma.f64 u u (+.f64 1 u)))) (/.f64 (pow.f64 (-.f64 1 u) 2) (cbrt.f64 (pow.f64 (fma.f64 u u (+.f64 1 u)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 1 (pow.f64 u 3)) 3) (pow.f64 (fma.f64 u u (+.f64 1 u)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 u) (pow.f64 (+.f64 (pow.f64 u 3) -1) 2)) (pow.f64 (fma.f64 u u (+.f64 1 u)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 1 u) 2) (+.f64 (pow.f64 u 3) -1)) (neg.f64 (fma.f64 u u (+.f64 1 u))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 1 u) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 u 3) -1) 2) (-.f64 1 u)) (pow.f64 (fma.f64 u u (+.f64 1 u)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 u 3))) (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u) 4))) 2)) (cbrt.f64 (fma.f64 u u (+.f64 1 u))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 u 3) -1) (pow.f64 (-.f64 1 u) 2)) (neg.f64 (fma.f64 u u (+.f64 1 u))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 1 (pow.f64 u 3)) 3) 1) (pow.f64 (fma.f64 u u (+.f64 1 u)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 (-.f64 1 u) 2) (-.f64 1 (pow.f64 u 3))) (cbrt.f64 (fma.f64 u u (+.f64 1 u)))) (cbrt.f64 (pow.f64 (fma.f64 u u (+.f64 1 u)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 (pow.f64 u 3) -1) 3) (pow.f64 (neg.f64 (fma.f64 u u (+.f64 1 u))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 u) (-.f64 1 (pow.f64 u 3))) (-.f64 1 (pow.f64 u 3))) (pow.f64 (fma.f64 u u (+.f64 1 u)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 u) (-.f64 1 (pow.f64 u 3))) (+.f64 (pow.f64 u 3) -1)) (*.f64 (fma.f64 u u (+.f64 1 u)) (neg.f64 (fma.f64 u u (+.f64 1 u)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 (pow.f64 u 3) -1) 3) (*.f64 (pow.f64 (fma.f64 u u (+.f64 1 u)) 2) (neg.f64 (fma.f64 u u (+.f64 1 u)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 u 3)) (*.f64 (-.f64 1 u) (-.f64 1 (pow.f64 u 3)))) (pow.f64 (fma.f64 u u (+.f64 1 u)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 (pow.f64 u 3) -1) 3) (*.f64 (neg.f64 (fma.f64 u u (+.f64 1 u))) (pow.f64 (fma.f64 u u (+.f64 1 u)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 u 3) -1) (*.f64 (-.f64 1 u) (-.f64 1 (pow.f64 u 3)))) (*.f64 (neg.f64 (fma.f64 u u (+.f64 1 u))) (fma.f64 u u (+.f64 1 u))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (-.f64 1 u) 2) (-.f64 1 (pow.f64 u 3)))) (neg.f64 (fma.f64 u u (+.f64 1 u))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (-.f64 1 (pow.f64 u 3)) 3)) (neg.f64 (pow.f64 (fma.f64 u u (+.f64 1 u)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 1 u) 2) (-.f64 1 (pow.f64 u 3))) (fma.f64 u u (+.f64 1 u)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 u) (*.f64 (-.f64 1 u) (-.f64 1 (pow.f64 u 3)))) (fma.f64 u u (+.f64 1 u)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 u) (-.f64 1 (pow.f64 u 3))) (-.f64 1 u)) (fma.f64 u u (+.f64 1 u)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 (-.f64 1 u) 2) (-.f64 1 (pow.f64 u 3))) 1) (fma.f64 u u (+.f64 1 u)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 (-.f64 1 u) 2) (-.f64 1 (pow.f64 u 3))) 1) (fma.f64 u u (+.f64 1 u)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 u) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (-.f64 1 u) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 u) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 u) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 u) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (+.f64 u -1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (-.f64 1 u) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 u)) (cbrt.f64 (pow.f64 (-.f64 1 u) (+.f64 2 3))) (*.f64 (pow.f64 (-.f64 1 u) 2) (neg.f64 u)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 u -1) (+.f64 u -1) (*.f64 (pow.f64 (-.f64 1 u) 2) (neg.f64 u)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 u -1)) (pow.f64 (cbrt.f64 (+.f64 u -1)) (+.f64 2 3)) (*.f64 (pow.f64 (-.f64 1 u) 2) (neg.f64 u)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 1 u) 4)) (cbrt.f64 (pow.f64 (-.f64 1 u) 2)) (*.f64 (pow.f64 (-.f64 1 u) 2) (neg.f64 u)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 u) (-.f64 1 u) (*.f64 (pow.f64 (-.f64 1 u) 2) (neg.f64 u)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 1 u) 2)) (cbrt.f64 (pow.f64 (-.f64 1 u) 4)) (*.f64 (pow.f64 (-.f64 1 u) 2) (neg.f64 u)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (-.f64 1 u) 2) (*.f64 (pow.f64 (-.f64 1 u) 2) (neg.f64 u)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 1 u) 2) 1 (*.f64 (pow.f64 (-.f64 1 u) 2) (neg.f64 u)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) 1/6) (*.f64 -1/6 u))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/6 u) (+.f64 1/6 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) -1)) (*.f64 -1/6 u))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6) (*.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6) 0) (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u)) 1) (*.f64 1/6 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (fma.f64 u -1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u)) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) -1) -1/6) (*.f64 -1/6 u))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6) (*.f64 0 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6)) (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 u -1/6 1/6) (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/6 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/6 u) (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/6 u) (*.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) -1) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) -1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) 2)) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/6) (*.f64 (cbrt.f64 1/36) (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/36) (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (cbrt.f64 -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) 2)) -1/6) (cbrt.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6)) (cbrt.f64 (pow.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6) 2)) (cbrt.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -1/216 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))) (cbrt.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) (cbrt.f64 -1/6)) (cbrt.f64 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/36) (*.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) (cbrt.f64 -1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)) 2)) (cbrt.f64 (*.f64 -1/216 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/36) (+.f64 (*.f64 (+.f64 u -1) (cbrt.f64 -1/6)) (*.f64 (pow.f64 (-.f64 1 u) 3) (cbrt.f64 -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/36) (+.f64 (*.f64 (pow.f64 (-.f64 1 u) 3) (cbrt.f64 -1/6)) (*.f64 (+.f64 u -1) (cbrt.f64 -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/6 (+.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 3) -1)) (+.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 2) (+.f64 1 (+.f64 (pow.f64 (-.f64 1 u) 3) u))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 3) -1) -1/6) (+.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 2) (+.f64 1 (+.f64 (pow.f64 (-.f64 1 u) 3) u))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u)) 3) (pow.f64 1/6 3)) (+.f64 (*.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u)) (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u))) (-.f64 (*.f64 1/6 1/6) (*.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u)) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 1 u) 3) -1/6 (fma.f64 u -1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/6) (*.f64 (cbrt.f64 1/36) (pow.f64 (-.f64 1 u) 3)) (fma.f64 u -1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (-.f64 1 u) 3) (cbrt.f64 -1/6)) (cbrt.f64 1/36) (fma.f64 u -1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 u) (cbrt.f64 -1/6)) (pow.f64 (*.f64 (-.f64 1 u) (cbrt.f64 -1/6)) 2) (fma.f64 u -1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/6 (-.f64 1 u)) (pow.f64 (-.f64 1 u) 2) (fma.f64 u -1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 1 u) 2) (*.f64 -1/6 (-.f64 1 u)) (fma.f64 u -1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) u) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) u) -1/6 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/6 (+.f64 u -1) (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 u -1) (cbrt.f64 -1/6)) (cbrt.f64 1/36) (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 u -1/6 1/6)) (cbrt.f64 (pow.f64 (fma.f64 u -1/6 1/6) 2)) (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 u -1) -1/6 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 u -1)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 u) 2)) -1/6) (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/6) (*.f64 (cbrt.f64 1/36) (+.f64 u -1)) (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 u) (*.f64 -1/6 (pow.f64 (-.f64 1 u) 2)) (fma.f64 u -1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 2)) (-.f64 1 u) (fma.f64 u -1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (fma.f64 u -1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 u -1/6 1/6) (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -1/216 (+.f64 u -1))) (cbrt.f64 (pow.f64 (-.f64 1 u) 2)) (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) 1 (fma.f64 u -1/6 1/6))))))"]],"rules":[["egg-rr",65],["egg-rr",72],["egg-rr",84]],"time":39.934814453125,"type":"rewrite"},{"count":[[257,248]],"inputs":[["(*.f64 -2 u)","(+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -2 u))","(+.f64 (*.f64 3 (pow.f64 u 2)) (+.f64 (*.f64 -2 u) (*.f64 -1 (pow.f64 u 3))))","(+.f64 (*.f64 3 (pow.f64 u 2)) (+.f64 (*.f64 -2 u) (*.f64 -1 (pow.f64 u 3))))","(*.f64 -1 (pow.f64 u 3))","(+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))","(+.f64 (*.f64 3 (pow.f64 u 2)) (+.f64 (*.f64 -2 u) (*.f64 -1 (pow.f64 u 3))))","(+.f64 (*.f64 3 (pow.f64 u 2)) (+.f64 (*.f64 -2 u) (*.f64 -1 (pow.f64 u 3))))","(*.f64 -1 (pow.f64 u 3))","(+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))","(+.f64 (*.f64 3 (pow.f64 u 2)) (+.f64 (*.f64 -2 u) (*.f64 -1 (pow.f64 u 3))))","(+.f64 (*.f64 3 (pow.f64 u 2)) (+.f64 (*.f64 -2 u) (*.f64 -1 (pow.f64 u 3))))","1","(+.f64 (*.f64 -3 u) 1)","(+.f64 (*.f64 -3 u) (+.f64 1 (*.f64 3 (pow.f64 u 2))))","(+.f64 (*.f64 -3 u) (+.f64 1 (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))))","(*.f64 -1 (pow.f64 u 3))","(+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))","(+.f64 (*.f64 -3 u) (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3))))","(+.f64 1 (+.f64 (*.f64 -3 u) (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))))","(*.f64 -1 (pow.f64 u 3))","(+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))","(+.f64 (*.f64 -3 u) (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3))))","(+.f64 1 (+.f64 (*.f64 -3 u) (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))))","(*.f64 1/3 u)","(+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2)))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(*.f64 1/6 (pow.f64 u 3))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (*.f64 -1/2 (pow.f64 u 2)))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(*.f64 1/6 (pow.f64 u 3))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (*.f64 -1/2 (pow.f64 u 2)))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -2 u)","(+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -2 u))","(*.f64 u (+.f64 (*.f64 3 u) -2))","(+.f64 (*.f64 3 (pow.f64 u 2)) (+.f64 (*.f64 -2 u) (*.f64 -1 (pow.f64 u 3))))","(+.f64 (*.f64 (*.f64 u u) (-.f64 3 u)) (*.f64 -2 u))","(+.f64 (*.f64 3 (pow.f64 u 2)) (+.f64 (*.f64 -2 u) (*.f64 -1 (pow.f64 u 3))))","(+.f64 (*.f64 (*.f64 u u) (-.f64 3 u)) (*.f64 -2 u))","(*.f64 -1 (pow.f64 u 3))","(neg.f64 (pow.f64 u 3))","(+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))","(*.f64 (*.f64 u u) (-.f64 3 u))","(+.f64 (*.f64 3 (pow.f64 u 2)) (+.f64 (*.f64 -2 u) (*.f64 -1 (pow.f64 u 3))))","(+.f64 (*.f64 (*.f64 u u) (-.f64 3 u)) (*.f64 -2 u))","(+.f64 (*.f64 3 (pow.f64 u 2)) (+.f64 (*.f64 -2 u) (*.f64 -1 (pow.f64 u 3))))","(+.f64 (*.f64 (*.f64 u u) (-.f64 3 u)) (*.f64 -2 u))","(*.f64 -1 (pow.f64 u 3))","(neg.f64 (pow.f64 u 3))","(+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))","(*.f64 (*.f64 u u) (-.f64 3 u))","(+.f64 (*.f64 3 (pow.f64 u 2)) (+.f64 (*.f64 -2 u) (*.f64 -1 (pow.f64 u 3))))","(+.f64 (*.f64 (*.f64 u u) (-.f64 3 u)) (*.f64 -2 u))","(+.f64 (*.f64 3 (pow.f64 u 2)) (+.f64 (*.f64 -2 u) (*.f64 -1 (pow.f64 u 3))))","(+.f64 (*.f64 (*.f64 u u) (-.f64 3 u)) (*.f64 -2 u))","1","(+.f64 (*.f64 -3 u) 1)","(fma.f64 -3 u 1)","(+.f64 (*.f64 -3 u) (+.f64 1 (*.f64 3 (pow.f64 u 2))))","(+.f64 1 (*.f64 u (+.f64 (*.f64 3 u) -3)))","(+.f64 (*.f64 -3 u) (+.f64 1 (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))))","(+.f64 (fma.f64 -3 u 1) (*.f64 (*.f64 u u) (-.f64 3 u)))","(*.f64 -1 (pow.f64 u 3))","(neg.f64 (pow.f64 u 3))","(+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))","(*.f64 (*.f64 u u) (-.f64 3 u))","(+.f64 (*.f64 -3 u) (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3))))","(fma.f64 -3 u (*.f64 (*.f64 u u) (-.f64 3 u)))","(+.f64 1 (+.f64 (*.f64 -3 u) (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))))","(+.f64 (fma.f64 -3 u 1) (*.f64 (*.f64 u u) (-.f64 3 u)))","(*.f64 -1 (pow.f64 u 3))","(neg.f64 (pow.f64 u 3))","(+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))","(*.f64 (*.f64 u u) (-.f64 3 u))","(+.f64 (*.f64 -3 u) (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3))))","(fma.f64 -3 u (*.f64 (*.f64 u u) (-.f64 3 u)))","(+.f64 1 (+.f64 (*.f64 -3 u) (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))))","(+.f64 (fma.f64 -3 u 1) (*.f64 (*.f64 u u) (-.f64 3 u)))","(*.f64 1/3 u)","(+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2)))","(*.f64 u (+.f64 1/3 (*.f64 u -1/2)))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(fma.f64 1/6 (pow.f64 u 3) (*.f64 u (+.f64 1/3 (*.f64 u -1/2))))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(fma.f64 1/6 (pow.f64 u 3) (*.f64 u (+.f64 1/3 (*.f64 u -1/2))))","(*.f64 1/6 (pow.f64 u 3))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (*.f64 -1/2 (pow.f64 u 2)))","(*.f64 (*.f64 u u) (+.f64 (*.f64 u 1/6) -1/2))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(fma.f64 1/6 (pow.f64 u 3) (*.f64 u (+.f64 1/3 (*.f64 u -1/2))))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(fma.f64 1/6 (pow.f64 u 3) (*.f64 u (+.f64 1/3 (*.f64 u -1/2))))","(*.f64 1/6 (pow.f64 u 3))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (*.f64 -1/2 (pow.f64 u 2)))","(*.f64 (*.f64 u u) (+.f64 (*.f64 u 1/6) -1/2))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(fma.f64 1/6 (pow.f64 u 3) (*.f64 u (+.f64 1/3 (*.f64 u -1/2))))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(fma.f64 1/6 (pow.f64 u 3) (*.f64 u (+.f64 1/3 (*.f64 u -1/2))))"]],"time":151.6201171875,"type":"simplify"},{"compiler":[[15421,9278]],"time":140.77392578125,"type":"eval"},{"alts":[["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (/.f64 (/.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (cbrt.f64 (sin.f64 normAngle))) (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 normAngle))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 normAngle))) 2) 2)) n1_i))","fresh",0.9255990787498465],["(/.f64 (+.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (*.f64 n1_i (sin.f64 (*.f64 u normAngle)))) (sin.f64 normAngle))","fresh",18.732089390540903],["(+.f64 (*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2))) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","next",0.33324973559159016],["(+.f64 (*.f64 (*.f64 (sin.f64 (/.f64 (/.f64 (*.f64 normAngle (-.f64 1 (pow.f64 u 3))) (cbrt.f64 (fma.f64 u u (+.f64 1 u)))) (pow.f64 (cbrt.f64 (fma.f64 u u (+.f64 1 u))) 2))) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","fresh",0.6347138344330442],["(+.f64 (*.f64 (+.f64 (*.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 normAngle normAngle)) (-.f64 1 u)) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","done",0.22916237994555383],["(+.f64 (fma.f64 -1/2 (*.f64 (*.f64 u u) (*.f64 n0_i (*.f64 normAngle normAngle))) (-.f64 n0_i (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle)))) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","fresh",6.251527139626212],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (fma.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) (*.f64 normAngle normAngle) u) n1_i))","fresh",0.4173707610492675],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (*.f64 normAngle (-.f64 1 (pow.f64 u 3))) (/.f64 1 (fma.f64 u u (+.f64 1 u))))) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","fresh",0.4693810832760104]],"compiler":[[44,28],[22,15],[51,34],[59,40],[47,33],[50,30],[32,22],[50,34],[44,28],[22,15],[51,34],[59,40],[50,30],[32,22],[50,34]],"count":[[315,8]],"kept":[{"done":[0,0],"fresh":[7,7],"new":[307,0],"picked":[1,1]}],"min-error":[0],"time":195.068115234375,"type":"prune"},{"compiler":[[238,138]],"locations":[["(*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)))",0.3125,true],["(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))",0.328125,true],["(pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)",0.42806625976844204,true],["(/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))",8.346979362618086,false]],"time":50.640869140625,"type":"localize"},{"count":[[3,72]],"series":[["(*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)))","normAngle","-inf",0.380859375],["(*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)))","normAngle","inf",1.031982421875],["(*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)))","normAngle","0",0.509033203125],["(*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)))","u","-inf",0.340087890625],["(*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)))","u","inf",0.9990234375],["(*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)))","u","0",0.281005859375],["(*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)))","n0_i","-inf",0.286865234375],["(*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)))","n0_i","inf",0.259765625],["(*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)))","n0_i","0",1.302001953125],["(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","normAngle","-inf",0.171142578125],["(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","normAngle","inf",0.154052734375],["(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","normAngle","0",0.27392578125],["(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","u","-inf",0.158935546875],["(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","u","inf",0.174072265625],["(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","u","0",0.18896484375],["(pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)","normAngle","-inf",0.4150390625],["(pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)","normAngle","inf",0.431884765625],["(pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)","normAngle","0",0.992919921875],["(pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)","u","-inf",0.418212890625],["(pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)","u","inf",0.405029296875],["(pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)","u","0",0.588134765625]],"time":10.14794921875,"type":"series"},{"count":[[3,216]],"inputs":[["(pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2) 0) (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2) (*.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)) (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2) (*.f64 0 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 4)) (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3)) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 4)) (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) (+.f64 2/3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (sin.f64 normAngle)) (/.f64 1 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2)) (sin.f64 (*.f64 (-.f64 1 u) normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 4)) (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 4))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 normAngle) -2) (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) (+.f64 2/3 1)) (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 normAngle)) (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3)) (+.f64 2 3)) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 normAngle) -2)) (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3)) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (*.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (sin.f64 normAngle)) (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (*.f64 (/.f64 -1 (sin.f64 normAngle)) (/.f64 -1 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) 1) (*.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2)) (/.f64 1 (neg.f64 (pow.f64 (sin.f64 normAngle) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2)) (sin.f64 normAngle)) (/.f64 -1 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (neg.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) (+.f64 2/3 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2)) (sin.f64 normAngle)) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (sin.f64 normAngle)) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2)) (neg.f64 (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 4)) (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3)) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 4)) (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (cbrt.f64 (sin.f64 normAngle)))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (neg.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2))) (neg.f64 (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2)) (sin.f64 normAngle))) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (sin.f64 normAngle))) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle)))) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (sin.f64 normAngle)) 1) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (sin.f64 normAngle)) -1) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (sin.f64 normAngle)) (pow.f64 (sin.f64 normAngle) -1/3)) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle))) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3)) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 4))) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (cbrt.f64 (sin.f64 normAngle))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 4))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) (+.f64 2/3 1))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) (+.f64 2/3 1))) (cbrt.f64 (neg.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2)) 1) (neg.f64 (pow.f64 (sin.f64 normAngle) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2)) (sin.f64 normAngle)) 1) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (sin.f64 normAngle)) (cbrt.f64 (sin.f64 normAngle))) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (sin.f64 normAngle)) -1) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (sin.f64 normAngle)) (pow.f64 (sin.f64 normAngle) 2/3)) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (sin.f64 normAngle)) 1) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2)) (sin.f64 normAngle)) -1) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2)) (sin.f64 normAngle)) (cbrt.f64 (neg.f64 (sin.f64 normAngle)))) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2)) (sin.f64 normAngle)) 1) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2)) (sin.f64 normAngle)) (cbrt.f64 (sin.f64 normAngle))) (neg.f64 (pow.f64 (sin.f64 normAngle) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (cbrt.f64 (sin.f64 normAngle))) 3) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle))) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle)))) (*.f64 (pow.f64 (sin.f64 normAngle) 2/3) (pow.f64 (sin.f64 normAngle) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle))) (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (*.f64 (pow.f64 (sin.f64 normAngle) 2/3) (neg.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle))) (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (*.f64 (pow.f64 (sin.f64 normAngle) 2/3) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle))) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3))) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3)) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle)))) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3)) (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (*.f64 (cbrt.f64 (sin.f64 normAngle)) (neg.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3)) (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (*.f64 (cbrt.f64 (sin.f64 normAngle)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3)) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3))) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle)))) (*.f64 (sin.f64 normAngle) (pow.f64 (sin.f64 normAngle) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3))) (*.f64 (sin.f64 normAngle) (cbrt.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle)))) (*.f64 (neg.f64 (sin.f64 normAngle)) (pow.f64 (sin.f64 normAngle) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3))) (*.f64 (neg.f64 (sin.f64 normAngle)) (cbrt.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2)) 1) (*.f64 (neg.f64 (pow.f64 (sin.f64 normAngle) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (neg.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2))) (*.f64 1 (neg.f64 (pow.f64 (sin.f64 normAngle) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2)) (sin.f64 normAngle))) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 0) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) (*.f64 0 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (sin.f64 normAngle))) (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 normAngle) -1/3) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3) (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (/.f64 -1 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 normAngle)) (sin.f64 (*.f64 (-.f64 1 u) normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) (+.f64 2/3 1))) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3)) 4) (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 4))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3)) (pow.f64 (sin.f64 normAngle) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (sin.f64 normAngle)) (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (sin.f64 normAngle)) (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3)) 4)) (cbrt.f64 (cbrt.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3)) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle))) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3)) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (cbrt.f64 (sin.f64 normAngle)))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 normAngle) -1/3) (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3) (cbrt.f64 (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))))) (cbrt.f64 (neg.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle))) 1) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3)) 1) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (cbrt.f64 (sin.f64 normAngle))) (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3)) (cbrt.f64 (neg.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) -1) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3)) (cbrt.f64 (cbrt.f64 (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3)) 1) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle))) 1) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (cbrt.f64 (sin.f64 normAngle))) (neg.f64 (pow.f64 (sin.f64 normAngle) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (cbrt.f64 (sin.f64 normAngle)))) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (cbrt.f64 (sin.f64 normAngle)))) (neg.f64 (pow.f64 (sin.f64 normAngle) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (cbrt.f64 (sin.f64 normAngle))) (cbrt.f64 (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))))) (neg.f64 (pow.f64 (sin.f64 normAngle) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (cbrt.f64 (sin.f64 normAngle))) (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle)))) (neg.f64 (pow.f64 (sin.f64 normAngle) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3))) (cbrt.f64 (neg.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) 0) (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) (*.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))) (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) (*.f64 0 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 n0_i) (/.f64 (*.f64 (pow.f64 n0_i 2/3) (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3) (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3) n0_i) (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))) (*.f64 (pow.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) 2/3) (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3)) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 4))) (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (*.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3) n0_i))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) 2/3) (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3)) (cbrt.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 n0_i 2/3) (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) (cbrt.f64 n0_i))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 4))) (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))) (pow.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 n0_i (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) n0_i)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2) (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))) (pow.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) 2/3) (cbrt.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 4))) (*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) 2/3) (cbrt.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2) (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3)) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (cbrt.f64 (sin.f64 normAngle)))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 n0_i (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle)))) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 n0_i (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 n0_i (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3) n0_i) (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3) n0_i) (cbrt.f64 (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))))) (cbrt.f64 (neg.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3) (*.f64 n0_i (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (sin.f64 normAngle))) n0_i) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (pow.f64 (sin.f64 normAngle) 2/3)) n0_i) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) n0_i) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (cbrt.f64 (sin.f64 normAngle))) (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (*.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3) n0_i)) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (*.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3) n0_i)) (cbrt.f64 (neg.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 n0_i (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2/3)) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (*.f64 n0_i (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))))) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (cbrt.f64 (sin.f64 normAngle))) (*.f64 n0_i (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))))) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 n0_i (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3)) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 n0_i (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)))) (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2/3) (cbrt.f64 (sin.f64 normAngle)))) (pow.f64 (sin.f64 normAngle) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) n0_i))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 n0_i (neg.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle)) 3))))))"]],"rules":[["egg-rr",59],["egg-rr",63],["egg-rr",94]],"time":43.239013671875,"type":"rewrite"},{"count":[[288,260]],"inputs":[["1","(+.f64 1 (*.f64 -2 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))))","(+.f64 1 (+.f64 (*.f64 -2 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))) (*.f64 (+.f64 (*.f64 -1 (pow.f64 normAngle 2)) (/.f64 (*.f64 (pow.f64 (cos.f64 normAngle) 2) (pow.f64 normAngle 2)) (pow.f64 (sin.f64 normAngle) 2))) (pow.f64 u 2))))","(+.f64 1 (+.f64 (*.f64 -2 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))) (+.f64 (*.f64 (+.f64 (/.f64 (*.f64 (cos.f64 normAngle) (pow.f64 normAngle 3)) (sin.f64 normAngle)) (*.f64 1/3 (/.f64 (*.f64 (cos.f64 normAngle) (pow.f64 normAngle 3)) (sin.f64 normAngle)))) (pow.f64 u 3)) (*.f64 (+.f64 (*.f64 -1 (pow.f64 normAngle 2)) (/.f64 (*.f64 (pow.f64 (cos.f64 normAngle) 2) (pow.f64 normAngle 2)) (pow.f64 (sin.f64 normAngle) 2))) (pow.f64 u 2)))))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(pow.f64 (-.f64 1 u) 2)","(+.f64 (*.f64 2 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (*.f64 (-.f64 1 u) (pow.f64 normAngle 2)))) (pow.f64 (-.f64 1 u) 2))","(+.f64 (*.f64 2 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (*.f64 (-.f64 1 u) (pow.f64 normAngle 2)))) (+.f64 (*.f64 (+.f64 (pow.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) 2) (*.f64 2 (*.f64 (-.f64 1 u) (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u))))))) (pow.f64 normAngle 4)) (pow.f64 (-.f64 1 u) 2)))","(+.f64 (*.f64 2 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (*.f64 (-.f64 1 u) (pow.f64 normAngle 2)))) (+.f64 (*.f64 (+.f64 (pow.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) 2) (*.f64 2 (*.f64 (-.f64 1 u) (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u))))))) (pow.f64 normAngle 4)) (+.f64 (pow.f64 (-.f64 1 u) 2) (*.f64 (+.f64 (*.f64 2 (*.f64 (-.f64 (*.f64 -1/5040 (pow.f64 (-.f64 1 u) 7)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u))))) (+.f64 (*.f64 1/120 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 -1/5040 (-.f64 1 u))))) (-.f64 1 u))) (*.f64 2 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u))))))) (pow.f64 normAngle 6)))))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","1","(+.f64 1 (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))) (*.f64 -1/2 (*.f64 (pow.f64 u 2) (pow.f64 normAngle 2)))))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))) (+.f64 (*.f64 1/6 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3))) (sin.f64 normAngle))) (*.f64 -1/2 (*.f64 (pow.f64 u 2) (pow.f64 normAngle 2))))))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(-.f64 1 u)","(-.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (pow.f64 normAngle 2))) u)","(-.f64 (+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (pow.f64 normAngle 2)) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u)))) (pow.f64 normAngle 4)))) u)","(-.f64 (+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (pow.f64 normAngle 2)) (+.f64 (*.f64 (-.f64 (*.f64 -1/5040 (pow.f64 (-.f64 1 u) 7)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u))))) (+.f64 (*.f64 1/120 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 -1/5040 (-.f64 1 u))))) (pow.f64 normAngle 6)) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u)))) (pow.f64 normAngle 4))))) u)","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","n0_i","(+.f64 n0_i (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 u 2) (*.f64 n0_i (pow.f64 normAngle 2)))) (+.f64 n0_i (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle)))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 (pow.f64 u 3) (*.f64 n0_i (pow.f64 normAngle 3)))) (sin.f64 normAngle))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 u 2) (*.f64 n0_i (pow.f64 normAngle 2)))) (+.f64 n0_i (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle))))))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(*.f64 (-.f64 1 u) n0_i)","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))) (pow.f64 normAngle 2)) (*.f64 (-.f64 1 u) n0_i))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))) (pow.f64 normAngle 2)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 u) n0_i)) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i)))))) (pow.f64 normAngle 4)) (*.f64 (-.f64 1 u) n0_i)))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))) (pow.f64 normAngle 2)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 u) n0_i)) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i)))))) (pow.f64 normAngle 4)) (+.f64 (*.f64 (-.f64 1 u) n0_i) (*.f64 (-.f64 (*.f64 -1/5040 (*.f64 (pow.f64 (-.f64 1 u) 7) n0_i)) (+.f64 (*.f64 -1/5040 (*.f64 (-.f64 1 u) n0_i)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 u) n0_i)) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))))))) (*.f64 1/120 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))))))) (pow.f64 normAngle 6)))))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -2 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))))","(+.f64 1 (/.f64 (*.f64 -2 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle))) (sin.f64 normAngle)))","(+.f64 1 (+.f64 (*.f64 -2 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))) (*.f64 (+.f64 (*.f64 -1 (pow.f64 normAngle 2)) (/.f64 (*.f64 (pow.f64 (cos.f64 normAngle) 2) (pow.f64 normAngle 2)) (pow.f64 (sin.f64 normAngle) 2))) (pow.f64 u 2))))","(+.f64 1 (fma.f64 -2 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle)) (*.f64 (-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 normAngle) normAngle) 2) (pow.f64 (sin.f64 normAngle) 2)) (*.f64 normAngle normAngle)) (*.f64 u u))))","(+.f64 1 (+.f64 (*.f64 -2 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))) (+.f64 (*.f64 (+.f64 (/.f64 (*.f64 (cos.f64 normAngle) (pow.f64 normAngle 3)) (sin.f64 normAngle)) (*.f64 1/3 (/.f64 (*.f64 (cos.f64 normAngle) (pow.f64 normAngle 3)) (sin.f64 normAngle)))) (pow.f64 u 3)) (*.f64 (+.f64 (*.f64 -1 (pow.f64 normAngle 2)) (/.f64 (*.f64 (pow.f64 (cos.f64 normAngle) 2) (pow.f64 normAngle 2)) (pow.f64 (sin.f64 normAngle) 2))) (pow.f64 u 2)))))","(+.f64 1 (fma.f64 -2 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle)) (fma.f64 (/.f64 (*.f64 4/3 (*.f64 (cos.f64 normAngle) (pow.f64 normAngle 3))) (sin.f64 normAngle)) (pow.f64 u 3) (*.f64 (-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 normAngle) normAngle) 2) (pow.f64 (sin.f64 normAngle) 2)) (*.f64 normAngle normAngle)) (*.f64 u u)))))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(pow.f64 (-.f64 1 u) 2)","(+.f64 (*.f64 2 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (*.f64 (-.f64 1 u) (pow.f64 normAngle 2)))) (pow.f64 (-.f64 1 u) 2))","(fma.f64 2 (*.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 (-.f64 1 u) (*.f64 normAngle normAngle))) (pow.f64 (-.f64 1 u) 2))","(+.f64 (*.f64 2 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (*.f64 (-.f64 1 u) (pow.f64 normAngle 2)))) (+.f64 (*.f64 (+.f64 (pow.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) 2) (*.f64 2 (*.f64 (-.f64 1 u) (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u))))))) (pow.f64 normAngle 4)) (pow.f64 (-.f64 1 u) 2)))","(fma.f64 2 (*.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 (-.f64 1 u) (*.f64 normAngle normAngle))) (fma.f64 (+.f64 (pow.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) 2) (*.f64 2 (*.f64 (-.f64 1 u) (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (fma.f64 -1/6 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 1/120 (-.f64 1 u))))))) (pow.f64 normAngle 4) (pow.f64 (-.f64 1 u) 2)))","(+.f64 (*.f64 2 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (*.f64 (-.f64 1 u) (pow.f64 normAngle 2)))) (+.f64 (*.f64 (+.f64 (pow.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) 2) (*.f64 2 (*.f64 (-.f64 1 u) (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u))))))) (pow.f64 normAngle 4)) (+.f64 (pow.f64 (-.f64 1 u) 2) (*.f64 (+.f64 (*.f64 2 (*.f64 (-.f64 (*.f64 -1/5040 (pow.f64 (-.f64 1 u) 7)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u))))) (+.f64 (*.f64 1/120 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 -1/5040 (-.f64 1 u))))) (-.f64 1 u))) (*.f64 2 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u))))))) (pow.f64 normAngle 6)))))","(+.f64 (fma.f64 2 (*.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 (-.f64 1 u) (*.f64 normAngle normAngle))) (fma.f64 (+.f64 (pow.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) 2) (*.f64 2 (*.f64 (-.f64 1 u) (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (fma.f64 -1/6 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 1/120 (-.f64 1 u))))))) (pow.f64 normAngle 4) (pow.f64 (-.f64 1 u) 2))) (*.f64 (*.f64 2 (+.f64 (*.f64 (-.f64 (*.f64 -1/5040 (pow.f64 (-.f64 1 u) 7)) (fma.f64 -1/6 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (fma.f64 -1/6 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 1/120 (-.f64 1 u)))) (fma.f64 1/120 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 -1/5040 (-.f64 1 u))))) (-.f64 1 u)) (*.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (fma.f64 -1/6 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 1/120 (-.f64 1 u))))))) (pow.f64 normAngle 6)))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","(/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 2) (pow.f64 (sin.f64 normAngle) 2))","1","(+.f64 1 (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))))","(-.f64 1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle)))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))) (*.f64 -1/2 (*.f64 (pow.f64 u 2) (pow.f64 normAngle 2)))))","(+.f64 (-.f64 1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))) (*.f64 -1/2 (pow.f64 (*.f64 u normAngle) 2)))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))) (+.f64 (*.f64 1/6 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3))) (sin.f64 normAngle))) (*.f64 -1/2 (*.f64 (pow.f64 u 2) (pow.f64 normAngle 2))))))","(+.f64 (/.f64 (+.f64 (*.f64 (neg.f64 (*.f64 u normAngle)) (cos.f64 normAngle)) (*.f64 1/6 (*.f64 (cos.f64 normAngle) (pow.f64 (*.f64 u normAngle) 3)))) (sin.f64 normAngle)) (+.f64 (*.f64 -1/2 (pow.f64 (*.f64 u normAngle) 2)) 1))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(-.f64 1 u)","(-.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (pow.f64 normAngle 2))) u)","(+.f64 (*.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 normAngle normAngle)) (-.f64 1 u))","(-.f64 (+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (pow.f64 normAngle 2)) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u)))) (pow.f64 normAngle 4)))) u)","(+.f64 (fma.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 normAngle normAngle) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (fma.f64 -1/6 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 1/120 (-.f64 1 u)))) (pow.f64 normAngle 4))) (-.f64 1 u))","(-.f64 (+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (pow.f64 normAngle 2)) (+.f64 (*.f64 (-.f64 (*.f64 -1/5040 (pow.f64 (-.f64 1 u) 7)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u))))) (+.f64 (*.f64 1/120 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 -1/5040 (-.f64 1 u))))) (pow.f64 normAngle 6)) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u)))) (pow.f64 normAngle 4))))) u)","(+.f64 (fma.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 normAngle normAngle) (fma.f64 (-.f64 (*.f64 -1/5040 (pow.f64 (-.f64 1 u) 7)) (fma.f64 -1/6 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (fma.f64 -1/6 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 1/120 (-.f64 1 u)))) (fma.f64 1/120 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 -1/5040 (-.f64 1 u))))) (pow.f64 normAngle 6) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (fma.f64 -1/6 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 1/120 (-.f64 1 u)))) (pow.f64 normAngle 4)))) (-.f64 1 u))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","n0_i","(+.f64 n0_i (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle))))","(-.f64 n0_i (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 u 2) (*.f64 n0_i (pow.f64 normAngle 2)))) (+.f64 n0_i (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle)))))","(fma.f64 -1/2 (*.f64 (*.f64 u u) (*.f64 n0_i (*.f64 normAngle normAngle))) (-.f64 n0_i (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 (pow.f64 u 3) (*.f64 n0_i (pow.f64 normAngle 3)))) (sin.f64 normAngle))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 u 2) (*.f64 n0_i (pow.f64 normAngle 2)))) (+.f64 n0_i (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle))))))","(fma.f64 1/6 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 (pow.f64 u 3) (*.f64 n0_i (pow.f64 normAngle 3)))) (sin.f64 normAngle)) (fma.f64 -1/2 (*.f64 (*.f64 u u) (*.f64 n0_i (*.f64 normAngle normAngle))) (-.f64 n0_i (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle)))))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(*.f64 (-.f64 1 u) n0_i)","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))) (pow.f64 normAngle 2)) (*.f64 (-.f64 1 u) n0_i))","(fma.f64 (*.f64 n0_i (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))) (*.f64 normAngle normAngle) (*.f64 (-.f64 1 u) n0_i))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))) (pow.f64 normAngle 2)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 u) n0_i)) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i)))))) (pow.f64 normAngle 4)) (*.f64 (-.f64 1 u) n0_i)))","(fma.f64 (*.f64 n0_i (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))) (*.f64 normAngle normAngle) (fma.f64 (+.f64 (*.f64 1/120 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i) (*.f64 (-.f64 1 u) n0_i))) (*.f64 (*.f64 n0_i (*.f64 -1/6 (-.f64 (-.f64 1 u) (pow.f64 (-.f64 1 u) 3)))) -1/6)) (pow.f64 normAngle 4) (*.f64 (-.f64 1 u) n0_i)))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))) (pow.f64 normAngle 2)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 u) n0_i)) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i)))))) (pow.f64 normAngle 4)) (+.f64 (*.f64 (-.f64 1 u) n0_i) (*.f64 (-.f64 (*.f64 -1/5040 (*.f64 (pow.f64 (-.f64 1 u) 7) n0_i)) (+.f64 (*.f64 -1/5040 (*.f64 (-.f64 1 u) n0_i)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 u) n0_i)) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))))))) (*.f64 1/120 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))))))) (pow.f64 normAngle 6)))))","(fma.f64 (*.f64 n0_i (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1)))) (*.f64 normAngle normAngle) (fma.f64 (+.f64 (*.f64 1/120 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i) (*.f64 (-.f64 1 u) n0_i))) (*.f64 (*.f64 n0_i (*.f64 -1/6 (-.f64 (-.f64 1 u) (pow.f64 (-.f64 1 u) 3)))) -1/6)) (pow.f64 normAngle 4) (fma.f64 (-.f64 1 u) n0_i (*.f64 (-.f64 (*.f64 -1/5040 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 7) n0_i) (*.f64 (-.f64 1 u) n0_i))) (fma.f64 -1/6 (+.f64 (*.f64 1/120 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i) (*.f64 (-.f64 1 u) n0_i))) (*.f64 (*.f64 n0_i (*.f64 -1/6 (-.f64 (-.f64 1 u) (pow.f64 (-.f64 1 u) 3)))) -1/6)) (*.f64 1/120 (*.f64 n0_i (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))))))) (pow.f64 normAngle 6)))))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))"]],"time":268.869140625,"type":"simplify"},{"compiler":[[22482,13357]],"time":205.432861328125,"type":"eval"},{"alts":[["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (/.f64 (/.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (cbrt.f64 (sin.f64 normAngle))) (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 normAngle))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 normAngle))) 2) 2)) n1_i))","fresh",0.9255990787498465],["(/.f64 (+.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (*.f64 n1_i (sin.f64 (*.f64 u normAngle)))) (sin.f64 normAngle))","fresh",18.732089390540903],["(+.f64 (*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2))) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","done",0.33324973559159016],["(+.f64 (*.f64 (*.f64 (sin.f64 (/.f64 (/.f64 (*.f64 normAngle (-.f64 1 (pow.f64 u 3))) (cbrt.f64 (fma.f64 u u (+.f64 1 u)))) (pow.f64 (cbrt.f64 (fma.f64 u u (+.f64 1 u))) 2))) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","fresh",0.6347138344330442],["(+.f64 (fma.f64 -1/2 (*.f64 (*.f64 u u) (*.f64 n0_i (*.f64 normAngle normAngle))) (-.f64 n0_i (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle)))) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","fresh",6.251527139626212],["(+.f64 (*.f64 (+.f64 (*.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 normAngle normAngle)) (-.f64 1 u)) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","done",0.22916237994555383],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (fma.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) (*.f64 normAngle normAngle) u) n1_i))","fresh",0.4173707610492675],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (*.f64 normAngle (-.f64 1 (pow.f64 u 3))) (/.f64 1 (fma.f64 u u (+.f64 1 u))))) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","fresh",0.4693810832760104]],"compiler":[[44,28],[22,15],[51,34],[59,40],[50,30],[47,33],[32,22],[50,34]],"count":[[404,8]],"kept":[{"done":[1,1],"fresh":[6,5],"new":[396,1],"picked":[1,1]}],"min-error":[0],"time":211.177978515625,"type":"prune"},{"accuracy":[0.22916237994555383],"baseline":[0.22916237994555383],"branch":[["normAngle",0.22916237994555386,1],["u",0.22916237994555383,1],["n0_i",0.22916237994555383,1],["n1_i",0.22916237994555386,1],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))",0.22916237994555383,1]],"compiler":[[5,4],[5,4],[5,4],[5,4],[29,20],[621,328]],"count":[[16,1]],"inputs":[["(+.f64 (fma.f64 -1/2 (*.f64 (*.f64 u u) (*.f64 n0_i (*.f64 normAngle normAngle))) (-.f64 n0_i (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle)))) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","(+.f64 (*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2))) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (/.f64 (/.f64 (*.f64 normAngle (-.f64 1 (pow.f64 u 3))) (cbrt.f64 (fma.f64 u u (+.f64 1 u)))) (pow.f64 (cbrt.f64 (fma.f64 u u (+.f64 1 u))) 2))) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","(+.f64 (*.f64 (+.f64 (*.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 normAngle normAngle)) (-.f64 1 u)) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","(+.f64 (fma.f64 -1/2 (*.f64 (*.f64 u u) (*.f64 n0_i (*.f64 normAngle normAngle))) (-.f64 n0_i (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle)))) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (*.f64 normAngle (-.f64 1 (pow.f64 u 3))) (/.f64 1 (fma.f64 u u (+.f64 1 u))))) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (/.f64 (/.f64 (*.f64 normAngle (-.f64 1 (pow.f64 u 3))) (cbrt.f64 (fma.f64 u u (+.f64 1 u)))) (pow.f64 (cbrt.f64 (fma.f64 u u (+.f64 1 u))) 2))) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","(+.f64 (fma.f64 -1/2 (*.f64 (*.f64 u u) (*.f64 n0_i (*.f64 normAngle normAngle))) (-.f64 n0_i (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle)))) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","(+.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2)) n0_i)) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (/.f64 (/.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (cbrt.f64 (sin.f64 normAngle))) (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 normAngle))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 normAngle))) 2) 2)) n1_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","(+.f64 (*.f64 (*.f64 n0_i (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2))) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","(+.f64 (*.f64 (+.f64 (*.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 normAngle normAngle)) (-.f64 1 u)) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (fma.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) (*.f64 normAngle normAngle) u) n1_i))","(/.f64 (+.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (*.f64 n1_i (sin.f64 (*.f64 u normAngle)))) (sin.f64 normAngle))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))"]],"link":["."],"name":["Curve intersection, scale width based on ribbon orientation"],"oracle":[19.62363980286951],"outputs":[["(+.f64 (*.f64 (+.f64 (*.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 normAngle normAngle)) (-.f64 1 u)) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))"]],"time":39.67919921875,"times":[["normAngle",5.72216796875],["u",5.719970703125],["n0_i",5.616943359375],["n1_i",5.6650390625],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))",6.2138671875]],"type":"regimes"},{"compiler":[[47,33]],"inputs":[["(+.f64 (*.f64 (+.f64 (*.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 normAngle normAngle)) (-.f64 1 u)) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (+.f64 (*.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 normAngle normAngle)) (-.f64 1 u)) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","(fma.f64 n1_i (/.f64 (+.f64 (*.f64 u normAngle) (*.f64 -1/6 (pow.f64 (*.f64 u normAngle) 3))) (sin.f64 normAngle)) (*.f64 (fma.f64 (*.f64 -1/6 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 u -1))) (*.f64 normAngle normAngle) (-.f64 1 u)) n0_i))"]],"stop":[["fuel",1]],"time":28.1318359375,"type":"simplify"},{"time":0.01806640625,"type":"soundness"},{"compiler":[[47,33]],"remove-preprocessing":[[]],"time":17.43994140625,"type":"end"}]
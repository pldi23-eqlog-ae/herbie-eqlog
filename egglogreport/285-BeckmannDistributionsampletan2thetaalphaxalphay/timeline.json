[{"compiler":[[26,19]],"method":["search"],"sampling":[[12,2.468881607040378e-5,7.964134216259282e-7,0.9999745147705079],[11,2.468881607040378e-5,7.964134216259282e-7,0.9999745147705079],[10,2.3892402648777853e-5,1.5928268432518567e-6,0.999974514770508],[9,2.3892402648777853e-5,1.5928268432518567e-6,0.999974514770508],[8,2.2299575805525996e-5,3.1856536865037133e-6,0.9999745147705079],[7,2.2299575805525996e-5,3.1856536865037133e-6,0.9999745147705079],[6,1.911392211902228e-5,6.371307373007427e-6,0.9999745147705079],[5,1.911392211902228e-5,6.371307373007427e-6,0.9999745147705079],[4,1.2742614746014855e-5,1.2742614746014855e-5,0.9999745147705079],[3,1.2742614746014855e-5,1.2742614746014855e-5,0.9999745147705079],[2,0.0,2.548522949202971e-5,0.9999745147705079],[1,0.0,2.548522949202971e-5,0.9999745147705079],[0,0.0,2.548522949202971e-5,0.9999745147705079]],"time":12.506103515625,"type":"analyze"},{"outcomes":[["body",256,"valid",508.2060546875,8256]],"time":515.8359375,"type":"sample"},{"compiler":[[11,8]],"inputs":[["0","1"],["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))","(*.f64 (*.f64 (neg.f64 u0) u0) (log.f64 (-.f64 1 alpha)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 (*.f64 (neg.f64 u0) u0) (log.f64 (-.f64 1 alpha)))","(*.f64 (neg.f64 (*.f64 u0 u0)) (log1p.f64 (neg.f64 alpha)))"]],"symmetry":[[]],"time":58.760009765625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))"]],"time":20.737060546875,"type":"simplify"},{"compiler":[[19,13]],"time":0.375,"type":"eval"},{"alts":[["(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","next",0.3483200195368841],["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))","fresh",13.661415832208254]],"compiler":[[10,7],[11,8],[10,7],[11,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.3405075195368841],"time":1.255859375,"type":"prune"},{"compiler":[[24,7]],"locations":[["(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))",0.3483200195368841,true]],"time":6.359130859375,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","u0","-inf",0.380859375],["(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","u0","inf",0.47705078125],["(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","u0","0",0.48095703125],["(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","alpha","-inf",0.199951171875],["(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","alpha","inf",0.463134765625],["(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","alpha","0",16.240966796875]],"time":18.350830078125,"type":"series"},{"count":[[1,51]],"inputs":[["(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (-.f64 9 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 3 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 1 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (neg.f64 u0))) (*.f64 (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3) (neg.f64 (*.f64 alpha alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3) (neg.f64 (*.f64 alpha alpha))) (cbrt.f64 (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 alpha 2/3)) (*.f64 (pow.f64 alpha 4/3) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 (*.f64 alpha alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 (pow.f64 alpha 6)) (log1p.f64 (neg.f64 u0)))) (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) (neg.f64 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 alpha) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 alpha 4/3) (log1p.f64 (neg.f64 u0))) (neg.f64 (pow.f64 alpha 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3) (cbrt.f64 (*.f64 (neg.f64 (pow.f64 alpha 6)) (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 alpha 6) (log1p.f64 (neg.f64 u0)))) (neg.f64 (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 alpha 2/3) (neg.f64 (*.f64 (pow.f64 alpha 4/3) (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) alpha)) (neg.f64 (*.f64 (pow.f64 alpha 4/3) (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) alpha) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (*.f64 (pow.f64 alpha 4/3) (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3)) (*.f64 0 (cbrt.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha))))) (+.f64 0 (cbrt.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (*.f64 (pow.f64 alpha 4/3) (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3)) (*.f64 0 (cbrt.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) alpha))))) (cbrt.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha)) (*.f64 (pow.f64 alpha 4/3) (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 alpha 4/3) (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3)) (cbrt.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (*.f64 alpha alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 (pow.f64 alpha 2/3))) (pow.f64 alpha 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 alpha alpha) (neg.f64 (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 alpha 4/3) (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 (pow.f64 alpha 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) alpha) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 3 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) alpha))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 2 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) alpha))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha))))))"]],"rules":[["egg-rr",51]],"time":39.481201171875,"type":"rewrite"},{"count":[[75,76]],"inputs":[["(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 u0 (pow.f64 alpha 2))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))))","(*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (/.f64 (pow.f64 alpha 2) u0))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2)))))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 u0 (pow.f64 alpha 2))","(*.f64 (*.f64 u0 alpha) alpha)","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))","(*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) u0))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 1/2 (pow.f64 (*.f64 u0 alpha) 2)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (+.f64 (log.f64 u0) (log.f64 -1)))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))","(fma.f64 (neg.f64 (+.f64 (log.f64 u0) (log.f64 -1))) (*.f64 alpha alpha) (/.f64 (*.f64 alpha alpha) u0))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))))","(-.f64 (fma.f64 (/.f64 (*.f64 alpha alpha) (*.f64 u0 u0)) 1/2 (/.f64 (*.f64 alpha alpha) u0)) (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) (*.f64 alpha alpha)))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))))","(fma.f64 1/3 (/.f64 (*.f64 alpha alpha) (pow.f64 u0 3)) (-.f64 (fma.f64 (/.f64 (*.f64 alpha alpha) (*.f64 u0 u0)) 1/2 (/.f64 (*.f64 alpha alpha) u0)) (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) (*.f64 alpha alpha))))","(*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))","(*.f64 (*.f64 alpha alpha) (neg.f64 (log.f64 (neg.f64 u0))))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (/.f64 (pow.f64 alpha 2) u0))","(*.f64 (*.f64 alpha alpha) (+.f64 (neg.f64 (log.f64 (neg.f64 u0))) (/.f64 1 u0)))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2)))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (neg.f64 (log.f64 (neg.f64 u0))) (/.f64 1 u0))) (/.f64 (*.f64 1/2 (*.f64 alpha alpha)) (*.f64 u0 u0)))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))))))","(fma.f64 (*.f64 alpha alpha) (neg.f64 (log.f64 (neg.f64 u0))) (fma.f64 1/3 (/.f64 (*.f64 alpha alpha) (pow.f64 u0 3)) (fma.f64 (/.f64 (*.f64 alpha alpha) (*.f64 u0 u0)) 1/2 (/.f64 (*.f64 alpha alpha) u0))))"]],"time":78.330810546875,"type":"simplify"},{"compiler":[[1120,520]],"time":11.958984375,"type":"eval"},{"alts":[["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))","fresh",13.661415832208254],["(-.f64 1 (+.f64 1 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) alpha)))","fresh",26.807164653032448],["(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","fresh",10.006921763758164],["(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 1/2 (pow.f64 (*.f64 u0 alpha) 2)))","fresh",13.259994614954934],["(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","done",0.3483200195368841],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha)) 3)","fresh",0.8217991332845667],["(*.f64 (pow.f64 alpha 2/3) (neg.f64 (*.f64 (pow.f64 alpha 4/3) (log1p.f64 (neg.f64 u0)))))","fresh",1.8900638666923844],["(*.f64 (neg.f64 alpha) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))","next",0.371757519536884]],"compiler":[[11,8],[13,10],[37,29],[21,15],[10,7],[13,10],[14,11],[10,7],[11,8],[13,10],[37,29],[21,15],[13,10],[14,11],[10,7]],"count":[[78,8]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[76,6],"picked":[1,1]}],"min-error":[0.046875],"time":13.89501953125,"type":"prune"},{"compiler":[[24,7]],"locations":[["(*.f64 (log1p.f64 (neg.f64 u0)) alpha)",0.28125,true],["(*.f64 (neg.f64 alpha) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))",0.296875,true]],"time":6.361083984375,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (log1p.f64 (neg.f64 u0)) alpha)","alpha","-inf",0.25],["(*.f64 (log1p.f64 (neg.f64 u0)) alpha)","alpha","inf",0.258056640625],["(*.f64 (log1p.f64 (neg.f64 u0)) alpha)","alpha","0",8.039794921875],["(*.f64 (log1p.f64 (neg.f64 u0)) alpha)","u0","-inf",0.260009765625],["(*.f64 (log1p.f64 (neg.f64 u0)) alpha)","u0","inf",0.300048828125],["(*.f64 (log1p.f64 (neg.f64 u0)) alpha)","u0","0",0.27392578125],["(*.f64 (neg.f64 alpha) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))","u0","-inf",0.218017578125],["(*.f64 (neg.f64 alpha) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))","u0","inf",0.211181640625],["(*.f64 (neg.f64 alpha) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))","u0","0",0.211181640625],["(*.f64 (neg.f64 alpha) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))","alpha","-inf",0.173095703125],["(*.f64 (neg.f64 alpha) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))","alpha","inf",0.2041015625],["(*.f64 (neg.f64 alpha) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))","alpha","0",0.201904296875]],"time":10.77392578125,"type":"series"},{"count":[[2,79]],"inputs":[["(*.f64 (neg.f64 alpha) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))","(*.f64 (log1p.f64 (neg.f64 u0)) alpha)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (-.f64 9 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 1 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 3 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 alpha) (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))) (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) (*.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3) (neg.f64 alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3) (*.f64 (neg.f64 alpha) (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3) (neg.f64 alpha)) (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 alpha)) (*.f64 (pow.f64 alpha 2/3) (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 alpha) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) (neg.f64 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 (*.f64 alpha alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 alpha 2/3) (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) (cbrt.f64 (neg.f64 alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha))) (neg.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 alpha (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))) (neg.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 alpha) (neg.f64 (*.f64 (pow.f64 alpha 2/3) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3) (*.f64 0 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (+.f64 0 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3) (*.f64 0 (cbrt.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3) (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 alpha) (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))) (pow.f64 alpha 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) (cbrt.f64 (neg.f64 alpha))) (pow.f64 alpha 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 alpha 2/3) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) (cbrt.f64 (neg.f64 alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 alpha 2/3) (*.f64 (cbrt.f64 alpha) (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 alpha alpha) (neg.f64 (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 3 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 2 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 alpha (cbrt.f64 (log1p.f64 (neg.f64 u0)))) (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (neg.f64 u0))) (*.f64 (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3) alpha) (cbrt.f64 (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3) (*.f64 alpha (cbrt.f64 (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3) (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 alpha) (*.f64 (pow.f64 alpha 2/3) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (neg.f64 u0)) alpha)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 alpha (log1p.f64 (neg.f64 u0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 alpha 2/3) (log1p.f64 (neg.f64 u0))) (cbrt.f64 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (cbrt.f64 alpha)) (pow.f64 alpha 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 alpha 2/3) (*.f64 (log1p.f64 (neg.f64 u0)) (cbrt.f64 alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 3))))))"]],"rules":[["egg-rr",27],["egg-rr",52]],"time":43.248046875,"type":"rewrite"},{"count":[[127,129]],"inputs":[["(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 u0 (pow.f64 alpha 2))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))))","(*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (/.f64 (pow.f64 alpha 2) u0))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2)))))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))))))","(*.f64 -1 (*.f64 u0 alpha))","(+.f64 (*.f64 -1 (*.f64 u0 alpha)) (*.f64 -1/2 (*.f64 (pow.f64 u0 2) alpha)))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 -1 (*.f64 u0 alpha)) (*.f64 -1/2 (*.f64 (pow.f64 u0 2) alpha))))","(+.f64 (*.f64 -1/4 (*.f64 (pow.f64 u0 4) alpha)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 -1 (*.f64 u0 alpha)) (*.f64 -1/2 (*.f64 (pow.f64 u0 2) alpha)))))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)","(+.f64 (*.f64 -1 (/.f64 alpha u0)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha))","(+.f64 (*.f64 -1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 -1 (/.f64 alpha u0)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)))","(+.f64 (*.f64 -1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 -1 (/.f64 alpha u0)) (+.f64 (*.f64 -1/3 (/.f64 alpha (pow.f64 u0 3))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha))))","(*.f64 -1 (*.f64 alpha (log.f64 (/.f64 -1 u0))))","(+.f64 (*.f64 -1 (*.f64 alpha (log.f64 (/.f64 -1 u0)))) (*.f64 -1 (/.f64 alpha u0)))","(+.f64 (*.f64 -1 (*.f64 alpha (log.f64 (/.f64 -1 u0)))) (+.f64 (*.f64 -1/2 (/.f64 alpha (pow.f64 u0 2))) (*.f64 -1 (/.f64 alpha u0))))","(+.f64 (*.f64 -1 (*.f64 alpha (log.f64 (/.f64 -1 u0)))) (+.f64 (*.f64 -1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 -1 (/.f64 alpha u0)) (*.f64 -1/3 (/.f64 alpha (pow.f64 u0 3))))))","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 u0 (pow.f64 alpha 2))","(*.f64 u0 (*.f64 alpha alpha))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))","(*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) u0))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 1/2 (pow.f64 (*.f64 u0 alpha) 2)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/2 (*.f64 u0 u0)))))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (+.f64 (log.f64 u0) (log.f64 -1)))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))","(fma.f64 (neg.f64 (+.f64 (log.f64 u0) (log.f64 -1))) (*.f64 alpha alpha) (/.f64 (*.f64 alpha alpha) u0))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))))","(-.f64 (fma.f64 1/2 (pow.f64 (neg.f64 (/.f64 alpha u0)) 2) (/.f64 (*.f64 alpha alpha) u0)) (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) (*.f64 alpha alpha)))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))))","(fma.f64 1/3 (/.f64 (*.f64 alpha alpha) (pow.f64 u0 3)) (-.f64 (fma.f64 1/2 (pow.f64 (neg.f64 (/.f64 alpha u0)) 2) (/.f64 (*.f64 alpha alpha) u0)) (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) (*.f64 alpha alpha))))","(*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))","(*.f64 (*.f64 alpha alpha) (neg.f64 (log.f64 (neg.f64 u0))))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (/.f64 (pow.f64 alpha 2) u0))","(*.f64 (*.f64 alpha alpha) (+.f64 (/.f64 1 u0) (neg.f64 (log.f64 (neg.f64 u0)))))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2)))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (/.f64 1 u0) (neg.f64 (log.f64 (neg.f64 u0))))) (*.f64 1/2 (pow.f64 (neg.f64 (/.f64 alpha u0)) 2)))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))))))","(fma.f64 (*.f64 alpha alpha) (neg.f64 (log.f64 (neg.f64 u0))) (fma.f64 (/.f64 (*.f64 alpha alpha) (pow.f64 u0 3)) 1/3 (fma.f64 1/2 (pow.f64 (neg.f64 (/.f64 alpha u0)) 2) (/.f64 (*.f64 alpha alpha) u0))))","(*.f64 -1 (*.f64 u0 alpha))","(neg.f64 (*.f64 u0 alpha))","(+.f64 (*.f64 -1 (*.f64 u0 alpha)) (*.f64 -1/2 (*.f64 (pow.f64 u0 2) alpha)))","(*.f64 alpha (+.f64 (*.f64 -1/2 (*.f64 u0 u0)) (neg.f64 u0)))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 -1 (*.f64 u0 alpha)) (*.f64 -1/2 (*.f64 (pow.f64 u0 2) alpha))))","(fma.f64 -1/3 (*.f64 (pow.f64 u0 3) alpha) (*.f64 alpha (+.f64 (*.f64 -1/2 (*.f64 u0 u0)) (neg.f64 u0))))","(+.f64 (*.f64 -1/4 (*.f64 (pow.f64 u0 4) alpha)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 -1 (*.f64 u0 alpha)) (*.f64 -1/2 (*.f64 (pow.f64 u0 2) alpha)))))","(+.f64 (*.f64 alpha (+.f64 (*.f64 -1/4 (pow.f64 u0 4)) (*.f64 -1/3 (pow.f64 u0 3)))) (*.f64 alpha (+.f64 (*.f64 -1/2 (*.f64 u0 u0)) (neg.f64 u0))))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)","(*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha)","(+.f64 (*.f64 -1 (/.f64 alpha u0)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha))","(fma.f64 alpha (+.f64 (log.f64 u0) (log.f64 -1)) (neg.f64 (/.f64 alpha u0)))","(+.f64 (*.f64 -1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 -1 (/.f64 alpha u0)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)))","(fma.f64 (/.f64 alpha (*.f64 u0 u0)) -1/2 (fma.f64 alpha (+.f64 (log.f64 u0) (log.f64 -1)) (neg.f64 (/.f64 alpha u0))))","(+.f64 (*.f64 -1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 -1 (/.f64 alpha u0)) (+.f64 (*.f64 -1/3 (/.f64 alpha (pow.f64 u0 3))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha))))","(fma.f64 -1/2 (/.f64 alpha (*.f64 u0 u0)) (-.f64 (fma.f64 -1/3 (/.f64 alpha (pow.f64 u0 3)) (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha)) (/.f64 alpha u0)))","(*.f64 -1 (*.f64 alpha (log.f64 (/.f64 -1 u0))))","(*.f64 (neg.f64 alpha) (neg.f64 (log.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (*.f64 alpha (log.f64 (/.f64 -1 u0)))) (*.f64 -1 (/.f64 alpha u0)))","(neg.f64 (fma.f64 alpha (neg.f64 (log.f64 (neg.f64 u0))) (/.f64 alpha u0)))","(+.f64 (*.f64 -1 (*.f64 alpha (log.f64 (/.f64 -1 u0)))) (+.f64 (*.f64 -1/2 (/.f64 alpha (pow.f64 u0 2))) (*.f64 -1 (/.f64 alpha u0))))","(fma.f64 (neg.f64 alpha) (neg.f64 (log.f64 (neg.f64 u0))) (fma.f64 -1/2 (/.f64 alpha (*.f64 u0 u0)) (neg.f64 (/.f64 alpha u0))))","(+.f64 (*.f64 -1 (*.f64 alpha (log.f64 (/.f64 -1 u0)))) (+.f64 (*.f64 -1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 -1 (/.f64 alpha u0)) (*.f64 -1/3 (/.f64 alpha (pow.f64 u0 3))))))","(fma.f64 (neg.f64 alpha) (neg.f64 (log.f64 (neg.f64 u0))) (fma.f64 (/.f64 alpha (*.f64 u0 u0)) -1/2 (fma.f64 (/.f64 alpha (pow.f64 u0 3)) -1/3 (neg.f64 (/.f64 alpha u0)))))","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log1p.f64 (neg.f64 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log1p.f64 (neg.f64 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log1p.f64 (neg.f64 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log1p.f64 (neg.f64 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log1p.f64 (neg.f64 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log1p.f64 (neg.f64 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log1p.f64 (neg.f64 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log1p.f64 (neg.f64 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log1p.f64 (neg.f64 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log1p.f64 (neg.f64 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log1p.f64 (neg.f64 u0)) alpha)","(*.f64 (log.f64 (-.f64 1 u0)) alpha)","(*.f64 (log1p.f64 (neg.f64 u0)) alpha)"]],"time":149.154052734375,"type":"simplify"},{"compiler":[[1961,849]],"time":19.2900390625,"type":"eval"},{"alts":[["(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","done",0.3483200195368841],["(*.f64 (cbrt.f64 (neg.f64 alpha)) (*.f64 (pow.f64 alpha 2/3) (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))","fresh",1.0297432855988864],["(*.f64 (neg.f64 alpha) (+.f64 (*.f64 alpha (+.f64 (*.f64 -1/4 (pow.f64 u0 4)) (*.f64 -1/3 (pow.f64 u0 3)))) (*.f64 alpha (+.f64 (*.f64 -1/2 (*.f64 u0 u0)) (neg.f64 u0)))))","fresh",10.052918325854838],["(*.f64 (neg.f64 alpha) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))","done",0.371757519536884],["(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","fresh",10.006921763758164],["(*.f64 (neg.f64 alpha) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (cbrt.f64 alpha)) (pow.f64 alpha 2/3)))","fresh",1.0477233028204425],["(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 1/2 (pow.f64 (*.f64 u0 alpha) 2)))","fresh",13.259994614954934],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha)) 3)","fresh",0.8217991332845667],["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))","fresh",13.661415832208254],["(*.f64 (neg.f64 alpha) (pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3))","next",0.7742667235158727]],"compiler":[[10,7],[15,11],[29,21],[10,7],[37,29],[15,11],[21,15],[13,10],[11,8],[13,10],[15,11],[29,21],[37,29],[15,11],[21,15],[13,10],[11,8],[13,10]],"count":[[137,10]],"kept":[{"done":[1,1],"fresh":[6,3],"new":[129,5],"picked":[1,1]}],"min-error":[0.01953125],"time":23.02490234375,"type":"prune"},{"compiler":[[42,13]],"locations":[["(cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))",0.09375,true],["(*.f64 (log1p.f64 (neg.f64 u0)) alpha)",0.28125,false],["(*.f64 (neg.f64 alpha) (pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3))",0.296875,true],["(pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3)",0.739467822358587,true]],"time":9.119140625,"type":"localize"},{"count":[[3,40]],"series":[["(cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))","alpha","-inf",0.322021484375],["(cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))","alpha","inf",0.267822265625],["(cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))","alpha","0",0.212890625],["(cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))","u0","-inf",0.953125],["(cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))","u0","inf",0.69384765625],["(cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))","u0","0",0.3310546875],["(*.f64 (neg.f64 alpha) (pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3))","u0","-inf",0.879150390625],["(*.f64 (neg.f64 alpha) (pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3))","u0","inf",0.258056640625],["(*.f64 (neg.f64 alpha) (pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3))","u0","0",0.22998046875],["(*.f64 (neg.f64 alpha) (pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3))","alpha","-inf",1.7939453125],["(*.f64 (neg.f64 alpha) (pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3))","alpha","inf",0.4169921875],["(*.f64 (neg.f64 alpha) (pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3))","alpha","0",0.35107421875],["(pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3)","alpha","-inf",1.612060546875],["(pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3)","alpha","inf",0.534912109375],["(pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3)","alpha","0",0.631103515625],["(pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3)","u0","-inf",5.09912109375],["(pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3)","u0","inf",3.989990234375],["(pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3)","u0","0",1.5810546875]],"time":20.58984375,"type":"series"},{"count":[[3,107]],"inputs":[["(pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3)","(*.f64 (neg.f64 alpha) (pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3))","(cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 0) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) (*.f64 0 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 alpha) (*.f64 (pow.f64 alpha 2/3) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (neg.f64 u0)) alpha)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 alpha (log1p.f64 (neg.f64 u0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3) (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 7/3) (cbrt.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3) (cbrt.f64 (log1p.f64 (neg.f64 u0)))) (cbrt.f64 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 alpha (cbrt.f64 (log1p.f64 (neg.f64 u0)))) (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (cbrt.f64 alpha)) (pow.f64 alpha 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (neg.f64 u0))) (*.f64 (cbrt.f64 alpha) (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3)) (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (neg.f64 u0))) (*.f64 (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 alpha) (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3)) (cbrt.f64 (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 alpha 2/3) (*.f64 (log1p.f64 (neg.f64 u0)) (cbrt.f64 alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3)) (pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3) (*.f64 alpha (cbrt.f64 (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3)) (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 alpha 2/3) (log1p.f64 (neg.f64 u0))) (cbrt.f64 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3) alpha) (cbrt.f64 (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 alpha) (*.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3) (cbrt.f64 (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 0) (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 0) (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) (*.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) (*.f64 0 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 alpha) (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3)) (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) (*.f64 (neg.f64 alpha) (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))) (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 alpha)) (*.f64 (pow.f64 alpha 2/3) (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 alpha) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) (neg.f64 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3) (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3) (*.f64 (neg.f64 alpha) (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) (cbrt.f64 (neg.f64 alpha))) (pow.f64 alpha 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 alpha) (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))) (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 (*.f64 alpha alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 alpha 2/3) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) (cbrt.f64 (neg.f64 alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 alpha 2/3) (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) (cbrt.f64 (neg.f64 alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 alpha (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))) (neg.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha))) (neg.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 alpha (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3)) (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 alpha) (neg.f64 (*.f64 (pow.f64 alpha 2/3) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 alpha alpha) (neg.f64 (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 0) (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) (*.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))) (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) (*.f64 0 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3)) (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3) (cbrt.f64 (log1p.f64 (neg.f64 u0))))) (cbrt.f64 (cbrt.f64 alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log1p.f64 (neg.f64 u0)))) (cbrt.f64 (*.f64 (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log1p.f64 (neg.f64 u0)))) (cbrt.f64 (*.f64 (cbrt.f64 alpha) (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 alpha)) (cbrt.f64 (*.f64 (pow.f64 alpha 2/3) (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 alpha (cbrt.f64 (log1p.f64 (neg.f64 u0))))) (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))) (cbrt.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (neg.f64 u0))) (cbrt.f64 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 alpha) (cbrt.f64 (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (cbrt.f64 alpha))) (cbrt.f64 (pow.f64 alpha 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))))"]],"rules":[["egg-rr",26],["egg-rr",46],["egg-rr",35]],"time":32.0419921875,"type":"rewrite"},{"count":[[147,164]],"inputs":[["(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha))","(+.f64 (*.f64 -2/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 13))) 1/9))) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) (*.f64 -1/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 13))) 1/9)))))","(+.f64 (*.f64 -2/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 13))) 1/9))) (+.f64 (*.f64 2/9 (*.f64 (/.f64 1 (pow.f64 u0 2)) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (+.f64 (*.f64 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))) (*.f64 1/9 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4)) 1/9))) (pow.f64 u0 2)) (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) 1/3)) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 13))) 1/9))) (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (pow.f64 u0 2)) (pow.f64 1 1/3))))))))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/3 alpha) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 4)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 5)) 1/9) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/3)))) (pow.f64 u0 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) (+.f64 (*.f64 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) 1/3) (-.f64 (*.f64 -1/3 alpha) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 4)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 5)) 1/9) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/3)))))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (*.f64 1 alpha) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 8)) 1/9) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9)))))) (pow.f64 u0 3)) (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) 1/3)) (+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (pow.f64 u0 2)) (pow.f64 1 1/3))) (+.f64 (*.f64 -2/9 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (pow.f64 u0 3)) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 4)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 5)) 1/9))) (+.f64 (*.f64 -2/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 13))) 1/9))) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))) (*.f64 1/9 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4)) 1/9))) (pow.f64 u0 3)) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/9))) (+.f64 (*.f64 2/9 (*.f64 (/.f64 1 (pow.f64 u0 2)) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (+.f64 (*.f64 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))) (*.f64 1/9 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4)) 1/9))) (pow.f64 u0 2)) (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) 1/3)) (*.f64 -1/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 13))) 1/9))))))))))))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 alpha (log.f64 (/.f64 -1 u0)))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 alpha (log.f64 (/.f64 -1 u0))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 13))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 13))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) u0)))","(+.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) alpha)) 1/3) (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (cbrt.f64 -1)))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))))) (pow.f64 u0 2)) (pow.f64 (*.f64 1 (*.f64 alpha (log.f64 (/.f64 -1 u0)))) 1/3)) (+.f64 (*.f64 2/9 (*.f64 (/.f64 1 (pow.f64 u0 2)) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 alpha (log.f64 (/.f64 -1 u0))))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 13))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 13))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) u0)) (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (pow.f64 u0 2)) (pow.f64 1 1/3)))))))","(+.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) alpha)) 1/3) (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (cbrt.f64 -1)))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))))) (pow.f64 u0 2)) (pow.f64 (*.f64 1 (*.f64 alpha (log.f64 (/.f64 -1 u0)))) 1/3)) (+.f64 (*.f64 2/9 (*.f64 (/.f64 1 (pow.f64 u0 2)) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 alpha (log.f64 (/.f64 -1 u0))))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 13))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 13))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) u0)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) alpha)) 1/3) (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) alpha)) 1/3) (/.f64 (-.f64 (*.f64 1/3 alpha) (+.f64 (*.f64 4/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 4)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 4)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))))))))) (cbrt.f64 -1)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) alpha) (pow.f64 (log.f64 (/.f64 -1 u0)) 8)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 8)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))))))) (cbrt.f64 -1))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 1/3 alpha) (+.f64 (*.f64 4/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 4)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 4)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))))))))))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 7)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) alpha)) 1/3) (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (cbrt.f64 -1)))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))))))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 4)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))))))))) (pow.f64 u0 3))) (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (pow.f64 u0 2)) (pow.f64 1 1/3))))))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 u0 (pow.f64 alpha 2))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))))","(*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (/.f64 (pow.f64 alpha 2) u0))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2)))))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))))))","(pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha) 1/3)","(+.f64 (*.f64 -1/3 (*.f64 (/.f64 1 u0) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/9))) (pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha) 1/3))","(+.f64 (*.f64 -1/3 (*.f64 (/.f64 1 u0) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/9))) (+.f64 (pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha) 1/3) (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (pow.f64 u0 2)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2) (pow.f64 alpha 2))) 1/3)))))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/3 alpha) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 4)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 5)) 1/9) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/3)))) (pow.f64 u0 3)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2) (pow.f64 alpha 2))) 1/3))) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 1 u0) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/9))) (+.f64 (pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha) 1/3) (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (pow.f64 u0 2)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2) (pow.f64 alpha 2))) 1/3))))))","(*.f64 (pow.f64 (*.f64 1 (*.f64 alpha (log.f64 (/.f64 -1 u0)))) 1/3) (cbrt.f64 -1))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 alpha (log.f64 (/.f64 -1 u0)))) 1/3) (cbrt.f64 -1)) (*.f64 -1/3 (*.f64 (/.f64 1 u0) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 7)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (*.f64 (pow.f64 u0 2) (pow.f64 (cbrt.f64 -1) 2))) (pow.f64 (/.f64 1 (*.f64 (pow.f64 alpha 2) (pow.f64 (log.f64 (/.f64 -1 u0)) 2))) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 alpha (log.f64 (/.f64 -1 u0)))) 1/3) (cbrt.f64 -1)) (*.f64 -1/3 (*.f64 (/.f64 1 u0) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 7)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3))))))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (*.f64 (pow.f64 u0 2) (pow.f64 (cbrt.f64 -1) 2))) (pow.f64 (/.f64 1 (*.f64 (pow.f64 alpha 2) (pow.f64 (log.f64 (/.f64 -1 u0)) 2))) 1/3))) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 (-.f64 (*.f64 1/3 alpha) (+.f64 (*.f64 4/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 4)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 4)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))))))))) (*.f64 (pow.f64 u0 3) (pow.f64 (cbrt.f64 -1) 2))) (pow.f64 (/.f64 1 (*.f64 (pow.f64 alpha 2) (pow.f64 (log.f64 (/.f64 -1 u0)) 2))) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 alpha (log.f64 (/.f64 -1 u0)))) 1/3) (cbrt.f64 -1)) (*.f64 -1/3 (*.f64 (/.f64 1 u0) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 7)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha))","(*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha)","(+.f64 (*.f64 -2/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 13))) 1/9))) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) (*.f64 -1/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 13))) 1/9)))))","(fma.f64 -2/3 (/.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) 4) (pow.f64 alpha 13)) 1/9) u0) (+.f64 (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha) (*.f64 (/.f64 -1/3 u0) (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) 4) (pow.f64 alpha 13)) 1/9))))","(+.f64 (*.f64 -2/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 13))) 1/9))) (+.f64 (*.f64 2/9 (*.f64 (/.f64 1 (pow.f64 u0 2)) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (+.f64 (*.f64 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))) (*.f64 1/9 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4)) 1/9))) (pow.f64 u0 2)) (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) 1/3)) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 13))) 1/9))) (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (pow.f64 u0 2)) (pow.f64 1 1/3))))))))","(fma.f64 -2/3 (/.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) 4) (pow.f64 alpha 13)) 1/9) u0) (fma.f64 2/9 (*.f64 (pow.f64 u0 -2) (pow.f64 (/.f64 (pow.f64 alpha 17) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9)) (fma.f64 (*.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 (/.f64 1 alpha) (+.f64 (log.f64 u0) (log.f64 -1)))) (fma.f64 -1/2 alpha (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 17) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9)))) (*.f64 1/9 (pow.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -4)) 1/9))) (pow.f64 u0 -2)) (cbrt.f64 (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha)) (+.f64 (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha) (fma.f64 -1/3 (/.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) 4) (pow.f64 alpha 13)) 1/9) u0) (*.f64 1/3 (*.f64 (fma.f64 -1/2 alpha (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 17) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9))) (pow.f64 u0 -2))))))))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/3 alpha) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 4)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 5)) 1/9) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/3)))) (pow.f64 u0 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) (+.f64 (*.f64 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) 1/3) (-.f64 (*.f64 -1/3 alpha) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 4)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 5)) 1/9) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/3)))))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (*.f64 1 alpha) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 8)) 1/9) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9)))))) (pow.f64 u0 3)) (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) 1/3)) (+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (pow.f64 u0 2)) (pow.f64 1 1/3))) (+.f64 (*.f64 -2/9 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (pow.f64 u0 3)) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 4)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 5)) 1/9))) (+.f64 (*.f64 -2/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 13))) 1/9))) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))) (*.f64 1/9 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4)) 1/9))) (pow.f64 u0 3)) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/9))) (+.f64 (*.f64 2/9 (*.f64 (/.f64 1 (pow.f64 u0 2)) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (+.f64 (*.f64 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))) (*.f64 1/9 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4)) 1/9))) (pow.f64 u0 2)) (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) 1/3)) (*.f64 -1/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 13))) 1/9))))))))))))","(fma.f64 1/3 (/.f64 (-.f64 (*.f64 -1/3 alpha) (fma.f64 -2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 alpha 4) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -5)) 1/9) (fma.f64 -1/2 alpha (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 17) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9)))) (*.f64 -1/27 (cbrt.f64 (*.f64 (pow.f64 alpha 7) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -2)))))) (pow.f64 u0 3)) (+.f64 (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha) (fma.f64 (/.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 (/.f64 1 alpha) (+.f64 (log.f64 u0) (log.f64 -1)))) (-.f64 (*.f64 -1/3 alpha) (fma.f64 -2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 alpha 4) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -5)) 1/9) (fma.f64 -1/2 alpha (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 17) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9)))) (*.f64 -1/27 (cbrt.f64 (*.f64 (pow.f64 alpha 7) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -2))))))) (*.f64 (*.f64 -2/9 (pow.f64 (*.f64 alpha (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -8)) 1/9)) (fma.f64 -1/2 alpha (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 17) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9))))) (pow.f64 u0 3)) (cbrt.f64 (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha)) (fma.f64 1/3 (*.f64 (fma.f64 -1/2 alpha (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 17) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9))) (pow.f64 u0 -2)) (fma.f64 -2/9 (/.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 alpha 4) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -5)) 1/9) (fma.f64 -1/2 alpha (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 17) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9)))) (pow.f64 u0 3)) (fma.f64 -2/3 (/.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) 4) (pow.f64 alpha 13)) 1/9) u0) (fma.f64 -1/3 (/.f64 (*.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 (/.f64 1 alpha) (+.f64 (log.f64 u0) (log.f64 -1)))) (fma.f64 -1/2 alpha (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 17) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9)))) (*.f64 1/9 (pow.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -4)) 1/9))) (pow.f64 (*.f64 (pow.f64 alpha 7) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -2)) 1/9)) (pow.f64 u0 3)) (fma.f64 2/9 (*.f64 (pow.f64 u0 -2) (pow.f64 (/.f64 (pow.f64 alpha 17) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9)) (fma.f64 (*.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 (/.f64 1 alpha) (+.f64 (log.f64 u0) (log.f64 -1)))) (fma.f64 -1/2 alpha (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 17) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9)))) (*.f64 1/9 (pow.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -4)) 1/9))) (pow.f64 u0 -2)) (cbrt.f64 (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha)) (*.f64 (/.f64 -1/3 u0) (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) 4) (pow.f64 alpha 13)) 1/9)))))))))))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 alpha (log.f64 (/.f64 -1 u0)))))","(*.f64 (neg.f64 alpha) (neg.f64 (log.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 alpha (log.f64 (/.f64 -1 u0))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 13))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 13))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) u0)))","(-.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) 4) (pow.f64 alpha 13)) 1/9)) u0) (*.f64 alpha (neg.f64 (log.f64 (neg.f64 u0)))))","(+.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) alpha)) 1/3) (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (cbrt.f64 -1)))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))))) (pow.f64 u0 2)) (pow.f64 (*.f64 1 (*.f64 alpha (log.f64 (/.f64 -1 u0)))) 1/3)) (+.f64 (*.f64 2/9 (*.f64 (/.f64 1 (pow.f64 u0 2)) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 alpha (log.f64 (/.f64 -1 u0))))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 13))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 13))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) u0)) (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (pow.f64 u0 2)) (pow.f64 1 1/3)))))))","(fma.f64 (/.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 (/.f64 1 alpha) (neg.f64 (log.f64 (neg.f64 u0))))) (neg.f64 (fma.f64 -1/2 alpha (*.f64 (pow.f64 (/.f64 (pow.f64 alpha 17) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9) 1/3)))) (*.f64 1/9 (pow.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -4)) 1/9))) (neg.f64 (*.f64 u0 u0))) (cbrt.f64 (*.f64 alpha (neg.f64 (log.f64 (neg.f64 u0))))) (fma.f64 2/9 (*.f64 (pow.f64 u0 -2) (neg.f64 (pow.f64 (/.f64 (pow.f64 alpha 17) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9))) (-.f64 (-.f64 (*.f64 1/3 (*.f64 (fma.f64 -1/2 alpha (*.f64 (pow.f64 (/.f64 (pow.f64 alpha 17) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9) 1/3)) (pow.f64 u0 -2))) (/.f64 (pow.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) 4) (pow.f64 alpha 13)) 1/9) u0)) (*.f64 alpha (neg.f64 (log.f64 (neg.f64 u0)))))))","(+.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) alpha)) 1/3) (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (cbrt.f64 -1)))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))))) (pow.f64 u0 2)) (pow.f64 (*.f64 1 (*.f64 alpha (log.f64 (/.f64 -1 u0)))) 1/3)) (+.f64 (*.f64 2/9 (*.f64 (/.f64 1 (pow.f64 u0 2)) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 alpha (log.f64 (/.f64 -1 u0))))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 13))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 13))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) u0)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) alpha)) 1/3) (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) alpha)) 1/3) (/.f64 (-.f64 (*.f64 1/3 alpha) (+.f64 (*.f64 4/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 4)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 4)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))))))))) (cbrt.f64 -1)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) alpha) (pow.f64 (log.f64 (/.f64 -1 u0)) 8)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 8)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))))))) (cbrt.f64 -1))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 1/3 alpha) (+.f64 (*.f64 4/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 4)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 4)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))))))))))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 7)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) alpha)) 1/3) (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (cbrt.f64 -1)))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))))))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 4)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))))))))) (pow.f64 u0 3))) (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (pow.f64 u0 2)) (pow.f64 1 1/3))))))))","(fma.f64 (/.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 (/.f64 1 alpha) (neg.f64 (log.f64 (neg.f64 u0))))) (neg.f64 (fma.f64 -1/2 alpha (*.f64 (pow.f64 (/.f64 (pow.f64 alpha 17) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9) 1/3)))) (*.f64 1/9 (pow.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -4)) 1/9))) (neg.f64 (*.f64 u0 u0))) (cbrt.f64 (*.f64 alpha (neg.f64 (log.f64 (neg.f64 u0))))) (fma.f64 2/9 (*.f64 (pow.f64 u0 -2) (neg.f64 (pow.f64 (/.f64 (pow.f64 alpha 17) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9))) (-.f64 (-.f64 (-.f64 (*.f64 1/3 (*.f64 (fma.f64 -1/2 alpha (*.f64 (pow.f64 (/.f64 (pow.f64 alpha 17) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9) 1/3)) (pow.f64 u0 -2))) (/.f64 (fma.f64 (cbrt.f64 (*.f64 alpha (neg.f64 (log.f64 (neg.f64 u0))))) (neg.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 (/.f64 1 alpha) (neg.f64 (log.f64 (neg.f64 u0))))) (+.f64 (*.f64 -1/3 alpha) (fma.f64 4/9 (*.f64 (pow.f64 (*.f64 (pow.f64 alpha 4) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -5)) 1/9) (neg.f64 (fma.f64 -1/2 alpha (*.f64 (pow.f64 (/.f64 (pow.f64 alpha 17) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9) 1/3)))) (fma.f64 1/27 (cbrt.f64 (*.f64 (pow.f64 alpha 7) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -2))) (*.f64 (*.f64 2/9 (pow.f64 (*.f64 (pow.f64 alpha 4) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -5)) 1/9)) (neg.f64 (fma.f64 -1/2 alpha (*.f64 (pow.f64 (/.f64 (pow.f64 alpha 17) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9) 1/3)))))))) (*.f64 (*.f64 2/9 (pow.f64 (*.f64 alpha (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -8)) 1/9)) (fma.f64 -1/2 alpha (*.f64 (pow.f64 (/.f64 (pow.f64 alpha 17) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9) 1/3))))) (+.f64 (*.f64 1/3 (+.f64 (-.f64 (*.f64 1/3 alpha) (fma.f64 4/9 (*.f64 (pow.f64 (*.f64 (pow.f64 alpha 4) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -5)) 1/9) (neg.f64 (fma.f64 -1/2 alpha (*.f64 (pow.f64 (/.f64 (pow.f64 alpha 17) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9) 1/3)))) (fma.f64 1/27 (cbrt.f64 (*.f64 (pow.f64 alpha 7) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -2))) (*.f64 (*.f64 2/9 (pow.f64 (*.f64 (pow.f64 alpha 4) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -5)) 1/9)) (neg.f64 (fma.f64 -1/2 alpha (*.f64 (pow.f64 (/.f64 (pow.f64 alpha 17) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9) 1/3))))))) (*.f64 (pow.f64 (*.f64 (pow.f64 alpha 7) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -2)) 1/9) (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 (/.f64 1 alpha) (neg.f64 (log.f64 (neg.f64 u0))))) (neg.f64 (fma.f64 -1/2 alpha (*.f64 (pow.f64 (/.f64 (pow.f64 alpha 17) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9) 1/3)))) (*.f64 1/9 (pow.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -4)) 1/9)))))) (*.f64 (*.f64 2/9 (pow.f64 (*.f64 (pow.f64 alpha 4) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -5)) 1/9)) (neg.f64 (fma.f64 -1/2 alpha (*.f64 (pow.f64 (/.f64 (pow.f64 alpha 17) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9) 1/3)))))) (pow.f64 u0 3))) (/.f64 (pow.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) 4) (pow.f64 alpha 13)) 1/9) u0)) (*.f64 alpha (neg.f64 (log.f64 (neg.f64 u0)))))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 u0 (pow.f64 alpha 2))","(*.f64 u0 (*.f64 alpha alpha))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))","(*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) u0))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 1/2 (pow.f64 (*.f64 u0 alpha) 2)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (+.f64 (log.f64 u0) (log.f64 -1)))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))","(-.f64 (/.f64 (*.f64 alpha alpha) u0) (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) (*.f64 alpha alpha)))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))))","(+.f64 (/.f64 (*.f64 alpha alpha) u0) (fma.f64 1/2 (/.f64 (/.f64 (*.f64 alpha alpha) u0) u0) (*.f64 (neg.f64 (*.f64 alpha alpha)) (+.f64 (log.f64 u0) (log.f64 -1)))))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))))","(fma.f64 1/3 (/.f64 (*.f64 alpha alpha) (pow.f64 u0 3)) (+.f64 (/.f64 (*.f64 alpha alpha) u0) (fma.f64 1/2 (/.f64 (/.f64 (*.f64 alpha alpha) u0) u0) (*.f64 (neg.f64 (*.f64 alpha alpha)) (+.f64 (log.f64 u0) (log.f64 -1))))))","(*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))","(*.f64 (*.f64 alpha alpha) (neg.f64 (log.f64 (neg.f64 u0))))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (/.f64 (pow.f64 alpha 2) u0))","(*.f64 (*.f64 alpha alpha) (+.f64 (neg.f64 (log.f64 (neg.f64 u0))) (/.f64 1 u0)))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2)))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (neg.f64 (log.f64 (neg.f64 u0))) (/.f64 1 u0))) (/.f64 (/.f64 (*.f64 1/2 (*.f64 alpha alpha)) u0) u0))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))))))","(+.f64 (+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (neg.f64 (log.f64 (neg.f64 u0))) (/.f64 1 u0))) (/.f64 (/.f64 (*.f64 1/2 (*.f64 alpha alpha)) u0) u0)) (/.f64 (*.f64 alpha alpha) (*.f64 3 (pow.f64 u0 3))))","(pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha) 1/3)","(cbrt.f64 (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha))","(+.f64 (*.f64 -1/3 (*.f64 (/.f64 1 u0) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/9))) (pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha) 1/3))","(fma.f64 -1/3 (/.f64 (pow.f64 (*.f64 (pow.f64 alpha 7) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -2)) 1/9) u0) (cbrt.f64 (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha)))","(+.f64 (*.f64 -1/3 (*.f64 (/.f64 1 u0) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/9))) (+.f64 (pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha) 1/3) (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (pow.f64 u0 2)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2) (pow.f64 alpha 2))) 1/3)))))","(+.f64 (fma.f64 -1/3 (/.f64 (pow.f64 (*.f64 (pow.f64 alpha 7) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -2)) 1/9) u0) (cbrt.f64 (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha))) (/.f64 (/.f64 (/.f64 (*.f64 (fma.f64 -1/2 alpha (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 17) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha) -2))) u0) u0) 3))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/3 alpha) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 4)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 5)) 1/9) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/3)))) (pow.f64 u0 3)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2) (pow.f64 alpha 2))) 1/3))) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 1 u0) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/9))) (+.f64 (pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha) 1/3) (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 17)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (pow.f64 u0 2)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2) (pow.f64 alpha 2))) 1/3))))))","(fma.f64 1/3 (/.f64 (*.f64 (-.f64 (*.f64 -1/3 alpha) (fma.f64 -2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 alpha 4) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -5)) 1/9) (fma.f64 -1/2 alpha (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 17) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9)))) (*.f64 -1/27 (cbrt.f64 (*.f64 (pow.f64 alpha 7) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -2)))))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha) -2))) (pow.f64 u0 3)) (+.f64 (fma.f64 -1/3 (/.f64 (pow.f64 (*.f64 (pow.f64 alpha 7) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -2)) 1/9) u0) (cbrt.f64 (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha))) (/.f64 (/.f64 (/.f64 (*.f64 (fma.f64 -1/2 alpha (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 17) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha) -2))) u0) u0) 3)))","(*.f64 (pow.f64 (*.f64 1 (*.f64 alpha (log.f64 (/.f64 -1 u0)))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (*.f64 (neg.f64 alpha) (neg.f64 (log.f64 (neg.f64 u0)))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 alpha (log.f64 (/.f64 -1 u0)))) 1/3) (cbrt.f64 -1)) (*.f64 -1/3 (*.f64 (/.f64 1 u0) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 7)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))))","(+.f64 (cbrt.f64 (*.f64 (neg.f64 alpha) (neg.f64 (log.f64 (neg.f64 u0))))) (*.f64 (/.f64 -1/3 u0) (pow.f64 (*.f64 (pow.f64 alpha 7) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -2)) 1/9)))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (*.f64 (pow.f64 u0 2) (pow.f64 (cbrt.f64 -1) 2))) (pow.f64 (/.f64 1 (*.f64 (pow.f64 alpha 2) (pow.f64 (log.f64 (/.f64 -1 u0)) 2))) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 alpha (log.f64 (/.f64 -1 u0)))) 1/3) (cbrt.f64 -1)) (*.f64 -1/3 (*.f64 (/.f64 1 u0) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 7)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3))))))","(fma.f64 1/3 (/.f64 (/.f64 (*.f64 (fma.f64 -1/2 alpha (*.f64 (pow.f64 (/.f64 (pow.f64 alpha 17) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9) 1/3)) (cbrt.f64 (pow.f64 (*.f64 alpha (neg.f64 (log.f64 (neg.f64 u0)))) -2))) u0) u0) (+.f64 (cbrt.f64 (*.f64 (neg.f64 alpha) (neg.f64 (log.f64 (neg.f64 u0))))) (*.f64 (/.f64 -1/3 u0) (pow.f64 (*.f64 (pow.f64 alpha 7) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -2)) 1/9))))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (*.f64 (pow.f64 u0 2) (pow.f64 (cbrt.f64 -1) 2))) (pow.f64 (/.f64 1 (*.f64 (pow.f64 alpha 2) (pow.f64 (log.f64 (/.f64 -1 u0)) 2))) 1/3))) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 (-.f64 (*.f64 1/3 alpha) (+.f64 (*.f64 4/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 4)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 7)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 4)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 alpha) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 17)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))))))))) (*.f64 (pow.f64 u0 3) (pow.f64 (cbrt.f64 -1) 2))) (pow.f64 (/.f64 1 (*.f64 (pow.f64 alpha 2) (pow.f64 (log.f64 (/.f64 -1 u0)) 2))) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 alpha (log.f64 (/.f64 -1 u0)))) 1/3) (cbrt.f64 -1)) (*.f64 -1/3 (*.f64 (/.f64 1 u0) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 7)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))))))","(+.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 alpha (neg.f64 (log.f64 (neg.f64 u0)))) -2)) (+.f64 (*.f64 1/3 (*.f64 (fma.f64 -1/2 alpha (*.f64 (pow.f64 (/.f64 (pow.f64 alpha 17) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9) 1/3)) (pow.f64 u0 -2))) (/.f64 (*.f64 -1/3 (-.f64 (*.f64 1/3 alpha) (fma.f64 4/9 (*.f64 (pow.f64 (*.f64 (pow.f64 alpha 4) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -5)) 1/9) (neg.f64 (fma.f64 -1/2 alpha (*.f64 (pow.f64 (/.f64 (pow.f64 alpha 17) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9) 1/3)))) (fma.f64 1/27 (cbrt.f64 (*.f64 (pow.f64 alpha 7) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -2))) (*.f64 (*.f64 2/9 (pow.f64 (*.f64 (pow.f64 alpha 4) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -5)) 1/9)) (neg.f64 (fma.f64 -1/2 alpha (*.f64 (pow.f64 (/.f64 (pow.f64 alpha 17) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9) 1/3)))))))) (pow.f64 u0 3)))) (+.f64 (cbrt.f64 (*.f64 (neg.f64 alpha) (neg.f64 (log.f64 (neg.f64 u0))))) (*.f64 (/.f64 -1/3 u0) (pow.f64 (*.f64 (pow.f64 alpha 7) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -2)) 1/9))))"]],"time":239.136962890625,"type":"simplify"},{"compiler":[[7437,4807]],"time":86.779052734375,"type":"eval"},{"alts":[["(*.f64 (neg.f64 alpha) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))) 3) 3))","fresh",1.6307414425846671],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 3)","next",0.8217991332845667],["(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","done",0.3483200195368841],["(*.f64 (neg.f64 alpha) (+.f64 (*.f64 alpha (+.f64 (*.f64 -1/4 (pow.f64 u0 4)) (*.f64 -1/3 (pow.f64 u0 3)))) (*.f64 alpha (+.f64 (*.f64 -1/2 (*.f64 u0 u0)) (neg.f64 u0)))))","fresh",10.052918325854838],["(*.f64 (neg.f64 alpha) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))","done",0.371757519536884],["(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","fresh",10.006921763758164],["(*.f64 (neg.f64 alpha) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (cbrt.f64 alpha)) (pow.f64 alpha 2/3)))","fresh",1.0477233028204425],["(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 1/2 (pow.f64 (*.f64 u0 alpha) 2)))","fresh",13.259994614954934],["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))","fresh",13.661415832208254],["(*.f64 (neg.f64 alpha) (pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3))","done",0.7742667235158727],["(*.f64 (*.f64 (pow.f64 alpha 2/3) (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) (cbrt.f64 (neg.f64 alpha)))","fresh",1.0297432855988864]],"compiler":[[16,13],[13,10],[10,7],[29,21],[10,7],[37,29],[15,11],[21,15],[11,8],[13,10],[15,11],[16,13],[13,10],[29,21],[37,29],[15,11],[21,15],[11,8],[15,11]],"count":[[226,11]],"kept":[{"done":[2,2],"fresh":[7,5],"new":[216,3],"picked":[1,1]}],"min-error":[0.015625],"time":33.89697265625,"type":"prune"},{"compiler":[[46,11]],"locations":[["(cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))",0.1015625,true],["(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))",0.28125,true],["(*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)",0.296875,true],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 3)",0.7335702637479348,true]],"time":9.037109375,"type":"localize"},{"count":[[4,64]],"series":[["(cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))","u0","-inf",0.85595703125],["(cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))","u0","inf",0.804931640625],["(cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))","u0","0",2.031982421875],["(cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))","alpha","-inf",0.200927734375],["(cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))","alpha","inf",0.281982421875],["(cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))","alpha","0",0.27587890625],["(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","u0","-inf",0.248046875],["(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","u0","inf",0.293212890625],["(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","u0","0",0.259033203125],["(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","alpha","-inf",0.18603515625],["(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","alpha","inf",0.151123046875],["(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","alpha","0",0.324951171875],["(*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)","u0","-inf",0.221923828125],["(*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)","u0","inf",0.22607421875],["(*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)","u0","0",0.18310546875],["(*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)","alpha","-inf",0.155029296875],["(*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)","alpha","inf",0.18408203125],["(*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)","alpha","0",0.1640625],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 3)","u0","-inf",4.907958984375],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 3)","u0","inf",4.64892578125],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 3)","u0","0",1.998046875],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 3)","alpha","-inf",0.337890625],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 3)","alpha","inf",0.759033203125],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 3)","alpha","0",0.6220703125]],"time":20.861083984375,"type":"series"},{"count":[[4,164]],"inputs":[["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 3)","(*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)","(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","(cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 0) (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) (*.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 0) (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) (*.f64 0 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))) (*.f64 (cbrt.f64 alpha) (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))) (pow.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))) (*.f64 (pow.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 2/3) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 alpha) (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3)) (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 4/3) 2) (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 2/3) alpha) (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 alpha) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3) (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) (neg.f64 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 alpha (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))) (pow.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) (cbrt.f64 alpha)) (pow.f64 alpha 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3) (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))) (cbrt.f64 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 7/3) (cbrt.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 alpha)) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) (pow.f64 alpha 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 alpha) (*.f64 (pow.f64 alpha 2/3) (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 (*.f64 alpha alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 alpha 2/3) (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))) (cbrt.f64 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 2/3) (*.f64 alpha (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3)) (pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 alpha) (*.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3) (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) (pow.f64 alpha 2/3)) (cbrt.f64 (neg.f64 alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 alpha 2/3) (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) (cbrt.f64 alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 0) (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) (*.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 0) (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) (*.f64 0 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))) (*.f64 (cbrt.f64 alpha) (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))) (pow.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))) (*.f64 (pow.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 2/3) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 alpha) (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3)) (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 4/3) 2) (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 2/3) alpha) (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 alpha) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3) (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) (neg.f64 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 alpha (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))) (pow.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) (cbrt.f64 alpha)) (pow.f64 alpha 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3) (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))) (cbrt.f64 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 7/3) (cbrt.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 alpha)) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) (pow.f64 alpha 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 alpha) (*.f64 (pow.f64 alpha 2/3) (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 (*.f64 alpha alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 alpha 2/3) (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))) (cbrt.f64 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 2/3) (*.f64 alpha (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3)) (pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 alpha) (*.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3) (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) (pow.f64 alpha 2/3)) (cbrt.f64 (neg.f64 alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 alpha 2/3) (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) (cbrt.f64 alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log1p.f64 (neg.f64 u0)) 0) (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 0) (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (log1p.f64 (neg.f64 u0))) (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) (*.f64 0 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))) (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (neg.f64 u0))) (*.f64 (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3) (neg.f64 alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3) (neg.f64 alpha)) (cbrt.f64 (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 alpha)) (*.f64 (pow.f64 alpha 2/3) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))) (pow.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))) (pow.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 2/3) (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (cbrt.f64 (neg.f64 alpha))) (pow.f64 alpha 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) alpha)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 alpha) (cbrt.f64 (log1p.f64 (neg.f64 u0)))) (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 alpha (neg.f64 (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 alpha 2/3) (*.f64 (log1p.f64 (neg.f64 u0)) (cbrt.f64 (neg.f64 alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3) (*.f64 (neg.f64 alpha) (cbrt.f64 (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 alpha 2/3) (log1p.f64 (neg.f64 u0))) (cbrt.f64 (neg.f64 alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (log1p.f64 (neg.f64 u0)))) (*.f64 (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (cbrt.f64 alpha))) (pow.f64 alpha 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 alpha (cbrt.f64 (log1p.f64 (neg.f64 u0)))) (neg.f64 (pow.f64 (log1p.f64 (neg.f64 u0)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (cbrt.f64 alpha)) (neg.f64 (pow.f64 alpha 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 alpha) (neg.f64 (*.f64 (pow.f64 alpha 2/3) (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) (neg.f64 (pow.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) (*.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 0) (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) (*.f64 0 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))) (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))) (cbrt.f64 (*.f64 (pow.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 2/3) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))) (cbrt.f64 (*.f64 (cbrt.f64 alpha) (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 alpha (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))))) (cbrt.f64 (pow.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3) (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))))) (cbrt.f64 (cbrt.f64 alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 alpha)) (cbrt.f64 (*.f64 (pow.f64 alpha 2/3) (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 4/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))) (cbrt.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))) (cbrt.f64 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 alpha) (cbrt.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 alpha)) (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) (cbrt.f64 (neg.f64 alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 alpha 2/3)) (cbrt.f64 (log1p.f64 (neg.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (neg.f64 u0))) (neg.f64 (pow.f64 alpha 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 alpha))) (cbrt.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) (pow.f64 alpha 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) (cbrt.f64 alpha))) (cbrt.f64 (pow.f64 alpha 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha))))))"]],"rules":[["egg-rr",31],["egg-rr",45],["egg-rr",44],["egg-rr",44]],"time":39.31689453125,"type":"rewrite"},{"count":[[228,199]],"inputs":[["(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 26))) 1/9))) (+.f64 (*.f64 2/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 26))) 1/9))) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))))","(+.f64 (*.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 28)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4)) 1/9) (pow.f64 (cbrt.f64 -1) 2))) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))))) (cbrt.f64 -1)) (pow.f64 u0 2)) (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3)) (+.f64 (*.f64 1/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 26))) 1/9))) (+.f64 (*.f64 2/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 26))) 1/9))) (+.f64 (*.f64 -2/9 (*.f64 (/.f64 1 (pow.f64 u0 2)) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (pow.f64 u0 2)) (pow.f64 1 1/3))) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))))))))","(+.f64 (*.f64 -1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/3 (pow.f64 alpha 2)) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 8)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 5)) 1/9) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/3)))) (pow.f64 u0 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 26))) 1/9))) (+.f64 (*.f64 2/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 26))) 1/9))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))) (+.f64 (*.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 28)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4)) 1/9) (pow.f64 (cbrt.f64 -1) 2))) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))))) (cbrt.f64 -1)) (pow.f64 u0 2)) (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3)) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 28)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4)) 1/9) (pow.f64 (cbrt.f64 -1) 2))) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9)))))))) (pow.f64 u0 3)) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/9))) (+.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (-.f64 (*.f64 -1/3 (pow.f64 alpha 2)) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 8)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 5)) 1/9) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/3))))))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 2)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 8)) 1/9) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9)))))))) (pow.f64 u0 3)) (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3)) (+.f64 (*.f64 -2/9 (*.f64 (/.f64 1 (pow.f64 u0 2)) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (pow.f64 u0 2)) (pow.f64 1 1/3))) (*.f64 2/9 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (pow.f64 u0 3)) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 8)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 5)) 1/9))))))))))))","(*.f64 (pow.f64 1 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 6) (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 26))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 13) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 26))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 13) 1/3)))) u0)) (*.f64 (pow.f64 1 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 6) (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))))))","(+.f64 (*.f64 -1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (pow.f64 u0 2)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 26))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 13) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 26))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 13) 1/3)))) u0)) (+.f64 (*.f64 2/9 (*.f64 (/.f64 1 (pow.f64 u0 2)) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 8) 1/3)))) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 6) (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))))) (*.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 -1) 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) (pow.f64 alpha 2))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 28)) (pow.f64 (log.f64 (/.f64 -1 u0)) 4)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 2) 1/3))))) (pow.f64 u0 2)) (pow.f64 (*.f64 1 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))) 1/3))))))","(+.f64 (*.f64 -1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (pow.f64 u0 2)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 26))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 13) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 26))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 13) 1/3)))) u0)) (+.f64 (*.f64 2/9 (*.f64 (/.f64 1 (pow.f64 u0 2)) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 8) 1/3)))) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 6) (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) (pow.f64 alpha 2))) 1/3) (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) (pow.f64 alpha 2))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 (*.f64 1/3 (pow.f64 alpha 2)) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 8)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))))))))))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 2)) (pow.f64 (log.f64 (/.f64 -1 u0)) 8)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))))))) (pow.f64 (cbrt.f64 -1) 2))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 1/3 (pow.f64 alpha 2)) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 8)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))))))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/9) (*.f64 (pow.f64 (cbrt.f64 -1) 1/3) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) (pow.f64 alpha 2))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 28)) (pow.f64 (log.f64 (/.f64 -1 u0)) 4)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 2) 1/3))))))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 8)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))))))))) (pow.f64 u0 3))) (*.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 -1) 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) (pow.f64 alpha 2))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 28)) (pow.f64 (log.f64 (/.f64 -1 u0)) 4)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 2) 1/3))))) (pow.f64 u0 2)) (pow.f64 (*.f64 1 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))) 1/3)))))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 u0 (pow.f64 alpha 2))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))))","(*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (/.f64 (pow.f64 alpha 2) u0))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2)))))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 u0 alpha)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 u0 alpha))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (*.f64 u0 alpha)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)) (*.f64 u0 alpha))))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) (/.f64 alpha u0))","(+.f64 (*.f64 1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) (/.f64 alpha u0)))","(+.f64 (*.f64 1/3 (/.f64 alpha (pow.f64 u0 3))) (+.f64 (*.f64 1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) (/.f64 alpha u0))))","(*.f64 alpha (log.f64 (/.f64 -1 u0)))","(+.f64 (*.f64 alpha (log.f64 (/.f64 -1 u0))) (/.f64 alpha u0))","(+.f64 (*.f64 1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 alpha (log.f64 (/.f64 -1 u0))) (/.f64 alpha u0)))","(+.f64 (*.f64 1/3 (/.f64 alpha (pow.f64 u0 3))) (+.f64 (*.f64 1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 alpha (log.f64 (/.f64 -1 u0))) (/.f64 alpha u0))))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3) (cbrt.f64 -1))","(+.f64 (*.f64 -1/3 (*.f64 (/.f64 (cbrt.f64 -1) u0) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/9))) (*.f64 (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3) (cbrt.f64 -1)))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (*.f64 (cbrt.f64 -1) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9)))) (pow.f64 u0 2)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2) (pow.f64 alpha 4))) 1/3))) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 (cbrt.f64 -1) u0) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/9))) (*.f64 (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (*.f64 (cbrt.f64 -1) (-.f64 (*.f64 -1/3 (pow.f64 alpha 2)) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 8)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 5)) 1/9) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/3))))) (pow.f64 u0 3)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2) (pow.f64 alpha 4))) 1/3))) (+.f64 (*.f64 1/3 (*.f64 (/.f64 (*.f64 (cbrt.f64 -1) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9)))) (pow.f64 u0 2)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2) (pow.f64 alpha 4))) 1/3))) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 (cbrt.f64 -1) u0) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/9))) (*.f64 (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3) (cbrt.f64 -1)))))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))) 1/3) (pow.f64 (cbrt.f64 -1) 2)) (*.f64 -1/3 (*.f64 (/.f64 1 u0) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/9) (pow.f64 (cbrt.f64 -1) 1/3)))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))) 1/3) (pow.f64 (cbrt.f64 -1) 2)) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 1 u0) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/9) (pow.f64 (cbrt.f64 -1) 1/3)))) (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (*.f64 (pow.f64 u0 2) (cbrt.f64 -1))) (pow.f64 (/.f64 1 (*.f64 (pow.f64 alpha 4) (pow.f64 (log.f64 (/.f64 -1 u0)) 2))) 1/3)))))","(+.f64 (*.f64 -1/3 (*.f64 (/.f64 (-.f64 (*.f64 1/3 (pow.f64 alpha 2)) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 8)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))))) (*.f64 (pow.f64 u0 3) (cbrt.f64 -1))) (pow.f64 (/.f64 1 (*.f64 (pow.f64 alpha 4) (pow.f64 (log.f64 (/.f64 -1 u0)) 2))) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))) 1/3) (pow.f64 (cbrt.f64 -1) 2)) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 1 u0) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/9) (pow.f64 (cbrt.f64 -1) 1/3)))) (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (*.f64 (pow.f64 u0 2) (cbrt.f64 -1))) (pow.f64 (/.f64 1 (*.f64 (pow.f64 alpha 4) (pow.f64 (log.f64 (/.f64 -1 u0)) 2))) 1/3))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (+.f64 (log.f64 u0) (log.f64 -1)))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 26))) 1/9))) (+.f64 (*.f64 2/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 26))) 1/9))) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))))","(-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) 4) (pow.f64 alpha 26)) 1/9) u0) 1) (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) (*.f64 alpha alpha)))","(+.f64 (*.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 28)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4)) 1/9) (pow.f64 (cbrt.f64 -1) 2))) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))))) (cbrt.f64 -1)) (pow.f64 u0 2)) (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3)) (+.f64 (*.f64 1/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 26))) 1/9))) (+.f64 (*.f64 2/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 26))) 1/9))) (+.f64 (*.f64 -2/9 (*.f64 (/.f64 1 (pow.f64 u0 2)) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (pow.f64 u0 2)) (pow.f64 1 1/3))) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))))))))","(fma.f64 (*.f64 (fma.f64 1/9 (pow.f64 (/.f64 (pow.f64 alpha 28) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) 4)) 1/9) (*.f64 (*.f64 2/3 (cbrt.f64 (/.f64 (/.f64 1 (*.f64 alpha alpha)) (+.f64 (log.f64 u0) (log.f64 -1))))) (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9))))) (neg.f64 (pow.f64 u0 -2))) (cbrt.f64 (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) (*.f64 alpha alpha))) (+.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) 4) (pow.f64 alpha 26)) 1/9) u0) 1) (fma.f64 -2/9 (*.f64 (pow.f64 u0 -2) (pow.f64 (/.f64 (pow.f64 alpha 34) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9)) (fma.f64 -1/3 (*.f64 (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9))) (pow.f64 u0 -2)) (*.f64 (neg.f64 (*.f64 alpha alpha)) (+.f64 (log.f64 u0) (log.f64 -1)))))))","(+.f64 (*.f64 -1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/3 (pow.f64 alpha 2)) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 8)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 5)) 1/9) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/3)))) (pow.f64 u0 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 26))) 1/9))) (+.f64 (*.f64 2/3 (*.f64 (/.f64 1 u0) (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4) (pow.f64 alpha 26))) 1/9))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))) (+.f64 (*.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 28)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4)) 1/9) (pow.f64 (cbrt.f64 -1) 2))) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))))) (cbrt.f64 -1)) (pow.f64 u0 2)) (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3)) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 28)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 4)) 1/9) (pow.f64 (cbrt.f64 -1) 2))) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9)))))))) (pow.f64 u0 3)) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/9))) (+.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (-.f64 (*.f64 -1/3 (pow.f64 alpha 2)) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 8)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 5)) 1/9) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/3))))))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 2)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 8)) 1/9) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9)))))))) (pow.f64 u0 3)) (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3)) (+.f64 (*.f64 -2/9 (*.f64 (/.f64 1 (pow.f64 u0 2)) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (pow.f64 u0 2)) (pow.f64 1 1/3))) (*.f64 2/9 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))) (pow.f64 u0 3)) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 8)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 5)) 1/9))))))))))))","(fma.f64 -1/3 (/.f64 (-.f64 (*.f64 -1/3 (*.f64 alpha alpha)) (fma.f64 -2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 alpha 8) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -5)) 1/9) (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9)))) (*.f64 -1/27 (cbrt.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -2)))))) (pow.f64 u0 3)) (+.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) 4) (pow.f64 alpha 26)) 1/9) u0) 1) (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) (*.f64 alpha alpha))) (fma.f64 (*.f64 (fma.f64 1/9 (pow.f64 (/.f64 (pow.f64 alpha 28) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) 4)) 1/9) (*.f64 (*.f64 2/3 (cbrt.f64 (/.f64 (/.f64 1 (*.f64 alpha alpha)) (+.f64 (log.f64 u0) (log.f64 -1))))) (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9))))) (neg.f64 (pow.f64 u0 -2))) (cbrt.f64 (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) (*.f64 alpha alpha))) (fma.f64 -1/3 (/.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -2)) 1/9) (fma.f64 1/9 (pow.f64 (/.f64 (pow.f64 alpha 28) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) 4)) 1/9) (*.f64 (*.f64 2/3 (cbrt.f64 (/.f64 (/.f64 1 (*.f64 alpha alpha)) (+.f64 (log.f64 u0) (log.f64 -1))))) (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9)))))) (neg.f64 (pow.f64 u0 3))) (fma.f64 (/.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 (/.f64 1 (*.f64 alpha alpha)) (+.f64 (log.f64 u0) (log.f64 -1)))) (-.f64 (*.f64 -1/3 (*.f64 alpha alpha)) (fma.f64 -2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 alpha 8) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -5)) 1/9) (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9)))) (*.f64 -1/27 (cbrt.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -2))))))) (*.f64 (*.f64 -2/9 (pow.f64 (/.f64 (*.f64 alpha alpha) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) 8)) 1/9)) (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9))))) (neg.f64 (pow.f64 u0 3))) (cbrt.f64 (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) (*.f64 alpha alpha))) (fma.f64 -2/9 (*.f64 (pow.f64 u0 -2) (pow.f64 (/.f64 (pow.f64 alpha 34) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9)) (fma.f64 -1/3 (*.f64 (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9))) (pow.f64 u0 -2)) (*.f64 2/9 (/.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 alpha 8) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -5)) 1/9) (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9)))) (pow.f64 u0 3))))))))))","(*.f64 (pow.f64 1 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 6) (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))))","(*.f64 (*.f64 alpha alpha) (neg.f64 (log.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 26))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 13) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 26))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 13) 1/3)))) u0)) (*.f64 (pow.f64 1 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 6) (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))))))","(+.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) 4) (pow.f64 alpha 26)) 1/9) u0) (*.f64 (*.f64 alpha alpha) (neg.f64 (log.f64 (neg.f64 u0)))))","(+.f64 (*.f64 -1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (pow.f64 u0 2)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 26))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 13) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 26))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 13) 1/3)))) u0)) (+.f64 (*.f64 2/9 (*.f64 (/.f64 1 (pow.f64 u0 2)) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 8) 1/3)))) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 6) (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))))) (*.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 -1) 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) (pow.f64 alpha 2))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 28)) (pow.f64 (log.f64 (/.f64 -1 u0)) 4)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 2) 1/3))))) (pow.f64 u0 2)) (pow.f64 (*.f64 1 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))) 1/3))))))","(fma.f64 -1/3 (*.f64 (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9))) (pow.f64 u0 -2)) (+.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) 4) (pow.f64 alpha 26)) 1/9) u0) (fma.f64 2/9 (*.f64 (pow.f64 u0 -2) (pow.f64 (/.f64 (pow.f64 alpha 34) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9)) (+.f64 (*.f64 (*.f64 alpha alpha) (neg.f64 (log.f64 (neg.f64 u0)))) (*.f64 (*.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 (/.f64 1 (*.f64 alpha alpha)) (neg.f64 (log.f64 (neg.f64 u0))))) (neg.f64 (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9))))) (*.f64 1/9 (pow.f64 (/.f64 (pow.f64 alpha 28) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) 4)) 1/9))) (cbrt.f64 (*.f64 (*.f64 alpha alpha) (neg.f64 (log.f64 (neg.f64 u0)))))) (pow.f64 u0 -2))))))","(+.f64 (*.f64 -1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (pow.f64 u0 2)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 26))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 13) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 (log.f64 (/.f64 -1 u0)) 4) (pow.f64 alpha 26))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 13) 1/3)))) u0)) (+.f64 (*.f64 2/9 (*.f64 (/.f64 1 (pow.f64 u0 2)) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 8) 1/3)))) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (pow.f64 (cbrt.f64 -1) 6) (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) (pow.f64 alpha 2))) 1/3) (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) (pow.f64 alpha 2))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 (*.f64 1/3 (pow.f64 alpha 2)) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 8)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))))))))))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 2)) (pow.f64 (log.f64 (/.f64 -1 u0)) 8)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))))))) (pow.f64 (cbrt.f64 -1) 2))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 1/3 (pow.f64 alpha 2)) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 8)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))))))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/9) (*.f64 (pow.f64 (cbrt.f64 -1) 1/3) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) (pow.f64 alpha 2))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 28)) (pow.f64 (log.f64 (/.f64 -1 u0)) 4)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 2) 1/3))))))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 8)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))))))))) (pow.f64 u0 3))) (*.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 -1) 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 -1 u0)) (pow.f64 alpha 2))) 1/3) (*.f64 (cbrt.f64 -1) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 28)) (pow.f64 (log.f64 (/.f64 -1 u0)) 4)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 2) 1/3))))) (pow.f64 u0 2)) (pow.f64 (*.f64 1 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))) 1/3)))))))","(fma.f64 -1/3 (*.f64 (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9))) (pow.f64 u0 -2)) (+.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) 4) (pow.f64 alpha 26)) 1/9) u0) (fma.f64 2/9 (*.f64 (pow.f64 u0 -2) (pow.f64 (/.f64 (pow.f64 alpha 34) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9)) (+.f64 (-.f64 (*.f64 (*.f64 alpha alpha) (neg.f64 (log.f64 (neg.f64 u0)))) (/.f64 (fma.f64 (cbrt.f64 (*.f64 (*.f64 alpha alpha) (neg.f64 (log.f64 (neg.f64 u0))))) (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 (/.f64 1 (*.f64 alpha alpha)) (neg.f64 (log.f64 (neg.f64 u0))))) (+.f64 (*.f64 -1/3 (*.f64 alpha alpha)) (fma.f64 1/27 (cbrt.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -2))) (*.f64 2/3 (*.f64 (neg.f64 (pow.f64 (*.f64 (pow.f64 alpha 8) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -5)) 1/9)) (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9)))))))) (*.f64 (*.f64 2/9 (pow.f64 (/.f64 (*.f64 alpha alpha) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) 8)) 1/9)) (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9))))) (fma.f64 -1/3 (+.f64 (fma.f64 (*.f64 alpha alpha) 1/3 (neg.f64 (*.f64 1/27 (cbrt.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -2)))))) (*.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 alpha 8) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -5)) 1/9) (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9)))) 2/3)) (fma.f64 1/3 (*.f64 (neg.f64 (pow.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -2)) 1/9)) (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 (/.f64 1 (*.f64 alpha alpha)) (neg.f64 (log.f64 (neg.f64 u0))))) (neg.f64 (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9))))) (*.f64 1/9 (pow.f64 (/.f64 (pow.f64 alpha 28) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) 4)) 1/9)))) (*.f64 (*.f64 2/9 (pow.f64 (*.f64 (pow.f64 alpha 8) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -5)) 1/9)) (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9))))))) (pow.f64 u0 3))) (*.f64 (*.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 (/.f64 1 (*.f64 alpha alpha)) (neg.f64 (log.f64 (neg.f64 u0))))) (neg.f64 (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9))))) (*.f64 1/9 (pow.f64 (/.f64 (pow.f64 alpha 28) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) 4)) 1/9))) (cbrt.f64 (*.f64 (*.f64 alpha alpha) (neg.f64 (log.f64 (neg.f64 u0)))))) (pow.f64 u0 -2))))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 u0 (pow.f64 alpha 2))","(*.f64 u0 (*.f64 alpha alpha))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))","(*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) u0))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 1/2 (pow.f64 (*.f64 u0 alpha) 2)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (+.f64 (log.f64 u0) (log.f64 -1)))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))","(-.f64 (/.f64 (*.f64 alpha alpha) u0) (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) (*.f64 alpha alpha)))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))))","(+.f64 (/.f64 (*.f64 alpha alpha) u0) (fma.f64 1/2 (pow.f64 (/.f64 alpha u0) 2) (*.f64 (neg.f64 (*.f64 alpha alpha)) (+.f64 (log.f64 u0) (log.f64 -1)))))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))))","(fma.f64 1/3 (/.f64 (*.f64 alpha alpha) (pow.f64 u0 3)) (+.f64 (/.f64 (*.f64 alpha alpha) u0) (fma.f64 1/2 (pow.f64 (/.f64 alpha u0) 2) (*.f64 (neg.f64 (*.f64 alpha alpha)) (+.f64 (log.f64 u0) (log.f64 -1))))))","(*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))","(*.f64 (*.f64 alpha alpha) (neg.f64 (log.f64 (neg.f64 u0))))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (/.f64 (pow.f64 alpha 2) u0))","(*.f64 (*.f64 alpha alpha) (+.f64 (/.f64 1 u0) (neg.f64 (log.f64 (neg.f64 u0)))))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2)))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (/.f64 1 u0) (neg.f64 (log.f64 (neg.f64 u0))))) (*.f64 1/2 (pow.f64 (/.f64 alpha u0) 2)))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))))))","(+.f64 (+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (/.f64 1 u0) (neg.f64 (log.f64 (neg.f64 u0))))) (*.f64 1/2 (pow.f64 (/.f64 alpha u0) 2))) (/.f64 (*.f64 alpha alpha) (*.f64 3 (pow.f64 u0 3))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","(*.f64 u0 alpha)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 u0 alpha))","(*.f64 alpha (+.f64 u0 (*.f64 1/2 (*.f64 u0 u0))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (*.f64 u0 alpha)))","(fma.f64 1/2 (*.f64 (*.f64 u0 u0) alpha) (*.f64 alpha (+.f64 u0 (*.f64 1/3 (pow.f64 u0 3)))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)) (*.f64 u0 alpha))))","(+.f64 (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 alpha (+.f64 u0 (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha))","(*.f64 (neg.f64 alpha) (+.f64 (log.f64 u0) (log.f64 -1)))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) (/.f64 alpha u0))","(-.f64 (/.f64 alpha u0) (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha))","(+.f64 (*.f64 1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) (/.f64 alpha u0)))","(fma.f64 1/2 (/.f64 alpha (*.f64 u0 u0)) (-.f64 (/.f64 alpha u0) (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha)))","(+.f64 (*.f64 1/3 (/.f64 alpha (pow.f64 u0 3))) (+.f64 (*.f64 1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) (/.f64 alpha u0))))","(fma.f64 1/3 (/.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (/.f64 alpha (*.f64 u0 u0)) (-.f64 (/.f64 alpha u0) (*.f64 (+.f64 (log.f64 u0) (log.f64 -1)) alpha))))","(*.f64 alpha (log.f64 (/.f64 -1 u0)))","(*.f64 alpha (neg.f64 (log.f64 (neg.f64 u0))))","(+.f64 (*.f64 alpha (log.f64 (/.f64 -1 u0))) (/.f64 alpha u0))","(fma.f64 alpha (neg.f64 (log.f64 (neg.f64 u0))) (/.f64 alpha u0))","(+.f64 (*.f64 1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 alpha (log.f64 (/.f64 -1 u0))) (/.f64 alpha u0)))","(fma.f64 1/2 (/.f64 alpha (*.f64 u0 u0)) (fma.f64 alpha (neg.f64 (log.f64 (neg.f64 u0))) (/.f64 alpha u0)))","(+.f64 (*.f64 1/3 (/.f64 alpha (pow.f64 u0 3))) (+.f64 (*.f64 1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 alpha (log.f64 (/.f64 -1 u0))) (/.f64 alpha u0))))","(fma.f64 1/3 (/.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (/.f64 alpha (*.f64 u0 u0)) (fma.f64 alpha (neg.f64 (log.f64 (neg.f64 u0))) (/.f64 alpha u0))))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (*.f64 (neg.f64 (*.f64 alpha alpha)) (+.f64 (log.f64 u0) (log.f64 -1))))","(+.f64 (*.f64 -1/3 (*.f64 (/.f64 (cbrt.f64 -1) u0) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/9))) (*.f64 (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3) (cbrt.f64 -1)))","(fma.f64 -1/3 (/.f64 (pow.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -2)) 1/9) (neg.f64 u0)) (cbrt.f64 (*.f64 (neg.f64 (*.f64 alpha alpha)) (+.f64 (log.f64 u0) (log.f64 -1)))))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (*.f64 (cbrt.f64 -1) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9)))) (pow.f64 u0 2)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2) (pow.f64 alpha 4))) 1/3))) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 (cbrt.f64 -1) u0) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/9))) (*.f64 (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3) (cbrt.f64 -1))))","(fma.f64 1/3 (*.f64 (*.f64 (fma.f64 1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9) (neg.f64 (*.f64 -1/2 (*.f64 alpha alpha)))) (pow.f64 u0 -2)) (cbrt.f64 (/.f64 (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -2) (pow.f64 alpha 4)))) (fma.f64 -1/3 (/.f64 (pow.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -2)) 1/9) (neg.f64 u0)) (cbrt.f64 (*.f64 (neg.f64 (*.f64 alpha alpha)) (+.f64 (log.f64 u0) (log.f64 -1))))))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (*.f64 (cbrt.f64 -1) (-.f64 (*.f64 -1/3 (pow.f64 alpha 2)) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 8)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 5)) 1/9) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9))))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/3))))) (pow.f64 u0 3)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2) (pow.f64 alpha 4))) 1/3))) (+.f64 (*.f64 1/3 (*.f64 (/.f64 (*.f64 (cbrt.f64 -1) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 34)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1))) 1/9)))) (pow.f64 u0 2)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2) (pow.f64 alpha 4))) 1/3))) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 (cbrt.f64 -1) u0) (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) 2)) 1/9))) (*.f64 (pow.f64 (*.f64 1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))) 1/3) (cbrt.f64 -1)))))","(+.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -2) (pow.f64 alpha 4))) (+.f64 (/.f64 (*.f64 1/3 (+.f64 (fma.f64 -2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 alpha 8) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -5)) 1/9) (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9)))) (*.f64 -1/27 (cbrt.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -2))))) (*.f64 1/3 (*.f64 alpha alpha)))) (pow.f64 u0 3)) (*.f64 1/3 (*.f64 (fma.f64 1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (+.f64 (log.f64 u0) (log.f64 -1))) 1/9) (neg.f64 (*.f64 -1/2 (*.f64 alpha alpha)))) (pow.f64 u0 -2))))) (fma.f64 -1/3 (/.f64 (pow.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (+.f64 (log.f64 u0) (log.f64 -1)) -2)) 1/9) (neg.f64 u0)) (cbrt.f64 (*.f64 (neg.f64 (*.f64 alpha alpha)) (+.f64 (log.f64 u0) (log.f64 -1))))))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(cbrt.f64 (*.f64 (*.f64 alpha alpha) (neg.f64 (log.f64 (neg.f64 u0)))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))) 1/3) (pow.f64 (cbrt.f64 -1) 2)) (*.f64 -1/3 (*.f64 (/.f64 1 u0) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/9) (pow.f64 (cbrt.f64 -1) 1/3)))))","(+.f64 (cbrt.f64 (*.f64 (*.f64 alpha alpha) (neg.f64 (log.f64 (neg.f64 u0))))) (*.f64 (/.f64 -1/3 u0) (neg.f64 (pow.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -2)) 1/9))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))) 1/3) (pow.f64 (cbrt.f64 -1) 2)) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 1 u0) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/9) (pow.f64 (cbrt.f64 -1) 1/3)))) (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (*.f64 (pow.f64 u0 2) (cbrt.f64 -1))) (pow.f64 (/.f64 1 (*.f64 (pow.f64 alpha 4) (pow.f64 (log.f64 (/.f64 -1 u0)) 2))) 1/3)))))","(+.f64 (cbrt.f64 (*.f64 (*.f64 alpha alpha) (neg.f64 (log.f64 (neg.f64 u0))))) (fma.f64 -1/3 (/.f64 (pow.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -2)) 1/9) (neg.f64 u0)) (/.f64 (*.f64 (*.f64 (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9))) (cbrt.f64 (/.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -2) (pow.f64 alpha 4)))) (neg.f64 (pow.f64 u0 -2))) 3)))","(+.f64 (*.f64 -1/3 (*.f64 (/.f64 (-.f64 (*.f64 1/3 (pow.f64 alpha 2)) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 8)) (pow.f64 (log.f64 (/.f64 -1 u0)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))))) (*.f64 (pow.f64 u0 3) (cbrt.f64 -1))) (pow.f64 (/.f64 1 (*.f64 (pow.f64 alpha 4) (pow.f64 (log.f64 (/.f64 -1 u0)) 2))) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))) 1/3) (pow.f64 (cbrt.f64 -1) 2)) (+.f64 (*.f64 -1/3 (*.f64 (/.f64 1 u0) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 14)) (pow.f64 (log.f64 (/.f64 -1 u0)) 2)) 1/9) (pow.f64 (cbrt.f64 -1) 1/3)))) (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/2 (pow.f64 alpha 2)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 alpha 34)) (log.f64 (/.f64 -1 u0))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (*.f64 (pow.f64 u0 2) (cbrt.f64 -1))) (pow.f64 (/.f64 1 (*.f64 (pow.f64 alpha 4) (pow.f64 (log.f64 (/.f64 -1 u0)) 2))) 1/3))))))","(fma.f64 -1/3 (/.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -2) (pow.f64 alpha 4))) (+.f64 (*.f64 -1/3 (*.f64 alpha alpha)) (fma.f64 1/27 (cbrt.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -2))) (*.f64 2/3 (*.f64 (neg.f64 (pow.f64 (*.f64 (pow.f64 alpha 8) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -5)) 1/9)) (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9)))))))) (pow.f64 u0 3)) (+.f64 (cbrt.f64 (*.f64 (*.f64 alpha alpha) (neg.f64 (log.f64 (neg.f64 u0))))) (fma.f64 -1/3 (/.f64 (pow.f64 (*.f64 (pow.f64 alpha 14) (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -2)) 1/9) (neg.f64 u0)) (/.f64 (*.f64 (*.f64 (fma.f64 -1/2 (*.f64 alpha alpha) (*.f64 1/3 (pow.f64 (/.f64 (pow.f64 alpha 34) (neg.f64 (log.f64 (neg.f64 u0)))) 1/9))) (cbrt.f64 (/.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u0))) -2) (pow.f64 alpha 4)))) (neg.f64 (pow.f64 u0 -2))) 3))))"]],"time":332.717041015625,"type":"simplify"},{"compiler":[[7288,4789]],"time":79.012939453125,"type":"eval"},{"alts":[["(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","done",0.3483200195368841],["(*.f64 (neg.f64 alpha) (+.f64 (*.f64 alpha (+.f64 (*.f64 -1/4 (pow.f64 u0 4)) (*.f64 -1/3 (pow.f64 u0 3)))) (*.f64 alpha (+.f64 (*.f64 -1/2 (*.f64 u0 u0)) (neg.f64 u0)))))","fresh",10.052918325854838],["(pow.f64 (cbrt.f64 (+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 1/2 (pow.f64 (*.f64 u0 alpha) 2)))) 3)","fresh",13.49448665136578],["(*.f64 (*.f64 (pow.f64 alpha 2/3) (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) (cbrt.f64 (neg.f64 alpha)))","fresh",1.0297432855988864],["(*.f64 (neg.f64 alpha) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))","done",0.371757519536884],["(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","fresh",10.006921763758164],["(*.f64 (neg.f64 alpha) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (cbrt.f64 alpha)) (pow.f64 alpha 2/3)))","fresh",1.0477233028204425],["(*.f64 (neg.f64 alpha) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))) 3) 3))","fresh",1.6307414425846671],["(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 1/2 (pow.f64 (*.f64 u0 alpha) 2)))","fresh",13.259994614954934],["(pow.f64 (cbrt.f64 (*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))) 3)","fresh",0.808822851663913],["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))","fresh",13.661415832208254],["(*.f64 (neg.f64 alpha) (pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3))","done",0.7742667235158727]],"compiler":[[10,7],[29,21],[24,18],[15,11],[10,7],[37,29],[15,11],[16,13],[21,15],[13,10],[11,8],[13,10]],"count":[[210,12]],"kept":[{"done":[3,3],"fresh":[7,7],"new":[199,2],"picked":[1,0]}],"min-error":[0.0078125],"time":30.0,"type":"prune"},{"accuracy":[0.348320019536884],"baseline":[0.3483200195368841],"branch":[["alpha",0.3483200195368841,1],["u0",0.3483200195368841,1],["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))",0.3483200195368841,1],["(*.f64 (neg.f64 alpha) alpha)",0.348320019536884,1],["(log.f64 (-.f64 1 u0))",0.3483200195368841,1],["(-.f64 1 u0)",0.3483200195368841,1]],"compiler":[[3,2],[3,2],[11,8],[6,4],[6,5],[5,4],[285,162]],"count":[[18,1]],"inputs":[["(pow.f64 (cbrt.f64 (+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 1/2 (pow.f64 (*.f64 u0 alpha) 2)))) 3)","(pow.f64 (cbrt.f64 (*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))) 3)","(*.f64 (neg.f64 alpha) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha))) 3) 3))","(pow.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))) alpha)) 3)","(*.f64 (*.f64 (pow.f64 alpha 2/3) (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) (cbrt.f64 (neg.f64 alpha)))","(*.f64 (cbrt.f64 (neg.f64 alpha)) (*.f64 (pow.f64 alpha 2/3) (*.f64 (log1p.f64 (neg.f64 u0)) alpha)))","(*.f64 (neg.f64 alpha) (+.f64 (*.f64 alpha (+.f64 (*.f64 -1/4 (pow.f64 u0 4)) (*.f64 -1/3 (pow.f64 u0 3)))) (*.f64 alpha (+.f64 (*.f64 -1/2 (*.f64 u0 u0)) (neg.f64 u0)))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(*.f64 (neg.f64 alpha) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (cbrt.f64 alpha)) (pow.f64 alpha 2/3)))","(*.f64 (neg.f64 alpha) (pow.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha)) 3))","(-.f64 1 (+.f64 1 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) alpha) alpha)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 1/2 (pow.f64 (*.f64 u0 alpha) 2)))","(pow.f64 (cbrt.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha)) 3)","(*.f64 (pow.f64 alpha 2/3) (neg.f64 (*.f64 (pow.f64 alpha 4/3) (log1p.f64 (neg.f64 u0)))))","(*.f64 (neg.f64 alpha) (*.f64 (log1p.f64 (neg.f64 u0)) alpha))","(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))"]],"link":["."],"name":["Beckmann Distribution sample, tan2theta, alphax == alphay"],"oracle":[33.204410184685194],"outputs":[["(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))"]],"time":44.693115234375,"times":[["alpha",6.244140625],["u0",6.2939453125],["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))",6.27392578125],["(*.f64 (neg.f64 alpha) alpha)",6.44384765625],["(log.f64 (-.f64 1 u0))",7.697998046875],["(-.f64 1 u0)",6.476806640625]],"type":"regimes"},{"compiler":[[10,7]],"inputs":[["(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (neg.f64 (*.f64 alpha alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)) alpha)"]],"stop":[["fuel",1]],"time":36.868896484375,"type":"simplify"},{"time":0.014892578125,"type":"soundness"},{"compiler":[[10,7]],"remove-preprocessing":[[]],"time":8.22412109375,"type":"end"}]
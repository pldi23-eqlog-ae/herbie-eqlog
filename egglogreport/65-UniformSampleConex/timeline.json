[{"compiler":[[51,37]],"method":["search"],"sampling":[[12,1.3338401913477714e-5,1.9054859876396735e-6,0.9999847561120988],[11,1.3338401913477714e-5,1.9054859876396735e-6,0.9999847561120988],[10,1.3338401913477714e-5,1.9054859876396735e-6,0.9999847561120988],[9,1.1432915925838041e-5,3.810971975279347e-6,0.9999847561120988],[8,1.1432915925838041e-5,3.810971975279347e-6,0.9999847561120988],[7,1.1432915925838041e-5,3.810971975279347e-6,0.9999847561120988],[6,7.621943950558694e-6,7.621943950558694e-6,0.9999847561120989],[5,7.621943950558694e-6,7.621943950558694e-6,0.9999847561120989],[4,7.621943950558694e-6,7.621943950558694e-6,0.9999847561120989],[3,0.0,1.5243887901117388e-5,0.9999847561120989],[2,0.0,1.5243887901117388e-5,0.9999847561120989],[1,0.0,1.5243887901117388e-5,0.9999847561120989],[0,0.0,1.5243887901117388e-5,0.9999847561120989]],"time":55.7548828125,"type":"analyze"},{"outcomes":[["body",256,"valid",743.986083984375,8256]],"time":751.693115234375,"type":"sample"},{"compiler":[[28,20]],"inputs":[["0","1","2"],["(*.f64 (cos.f64 (*.f64 (*.f64 uy 2) (PI.f64))) (sqrt.f64 (-.f64 1 (*.f64 (+.f64 (-.f64 1 ux) (*.f64 ux maxCos)) (+.f64 (-.f64 1 ux) (*.f64 ux maxCos))))))","(*.f64 (cos.f64 (*.f64 (*.f64 ux 2) (PI.f64))) (sqrt.f64 (-.f64 1 (*.f64 (+.f64 (-.f64 1 uy) (*.f64 uy maxCos)) (+.f64 (-.f64 1 uy) (*.f64 uy maxCos))))))","(*.f64 (cos.f64 (*.f64 (*.f64 uy 2) (PI.f64))) (sqrt.f64 (-.f64 1 (*.f64 (+.f64 (-.f64 1 maxCos) (*.f64 maxCos ux)) (+.f64 (-.f64 1 maxCos) (*.f64 maxCos ux))))))","(*.f64 (cos.f64 (*.f64 (*.f64 maxCos 2) (PI.f64))) (sqrt.f64 (-.f64 1 (*.f64 (+.f64 (-.f64 1 ux) (*.f64 ux uy)) (+.f64 (-.f64 1 ux) (*.f64 ux uy))))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(*.f64 (cos.f64 (*.f64 (*.f64 uy 2) (PI.f64))) (sqrt.f64 (-.f64 1 (*.f64 (+.f64 (-.f64 1 ux) (*.f64 ux maxCos)) (+.f64 (-.f64 1 ux) (*.f64 ux maxCos))))))","(*.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) uy) 2)) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))","(*.f64 (cos.f64 (*.f64 (*.f64 ux 2) (PI.f64))) (sqrt.f64 (-.f64 1 (*.f64 (+.f64 (-.f64 1 uy) (*.f64 uy maxCos)) (+.f64 (-.f64 1 uy) (*.f64 uy maxCos))))))","(*.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) ux) 2)) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 uy maxCos (-.f64 1 uy)) 2))))","(*.f64 (cos.f64 (*.f64 (*.f64 uy 2) (PI.f64))) (sqrt.f64 (-.f64 1 (*.f64 (+.f64 (-.f64 1 maxCos) (*.f64 maxCos ux)) (+.f64 (-.f64 1 maxCos) (*.f64 maxCos ux))))))","(*.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) uy) 2)) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 maxCos)) 2))))","(*.f64 (cos.f64 (*.f64 (*.f64 maxCos 2) (PI.f64))) (sqrt.f64 (-.f64 1 (*.f64 (+.f64 (-.f64 1 ux) (*.f64 ux uy)) (+.f64 (-.f64 1 ux) (*.f64 ux uy))))))","(*.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) maxCos) 2)) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 uy ux (-.f64 1 ux)) 2))))"]],"symmetry":[[]],"time":64.118896484375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (cos.f64 (*.f64 (*.f64 uy 2) (PI.f64))) (sqrt.f64 (-.f64 1 (*.f64 (+.f64 (-.f64 1 ux) (*.f64 ux maxCos)) (+.f64 (-.f64 1 ux) (*.f64 ux maxCos))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cos.f64 (*.f64 (*.f64 uy 2) (PI.f64))) (sqrt.f64 (-.f64 1 (*.f64 (+.f64 (-.f64 1 ux) (*.f64 ux maxCos)) (+.f64 (-.f64 1 ux) (*.f64 ux maxCos))))))","(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))"]],"time":23.083984375,"type":"simplify"},{"compiler":[[46,32]],"time":0.614990234375,"type":"eval"},{"alts":[["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))","next",12.132140884313674]],"compiler":[[21,16],[21,16]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[12.132140884313674],"time":1.110107421875,"type":"prune"},{"compiler":[[79,43]],"locations":[["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))",0.24609375,true],["(*.f64 uy (+.f64 (PI.f64) (PI.f64)))",0.27734375,true],["(pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)",0.5130462890737681,true],["(-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))",12.030483766494624,true]],"time":18.90087890625,"type":"localize"},{"count":[[4,76]],"series":[["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))","maxCos","-inf",0.698974609375],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))","maxCos","inf",0.781005859375],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))","maxCos","0",1.012939453125],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))","ux","-inf",1.088134765625],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))","ux","inf",0.786865234375],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))","ux","0",1.605224609375],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))","uy","-inf",0.348876953125],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))","uy","inf",0.700927734375],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))","uy","0",0.91796875],["(*.f64 uy (+.f64 (PI.f64) (PI.f64)))","uy","-inf",0.277099609375],["(*.f64 uy (+.f64 (PI.f64) (PI.f64)))","uy","inf",0.410888671875],["(*.f64 uy (+.f64 (PI.f64) (PI.f64)))","uy","0",0.469970703125],["(pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)","maxCos","-inf",0.18212890625],["(pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)","maxCos","inf",0.4140625],["(pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)","maxCos","0",0.196044921875],["(pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)","ux","-inf",0.22900390625],["(pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)","ux","inf",0.18505859375],["(pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)","ux","0",0.205810546875],["(-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))","maxCos","-inf",0.39892578125],["(-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))","maxCos","inf",0.362060546875],["(-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))","maxCos","0",0.408935546875],["(-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))","ux","-inf",0.68896484375],["(-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))","ux","inf",0.554931640625],["(-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))","ux","0",0.610107421875]],"time":14.003173828125,"type":"series"},{"count":[[4,233]],"inputs":[["(-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))","(pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)","(*.f64 uy (+.f64 (PI.f64) (PI.f64)))","(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 0) (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 1/2) (*.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) (*.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (*.f64 1/2 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) (*.f64 0 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 1/2 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (-.f64 1/2 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (PI.f64) (-.f64 (neg.f64 (PI.f64)) (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (PI.f64) (PI.f64)) (-.f64 (neg.f64 (*.f64 (PI.f64) (PI.f64))) (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) (neg.f64 (/.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6) (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 (*.f64 (*.f64 ux maxCos) (fma.f64 ux maxCos (-.f64 1 ux)))) (*.f64 (-.f64 1 ux) (fma.f64 ux maxCos (-.f64 1 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 (*.f64 (fma.f64 ux maxCos (-.f64 1 ux)) (*.f64 ux maxCos))) (*.f64 (fma.f64 ux maxCos (-.f64 1 ux)) (-.f64 1 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (PI.f64) (PI.f64)) (+.f64 (*.f64 (PI.f64) (PI.f64)) (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (PI.f64) (+.f64 (PI.f64) (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) (/.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6) (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) (neg.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (fma.f64 ux maxCos (-.f64 1 ux))) (-.f64 -1 (fma.f64 ux maxCos (-.f64 1 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (fma.f64 ux maxCos 1) (-.f64 1 ux)) (-.f64 1 (fma.f64 ux maxCos (-.f64 1 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) -1))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) 1) (*.f64 (neg.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) -1) (*.f64 (neg.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) -1) (*.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) (neg.f64 (sqrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (*.f64 (sqrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) (neg.f64 (sqrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (sqrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (sqrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (*.f64 1 (neg.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (fma.f64 ux maxCos (-.f64 1 ux))) (+.f64 (fma.f64 ux maxCos 1) (-.f64 1 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (fma.f64 ux maxCos (-.f64 1 ux))) (-.f64 -1 (neg.f64 (fma.f64 ux maxCos (-.f64 1 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (/.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) (pow.f64 (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (/.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6)) (pow.f64 (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6))) 1) (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6))) 2) (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4)) (cbrt.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) (-.f64 1 (cbrt.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 0) (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 3/2)) (sqrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) (sqrt.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (fma.f64 ux maxCos (-.f64 1 ux))) (+.f64 -1 (fma.f64 ux maxCos (-.f64 1 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6)) (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6)) (/.f64 1 (neg.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (/.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) -1)) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6) 3)) (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (+.f64 1 (+.f64 (pow.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) 6) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6)) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (pow.f64 (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6) 3)) 1) (*.f64 (+.f64 1 (+.f64 (pow.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) 6) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6))) (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6)) 1) (*.f64 (neg.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6)) 1) (*.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6)) (neg.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6)) (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6)) 1) (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (*.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6))) (*.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6)))) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6)) 1) (neg.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 2))) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 3/2) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 3/2) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 1/2 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (cbrt.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 ux maxCos (-.f64 1 ux)) (neg.f64 (fma.f64 ux maxCos (-.f64 1 ux))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (fma.f64 ux maxCos (-.f64 1 ux))) (fma.f64 ux maxCos (-.f64 1 ux)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (PI.f64) (PI.f64)) 0 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (PI.f64)) 0 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (PI.f64) 0 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (PI.f64) (PI.f64))) 0 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 ux maxCos (-.f64 1 ux)) (*.f64 ux maxCos)) (*.f64 (fma.f64 ux maxCos (-.f64 1 ux)) (-.f64 1 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 ux maxCos) (fma.f64 ux maxCos (-.f64 1 ux))) (*.f64 (-.f64 1 ux) (fma.f64 ux maxCos (-.f64 1 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 ux) (fma.f64 ux maxCos (-.f64 1 ux))) (*.f64 (*.f64 ux maxCos) (fma.f64 ux maxCos (-.f64 1 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 ux maxCos (-.f64 1 ux)) (-.f64 1 ux)) (*.f64 (fma.f64 ux maxCos (-.f64 1 ux)) (*.f64 ux maxCos)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) 0) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) 1/2) (*.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) (*.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 ux maxCos (-.f64 1 ux)) (fma.f64 ux maxCos 1)) (*.f64 (fma.f64 ux maxCos (-.f64 1 ux)) (neg.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (*.f64 ux maxCos) (fma.f64 ux maxCos (-.f64 1 ux)))) (*.f64 1 (*.f64 (-.f64 1 ux) (fma.f64 ux maxCos (-.f64 1 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (fma.f64 ux maxCos (-.f64 1 ux)) (*.f64 ux maxCos))) (*.f64 1 (*.f64 (fma.f64 ux maxCos (-.f64 1 ux)) (-.f64 1 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) (*.f64 1/2 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) (*.f64 0 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 ux maxCos 1) (fma.f64 ux maxCos (-.f64 1 ux))) (*.f64 (neg.f64 ux) (fma.f64 ux maxCos (-.f64 1 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 ux maxCos) (fma.f64 ux maxCos (-.f64 1 ux))) 1) (*.f64 (*.f64 (-.f64 1 ux) (fma.f64 ux maxCos (-.f64 1 ux))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 ux maxCos (-.f64 1 ux)) (*.f64 ux maxCos)) 1) (*.f64 (*.f64 (fma.f64 ux maxCos (-.f64 1 ux)) (-.f64 1 ux)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) (cbrt.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 ux maxCos (-.f64 1 ux))) (neg.f64 (fma.f64 ux maxCos (-.f64 1 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (fma.f64 ux maxCos (-.f64 1 ux))) -1) (*.f64 (neg.f64 (fma.f64 ux maxCos (-.f64 1 ux))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 ux maxCos (-.f64 1 ux)) (fma.f64 ux maxCos (-.f64 1 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4)) (cbrt.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 ux maxCos (-.f64 1 ux))) (pow.f64 (cbrt.f64 (fma.f64 ux maxCos (-.f64 1 ux))) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 ux maxCos (-.f64 1 ux))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 3) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 3) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (fma.f64 ux maxCos (-.f64 1 ux))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 ux maxCos (-.f64 1 ux)) (*.f64 ux maxCos) (*.f64 (fma.f64 ux maxCos (-.f64 1 ux)) (-.f64 1 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 ux maxCos) (fma.f64 ux maxCos (-.f64 1 ux)) (*.f64 (-.f64 1 ux) (fma.f64 ux maxCos (-.f64 1 ux))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 1/2) (*.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (*.f64 1/2 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) (*.f64 0 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 uy (PI.f64)) (*.f64 uy (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (PI.f64) (PI.f64))) (*.f64 (cbrt.f64 (*.f64 4 (*.f64 (PI.f64) (PI.f64)))) uy))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 uy (+.f64 (PI.f64) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (PI.f64) (PI.f64)) uy)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (PI.f64) (cbrt.f64 uy)) (+.f64 (cbrt.f64 (*.f64 uy uy)) (cbrt.f64 (*.f64 uy uy))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 uy (cbrt.f64 (PI.f64))) (*.f64 2 (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (PI.f64)) (+.f64 (*.f64 (cbrt.f64 (*.f64 (PI.f64) (PI.f64))) uy) (*.f64 (cbrt.f64 (*.f64 (PI.f64) (PI.f64))) uy)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 uy (PI.f64))) (+.f64 (cbrt.f64 (pow.f64 (*.f64 uy (PI.f64)) 2)) (cbrt.f64 (pow.f64 (*.f64 uy (PI.f64)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 (PI.f64) (PI.f64))) uy) (cbrt.f64 (*.f64 8 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 uy uy)) (PI.f64)) (+.f64 (cbrt.f64 uy) (cbrt.f64 uy)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 uy (PI.f64)) 2)) (+.f64 (cbrt.f64 (*.f64 uy (PI.f64))) (cbrt.f64 (*.f64 uy (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (pow.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 2)) (cbrt.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 uy (cbrt.f64 (+.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (*.f64 4 (*.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) (cbrt.f64 uy)) (cbrt.f64 (*.f64 uy uy)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 uy uy) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (PI.f64) (+.f64 uy uy))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 uy (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 uy (PI.f64)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (*.f64 (PI.f64) (cbrt.f64 uy)) (*.f64 (PI.f64) (cbrt.f64 uy))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (PI.f64) (PI.f64))) (+.f64 (*.f64 uy (cbrt.f64 (PI.f64))) (*.f64 uy (cbrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (PI.f64) uy (*.f64 uy (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 uy (PI.f64) (*.f64 uy (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (PI.f64) (cbrt.f64 uy)) (cbrt.f64 (*.f64 uy uy)) (*.f64 uy (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (PI.f64)) (*.f64 (cbrt.f64 (*.f64 (PI.f64) (PI.f64))) uy) (*.f64 uy (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (PI.f64)) (*.f64 uy (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 uy (cbrt.f64 (PI.f64))) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))) (*.f64 uy (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 uy (PI.f64))) (cbrt.f64 (pow.f64 (*.f64 uy (PI.f64)) 2)) (*.f64 uy (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 uy (PI.f64)) (*.f64 uy (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 uy (PI.f64)) 1 (*.f64 uy (PI.f64)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) 0) (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) 1/2) (*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) (*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (*.f64 1/2 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) (*.f64 0 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2)) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2) (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2) (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (sqrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) (*.f64 (sqrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6)))) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) 3))))))"]],"rules":[["egg-rr",30],["egg-rr",50],["egg-rr",40],["egg-rr",113]],"time":48.4990234375,"type":"rewrite"},{"count":[[309,288]],"inputs":[["(*.f64 (-.f64 2 (*.f64 2 maxCos)) ux)","(+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))","(+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(*.f64 -1 (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2)))","(+.f64 (*.f64 ux (+.f64 2 (*.f64 -2 maxCos))) (*.f64 -1 (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2))))","(+.f64 (*.f64 ux (+.f64 2 (*.f64 -2 maxCos))) (*.f64 -1 (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2))))","(+.f64 (*.f64 ux (+.f64 2 (*.f64 -2 maxCos))) (*.f64 -1 (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2))))","(-.f64 1 (pow.f64 (-.f64 1 ux) 2))","(-.f64 (+.f64 1 (*.f64 -2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux)))) (pow.f64 (-.f64 1 ux) 2))","(-.f64 (+.f64 1 (+.f64 (*.f64 -2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))) (pow.f64 (-.f64 1 ux) 2))","(-.f64 (+.f64 1 (+.f64 (*.f64 -2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))) (pow.f64 (-.f64 1 ux) 2))","(*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))","(+.f64 (*.f64 -2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(-.f64 (+.f64 1 (+.f64 (*.f64 -2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))) (pow.f64 (-.f64 1 ux) 2))","(-.f64 (+.f64 1 (+.f64 (*.f64 -2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))) (pow.f64 (-.f64 1 ux) 2))","(*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))","(+.f64 (*.f64 -2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(-.f64 (+.f64 1 (+.f64 (*.f64 -2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))) (pow.f64 (-.f64 1 ux) 2))","(-.f64 (+.f64 1 (+.f64 (*.f64 -2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))) (pow.f64 (-.f64 1 ux) 2))","1","(+.f64 1 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux))","(+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))","(+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))","(+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -2 maxCos) 2) ux)) (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2)))","(+.f64 1 (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -2 maxCos) 2) ux)) (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2))))","(+.f64 1 (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -2 maxCos) 2) ux)) (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2))))","(pow.f64 (-.f64 1 ux) 2)","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (pow.f64 (-.f64 1 ux) 2))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2)))","(+.f64 (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))) (*.f64 -2 (*.f64 (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))))","(+.f64 (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))) (+.f64 (*.f64 2/3 (*.f64 (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))) (*.f64 -2 (*.f64 (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2)))))))","(+.f64 (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))) (+.f64 (*.f64 2/3 (*.f64 (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))) (+.f64 (*.f64 -4/45 (*.f64 (*.f64 (pow.f64 uy 6) (pow.f64 (PI.f64) 6)) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))) (*.f64 -2 (*.f64 (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 1 ux) 2))))","(+.f64 (*.f64 -1 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (sqrt.f64 (/.f64 1 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))))) (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))))","(+.f64 (*.f64 -1 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (sqrt.f64 (/.f64 1 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))))) (+.f64 (*.f64 -1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (pow.f64 maxCos 2) (+.f64 (pow.f64 ux 2) (pow.f64 (*.f64 -1 (*.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))) (*.f64 (-.f64 1 ux) ux))) 2)))) (sqrt.f64 (/.f64 1 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))))) (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 1 ux) 2))))))","(+.f64 (*.f64 -1 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (sqrt.f64 (/.f64 1 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))))) (+.f64 (*.f64 -1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 1 ux) (*.f64 (pow.f64 maxCos 3) (*.f64 ux (+.f64 (pow.f64 ux 2) (pow.f64 (*.f64 -1 (*.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))) (*.f64 (-.f64 1 ux) ux))) 2)))))) (sqrt.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)) 3))))) (+.f64 (*.f64 -1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (pow.f64 maxCos 2) (+.f64 (pow.f64 ux 2) (pow.f64 (*.f64 -1 (*.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))) (*.f64 (-.f64 1 ux) ux))) 2)))) (sqrt.f64 (/.f64 1 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))))) (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 2 (*.f64 2 maxCos)) ux)","(*.f64 (fma.f64 -2 maxCos 2) ux)","(+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(fma.f64 (fma.f64 -2 maxCos 2) ux (neg.f64 (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2)))","(+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(fma.f64 (fma.f64 -2 maxCos 2) ux (neg.f64 (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2)))","(+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(fma.f64 (fma.f64 -2 maxCos 2) ux (neg.f64 (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2)))","(*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))","(neg.f64 (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2))","(+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(fma.f64 (fma.f64 -2 maxCos 2) ux (neg.f64 (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2)))","(+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(fma.f64 (fma.f64 -2 maxCos 2) ux (neg.f64 (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2)))","(+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(fma.f64 (fma.f64 -2 maxCos 2) ux (neg.f64 (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2)))","(*.f64 -1 (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2)))","(neg.f64 (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2))","(+.f64 (*.f64 ux (+.f64 2 (*.f64 -2 maxCos))) (*.f64 -1 (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2))))","(fma.f64 (fma.f64 -2 maxCos 2) ux (neg.f64 (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2)))","(+.f64 (*.f64 ux (+.f64 2 (*.f64 -2 maxCos))) (*.f64 -1 (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2))))","(fma.f64 (fma.f64 -2 maxCos 2) ux (neg.f64 (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2)))","(+.f64 (*.f64 ux (+.f64 2 (*.f64 -2 maxCos))) (*.f64 -1 (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2))))","(fma.f64 (fma.f64 -2 maxCos 2) ux (neg.f64 (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2)))","(-.f64 1 (pow.f64 (-.f64 1 ux) 2))","(-.f64 (+.f64 1 (*.f64 -2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux)))) (pow.f64 (-.f64 1 ux) 2))","(-.f64 (fma.f64 (*.f64 -2 (-.f64 1 ux)) (*.f64 maxCos ux) 1) (pow.f64 (-.f64 1 ux) 2))","(-.f64 (+.f64 1 (+.f64 (*.f64 -2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))) (pow.f64 (-.f64 1 ux) 2))","(-.f64 (-.f64 (fma.f64 (*.f64 -2 (-.f64 1 ux)) (*.f64 maxCos ux) 1) (pow.f64 (*.f64 maxCos ux) 2)) (pow.f64 (-.f64 1 ux) 2))","(-.f64 (+.f64 1 (+.f64 (*.f64 -2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))) (pow.f64 (-.f64 1 ux) 2))","(-.f64 (-.f64 (fma.f64 (*.f64 -2 (-.f64 1 ux)) (*.f64 maxCos ux) 1) (pow.f64 (*.f64 maxCos ux) 2)) (pow.f64 (-.f64 1 ux) 2))","(*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))","(neg.f64 (pow.f64 (*.f64 maxCos ux) 2))","(+.f64 (*.f64 -2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(fma.f64 (*.f64 -2 (-.f64 1 ux)) (*.f64 maxCos ux) (neg.f64 (pow.f64 (*.f64 maxCos ux) 2)))","(-.f64 (+.f64 1 (+.f64 (*.f64 -2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))) (pow.f64 (-.f64 1 ux) 2))","(-.f64 (-.f64 (fma.f64 (*.f64 -2 (-.f64 1 ux)) (*.f64 maxCos ux) 1) (pow.f64 (*.f64 maxCos ux) 2)) (pow.f64 (-.f64 1 ux) 2))","(-.f64 (+.f64 1 (+.f64 (*.f64 -2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))) (pow.f64 (-.f64 1 ux) 2))","(-.f64 (-.f64 (fma.f64 (*.f64 -2 (-.f64 1 ux)) (*.f64 maxCos ux) 1) (pow.f64 (*.f64 maxCos ux) 2)) (pow.f64 (-.f64 1 ux) 2))","(*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))","(neg.f64 (pow.f64 (*.f64 maxCos ux) 2))","(+.f64 (*.f64 -2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(fma.f64 (*.f64 -2 (-.f64 1 ux)) (*.f64 maxCos ux) (neg.f64 (pow.f64 (*.f64 maxCos ux) 2)))","(-.f64 (+.f64 1 (+.f64 (*.f64 -2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))) (pow.f64 (-.f64 1 ux) 2))","(-.f64 (-.f64 (fma.f64 (*.f64 -2 (-.f64 1 ux)) (*.f64 maxCos ux) 1) (pow.f64 (*.f64 maxCos ux) 2)) (pow.f64 (-.f64 1 ux) 2))","(-.f64 (+.f64 1 (+.f64 (*.f64 -2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 -1 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))) (pow.f64 (-.f64 1 ux) 2))","(-.f64 (-.f64 (fma.f64 (*.f64 -2 (-.f64 1 ux)) (*.f64 maxCos ux) 1) (pow.f64 (*.f64 maxCos ux) 2)) (pow.f64 (-.f64 1 ux) 2))","1","(+.f64 1 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux))","(fma.f64 ux (fma.f64 2 maxCos -2) 1)","(+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(+.f64 1 (fma.f64 ux (fma.f64 2 maxCos -2) (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2)))","(+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(+.f64 1 (fma.f64 ux (fma.f64 2 maxCos -2) (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2)))","(*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))","(pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2)","(+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))","(fma.f64 ux (fma.f64 2 maxCos -2) (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2))","(+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(+.f64 1 (fma.f64 ux (fma.f64 2 maxCos -2) (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2)))","(+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(+.f64 1 (fma.f64 ux (fma.f64 2 maxCos -2) (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2)))","(*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2))","(pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2)","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -2 maxCos) 2) ux)) (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2)))","(fma.f64 ux (fma.f64 2 maxCos -2) (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2))","(+.f64 1 (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -2 maxCos) 2) ux)) (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2))))","(+.f64 1 (fma.f64 ux (fma.f64 2 maxCos -2) (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2)))","(+.f64 1 (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -2 maxCos) 2) ux)) (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2))))","(+.f64 1 (fma.f64 ux (fma.f64 2 maxCos -2) (pow.f64 (*.f64 ux (-.f64 1 maxCos)) 2)))","(pow.f64 (-.f64 1 ux) 2)","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (pow.f64 (-.f64 1 ux) 2))","(fma.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux) (pow.f64 (-.f64 1 ux) 2))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(+.f64 (fma.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux) (pow.f64 (*.f64 maxCos ux) 2)) (pow.f64 (-.f64 1 ux) 2))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(+.f64 (fma.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux) (pow.f64 (*.f64 maxCos ux) 2)) (pow.f64 (-.f64 1 ux) 2))","(*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))","(pow.f64 (*.f64 maxCos ux) 2)","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))","(fma.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux) (pow.f64 (*.f64 maxCos ux) 2))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(+.f64 (fma.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux) (pow.f64 (*.f64 maxCos ux) 2)) (pow.f64 (-.f64 1 ux) 2))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(+.f64 (fma.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux) (pow.f64 (*.f64 maxCos ux) 2)) (pow.f64 (-.f64 1 ux) 2))","(*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))","(pow.f64 (*.f64 maxCos ux) 2)","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))","(fma.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux) (pow.f64 (*.f64 maxCos ux) 2))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(+.f64 (fma.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux) (pow.f64 (*.f64 maxCos ux) 2)) (pow.f64 (-.f64 1 ux) 2))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(+.f64 (fma.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux) (pow.f64 (*.f64 maxCos ux) 2)) (pow.f64 (-.f64 1 ux) 2))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2)))","(sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (fma.f64 maxCos ux 1) ux) 2)))","(+.f64 (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))) (*.f64 -2 (*.f64 (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))))","(*.f64 (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (fma.f64 maxCos ux 1) ux) 2))) (+.f64 (*.f64 -2 (pow.f64 (*.f64 uy (PI.f64)) 2)) 1))","(+.f64 (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))) (+.f64 (*.f64 2/3 (*.f64 (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))) (*.f64 -2 (*.f64 (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2)))))))","(+.f64 (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (fma.f64 maxCos ux 1) ux) 2))) (*.f64 (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (fma.f64 maxCos ux 1) ux) 2))) (+.f64 (*.f64 -2 (pow.f64 (*.f64 uy (PI.f64)) 2)) (*.f64 2/3 (pow.f64 (*.f64 uy (PI.f64)) 4)))))","(+.f64 (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))) (+.f64 (*.f64 2/3 (*.f64 (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))) (+.f64 (*.f64 -4/45 (*.f64 (*.f64 (pow.f64 uy 6) (pow.f64 (PI.f64) 6)) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))) (*.f64 -2 (*.f64 (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))))))","(+.f64 (*.f64 (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (fma.f64 maxCos ux 1) ux) 2))) (+.f64 1 (*.f64 2/3 (pow.f64 (*.f64 uy (PI.f64)) 4)))) (*.f64 (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (fma.f64 maxCos ux 1) ux) 2))) (+.f64 (*.f64 -4/45 (pow.f64 (*.f64 uy (PI.f64)) 6)) (*.f64 -2 (pow.f64 (*.f64 uy (PI.f64)) 2)))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (fma.f64 maxCos ux 1) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (fma.f64 maxCos ux 1) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (fma.f64 maxCos ux 1) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (fma.f64 maxCos ux 1) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (fma.f64 maxCos ux 1) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (fma.f64 maxCos ux 1) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (fma.f64 maxCos ux 1) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (+.f64 1 (*.f64 maxCos ux)) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 (fma.f64 maxCos ux 1) ux) 2))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 1 ux) 2))))","(+.f64 (*.f64 -1 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (sqrt.f64 (/.f64 1 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))))) (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))))","(fma.f64 (neg.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 1 ux) (*.f64 maxCos ux)))) (sqrt.f64 (/.f64 -1 (+.f64 -1 (pow.f64 (-.f64 1 ux) 2)))) (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))))","(+.f64 (*.f64 -1 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (sqrt.f64 (/.f64 1 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))))) (+.f64 (*.f64 -1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (pow.f64 maxCos 2) (+.f64 (pow.f64 ux 2) (pow.f64 (*.f64 -1 (*.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))) (*.f64 (-.f64 1 ux) ux))) 2)))) (sqrt.f64 (/.f64 1 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))))) (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 1 ux) 2))))))","(+.f64 (*.f64 (sqrt.f64 (/.f64 -1 (+.f64 -1 (pow.f64 (-.f64 1 ux) 2)))) (+.f64 (neg.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 1 ux) (*.f64 maxCos ux)))) (*.f64 -1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos maxCos)) (fma.f64 ux ux (pow.f64 (*.f64 (neg.f64 (*.f64 (-.f64 1 ux) ux)) (sqrt.f64 (/.f64 -1 (+.f64 -1 (pow.f64 (-.f64 1 ux) 2))))) 2)))))) (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))))","(+.f64 (*.f64 -1 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (sqrt.f64 (/.f64 1 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))))) (+.f64 (*.f64 -1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 1 ux) (*.f64 (pow.f64 maxCos 3) (*.f64 ux (+.f64 (pow.f64 ux 2) (pow.f64 (*.f64 -1 (*.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))) (*.f64 (-.f64 1 ux) ux))) 2)))))) (sqrt.f64 (/.f64 1 (pow.f64 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)) 3))))) (+.f64 (*.f64 -1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (pow.f64 maxCos 2) (+.f64 (pow.f64 ux 2) (pow.f64 (*.f64 -1 (*.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))) (*.f64 (-.f64 1 ux) ux))) 2)))) (sqrt.f64 (/.f64 1 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))))) (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)))))))","(+.f64 (+.f64 (*.f64 (sqrt.f64 (/.f64 -1 (+.f64 -1 (pow.f64 (-.f64 1 ux) 2)))) (+.f64 (neg.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 1 ux) (*.f64 maxCos ux)))) (*.f64 -1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos maxCos)) (fma.f64 ux ux (pow.f64 (*.f64 (neg.f64 (*.f64 (-.f64 1 ux) ux)) (sqrt.f64 (/.f64 -1 (+.f64 -1 (pow.f64 (-.f64 1 ux) 2))))) 2)))))) (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (-.f64 1 ux) 2))))) (*.f64 (*.f64 -1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (-.f64 1 ux)) (*.f64 (*.f64 (pow.f64 maxCos 3) ux) (fma.f64 ux ux (pow.f64 (*.f64 (neg.f64 (*.f64 (-.f64 1 ux) ux)) (sqrt.f64 (/.f64 -1 (+.f64 -1 (pow.f64 (-.f64 1 ux) 2))))) 2))))) (sqrt.f64 (pow.f64 (-.f64 1 (pow.f64 (-.f64 1 ux) 2)) -3))))"]],"time":263.65283203125,"type":"simplify"},{"compiler":[[8299,4954]],"time":89.715087890625,"type":"eval"},{"alts":[["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (cbrt.f64 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (cbrt.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4)) 1)))","fresh",12.242264353717419],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (*.f64 (+.f64 -1 (fma.f64 ux maxCos (-.f64 1 ux))) (-.f64 -1 (fma.f64 ux maxCos (-.f64 1 ux))))))","fresh",12.057923905783792],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","next",0.34264599860737494],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6)))) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))","fresh",12.042591595698884],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (/.f64 (-.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (*.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6))) (*.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))","fresh",12.043710091185421],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 (PI.f64) (+.f64 (PI.f64) (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) -1)))))","fresh",13.248299804621213],["(*.f64 (cos.f64 (*.f64 (*.f64 uy (cbrt.f64 (PI.f64))) (*.f64 2 (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))","fresh",12.134428923357046],["(*.f64 (cbrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))","fresh",12.130048829131148],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (/.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6) 3)) (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (+.f64 1 (+.f64 (pow.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) 6) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6))))))","fresh",11.991494764833185]],"compiler":[[32,24],[28,20],[30,24],[57,43],[99,70],[25,18],[27,21],[34,26],[67,50],[32,24],[28,20],[30,24],[57,43],[99,70],[25,18],[27,21],[34,26],[67,50]],"count":[[289,9]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[288,9],"picked":[1,0]}],"min-error":[0.2717584793693193],"time":61.5390625,"type":"prune"},{"compiler":[[136,93]],"locations":[["(sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))))",0.0859375,true],["(cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))",0.12678200767235193,true],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))",0.24609375,true],["(*.f64 uy (+.f64 (PI.f64) (PI.f64)))",0.27734375,false]],"time":30.541015625,"type":"localize"},{"count":[[3,32]],"series":[["(sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))))","ux","-inf",0.35302734375],["(sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))))","ux","inf",0.35693359375],["(sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))))","ux","0",0.403076171875],["(sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))))","maxCos","-inf",0.43994140625],["(sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))))","maxCos","inf",0.446044921875],["(sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))))","maxCos","0",0.536865234375],["(cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))","uy","-inf",0.173828125],["(cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))","uy","inf",0.14990234375],["(cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))","uy","0",0.254150390625],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","ux","-inf",0.636962890625],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","ux","inf",0.5478515625],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","ux","0",1.5],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","maxCos","-inf",2.6240234375],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","maxCos","inf",0.98193359375],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","maxCos","0",1.245849609375],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","uy","-inf",0.427001953125],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","uy","inf",1.179931640625],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","uy","0",0.927978515625]],"time":13.60400390625,"type":"series"},{"count":[[3,101]],"inputs":[["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))","(sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 1/2) (*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 0) (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (*.f64 1/2 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (*.f64 0 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2) (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2) (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (cbrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2)) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (*.f64 (cbrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 1/2) (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 0) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) (*.f64 1/2 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (*.f64 0 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 (*.f64 uy (PI.f64))) 2) (*.f64 (neg.f64 (sin.f64 (*.f64 uy (PI.f64)))) (sin.f64 (*.f64 uy (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 (*.f64 uy (PI.f64))) 2) (neg.f64 (pow.f64 (sin.f64 (*.f64 uy (PI.f64))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (cos.f64 (*.f64 uy (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 uy (PI.f64))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2)) (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 (*.f64 uy (PI.f64))) (sin.f64 (*.f64 uy (PI.f64)))) (-.f64 (cos.f64 (*.f64 uy (PI.f64))) (sin.f64 (*.f64 uy (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (pow.f64 (sin.f64 (*.f64 uy (PI.f64))) 2) (pow.f64 (cos.f64 (*.f64 uy (PI.f64))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 (*.f64 uy (PI.f64))) (cos.f64 (*.f64 uy (PI.f64))) (neg.f64 (pow.f64 (sin.f64 (*.f64 uy (PI.f64))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) 1/2) (*.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) 0) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (*.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (*.f64 1/2 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (*.f64 0 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (cbrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (cbrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))) (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) -1) (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))) (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (fabs.f64 (cbrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) 0) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (pow.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))))"]],"rules":[["egg-rr",44],["egg-rr",28],["egg-rr",29]],"time":41.247802734375,"type":"rewrite"},{"count":[[133,135]],"inputs":[["(sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))))","(+.f64 (*.f64 -2 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(+.f64 (*.f64 -2 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)))) (+.f64 (*.f64 2/3 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))))))","(+.f64 (*.f64 -2 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)))) (+.f64 (*.f64 2/3 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)))) (+.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 -4/45 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 6) (pow.f64 (PI.f64) 6)))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux))))","(+.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 (*.f64 -1 (pow.f64 ux 2)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) 2)) (pow.f64 maxCos 2))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))) (+.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux))))))))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 (*.f64 -1 (pow.f64 ux 2)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) 2)) (pow.f64 maxCos 2))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))) (+.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -1/4 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 (*.f64 -1 (pow.f64 ux 2)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) 2)) (*.f64 (pow.f64 maxCos 3) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2)))))) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)) 3))))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))))))","1","(+.f64 1 (*.f64 -2 (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2))))","(+.f64 1 (+.f64 (*.f64 -2 (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2))) (*.f64 2/3 (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)))))","(+.f64 (*.f64 -4/45 (*.f64 (pow.f64 uy 6) (pow.f64 (PI.f64) 6))) (+.f64 1 (+.f64 (*.f64 -2 (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2))) (*.f64 2/3 (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4))))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))","(+.f64 (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux))) (*.f64 1/2 (*.f64 (*.f64 maxCos (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2)))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))))","(+.f64 (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 ux 2)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) 2)) (pow.f64 maxCos 2)) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))) (*.f64 1/2 (*.f64 (*.f64 maxCos (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2)))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux))))))))","(+.f64 (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 ux 2)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) 2)) (pow.f64 maxCos 2)) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 maxCos (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2)))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))) (*.f64 -1/4 (*.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 ux 2)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) 2)) (*.f64 (pow.f64 maxCos 3) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)) 3))))))))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))))","(sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))","(+.f64 (*.f64 -2 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(fma.f64 -2 (*.f64 (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (pow.f64 (*.f64 uy (PI.f64)) 2)) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(+.f64 (*.f64 -2 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)))) (+.f64 (*.f64 2/3 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))))))","(fma.f64 -2 (*.f64 (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (pow.f64 (*.f64 uy (PI.f64)) 2)) (fma.f64 2/3 (*.f64 (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (pow.f64 (*.f64 uy (PI.f64)) 4)) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))","(+.f64 (*.f64 -2 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)))) (+.f64 (*.f64 2/3 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)))) (+.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 -4/45 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 6) (pow.f64 (PI.f64) 6)))))))","(fma.f64 -2 (*.f64 (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (pow.f64 (*.f64 uy (PI.f64)) 2)) (fma.f64 2/3 (*.f64 (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (pow.f64 (*.f64 uy (PI.f64)) 4)) (fma.f64 -4/45 (*.f64 (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (pow.f64 (*.f64 uy (PI.f64)) 6)) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux)))))","(+.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))))","(fma.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux)))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) (sqrt.f64 (/.f64 1 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux))))))))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 (*.f64 -1 (pow.f64 ux 2)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) 2)) (pow.f64 maxCos 2))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))) (+.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux))))))))","(fma.f64 (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (-.f64 (neg.f64 (*.f64 ux ux)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux))))) (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) 2))) (*.f64 maxCos maxCos))) (sqrt.f64 (/.f64 1 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux))))) (fma.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux)))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) (sqrt.f64 (/.f64 1 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux)))))))))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 (*.f64 -1 (pow.f64 ux 2)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) 2)) (pow.f64 maxCos 2))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))) (+.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -1/4 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 (*.f64 -1 (pow.f64 ux 2)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) 2)) (*.f64 (pow.f64 maxCos 3) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2)))))) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)) 3))))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))))))","(fma.f64 1/2 (*.f64 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (-.f64 (neg.f64 (*.f64 ux ux)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux))))) (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) 2))) (*.f64 maxCos maxCos)) (sqrt.f64 (/.f64 1 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux)))))) (fma.f64 (sqrt.f64 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux)))) (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (fma.f64 -1/4 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 (neg.f64 (*.f64 ux ux)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux))))) (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) 2)) (*.f64 (pow.f64 maxCos 3) (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux)))))) (sqrt.f64 (pow.f64 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux))) -3))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) (sqrt.f64 (/.f64 1 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux))))))))))","1","(+.f64 1 (*.f64 -2 (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2))))","(fma.f64 (pow.f64 (*.f64 uy (PI.f64)) 2) -2 1)","(+.f64 1 (+.f64 (*.f64 -2 (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2))) (*.f64 2/3 (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)))))","(+.f64 (fma.f64 (pow.f64 (*.f64 uy (PI.f64)) 2) -2 1) (*.f64 2/3 (pow.f64 (*.f64 uy (PI.f64)) 4)))","(+.f64 (*.f64 -4/45 (*.f64 (pow.f64 uy 6) (pow.f64 (PI.f64) 6))) (+.f64 1 (+.f64 (*.f64 -2 (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2))) (*.f64 2/3 (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4))))))","(+.f64 (fma.f64 -4/45 (pow.f64 (*.f64 uy (PI.f64)) 6) 1) (fma.f64 -2 (pow.f64 (*.f64 uy (PI.f64)) 2) (*.f64 2/3 (pow.f64 (*.f64 uy (PI.f64)) 4))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))","(sqrt.f64 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux))))","(+.f64 (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux))) (*.f64 1/2 (*.f64 (*.f64 maxCos (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2)))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))))","(fma.f64 (/.f64 (*.f64 maxCos (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux)))) 2) (sqrt.f64 (/.f64 1 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux))))) (sqrt.f64 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux)))))","(+.f64 (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 ux 2)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) 2)) (pow.f64 maxCos 2)) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))) (*.f64 1/2 (*.f64 (*.f64 maxCos (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2)))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux))))))))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux))))) (+.f64 (*.f64 (-.f64 (neg.f64 (*.f64 ux ux)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux))))) (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) 2)) (*.f64 maxCos maxCos)) (*.f64 maxCos (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux)))))) (sqrt.f64 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux)))))","(+.f64 (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 ux 2)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) 2)) (pow.f64 maxCos 2)) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 maxCos (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2)))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))) (*.f64 -1/4 (*.f64 (*.f64 (-.f64 (*.f64 -1 (pow.f64 ux 2)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) 2)) (*.f64 (pow.f64 maxCos 3) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)) 3))))))))","(+.f64 (sqrt.f64 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux)))) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux))))) (+.f64 (*.f64 (-.f64 (neg.f64 (*.f64 ux ux)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux))))) (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) 2)) (*.f64 maxCos maxCos)) (*.f64 maxCos (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux)))))) (*.f64 -1/4 (*.f64 (*.f64 (-.f64 (neg.f64 (*.f64 ux ux)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux))))) (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) 2)) (*.f64 (pow.f64 maxCos 3) (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) (sqrt.f64 (pow.f64 (fma.f64 ux 2 (neg.f64 (*.f64 ux ux))) -3))))))"]],"time":121.941162109375,"type":"simplify"},{"compiler":[[7139,4467]],"time":73.017822265625,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2)) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))","fresh",0.46439765085845736],["(*.f64 (cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","next",0.35289453033038376],["(*.f64 (*.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2)))","fresh",0.46668266062689934],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6)))) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))","fresh",12.042591595698884],["(pow.f64 (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) 3)","fresh",0.8540059493710976],["(*.f64 (-.f64 (pow.f64 (cos.f64 (*.f64 uy (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 uy (PI.f64))) 2)) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","fresh",0.5563173353308286],["(+.f64 (*.f64 -2 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)))) (+.f64 (*.f64 2/3 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)))) (+.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 -4/45 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 6) (pow.f64 (PI.f64) 6)))))))","fresh",8.332590375863996],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (pow.f64 (pow.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))) 3/2) 1/3))","fresh",1.451480024404832],["(*.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) 3) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","fresh",0.6464460353658154],["(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))","fresh",0.6568377387744355],["(*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (cbrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","fresh",0.562723537681143],["(*.f64 (*.f64 (+.f64 (cos.f64 (*.f64 uy (PI.f64))) (sin.f64 (*.f64 uy (PI.f64)))) (-.f64 (cos.f64 (*.f64 uy (PI.f64))) (sin.f64 (*.f64 uy (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","fresh",0.598603347306001]],"compiler":[[37,24],[36,28],[37,24],[57,43],[29,22],[37,29],[116,95],[29,22],[33,27],[45,32],[44,31],[43,27],[37,24],[36,28],[37,24],[57,43],[29,22],[37,29],[116,95],[29,22],[33,27],[45,32],[44,31],[43,27]],"count":[[194,12]],"kept":[{"done":[0,0],"fresh":[8,1],"new":[185,11],"picked":[1,0]}],"min-error":[0.0648759953983512],"time":68.94921875,"type":"prune"},{"compiler":[[171,97]],"locations":[["(cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64)))))",0.12678200767235193,true],["(*.f64 (cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))",0.24609375,true],["(*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64)))",0.32650375976844204,true],["(*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))",0.33984375,true]],"time":34.60888671875,"type":"localize"},{"count":[[4,40]],"series":[["(cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64)))))","uy","-inf",0.172119140625],["(cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64)))))","uy","inf",0.184814453125],["(cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64)))))","uy","0",0.175048828125],["(*.f64 (cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","ux","-inf",0.3408203125],["(*.f64 (cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","ux","inf",0.3408203125],["(*.f64 (cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","ux","0",0.43896484375],["(*.f64 (cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","maxCos","-inf",0.364013671875],["(*.f64 (cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","maxCos","inf",0.471923828125],["(*.f64 (cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","maxCos","0",0.47314453125],["(*.f64 (cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","uy","-inf",0.52197265625],["(*.f64 (cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","uy","inf",0.501220703125],["(*.f64 (cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","uy","0",0.388916015625],["(*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64)))","uy","-inf",0.325927734375],["(*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64)))","uy","inf",0.381103515625],["(*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64)))","uy","0",0.515869140625],["(*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))","uy","-inf",1.48095703125],["(*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))","uy","inf",0.3369140625],["(*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))","uy","0",1.6240234375]],"time":9.87109375,"type":"series"},{"count":[[4,149]],"inputs":[["(*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))","(*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64)))","(*.f64 (cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64)))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64))) (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 uy (PI.f64)) (*.f64 uy (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (cbrt.f64 uy)) (*.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (cbrt.f64 uy)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (PI.f64) uy) (*.f64 (PI.f64) uy))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (PI.f64) uy)) (*.f64 1 (*.f64 (PI.f64) uy)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 uy (PI.f64))) (*.f64 1 (*.f64 uy (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64)))) (*.f64 1 (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (cbrt.f64 uy))) (*.f64 1 (*.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (cbrt.f64 uy))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) (*.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 1/2) (*.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 0) (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (PI.f64) uy) 1) (*.f64 (*.f64 (PI.f64) uy) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 uy (PI.f64)) 1) (*.f64 (*.f64 uy (PI.f64)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64))) 1) (*.f64 (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (cbrt.f64 uy)) 1) (*.f64 (*.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (cbrt.f64 uy)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) (*.f64 0 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (*.f64 1/2 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) (cbrt.f64 uy))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (pow.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 uy (+.f64 (PI.f64) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 2/3) (cbrt.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (PI.f64) (PI.f64)) uy)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 uy) (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))) (pow.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 uy) (+.f64 (PI.f64) (PI.f64))) (pow.f64 uy 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) (cbrt.f64 (cbrt.f64 uy))) (cbrt.f64 (pow.f64 uy 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 uy (cbrt.f64 (+.f64 (PI.f64) (PI.f64)))) (pow.f64 (+.f64 (PI.f64) (PI.f64)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 uy 2/3) (*.f64 (+.f64 (PI.f64) (PI.f64)) (cbrt.f64 uy)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))) (*.f64 (pow.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 2/3) (cbrt.f64 uy)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 uy)) (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 uy uy) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (PI.f64) uy))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 uy (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (cbrt.f64 uy)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (+.f64 (cbrt.f64 uy) (cbrt.f64 uy)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (PI.f64) (+.f64 uy uy))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 1/2) (*.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (*.f64 (pow.f64 uy 2/3) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) (*.f64 0 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))) (*.f64 1/2 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (PI.f64) (PI.f64))) (*.f64 (pow.f64 (+.f64 (PI.f64) (PI.f64)) 2/3) (pow.f64 uy 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (PI.f64) (PI.f64)) (pow.f64 uy 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))) (pow.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 2/3) (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) (cbrt.f64 uy)) (cbrt.f64 uy))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 uy 2/3) (cbrt.f64 (+.f64 (PI.f64) (PI.f64)))) (pow.f64 (+.f64 (PI.f64) (PI.f64)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 uy) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 uy)) 4) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) (cbrt.f64 (pow.f64 uy 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 uy)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 uy 2/3) (cbrt.f64 (PI.f64))) (*.f64 2 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (PI.f64)) (+.f64 (*.f64 (pow.f64 (PI.f64) 2/3) (pow.f64 uy 2/3)) (*.f64 (pow.f64 (PI.f64) 2/3) (pow.f64 uy 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (PI.f64) (cbrt.f64 (pow.f64 uy 2/3))) (+.f64 (pow.f64 (cbrt.f64 (cbrt.f64 uy)) 4) (pow.f64 (cbrt.f64 (cbrt.f64 uy)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64))) (+.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64))) 2) (pow.f64 (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (PI.f64) (cbrt.f64 uy)) (+.f64 (cbrt.f64 uy) (cbrt.f64 uy)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (PI.f64) 2/3) (pow.f64 uy 2/3)) (+.f64 (cbrt.f64 (PI.f64)) (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 uy)) 4) (PI.f64)) (+.f64 (cbrt.f64 (pow.f64 uy 2/3)) (cbrt.f64 (pow.f64 uy 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64))) 2) (+.f64 (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64))) (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 uy)) 4) (+.f64 (*.f64 (PI.f64) (cbrt.f64 (pow.f64 uy 2/3))) (*.f64 (PI.f64) (cbrt.f64 (pow.f64 uy 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 uy) (PI.f64)) (+.f64 (cbrt.f64 uy) (cbrt.f64 uy)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 uy 2/3) 2) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (PI.f64) (*.f64 (pow.f64 uy 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (pow.f64 uy 2/3) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (PI.f64) 2/3) (+.f64 (*.f64 (pow.f64 uy 2/3) (cbrt.f64 (PI.f64))) (*.f64 (pow.f64 uy 2/3) (cbrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 uy uy) (pow.f64 (+.f64 (PI.f64) (PI.f64)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 uy uy) (pow.f64 (+.f64 (PI.f64) (PI.f64)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (PI.f64) (pow.f64 uy 2/3) (*.f64 (pow.f64 uy 2/3) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 uy 2/3) (PI.f64) (*.f64 (pow.f64 uy 2/3) (PI.f64)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 1/2) (*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 0) (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (*.f64 0 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (*.f64 1/2 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) (*.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2/3) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (pow.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 2/3) (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))) (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (cbrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (*.f64 (cbrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 1/2) (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 0) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (*.f64 0 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) (*.f64 1/2 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 (*.f64 (PI.f64) uy)) (cos.f64 (*.f64 (PI.f64) uy))) (*.f64 (sin.f64 (*.f64 (PI.f64) uy)) (sin.f64 (*.f64 (PI.f64) uy))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 (*.f64 uy (PI.f64))) (cos.f64 (*.f64 uy (PI.f64)))) (*.f64 (sin.f64 (*.f64 uy (PI.f64))) (sin.f64 (*.f64 uy (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64)))) (cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64))))) (*.f64 (sin.f64 (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64)))) (sin.f64 (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 (*.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (cbrt.f64 uy))) (cos.f64 (*.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (cbrt.f64 uy)))) (*.f64 (sin.f64 (*.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (cbrt.f64 uy))) (sin.f64 (*.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (cbrt.f64 uy)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2/3) (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))))"]],"rules":[["egg-rr",25],["egg-rr",28],["egg-rr",46],["egg-rr",50]],"time":45.69091796875,"type":"rewrite"},{"count":[[189,182]],"inputs":[["(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 -2 (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64))))","(*.f64 -2 (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64))))","(*.f64 -2 (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64))))","(*.f64 -2 (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64))))","(sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))))","(+.f64 (*.f64 -2 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(+.f64 (*.f64 -2 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)))) (+.f64 (*.f64 2/3 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))))))","(+.f64 (*.f64 -2 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)))) (+.f64 (*.f64 2/3 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)))) (+.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 -4/45 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 6) (pow.f64 (PI.f64) 6)))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 -2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64)))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 -2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64)))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 -2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64)))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 -2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64)))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux))))","(+.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 (*.f64 -1 (pow.f64 ux 2)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) 2)) (pow.f64 maxCos 2))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))) (+.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux))))))))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 (*.f64 -1 (pow.f64 ux 2)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) 2)) (pow.f64 maxCos 2))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))) (+.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -1/4 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 (*.f64 -1 (pow.f64 ux 2)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) 2)) (*.f64 (pow.f64 maxCos 3) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2)))))) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)) 3))))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))))))","1","(+.f64 1 (*.f64 -2 (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2))))","(+.f64 1 (+.f64 (*.f64 -2 (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2))) (*.f64 2/3 (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)))))","(+.f64 (*.f64 -4/45 (*.f64 (pow.f64 uy 6) (pow.f64 (PI.f64) 6))) (+.f64 1 (+.f64 (*.f64 -2 (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2))) (*.f64 2/3 (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4))))))","(cos.f64 (*.f64 2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (PI.f64)))))","(cos.f64 (*.f64 2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (PI.f64)))))","(cos.f64 (*.f64 2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (PI.f64)))))","(cos.f64 (*.f64 2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (PI.f64)))))","(cos.f64 (*.f64 -2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64))))))","(cos.f64 (*.f64 -2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64))))))","(cos.f64 (*.f64 -2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64))))))","(cos.f64 (*.f64 -2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 -2 (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64))))","(*.f64 (*.f64 -2 uy) (neg.f64 (PI.f64)))","(*.f64 -2 (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64))))","(*.f64 (*.f64 -2 uy) (neg.f64 (PI.f64)))","(*.f64 -2 (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64))))","(*.f64 (*.f64 -2 uy) (neg.f64 (PI.f64)))","(*.f64 -2 (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64))))","(*.f64 (*.f64 -2 uy) (neg.f64 (PI.f64)))","(sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))))","(sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))","(+.f64 (*.f64 -2 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(fma.f64 -2 (*.f64 (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (pow.f64 (*.f64 uy (PI.f64)) 2)) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(+.f64 (*.f64 -2 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)))) (+.f64 (*.f64 2/3 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))))))","(fma.f64 -2 (*.f64 (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (pow.f64 (*.f64 uy (PI.f64)) 2)) (fma.f64 2/3 (*.f64 (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (pow.f64 (*.f64 uy (PI.f64)) 4)) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))","(+.f64 (*.f64 -2 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)))) (+.f64 (*.f64 2/3 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)))) (+.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 -4/45 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 6) (pow.f64 (PI.f64) 6)))))))","(fma.f64 -2 (*.f64 (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (pow.f64 (*.f64 uy (PI.f64)) 2)) (fma.f64 2/3 (*.f64 (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (pow.f64 (*.f64 uy (PI.f64)) 4)) (fma.f64 (*.f64 -4/45 (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (pow.f64 (*.f64 uy (PI.f64)) 6) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(*.f64 (cos.f64 (*.f64 -2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64)))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 (*.f64 -2 uy) (neg.f64 (PI.f64)))) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(*.f64 (cos.f64 (*.f64 -2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64)))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 (*.f64 -2 uy) (neg.f64 (PI.f64)))) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(*.f64 (cos.f64 (*.f64 -2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64)))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 (*.f64 -2 uy) (neg.f64 (PI.f64)))) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(*.f64 (cos.f64 (*.f64 -2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64)))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 (*.f64 -2 uy) (neg.f64 (PI.f64)))) (sqrt.f64 (fma.f64 (*.f64 2 (-.f64 1 maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 2 ux (neg.f64 (*.f64 ux ux)))))","(+.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))))","(fma.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 2 ux (neg.f64 (*.f64 ux ux)))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) (sqrt.f64 (/.f64 1 (fma.f64 2 ux (neg.f64 (*.f64 ux ux))))))))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 (*.f64 -1 (pow.f64 ux 2)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) 2)) (pow.f64 maxCos 2))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))) (+.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux))))))))","(fma.f64 1/2 (*.f64 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (-.f64 (neg.f64 (*.f64 ux ux)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 2 ux (neg.f64 (*.f64 ux ux))))) (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) 2))) (*.f64 maxCos maxCos)) (sqrt.f64 (/.f64 1 (fma.f64 2 ux (neg.f64 (*.f64 ux ux)))))) (fma.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 2 ux (neg.f64 (*.f64 ux ux)))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) (sqrt.f64 (/.f64 1 (fma.f64 2 ux (neg.f64 (*.f64 ux ux)))))))))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 (*.f64 -1 (pow.f64 ux 2)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) 2)) (pow.f64 maxCos 2))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))) (+.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -1/4 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 (*.f64 -1 (pow.f64 ux 2)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) 2)) (*.f64 (pow.f64 maxCos 3) (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2)))))) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)) 3))))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (+.f64 (*.f64 -2 ux) (*.f64 2 (pow.f64 ux 2))))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -1 (pow.f64 ux 2)) (*.f64 2 ux)))))))))","(fma.f64 1/2 (*.f64 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (-.f64 (neg.f64 (*.f64 ux ux)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 2 ux (neg.f64 (*.f64 ux ux))))) (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) 2))) (*.f64 maxCos maxCos)) (sqrt.f64 (/.f64 1 (fma.f64 2 ux (neg.f64 (*.f64 ux ux)))))) (fma.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 2 ux (neg.f64 (*.f64 ux ux)))) (fma.f64 -1/4 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 (-.f64 (neg.f64 (*.f64 ux ux)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 2 ux (neg.f64 (*.f64 ux ux))))) (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) 2)) (*.f64 (pow.f64 maxCos 3) (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux)))))) (sqrt.f64 (pow.f64 (fma.f64 2 ux (neg.f64 (*.f64 ux ux))) -3))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) (sqrt.f64 (/.f64 1 (fma.f64 2 ux (neg.f64 (*.f64 ux ux))))))))))","1","(+.f64 1 (*.f64 -2 (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2))))","(fma.f64 (pow.f64 (*.f64 uy (PI.f64)) 2) -2 1)","(+.f64 1 (+.f64 (*.f64 -2 (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2))) (*.f64 2/3 (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)))))","(+.f64 (fma.f64 (pow.f64 (*.f64 uy (PI.f64)) 2) -2 1) (*.f64 2/3 (pow.f64 (*.f64 uy (PI.f64)) 4)))","(+.f64 (*.f64 -4/45 (*.f64 (pow.f64 uy 6) (pow.f64 (PI.f64) 6))) (+.f64 1 (+.f64 (*.f64 -2 (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2))) (*.f64 2/3 (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4))))))","(+.f64 (fma.f64 -4/45 (pow.f64 (*.f64 uy (PI.f64)) 6) 1) (fma.f64 -2 (pow.f64 (*.f64 uy (PI.f64)) 2) (*.f64 2/3 (pow.f64 (*.f64 uy (PI.f64)) 4))))","(cos.f64 (*.f64 2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (PI.f64)))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (PI.f64)))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (PI.f64)))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (PI.f64)))))","(cos.f64 (*.f64 2 (*.f64 uy (PI.f64))))","(cos.f64 (*.f64 -2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64))))))","(cos.f64 (*.f64 (*.f64 -2 uy) (neg.f64 (PI.f64))))","(cos.f64 (*.f64 -2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64))))))","(cos.f64 (*.f64 (*.f64 -2 uy) (neg.f64 (PI.f64))))","(cos.f64 (*.f64 -2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64))))))","(cos.f64 (*.f64 (*.f64 -2 uy) (neg.f64 (PI.f64))))","(cos.f64 (*.f64 -2 (*.f64 (pow.f64 1 1/3) (*.f64 uy (*.f64 (cbrt.f64 -1) (PI.f64))))))","(cos.f64 (*.f64 (*.f64 -2 uy) (neg.f64 (PI.f64))))"]],"time":138.619873046875,"type":"simplify"},{"compiler":[[6956,4640]],"time":75.0791015625,"type":"eval"},{"alts":[["(*.f64 (-.f64 (pow.f64 (cos.f64 (*.f64 uy (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 uy (PI.f64))) 2)) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","fresh",0.5563173353308286],["(pow.f64 (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) 3)","fresh",0.8540059493710976],["(*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2/3) (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","fresh",3.1333356000225123],["(+.f64 (*.f64 -2 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)))) (+.f64 (*.f64 2/3 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)))) (+.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 -4/45 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 6) (pow.f64 (PI.f64) 6)))))))","fresh",8.332590375863996],["(fma.f64 1/2 (*.f64 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (-.f64 (neg.f64 (*.f64 ux ux)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 2 ux (neg.f64 (*.f64 ux ux))))) (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) 2))) (*.f64 maxCos maxCos)) (sqrt.f64 (/.f64 1 (fma.f64 2 ux (neg.f64 (*.f64 ux ux)))))) (fma.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 2 ux (neg.f64 (*.f64 ux ux)))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) (sqrt.f64 (/.f64 1 (fma.f64 2 ux (neg.f64 (*.f64 ux ux)))))))))","fresh",0.7032056800371765],["(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))","fresh",0.6568377387744355],["(*.f64 (cos.f64 (*.f64 (cbrt.f64 (cbrt.f64 uy)) (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","next",0.3879873845846346],["(*.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) 3) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","fresh",0.6464460353658154],["(*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (cbrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","fresh",0.562723537681143],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6)))) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))","fresh",12.042591595698884],["(*.f64 (*.f64 (+.f64 (cos.f64 (*.f64 uy (PI.f64))) (sin.f64 (*.f64 uy (PI.f64)))) (-.f64 (cos.f64 (*.f64 uy (PI.f64))) (sin.f64 (*.f64 uy (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","fresh",0.598603347306001]],"compiler":[[37,29],[29,22],[40,28],[116,95],[100,60],[45,32],[41,33],[33,27],[44,31],[57,43],[43,27],[37,29],[29,22],[40,28],[116,95],[100,60],[45,32],[41,33],[33,27],[44,31],[57,43],[43,27]],"count":[[194,11]],"kept":[{"done":[0,0],"fresh":[11,6],"new":[182,5],"picked":[1,0]}],"min-error":[0.0648759953983512],"time":69.468017578125,"type":"prune"},{"compiler":[[201,135]],"locations":[["(*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))",0.3203125,true],["(*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))",0.32650375976844204,true],["(*.f64 (cbrt.f64 (cbrt.f64 uy)) (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))",0.37890625,true],["(pow.f64 uy 2/3)",1.6330740076760604,true]],"time":61.408935546875,"type":"localize"},{"count":[[4,36]],"series":[["(*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))","uy","-inf",0.248046875],["(*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))","uy","inf",5.52099609375],["(*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))","uy","0",5.323974609375],["(*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))","uy","-inf",0.255126953125],["(*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))","uy","inf",0.2841796875],["(*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))","uy","0",0.2568359375],["(*.f64 (cbrt.f64 (cbrt.f64 uy)) (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))","uy","-inf",10.47412109375],["(*.f64 (cbrt.f64 (cbrt.f64 uy)) (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))","uy","inf",0.363037109375],["(*.f64 (cbrt.f64 (cbrt.f64 uy)) (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))","uy","0",23.369873046875],["(pow.f64 uy 2/3)","uy","-inf",6.6650390625],["(pow.f64 uy 2/3)","uy","inf",4.48095703125],["(pow.f64 uy 2/3)","uy","0",18.8359375]],"time":76.291015625,"type":"series"},{"count":[[4,181]],"inputs":[["(pow.f64 uy 2/3)","(*.f64 (cbrt.f64 (cbrt.f64 uy)) (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))","(*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))","(*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 uy 2/3)) (pow.f64 uy 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 uy 2/3) (*.f64 0 (pow.f64 uy 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 uy 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 uy 2/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 uy)) (cbrt.f64 (neg.f64 uy)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 uy) (cbrt.f64 uy))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 uy 2/3))) (pow.f64 (pow.f64 (cbrt.f64 (pow.f64 uy 2/3)) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 uy 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 uy 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 uy 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 uy)) (pow.f64 (cbrt.f64 uy) (+.f64 2/3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 uy 2/3)) (pow.f64 (cbrt.f64 uy) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 uy) 4/3) (cbrt.f64 (pow.f64 uy 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 uy 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 uy) (+.f64 2/3 1)) (cbrt.f64 (cbrt.f64 uy)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (pow.f64 uy 2/3)) 4/3) 2) (cbrt.f64 (cbrt.f64 (pow.f64 uy 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 uy 2/3))) (+.f64 2 3)) (pow.f64 (cbrt.f64 (pow.f64 uy 2/3)) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 uy 2/3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 uy)) (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 uy) (+.f64 2/3 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 uy 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 uy)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 uy 2/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 uy 2/3) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 uy 2/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 uy 2/3) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 uy 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 uy) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 uy uy) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 uy 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 uy 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 uy 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 uy uy))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 0) (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) (*.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (cbrt.f64 uy)) (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (PI.f64)))) (*.f64 (cbrt.f64 (cbrt.f64 uy)) (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (cbrt.f64 uy)) (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (PI.f64))) (*.f64 (cbrt.f64 (cbrt.f64 uy)) (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 uy (PI.f64)) (*.f64 uy (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) (*.f64 0 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (PI.f64))) (cbrt.f64 (cbrt.f64 uy))) (*.f64 (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (PI.f64))) (cbrt.f64 (cbrt.f64 uy))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (PI.f64)) (cbrt.f64 (cbrt.f64 uy))) (*.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (PI.f64)) (cbrt.f64 (cbrt.f64 uy))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (PI.f64) uy) (*.f64 (PI.f64) uy))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64))) 1) (*.f64 (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64))) (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 uy)) (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))) (cbrt.f64 (cbrt.f64 uy)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) (cbrt.f64 uy))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 uy (+.f64 (PI.f64) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64)))) (*.f64 (pow.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))) 2/3) (cbrt.f64 (cbrt.f64 uy))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 uy))) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 uy 2/3))) (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (PI.f64) (PI.f64)) uy)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))) 2/3) (cbrt.f64 (cbrt.f64 uy))) (cbrt.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 uy 2/3))) (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (cbrt.f64 (cbrt.f64 uy))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (pow.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 2/3) (cbrt.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))))) (pow.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 uy (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))) (pow.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 uy) (+.f64 (PI.f64) (PI.f64))) (pow.f64 uy 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (*.f64 (+.f64 (PI.f64) (PI.f64)) (cbrt.f64 (cbrt.f64 uy))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))) (cbrt.f64 (cbrt.f64 (cbrt.f64 uy)))) (cbrt.f64 (cbrt.f64 (pow.f64 uy 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 uy)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (pow.f64 uy 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (cbrt.f64 (cbrt.f64 uy)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 2/3) (cbrt.f64 (*.f64 uy (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) (cbrt.f64 (cbrt.f64 uy))) (pow.f64 (pow.f64 uy 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 uy 2/3) (*.f64 (cbrt.f64 uy) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 uy 2/3))) (*.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))) (cbrt.f64 (cbrt.f64 (cbrt.f64 uy)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (+.f64 (cbrt.f64 uy) (cbrt.f64 uy)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (cbrt.f64 uy) (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64)) (*.f64 (cbrt.f64 uy) (*.f64 (pow.f64 uy 2/3) (PI.f64))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) (*.f64 0 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (*.f64 (pow.f64 uy 2/3) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (PI.f64) (PI.f64))) (*.f64 (pow.f64 (+.f64 (PI.f64) (PI.f64)) 2/3) (pow.f64 uy 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 uy uy) (+.f64 (PI.f64) (PI.f64)))) (pow.f64 (+.f64 (PI.f64) (PI.f64)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (PI.f64) (PI.f64)) 2/3) (cbrt.f64 (*.f64 (*.f64 uy uy) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 (PI.f64) (PI.f64)) 2/3) (pow.f64 uy 2/3)) (cbrt.f64 (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 uy uy) (PI.f64))) (*.f64 2 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (PI.f64)) (+.f64 (cbrt.f64 (*.f64 (*.f64 (PI.f64) (PI.f64)) (*.f64 uy uy))) (cbrt.f64 (*.f64 (*.f64 (PI.f64) (PI.f64)) (*.f64 uy uy)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (PI.f64) (cbrt.f64 (pow.f64 uy 2/3))) (+.f64 (pow.f64 (cbrt.f64 uy) 4/3) (pow.f64 (cbrt.f64 uy) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (PI.f64) (PI.f64)) (*.f64 uy uy))) (cbrt.f64 (*.f64 8 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) 2)) (+.f64 (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64))) (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 uy) 4/3) (PI.f64)) (+.f64 (cbrt.f64 (pow.f64 uy 2/3)) (cbrt.f64 (pow.f64 uy 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))) (pow.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (PI.f64) (PI.f64)) (pow.f64 uy 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 2/3) (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) (cbrt.f64 (pow.f64 uy 2/3))) (pow.f64 (cbrt.f64 uy) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 uy 2/3) 2) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (PI.f64) (*.f64 (pow.f64 uy 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (pow.f64 uy 2/3) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 (cbrt.f64 uy) 4/3) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 uy) 4/3) (*.f64 (+.f64 (PI.f64) (PI.f64)) (cbrt.f64 (pow.f64 uy 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 uy) 4/3) (+.f64 (PI.f64) (PI.f64))) (cbrt.f64 (pow.f64 uy 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64))) (+.f64 (cbrt.f64 (pow.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) 2)) (cbrt.f64 (pow.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (PI.f64) 2/3) (+.f64 (cbrt.f64 (*.f64 (*.f64 uy uy) (PI.f64))) (cbrt.f64 (*.f64 (*.f64 uy uy) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 uy uy) (pow.f64 (+.f64 (PI.f64) (PI.f64)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 uy uy) (pow.f64 (+.f64 (PI.f64) (PI.f64)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (PI.f64) (pow.f64 uy 2/3) (*.f64 (pow.f64 uy 2/3) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 uy 2/3) (PI.f64) (*.f64 (pow.f64 uy 2/3) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 uy uy) (PI.f64))) (pow.f64 (PI.f64) 2/3) (*.f64 (pow.f64 uy 2/3) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (PI.f64) (cbrt.f64 (pow.f64 uy 2/3))) (pow.f64 (cbrt.f64 uy) 4/3) (*.f64 (pow.f64 uy 2/3) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (PI.f64)) (cbrt.f64 (*.f64 (*.f64 (PI.f64) (PI.f64)) (*.f64 uy uy))) (*.f64 (pow.f64 uy 2/3) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64))) (cbrt.f64 (pow.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) 2)) (*.f64 (pow.f64 uy 2/3) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 (cbrt.f64 uy) 4/3) (PI.f64)) (*.f64 (pow.f64 uy 2/3) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) 1 (*.f64 (pow.f64 uy 2/3) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (*.f64 (pow.f64 uy 2/3) (PI.f64)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))) 0) (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))) (*.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64)))) (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))) (*.f64 0 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (PI.f64))) 1) (*.f64 (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (PI.f64))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (PI.f64)) 1) (*.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (PI.f64)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (PI.f64)) (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (PI.f64))) (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 uy uy) 4/3) (+.f64 (PI.f64) (PI.f64)))) (pow.f64 (+.f64 (PI.f64) (PI.f64)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (PI.f64) (PI.f64)) 2/3) (cbrt.f64 (*.f64 (pow.f64 (*.f64 uy uy) 4/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64)))) (pow.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))) 2/3) (cbrt.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) (cbrt.f64 (pow.f64 uy 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))) (pow.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))) (pow.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) (cbrt.f64 (pow.f64 uy 2/3))) (pow.f64 uy 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) 2) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 uy 2/3))) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 uy) 4/3)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 uy 2/3) (*.f64 (+.f64 (PI.f64) (PI.f64)) (cbrt.f64 (pow.f64 uy 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (PI.f64) (PI.f64)) (pow.f64 (pow.f64 uy 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) (cbrt.f64 (cbrt.f64 (pow.f64 uy 2/3)))) (cbrt.f64 (pow.f64 (cbrt.f64 uy) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 uy) 4/3)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (cbrt.f64 (pow.f64 uy 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 uy) 4/3)) (*.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) (cbrt.f64 (cbrt.f64 (pow.f64 uy 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))) 2/3) (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))) 2/3) (cbrt.f64 (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (PI.f64) (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (+.f64 (cbrt.f64 (pow.f64 uy 2/3)) (cbrt.f64 (pow.f64 uy 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 uy uy) 4/3) (pow.f64 (+.f64 (PI.f64) (PI.f64)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 uy uy) 4/3) (pow.f64 (+.f64 (PI.f64) (PI.f64)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 uy 2/3) (PI.f64)) (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (PI.f64) (pow.f64 (pow.f64 uy 2/3) 4/3) (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (PI.f64)) (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (PI.f64) (*.f64 (pow.f64 (pow.f64 uy 2/3) 4/3) (PI.f64)))))))"]],"rules":[["egg-rr",47],["egg-rr",50],["egg-rr",52],["egg-rr",32]],"time":37.60693359375,"type":"rewrite"},{"count":[[217,188]],"inputs":[["(pow.f64 (pow.f64 uy 2) 1/3)","(pow.f64 (pow.f64 uy 2) 1/3)","(pow.f64 (pow.f64 uy 2) 1/3)","(pow.f64 (pow.f64 uy 2) 1/3)","(pow.f64 (pow.f64 uy 2) 1/3)","(pow.f64 (pow.f64 uy 2) 1/3)","(pow.f64 (pow.f64 uy 2) 1/3)","(pow.f64 (pow.f64 uy 2) 1/3)","(exp.f64 (*.f64 2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 uy))) (log.f64 -1))))","(exp.f64 (*.f64 2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 uy))) (log.f64 -1))))","(exp.f64 (*.f64 2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 uy))) (log.f64 -1))))","(exp.f64 (*.f64 2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 uy))) (log.f64 -1))))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 -2 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3) (*.f64 uy (PI.f64))))","(*.f64 -2 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3) (*.f64 uy (PI.f64))))","(*.f64 -2 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3) (*.f64 uy (PI.f64))))","(*.f64 -2 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3) (*.f64 uy (PI.f64))))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (pow.f64 uy 2) 1/3)","(pow.f64 uy 2/3)","(pow.f64 (pow.f64 uy 2) 1/3)","(pow.f64 uy 2/3)","(pow.f64 (pow.f64 uy 2) 1/3)","(pow.f64 uy 2/3)","(pow.f64 (pow.f64 uy 2) 1/3)","(pow.f64 uy 2/3)","(pow.f64 (pow.f64 uy 2) 1/3)","(pow.f64 uy 2/3)","(pow.f64 (pow.f64 uy 2) 1/3)","(pow.f64 uy 2/3)","(pow.f64 (pow.f64 uy 2) 1/3)","(pow.f64 uy 2/3)","(pow.f64 (pow.f64 uy 2) 1/3)","(pow.f64 uy 2/3)","(exp.f64 (*.f64 2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 uy))) (log.f64 -1))))","(pow.f64 (neg.f64 uy) 2/3)","(exp.f64 (*.f64 2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 uy))) (log.f64 -1))))","(pow.f64 (neg.f64 uy) 2/3)","(exp.f64 (*.f64 2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 uy))) (log.f64 -1))))","(pow.f64 (neg.f64 uy) 2/3)","(exp.f64 (*.f64 2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 uy))) (log.f64 -1))))","(pow.f64 (neg.f64 uy) 2/3)","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) uy)","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) uy)","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) uy)","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) uy)","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) uy)","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) uy)","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) uy)","(*.f64 2 (*.f64 uy (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) uy)","(*.f64 -2 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3) (*.f64 uy (PI.f64))))","(*.f64 (+.f64 (PI.f64) (PI.f64)) uy)","(*.f64 -2 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3) (*.f64 uy (PI.f64))))","(*.f64 (+.f64 (PI.f64) (PI.f64)) uy)","(*.f64 -2 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3) (*.f64 uy (PI.f64))))","(*.f64 (+.f64 (PI.f64) (PI.f64)) uy)","(*.f64 -2 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3) (*.f64 uy (PI.f64))))","(*.f64 (+.f64 (PI.f64) (PI.f64)) uy)","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) (pow.f64 (pow.f64 uy 8) 1/9))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) (pow.f64 (pow.f64 uy 8) 1/9))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) (pow.f64 (pow.f64 uy 8) 1/9))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) (pow.f64 (pow.f64 uy 8) 1/9))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) (pow.f64 (pow.f64 uy 8) 1/9))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) (pow.f64 (pow.f64 uy 8) 1/9))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) (pow.f64 (pow.f64 uy 8) 1/9))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) (pow.f64 (pow.f64 uy 8) 1/9))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) (pow.f64 (pow.f64 uy 8) 1/9))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) (pow.f64 (pow.f64 uy 8) 1/9))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) (pow.f64 (pow.f64 uy 8) 1/9))","(*.f64 2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 uy 8)) 1/9) (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) (pow.f64 (pow.f64 uy 8) 1/9))"]],"time":126.34619140625,"type":"simplify"},{"compiler":[[9121,6292]],"time":107.171875,"type":"eval"},{"alts":[["(*.f64 (-.f64 (pow.f64 (cos.f64 (*.f64 uy (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 uy (PI.f64))) 2)) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","fresh",0.5563173353308286],["(pow.f64 (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) 3)","fresh",0.8540059493710976],["(*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2/3) (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","fresh",3.1333356000225123],["(+.f64 (*.f64 -2 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)))) (+.f64 (*.f64 2/3 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)))) (+.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 -4/45 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 6) (pow.f64 (PI.f64) 6)))))))","fresh",8.332590375863996],["(fma.f64 1/2 (*.f64 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (-.f64 (neg.f64 (*.f64 ux ux)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 2 ux (neg.f64 (*.f64 ux ux))))) (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) 2))) (*.f64 maxCos maxCos)) (sqrt.f64 (/.f64 1 (fma.f64 2 ux (neg.f64 (*.f64 ux ux)))))) (fma.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 2 ux (neg.f64 (*.f64 ux ux)))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) (sqrt.f64 (/.f64 1 (fma.f64 2 ux (neg.f64 (*.f64 ux ux)))))))))","fresh",0.7032056800371765],["(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))","fresh",0.6568377387744355],["(*.f64 (cos.f64 (*.f64 (cbrt.f64 (cbrt.f64 uy)) (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","done",0.3879873845846346],["(*.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) 3) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","fresh",0.6464460353658154],["(*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (cbrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","fresh",0.562723537681143],["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6)))) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))","fresh",12.042591595698884],["(*.f64 (*.f64 (+.f64 (cos.f64 (*.f64 uy (PI.f64))) (sin.f64 (*.f64 uy (PI.f64)))) (-.f64 (cos.f64 (*.f64 uy (PI.f64))) (sin.f64 (*.f64 uy (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","fresh",0.598603347306001]],"compiler":[[37,29],[29,22],[40,28],[116,95],[100,60],[45,32],[41,33],[33,27],[44,31],[57,43],[43,27]],"count":[[234,11]],"kept":[{"done":[0,0],"fresh":[10,10],"new":[223,0],"picked":[1,1]}],"min-error":[0.0648759953983512],"time":85.301025390625,"type":"prune"},{"accuracy":[0.3426459986073749],"baseline":[0.34264599860737494],"branch":[["ux",0.34264599860737494,1],["uy",0.34264599860737494,1],["maxCos",0.3426459986073749,1],["(*.f64 (cos.f64 (*.f64 (*.f64 uy 2) (PI.f64))) (sqrt.f64 (-.f64 1 (*.f64 (+.f64 (-.f64 1 ux) (*.f64 ux maxCos)) (+.f64 (-.f64 1 ux) (*.f64 ux maxCos))))))",0.3426459986073749,1],["(cos.f64 (*.f64 (*.f64 uy 2) (PI.f64)))",0.3426459986073749,1],["(*.f64 (*.f64 uy 2) (PI.f64))",0.34264599860737494,1],["(*.f64 uy 2)",0.34264599860737494,1],["(sqrt.f64 (-.f64 1 (*.f64 (+.f64 (-.f64 1 ux) (*.f64 ux maxCos)) (+.f64 (-.f64 1 ux) (*.f64 ux maxCos)))))",0.34264599860737494,1],["(-.f64 1 (*.f64 (+.f64 (-.f64 1 ux) (*.f64 ux maxCos)) (+.f64 (-.f64 1 ux) (*.f64 ux maxCos))))",0.34264599860737494,1],["(*.f64 (+.f64 (-.f64 1 ux) (*.f64 ux maxCos)) (+.f64 (-.f64 1 ux) (*.f64 ux maxCos)))",0.3426459986073749,1],["(+.f64 (-.f64 1 ux) (*.f64 ux maxCos))",0.3426459986073749,1]],"compiler":[[4,3],[4,3],[4,3],[28,20],[9,8],[8,7],[6,5],[21,14],[20,13],[18,11],[10,7],[1099,688]],"count":[[27,1]],"inputs":[["(pow.f64 (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) 3)","(*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2/3) (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(fma.f64 1/2 (*.f64 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (-.f64 (neg.f64 (*.f64 ux ux)) (pow.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 2 ux (neg.f64 (*.f64 ux ux))))) (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) 2))) (*.f64 maxCos maxCos)) (sqrt.f64 (/.f64 1 (fma.f64 2 ux (neg.f64 (*.f64 ux ux)))))) (fma.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (sqrt.f64 (fma.f64 2 ux (neg.f64 (*.f64 ux ux)))) (*.f64 1/2 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 uy (PI.f64)))) (*.f64 maxCos (fma.f64 -2 ux (*.f64 2 (*.f64 ux ux))))) (sqrt.f64 (/.f64 1 (fma.f64 2 ux (neg.f64 (*.f64 ux ux)))))))))","(*.f64 (cos.f64 (*.f64 (cbrt.f64 (cbrt.f64 uy)) (*.f64 (cbrt.f64 (pow.f64 uy 2/3)) (*.f64 (pow.f64 uy 2/3) (+.f64 (PI.f64) (PI.f64)))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) 3) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2)) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))))","(*.f64 (cos.f64 (*.f64 (cbrt.f64 uy) (*.f64 (cbrt.f64 (*.f64 uy uy)) (+.f64 (PI.f64) (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (*.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))) (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) 2)))","(pow.f64 (cbrt.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) 3)","(*.f64 (-.f64 (pow.f64 (cos.f64 (*.f64 uy (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 uy (PI.f64))) 2)) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(+.f64 (*.f64 -2 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 2) (pow.f64 (PI.f64) 2)))) (+.f64 (*.f64 2/3 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 4) (pow.f64 (PI.f64) 4)))) (+.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 -4/45 (*.f64 (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))) (*.f64 (pow.f64 uy 6) (pow.f64 (PI.f64) 6)))))))","(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (pow.f64 (pow.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))) 3/2) 1/3))","(*.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))) 3) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2))))) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))","(*.f64 (*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))) (cbrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))","(*.f64 (*.f64 (+.f64 (cos.f64 (*.f64 uy (PI.f64))) (sin.f64 (*.f64 uy (PI.f64)))) (-.f64 (cos.f64 (*.f64 uy (PI.f64))) (sin.f64 (*.f64 uy (PI.f64))))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (cbrt.f64 (neg.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (cbrt.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4)) 1)))","(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (*.f64 (+.f64 -1 (fma.f64 ux maxCos (-.f64 1 ux))) (-.f64 -1 (fma.f64 ux maxCos (-.f64 1 ux))))))","(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6)))) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))","(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (/.f64 (-.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (*.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6))) (*.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))))))","(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 (PI.f64) (+.f64 (PI.f64) (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) -1)))))","(*.f64 (cos.f64 (*.f64 (*.f64 uy (cbrt.f64 (PI.f64))) (*.f64 2 (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))","(*.f64 (cbrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2)))) (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))) (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64))))))","(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (/.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6) 3)) (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 4) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))) (+.f64 1 (+.f64 (pow.f64 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2) 6) (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 6))))))","(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 ux maxCos (-.f64 1 ux)) 2))))","(*.f64 (cos.f64 (*.f64 (*.f64 uy 2) (PI.f64))) (sqrt.f64 (-.f64 1 (*.f64 (+.f64 (-.f64 1 ux) (*.f64 ux maxCos)) (+.f64 (-.f64 1 ux) (*.f64 ux maxCos))))))"]],"link":["."],"name":["UniformSampleCone, x"],"oracle":[19.91588225919334],"outputs":[["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))"]],"time":114.6630859375,"times":[["ux",8.453125],["uy",8.1279296875],["maxCos",8.153076171875],["(*.f64 (cos.f64 (*.f64 (*.f64 uy 2) (PI.f64))) (sqrt.f64 (-.f64 1 (*.f64 (+.f64 (-.f64 1 ux) (*.f64 ux maxCos)) (+.f64 (-.f64 1 ux) (*.f64 ux maxCos))))))",9.154052734375],["(cos.f64 (*.f64 (*.f64 uy 2) (PI.f64)))",8.2060546875],["(*.f64 (*.f64 uy 2) (PI.f64))",8.2109375],["(*.f64 uy 2)",8.235107421875],["(sqrt.f64 (-.f64 1 (*.f64 (+.f64 (-.f64 1 ux) (*.f64 ux maxCos)) (+.f64 (-.f64 1 ux) (*.f64 ux maxCos)))))",8.824951171875],["(-.f64 1 (*.f64 (+.f64 (-.f64 1 ux) (*.f64 ux maxCos)) (+.f64 (-.f64 1 ux) (*.f64 ux maxCos))))",8.60498046875],["(*.f64 (+.f64 (-.f64 1 ux) (*.f64 ux maxCos)) (+.f64 (-.f64 1 ux) (*.f64 ux maxCos)))",8.591064453125],["(+.f64 (-.f64 1 ux) (*.f64 ux maxCos))",8.744873046875]],"type":"regimes"},{"compiler":[[30,24]],"inputs":[["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (+.f64 (*.f64 (-.f64 2 (*.f64 2 maxCos)) ux) (*.f64 -1 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(*.f64 (cos.f64 (*.f64 uy (+.f64 (PI.f64) (PI.f64)))) (sqrt.f64 (fma.f64 (-.f64 2 (+.f64 maxCos maxCos)) ux (neg.f64 (pow.f64 (*.f64 (+.f64 maxCos -1) ux) 2)))))"]],"stop":[["fuel",1]],"time":25.2080078125,"type":"simplify"},{"time":0.014892578125,"type":"soundness"},{"compiler":[[30,24]],"remove-preprocessing":[[]],"time":14.30615234375,"type":"end"}]
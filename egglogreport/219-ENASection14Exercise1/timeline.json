[{"compiler":[[17,12]],"method":["search"],"sampling":[[1,3.6621093750000304e-6,0.0,0.999996337890625],[0,0.0,3.6621093750000304e-6,0.999996337890625]],"time":0.19482421875,"type":"analyze"},{"outcomes":[["body",256,"valid",452.1640625,8256]],"time":459.56005859375,"type":"sample"},{"compiler":[[10,7]],"inputs":[["0"],["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x)))"]],"symmetry":[[]],"time":70.864990234375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x)))"]],"time":36.568115234375,"type":"simplify"},{"compiler":[[19,12]],"time":0.390869140625,"type":"eval"},{"alts":[["(*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x)))","fresh",3.5904545482594328],["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))","next",3.579024396718685]],"compiler":[[10,7],[10,7],[10,7],[10,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[3.399657170392266],"time":1.27001953125,"type":"prune"},{"compiler":[[28,13]],"locations":[["(cos.f64 x)",0.0234375,true],["(*.f64 10 (*.f64 x x))",0.26953125,true],["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))",0.31478500976844204,true],["(exp.f64 (*.f64 10 (*.f64 x x)))",3.3197003571398227,true]],"time":7.3310546875,"type":"localize"},{"count":[[4,40]],"series":[["(cos.f64 x)","x","-inf",0.133056640625],["(cos.f64 x)","x","inf",0.137939453125],["(cos.f64 x)","x","0",0.2109375],["(*.f64 10 (*.f64 x x))","x","-inf",0.157958984375],["(*.f64 10 (*.f64 x x))","x","inf",0.318115234375],["(*.f64 10 (*.f64 x x))","x","0",0.434814453125],["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))","x","-inf",0.318115234375],["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))","x","inf",0.31298828125],["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))","x","0",0.289794921875],["(exp.f64 (*.f64 10 (*.f64 x x)))","x","-inf",0.177001953125],["(exp.f64 (*.f64 10 (*.f64 x x)))","x","inf",0.230224609375],["(exp.f64 (*.f64 10 (*.f64 x x)))","x","0",0.349853515625]],"time":3.217041015625,"type":"series"},{"count":[[4,164]],"inputs":[["(exp.f64 (*.f64 10 (*.f64 x x)))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))","(*.f64 10 (*.f64 x x))","(cos.f64 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (exp.f64 (*.f64 (*.f64 10 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 (*.f64 10 x) x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (exp.f64 (*.f64 (*.f64 10 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))) (neg.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (*.f64 (*.f64 10 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (*.f64 (*.f64 10 x) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (*.f64 (*.f64 10 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 (*.f64 10 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 (*.f64 (*.f64 10 x) x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (*.f64 (*.f64 10 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (exp.f64 (*.f64 (*.f64 10 x) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (exp.f64 (*.f64 -10 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 10) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 x 2/3)) (*.f64 (pow.f64 x 4/3) 10))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) (*.f64 10 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 (cbrt.f64 100) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 10)) x) (*.f64 (sqrt.f64 10) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 10) (pow.f64 x 2/3)) (pow.f64 x 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (*.f64 10 x)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 x x)) (cbrt.f64 100))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (neg.f64 x) (neg.f64 (sqrt.f64 10)))) (*.f64 (neg.f64 x) (neg.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 x 2/3)) (*.f64 (*.f64 10 x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (neg.f64 (sqrt.f64 10)) x)) (*.f64 (neg.f64 (sqrt.f64 10)) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (neg.f64 (*.f64 (sqrt.f64 10) x))) (neg.f64 (*.f64 (sqrt.f64 10) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x (neg.f64 (sqrt.f64 10)))) (*.f64 x (neg.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (neg.f64 x) (sqrt.f64 10))) (*.f64 (neg.f64 x) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (sqrt.f64 10) (neg.f64 x))) (*.f64 (sqrt.f64 10) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 x 4/3)) (*.f64 10 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 100)) (*.f64 (*.f64 x x) (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (pow.f64 x 4/3) 10)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 (sqrt.f64 10) x) -1)) (*.f64 (*.f64 (sqrt.f64 10) x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (neg.f64 (sqrt.f64 10)) (neg.f64 x))) (*.f64 (neg.f64 (sqrt.f64 10)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 10 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 10)) (*.f64 (*.f64 x x) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 x 4/3)) (cbrt.f64 100)) (cbrt.f64 (*.f64 (*.f64 10 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (*.f64 (*.f64 10 x) x))) (*.f64 (pow.f64 x 4/3) (cbrt.f64 100)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x x)) 10)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 (*.f64 10 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 (*.f64 10 x) x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (*.f64 -10 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 10)) (*.f64 x x)) (sqrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 10 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (cbrt.f64 100) (*.f64 x x))) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 -10 (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (*.f64 (*.f64 10 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (*.f64 (*.f64 10 x) x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (/.f64 (*.f64 (*.f64 (*.f64 10 x) x) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 10 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (/.f64 (*.f64 (*.f64 (*.f64 10 x) x) 3) 3) 0))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 (*.f64 10 x) x)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (pow.f64 (cos.f64 x) 2/3) (exp.f64 (*.f64 (*.f64 10 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (exp.f64 (*.f64 (*.f64 10 x) x))) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (cos.f64 x)) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x)))) (pow.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x))) 2/3) (cbrt.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 (*.f64 (*.f64 10 x) x)) (cbrt.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2/3) (*.f64 (exp.f64 (*.f64 (*.f64 10 x) x)) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x))))) (neg.f64 (pow.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 10 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 10 x) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (*.f64 10 x) x) 9) 9)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (-.f64 9 (*.f64 (*.f64 10 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (*.f64 10 x) x) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (*.f64 10 x) x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (*.f64 10 x) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 3 (*.f64 (*.f64 10 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 1 (*.f64 (*.f64 10 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -10 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 10) x) (*.f64 (sqrt.f64 10) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 10) x)) (neg.f64 (*.f64 (sqrt.f64 10) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sqrt.f64 10) x) -1) (*.f64 (*.f64 (sqrt.f64 10) x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 10 (pow.f64 x 2/3)) (pow.f64 x 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 10 x) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (cbrt.f64 10)) (cbrt.f64 100))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (pow.f64 x 4/3) 10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 4/3) (*.f64 10 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 10 x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 4/3) 10) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 100) (*.f64 (*.f64 x x) (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (neg.f64 (sqrt.f64 10))) (*.f64 x (neg.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (neg.f64 (sqrt.f64 10))) (*.f64 (neg.f64 x) (neg.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (sqrt.f64 10)) (*.f64 (neg.f64 x) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 10)) x) (*.f64 (neg.f64 (sqrt.f64 10)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 10)) (neg.f64 x)) (*.f64 (neg.f64 (sqrt.f64 10)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 10) (neg.f64 x)) (*.f64 (sqrt.f64 10) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -10 (*.f64 x x))) (neg.f64 (*.f64 (pow.f64 x 4/3) (cbrt.f64 100))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (pow.f64 x 4/3) (cbrt.f64 100)) (-.f64 0 (*.f64 (cbrt.f64 (*.f64 (*.f64 10 x) x)) 0))) (+.f64 (cbrt.f64 (*.f64 (*.f64 10 x) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (*.f64 (pow.f64 x 4/3) (cbrt.f64 100)) (*.f64 0 (cbrt.f64 (*.f64 (*.f64 10 x) x))))) (+.f64 0 (cbrt.f64 (*.f64 (*.f64 10 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 10 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 10) (*.f64 (*.f64 x x) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 10) (*.f64 (cbrt.f64 100) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 10 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (sqrt.f64 10)) (sqrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 100) (*.f64 x x)) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 10 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) 10)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -10 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 10 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 10 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -10 (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 10 x) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 10 x) x)) (*.f64 (pow.f64 x 4/3) (cbrt.f64 100)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 4/3) (cbrt.f64 100)) (cbrt.f64 (*.f64 (*.f64 10 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x x) (/.f64 1 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 10 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -10 (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1000 (pow.f64 x 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 10 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 10 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 10) x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (neg.f64 (sqrt.f64 10)) x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (neg.f64 x) (neg.f64 (sqrt.f64 10))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 10) (neg.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (sqrt.f64 10) x) -1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (*.f64 (sqrt.f64 10) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (neg.f64 (sqrt.f64 10))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (neg.f64 (sqrt.f64 10)) (neg.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (neg.f64 x) (sqrt.f64 10)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -10 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 1000 (pow.f64 x 6)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 0) (cos.f64 x)) (*.f64 (sin.f64 0) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 x) (cos.f64 0)) (*.f64 (sin.f64 x) (sin.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cos.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) (neg.f64 (pow.f64 (cos.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 x)))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (neg.f64 x))))))"]],"rules":[["egg-rr",22],["egg-rr",62],["egg-rr",28],["egg-rr",52]],"time":52.677978515625,"type":"rewrite"},{"count":[[204,188]],"inputs":[["1","(+.f64 (*.f64 10 (pow.f64 x 2)) 1)","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 1 (*.f64 50 (pow.f64 x 4))))","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 (*.f64 500/3 (pow.f64 x 6)) (+.f64 1 (*.f64 50 (pow.f64 x 4)))))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","1","(+.f64 1 (*.f64 19/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 1081/24 (pow.f64 x 4)) (*.f64 19/2 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 1081/24 (pow.f64 x 4)) (+.f64 (*.f64 19/2 (pow.f64 x 2)) (*.f64 102299/720 (pow.f64 x 6)))))","(*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) (cos.f64 x))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (pow.f64 x 2))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 (*.f64 10 (pow.f64 x 2)) 1)","(fma.f64 10 (*.f64 x x) 1)","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 1 (*.f64 50 (pow.f64 x 4))))","(fma.f64 10 (*.f64 x x) (fma.f64 50 (pow.f64 x 4) 1))","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 (*.f64 500/3 (pow.f64 x 6)) (+.f64 1 (*.f64 50 (pow.f64 x 4)))))","(fma.f64 (*.f64 x x) 10 (fma.f64 500/3 (pow.f64 x 6) (fma.f64 50 (pow.f64 x 4) 1)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (*.f64 x x)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (*.f64 x x)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (*.f64 x x)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (*.f64 x x)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (*.f64 x x)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (*.f64 x x)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (*.f64 x x)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (*.f64 x x)))","1","(+.f64 1 (*.f64 19/2 (pow.f64 x 2)))","(fma.f64 (*.f64 x x) 19/2 1)","(+.f64 1 (+.f64 (*.f64 1081/24 (pow.f64 x 4)) (*.f64 19/2 (pow.f64 x 2))))","(+.f64 1 (fma.f64 1081/24 (pow.f64 x 4) (*.f64 19/2 (*.f64 x x))))","(+.f64 1 (+.f64 (*.f64 1081/24 (pow.f64 x 4)) (+.f64 (*.f64 19/2 (pow.f64 x 2)) (*.f64 102299/720 (pow.f64 x 6)))))","(+.f64 1 (fma.f64 1081/24 (pow.f64 x 4) (fma.f64 102299/720 (pow.f64 x 6) (*.f64 19/2 (*.f64 x x)))))","(*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (*.f64 x x))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (*.f64 x x))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (*.f64 x x))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (*.f64 x x))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (*.f64 x x))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (*.f64 x x))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (*.f64 x x))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) (cos.f64 x))","(*.f64 (exp.f64 (*.f64 10 (*.f64 x x))) (cos.f64 x))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (*.f64 x x))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (*.f64 x x))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (*.f64 x x))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (*.f64 x x))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (*.f64 x x))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (*.f64 x x))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (*.f64 x x))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (*.f64 x x))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (*.f64 x x))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (*.f64 x x))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (*.f64 x x))","(*.f64 10 (pow.f64 x 2))","(*.f64 10 (*.f64 x x))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(fma.f64 (*.f64 x x) -1/2 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (fma.f64 1/24 (pow.f64 x 4) (*.f64 -1/2 (*.f64 x x))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))","(+.f64 (fma.f64 (*.f64 x x) -1/2 1) (fma.f64 1/24 (pow.f64 x 4) (*.f64 -1/720 (pow.f64 x 6))))"]],"time":118.02001953125,"type":"simplify"},{"compiler":[[2490,1589]],"time":32.947998046875,"type":"eval"},{"alts":[["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 (neg.f64 (sqrt.f64 10)) (neg.f64 x))) (*.f64 (neg.f64 (sqrt.f64 10)) (neg.f64 x))))","fresh",4.603201351143059],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 (cbrt.f64 100) (*.f64 x x))))","fresh",4.137865348881774],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 x) (*.f64 10 x)))","fresh",3.3157677509360792],["(*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 (*.f64 10 x) x) 3))))","fresh",3.8743284765198487],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 (pow.f64 x 4/3) 10)) (pow.f64 x 2/3)))","fresh",4.074221081435124],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (pow.f64 x 2/3)) (*.f64 (pow.f64 x 4/3) 10)))","fresh",4.170667054673377],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (cbrt.f64 100)) (*.f64 (*.f64 x x) (cbrt.f64 10))))","fresh",4.974265481071813],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 10) (*.f64 x x)))","fresh",3.073475518667646],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (pow.f64 x 4/3)) (*.f64 10 (pow.f64 x 2/3))))","fresh",4.112242482809527],["(*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 3) (exp.f64 (*.f64 10 (*.f64 x x))))","fresh",3.610576091255048],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 (cbrt.f64 100) (*.f64 x x))) (cbrt.f64 10)))","fresh",4.647401304758839],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (neg.f64 (*.f64 (sqrt.f64 10) x))) (neg.f64 (*.f64 (sqrt.f64 10) x))))","fresh",4.564782923297043],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 -1) (*.f64 -10 (*.f64 x x))))","fresh",3.684932974940687],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (pow.f64 x 2/3)) (*.f64 (*.f64 10 x) (cbrt.f64 x))))","fresh",4.010656951731001],["(*.f64 (cos.f64 x) (pow.f64 (E.f64) (*.f64 (*.f64 10 x) x)))","fresh",3.802837747708413],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 x x)) (cbrt.f64 100)))","fresh",4.226001248416154],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (cbrt.f64 (*.f64 (*.f64 10 x) x))) (*.f64 (pow.f64 x 4/3) (cbrt.f64 100))))","fresh",3.9497560557884546],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 (*.f64 10 x)) (cbrt.f64 x)) (pow.f64 x 2/3)))","fresh",3.790912076323827],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 (pow.f64 x 4/3)) (cbrt.f64 100)) (cbrt.f64 (*.f64 (*.f64 10 x) x))))","fresh",3.836376385542641],["(*.f64 (cos.f64 x) (*.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20))))","fresh",2.8555310566457246],["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))","done",3.579024396718685],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 10) (pow.f64 x 2/3)) (pow.f64 x 4/3)))","fresh",3.916686426681541],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (sqrt.f64 10)) (*.f64 (*.f64 x x) (sqrt.f64 10))))","fresh",4.832286304484257],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","next",2.8324546477205566],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 10 x)) x))","fresh",3.2355554065162533],["(pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x)))) 3)","fresh",3.596742477284697],["(*.f64 (cos.f64 x) (pow.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))) 3))","fresh",3.5597118877862672],["(*.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (cos.f64 x)))","fresh",2.837759741208524],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 (*.f64 (*.f64 10 x) x) 3)) 1/3))","fresh",4.068007698398701],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 x x)) 10))","fresh",3.153021825217727]],"compiler":[[18,14],[14,11],[10,7],[13,10],[14,11],[14,11],[14,11],[10,7],[14,11],[13,10],[14,11],[16,13],[12,9],[15,11],[11,8],[14,11],[18,14],[15,11],[18,14],[19,14],[10,7],[14,11],[14,11],[19,14],[10,7],[13,10],[13,10],[19,14],[14,11],[10,7],[18,14],[14,11],[10,7],[13,10],[14,11],[14,11],[14,11],[10,7],[14,11],[13,10],[14,11],[16,13],[12,9],[15,11],[11,8],[14,11],[18,14],[15,11],[18,14],[19,14],[14,11],[14,11],[19,14],[10,7],[13,10],[13,10],[19,14],[14,11],[10,7]],"count":[[190,30]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[188,29],"picked":[1,1]}],"min-error":[0.8837755677954031],"time":35.81298828125,"type":"prune"},{"compiler":[[75,41]],"locations":[["(*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))))",0.4567375488422101,true],["(exp.f64 (*.f64 x x))",0.9950143918947151,true],["(pow.f64 (exp.f64 (*.f64 x x)) 20)",2.259665775187125,true],["(exp.f64 (*.f64 (*.f64 10 x) x))",3.3197003571398227,true]],"time":21.4609375,"type":"localize"},{"count":[[4,48]],"series":[["(*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))))","x","-inf",0.319091796875],["(*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))))","x","inf",1.440185546875],["(*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))))","x","0",0.380859375],["(exp.f64 (*.f64 x x))","x","-inf",0.14013671875],["(exp.f64 (*.f64 x x))","x","inf",0.14404296875],["(exp.f64 (*.f64 x x))","x","0",0.197998046875],["(pow.f64 (exp.f64 (*.f64 x x)) 20)","x","-inf",0.161865234375],["(pow.f64 (exp.f64 (*.f64 x x)) 20)","x","inf",1.18408203125],["(pow.f64 (exp.f64 (*.f64 x x)) 20)","x","0",0.375],["(exp.f64 (*.f64 (*.f64 10 x) x))","x","-inf",0.1728515625],["(exp.f64 (*.f64 (*.f64 10 x) x))","x","inf",0.1611328125],["(exp.f64 (*.f64 (*.f64 10 x) x))","x","0",0.22607421875]],"time":5.070068359375,"type":"series"},{"count":[[4,132]],"inputs":[["(exp.f64 (*.f64 (*.f64 10 x) x))","(pow.f64 (exp.f64 (*.f64 x x)) 20)","(exp.f64 (*.f64 x x))","(*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 0) (exp.f64 (*.f64 10 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 10 (*.f64 x x))) (*.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (exp.f64 (*.f64 10 (*.f64 x x)))) (exp.f64 (*.f64 10 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 10 (*.f64 x x))) (*.f64 0 (exp.f64 (*.f64 10 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 2/3)) (pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 2/3)) (pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 2/3)) (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 2/3) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (*.f64 10 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 10 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) (*.f64 10 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 10) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 10 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 10 (*.f64 x x)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (*.f64 10 x))) (*.f64 (pow.f64 (*.f64 10 x) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 10 (pow.f64 x 2/3))) (cbrt.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 10)) (*.f64 (sqrt.f64 10) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x (sqrt.f64 10))) (*.f64 x (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (neg.f64 (*.f64 10 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 x)) (*.f64 (pow.f64 x 2/3) (*.f64 10 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 (cbrt.f64 100) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (*.f64 10 (*.f64 x x)))) (cbrt.f64 (*.f64 100 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 10 x) (cbrt.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (*.f64 100 (pow.f64 x 4)))) (cbrt.f64 (*.f64 10 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x (cbrt.f64 (*.f64 10 x)))) (pow.f64 (*.f64 10 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x x)) 10)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (*.f64 10 (*.f64 x x)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 10 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 10 (*.f64 x x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 0 (*.f64 10 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 10 (*.f64 x x)) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (/.f64 (*.f64 10 (*.f64 x x)) 3) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (*.f64 (*.f64 x x) 20)) 0) (exp.f64 (*.f64 (*.f64 x x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 (*.f64 x x) 20)) (*.f64 (exp.f64 (*.f64 (*.f64 x x) 20)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (exp.f64 (*.f64 (*.f64 x x) 20))) (exp.f64 (*.f64 (*.f64 x x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 (*.f64 x x) 20)) (*.f64 0 (exp.f64 (*.f64 (*.f64 x x) 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (*.f64 (*.f64 x x) 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (*.f64 (*.f64 x x) 20))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20))) (pow.f64 (exp.f64 (*.f64 (*.f64 x x) 20)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 x x) 20)) 2/3) (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (*.f64 (*.f64 x x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 (*.f64 x x) 20)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (*.f64 (*.f64 x x) 20)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 (*.f64 x x) 20) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) (*.f64 x 20))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (*.f64 (*.f64 x x) 20))) (pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) 20)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 20) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 (*.f64 x x) 20))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 x 2/3)) (*.f64 (cbrt.f64 (pow.f64 x 4)) 20))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x (sqrt.f64 20))) (*.f64 x (sqrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x x)) 20)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 x x) 20)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 x x) (cbrt.f64 20))) (cbrt.f64 400))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 x x) (sqrt.f64 20))) (sqrt.f64 20))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (*.f64 (*.f64 x x) 20))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (*.f64 (*.f64 x x) 20) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 x x) 20))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 x x) 20) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 0 (*.f64 (*.f64 x x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) 20) 3) 1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (*.f64 x x)) 0) (exp.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 x x)) (*.f64 (exp.f64 (*.f64 x x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (exp.f64 (*.f64 x x))) (exp.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 x x)) (*.f64 0 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (pow.f64 (exp.f64 (*.f64 x x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3) (cbrt.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 x x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 x 2/3)) (cbrt.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (neg.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 x)) (*.f64 (pow.f64 x 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (pow.f64 x 4))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 x x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 0 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 x x) 3) 1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) 0) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) (*.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) (*.f64 0 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 2/3)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 2/3)) (cos.f64 x)) (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))) (pow.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) 2/3) (cbrt.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (exp.f64 (*.f64 10 (*.f64 x x))) (cos.f64 x))) (pow.f64 (cos.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (*.f64 (exp.f64 (*.f64 10 (*.f64 x x))) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 2/3)) (*.f64 (cos.f64 x) (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (exp.f64 (*.f64 10 (*.f64 x x)))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (exp.f64 (*.f64 10 (*.f64 x x)))))))))"]],"rules":[["egg-rr",28],["egg-rr",29],["egg-rr",31],["egg-rr",44]],"time":32.202880859375,"type":"rewrite"},{"count":[[180,162]],"inputs":[["1","(+.f64 (*.f64 10 (pow.f64 x 2)) 1)","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 1 (*.f64 50 (pow.f64 x 4))))","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 (*.f64 500/3 (pow.f64 x 6)) (+.f64 1 (*.f64 50 (pow.f64 x 4)))))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","1","(+.f64 1 (*.f64 20 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 200 (pow.f64 x 4)) (*.f64 20 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 200 (pow.f64 x 4)) (+.f64 (*.f64 20 (pow.f64 x 2)) (*.f64 4000/3 (pow.f64 x 6)))))","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","1","(+.f64 1 (pow.f64 x 2))","(+.f64 1 (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 x 6)) (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4)))))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","1","(+.f64 1 (*.f64 17/6 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 283/72 (pow.f64 x 4)) (*.f64 17/6 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 283/72 (pow.f64 x 4)) (+.f64 (*.f64 17/6 (pow.f64 x 2)) (*.f64 22891/6480 (pow.f64 x 6)))))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 (*.f64 10 (pow.f64 x 2)) 1)","(fma.f64 10 (*.f64 x x) 1)","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 1 (*.f64 50 (pow.f64 x 4))))","(fma.f64 10 (*.f64 x x) (fma.f64 50 (pow.f64 x 4) 1))","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 (*.f64 500/3 (pow.f64 x 6)) (+.f64 1 (*.f64 50 (pow.f64 x 4)))))","(fma.f64 10 (*.f64 x x) (fma.f64 (pow.f64 x 6) 500/3 (fma.f64 50 (pow.f64 x 4) 1)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (*.f64 x x)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (*.f64 x x)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (*.f64 x x)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (*.f64 x x)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (*.f64 x x)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (*.f64 x x)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (*.f64 x x)))","(exp.f64 (*.f64 10 (pow.f64 x 2)))","(exp.f64 (*.f64 10 (*.f64 x x)))","1","(+.f64 1 (*.f64 20 (pow.f64 x 2)))","(fma.f64 20 (*.f64 x x) 1)","(+.f64 1 (+.f64 (*.f64 200 (pow.f64 x 4)) (*.f64 20 (pow.f64 x 2))))","(+.f64 1 (fma.f64 200 (pow.f64 x 4) (*.f64 (*.f64 20 x) x)))","(+.f64 1 (+.f64 (*.f64 200 (pow.f64 x 4)) (+.f64 (*.f64 20 (pow.f64 x 2)) (*.f64 4000/3 (pow.f64 x 6)))))","(+.f64 1 (fma.f64 200 (pow.f64 x 4) (fma.f64 (pow.f64 x 6) 4000/3 (*.f64 (*.f64 20 x) x))))","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(exp.f64 (*.f64 (*.f64 20 x) x))","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(exp.f64 (*.f64 (*.f64 20 x) x))","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(exp.f64 (*.f64 (*.f64 20 x) x))","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(exp.f64 (*.f64 (*.f64 20 x) x))","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(exp.f64 (*.f64 (*.f64 20 x) x))","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(exp.f64 (*.f64 (*.f64 20 x) x))","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(exp.f64 (*.f64 (*.f64 20 x) x))","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(exp.f64 (*.f64 (*.f64 20 x) x))","1","(+.f64 1 (pow.f64 x 2))","(fma.f64 x x 1)","(+.f64 1 (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4))))","(+.f64 1 (fma.f64 (pow.f64 x 4) 1/2 (*.f64 x x)))","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 x 6)) (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 (pow.f64 x 6) 1/6 (fma.f64 (pow.f64 x 4) 1/2 (*.f64 x x))))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","1","(+.f64 1 (*.f64 17/6 (pow.f64 x 2)))","(fma.f64 17/6 (*.f64 x x) 1)","(+.f64 1 (+.f64 (*.f64 283/72 (pow.f64 x 4)) (*.f64 17/6 (pow.f64 x 2))))","(+.f64 1 (fma.f64 283/72 (pow.f64 x 4) (*.f64 (*.f64 17/6 x) x)))","(+.f64 1 (+.f64 (*.f64 283/72 (pow.f64 x 4)) (+.f64 (*.f64 17/6 (pow.f64 x 2)) (*.f64 22891/6480 (pow.f64 x 6)))))","(+.f64 1 (fma.f64 283/72 (pow.f64 x 4) (fma.f64 (pow.f64 x 6) 22891/6480 (*.f64 (*.f64 17/6 x) x))))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (cos.f64 x))"]],"time":144.72607421875,"type":"simplify"},{"compiler":[[3679,2253]],"time":41.26708984375,"type":"eval"},{"alts":[["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 (neg.f64 (sqrt.f64 10)) (neg.f64 x))) (*.f64 (neg.f64 (sqrt.f64 10)) (neg.f64 x))))","fresh",4.603201351143059],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 (cbrt.f64 100) (*.f64 x x))))","fresh",4.137865348881774],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 10))))","fresh",3.1368089426472046],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 (pow.f64 x 2/3))) (cbrt.f64 (pow.f64 x 4))))))","fresh",2.8912040273900783],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 x) (*.f64 10 x)))","fresh",3.3157677509360792],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (cbrt.f64 (*.f64 10 x)))) (pow.f64 (*.f64 10 x) 2/3)))))","fresh",3.3107868445267696],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 10 x))) (*.f64 (pow.f64 (*.f64 10 x) 2/3) x)))))","fresh",3.2684815996976635],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 (pow.f64 x 4/3) 10)) (pow.f64 x 2/3)))","fresh",4.074221081435124],["(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 3))) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",3.0676092795835315],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 x x) (cbrt.f64 20))) (cbrt.f64 400))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",4.260419122389843],["(*.f64 (cbrt.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 x x) 20)) 2/3) (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20))))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",3.387417305843179],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 100 (pow.f64 x 4)))) (cbrt.f64 (*.f64 10 (*.f64 x x)))))))","fresh",2.888374658851509],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 10) (*.f64 x x)))","fresh",3.073475518667646],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 10 x) (cbrt.f64 x))) (pow.f64 x 2/3)))))","fresh",2.967721336858698],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (E.f64) (*.f64 10 (*.f64 x x))))))","fresh",3.190875238066509],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (pow.f64 x 4/3)) (*.f64 10 (pow.f64 x 2/3))))","fresh",4.112242482809527],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (cbrt.f64 (pow.f64 x 4))) (pow.f64 x 2/3)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",3.258462960224144],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 (cbrt.f64 100) (*.f64 x x))) (cbrt.f64 10)))","fresh",4.647401304758839],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 10 (*.f64 x x)))) (cbrt.f64 (*.f64 100 (pow.f64 x 4)))))))","fresh",2.889461912576974],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 10 x)))))","fresh",2.7130641845229575],["(pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x)))) 3)","fresh",3.596742477284697],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) 3) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",2.848848901807626],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","fresh",2.6615025916793034],["(*.f64 (cos.f64 x) (pow.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))) 3))","fresh",3.5597118877862672],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (sqrt.f64 20))) (*.f64 x (sqrt.f64 20)))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",4.0159579577925895],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 -1) (*.f64 -10 (*.f64 x x))))","fresh",3.684932974940687],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (pow.f64 x 2/3)) (*.f64 (*.f64 10 x) (cbrt.f64 x))))","fresh",4.010656951731001],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (neg.f64 x)) (neg.f64 x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",2.6281185408087815],["(*.f64 (cbrt.f64 (pow.f64 (E.f64) (*.f64 (*.f64 x x) 20))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",3.4765200252680426],["(*.f64 (cos.f64 x) (pow.f64 (E.f64) (*.f64 (*.f64 10 x) x)))","fresh",3.802837747708413],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 20) (*.f64 x x))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",2.792167080427297],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 (*.f64 10 (*.f64 x x)) 3) 1/3)))))","fresh",3.298155620697226],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 (cbrt.f64 100) (*.f64 x x))))))","fresh",3.307606184300222],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 x x)) 10))","fresh",3.153021825217727],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 2/3)) (*.f64 (cos.f64 x) (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))))))","fresh",3.15948412884544],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 x)) (*.f64 (pow.f64 x 2/3) (*.f64 10 x))))))","fresh",2.838999106640183],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 (*.f64 10 x)) (cbrt.f64 x)) (pow.f64 x 2/3)))","fresh",3.790912076323827],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",3.3091538643828358],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 (pow.f64 x 4/3)) (cbrt.f64 100)) (cbrt.f64 (*.f64 (*.f64 10 x) x))))","fresh",3.836376385542641],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 10) (pow.f64 x 2/3)) (pow.f64 x 4/3)))","fresh",3.916686426681541],["(*.f64 (cos.f64 x) (*.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20))))","fresh",2.8555310566457246],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (E.f64) (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",3.275182285631681],["(*.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",3.223407550213106],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (sqrt.f64 10))) (*.f64 x (sqrt.f64 10))))))","fresh",3.3156265156428733],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 (*.f64 x x) 3) 1/3)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",3.315616995093941],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","next",2.408940238425829],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 10)) (*.f64 (sqrt.f64 10) (*.f64 x x))))))","fresh",3.3726482157914885],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 10 x)) x))","fresh",3.2355554065162533],["(*.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (cos.f64 x)))","fresh",2.837759741208524],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 x 2/3)) (*.f64 (cbrt.f64 (pow.f64 x 4)) 20))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",3.3856537236394226]],"compiler":[[18,14],[14,11],[19,12],[24,19],[10,7],[26,20],[26,20],[14,11],[22,17],[23,18],[29,21],[27,20],[10,7],[24,18],[20,14],[14,11],[24,19],[14,11],[27,20],[19,14],[13,10],[22,17],[19,14],[13,10],[23,18],[12,9],[15,11],[21,15],[20,15],[11,8],[19,14],[23,17],[23,17],[10,7],[30,21],[24,18],[15,11],[19,14],[18,14],[14,11],[19,14],[20,15],[19,14],[23,18],[23,18],[19,14],[23,17],[10,7],[19,14],[24,19],[18,14],[14,11],[19,12],[24,19],[10,7],[26,20],[26,20],[14,11],[22,17],[23,18],[29,21],[27,20],[10,7],[24,18],[20,14],[14,11],[24,19],[14,11],[27,20],[19,14],[13,10],[22,17],[19,14],[13,10],[23,18],[12,9],[15,11],[21,15],[20,15],[11,8],[19,14],[23,17],[23,17],[10,7],[30,21],[24,18],[15,11],[19,14],[18,14],[14,11],[19,14],[20,15],[19,14],[23,18],[23,18],[19,14],[23,17],[10,7],[19,14],[24,19]],"count":[[192,50]],"kept":[{"done":[1,0],"fresh":[28,19],"new":[162,31],"picked":[1,0]}],"min-error":[0.32555264884195795],"time":51.9248046875,"type":"prune"},{"compiler":[[74,41]],"locations":[["(*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))))",0.4567375488422101,false],["(pow.f64 (exp.f64 x) x)",0.5,true],["(pow.f64 (pow.f64 (exp.f64 x) x) 20)",2.259665775187125,true],["(exp.f64 (*.f64 (*.f64 10 x) x))",3.3197003571398227,false]],"time":24.046142578125,"type":"localize"},{"count":[[2,24]],"series":[["(pow.f64 (exp.f64 x) x)","x","-inf",0.154052734375],["(pow.f64 (exp.f64 x) x)","x","inf",0.13916015625],["(pow.f64 (exp.f64 x) x)","x","0",0.153076171875],["(pow.f64 (pow.f64 (exp.f64 x) x) 20)","x","-inf",0.578125],["(pow.f64 (pow.f64 (exp.f64 x) x) 20)","x","inf",0.578857421875],["(pow.f64 (pow.f64 (exp.f64 x) x) 20)","x","0",1.197998046875]],"time":2.8798828125,"type":"series"},{"count":[[2,66]],"inputs":[["(pow.f64 (pow.f64 (exp.f64 x) x) 20)","(pow.f64 (exp.f64 x) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (exp.f64 (*.f64 (*.f64 x x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 (*.f64 x x) 20)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (exp.f64 (*.f64 (*.f64 x x) 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40))) (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40) 2/3)) (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20)))) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40)) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20))) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40)) (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (exp.f64 (*.f64 (*.f64 x x) 20)))) (neg.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (*.f64 (*.f64 x x) 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (*.f64 (*.f64 x x) 20))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (*.f64 (*.f64 x x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 (*.f64 x x) 20)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 (*.f64 (*.f64 x x) 20)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (*.f64 (*.f64 x x) 20)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (exp.f64 (*.f64 (*.f64 x x) 20))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (*.f64 (*.f64 x x) 20))) (pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) 20)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 (*.f64 x x) 20))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 x 4/3)) (*.f64 (pow.f64 x 2/3) 20))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 x)) (*.f64 (pow.f64 (cbrt.f64 x) 5) 20))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x (sqrt.f64 20))) (*.f64 x (sqrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) (*.f64 x 20))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 x 2/3)) (*.f64 (pow.f64 x 4/3) 20))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x (neg.f64 (sqrt.f64 20)))) (*.f64 x (neg.f64 (sqrt.f64 20))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x x)) 20)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (/.f64 (*.f64 (*.f64 x x) 20) 1/3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 x x) 20)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 20) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (*.f64 (*.f64 x x) 20))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (/.f64 (*.f64 (*.f64 x x) 20) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 x x) 20))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (exp.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 x x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) (pow.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) 4) (cbrt.f64 (exp.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) (pow.f64 (exp.f64 (*.f64 x x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3) (cbrt.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (exp.f64 (*.f64 x x)))) (neg.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 (*.f64 x x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (exp.f64 (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (exp.f64 (neg.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (exp.f64 (*.f64 (*.f64 x x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 5))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 x 2/3)) (pow.f64 x 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (cbrt.f64 x))) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (pow.f64 (cbrt.f64 x) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (pow.f64 x 2/3))) (*.f64 (cbrt.f64 (pow.f64 x 4/3)) (pow.f64 x 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 x x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 x 4/3)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 x) 5)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (neg.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (/.f64 (*.f64 (*.f64 x x) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (/.f64 (*.f64 (*.f64 x x) 3) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x x))))))"]],"rules":[["egg-rr",35],["egg-rr",31]],"time":40.35009765625,"type":"rewrite"},{"count":[[90,82]],"inputs":[["1","(+.f64 1 (*.f64 20 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 200 (pow.f64 x 4)) (*.f64 20 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 200 (pow.f64 x 4)) (+.f64 (*.f64 20 (pow.f64 x 2)) (*.f64 4000/3 (pow.f64 x 6)))))","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","1","(+.f64 1 (pow.f64 x 2))","(+.f64 1 (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 x 6)) (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4)))))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 20 (pow.f64 x 2)))","(fma.f64 20 (*.f64 x x) 1)","(+.f64 1 (+.f64 (*.f64 200 (pow.f64 x 4)) (*.f64 20 (pow.f64 x 2))))","(+.f64 (fma.f64 20 (*.f64 x x) 1) (*.f64 200 (pow.f64 x 4)))","(+.f64 1 (+.f64 (*.f64 200 (pow.f64 x 4)) (+.f64 (*.f64 20 (pow.f64 x 2)) (*.f64 4000/3 (pow.f64 x 6)))))","(+.f64 1 (fma.f64 200 (pow.f64 x 4) (fma.f64 20 (*.f64 x x) (*.f64 4000/3 (pow.f64 x 6)))))","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (*.f64 20 x)) x)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (*.f64 20 x)) x)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (*.f64 20 x)) x)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (*.f64 20 x)) x)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (*.f64 20 x)) x)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (*.f64 20 x)) x)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (*.f64 20 x)) x)","(pow.f64 (exp.f64 (pow.f64 x 2)) 20)","(pow.f64 (exp.f64 (*.f64 20 x)) x)","1","(+.f64 1 (pow.f64 x 2))","(fma.f64 x x 1)","(+.f64 1 (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4))))","(+.f64 1 (fma.f64 1/2 (pow.f64 x 4) (*.f64 x x)))","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 x 6)) (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 1/6 (pow.f64 x 6) (fma.f64 1/2 (pow.f64 x 4) (*.f64 x x))))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))"]],"time":106.0830078125,"type":"simplify"},{"compiler":[[3851,2360]],"time":44.471923828125,"type":"eval"},{"alts":[["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 (neg.f64 (sqrt.f64 10)) (neg.f64 x))) (*.f64 (neg.f64 (sqrt.f64 10)) (neg.f64 x))))","fresh",4.603201351143059],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 (cbrt.f64 100) (*.f64 x x))))","fresh",4.137865348881774],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 (pow.f64 x 2/3))) (cbrt.f64 (pow.f64 x 4))))))","fresh",2.8912040273900783],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 x) (*.f64 10 x)))","fresh",3.3157677509360792],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (cbrt.f64 (*.f64 10 x)))) (pow.f64 (*.f64 10 x) 2/3)))))","fresh",3.3107868445267696],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 10 x))) (*.f64 (pow.f64 (*.f64 10 x) 2/3) x)))))","fresh",3.2684815996976635],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","next",2.0957454040019616],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 x x) (cbrt.f64 20))) (cbrt.f64 400))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",4.260419122389843],["(*.f64 (cbrt.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 x x) 20)) 2/3) (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20))))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",3.387417305843179],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 100 (pow.f64 x 4)))) (cbrt.f64 (*.f64 10 (*.f64 x x)))))))","fresh",2.888374658851509],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 10) (*.f64 x x)))","fresh",3.073475518667646],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 10 x)))))","fresh",2.226761622525388],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 10 (*.f64 x x)))) (cbrt.f64 (*.f64 100 (pow.f64 x 4)))))))","fresh",2.4572781720587162],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (E.f64) (*.f64 10 (*.f64 x x))))))","fresh",3.190875238066509],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 10) (*.f64 x x)))))","fresh",2.1688582508362524],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (cbrt.f64 (pow.f64 x 4))) (pow.f64 x 2/3)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",3.258462960224144],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (pow.f64 x 4/3)) (*.f64 10 (pow.f64 x 2/3))))","fresh",4.112242482809527],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 (cbrt.f64 100) (*.f64 x x))) (cbrt.f64 10)))","fresh",4.647401304758839],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 10 x) (cbrt.f64 x))) (pow.f64 x 2/3)))))","fresh",2.601545317026192],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 10 (*.f64 x x)))) (cbrt.f64 (*.f64 100 (pow.f64 x 4)))))))","fresh",2.889461912576974],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 10 x)))))","fresh",2.7130641845229575],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 2/3)) (pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 2/3))))))","fresh",2.53971223240299],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 (pow.f64 x 2/3))) (cbrt.f64 (pow.f64 x 4))))))","fresh",2.446665388530359],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 10))))","fresh",2.162419772961213],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 20 x)) x)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",3.375234086227449],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 -1) (*.f64 -10 (*.f64 x x))))","fresh",3.684932974940687],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 x 2/3)) (*.f64 (cbrt.f64 (pow.f64 x 4)) 20))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",3.3856537236394226],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (neg.f64 (sqrt.f64 20)))) (*.f64 x (neg.f64 (sqrt.f64 20))))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",4.029562157937225],["(*.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40)) (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20))))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",2.8545656119390124],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (exp.f64 (*.f64 10 (*.f64 x x))))))","fresh",2.510067354240766],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (pow.f64 x 2/3)) (*.f64 (*.f64 10 x) (cbrt.f64 x))))","fresh",4.010656951731001],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (sqrt.f64 10))) (*.f64 x (sqrt.f64 10))))))","fresh",3.214679603695557],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (neg.f64 x)) (neg.f64 x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",2.6281185408087815],["(*.f64 (cbrt.f64 (pow.f64 (E.f64) (*.f64 (*.f64 x x) 20))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",3.4765200252680426],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 -1) (neg.f64 (*.f64 10 (*.f64 x x)))))))","fresh",2.5215041801327915],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 (cbrt.f64 100) (*.f64 x x))))))","fresh",3.307606184300222],["(*.f64 (cbrt.f64 (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20)))) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40)) 4/3))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",3.1670839755386857],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (sqrt.f64 20))) (*.f64 x (sqrt.f64 20)))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",4.0159579577925895],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 x)) (*.f64 (pow.f64 x 2/3) (*.f64 10 x))))))","fresh",2.838999106640183],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 x)) (*.f64 (pow.f64 x 2/3) (*.f64 10 x))))))","fresh",2.6171357214019055],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 -1) (neg.f64 (*.f64 x x))) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",2.960776644295063],["(*.f64 (cbrt.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40))) (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40) 2/3)) (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20)))))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",2.9389189843835486],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 (cbrt.f64 100) (*.f64 x x))))))","fresh",2.9153536199976076],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 (*.f64 10 (*.f64 x x)) 3) 1/3)))))","fresh",2.8329786912252355],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 (pow.f64 x 4/3)) (cbrt.f64 100)) (cbrt.f64 (*.f64 (*.f64 10 x) x))))","fresh",3.836376385542641],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 x 4/3)) (*.f64 (pow.f64 x 2/3) 20))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",3.6259530412929166],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (sqrt.f64 10))) (*.f64 x (sqrt.f64 10))))))","fresh",3.3156265156428733],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 10) (pow.f64 x 2/3)) (pow.f64 x 4/3)))","fresh",3.916686426681541],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 10)) (*.f64 (sqrt.f64 10) (*.f64 x x))))))","fresh",3.3726482157914885],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 10 x)) x))","fresh",3.2355554065162533]],"compiler":[[18,14],[14,11],[24,19],[10,7],[26,20],[26,20],[19,14],[23,18],[29,21],[27,20],[10,7],[19,13],[27,21],[20,14],[19,14],[24,19],[14,11],[14,11],[24,18],[27,20],[19,14],[40,29],[24,19],[19,14],[19,14],[12,9],[24,19],[25,20],[28,20],[21,16],[15,11],[23,18],[21,15],[20,15],[22,17],[23,17],[31,23],[23,18],[24,18],[24,18],[22,17],[39,27],[23,18],[23,18],[18,14],[23,18],[23,18],[14,11],[23,17],[10,7],[18,14],[14,11],[24,19],[10,7],[26,20],[26,20],[19,14],[23,18],[29,21],[27,20],[10,7],[19,13],[27,21],[20,14],[19,14],[24,19],[14,11],[14,11],[24,18],[27,20],[19,14],[40,29],[24,19],[19,14],[19,14],[12,9],[24,19],[25,20],[28,20],[21,16],[15,11],[23,18],[21,15],[20,15],[22,17],[23,17],[31,23],[23,18],[24,18],[24,18],[22,17],[39,27],[23,18],[23,18],[18,14],[23,18],[23,18],[14,11],[23,17],[10,7]],"count":[[219,50]],"kept":[{"done":[0,0],"fresh":[49,28],"new":[169,22],"picked":[1,0]}],"min-error":[0.1793937988422101],"time":58.653076171875,"type":"prune"},{"compiler":[[73,41]],"locations":[["(*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x)))",0.4567375488422101,true],["(pow.f64 (exp.f64 x) x)",0.5,false],["(pow.f64 (pow.f64 (exp.f64 x) x) 20)",2.259665775187125,false],["(exp.f64 (*.f64 10 x))",2.693636278069345,true]],"time":37.058837890625,"type":"localize"},{"count":[[2,16]],"series":[["(*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x)))","x","-inf",0.996826171875],["(*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x)))","x","inf",1.089111328125],["(*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x)))","x","0",0.493896484375],["(exp.f64 (*.f64 10 x))","x","-inf",0.18798828125],["(exp.f64 (*.f64 10 x))","x","inf",0.171142578125],["(exp.f64 (*.f64 10 x))","x","0",0.298828125]],"time":3.326171875,"type":"series"},{"count":[[2,58]],"inputs":[["(exp.f64 (*.f64 10 x))","(*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (*.f64 10 x)) 0) (exp.f64 (*.f64 10 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 10 x)) (*.f64 (exp.f64 (*.f64 10 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (exp.f64 (*.f64 10 x))) (exp.f64 (*.f64 10 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 10 x)) (*.f64 0 (exp.f64 (*.f64 10 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 10 x))) (cbrt.f64 (pow.f64 (exp.f64 x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (exp.f64 (*.f64 10 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (*.f64 10 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (*.f64 10 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (*.f64 10 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 10 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (*.f64 10 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 10) x)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 10 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 10 x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (*.f64 10 x))) (pow.f64 (*.f64 10 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (neg.f64 (*.f64 10 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 x)) (*.f64 (pow.f64 x 2/3) 10))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (*.f64 10 x) 2/3)) (cbrt.f64 (*.f64 10 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 (cbrt.f64 100) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 10)) (*.f64 x (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x (cbrt.f64 10))) (cbrt.f64 100))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (*.f64 1000 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x (sqrt.f64 10))) (sqrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 10 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) 10)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 10 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (*.f64 10 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 10 x))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 0 (*.f64 10 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 10 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 10 x) 3) 1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) 0) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) (*.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) (*.f64 0 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))) (cos.f64 x)) (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))) (pow.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) 2/3) (cbrt.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))) (cbrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (exp.f64 (*.f64 10 (*.f64 x x))) (cos.f64 x))) (pow.f64 (cos.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (*.f64 (exp.f64 (*.f64 10 (*.f64 x x))) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))) (*.f64 (cos.f64 x) (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (exp.f64 (*.f64 10 (*.f64 x x))) (pow.f64 (cos.f64 x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (exp.f64 (*.f64 10 (*.f64 x x))) (pow.f64 (cos.f64 x) 3)))))))"]],"rules":[["egg-rr",26],["egg-rr",32]],"time":26.56396484375,"type":"rewrite"},{"count":[[74,72]],"inputs":[["1","(+.f64 1 (*.f64 10 x))","(+.f64 1 (+.f64 (*.f64 10 x) (*.f64 50 (pow.f64 x 2))))","(+.f64 (*.f64 500/3 (pow.f64 x 3)) (+.f64 1 (+.f64 (*.f64 10 x) (*.f64 50 (pow.f64 x 2)))))","1","(+.f64 1 (*.f64 17/6 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 283/72 (pow.f64 x 4)) (*.f64 17/6 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 283/72 (pow.f64 x 4)) (+.f64 (*.f64 17/6 (pow.f64 x 2)) (*.f64 22891/6480 (pow.f64 x 6)))))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 10 x))","(fma.f64 x 10 1)","(+.f64 1 (+.f64 (*.f64 10 x) (*.f64 50 (pow.f64 x 2))))","(+.f64 1 (*.f64 x (+.f64 10 (*.f64 x 50))))","(+.f64 (*.f64 500/3 (pow.f64 x 3)) (+.f64 1 (+.f64 (*.f64 10 x) (*.f64 50 (pow.f64 x 2)))))","(+.f64 (fma.f64 500/3 (pow.f64 x 3) 1) (*.f64 x (+.f64 10 (*.f64 x 50))))","1","(+.f64 1 (*.f64 17/6 (pow.f64 x 2)))","(fma.f64 (*.f64 x x) 17/6 1)","(+.f64 1 (+.f64 (*.f64 283/72 (pow.f64 x 4)) (*.f64 17/6 (pow.f64 x 2))))","(+.f64 1 (fma.f64 283/72 (pow.f64 x 4) (*.f64 17/6 (*.f64 x x))))","(+.f64 1 (+.f64 (*.f64 283/72 (pow.f64 x 4)) (+.f64 (*.f64 17/6 (pow.f64 x 2)) (*.f64 22891/6480 (pow.f64 x 6)))))","(+.f64 1 (fma.f64 (pow.f64 x 4) 283/72 (fma.f64 (pow.f64 x 6) 22891/6480 (*.f64 17/6 (*.f64 x x)))))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (cos.f64 x))","(*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 10 (pow.f64 x 2))) 1) 1/3) (cos.f64 x))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x)))) (cos.f64 x))"]],"time":80.85693359375,"type":"simplify"},{"compiler":[[3468,2157]],"time":42.06201171875,"type":"eval"},{"alts":[["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 (neg.f64 (sqrt.f64 10)) (neg.f64 x))) (*.f64 (neg.f64 (sqrt.f64 10)) (neg.f64 x))))","fresh",4.603201351143059],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 (cbrt.f64 100) (*.f64 x x))))","fresh",4.137865348881774],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 20 x)) x)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","fresh",3.2640037164723297],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 (pow.f64 x 2/3))) (cbrt.f64 (pow.f64 x 4))))))","fresh",2.8912040273900783],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 x) (*.f64 10 x)))","fresh",3.3157677509360792],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (cbrt.f64 (*.f64 10 x)))) (pow.f64 (*.f64 10 x) 2/3)))))","fresh",3.3107868445267696],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 10 x))) (*.f64 (pow.f64 (*.f64 10 x) 2/3) x)))))","fresh",3.2684815996976635],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (neg.f64 x)) (neg.f64 x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","fresh",2.461544183036173],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 x 4/3)) (*.f64 (pow.f64 x 2/3) 20))) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","fresh",3.6545994489509797],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))) (cos.f64 x))))","fresh",2.152500334362808],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 10 x)))))","fresh",2.226761622525388],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (E.f64) (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","fresh",3.1846610587529014],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (E.f64) (*.f64 10 (*.f64 x x))))))","fresh",3.190875238066509],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 1000 x))) (pow.f64 x 2/3)) x))))","fresh",2.312508932584897],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 10) (*.f64 x x)))","fresh",3.073475518667646],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 10 (*.f64 x x)))) (cbrt.f64 (*.f64 100 (pow.f64 x 4)))))))","fresh",2.4572781720587162],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (exp.f64 (*.f64 10 x)))) x))))","fresh",1.9998800649470632],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (pow.f64 x 4/3)) (*.f64 10 (pow.f64 x 2/3))))","fresh",4.112242482809527],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 x 2)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","fresh",2.6615025916793034],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 10) (*.f64 x x)))))","fresh",2.1688582508362524],["(*.f64 (cbrt.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40))) (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40) 2/3)) (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20)))))) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","fresh",2.871711626456058],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 (cbrt.f64 100) (*.f64 x x))) (cbrt.f64 10)))","fresh",4.647401304758839],["(*.f64 (cbrt.f64 (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20)))) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40)) 4/3))) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","fresh",3.0920600531012266],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 10 (*.f64 x x)))) (cbrt.f64 (*.f64 100 (pow.f64 x 4)))))))","fresh",2.889461912576974],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 10 x)))))","fresh",2.7130641845229575],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (neg.f64 (sqrt.f64 20)))) (*.f64 x (neg.f64 (sqrt.f64 20))))) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","fresh",3.914646865915278],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (pow.f64 (*.f64 10 x) 2/3)) (cbrt.f64 (*.f64 10 x))) x))))","fresh",3.0838730844517483],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 2/3)) (pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 2/3))))))","fresh",2.53971223240299],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 (pow.f64 x 2/3))) (cbrt.f64 (pow.f64 x 4))))))","fresh",2.446665388530359],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 10))))","fresh",2.162419772961213],["(*.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40)) (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20))))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",2.8545656119390124],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 -1) (neg.f64 (*.f64 10 x))) x))))","fresh",2.3446226696976153],["(*.f64 (cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) (pow.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3) 4/3)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","fresh",3.738005358645286],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 x 2/3)) (*.f64 (cbrt.f64 (pow.f64 x 4)) 20))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",3.3856537236394226],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (sqrt.f64 10))) (*.f64 x (sqrt.f64 10))))))","fresh",3.214679603695557],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (neg.f64 x)) (neg.f64 x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",2.6281185408087815],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (exp.f64 (*.f64 10 (*.f64 x x))))))","fresh",2.510067354240766],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))) (*.f64 (cos.f64 x) (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))))))","fresh",2.1346685412947144],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 -1) (neg.f64 (*.f64 10 (*.f64 x x)))))))","fresh",2.5215041801327915],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 10 x) 3)) 1/3) x))))","fresh",2.616400626074791],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 -1) (neg.f64 (*.f64 x x))) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",2.960776644295063],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 20) (*.f64 x x))) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","fresh",2.6218274260008716],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (sqrt.f64 20))) (*.f64 x (sqrt.f64 20)))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",4.0159579577925895],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 x)) (*.f64 (pow.f64 x 2/3) (*.f64 10 x))))))","fresh",2.838999106640183],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (cbrt.f64 (pow.f64 x 2/3))) (*.f64 (cbrt.f64 (pow.f64 x 4/3)) (pow.f64 x 4/3))) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","fresh",3.6483225201211025],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 (cbrt.f64 100) (*.f64 x x))))))","fresh",2.9153536199976076],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 10) x) x))))","fresh",1.7877009550748653],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 (pow.f64 x 4/3)) (cbrt.f64 100)) (cbrt.f64 (*.f64 (*.f64 10 x) x))))","fresh",3.836376385542641],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 10) (pow.f64 x 2/3)) (pow.f64 x 4/3)))","fresh",3.916686426681541],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 x 4/3)) (*.f64 (pow.f64 x 2/3) 20))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","fresh",3.6259530412929166],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) 3) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","fresh",2.8234316396620085],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 10)) (*.f64 (sqrt.f64 10) (*.f64 x x))))))","fresh",3.3726482157914885],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 10 x)) x))","fresh",3.2355554065162533],["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 (cbrt.f64 100) x)) x))))","fresh",2.7516501972576606]],"compiler":[[18,14],[14,11],[19,14],[24,19],[10,7],[26,20],[26,20],[21,15],[23,18],[29,21],[19,13],[20,15],[20,14],[24,18],[10,7],[27,21],[26,19],[14,11],[19,15],[19,14],[39,27],[14,11],[31,23],[27,20],[19,14],[25,20],[26,20],[40,29],[24,19],[19,14],[28,20],[22,17],[30,21],[24,19],[23,18],[21,15],[21,16],[29,21],[22,17],[23,18],[22,17],[19,14],[23,18],[24,18],[29,23],[23,18],[19,14],[18,14],[14,11],[23,18],[22,17],[23,17],[10,7],[23,18]],"count":[[204,54]],"kept":[{"done":[0,0],"fresh":[49,33],"new":[154,21],"picked":[1,0]}],"min-error":[0.09994125976844201],"time":39.56201171875,"type":"prune"},{"accuracy":[1.7877009550748653],"baseline":[1.7877009550748653],"branch":[["x",1.7877009550748657,1],["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))",1.7877009550748653,1]],"compiler":[[2,1],[10,7],[2087,1288]],"count":[[105,1]],"inputs":[["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 20 x)) x)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (neg.f64 x)) (neg.f64 x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 x 4/3)) (*.f64 (pow.f64 x 2/3) 20))) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))) (cos.f64 x))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (E.f64) (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 1000 x))) (pow.f64 x 2/3)) x))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (exp.f64 (*.f64 10 x)))) x))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 x 2)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","(*.f64 (cbrt.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40))) (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40) 2/3)) (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20)))))) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","(*.f64 (cbrt.f64 (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20)))) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40)) 4/3))) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (neg.f64 (sqrt.f64 20)))) (*.f64 x (neg.f64 (sqrt.f64 20))))) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (pow.f64 (*.f64 10 x) 2/3)) (cbrt.f64 (*.f64 10 x))) x))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 -1) (neg.f64 (*.f64 10 x))) x))))","(*.f64 (cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x x)))) (pow.f64 (pow.f64 (exp.f64 (*.f64 x x)) 2/3) 4/3)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))) (*.f64 (cos.f64 x) (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 10 x) 3)) 1/3) x))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 20) (*.f64 x x))) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (cbrt.f64 (pow.f64 x 2/3))) (*.f64 (cbrt.f64 (pow.f64 x 4/3)) (pow.f64 x 4/3))) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 10) x) x))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) 3) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 (cbrt.f64 100) x)) x))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 10 x)))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 10 (*.f64 x x)))) (cbrt.f64 (*.f64 100 (pow.f64 x 4)))))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 10) (*.f64 x x)))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 10 x) (cbrt.f64 x))) (pow.f64 x 2/3)))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 2/3)) (pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 2/3))))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 (pow.f64 x 2/3))) (cbrt.f64 (pow.f64 x 4))))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 10))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 20 x)) x)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (neg.f64 (sqrt.f64 20)))) (*.f64 x (neg.f64 (sqrt.f64 20))))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40)) (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20))))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (exp.f64 (*.f64 10 (*.f64 x x))))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (sqrt.f64 10))) (*.f64 x (sqrt.f64 10))))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 -1) (neg.f64 (*.f64 10 (*.f64 x x)))))))","(*.f64 (cbrt.f64 (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20)))) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40)) 4/3))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (sqrt.f64 20))) (*.f64 x (sqrt.f64 20)))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 x)) (*.f64 (pow.f64 x 2/3) (*.f64 10 x))))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 -1) (neg.f64 (*.f64 x x))) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40))) (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (*.f64 x x)) 40) 2/3)) (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20)))))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 (cbrt.f64 100) (*.f64 x x))))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 (*.f64 10 (*.f64 x x)) 3) 1/3)))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 x 4/3)) (*.f64 (pow.f64 x 2/3) 20))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 10))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 (pow.f64 x 2/3))) (cbrt.f64 (pow.f64 x 4))))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (cbrt.f64 (*.f64 10 x)))) (pow.f64 (*.f64 10 x) 2/3)))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 10 x))) (*.f64 (pow.f64 (*.f64 10 x) 2/3) x)))))","(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 3))) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 x x) (cbrt.f64 20))) (cbrt.f64 400))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 x x) 20)) 2/3) (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20))))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 100 (pow.f64 x 4)))) (cbrt.f64 (*.f64 10 (*.f64 x x)))))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 10 x) (cbrt.f64 x))) (pow.f64 x 2/3)))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (E.f64) (*.f64 10 (*.f64 x x))))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (cbrt.f64 (pow.f64 x 4))) (pow.f64 x 2/3)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 10 (*.f64 x x)))) (cbrt.f64 (*.f64 100 (pow.f64 x 4)))))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 10 x)))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) 3) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 x)) x))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (sqrt.f64 20))) (*.f64 x (sqrt.f64 20)))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (neg.f64 x)) (neg.f64 x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (pow.f64 (E.f64) (*.f64 (*.f64 x x) 20))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 20) (*.f64 x x))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 (*.f64 10 (*.f64 x x)) 3) 1/3)))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 (cbrt.f64 100) (*.f64 x x))))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 10 (*.f64 x x))) 2/3)) (*.f64 (cos.f64 x) (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 10 (*.f64 x x))))))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 x)) (*.f64 (pow.f64 x 2/3) (*.f64 10 x))))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (E.f64) (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 x x) 20))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x (sqrt.f64 10))) (*.f64 x (sqrt.f64 10))))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 (*.f64 (*.f64 x x) 3) 1/3)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 10)) (*.f64 (sqrt.f64 10) (*.f64 x x))))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 x 2/3)) (*.f64 (cbrt.f64 (pow.f64 x 4)) 20))) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 (neg.f64 (sqrt.f64 10)) (neg.f64 x))) (*.f64 (neg.f64 (sqrt.f64 10)) (neg.f64 x))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 (cbrt.f64 100) (*.f64 x x))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 x) (*.f64 10 x)))","(*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 (*.f64 10 x) x) 3))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 (pow.f64 x 4/3) 10)) (pow.f64 x 2/3)))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (pow.f64 x 2/3)) (*.f64 (pow.f64 x 4/3) 10)))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (cbrt.f64 100)) (*.f64 (*.f64 x x) (cbrt.f64 10))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 10) (*.f64 x x)))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (pow.f64 x 4/3)) (*.f64 10 (pow.f64 x 2/3))))","(*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 3) (exp.f64 (*.f64 10 (*.f64 x x))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 (cbrt.f64 100) (*.f64 x x))) (cbrt.f64 10)))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (neg.f64 (*.f64 (sqrt.f64 10) x))) (neg.f64 (*.f64 (sqrt.f64 10) x))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 -1) (*.f64 -10 (*.f64 x x))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (pow.f64 x 2/3)) (*.f64 (*.f64 10 x) (cbrt.f64 x))))","(*.f64 (cos.f64 x) (pow.f64 (E.f64) (*.f64 (*.f64 10 x) x)))","(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 (cbrt.f64 10)) (*.f64 x x)) (cbrt.f64 100)))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (cbrt.f64 (*.f64 (*.f64 10 x) x))) (*.f64 (pow.f64 x 4/3) (cbrt.f64 100))))","(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 (*.f64 10 x)) (cbrt.f64 x)) (pow.f64 x 2/3)))","(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 (pow.f64 x 4/3)) (cbrt.f64 100)) (cbrt.f64 (*.f64 (*.f64 10 x) x))))","(*.f64 (cos.f64 x) (*.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20))))","(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 10) (pow.f64 x 2/3)) (pow.f64 x 4/3)))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (sqrt.f64 10)) (*.f64 (*.f64 x x) (sqrt.f64 10))))","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x)))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 10 x)) x))","(pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x)))) 3)","(*.f64 (cos.f64 x) (pow.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))) 3))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 10 x) x))) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 x x)) 20)) (cos.f64 x)))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 (*.f64 (*.f64 10 x) x) 3)) 1/3))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 x x)) 10))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (*.f64 10 x) x)))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))"]],"link":["."],"name":["ENA, Section 1.4, Exercise 1"],"oracle":[5.765247497072657],"outputs":[["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 10) x) x))))"]],"time":90.302978515625,"times":[["x",27.7529296875],["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))",26.843994140625]],"type":"regimes"},{"compiler":[[19,14]],"inputs":[["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 10) x) x))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 20)) (*.f64 (cos.f64 x) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 10) x) x))))","(*.f64 (cbrt.f64 (*.f64 (exp.f64 (*.f64 (*.f64 10 x) x)) (exp.f64 (*.f64 (*.f64 x x) 20)))) (cos.f64 x))"]],"stop":[["fuel",1]],"time":19.2490234375,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[19,14]],"remove-preprocessing":[[]],"time":12.509765625,"type":"end"}]
[{"compiler":[[18,12]],"method":["search"],"sampling":[[12,0.5733780198993372,0.42515785148998475,0.0014641286106780171],[11,0.4914668741994319,0.5070689971898901,0.0014641286106780171],[10,0.4212573207423702,0.5772785506469518,0.0014641286106780171],[9,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":111.48291015625,"type":"analyze"},{"outcomes":[["body",256,"valid",464.90283203125,8256]],"time":473.010009765625,"type":"sample"},{"compiler":[[17,11]],"inputs":[["0","1","2"],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))","(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 y y) (*.f64 x x)) (*.f64 z z)) 3))","(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 z z) (*.f64 y y)) (*.f64 x x)) 3))","(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 z z)) (*.f64 y y)) 3))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))","(sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 y y (*.f64 x x))) 1/3))","(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 y y) (*.f64 x x)) (*.f64 z z)) 3))","(sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 y y (*.f64 x x))) 1/3))","(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 z z) (*.f64 y y)) (*.f64 x x)) 3))","(sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 y y (*.f64 x x))) 1/3))","(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 z z)) (*.f64 y y)) 3))","(sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 y y (*.f64 x x))) 1/3))"]],"symmetry":[[]],"time":74.156005859375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))","(sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))"]],"time":20.441162109375,"type":"simplify"},{"compiler":[[29,16]],"time":0.452880859375,"type":"eval"},{"alts":[["(sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))","fresh",39.97259671081924],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))","next",39.95306546081924]],"compiler":[[15,9],[17,11],[15,9],[17,11]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[39.92962796081924],"time":1.4189453125,"type":"prune"},{"compiler":[[61,14]],"locations":[["(+.f64 (*.f64 x x) (*.f64 y y))",0.00390625,true],["(/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3)",0.30737107828260746,true],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))",36.8068926104541,true]],"time":9.60205078125,"type":"localize"},{"count":[[3,96]],"series":[["(+.f64 (*.f64 x x) (*.f64 y y))","y","-inf",0.153076171875],["(+.f64 (*.f64 x x) (*.f64 y y))","y","inf",0.156982421875],["(+.f64 (*.f64 x x) (*.f64 y y))","y","0",0.18701171875],["(+.f64 (*.f64 x x) (*.f64 y y))","x","-inf",0.1689453125],["(+.f64 (*.f64 x x) (*.f64 y y))","x","inf",0.18603515625],["(+.f64 (*.f64 x x) (*.f64 y y))","x","0",0.875],["(/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3)","z","-inf",0.19091796875],["(/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3)","z","inf",0.370849609375],["(/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3)","z","0",0.416015625],["(/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3)","y","-inf",0.2001953125],["(/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3)","y","inf",0.39990234375],["(/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3)","y","0",0.4609375],["(/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3)","x","-inf",0.2109375],["(/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3)","x","inf",0.492919921875],["(/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3)","x","0",0.51708984375],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))","z","-inf",0.402099609375],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))","z","inf",0.615966796875],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))","z","0",0.761962890625],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))","y","-inf",0.56689453125],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))","y","inf",0.700927734375],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))","y","0",0.77294921875],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))","x","-inf",0.375],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))","x","inf",0.80810546875],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))","x","0",1.0478515625]],"time":11.509033203125,"type":"series"},{"count":[[3,182]],"inputs":[["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))","(/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3)","(+.f64 (*.f64 x x) (*.f64 y y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) (*.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) 1/2) (*.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) 0) (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) (*.f64 0 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) (*.f64 1/2 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) (cbrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))) (fabs.f64 (cbrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) (pow.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) 0) (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) (cbrt.f64 (neg.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) (cbrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (fma.f64 y y (*.f64 z z))) (*.f64 1/3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (*.f64 x x)) (*.f64 1/3 (fma.f64 y y (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (fma.f64 z z (*.f64 x x))) (*.f64 1/3 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (fma.f64 x x (*.f64 y y))) (*.f64 1/3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (*.f64 y y)) (*.f64 1/3 (fma.f64 z z (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (*.f64 z z)) (*.f64 1/3 (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) (*.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 1/2) (*.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 0) (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y y (*.f64 z z)) 1/3) (*.f64 (*.f64 x x) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 1/3) (*.f64 (fma.f64 y y (*.f64 z z)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z z (*.f64 x x)) 1/3) (*.f64 (*.f64 y y) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/3) (*.f64 (*.f64 z z) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y y) 1/3) (*.f64 (fma.f64 z z (*.f64 x x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z z) 1/3) (*.f64 (fma.f64 x x (*.f64 y y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) (*.f64 0 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) (*.f64 1/2 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 -3) (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) (neg.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) -1/3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))) (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))) (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) 1) (*.f64 (neg.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (sqrt.f64 27))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 2)) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 2)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 2)) (cbrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (fma.f64 z z (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 3/2)) (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) (sqrt.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (/.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) (+.f64 1/3 1/2)) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (sqrt.f64 1/3)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 2)) 1/3) (cbrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (cbrt.f64 9)) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (neg.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 2)) (sqrt.f64 1/3)) (cbrt.f64 (/.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (sqrt.f64 27))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (cbrt.f64 1/3)) (cbrt.f64 (/.f64 1 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 0) (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 2)) (cbrt.f64 (neg.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 2))) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (sqrt.f64 1/3)) (sqrt.f64 (sqrt.f64 3))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) (sqrt.f64 3)) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) -1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (neg.f64 (sqrt.f64 3))) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (cbrt.f64 1/3)) (cbrt.f64 (cbrt.f64 9))) (pow.f64 (cbrt.f64 (cbrt.f64 9)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (sqrt.f64 1/3))) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (cbrt.f64 1/3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (sqrt.f64 1/3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (sqrt.f64 27))) (cbrt.f64 (pow.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 2))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 2)) (cbrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) (cbrt.f64 (pow.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 2))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/3) (fma.f64 z z (fma.f64 x x (*.f64 y y)))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/3) (fma.f64 z z (fma.f64 x x (*.f64 y y)))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 2))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 2)) (sqrt.f64 1/3))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (sqrt.f64 1/3)) 1) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (cbrt.f64 1/3)) 1) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (cbrt.f64 9)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (sqrt.f64 1/3)) (cbrt.f64 (sqrt.f64 3))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (sqrt.f64 1/3)) 1) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) (cbrt.f64 3)) (neg.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (cbrt.f64 1/3)) 1) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (cbrt.f64 1/3))) (neg.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 3/2) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 3/2) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) -1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x (*.f64 y y)) (*.f64 (fma.f64 x x (*.f64 y y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (fma.f64 x x (*.f64 y y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 0) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x (*.f64 y y)) (*.f64 0 (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 x x (*.f64 y y))) (*.f64 1/2 (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x x (*.f64 y y))) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x (*.f64 y y))) (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 y y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 y y)) 2)) (cbrt.f64 (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x x (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 x 4)) (-.f64 (cbrt.f64 (pow.f64 y 4)) (cbrt.f64 (pow.f64 (*.f64 x y) 2)))) (+.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 y 4)) (-.f64 (cbrt.f64 (pow.f64 x 4)) (cbrt.f64 (pow.f64 (*.f64 x y) 2)))) (+.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x (*.f64 y y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x (*.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x (*.f64 y y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x (*.f64 y y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 y y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 x 4)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y y (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (pow.f64 y 4)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 4)) (cbrt.f64 (*.f64 x x)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (neg.f64 x) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x x)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) x) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 y y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 y 4)) (cbrt.f64 (*.f64 y y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (neg.f64 y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1 (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) 1 (*.f64 x x))))))"]],"rules":[["egg-rr",40],["egg-rr",97],["egg-rr",45]],"time":39.35498046875,"type":"rewrite"},{"count":[[278,274]],"inputs":[["(*.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (sqrt.f64 1/3))","(+.f64 (*.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (sqrt.f64 1/3)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))) (*.f64 (sqrt.f64 1/3) (pow.f64 x 2)))))","(+.f64 (*.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))) (*.f64 (sqrt.f64 1/3) (pow.f64 x 2)))) (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3))) (*.f64 (sqrt.f64 1/3) (pow.f64 x 4))))))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 5))) (*.f64 (sqrt.f64 1/3) (pow.f64 x 6)))) (+.f64 (*.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))) (*.f64 (sqrt.f64 1/3) (pow.f64 x 2)))) (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3))) (*.f64 (sqrt.f64 1/3) (pow.f64 x 4)))))))","(*.f64 (sqrt.f64 1/3) x)","(+.f64 (*.f64 (sqrt.f64 1/3) x) (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) (sqrt.f64 1/3)) x)))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (sqrt.f64 1/3)) (pow.f64 x 3))) (+.f64 (*.f64 (sqrt.f64 1/3) x) (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) (sqrt.f64 1/3)) x))))","(+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3) (sqrt.f64 1/3)) (pow.f64 x 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (sqrt.f64 1/3)) (pow.f64 x 3))) (+.f64 (*.f64 (sqrt.f64 1/3) x) (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) (sqrt.f64 1/3)) x)))))","(*.f64 -1 (*.f64 (sqrt.f64 1/3) x))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) (sqrt.f64 1/3)) x)) (*.f64 -1 (*.f64 (sqrt.f64 1/3) x)))","(+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (sqrt.f64 1/3)) (pow.f64 x 3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) (sqrt.f64 1/3)) x)) (*.f64 -1 (*.f64 (sqrt.f64 1/3) x))))","(+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (sqrt.f64 1/3)) (pow.f64 x 3))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3) (sqrt.f64 1/3)) (pow.f64 x 5))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) (sqrt.f64 1/3)) x)) (*.f64 -1 (*.f64 (sqrt.f64 1/3) x)))))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))) (sqrt.f64 1/3))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))))) (*.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))) (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))))) (+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3))))) (*.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))) (sqrt.f64 1/3))))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))))) (+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3))))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 5))))) (*.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))) (sqrt.f64 1/3)))))","(*.f64 y (sqrt.f64 1/3))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) (sqrt.f64 1/3)) y)))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) (sqrt.f64 1/3)) y)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3) (sqrt.f64 1/3)) (pow.f64 y 5))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (sqrt.f64 1/3)) (pow.f64 y 3))))))","(*.f64 -1 (*.f64 y (sqrt.f64 1/3)))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) (sqrt.f64 1/3)) y)) (*.f64 -1 (*.f64 y (sqrt.f64 1/3))))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (*.f64 1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3) (sqrt.f64 1/3)) (pow.f64 y 5))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (*.f64 1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (sqrt.f64 1/3)) (pow.f64 y 3))))))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (sqrt.f64 1/3))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))) (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)))) (*.f64 (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (sqrt.f64 1/3)))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3))) (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))) (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)))) (*.f64 (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (sqrt.f64 1/3))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3))) (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))) (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)))) (+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 5))) (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)))) (*.f64 (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (sqrt.f64 1/3)))))","(*.f64 z (sqrt.f64 1/3))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (sqrt.f64 1/3)) z)) (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (sqrt.f64 1/3)) (pow.f64 z 3)))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 z (sqrt.f64 1/3)) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3) (sqrt.f64 1/3)) (pow.f64 z 5))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (sqrt.f64 1/3)) (pow.f64 z 3))))))","(*.f64 -1 (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (sqrt.f64 1/3)) z)))","(+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (sqrt.f64 1/3)) (pow.f64 z 3))) (+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (sqrt.f64 1/3)) z))))","(+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (sqrt.f64 1/3)) (pow.f64 z 3))) (+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3) (sqrt.f64 1/3)) (pow.f64 z 5))) (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (sqrt.f64 1/3)) z)))))","(*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))","(+.f64 (*.f64 1/3 (pow.f64 x 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2))))","(+.f64 (*.f64 1/3 (pow.f64 x 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2))))","(+.f64 (*.f64 1/3 (pow.f64 x 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2))))","(*.f64 1/3 (pow.f64 x 2))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/3 (pow.f64 x 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/3 (pow.f64 x 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/3 (pow.f64 x 2)))","(*.f64 1/3 (pow.f64 x 2))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/3 (pow.f64 x 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/3 (pow.f64 x 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/3 (pow.f64 x 2)))","(*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))","(+.f64 (*.f64 1/3 (pow.f64 y 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(+.f64 (*.f64 1/3 (pow.f64 y 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(+.f64 (*.f64 1/3 (pow.f64 y 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(*.f64 1/3 (pow.f64 y 2))","(+.f64 (*.f64 1/3 (pow.f64 y 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(+.f64 (*.f64 1/3 (pow.f64 y 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(+.f64 (*.f64 1/3 (pow.f64 y 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(*.f64 1/3 (pow.f64 y 2))","(+.f64 (*.f64 1/3 (pow.f64 y 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(+.f64 (*.f64 1/3 (pow.f64 y 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(+.f64 (*.f64 1/3 (pow.f64 y 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/3 (pow.f64 z 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/3 (pow.f64 z 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/3 (pow.f64 z 2)))","(*.f64 1/3 (pow.f64 z 2))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/3 (pow.f64 z 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/3 (pow.f64 z 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/3 (pow.f64 z 2)))","(*.f64 1/3 (pow.f64 z 2))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/3 (pow.f64 z 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/3 (pow.f64 z 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/3 (pow.f64 z 2)))","(pow.f64 y 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 y 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 y 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (sqrt.f64 1/3))","(*.f64 (hypot.f64 z y) (sqrt.f64 1/3))","(+.f64 (*.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (sqrt.f64 1/3)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))) (*.f64 (sqrt.f64 1/3) (pow.f64 x 2)))))","(fma.f64 (hypot.f64 z y) (sqrt.f64 1/3) (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z y) 2) -1) 1/3)) (*.f64 x x))))","(+.f64 (*.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))) (*.f64 (sqrt.f64 1/3) (pow.f64 x 2)))) (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3))) (*.f64 (sqrt.f64 1/3) (pow.f64 x 4))))))","(fma.f64 (hypot.f64 z y) (sqrt.f64 1/3) (fma.f64 1/2 (*.f64 (sqrt.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z y) 2) -1) 1/3)) (*.f64 x x)) (*.f64 -1/8 (*.f64 (sqrt.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z y) 2) -3) 1/3)) (pow.f64 x 4)))))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 5))) (*.f64 (sqrt.f64 1/3) (pow.f64 x 6)))) (+.f64 (*.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))) (*.f64 (sqrt.f64 1/3) (pow.f64 x 2)))) (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3))) (*.f64 (sqrt.f64 1/3) (pow.f64 x 4)))))))","(fma.f64 1/16 (*.f64 (sqrt.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z y) 2) -5) 1/3)) (pow.f64 x 6)) (fma.f64 (hypot.f64 z y) (sqrt.f64 1/3) (fma.f64 1/2 (*.f64 (sqrt.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z y) 2) -1) 1/3)) (*.f64 x x)) (*.f64 -1/8 (*.f64 (sqrt.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z y) 2) -3) 1/3)) (pow.f64 x 4))))))","(*.f64 (sqrt.f64 1/3) x)","(+.f64 (*.f64 (sqrt.f64 1/3) x) (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) (sqrt.f64 1/3)) x)))","(fma.f64 (sqrt.f64 1/3) x (/.f64 (*.f64 1/2 (*.f64 (pow.f64 (hypot.f64 z y) 2) (sqrt.f64 1/3))) x))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (sqrt.f64 1/3)) (pow.f64 x 3))) (+.f64 (*.f64 (sqrt.f64 1/3) x) (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) (sqrt.f64 1/3)) x))))","(fma.f64 -1/8 (*.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z y) 2) 2) (sqrt.f64 1/3)) (pow.f64 x -3)) (fma.f64 (sqrt.f64 1/3) x (/.f64 (*.f64 1/2 (*.f64 (pow.f64 (hypot.f64 z y) 2) (sqrt.f64 1/3))) x)))","(+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3) (sqrt.f64 1/3)) (pow.f64 x 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (sqrt.f64 1/3)) (pow.f64 x 3))) (+.f64 (*.f64 (sqrt.f64 1/3) x) (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) (sqrt.f64 1/3)) x)))))","(fma.f64 1/16 (*.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z y) 2) 3) (sqrt.f64 1/3)) (pow.f64 x -5)) (fma.f64 -1/8 (*.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z y) 2) 2) (sqrt.f64 1/3)) (pow.f64 x -3)) (fma.f64 (sqrt.f64 1/3) x (/.f64 (*.f64 1/2 (*.f64 (pow.f64 (hypot.f64 z y) 2) (sqrt.f64 1/3))) x))))","(*.f64 -1 (*.f64 (sqrt.f64 1/3) x))","(*.f64 (neg.f64 x) (sqrt.f64 1/3))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) (sqrt.f64 1/3)) x)) (*.f64 -1 (*.f64 (sqrt.f64 1/3) x)))","(fma.f64 -1/2 (/.f64 (*.f64 (pow.f64 (hypot.f64 z y) 2) (sqrt.f64 1/3)) x) (*.f64 (neg.f64 x) (sqrt.f64 1/3)))","(+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (sqrt.f64 1/3)) (pow.f64 x 3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) (sqrt.f64 1/3)) x)) (*.f64 -1 (*.f64 (sqrt.f64 1/3) x))))","(fma.f64 1/8 (*.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z y) 2) 2) (sqrt.f64 1/3)) (pow.f64 x -3)) (fma.f64 -1/2 (/.f64 (*.f64 (pow.f64 (hypot.f64 z y) 2) (sqrt.f64 1/3)) x) (*.f64 (neg.f64 x) (sqrt.f64 1/3))))","(+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (sqrt.f64 1/3)) (pow.f64 x 3))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3) (sqrt.f64 1/3)) (pow.f64 x 5))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) (sqrt.f64 1/3)) x)) (*.f64 -1 (*.f64 (sqrt.f64 1/3) x)))))","(fma.f64 1/8 (*.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z y) 2) 2) (sqrt.f64 1/3)) (pow.f64 x -3)) (fma.f64 -1/16 (*.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z y) 2) 3) (sqrt.f64 1/3)) (pow.f64 x -5)) (fma.f64 -1/2 (/.f64 (*.f64 (pow.f64 (hypot.f64 z y) 2) (sqrt.f64 1/3)) x) (*.f64 (neg.f64 x) (sqrt.f64 1/3)))))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))) (sqrt.f64 1/3))","(*.f64 (hypot.f64 z x) (sqrt.f64 1/3))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))))) (*.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))) (sqrt.f64 1/3)))","(fma.f64 1/2 (*.f64 (*.f64 y y) (sqrt.f64 (*.f64 1/3 (pow.f64 (pow.f64 (hypot.f64 z x) 2) -1)))) (*.f64 (hypot.f64 z x) (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))))) (+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3))))) (*.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))) (sqrt.f64 1/3))))","(fma.f64 1/2 (*.f64 (*.f64 y y) (sqrt.f64 (*.f64 1/3 (pow.f64 (pow.f64 (hypot.f64 z x) 2) -1)))) (fma.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 (*.f64 1/3 (pow.f64 (pow.f64 (hypot.f64 z x) 2) -3)))) (*.f64 (hypot.f64 z x) (sqrt.f64 1/3))))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))))) (+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3))))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 5))))) (*.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))) (sqrt.f64 1/3)))))","(fma.f64 1/2 (*.f64 (*.f64 y y) (sqrt.f64 (*.f64 1/3 (pow.f64 (pow.f64 (hypot.f64 z x) 2) -1)))) (fma.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 (*.f64 1/3 (pow.f64 (pow.f64 (hypot.f64 z x) 2) -3)))) (fma.f64 1/16 (*.f64 (pow.f64 y 6) (sqrt.f64 (*.f64 1/3 (pow.f64 (pow.f64 (hypot.f64 z x) 2) -5)))) (*.f64 (hypot.f64 z x) (sqrt.f64 1/3)))))","(*.f64 y (sqrt.f64 1/3))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) (sqrt.f64 1/3)) y)))","(fma.f64 y (sqrt.f64 1/3) (/.f64 (*.f64 1/2 (*.f64 (pow.f64 (hypot.f64 z x) 2) (sqrt.f64 1/3))) y))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) (sqrt.f64 1/3)) y)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(fma.f64 y (sqrt.f64 1/3) (fma.f64 1/2 (/.f64 (*.f64 (pow.f64 (hypot.f64 z x) 2) (sqrt.f64 1/3)) y) (*.f64 (*.f64 -1/8 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z x) 2) 2) (sqrt.f64 1/3))) (pow.f64 y -3))))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3) (sqrt.f64 1/3)) (pow.f64 y 5))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (sqrt.f64 1/3)) (pow.f64 y 3))))))","(fma.f64 y (sqrt.f64 1/3) (fma.f64 1/2 (/.f64 (*.f64 (pow.f64 (hypot.f64 z x) 2) (sqrt.f64 1/3)) y) (fma.f64 1/16 (*.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z x) 2) 3) (sqrt.f64 1/3)) (pow.f64 y -5)) (*.f64 (*.f64 -1/8 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z x) 2) 2) (sqrt.f64 1/3))) (pow.f64 y -3)))))","(*.f64 -1 (*.f64 y (sqrt.f64 1/3)))","(*.f64 (neg.f64 y) (sqrt.f64 1/3))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) (sqrt.f64 1/3)) y)) (*.f64 -1 (*.f64 y (sqrt.f64 1/3))))","(fma.f64 -1/2 (/.f64 (*.f64 (pow.f64 (hypot.f64 z x) 2) (sqrt.f64 1/3)) y) (*.f64 (neg.f64 y) (sqrt.f64 1/3)))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (*.f64 1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(fma.f64 -1/2 (/.f64 (*.f64 (pow.f64 (hypot.f64 z x) 2) (sqrt.f64 1/3)) y) (-.f64 (*.f64 (*.f64 1/8 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z x) 2) 2) (sqrt.f64 1/3))) (pow.f64 y -3)) (*.f64 y (sqrt.f64 1/3))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3) (sqrt.f64 1/3)) (pow.f64 y 5))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (*.f64 1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (sqrt.f64 1/3)) (pow.f64 y 3))))))","(fma.f64 -1/16 (*.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z x) 2) 3) (sqrt.f64 1/3)) (pow.f64 y -5)) (fma.f64 -1/2 (/.f64 (*.f64 (pow.f64 (hypot.f64 z x) 2) (sqrt.f64 1/3)) y) (-.f64 (*.f64 (*.f64 1/8 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z x) 2) 2) (sqrt.f64 1/3))) (pow.f64 y -3)) (*.f64 y (sqrt.f64 1/3)))))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (sqrt.f64 1/3))","(*.f64 (hypot.f64 y x) (sqrt.f64 1/3))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))) (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)))) (*.f64 (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (sqrt.f64 1/3)))","(fma.f64 1/2 (*.f64 (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) -1)) (*.f64 (*.f64 z z) (sqrt.f64 1/3))) (*.f64 (hypot.f64 y x) (sqrt.f64 1/3)))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3))) (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))) (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)))) (*.f64 (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (sqrt.f64 1/3))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) -3)) (*.f64 (pow.f64 z 4) (sqrt.f64 1/3))) (fma.f64 1/2 (*.f64 (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) -1)) (*.f64 (*.f64 z z) (sqrt.f64 1/3))) (*.f64 (hypot.f64 y x) (sqrt.f64 1/3))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3))) (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))) (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)))) (+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 5))) (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)))) (*.f64 (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (sqrt.f64 1/3)))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) -3)) (*.f64 (pow.f64 z 4) (sqrt.f64 1/3))) (fma.f64 1/2 (*.f64 (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) -1)) (*.f64 (*.f64 z z) (sqrt.f64 1/3))) (fma.f64 1/16 (*.f64 (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) -5)) (*.f64 (pow.f64 z 6) (sqrt.f64 1/3))) (*.f64 (hypot.f64 y x) (sqrt.f64 1/3)))))","(*.f64 z (sqrt.f64 1/3))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (sqrt.f64 1/3)) z)) (*.f64 z (sqrt.f64 1/3)))","(fma.f64 1/2 (/.f64 (*.f64 (pow.f64 (hypot.f64 y x) 2) (sqrt.f64 1/3)) z) (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (sqrt.f64 1/3)) (pow.f64 z 3)))))","(fma.f64 1/2 (/.f64 (*.f64 (pow.f64 (hypot.f64 y x) 2) (sqrt.f64 1/3)) z) (fma.f64 z (sqrt.f64 1/3) (*.f64 (*.f64 -1/8 (*.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) 2) (sqrt.f64 1/3))) (pow.f64 z -3))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 z (sqrt.f64 1/3)) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3) (sqrt.f64 1/3)) (pow.f64 z 5))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (sqrt.f64 1/3)) (pow.f64 z 3))))))","(fma.f64 1/2 (/.f64 (*.f64 (pow.f64 (hypot.f64 y x) 2) (sqrt.f64 1/3)) z) (fma.f64 z (sqrt.f64 1/3) (fma.f64 1/16 (*.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) 3) (sqrt.f64 1/3)) (pow.f64 z -5)) (*.f64 (*.f64 -1/8 (*.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) 2) (sqrt.f64 1/3))) (pow.f64 z -3)))))","(*.f64 -1 (*.f64 z (sqrt.f64 1/3)))","(*.f64 (neg.f64 z) (sqrt.f64 1/3))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (sqrt.f64 1/3)) z)))","(-.f64 (/.f64 (*.f64 -1/2 (*.f64 (pow.f64 (hypot.f64 y x) 2) (sqrt.f64 1/3))) z) (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (sqrt.f64 1/3)) (pow.f64 z 3))) (+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (sqrt.f64 1/3)) z))))","(fma.f64 1/8 (*.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) 2) (sqrt.f64 1/3)) (pow.f64 z -3)) (-.f64 (/.f64 (*.f64 -1/2 (*.f64 (pow.f64 (hypot.f64 y x) 2) (sqrt.f64 1/3))) z) (*.f64 z (sqrt.f64 1/3))))","(+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (sqrt.f64 1/3)) (pow.f64 z 3))) (+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3) (sqrt.f64 1/3)) (pow.f64 z 5))) (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) (sqrt.f64 1/3)) z)))))","(fma.f64 1/8 (*.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) 2) (sqrt.f64 1/3)) (pow.f64 z -3)) (-.f64 (fma.f64 -1/16 (*.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) 3) (sqrt.f64 1/3)) (pow.f64 z -5)) (/.f64 (*.f64 -1/2 (*.f64 (pow.f64 (hypot.f64 y x) 2) (sqrt.f64 1/3))) z)) (*.f64 z (sqrt.f64 1/3))))","(*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))","(*.f64 1/3 (pow.f64 (hypot.f64 z y) 2))","(+.f64 (*.f64 1/3 (pow.f64 x 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2))))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(+.f64 (*.f64 1/3 (pow.f64 x 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2))))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(+.f64 (*.f64 1/3 (pow.f64 x 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2))))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(*.f64 1/3 (pow.f64 x 2))","(*.f64 1/3 (*.f64 x x))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/3 (pow.f64 x 2)))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/3 (pow.f64 x 2)))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/3 (pow.f64 x 2)))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(*.f64 1/3 (pow.f64 x 2))","(*.f64 1/3 (*.f64 x x))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/3 (pow.f64 x 2)))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/3 (pow.f64 x 2)))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/3 (pow.f64 x 2)))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 1/3 (pow.f64 (hypot.f64 z x) 2))","(+.f64 (*.f64 1/3 (pow.f64 y 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(+.f64 (*.f64 1/3 (pow.f64 y 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(+.f64 (*.f64 1/3 (pow.f64 y 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(*.f64 1/3 (pow.f64 y 2))","(*.f64 1/3 (*.f64 y y))","(+.f64 (*.f64 1/3 (pow.f64 y 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(+.f64 (*.f64 1/3 (pow.f64 y 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(+.f64 (*.f64 1/3 (pow.f64 y 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(*.f64 1/3 (pow.f64 y 2))","(*.f64 1/3 (*.f64 y y))","(+.f64 (*.f64 1/3 (pow.f64 y 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(+.f64 (*.f64 1/3 (pow.f64 y 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(+.f64 (*.f64 1/3 (pow.f64 y 2)) (*.f64 1/3 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(*.f64 1/3 (pow.f64 (hypot.f64 y x) 2))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/3 (pow.f64 z 2)))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/3 (pow.f64 z 2)))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/3 (pow.f64 z 2)))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(*.f64 1/3 (pow.f64 z 2))","(*.f64 1/3 (*.f64 z z))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/3 (pow.f64 z 2)))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/3 (pow.f64 z 2)))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/3 (pow.f64 z 2)))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(*.f64 1/3 (pow.f64 z 2))","(*.f64 1/3 (*.f64 z z))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/3 (pow.f64 z 2)))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/3 (pow.f64 z 2)))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(+.f64 (*.f64 1/3 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/3 (pow.f64 z 2)))","(*.f64 1/3 (+.f64 (*.f64 y y) (pow.f64 (hypot.f64 z x) 2)))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)"]],"time":363.010009765625,"type":"simplify"},{"compiler":[[6082,3281]],"time":61.757080078125,"type":"eval"},{"alts":[["(*.f64 (hypot.f64 y x) (sqrt.f64 1/3))","fresh",21.353766147684166],["(sqrt.f64 (/.f64 (+.f64 (fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) x) (*.f64 y y)) (*.f64 z z)) 3))","fresh",39.98040921081924],["(sqrt.f64 (/.f64 (/.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (sqrt.f64 1/3)) (cbrt.f64 (sqrt.f64 3))) (cbrt.f64 3)))","fresh",39.98040921081924],["(*.f64 (hypot.f64 z y) (sqrt.f64 1/3))","next",18.097651763714225],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))","done",39.95306546081924]],"compiler":[[9,7],[22,14],[23,17],[9,7],[17,11],[9,7],[22,14],[23,17],[9,7]],"count":[[276,5]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[274,4],"picked":[1,1]}],"min-error":[0.2265625],"time":65.248046875,"type":"prune"},{"compiler":[[17,10]],"locations":[["(*.f64 (hypot.f64 z y) (sqrt.f64 1/3))",0.359375,true]],"time":4.19189453125,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (hypot.f64 z y) (sqrt.f64 1/3))","y","-inf",0.3271484375],["(*.f64 (hypot.f64 z y) (sqrt.f64 1/3))","y","inf",0.377197265625],["(*.f64 (hypot.f64 z y) (sqrt.f64 1/3))","y","0",0.406005859375],["(*.f64 (hypot.f64 z y) (sqrt.f64 1/3))","z","-inf",0.399169921875],["(*.f64 (hypot.f64 z y) (sqrt.f64 1/3))","z","inf",0.4609375],["(*.f64 (hypot.f64 z y) (sqrt.f64 1/3))","z","0",1.2490234375]],"time":3.337890625,"type":"series"},{"count":[[1,40]],"inputs":[["(*.f64 (hypot.f64 z y) (sqrt.f64 1/3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1/2) (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 0) (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) (*.f64 1/2 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) (*.f64 0 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 1/3)) (*.f64 (cbrt.f64 1/3) (hypot.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 z y)) (*.f64 (pow.f64 (hypot.f64 z y) 2/3) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/3) (hypot.f64 z y)) (cbrt.f64 (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (hypot.f64 z y) 2/3) (sqrt.f64 1/3)) (cbrt.f64 (hypot.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (hypot.f64 z y)) (neg.f64 (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 (sqrt.f64 (hypot.f64 z y)) (neg.f64 (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (hypot.f64 z y)) (sqrt.f64 (sqrt.f64 1/3))) (*.f64 (sqrt.f64 (hypot.f64 z y)) (sqrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (hypot.f64 z y))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (hypot.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (sqrt.f64 (hypot.f64 z y))) (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (sqrt.f64 (hypot.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) (sqrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1/2) (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 0) (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 z y) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (hypot.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 2/3) (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 (sqrt.f64 1/3))) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 1/27) (hypot.f64 z y))) (pow.f64 (hypot.f64 z y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 1/3)) (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 z y) 2/3) (cbrt.f64 (*.f64 (sqrt.f64 1/27) (hypot.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (*.f64 (hypot.f64 z y) (cbrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (hypot.f64 z y) 2) 1/3) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (hypot.f64 z y) 2) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 3))))))"]],"rules":[["egg-rr",40]],"time":23.328125,"type":"rewrite"},{"count":[[64,70]],"inputs":[["(*.f64 y (sqrt.f64 1/3))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)) (pow.f64 y 5))))))","(*.f64 z (sqrt.f64 1/3))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5))) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))))))","(*.f64 -1 (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))) (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z))))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5))))))","(*.f64 z (sqrt.f64 1/3))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5))) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))))))","(*.f64 y (sqrt.f64 1/3))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)) (pow.f64 y 5))))))","(*.f64 -1 (*.f64 y (sqrt.f64 1/3)))","(+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)))","(+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (*.f64 1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3))) (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)) (pow.f64 y 5))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (sqrt.f64 1/3))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)))","(fma.f64 y (sqrt.f64 1/3) (/.f64 (*.f64 1/2 (*.f64 (*.f64 z z) (sqrt.f64 1/3))) y))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(fma.f64 (sqrt.f64 1/3) y (fma.f64 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)) -1/8 (/.f64 (*.f64 1/2 (*.f64 (*.f64 z z) (sqrt.f64 1/3))) y)))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)) (pow.f64 y 5))))))","(fma.f64 (sqrt.f64 1/3) y (fma.f64 1/2 (/.f64 (*.f64 (*.f64 z z) (sqrt.f64 1/3)) y) (fma.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)) (/.f64 (*.f64 1/16 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3))) (pow.f64 y 5)))))","(*.f64 z (sqrt.f64 1/3))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (*.f64 z (sqrt.f64 1/3)))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)))))","(fma.f64 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) 1/2 (fma.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)) (*.f64 z (sqrt.f64 1/3))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5))) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))))))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (fma.f64 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5)) 1/16 (fma.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)) (*.f64 z (sqrt.f64 1/3)))))","(*.f64 -1 (*.f64 z (sqrt.f64 1/3)))","(*.f64 (neg.f64 z) (sqrt.f64 1/3))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)))","(fma.f64 -1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (*.f64 (neg.f64 z) (sqrt.f64 1/3)))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))) (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z))))","(fma.f64 (neg.f64 z) (sqrt.f64 1/3) (fma.f64 1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)) (*.f64 -1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z))))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5))))))","(fma.f64 (neg.f64 z) (sqrt.f64 1/3) (fma.f64 1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)) (fma.f64 -1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (/.f64 (*.f64 -1/16 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3))) (pow.f64 z 5)))))","(*.f64 z (sqrt.f64 1/3))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (*.f64 z (sqrt.f64 1/3)))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)))))","(fma.f64 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) 1/2 (fma.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)) (*.f64 z (sqrt.f64 1/3))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5))) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))))))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (fma.f64 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5)) 1/16 (fma.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)) (*.f64 z (sqrt.f64 1/3)))))","(*.f64 y (sqrt.f64 1/3))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)))","(fma.f64 y (sqrt.f64 1/3) (/.f64 (*.f64 1/2 (*.f64 (*.f64 z z) (sqrt.f64 1/3))) y))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(fma.f64 (sqrt.f64 1/3) y (fma.f64 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)) -1/8 (/.f64 (*.f64 1/2 (*.f64 (*.f64 z z) (sqrt.f64 1/3))) y)))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)) (pow.f64 y 5))))))","(fma.f64 (sqrt.f64 1/3) y (fma.f64 1/2 (/.f64 (*.f64 (*.f64 z z) (sqrt.f64 1/3)) y) (fma.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)) (/.f64 (*.f64 1/16 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3))) (pow.f64 y 5)))))","(*.f64 -1 (*.f64 y (sqrt.f64 1/3)))","(*.f64 (neg.f64 y) (sqrt.f64 1/3))","(+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)))","(fma.f64 -1/2 (/.f64 (*.f64 (*.f64 z z) (sqrt.f64 1/3)) y) (*.f64 (neg.f64 y) (sqrt.f64 1/3)))","(+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (*.f64 1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(fma.f64 (neg.f64 y) (sqrt.f64 1/3) (fma.f64 -1/2 (/.f64 (*.f64 (*.f64 z z) (sqrt.f64 1/3)) y) (*.f64 1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3))) (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)) (pow.f64 y 5))))))","(fma.f64 (neg.f64 y) (sqrt.f64 1/3) (fma.f64 -1/2 (/.f64 (*.f64 (*.f64 z z) (sqrt.f64 1/3)) y) (fma.f64 1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)) (/.f64 (*.f64 -1/16 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3))) (pow.f64 y 5)))))"]],"time":83.069091796875,"type":"simplify"},{"compiler":[[1188,847]],"time":16.5869140625,"type":"eval"},{"alts":[["(*.f64 (*.f64 (sqrt.f64 (hypot.f64 z y)) (sqrt.f64 (sqrt.f64 1/3))) (*.f64 (sqrt.f64 (hypot.f64 z y)) (sqrt.f64 (sqrt.f64 1/3))))","fresh",18.285968267693725],["(*.f64 (hypot.f64 z y) (sqrt.f64 1/3))","done",18.097651763714225],["(*.f64 (hypot.f64 y x) (sqrt.f64 1/3))","fresh",21.353766147684166],["(*.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 (sqrt.f64 1/3))) (cbrt.f64 1/3))","fresh",18.265033111398644],["(*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 1/3)))","next",18.046870513714225],["(sqrt.f64 (/.f64 (+.f64 (fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) x) (*.f64 y y)) (*.f64 z z)) 3))","fresh",39.98040921081924],["(pow.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) 3)","fresh",18.37647578748691],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))","done",39.95306546081924]],"compiler":[[20,14],[9,7],[9,7],[13,11],[14,12],[22,14],[12,10],[17,11],[20,14],[9,7],[13,11],[14,12],[22,14],[12,10]],"count":[[75,8]],"kept":[{"done":[1,1],"fresh":[3,2],"new":[70,4],"picked":[1,1]}],"min-error":[0.0703125],"time":12.77685546875,"type":"prune"},{"compiler":[[32,22]],"locations":[["(*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))",0.04296875,true],["(*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 1/3)))",0.30859375,true]],"time":8.088134765625,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))","y","-inf",0.310791015625],["(*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))","y","inf",0.305908203125],["(*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))","y","0",0.338134765625],["(*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))","z","-inf",0.362060546875],["(*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))","z","inf",0.37109375],["(*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))","z","0",0.446044921875],["(*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 1/3)))","y","-inf",0.22119140625],["(*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 1/3)))","y","inf",0.202880859375],["(*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 1/3)))","y","0",0.2138671875],["(*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 1/3)))","z","-inf",0.2109375],["(*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 1/3)))","z","inf",0.236083984375],["(*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 1/3)))","z","0",0.30419921875]],"time":3.742919921875,"type":"series"},{"count":[[2,94]],"inputs":[["(*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 1/3)))","(*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1/2) (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 0) (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) (*.f64 0 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) (*.f64 1/2 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3))) (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (*.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (hypot.f64 z y) 2)) (sqrt.f64 (sqrt.f64 1/27)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 z y)) (*.f64 (cbrt.f64 (pow.f64 (hypot.f64 z y) 2)) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (hypot.f64 z y) 2)) (sqrt.f64 1/3)) (cbrt.f64 (hypot.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (hypot.f64 z y) 2)) (sqrt.f64 (sqrt.f64 1/27)))) (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (hypot.f64 z y))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (hypot.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (sqrt.f64 (hypot.f64 z y))) (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (sqrt.f64 (hypot.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (hypot.f64 z y)) (neg.f64 (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 (sqrt.f64 (hypot.f64 z y)) (neg.f64 (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (hypot.f64 z y)) (sqrt.f64 (sqrt.f64 1/3))) (*.f64 (sqrt.f64 (hypot.f64 z y)) (sqrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) (sqrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1/2) (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 0) (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 1/3)) (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 z y) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) (cbrt.f64 (*.f64 (pow.f64 (hypot.f64 z y) 2) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (hypot.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (hypot.f64 z y) 2) 1/3)) (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (pow.f64 1/3 1/8)) (pow.f64 1/3 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))))) (cbrt.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (hypot.f64 z y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 (sqrt.f64 1/3))) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1/3 1/8) (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (pow.f64 1/3 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (hypot.f64 z y) 2))) (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (*.f64 (hypot.f64 z y) (cbrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 1/3)) (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (hypot.f64 z y) 2) 1/3) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (hypot.f64 z y) 2) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) 1/2) (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) 0) (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (*.f64 0 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 1/2 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3))) (*.f64 (hypot.f64 z y) (cbrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 z y)) (*.f64 (cbrt.f64 (pow.f64 (hypot.f64 z y) 2)) (sqrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (hypot.f64 z y) 2)) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (hypot.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 1/3 1/8)) (sqrt.f64 (hypot.f64 z y))) (*.f64 (neg.f64 (pow.f64 1/3 1/8)) (sqrt.f64 (hypot.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 1/3 1/8) (sqrt.f64 (hypot.f64 z y))) (*.f64 (pow.f64 1/3 1/8) (sqrt.f64 (hypot.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (hypot.f64 z y)) (neg.f64 (pow.f64 1/3 1/8))) (*.f64 (sqrt.f64 (hypot.f64 z y)) (neg.f64 (pow.f64 1/3 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (hypot.f64 z y)) (pow.f64 1/3 1/8)) (*.f64 (sqrt.f64 (hypot.f64 z y)) (pow.f64 1/3 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))) (sqrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) 1/2) (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) 0) (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 1/3)) (hypot.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (hypot.f64 z y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (hypot.f64 z y) 2))) (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (sqrt.f64 1/27)) (hypot.f64 z y))) (cbrt.f64 (pow.f64 (hypot.f64 z y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (pow.f64 1/3 1/8)) (pow.f64 1/3 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1/3 1/8) (*.f64 (hypot.f64 z y) (pow.f64 1/3 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 1/3)) (*.f64 (hypot.f64 z y) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (hypot.f64 z y) 2)) (cbrt.f64 (*.f64 (sqrt.f64 (sqrt.f64 1/27)) (hypot.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (sqrt.f64 1/27)) (pow.f64 (hypot.f64 z y) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (hypot.f64 z y) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (hypot.f64 z y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (sqrt.f64 (sqrt.f64 1/27)) (pow.f64 (hypot.f64 z y) 3)))))))"]],"rules":[["egg-rr",44],["egg-rr",50]],"time":25.6630859375,"type":"rewrite"},{"count":[[142,154]],"inputs":[["(*.f64 y (sqrt.f64 1/3))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)) (pow.f64 y 5))))))","(*.f64 z (sqrt.f64 1/3))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5))) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))))))","(*.f64 -1 (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))) (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z))))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5))))))","(*.f64 z (sqrt.f64 1/3))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5))) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))))))","(*.f64 y (sqrt.f64 1/3))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)) (pow.f64 y 5))))))","(*.f64 -1 (*.f64 y (sqrt.f64 1/3)))","(+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)))","(+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (*.f64 1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3))) (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)) (pow.f64 y 5))))))","(*.f64 y (sqrt.f64 (sqrt.f64 1/3)))","(+.f64 (*.f64 y (sqrt.f64 (sqrt.f64 1/3))) (*.f64 1/2 (*.f64 (/.f64 (pow.f64 z 2) y) (sqrt.f64 (sqrt.f64 1/3)))))","(+.f64 (*.f64 y (sqrt.f64 (sqrt.f64 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (pow.f64 z 4) (pow.f64 y 3)) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 1/2 (*.f64 (/.f64 (pow.f64 z 2) y) (sqrt.f64 (sqrt.f64 1/3))))))","(+.f64 (*.f64 y (sqrt.f64 (sqrt.f64 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (pow.f64 z 4) (pow.f64 y 3)) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (pow.f64 z 2) y) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 1/16 (*.f64 (/.f64 (pow.f64 z 6) (pow.f64 y 5)) (sqrt.f64 (sqrt.f64 1/3)))))))","(*.f64 z (sqrt.f64 (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (pow.f64 y 2) z) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 z (sqrt.f64 (sqrt.f64 1/3))))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (pow.f64 y 2) z) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (pow.f64 y 4) (pow.f64 z 3)) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 z (sqrt.f64 (sqrt.f64 1/3)))))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (pow.f64 y 2) z) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (pow.f64 y 4) (pow.f64 z 3)) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 z (sqrt.f64 (sqrt.f64 1/3))) (*.f64 1/16 (*.f64 (/.f64 (pow.f64 y 6) (pow.f64 z 5)) (sqrt.f64 (sqrt.f64 1/3)))))))","(*.f64 -1 (*.f64 z (sqrt.f64 (sqrt.f64 1/3))))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 -1/2 (*.f64 (/.f64 (pow.f64 y 2) z) (sqrt.f64 (sqrt.f64 1/3)))))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 1/8 (*.f64 (/.f64 (pow.f64 y 4) (pow.f64 z 3)) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 -1/2 (*.f64 (/.f64 (pow.f64 y 2) z) (sqrt.f64 (sqrt.f64 1/3))))))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 -1/16 (*.f64 (/.f64 (pow.f64 y 6) (pow.f64 z 5)) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 1/8 (*.f64 (/.f64 (pow.f64 y 4) (pow.f64 z 3)) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 -1/2 (*.f64 (/.f64 (pow.f64 y 2) z) (sqrt.f64 (sqrt.f64 1/3)))))))","(*.f64 z (sqrt.f64 (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (pow.f64 y 2) z) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 z (sqrt.f64 (sqrt.f64 1/3))))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (pow.f64 y 2) z) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (pow.f64 y 4) (pow.f64 z 3)) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 z (sqrt.f64 (sqrt.f64 1/3)))))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (pow.f64 y 2) z) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (pow.f64 y 4) (pow.f64 z 3)) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 z (sqrt.f64 (sqrt.f64 1/3))) (*.f64 1/16 (*.f64 (/.f64 (pow.f64 y 6) (pow.f64 z 5)) (sqrt.f64 (sqrt.f64 1/3)))))))","(*.f64 y (sqrt.f64 (sqrt.f64 1/3)))","(+.f64 (*.f64 y (sqrt.f64 (sqrt.f64 1/3))) (*.f64 1/2 (*.f64 (/.f64 (pow.f64 z 2) y) (sqrt.f64 (sqrt.f64 1/3)))))","(+.f64 (*.f64 y (sqrt.f64 (sqrt.f64 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (pow.f64 z 4) (pow.f64 y 3)) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 1/2 (*.f64 (/.f64 (pow.f64 z 2) y) (sqrt.f64 (sqrt.f64 1/3))))))","(+.f64 (*.f64 y (sqrt.f64 (sqrt.f64 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (pow.f64 z 4) (pow.f64 y 3)) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (pow.f64 z 2) y) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 1/16 (*.f64 (/.f64 (pow.f64 z 6) (pow.f64 y 5)) (sqrt.f64 (sqrt.f64 1/3)))))))","(*.f64 -1 (*.f64 y (sqrt.f64 (sqrt.f64 1/3))))","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (pow.f64 z 2) y) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 -1 (*.f64 y (sqrt.f64 (sqrt.f64 1/3)))))","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (pow.f64 z 2) y) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 1/8 (*.f64 (/.f64 (pow.f64 z 4) (pow.f64 y 3)) (sqrt.f64 (sqrt.f64 1/3))))))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (pow.f64 z 6) (pow.f64 y 5)) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (pow.f64 z 2) y) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 1/8 (*.f64 (/.f64 (pow.f64 z 4) (pow.f64 y 3)) (sqrt.f64 (sqrt.f64 1/3)))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (sqrt.f64 1/3))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)))","(fma.f64 y (sqrt.f64 1/3) (/.f64 (*.f64 1/2 (*.f64 (*.f64 z z) (sqrt.f64 1/3))) y))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(fma.f64 (sqrt.f64 1/3) y (fma.f64 1/2 (/.f64 (*.f64 (*.f64 z z) (sqrt.f64 1/3)) y) (/.f64 (*.f64 -1/8 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3))) (pow.f64 y 3))))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)) (pow.f64 y 5))))))","(fma.f64 (sqrt.f64 1/3) y (fma.f64 1/2 (/.f64 (*.f64 (*.f64 z z) (sqrt.f64 1/3)) y) (fma.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)) (/.f64 (*.f64 1/16 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3))) (pow.f64 y 5)))))","(*.f64 z (sqrt.f64 1/3))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (*.f64 z (sqrt.f64 1/3)))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)))))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (fma.f64 z (sqrt.f64 1/3) (/.f64 (*.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3))) (pow.f64 z 3))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5))) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))))))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (fma.f64 1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5)) (fma.f64 z (sqrt.f64 1/3) (/.f64 (*.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3))) (pow.f64 z 3)))))","(*.f64 -1 (*.f64 z (sqrt.f64 1/3)))","(*.f64 (neg.f64 z) (sqrt.f64 1/3))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)))","(fma.f64 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) -1/2 (*.f64 (neg.f64 z) (sqrt.f64 1/3)))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))) (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z))))","(-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) -1/2 (/.f64 (*.f64 1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3))) (pow.f64 z 3))) (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5))))))","(fma.f64 (neg.f64 z) (sqrt.f64 1/3) (fma.f64 1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)) (fma.f64 -1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (/.f64 (*.f64 -1/16 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3))) (pow.f64 z 5)))))","(*.f64 z (sqrt.f64 1/3))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (*.f64 z (sqrt.f64 1/3)))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)))))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (fma.f64 z (sqrt.f64 1/3) (/.f64 (*.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3))) (pow.f64 z 3))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5))) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))))))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (fma.f64 1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5)) (fma.f64 z (sqrt.f64 1/3) (/.f64 (*.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3))) (pow.f64 z 3)))))","(*.f64 y (sqrt.f64 1/3))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)))","(fma.f64 y (sqrt.f64 1/3) (/.f64 (*.f64 1/2 (*.f64 (*.f64 z z) (sqrt.f64 1/3))) y))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(fma.f64 (sqrt.f64 1/3) y (fma.f64 1/2 (/.f64 (*.f64 (*.f64 z z) (sqrt.f64 1/3)) y) (/.f64 (*.f64 -1/8 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3))) (pow.f64 y 3))))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)) (pow.f64 y 5))))))","(fma.f64 (sqrt.f64 1/3) y (fma.f64 1/2 (/.f64 (*.f64 (*.f64 z z) (sqrt.f64 1/3)) y) (fma.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)) (/.f64 (*.f64 1/16 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3))) (pow.f64 y 5)))))","(*.f64 -1 (*.f64 y (sqrt.f64 1/3)))","(*.f64 (neg.f64 y) (sqrt.f64 1/3))","(+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)))","(fma.f64 (/.f64 (*.f64 (*.f64 z z) (sqrt.f64 1/3)) y) -1/2 (*.f64 (neg.f64 y) (sqrt.f64 1/3)))","(+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (*.f64 1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(fma.f64 (neg.f64 y) (sqrt.f64 1/3) (fma.f64 -1/2 (/.f64 (*.f64 (*.f64 z z) (sqrt.f64 1/3)) y) (/.f64 (*.f64 1/8 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3))) (pow.f64 y 3))))","(+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3))) (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)) (pow.f64 y 5))))))","(fma.f64 (neg.f64 y) (sqrt.f64 1/3) (fma.f64 -1/2 (/.f64 (*.f64 (*.f64 z z) (sqrt.f64 1/3)) y) (fma.f64 1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)) (/.f64 (*.f64 -1/16 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3))) (pow.f64 y 5)))))","(*.f64 y (sqrt.f64 (sqrt.f64 1/3)))","(+.f64 (*.f64 y (sqrt.f64 (sqrt.f64 1/3))) (*.f64 1/2 (*.f64 (/.f64 (pow.f64 z 2) y) (sqrt.f64 (sqrt.f64 1/3)))))","(*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 y (/.f64 (*.f64 1/2 (*.f64 z z)) y)))","(+.f64 (*.f64 y (sqrt.f64 (sqrt.f64 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (pow.f64 z 4) (pow.f64 y 3)) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 1/2 (*.f64 (/.f64 (pow.f64 z 2) y) (sqrt.f64 (sqrt.f64 1/3))))))","(fma.f64 y (sqrt.f64 (sqrt.f64 1/3)) (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 (/.f64 (*.f64 -1/8 (pow.f64 z 4)) (pow.f64 y 3)) (/.f64 (*.f64 1/2 (*.f64 z z)) y))))","(+.f64 (*.f64 y (sqrt.f64 (sqrt.f64 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (pow.f64 z 4) (pow.f64 y 3)) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (pow.f64 z 2) y) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 1/16 (*.f64 (/.f64 (pow.f64 z 6) (pow.f64 y 5)) (sqrt.f64 (sqrt.f64 1/3)))))))","(+.f64 (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 y (/.f64 (*.f64 -1/8 (pow.f64 z 4)) (pow.f64 y 3)))) (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 (/.f64 (*.f64 1/16 (pow.f64 z 6)) (pow.f64 y 5)) (/.f64 (*.f64 1/2 (*.f64 z z)) y))))","(*.f64 z (sqrt.f64 (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (pow.f64 y 2) z) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 z (sqrt.f64 (sqrt.f64 1/3))))","(*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 (/.f64 (*.f64 1/2 (*.f64 y y)) z) z))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (pow.f64 y 2) z) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (pow.f64 y 4) (pow.f64 z 3)) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 z (sqrt.f64 (sqrt.f64 1/3)))))","(fma.f64 1/2 (*.f64 (/.f64 (*.f64 y y) z) (sqrt.f64 (sqrt.f64 1/3))) (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 z (/.f64 (*.f64 -1/8 (pow.f64 y 4)) (pow.f64 z 3)))))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (pow.f64 y 2) z) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (pow.f64 y 4) (pow.f64 z 3)) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 z (sqrt.f64 (sqrt.f64 1/3))) (*.f64 1/16 (*.f64 (/.f64 (pow.f64 y 6) (pow.f64 z 5)) (sqrt.f64 (sqrt.f64 1/3)))))))","(+.f64 (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 (/.f64 (*.f64 1/2 (*.f64 y y)) z) (/.f64 (*.f64 -1/8 (pow.f64 y 4)) (pow.f64 z 3)))) (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 (/.f64 (*.f64 1/16 (pow.f64 y 6)) (pow.f64 z 5)) z)))","(*.f64 -1 (*.f64 z (sqrt.f64 (sqrt.f64 1/3))))","(*.f64 (neg.f64 z) (sqrt.f64 (sqrt.f64 1/3)))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 -1/2 (*.f64 (/.f64 (pow.f64 y 2) z) (sqrt.f64 (sqrt.f64 1/3)))))","(*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 (neg.f64 z) (/.f64 (*.f64 -1/2 (*.f64 y y)) z)))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 1/8 (*.f64 (/.f64 (pow.f64 y 4) (pow.f64 z 3)) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 -1/2 (*.f64 (/.f64 (pow.f64 y 2) z) (sqrt.f64 (sqrt.f64 1/3))))))","(fma.f64 (neg.f64 z) (sqrt.f64 (sqrt.f64 1/3)) (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 (/.f64 (*.f64 1/8 (pow.f64 y 4)) (pow.f64 z 3)) (/.f64 (*.f64 -1/2 (*.f64 y y)) z))))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 -1/16 (*.f64 (/.f64 (pow.f64 y 6) (pow.f64 z 5)) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 1/8 (*.f64 (/.f64 (pow.f64 y 4) (pow.f64 z 3)) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 -1/2 (*.f64 (/.f64 (pow.f64 y 2) z) (sqrt.f64 (sqrt.f64 1/3)))))))","(+.f64 (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 (neg.f64 z) (/.f64 (*.f64 -1/16 (pow.f64 y 6)) (pow.f64 z 5)))) (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 (/.f64 (*.f64 1/8 (pow.f64 y 4)) (pow.f64 z 3)) (/.f64 (*.f64 -1/2 (*.f64 y y)) z))))","(*.f64 z (sqrt.f64 (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (pow.f64 y 2) z) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 z (sqrt.f64 (sqrt.f64 1/3))))","(*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 (/.f64 (*.f64 1/2 (*.f64 y y)) z) z))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (pow.f64 y 2) z) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (pow.f64 y 4) (pow.f64 z 3)) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 z (sqrt.f64 (sqrt.f64 1/3)))))","(fma.f64 1/2 (*.f64 (/.f64 (*.f64 y y) z) (sqrt.f64 (sqrt.f64 1/3))) (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 z (/.f64 (*.f64 -1/8 (pow.f64 y 4)) (pow.f64 z 3)))))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (pow.f64 y 2) z) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (pow.f64 y 4) (pow.f64 z 3)) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 z (sqrt.f64 (sqrt.f64 1/3))) (*.f64 1/16 (*.f64 (/.f64 (pow.f64 y 6) (pow.f64 z 5)) (sqrt.f64 (sqrt.f64 1/3)))))))","(+.f64 (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 (/.f64 (*.f64 1/2 (*.f64 y y)) z) (/.f64 (*.f64 -1/8 (pow.f64 y 4)) (pow.f64 z 3)))) (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 (/.f64 (*.f64 1/16 (pow.f64 y 6)) (pow.f64 z 5)) z)))","(*.f64 y (sqrt.f64 (sqrt.f64 1/3)))","(+.f64 (*.f64 y (sqrt.f64 (sqrt.f64 1/3))) (*.f64 1/2 (*.f64 (/.f64 (pow.f64 z 2) y) (sqrt.f64 (sqrt.f64 1/3)))))","(*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 y (/.f64 (*.f64 1/2 (*.f64 z z)) y)))","(+.f64 (*.f64 y (sqrt.f64 (sqrt.f64 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (pow.f64 z 4) (pow.f64 y 3)) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 1/2 (*.f64 (/.f64 (pow.f64 z 2) y) (sqrt.f64 (sqrt.f64 1/3))))))","(fma.f64 y (sqrt.f64 (sqrt.f64 1/3)) (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 (/.f64 (*.f64 -1/8 (pow.f64 z 4)) (pow.f64 y 3)) (/.f64 (*.f64 1/2 (*.f64 z z)) y))))","(+.f64 (*.f64 y (sqrt.f64 (sqrt.f64 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (pow.f64 z 4) (pow.f64 y 3)) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (pow.f64 z 2) y) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 1/16 (*.f64 (/.f64 (pow.f64 z 6) (pow.f64 y 5)) (sqrt.f64 (sqrt.f64 1/3)))))))","(+.f64 (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 y (/.f64 (*.f64 -1/8 (pow.f64 z 4)) (pow.f64 y 3)))) (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 (/.f64 (*.f64 1/16 (pow.f64 z 6)) (pow.f64 y 5)) (/.f64 (*.f64 1/2 (*.f64 z z)) y))))","(*.f64 -1 (*.f64 y (sqrt.f64 (sqrt.f64 1/3))))","(*.f64 (neg.f64 y) (sqrt.f64 (sqrt.f64 1/3)))","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (pow.f64 z 2) y) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 -1 (*.f64 y (sqrt.f64 (sqrt.f64 1/3)))))","(*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 (/.f64 (*.f64 -1/2 (*.f64 z z)) y) (neg.f64 y)))","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (pow.f64 z 2) y) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 1/8 (*.f64 (/.f64 (pow.f64 z 4) (pow.f64 y 3)) (sqrt.f64 (sqrt.f64 1/3))))))","(fma.f64 -1/2 (*.f64 (/.f64 (*.f64 z z) y) (sqrt.f64 (sqrt.f64 1/3))) (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 (/.f64 (*.f64 1/8 (pow.f64 z 4)) (pow.f64 y 3)) (neg.f64 y))))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (pow.f64 z 6) (pow.f64 y 5)) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (pow.f64 z 2) y) (sqrt.f64 (sqrt.f64 1/3)))) (+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 1/8 (*.f64 (/.f64 (pow.f64 z 4) (pow.f64 y 3)) (sqrt.f64 (sqrt.f64 1/3)))))))","(+.f64 (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 (/.f64 (*.f64 -1/16 (pow.f64 z 6)) (pow.f64 y 5)) (/.f64 (*.f64 -1/2 (*.f64 z z)) y))) (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (+.f64 (/.f64 (*.f64 1/8 (pow.f64 z 4)) (pow.f64 y 3)) (neg.f64 y))))"]],"time":171.014892578125,"type":"simplify"},{"compiler":[[2983,2247]],"time":39.754150390625,"type":"eval"},{"alts":[["(sqrt.f64 (/.f64 (+.f64 (fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) x) (*.f64 y y)) (*.f64 z z)) 3))","fresh",39.98040921081924],["(*.f64 (*.f64 (*.f64 (hypot.f64 z y) (pow.f64 1/3 1/8)) (pow.f64 1/3 1/8)) (sqrt.f64 (sqrt.f64 1/3)))","fresh",18.19796309160546],["(*.f64 (hypot.f64 y x) (sqrt.f64 1/3))","fresh",21.353766147684166],["(*.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (sqrt.f64 1/3)))","next",18.09669429276325],["(*.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (pow.f64 1/3 1/8)) (pow.f64 1/3 1/8))","fresh",18.173198052531692],["(*.f64 (hypot.f64 z y) (sqrt.f64 1/3))","done",18.097651763714225],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))","done",39.95306546081924]],"compiler":[[22,14],[18,16],[9,7],[19,17],[18,16],[9,7],[17,11],[22,14],[18,16],[9,7],[19,17],[18,16]],"count":[[162,7]],"kept":[{"done":[2,2],"fresh":[5,2],"new":[154,3],"picked":[1,0]}],"min-error":[0.0546875],"time":32.18798828125,"type":"prune"},{"compiler":[[56,43]],"locations":[["(*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))",0.04296875,false],["(*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3))))",0.27734375,true],["(*.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (sqrt.f64 1/3)))",0.328788769536884,true]],"time":15.7890625,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3))))","y","-inf",0.452880859375],["(*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3))))","y","inf",0.386962890625],["(*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3))))","y","0",8.053955078125],["(*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3))))","z","-inf",0.4189453125],["(*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3))))","z","inf",0.51904296875],["(*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3))))","z","0",10.647216796875],["(*.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (sqrt.f64 1/3)))","y","-inf",0.2890625],["(*.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (sqrt.f64 1/3)))","y","inf",0.294921875],["(*.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (sqrt.f64 1/3)))","y","0",10.153076171875],["(*.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (sqrt.f64 1/3)))","z","-inf",0.2939453125],["(*.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (sqrt.f64 1/3)))","z","inf",0.28515625],["(*.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (sqrt.f64 1/3)))","z","0",26.60400390625]],"time":58.72998046875,"type":"series"},{"count":[[2,84]],"inputs":[["(*.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (sqrt.f64 1/3)))","(*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1/2) (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 0) (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) (*.f64 1/2 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) (*.f64 0 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)) (cbrt.f64 (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 1/3)) (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 1/3)) (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 2/3) (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 1/3) (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)))) (pow.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (hypot.f64 z y)) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)) (cbrt.f64 (cbrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3))) (*.f64 (pow.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)) 2/3) (cbrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3))) (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (pow.f64 (hypot.f64 z y) 2/3)) (sqrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 1/3))) (*.f64 (cbrt.f64 (cbrt.f64 1/3)) (*.f64 (hypot.f64 z y) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)) 2/3) (cbrt.f64 (*.f64 (sqrt.f64 1/3) (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)) 2/3) (cbrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/3)) (*.f64 (hypot.f64 z y) (cbrt.f64 1/3))) (cbrt.f64 (cbrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (pow.f64 (hypot.f64 z y) 2/3)) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (hypot.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/3)) (*.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)) (cbrt.f64 (cbrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (hypot.f64 z y)) (sqrt.f64 (sqrt.f64 1/3))) (*.f64 (sqrt.f64 (hypot.f64 z y)) (sqrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (hypot.f64 z y)) (neg.f64 (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 (sqrt.f64 (hypot.f64 z y)) (neg.f64 (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 z y) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (hypot.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (hypot.f64 z y)) 1) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (hypot.f64 z y)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (hypot.f64 z y) 2) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)) 1/2) (*.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)) 0) (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)) (*.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3))) (*.f64 1/2 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3))) (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)) (*.f64 0 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (*.f64 (*.f64 (pow.f64 (hypot.f64 z y) 2) (sqrt.f64 1/3)) (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3)))) (*.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 1/3))) (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (pow.f64 (hypot.f64 z y) 2) (sqrt.f64 1/3)) (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 1/3))) (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (sqrt.f64 (hypot.f64 z y))) (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (sqrt.f64 (hypot.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (hypot.f64 z y)) (cbrt.f64 (sqrt.f64 1/3))) (*.f64 (sqrt.f64 (hypot.f64 z y)) (cbrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3))) (pow.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)) 2/3) (cbrt.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3))) (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 z y) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (hypot.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3)))) (sqrt.f64 (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (pow.f64 (hypot.f64 z y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3))))) (cbrt.f64 (cbrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 z y)) (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 1/3)) (*.f64 (hypot.f64 z y) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) 2/3) (cbrt.f64 (hypot.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (pow.f64 (hypot.f64 z y) 2/3)) (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 1/3))) (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (hypot.f64 z y) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (hypot.f64 z y) 3) 1/3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (hypot.f64 z y) 3) 1/3))))))"]],"rules":[["egg-rr",39],["egg-rr",45]],"time":26.977783203125,"type":"rewrite"},{"count":[[132,146]],"inputs":[["(*.f64 y (sqrt.f64 1/3))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)) (pow.f64 y 5))))))","(*.f64 z (sqrt.f64 1/3))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5))) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))))))","(*.f64 -1 (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))) (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z))))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5))))))","(*.f64 z (sqrt.f64 1/3))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5))) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))))))","(*.f64 y (sqrt.f64 1/3))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)) (pow.f64 y 5))))))","(*.f64 -1 (*.f64 y (sqrt.f64 1/3)))","(+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)))","(+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (*.f64 1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3))) (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)) (pow.f64 y 5))))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 2) y))) (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 2) y))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y) (*.f64 -1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 4) (pow.f64 y 3))))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 2) y))) (+.f64 (*.f64 1/16 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 6) (pow.f64 y 5)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y) (*.f64 -1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 4) (pow.f64 y 3)))))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z) (*.f64 -1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 4) (pow.f64 z 3))))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 4) (pow.f64 z 3)))) (*.f64 1/16 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 6) (pow.f64 z 5)))))))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z)) (*.f64 1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 4) (pow.f64 z 3))))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z)) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 4) (pow.f64 z 3)))) (*.f64 -1/16 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 6) (pow.f64 z 5)))))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z) (*.f64 -1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 4) (pow.f64 z 3))))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 4) (pow.f64 z 3)))) (*.f64 1/16 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 6) (pow.f64 z 5)))))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 2) y))) (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 2) y))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y) (*.f64 -1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 4) (pow.f64 y 3))))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 2) y))) (+.f64 (*.f64 1/16 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 6) (pow.f64 y 5)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y) (*.f64 -1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 4) (pow.f64 y 3)))))))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 2) y))) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y)))","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 4) (pow.f64 y 3)))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 2) y))) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y))))","(+.f64 (*.f64 -1/16 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 6) (pow.f64 y 5)))) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 4) (pow.f64 y 3)))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 2) y))) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (sqrt.f64 1/3))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)))","(fma.f64 y (sqrt.f64 1/3) (/.f64 (*.f64 1/2 (*.f64 (*.f64 z z) (sqrt.f64 1/3))) y))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(fma.f64 (sqrt.f64 1/3) y (fma.f64 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)) -1/8 (/.f64 (*.f64 1/2 (*.f64 (*.f64 z z) (sqrt.f64 1/3))) y)))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)) (pow.f64 y 5))))))","(fma.f64 (sqrt.f64 1/3) y (fma.f64 1/2 (/.f64 (*.f64 (*.f64 z z) (sqrt.f64 1/3)) y) (fma.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)) (/.f64 (*.f64 1/16 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3))) (pow.f64 y 5)))))","(*.f64 z (sqrt.f64 1/3))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (*.f64 z (sqrt.f64 1/3)))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)))))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (fma.f64 z (sqrt.f64 1/3) (/.f64 (*.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3))) (pow.f64 z 3))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5))) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))))))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (fma.f64 1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5)) (fma.f64 z (sqrt.f64 1/3) (/.f64 (*.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3))) (pow.f64 z 3)))))","(*.f64 -1 (*.f64 z (sqrt.f64 1/3)))","(*.f64 (neg.f64 z) (sqrt.f64 1/3))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)))","(fma.f64 (neg.f64 z) (sqrt.f64 1/3) (/.f64 (*.f64 -1/2 (*.f64 (*.f64 y y) (sqrt.f64 1/3))) z))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))) (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z))))","(fma.f64 (neg.f64 z) (sqrt.f64 1/3) (fma.f64 1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)) (/.f64 (*.f64 -1/2 (*.f64 (*.f64 y y) (sqrt.f64 1/3))) z)))","(+.f64 (*.f64 -1 (*.f64 z (sqrt.f64 1/3))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5))))))","(fma.f64 (neg.f64 z) (sqrt.f64 1/3) (fma.f64 1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)) (fma.f64 -1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (/.f64 (*.f64 -1/16 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3))) (pow.f64 z 5)))))","(*.f64 z (sqrt.f64 1/3))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (*.f64 z (sqrt.f64 1/3)))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (*.f64 z (sqrt.f64 1/3)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3)))))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (fma.f64 z (sqrt.f64 1/3) (/.f64 (*.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3))) (pow.f64 z 3))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 y 2) (sqrt.f64 1/3)) z)) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5))) (+.f64 (*.f64 z (sqrt.f64 1/3)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3)) (pow.f64 z 3))))))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 y y) (sqrt.f64 1/3)) z) (fma.f64 1/16 (/.f64 (*.f64 (pow.f64 y 6) (sqrt.f64 1/3)) (pow.f64 z 5)) (fma.f64 z (sqrt.f64 1/3) (/.f64 (*.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 1/3))) (pow.f64 z 3)))))","(*.f64 y (sqrt.f64 1/3))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)))","(fma.f64 y (sqrt.f64 1/3) (/.f64 (*.f64 1/2 (*.f64 (*.f64 z z) (sqrt.f64 1/3))) y))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(fma.f64 (sqrt.f64 1/3) y (fma.f64 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)) -1/8 (/.f64 (*.f64 1/2 (*.f64 (*.f64 z z) (sqrt.f64 1/3))) y)))","(+.f64 (*.f64 y (sqrt.f64 1/3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)) (pow.f64 y 5))))))","(fma.f64 (sqrt.f64 1/3) y (fma.f64 1/2 (/.f64 (*.f64 (*.f64 z z) (sqrt.f64 1/3)) y) (fma.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)) (/.f64 (*.f64 1/16 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3))) (pow.f64 y 5)))))","(*.f64 -1 (*.f64 y (sqrt.f64 1/3)))","(*.f64 (neg.f64 y) (sqrt.f64 1/3))","(+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)))","(fma.f64 (/.f64 (*.f64 (*.f64 z z) (sqrt.f64 1/3)) y) -1/2 (*.f64 (neg.f64 y) (sqrt.f64 1/3)))","(+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (*.f64 1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)))))","(fma.f64 (neg.f64 y) (sqrt.f64 1/3) (fma.f64 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)) 1/8 (/.f64 (*.f64 -1/2 (*.f64 (*.f64 z z) (sqrt.f64 1/3))) y)))","(+.f64 (*.f64 -1 (*.f64 y (sqrt.f64 1/3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 z 2) (sqrt.f64 1/3)) y)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3))) (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3)) (pow.f64 y 5))))))","(fma.f64 (neg.f64 y) (sqrt.f64 1/3) (fma.f64 -1/2 (/.f64 (*.f64 (*.f64 z z) (sqrt.f64 1/3)) y) (fma.f64 1/8 (/.f64 (*.f64 (pow.f64 z 4) (sqrt.f64 1/3)) (pow.f64 y 3)) (/.f64 (*.f64 -1/16 (*.f64 (pow.f64 z 6) (sqrt.f64 1/3))) (pow.f64 y 5)))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y)","(*.f64 (cbrt.f64 1/3) y)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 2) y))) (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y))","(fma.f64 1/2 (*.f64 (cbrt.f64 1/3) (/.f64 (*.f64 z z) y)) (*.f64 (cbrt.f64 1/3) y))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 2) y))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y) (*.f64 -1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 4) (pow.f64 y 3))))))","(fma.f64 1/2 (*.f64 (cbrt.f64 1/3) (/.f64 (*.f64 z z) y)) (fma.f64 (cbrt.f64 1/3) y (/.f64 (*.f64 (*.f64 -1/8 (cbrt.f64 1/3)) (pow.f64 z 4)) (pow.f64 y 3))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 2) y))) (+.f64 (*.f64 1/16 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 6) (pow.f64 y 5)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y) (*.f64 -1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 4) (pow.f64 y 3)))))))","(fma.f64 1/2 (*.f64 (cbrt.f64 1/3) (/.f64 (*.f64 z z) y)) (fma.f64 1/16 (/.f64 (*.f64 (cbrt.f64 1/3) (pow.f64 z 6)) (pow.f64 y 5)) (fma.f64 (cbrt.f64 1/3) y (/.f64 (*.f64 (*.f64 -1/8 (cbrt.f64 1/3)) (pow.f64 z 4)) (pow.f64 y 3)))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z)","(*.f64 (cbrt.f64 1/3) z)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z))","(fma.f64 1/2 (*.f64 (cbrt.f64 1/3) (/.f64 (*.f64 y y) z)) (*.f64 (cbrt.f64 1/3) z))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z) (*.f64 -1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 4) (pow.f64 z 3))))))","(fma.f64 1/2 (*.f64 (cbrt.f64 1/3) (/.f64 (*.f64 y y) z)) (fma.f64 (cbrt.f64 1/3) z (/.f64 (*.f64 -1/8 (*.f64 (cbrt.f64 1/3) (pow.f64 y 4))) (pow.f64 z 3))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 4) (pow.f64 z 3)))) (*.f64 1/16 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 6) (pow.f64 z 5)))))))","(fma.f64 (*.f64 1/2 (cbrt.f64 1/3)) (/.f64 (*.f64 y y) z) (fma.f64 z (cbrt.f64 1/3) (fma.f64 -1/8 (/.f64 (*.f64 (cbrt.f64 1/3) (pow.f64 y 4)) (pow.f64 z 3)) (/.f64 (*.f64 1/16 (*.f64 (cbrt.f64 1/3) (pow.f64 y 6))) (pow.f64 z 5)))))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z))","(*.f64 (neg.f64 z) (cbrt.f64 1/3))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z)))","(fma.f64 -1/2 (*.f64 (cbrt.f64 1/3) (/.f64 (*.f64 y y) z)) (*.f64 (neg.f64 z) (cbrt.f64 1/3)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z)) (*.f64 1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 4) (pow.f64 z 3))))))","(fma.f64 (*.f64 (cbrt.f64 1/3) (/.f64 (*.f64 y y) z)) -1/2 (fma.f64 (/.f64 (*.f64 (cbrt.f64 1/3) (pow.f64 y 4)) (pow.f64 z 3)) 1/8 (*.f64 (neg.f64 z) (cbrt.f64 1/3))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z)) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 4) (pow.f64 z 3)))) (*.f64 -1/16 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 6) (pow.f64 z 5)))))))","(fma.f64 (*.f64 (cbrt.f64 1/3) (/.f64 (*.f64 y y) z)) -1/2 (fma.f64 (neg.f64 (cbrt.f64 1/3)) z (fma.f64 1/8 (/.f64 (*.f64 (cbrt.f64 1/3) (pow.f64 y 4)) (pow.f64 z 3)) (/.f64 (*.f64 -1/16 (*.f64 (cbrt.f64 1/3) (pow.f64 y 6))) (pow.f64 z 5)))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z)","(*.f64 (cbrt.f64 1/3) z)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z))","(fma.f64 1/2 (*.f64 (cbrt.f64 1/3) (/.f64 (*.f64 y y) z)) (*.f64 (cbrt.f64 1/3) z))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z) (*.f64 -1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 4) (pow.f64 z 3))))))","(fma.f64 1/2 (*.f64 (cbrt.f64 1/3) (/.f64 (*.f64 y y) z)) (fma.f64 (cbrt.f64 1/3) z (/.f64 (*.f64 -1/8 (*.f64 (cbrt.f64 1/3) (pow.f64 y 4))) (pow.f64 z 3))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) z) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 4) (pow.f64 z 3)))) (*.f64 1/16 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 y 6) (pow.f64 z 5)))))))","(fma.f64 (*.f64 1/2 (cbrt.f64 1/3)) (/.f64 (*.f64 y y) z) (fma.f64 z (cbrt.f64 1/3) (fma.f64 -1/8 (/.f64 (*.f64 (cbrt.f64 1/3) (pow.f64 y 4)) (pow.f64 z 3)) (/.f64 (*.f64 1/16 (*.f64 (cbrt.f64 1/3) (pow.f64 y 6))) (pow.f64 z 5)))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y)","(*.f64 (cbrt.f64 1/3) y)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 2) y))) (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y))","(fma.f64 1/2 (*.f64 (cbrt.f64 1/3) (/.f64 (*.f64 z z) y)) (*.f64 (cbrt.f64 1/3) y))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 2) y))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y) (*.f64 -1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 4) (pow.f64 y 3))))))","(fma.f64 1/2 (*.f64 (cbrt.f64 1/3) (/.f64 (*.f64 z z) y)) (fma.f64 (cbrt.f64 1/3) y (/.f64 (*.f64 (*.f64 -1/8 (cbrt.f64 1/3)) (pow.f64 z 4)) (pow.f64 y 3))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 2) y))) (+.f64 (*.f64 1/16 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 6) (pow.f64 y 5)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y) (*.f64 -1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 4) (pow.f64 y 3)))))))","(fma.f64 1/2 (*.f64 (cbrt.f64 1/3) (/.f64 (*.f64 z z) y)) (fma.f64 1/16 (/.f64 (*.f64 (cbrt.f64 1/3) (pow.f64 z 6)) (pow.f64 y 5)) (fma.f64 (cbrt.f64 1/3) y (/.f64 (*.f64 (*.f64 -1/8 (cbrt.f64 1/3)) (pow.f64 z 4)) (pow.f64 y 3)))))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y))","(*.f64 (neg.f64 y) (cbrt.f64 1/3))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 2) y))) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y)))","(fma.f64 -1/2 (*.f64 (cbrt.f64 1/3) (/.f64 (*.f64 z z) y)) (*.f64 (neg.f64 y) (cbrt.f64 1/3)))","(+.f64 (*.f64 1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 4) (pow.f64 y 3)))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 2) y))) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y))))","(fma.f64 (/.f64 (*.f64 (cbrt.f64 1/3) (pow.f64 z 4)) (pow.f64 y 3)) 1/8 (fma.f64 -1/2 (*.f64 (cbrt.f64 1/3) (/.f64 (*.f64 z z) y)) (*.f64 (neg.f64 y) (cbrt.f64 1/3))))","(+.f64 (*.f64 -1/16 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 6) (pow.f64 y 5)))) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 4) (pow.f64 y 3)))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) (/.f64 (pow.f64 z 2) y))) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 1/3) 2)) 1/3) y)))))","(fma.f64 (/.f64 (*.f64 (cbrt.f64 1/3) (pow.f64 z 6)) (pow.f64 y 5)) -1/16 (fma.f64 (/.f64 (*.f64 (cbrt.f64 1/3) (pow.f64 z 4)) (pow.f64 y 3)) 1/8 (fma.f64 -1/2 (*.f64 (cbrt.f64 1/3) (/.f64 (*.f64 z z) y)) (*.f64 (neg.f64 y) (cbrt.f64 1/3)))))"]],"time":169.35009765625,"type":"simplify"},{"compiler":[[5008,3968]],"time":67.1201171875,"type":"eval"},{"alts":[["(/.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (hypot.f64 z y)) (cbrt.f64 3))","fresh",18.015620513457925],["(*.f64 (hypot.f64 y x) (sqrt.f64 1/3))","fresh",21.353766147684166],["(sqrt.f64 (/.f64 (+.f64 (fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) x) (*.f64 y y)) (*.f64 z z)) 3))","fresh",39.98040921081924],["(*.f64 (/.f64 (hypot.f64 z y) (cbrt.f64 3)) (cbrt.f64 (sqrt.f64 1/3)))","fresh",18.039058013457925],["(*.f64 (hypot.f64 z y) (sqrt.f64 1/3))","done",18.097651763714225],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))","done",39.95306546081924]],"compiler":[[13,11],[9,7],[22,14],[13,11],[9,7],[17,11]],"count":[[227,6]],"kept":[{"done":[2,2],"fresh":[4,2],"new":[220,2],"picked":[1,0]}],"min-error":[0.0546875],"time":44.908935546875,"type":"prune"},{"accuracy":[6.065891373468097],"baseline":[18.015620513457925],"branch":[["x",6.065891373468097,5],["y",13.339943198447418,4],["z",7.4880150044168134,3],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))",11.809913603345272,2],["(/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3)",11.809913603345272,2],["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z))",11.809913603345272,2],["(+.f64 (*.f64 x x) (*.f64 y y))",8.17692328079423,4],["(*.f64 x x)",7.236980369040668,2],["(*.f64 x x)",7.236980369040668,2],["(*.f64 y y)",14.575106013095908,6],["(*.f64 y y)",14.575106013095908,6],["(*.f64 z z)",6.942757315152358,4],["(*.f64 z z)",6.942757315152358,4]],"compiler":[[4,3],[4,3],[4,3],[17,11],[16,10],[14,8],[10,6],[6,4],[6,4],[6,4],[6,4],[6,4],[6,4],[193,125]],"count":[[15,5]],"inputs":[["(/.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (hypot.f64 z y)) (cbrt.f64 3))","(*.f64 (/.f64 (hypot.f64 z y) (cbrt.f64 3)) (cbrt.f64 (sqrt.f64 1/3)))","(*.f64 (*.f64 (*.f64 (hypot.f64 z y) (pow.f64 1/3 1/8)) (pow.f64 1/3 1/8)) (sqrt.f64 (sqrt.f64 1/3)))","(*.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 1/3)))) (cbrt.f64 (sqrt.f64 1/3)))","(*.f64 (*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (pow.f64 1/3 1/8)) (pow.f64 1/3 1/8))","(*.f64 (*.f64 (sqrt.f64 (hypot.f64 z y)) (sqrt.f64 (sqrt.f64 1/3))) (*.f64 (sqrt.f64 (hypot.f64 z y)) (sqrt.f64 (sqrt.f64 1/3))))","(*.f64 (*.f64 (hypot.f64 z y) (cbrt.f64 (sqrt.f64 1/3))) (cbrt.f64 1/3))","(*.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 1/3)))","(pow.f64 (cbrt.f64 (*.f64 (hypot.f64 z y) (sqrt.f64 1/3))) 3)","(*.f64 (hypot.f64 y x) (sqrt.f64 1/3))","(sqrt.f64 (/.f64 (+.f64 (fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) x) (*.f64 y y)) (*.f64 z z)) 3))","(sqrt.f64 (/.f64 (/.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) (sqrt.f64 1/3)) (cbrt.f64 (sqrt.f64 3))) (cbrt.f64 3)))","(*.f64 (hypot.f64 z y) (sqrt.f64 1/3))","(sqrt.f64 (*.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/3))","(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))"]],"link":["."],"name":["Data.Array.Repa.Algorithms.Pixel:doubleRmsOfRGB8 from repa-algorithms-3.4.0.1"],"oracle":[54.865759365957956],"outputs":[["(*.f64 (hypot.f64 y x) (sqrt.f64 1/3))","(/.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (hypot.f64 z y)) (cbrt.f64 3))","(*.f64 (hypot.f64 y x) (sqrt.f64 1/3))","(/.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (hypot.f64 z y)) (cbrt.f64 3))","(*.f64 (hypot.f64 y x) (sqrt.f64 1/3))"]],"time":193.3349609375,"times":[["x",24.403076171875],["y",20.17919921875],["z",19.677001953125],["(sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3))",7.921875],["(/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) 3)",7.7587890625],["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z))",7.741943359375],["(+.f64 (*.f64 x x) (*.f64 y y))",15.044921875],["(*.f64 x x)",9.75390625],["(*.f64 x x)",9.8759765625],["(*.f64 y y)",21.589111328125],["(*.f64 y y)",19.5419921875],["(*.f64 z z)",12.574951171875],["(*.f64 z z)",12.820068359375]],"type":"regimes"},{"bstep":[[1.5186199444692294e+157,3.17582824437914e+162,11.26708984375],[1.3169715640039038e+137,3.421881824651144e+142,11.266845703125],[3.946476424890345e+88,2.4622359849530085e+92,11.327880859375],[-7.232319708152293e+85,-9.107903525052924e+73,11.623046875]],"compiler":[[19,13],[4,3]],"method":["binary-search","binary-search","binary-search","binary-search"],"time":45.657958984375,"type":"bsearch"},{"compiler":[[57,40]],"inputs":[["(if (<=.f64 x -72323197081522933968409955669291236133169705607004319650599031993364122068621054705664) (*.f64 (hypot.f64 y x) (sqrt.f64 1/3)) (if (<=.f64 x 39464764248903449415569028559354890267904590012415208374506598872137099747766662290472960) (/.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (hypot.f64 z y)) (cbrt.f64 3)) (if (<=.f64 x 131697156400390376529349536060731554152206945746258684042278571778923167216250682640837489322431508665589058876851216530628189609149857792) (*.f64 (hypot.f64 y x) (sqrt.f64 1/3)) (if (<=.f64 x 15186199444692294036148528246150510576484686927558091174116464251931801500991443997909168424914964561617349677821105593090101898532689201056360610610909544448) (/.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (hypot.f64 z y)) (cbrt.f64 3)) (*.f64 (hypot.f64 y x) (sqrt.f64 1/3))))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 x -72323197081522933968409955669291236133169705607004319650599031993364122068621054705664) (*.f64 (hypot.f64 y x) (sqrt.f64 1/3)) (if (<=.f64 x 39464764248903449415569028559354890267904590012415208374506598872137099747766662290472960) (/.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (hypot.f64 z y)) (cbrt.f64 3)) (if (<=.f64 x 131697156400390376529349536060731554152206945746258684042278571778923167216250682640837489322431508665589058876851216530628189609149857792) (*.f64 (hypot.f64 y x) (sqrt.f64 1/3)) (if (<=.f64 x 15186199444692294036148528246150510576484686927558091174116464251931801500991443997909168424914964561617349677821105593090101898532689201056360610610909544448) (/.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (hypot.f64 z y)) (cbrt.f64 3)) (*.f64 (hypot.f64 y x) (sqrt.f64 1/3))))))","(if (<=.f64 x -72323197081522933968409955669291236133169705607004319650599031993364122068621054705664) (*.f64 (hypot.f64 y x) (sqrt.f64 1/3)) (if (<=.f64 x 39464764248903449415569028559354890267904590012415208374506598872137099747766662290472960) (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) (if (<=.f64 x 131697156400390376529349536060731554152206945746258684042278571778923167216250682640837489322431508665589058876851216530628189609149857792) (*.f64 (hypot.f64 y x) (sqrt.f64 1/3)) (if (<=.f64 x 15186199444692294036148528246150510576484686927558091174116464251931801500991443997909168424914964561617349677821105593090101898532689201056360610610909544448) (*.f64 (hypot.f64 z y) (sqrt.f64 1/3)) (*.f64 (hypot.f64 y x) (sqrt.f64 1/3))))))"]],"stop":[["fuel",1]],"time":22.326171875,"type":"simplify"},{"time":0.019775390625,"type":"soundness"},{"compiler":[[57,40]],"remove-preprocessing":[[]],"time":20.63720703125,"type":"end"}]
[{"compiler":[[13,11]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.595947265625,"type":"analyze"},{"outcomes":[["body",1024,"valid",43.07421875,448],["body",512,"valid",136.701171875,2067],["body",256,"valid",205.04638671875,5741]],"time":392.60302734375,"type":"sample"},{"compiler":[[12,10]],"inputs":[["0"],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))","(+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))"]],"symmetry":[[]],"time":54.028076171875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))","(+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))"]],"time":20.20703125,"type":"simplify"},{"compiler":[[23,19]],"time":0.4189453125,"type":"eval"},{"alts":[["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))","next",14.767992358644088]],"compiler":[[12,10],[12,10]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[14.767992358644088],"time":0.864990234375,"type":"prune"},{"compiler":[[30,23]],"locations":[["(/.f64 1 (+.f64 x 1))",0.00390625,true],["(/.f64 1 (-.f64 x 1))",0.01171875,true],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))",1.7653643076150247,true]],"time":7.3759765625,"type":"localize"},{"count":[[3,36]],"series":[["(/.f64 1 (+.f64 x 1))","x","-inf",0.181884765625],["(/.f64 1 (+.f64 x 1))","x","inf",0.196044921875],["(/.f64 1 (+.f64 x 1))","x","0",0.191162109375],["(/.f64 1 (-.f64 x 1))","x","-inf",0.197998046875],["(/.f64 1 (-.f64 x 1))","x","inf",0.218017578125],["(/.f64 1 (-.f64 x 1))","x","0",0.217041015625],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))","x","-inf",0.300048828125],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))","x","inf",0.446044921875],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))","x","0",0.416015625]],"time":2.489013671875,"type":"series"},{"count":[[3,163]],"inputs":[["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))","(/.f64 1 (-.f64 x 1))","(/.f64 1 (+.f64 x 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (-.f64 1 x)) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) (*.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 0) (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) (*.f64 0 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))) (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x -1) (*.f64 (+.f64 1 x) (+.f64 x -1))) (neg.f64 (/.f64 (+.f64 1 x) (*.f64 (+.f64 1 x) (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 x -1) (*.f64 (+.f64 1 x) (+.f64 x -1))) (/.f64 (+.f64 1 x) (*.f64 (+.f64 1 x) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (/.f64 1 (+.f64 x -1)) (/.f64 1 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 1 (+.f64 1 x)) 0) (/.f64 1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 1 (-.f64 -1 x)) (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (*.f64 (+.f64 1 x) (+.f64 x -1))) (/.f64 (+.f64 2 x) (*.f64 (+.f64 1 x) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (-.f64 1 x)) (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (/.f64 1 (+.f64 x -1)) (/.f64 1 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 1 (+.f64 x -1)) (/.f64 1 (-.f64 -1 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (/.f64 1 (-.f64 -1 x)) (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 (/.f64 1 (+.f64 x -1)) (/.f64 1 (-.f64 -1 x))))) (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) -2)) (+.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) -2)) (cbrt.f64 (/.f64 -1 (*.f64 (+.f64 1 x) (-.f64 1 x)))))) (-.f64 (cbrt.f64 (/.f64 1 (+.f64 1 x))) (cbrt.f64 (/.f64 1 (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (+.f64 2 x)) (/.f64 -1 (*.f64 (+.f64 1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))) (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 2)) (cbrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (*.f64 (+.f64 1 x) (-.f64 1 x))) (-.f64 x (+.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 x (+.f64 2 x))) (/.f64 1 (*.f64 (+.f64 1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x)) (/.f64 1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 1 (+.f64 x -1)) (/.f64 1 (-.f64 -1 x)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 2 x)) -1) (*.f64 (+.f64 1 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (-.f64 x (+.f64 2 x))) 1) (*.f64 (+.f64 1 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x)) 1) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (+.f64 2 x)) (cbrt.f64 (+.f64 1 x))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (+.f64 2 x)) (cbrt.f64 (*.f64 (+.f64 1 x) (+.f64 x -1)))) (pow.f64 (cbrt.f64 (*.f64 (+.f64 1 x) (+.f64 x -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (*.f64 (-.f64 1 x) (cbrt.f64 (/.f64 1 (+.f64 1 x))))) (*.f64 (-.f64 1 x) (cbrt.f64 (pow.f64 (+.f64 1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2))) (*.f64 (+.f64 x -1) (cbrt.f64 (/.f64 1 (+.f64 1 x))))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 1 x))) (-.f64 1 x)) (cbrt.f64 (pow.f64 (+.f64 1 x) 2))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 1 x))) (+.f64 x -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (*.f64 (+.f64 1 x) (cbrt.f64 (/.f64 1 (+.f64 x -1))))) (*.f64 (+.f64 1 x) (cbrt.f64 (pow.f64 (+.f64 x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 x -1) 2))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (cbrt.f64 (/.f64 1 (+.f64 x -1))))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (cbrt.f64 (pow.f64 (+.f64 x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 1 x))) (+.f64 x -1)) (cbrt.f64 (pow.f64 (+.f64 1 x) 2))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 1 x))) (-.f64 1 x)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 x (+.f64 2 x))) (*.f64 (+.f64 1 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2))) (*.f64 (-.f64 -1 x) (cbrt.f64 (/.f64 1 (+.f64 x -1))))) (*.f64 (-.f64 -1 x) (cbrt.f64 (pow.f64 (+.f64 x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 x -1) (*.f64 (+.f64 1 x) (+.f64 x -1))) (*.f64 (*.f64 (+.f64 1 x) (+.f64 x -1)) (+.f64 1 x))) (*.f64 (*.f64 (+.f64 1 x) (+.f64 x -1)) (*.f64 (+.f64 1 x) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (+.f64 2 x)) (*.f64 (+.f64 1 x) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 2 x)) (/.f64 1 (+.f64 x -1))) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 2 x)) (/.f64 1 (-.f64 -1 x))) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 2 x)) (/.f64 1 (-.f64 1 x))) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 2)) (cbrt.f64 (-.f64 x (+.f64 2 x)))) (cbrt.f64 (*.f64 (+.f64 1 x) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x (+.f64 2 x))) (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 2))) (cbrt.f64 (*.f64 (+.f64 1 x) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (-.f64 x (+.f64 2 x))) (+.f64 1 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (+.f64 2 x)) (-.f64 -1 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x)) (cbrt.f64 (+.f64 x -1))) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x)) (+.f64 (pow.f64 x 3) -1)) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x)) (cbrt.f64 (pow.f64 (+.f64 x -1) 2))) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x)) -1) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (+.f64 2 x)) (+.f64 x -1)) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (+.f64 2 x)) (*.f64 (+.f64 1 x) (cbrt.f64 (+.f64 x -1)))) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x))) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 1 (+.f64 x -1)) (/.f64 1 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 (/.f64 1 (+.f64 x -1)) (/.f64 1 (-.f64 -1 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (+.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 1 x) -2)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) -2))) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (-.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 x -1) -2)) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (+.f64 x -1)) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) -2)) (cbrt.f64 (/.f64 1 (+.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 x))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) -2))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (-.f64 1 x)) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (-.f64 -1 x)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 1 x)) 1 (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 x -1)) (*.f64 (/.f64 1 (+.f64 x -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 x -1)) 0) (/.f64 1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 x -1)) (*.f64 0 (/.f64 1 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 1 (+.f64 x -1))) (/.f64 1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 x -1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) (cbrt.f64 (pow.f64 (+.f64 x -1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) -2)) (cbrt.f64 (/.f64 1 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (-.f64 1 x))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) -2))) (cbrt.f64 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (+.f64 x -1)) (+.f64 x -1)) (neg.f64 (pow.f64 (+.f64 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (-.f64 1 x))) -1) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) -2)) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) -2)) -1) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) -2)))) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) -2))) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1 (-.f64 1 x))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 (pow.f64 x 3) -1)) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (-.f64 1 x)) (-.f64 1 x)) (pow.f64 (+.f64 x -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x -1) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x -1) 3) (neg.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x -1)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x -1) -3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 1 x)) (*.f64 (/.f64 1 (+.f64 1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 1 x)) 0) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 1 x)) (*.f64 0 (/.f64 1 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 1 (+.f64 1 x))) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 1 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) -2)) (cbrt.f64 (/.f64 1 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 x))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) -2))) (cbrt.f64 (/.f64 1 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1 (+.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) -2)) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) -2)) -1) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 x))) -1) (cbrt.f64 (pow.f64 (+.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) -2))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) -2)))) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 1 (+.f64 1 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 1 x))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 1 x))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 x))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (-.f64 -1 x)) (-.f64 -1 x)) (pow.f64 (+.f64 1 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (-.f64 -1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (+.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 x) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (+.f64 1 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (+.f64 1 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1 x)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 x) 3) (neg.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 1 x) -3))))))"]],"rules":[["egg-rr",39],["egg-rr",39],["egg-rr",85]],"time":34.787109375,"type":"rewrite"},{"count":[[199,205]],"inputs":[["2","(+.f64 (*.f64 2 (pow.f64 x 2)) 2)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 2 (*.f64 2 (pow.f64 x 4))))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 (pow.f64 x 6)) (+.f64 2 (*.f64 2 (pow.f64 x 4)))))","(/.f64 -2 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(/.f64 -2 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","-1","(-.f64 (*.f64 -1 x) 1)","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x)) 1)","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))) 1)","(/.f64 1 x)","(+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x))","(+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","(/.f64 1 x)","(+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x))","(+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","1","(+.f64 1 (*.f64 -1 x))","(+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2)))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))"]],"method":["egg-herbie"],"outputs":[["2","(+.f64 (*.f64 2 (pow.f64 x 2)) 2)","(fma.f64 2 (*.f64 x x) 2)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 2 (*.f64 2 (pow.f64 x 4))))","(fma.f64 2 (*.f64 x x) (fma.f64 2 (pow.f64 x 4) 2))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 (pow.f64 x 6)) (+.f64 2 (*.f64 2 (pow.f64 x 4)))))","(+.f64 (*.f64 2 (+.f64 (*.f64 x x) (pow.f64 x 6))) (fma.f64 2 (pow.f64 x 4) 2))","(/.f64 -2 (pow.f64 x 2))","(/.f64 -2 (*.f64 x x))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(*.f64 -2 (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (*.f64 2 (+.f64 (pow.f64 x -6) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(-.f64 (*.f64 -2 (pow.f64 x -8)) (*.f64 2 (+.f64 (pow.f64 x -6) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))))","(/.f64 -2 (pow.f64 x 2))","(/.f64 -2 (*.f64 x x))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(*.f64 -2 (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (*.f64 2 (+.f64 (pow.f64 x -6) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(-.f64 (*.f64 -2 (pow.f64 x -8)) (*.f64 2 (+.f64 (pow.f64 x -6) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))))","-1","(-.f64 (*.f64 -1 x) 1)","(neg.f64 (+.f64 1 x))","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x)) 1)","(+.f64 (*.f64 x (-.f64 -1 x)) -1)","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))) 1)","(-.f64 (neg.f64 (pow.f64 x 3)) (+.f64 1 (fma.f64 x x x)))","(/.f64 1 x)","(+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x))","(+.f64 (pow.f64 x -2) (/.f64 1 x))","(+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))","(+.f64 (pow.f64 x -2) (+.f64 (pow.f64 x -3) (/.f64 1 x)))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","(+.f64 (pow.f64 x -4) (+.f64 (pow.f64 x -2) (+.f64 (pow.f64 x -3) (/.f64 1 x))))","(/.f64 1 x)","(+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x))","(+.f64 (pow.f64 x -2) (/.f64 1 x))","(+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))","(+.f64 (pow.f64 x -2) (+.f64 (pow.f64 x -3) (/.f64 1 x)))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","(+.f64 (pow.f64 x -4) (+.f64 (pow.f64 x -2) (+.f64 (pow.f64 x -3) (/.f64 1 x))))","1","(+.f64 1 (*.f64 -1 x))","(-.f64 1 x)","(+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2)))","(+.f64 1 (*.f64 x (+.f64 x -1)))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))))","(-.f64 (+.f64 1 (*.f64 x (+.f64 x -1))) (pow.f64 x 3))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 x) (pow.f64 x -2))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (pow.f64 x -3) (/.f64 1 x)) (pow.f64 x -2))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (pow.f64 x -3) (/.f64 1 x)) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 x) (pow.f64 x -2))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (pow.f64 x -3) (/.f64 1 x)) (pow.f64 x -2))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (pow.f64 x -3) (/.f64 1 x)) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))"]],"time":116.77587890625,"type":"simplify"},{"compiler":[[3491,2853]],"time":47.01416015625,"type":"eval"},{"alts":[["(*.f64 (/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x)) (/.f64 1 (+.f64 x -1)))","next",13.983930043656114],["(/.f64 (/.f64 (-.f64 x (+.f64 2 x)) (cbrt.f64 (+.f64 1 x))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (+.f64 x -1)))","fresh",13.989457533887672],["(*.f64 -2 (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","fresh",32.39417958550778]],"compiler":[[16,12],[22,17],[10,8],[16,12],[22,17],[10,8]],"count":[[206,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[205,3],"picked":[1,0]}],"min-error":[0],"time":58.68798828125,"type":"prune"},{"compiler":[[48,34]],"locations":[["(/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x))",0.00390625,true],["(/.f64 1 (+.f64 x -1))",0.01171875,true],["(*.f64 (/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x)) (/.f64 1 (+.f64 x -1)))",0.01953125,true],["(-.f64 x (+.f64 2 x))",1.2148437500000002,true]],"time":11.391845703125,"type":"localize"},{"count":[[4,48]],"series":[["(/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x))","x","-inf",0.18994140625],["(/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x))","x","inf",0.244140625],["(/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x))","x","0",0.218994140625],["(/.f64 1 (+.f64 x -1))","x","-inf",0.171142578125],["(/.f64 1 (+.f64 x -1))","x","inf",0.1591796875],["(/.f64 1 (+.f64 x -1))","x","0",0.14892578125],["(*.f64 (/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x)) (/.f64 1 (+.f64 x -1)))","x","-inf",0.251953125],["(*.f64 (/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x)) (/.f64 1 (+.f64 x -1)))","x","inf",0.322998046875],["(*.f64 (/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x)) (/.f64 1 (+.f64 x -1)))","x","0",0.239990234375],["(-.f64 x (+.f64 2 x))","x","-inf",0.156005859375],["(-.f64 x (+.f64 2 x))","x","inf",0.14501953125],["(-.f64 x (+.f64 2 x))","x","0",0.174072265625]],"time":2.572021484375,"type":"series"},{"count":[[4,275]],"inputs":[["(-.f64 x (+.f64 2 x))","(*.f64 (/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x)) (/.f64 1 (+.f64 x -1)))","(/.f64 1 (+.f64 x -1))","(/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x . -2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (-.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 -2 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x -2) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (+.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 -2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -2 (+.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -2 (*.f64 -2 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -2 0) -2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -2 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -2 (*.f64 0 -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 -2) -2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 2) -2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (*.f64 (-.f64 2 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -2 (*.f64 0 -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -2) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (+.f64 2 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x -2) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (-.f64 2 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 x) (-.f64 2 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -2 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 -2 x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 x 3) (fma.f64 x x (*.f64 (+.f64 2 x) (+.f64 (+.f64 x x) 2)))) (/.f64 (pow.f64 (+.f64 2 x) 3) (fma.f64 x x (*.f64 (+.f64 2 x) (+.f64 (+.f64 x x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 x -2) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -2) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 4) (cbrt.f64 -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (neg.f64 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -2 x) 3)) (/.f64 1 (fma.f64 x x (*.f64 (+.f64 2 x) (+.f64 (+.f64 x x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (cbrt.f64 (pow.f64 (+.f64 2 x) 2)) (cbrt.f64 (*.f64 x (+.f64 2 x))))) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -2 x) 3)) (fma.f64 x x (*.f64 (+.f64 2 x) (+.f64 (+.f64 x x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -2 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -2 -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -2 x) 3)) (cbrt.f64 (fma.f64 x x (*.f64 (+.f64 2 x) (+.f64 (+.f64 x x) 2))))) (pow.f64 (cbrt.f64 (fma.f64 x x (*.f64 (+.f64 2 x) (+.f64 (+.f64 x x) 2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -2 x) 3)) 1) (fma.f64 x x (*.f64 (+.f64 2 x) (+.f64 (+.f64 x x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 8) (+.f64 0 (+.f64 4 (*.f64 0 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 x -2) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (+.f64 x -2) 2) (*.f64 x (-.f64 x (-.f64 2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 2 x) 3) (pow.f64 x 3)) (neg.f64 (fma.f64 x x (*.f64 (+.f64 2 x) (+.f64 (+.f64 x x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 -2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 -2) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 8) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -2 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 -2) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 2)))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 8))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (-.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (-.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x -2)) (cbrt.f64 (pow.f64 (+.f64 x -2) 2)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x -2) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 -2 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 -2 x)) (cbrt.f64 (pow.f64 (+.f64 2 x) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 2 x)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 2 x) 2))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 2 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (-.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (-.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (-.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 -2)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 x -1)) (/.f64 x (+.f64 1 x))) (*.f64 (/.f64 1 (+.f64 x -1)) (/.f64 (+.f64 2 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) (*.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 0) (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) (*.f64 0 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))) (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 x (+.f64 1 x)) (+.f64 x -1)) (*.f64 (/.f64 (+.f64 2 x) (-.f64 -1 x)) (/.f64 1 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 x (+.f64 1 x)) (+.f64 x -1)) (neg.f64 (/.f64 (/.f64 (+.f64 2 x) (+.f64 1 x)) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 (+.f64 x -2) (+.f64 1 x)) (+.f64 x -1)) (/.f64 (/.f64 x (+.f64 1 x)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 x (+.f64 1 x)) (+.f64 x -1)) (/.f64 (/.f64 (+.f64 2 x) (+.f64 1 x)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 2 x) (*.f64 (-.f64 1 x) (+.f64 1 x))) (/.f64 x (*.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 (-.f64 1 x) (+.f64 1 x))) (/.f64 -2 (*.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 x -2) (*.f64 (-.f64 1 x) (-.f64 -1 x))) (/.f64 x (*.f64 (-.f64 1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (*.f64 (-.f64 1 x) (-.f64 -1 x))) (/.f64 (+.f64 2 x) (*.f64 (-.f64 1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 (-.f64 1 x) (-.f64 -1 x))) (/.f64 2 (*.f64 (-.f64 1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) -2)) (/.f64 2 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 2 (-.f64 -1 x))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 2)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (cbrt.f64 (-.f64 1 x))) (*.f64 (/.f64 1 (+.f64 1 x)) (cbrt.f64 (pow.f64 (+.f64 x -1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) (*.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (pow.f64 (+.f64 x -1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))) (cbrt.f64 (pow.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 2)) (cbrt.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (+.f64 x -1))) (cbrt.f64 (pow.f64 (+.f64 x -1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (cbrt.f64 (-.f64 -1 x))) (/.f64 (/.f64 1 (+.f64 x -1)) (cbrt.f64 (pow.f64 (+.f64 1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (-.f64 -1 x)) (/.f64 1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x -1)) (/.f64 2 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (-.f64 1 x)) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 (+.f64 x -1)) (cbrt.f64 (/.f64 2 (-.f64 -1 x)))) (cbrt.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (+.f64 x -1)) (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (/.f64 1 (*.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 2 (-.f64 1 x)) (cbrt.f64 (+.f64 1 x))) (pow.f64 (cbrt.f64 (+.f64 1 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (+.f64 1 x)) (/.f64 -1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (/.f64 (/.f64 1 (+.f64 x -1)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -2 (cbrt.f64 (*.f64 (-.f64 1 x) (-.f64 -1 x)))) (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 x) (-.f64 -1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (+.f64 x -1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 2 (-.f64 1 x)) (cbrt.f64 (+.f64 1 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 1 x))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 1 x))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (-.f64 -1 x)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (-.f64 1 x)) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (+.f64 1 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (+.f64 x -1)) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (+.f64 x -1))) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (-.f64 1 x)) (cbrt.f64 (+.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (+.f64 x -1)) (cbrt.f64 (+.f64 1 x))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (+.f64 x -1)) 1) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (cbrt.f64 (+.f64 x -1)))) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (cbrt.f64 (-.f64 -1 x))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (+.f64 x -1))) 1) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (pow.f64 (+.f64 x -1) -2))) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (-.f64 1 x)) (cbrt.f64 (pow.f64 (+.f64 1 x) 2))) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (-.f64 1 x)) -1) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (+.f64 1 x)) (cbrt.f64 (+.f64 x -1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (+.f64 (pow.f64 x 3) -1)) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) -1) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 2 (-.f64 1 x)) (cbrt.f64 (+.f64 1 x))) (cbrt.f64 (+.f64 1 x))) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 2 (-.f64 1 x)) (cbrt.f64 (+.f64 1 x))) 1) (cbrt.f64 (pow.f64 (+.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (/.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (/.f64 (*.f64 (-.f64 1 x) (-.f64 -1 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (+.f64 1 x)) (+.f64 x -1)) (*.f64 (+.f64 x -1) (/.f64 (+.f64 2 x) (+.f64 1 x)))) (pow.f64 (+.f64 x -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 2 (-.f64 1 x)) (cbrt.f64 (+.f64 1 x)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (+.f64 x -1)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -2 (*.f64 (-.f64 1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (-.f64 1 x)) (+.f64 1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 2 (+.f64 1 x)) (/.f64 1 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 (+.f64 x -1)) (/.f64 2 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 2 (+.f64 x -1)) (/.f64 1 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 2 (/.f64 (/.f64 1 (+.f64 x -1)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (+.f64 x -1)) (/.f64 2 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 2 (-.f64 -1 x)) (/.f64 -1 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 2 (+.f64 1 x)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -2 (*.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 2 (+.f64 x -1)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 2 (*.f64 (-.f64 1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 2 (-.f64 1 x)) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (/.f64 (+.f64 2 x) (+.f64 1 x)) (+.f64 x -1)) (/.f64 (/.f64 x (+.f64 1 x)) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 x -1)) (*.f64 (/.f64 1 (+.f64 x -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 x -1)) 0) (/.f64 1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 x -1)) (*.f64 0 (/.f64 1 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 1 (+.f64 x -1))) (/.f64 1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 x -1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 x -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) (cbrt.f64 (pow.f64 (+.f64 x -1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) -2)) (cbrt.f64 (/.f64 1 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (+.f64 x -1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) 1) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) -2)) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1 (+.f64 x -1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 (pow.f64 x 3) -1)) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (-.f64 1 x)) (-.f64 1 x)) (pow.f64 (+.f64 x -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x -1) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x -1) 3) (neg.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x -1)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 (+.f64 x -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (+.f64 x -1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x -1) -3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (+.f64 1 x)) (/.f64 (+.f64 2 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 2 x) (-.f64 -1 x)) (/.f64 x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 2 (-.f64 -1 x)) (*.f64 (/.f64 2 (-.f64 -1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 2 (-.f64 -1 x)) 0) (/.f64 2 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 2 (+.f64 1 x)) 0) (/.f64 2 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 1 x)) (+.f64 x -2)) (*.f64 (/.f64 1 (+.f64 1 x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 1 x)) (-.f64 -2 x)) (*.f64 (/.f64 1 (+.f64 1 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 1 x)) x) (*.f64 (/.f64 1 (+.f64 1 x)) (-.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x (+.f64 1 x)) 1) (*.f64 (/.f64 (+.f64 2 x) (-.f64 -1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 2 (-.f64 -1 x)) (*.f64 0 (/.f64 2 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 2 (-.f64 -1 x))) (/.f64 2 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 2 (+.f64 1 x))) (/.f64 2 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x -2) (+.f64 1 x)) (*.f64 (neg.f64 x) (/.f64 1 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x -2) (+.f64 1 x)) (*.f64 -1 (/.f64 x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x -2) (+.f64 1 x)) (*.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 x))) (/.f64 x (cbrt.f64 (pow.f64 (+.f64 1 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x -2) (+.f64 1 x)) (*.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (cbrt.f64 (*.f64 x x)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x -2) (+.f64 1 x)) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x (+.f64 1 x)))) (cbrt.f64 (/.f64 (*.f64 x x) (pow.f64 (+.f64 1 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x -2) (+.f64 1 x)) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x (+.f64 1 x)))) (cbrt.f64 (pow.f64 (/.f64 x (+.f64 1 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x -2) (+.f64 1 x)) (neg.f64 (/.f64 x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (+.f64 1 x)) (/.f64 (+.f64 2 x) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 x -2) (+.f64 1 x)) (/.f64 x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 2 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (fma.f64 x x x) (pow.f64 (+.f64 1 x) 2)) (/.f64 (*.f64 (+.f64 1 x) (+.f64 2 x)) (pow.f64 (+.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 2 x) (-.f64 -1 x)) (/.f64 x (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 x)) (/.f64 2 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (+.f64 1 x)) (/.f64 2 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -2) (/.f64 (cbrt.f64 4) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 2 (-.f64 -1 x))) (cbrt.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 2)) (cbrt.f64 (/.f64 2 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 2 (-.f64 -1 x))) (cbrt.f64 (/.f64 4 (pow.f64 (+.f64 1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 1 x))) (/.f64 -2 (cbrt.f64 (pow.f64 (+.f64 1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (-.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 2 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (+.f64 1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 2 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (cbrt.f64 (-.f64 -1 x))) (pow.f64 (cbrt.f64 (+.f64 1 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (fma.f64 x x x) (*.f64 (-.f64 -1 x) (+.f64 2 x))) (/.f64 1 (pow.f64 (+.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1 x)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (cbrt.f64 (-.f64 -1 x))) (cbrt.f64 (pow.f64 (+.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (fma.f64 x x x) (*.f64 (-.f64 -1 x) (+.f64 2 x))) (pow.f64 (+.f64 1 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (-.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (cbrt.f64 (+.f64 1 x))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -2 (cbrt.f64 (pow.f64 (+.f64 1 x) 2))) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -2 -1) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (+.f64 1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (fma.f64 x x x) (*.f64 (-.f64 -1 x) (+.f64 2 x))) (+.f64 1 x)) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (cbrt.f64 (-.f64 -1 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 1 x))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 1 x))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (cbrt.f64 (-.f64 -1 x))) 1) (cbrt.f64 (pow.f64 (+.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 x -2) (cbrt.f64 (pow.f64 (+.f64 1 x) 2))) (*.f64 (+.f64 1 x) (/.f64 x (cbrt.f64 (+.f64 1 x))))) (*.f64 (+.f64 1 x) (cbrt.f64 (pow.f64 (+.f64 1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 x -2) (-.f64 -1 x)) (*.f64 (+.f64 1 x) (neg.f64 x))) (*.f64 (+.f64 1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 x -2) (+.f64 1 x)) (fma.f64 x x x)) (pow.f64 (+.f64 1 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (cbrt.f64 (pow.f64 (+.f64 1 x) 2))) (*.f64 (+.f64 1 x) (/.f64 (+.f64 2 x) (cbrt.f64 (+.f64 1 x))))) (*.f64 (+.f64 1 x) (cbrt.f64 (pow.f64 (+.f64 1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (-.f64 -1 x)) (*.f64 (+.f64 1 x) (-.f64 -2 x))) (*.f64 (+.f64 1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 1 x) 2))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (/.f64 (+.f64 2 x) (cbrt.f64 (+.f64 1 x))))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (cbrt.f64 (pow.f64 (+.f64 1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 1 x))) (-.f64 -1 x)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (-.f64 -2 x))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 1 x))) (+.f64 1 x)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (+.f64 2 x))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) (cbrt.f64 (pow.f64 (+.f64 1 x) 2))) (*.f64 (-.f64 -1 x) (/.f64 (+.f64 2 x) (cbrt.f64 (+.f64 1 x))))) (*.f64 (-.f64 -1 x) (cbrt.f64 (pow.f64 (+.f64 1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) (-.f64 -1 x)) (*.f64 (-.f64 -1 x) (-.f64 -2 x))) (pow.f64 (+.f64 1 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) (+.f64 1 x)) (*.f64 (-.f64 -1 x) (+.f64 2 x))) (*.f64 (-.f64 -1 x) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 2 (cbrt.f64 (-.f64 -1 x)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (fma.f64 x x x) (*.f64 (-.f64 -1 x) (+.f64 2 x)))) (neg.f64 (pow.f64 (+.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -2 (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -2 (+.f64 1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (-.f64 -1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 2 (-.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (-.f64 -1 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (-.f64 -1 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 2 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 x (+.f64 1 x)) (/.f64 (+.f64 x -2) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 x (+.f64 1 x)) (/.f64 (+.f64 2 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 (+.f64 1 x)) (/.f64 (+.f64 2 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (+.f64 1 x))) (/.f64 x (cbrt.f64 (pow.f64 (+.f64 1 x) 2))) (/.f64 (+.f64 2 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (/.f64 (cbrt.f64 (*.f64 x x)) (+.f64 1 x)) (/.f64 (+.f64 2 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x (+.f64 1 x))) (cbrt.f64 (/.f64 (*.f64 x x) (pow.f64 (+.f64 1 x) 2))) (/.f64 (+.f64 2 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x (+.f64 1 x))) (cbrt.f64 (pow.f64 (/.f64 x (+.f64 1 x)) 2)) (/.f64 (+.f64 2 x) (-.f64 -1 x)))))))"]],"rules":[["egg-rr",81],["egg-rr",36],["egg-rr",87],["egg-rr",71]],"time":44.283935546875,"type":"rewrite"},{"count":[[323,317]],"inputs":[["-2","-2","-2","-2","-2","-2","-2","-2","-2","-2","-2","-2","2","(+.f64 (*.f64 2 (pow.f64 x 2)) 2)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 2 (*.f64 2 (pow.f64 x 4))))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 (pow.f64 x 6)) (+.f64 2 (*.f64 2 (pow.f64 x 4)))))","(/.f64 -2 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(/.f64 -2 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","-1","(-.f64 (*.f64 -1 x) 1)","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x)) 1)","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))) 1)","(/.f64 1 x)","(+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x))","(+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","(/.f64 1 x)","(+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x))","(+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","-2","(-.f64 (*.f64 2 x) 2)","(-.f64 (+.f64 (*.f64 2 x) (*.f64 -2 (pow.f64 x 2))) 2)","(-.f64 (+.f64 (*.f64 2 (pow.f64 x 3)) (+.f64 (*.f64 2 x) (*.f64 -2 (pow.f64 x 2)))) 2)","(/.f64 -2 x)","(-.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 x)))","(-.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))","(/.f64 -2 x)","(-.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 x)))","(-.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))"]],"method":["egg-herbie"],"outputs":[["-2","-2","-2","-2","-2","-2","-2","-2","-2","-2","-2","-2","2","(+.f64 (*.f64 2 (pow.f64 x 2)) 2)","(fma.f64 2 (*.f64 x x) 2)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 2 (*.f64 2 (pow.f64 x 4))))","(fma.f64 (*.f64 x x) 2 (fma.f64 2 (pow.f64 x 4) 2))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 (pow.f64 x 6)) (+.f64 2 (*.f64 2 (pow.f64 x 4)))))","(+.f64 (*.f64 2 (+.f64 (*.f64 x x) (pow.f64 x 6))) (fma.f64 2 (pow.f64 x 4) 2))","(/.f64 -2 (pow.f64 x 2))","(/.f64 (/.f64 -2 x) x)","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(*.f64 -2 (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (*.f64 2 (+.f64 (+.f64 (pow.f64 x -4) (pow.f64 x -2)) (pow.f64 x -6))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(-.f64 (*.f64 -2 (pow.f64 x -8)) (*.f64 2 (+.f64 (+.f64 (pow.f64 x -4) (pow.f64 x -2)) (pow.f64 x -6))))","(/.f64 -2 (pow.f64 x 2))","(/.f64 (/.f64 -2 x) x)","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(*.f64 -2 (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (*.f64 2 (+.f64 (+.f64 (pow.f64 x -4) (pow.f64 x -2)) (pow.f64 x -6))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(-.f64 (*.f64 -2 (pow.f64 x -8)) (*.f64 2 (+.f64 (+.f64 (pow.f64 x -4) (pow.f64 x -2)) (pow.f64 x -6))))","-1","(-.f64 (*.f64 -1 x) 1)","(neg.f64 (+.f64 1 x))","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x)) 1)","(neg.f64 (+.f64 1 (fma.f64 x x x)))","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))) 1)","(-.f64 (neg.f64 (pow.f64 x 3)) (+.f64 1 (fma.f64 x x x)))","(/.f64 1 x)","(+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x))","(+.f64 (pow.f64 x -2) (/.f64 1 x))","(+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))","(+.f64 (pow.f64 x -2) (+.f64 (pow.f64 x -3) (/.f64 1 x)))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","(+.f64 (pow.f64 x -4) (+.f64 (pow.f64 x -2) (+.f64 (pow.f64 x -3) (/.f64 1 x))))","(/.f64 1 x)","(+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x))","(+.f64 (pow.f64 x -2) (/.f64 1 x))","(+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))","(+.f64 (pow.f64 x -2) (+.f64 (pow.f64 x -3) (/.f64 1 x)))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","(+.f64 (pow.f64 x -4) (+.f64 (pow.f64 x -2) (+.f64 (pow.f64 x -3) (/.f64 1 x))))","-2","(-.f64 (*.f64 2 x) 2)","(fma.f64 2 x -2)","(-.f64 (+.f64 (*.f64 2 x) (*.f64 -2 (pow.f64 x 2))) 2)","(fma.f64 2 x (fma.f64 (*.f64 x x) -2 -2))","(-.f64 (+.f64 (*.f64 2 (pow.f64 x 3)) (+.f64 (*.f64 2 x) (*.f64 -2 (pow.f64 x 2)))) 2)","(+.f64 (*.f64 2 (+.f64 x (pow.f64 x 3))) (fma.f64 (*.f64 x x) -2 -2))","(/.f64 -2 x)","(-.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 x)))","(fma.f64 2 (pow.f64 x -2) (/.f64 -2 x))","(-.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))","(*.f64 2 (-.f64 (pow.f64 x -2) (+.f64 (pow.f64 x -3) (/.f64 1 x))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))","(*.f64 2 (-.f64 (+.f64 (pow.f64 x -4) (pow.f64 x -2)) (+.f64 (pow.f64 x -3) (/.f64 1 x))))","(/.f64 -2 x)","(-.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 x)))","(fma.f64 2 (pow.f64 x -2) (/.f64 -2 x))","(-.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))","(*.f64 2 (-.f64 (pow.f64 x -2) (+.f64 (pow.f64 x -3) (/.f64 1 x))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))","(*.f64 2 (-.f64 (+.f64 (pow.f64 x -4) (pow.f64 x -2)) (+.f64 (pow.f64 x -3) (/.f64 1 x))))"]],"time":151.10302734375,"type":"simplify"},{"compiler":[[5806,4553]],"time":73.5009765625,"type":"eval"},{"alts":[["(*.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (+.f64 x -1))) (cbrt.f64 (pow.f64 (+.f64 x -1) -2)))","fresh",0.11851503907376808],["(/.f64 (/.f64 2 (-.f64 -1 x)) (+.f64 x -1))","next",0.07421875],["(*.f64 (*.f64 (cbrt.f64 -2) (/.f64 (cbrt.f64 4) (+.f64 1 x))) (/.f64 1 (+.f64 x -1)))","fresh",0.1497650390737681],["(/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))","fresh",0.07601340476030194]],"compiler":[[18,15],[10,8],[16,14],[10,8],[18,15],[10,8],[16,14],[10,8]],"count":[[320,4]],"kept":[{"done":[0,0],"fresh":[2,0],"new":[317,4],"picked":[1,0]}],"min-error":[0],"time":147.1640625,"type":"prune"},{"compiler":[[24,18]],"locations":[["(/.f64 2 (-.f64 -1 x))",0.00390625,true],["(/.f64 (/.f64 2 (-.f64 -1 x)) (+.f64 x -1))",0.078125,true]],"time":5.76708984375,"type":"localize"},{"count":[[2,24]],"series":[["(/.f64 2 (-.f64 -1 x))","x","-inf",0.182861328125],["(/.f64 2 (-.f64 -1 x))","x","inf",0.179931640625],["(/.f64 2 (-.f64 -1 x))","x","0",0.14990234375],["(/.f64 (/.f64 2 (-.f64 -1 x)) (+.f64 x -1))","x","-inf",0.190185546875],["(/.f64 (/.f64 2 (-.f64 -1 x)) (+.f64 x -1))","x","inf",0.2138671875],["(/.f64 (/.f64 2 (-.f64 -1 x)) (+.f64 x -1))","x","0",0.220947265625]],"time":1.223876953125,"type":"series"},{"count":[[2,175]],"inputs":[["(/.f64 (/.f64 2 (-.f64 -1 x)) (+.f64 x -1))","(/.f64 2 (-.f64 -1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1))) 0) (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1))) (*.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1)))) (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1))) (*.f64 0 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -2 (*.f64 (-.f64 -1 x) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 1 x)) (/.f64 -2 (*.f64 (-.f64 -1 x) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 (+.f64 1 x) (+.f64 x -1))) (/.f64 -2 (*.f64 (-.f64 -1 x) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1)))) (cbrt.f64 (pow.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 2 (-.f64 -1 x))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 2)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -2 (*.f64 (-.f64 -1 x) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -2 (+.f64 x -1)) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (+.f64 x -1))) (pow.f64 (cbrt.f64 (+.f64 x -1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1))) 2)) (cbrt.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 8 (+.f64 x -1))) (/.f64 (/.f64 1 (-.f64 -1 x)) (cbrt.f64 (pow.f64 (+.f64 x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) (/.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (pow.f64 (+.f64 x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (/.f64 -1 (*.f64 (-.f64 -1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (-.f64 -1 x)) (/.f64 1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x -1)) (/.f64 2 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 (-.f64 -1 x)) (cbrt.f64 (pow.f64 (+.f64 x -1) 2))) (cbrt.f64 (/.f64 8 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 2)) (+.f64 x -1)) (cbrt.f64 (/.f64 2 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (*.f64 (-.f64 -1 x) (-.f64 1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 x)) (/.f64 2 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (pow.f64 (+.f64 x -1) 2))) (cbrt.f64 (/.f64 1 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -2 (*.f64 (-.f64 -1 x) (+.f64 x -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (+.f64 x -1)) (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (/.f64 1 (*.f64 (+.f64 1 x) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 x -1)) (*.f64 (-.f64 -1 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (+.f64 x -1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -2 (/.f64 (*.f64 (+.f64 1 x) (+.f64 x -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (*.f64 (-.f64 -1 x) (+.f64 x -1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (*.f64 (+.f64 1 x) (+.f64 x -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -2 (*.f64 (-.f64 1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (cbrt.f64 (/.f64 8 (-.f64 -1 x)))) (*.f64 (-.f64 1 x) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (-.f64 1 x) (*.f64 (-.f64 -1 x) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) 2) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) (cbrt.f64 (/.f64 8 (-.f64 -1 x)))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) -2) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) 1) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (*.f64 (-.f64 -1 x) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -2 (*.f64 (*.f64 (+.f64 1 x) (+.f64 x -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 8 (-.f64 -1 x))) 1) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 8 (-.f64 -1 x))) -1) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 8 (-.f64 -1 x))) (cbrt.f64 (/.f64 1 (+.f64 x -1)))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) (cbrt.f64 (pow.f64 (+.f64 x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (*.f64 (-.f64 -1 x) 1/2) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) (*.f64 (*.f64 (-.f64 -1 x) 1/2) (cbrt.f64 (pow.f64 (+.f64 x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -2 (*.f64 (-.f64 -1 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 8 (+.f64 x -1))) (*.f64 (-.f64 -1 x) (cbrt.f64 (pow.f64 (+.f64 x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -2 (cbrt.f64 (/.f64 1 (+.f64 x -1)))) (*.f64 (+.f64 1 x) (cbrt.f64 (pow.f64 (+.f64 x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -2 (+.f64 x -1)) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (-.f64 -1 x)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (+.f64 x -1))) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (+.f64 x -1)) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (*.f64 (-.f64 -1 x) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (+.f64 1 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 8 (+.f64 x -1))) (/.f64 1 (-.f64 -1 x))) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1))) 2)) (cbrt.f64 (/.f64 2 (-.f64 -1 x)))) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1))) 2)) (cbrt.f64 (/.f64 2 (+.f64 1 x)))) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 x -1))) (/.f64 2 (-.f64 -1 x))) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1)))) (cbrt.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 2))) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (+.f64 x -1)) (cbrt.f64 (/.f64 8 (-.f64 -1 x)))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 2 (-.f64 -1 x))) (cbrt.f64 (pow.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1))) 2))) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 2 (+.f64 1 x))) (cbrt.f64 (pow.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1))) 2))) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (/.f64 (/.f64 1 (-.f64 -1 x)) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)))) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -2) (/.f64 (cbrt.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 2)) (+.f64 x -1))) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 2) (/.f64 (cbrt.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 2)) (+.f64 x -1))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (pow.f64 (+.f64 x -1) 2))) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -2 (+.f64 x -1)) 1) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (+.f64 x -1))) 1) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 2 (+.f64 x -1)) 1) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 8 (-.f64 -1 x))) (/.f64 1 (+.f64 x -1))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (/.f64 1 (-.f64 1 x))) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -2 (/.f64 1 (-.f64 1 x))) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) -1) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (+.f64 (pow.f64 x 3) -1)) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (+.f64 x -1)) (-.f64 -1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x (+.f64 x -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (+.f64 x -1)) (cbrt.f64 (-.f64 -1 x))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (+.f64 x -1)) -1) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (+.f64 x -1)) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (+.f64 1 x)) (cbrt.f64 (+.f64 x -1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 -2 (+.f64 x -1)) (cbrt.f64 (-.f64 -1 x))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 -2 (+.f64 x -1)) -1) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 -2 (+.f64 x -1)) (cbrt.f64 (+.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 -2 (+.f64 x -1)) 1) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (+.f64 x -1))) 1) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (/.f64 (*.f64 (-.f64 -1 x) (+.f64 x -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 (+.f64 1 x) (+.f64 x -1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (-.f64 -1 x)) (/.f64 (+.f64 x -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 (-.f64 -1 x) (+.f64 x -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 8 (-.f64 -1 x))) (*.f64 (+.f64 x -1) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (+.f64 x -1) (*.f64 (-.f64 -1 x) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (*.f64 (*.f64 (-.f64 -1 x) (+.f64 x -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (*.f64 (-.f64 -1 x) 1/2) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (*.f64 (+.f64 1 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (+.f64 x -1)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -2 (*.f64 (-.f64 -1 x) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -2 (*.f64 (-.f64 -1 x) (+.f64 x -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 2 (+.f64 1 x)) (/.f64 1 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -2 (/.f64 -1 (*.f64 (-.f64 -1 x) (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (+.f64 x -1)) (/.f64 2 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 2 (-.f64 -1 x)) 0) (/.f64 2 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 2 (-.f64 -1 x)) (*.f64 (/.f64 2 (-.f64 -1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (-.f64 -1 x)) (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 2 (-.f64 -1 x))) (/.f64 2 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 2 (-.f64 -1 x)) (*.f64 0 (/.f64 2 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 2 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 (-.f64 -1 x) 1/2)) (/.f64 2 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 2 (-.f64 -1 x)) (/.f64 0 (*.f64 (-.f64 -1 x) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (+.f64 1 x)) (/.f64 2 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 2 (-.f64 -1 x))) (cbrt.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (/.f64 (sqrt.f64 2) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 2) (cbrt.f64 (-.f64 -1 x))) (/.f64 (sqrt.f64 2) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 2)) (cbrt.f64 (/.f64 2 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 2 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 x))) (/.f64 2 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (-.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 2 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 2) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))) (/.f64 (sqrt.f64 2) (cbrt.f64 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))) (cbrt.f64 (/.f64 1 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 2) (-.f64 -1 x)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (+.f64 1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1 x)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 2 (+.f64 1 x))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 8 (-.f64 -1 x))) (pow.f64 (cbrt.f64 (-.f64 -1 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (/.f64 (cbrt.f64 4) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 4) (-.f64 -1 x)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 8 (-.f64 -1 x))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -2 (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (-.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (-.f64 -1 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 2)) (cbrt.f64 -2)) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 2)) (cbrt.f64 2)) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 x))) 2) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 2 (-.f64 -1 x))) (cbrt.f64 4)) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sqrt.f64 2) (cbrt.f64 (-.f64 -1 x))) (sqrt.f64 2)) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -2) (cbrt.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 2))) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 2))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 8 (-.f64 -1 x))) 1) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 2) (/.f64 (sqrt.f64 2) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 8 (-.f64 -1 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 -1 x))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 -1 x))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 8 (-.f64 -1 x))) 1) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (-.f64 -1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x (+.f64 x -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 -1) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (+.f64 1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -2 (cbrt.f64 (-.f64 -1 x))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (-.f64 -1 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (-.f64 -1 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (+.f64 1 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (*.f64 (-.f64 -1 x) 1/2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 8 (-.f64 -1 x)))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (*.f64 (-.f64 -1 x) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 -1 x) 1/2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (-.f64 -1 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (-.f64 -1 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (-.f64 -1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 2 (-.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 2 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 2 (-.f64 -1 x)) 3))))))"]],"rules":[["egg-rr",65],["egg-rr",110]],"time":30.802001953125,"type":"rewrite"},{"count":[[199,204]],"inputs":[["2","(+.f64 (*.f64 2 (pow.f64 x 2)) 2)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 2 (*.f64 2 (pow.f64 x 4))))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 (pow.f64 x 6)) (+.f64 2 (*.f64 2 (pow.f64 x 4)))))","(/.f64 -2 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(/.f64 -2 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","-2","(-.f64 (*.f64 2 x) 2)","(-.f64 (+.f64 (*.f64 2 x) (*.f64 -2 (pow.f64 x 2))) 2)","(-.f64 (+.f64 (*.f64 2 (pow.f64 x 3)) (+.f64 (*.f64 2 x) (*.f64 -2 (pow.f64 x 2)))) 2)","(/.f64 -2 x)","(-.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 x)))","(-.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))","(/.f64 -2 x)","(-.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 x)))","(-.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))"]],"method":["egg-herbie"],"outputs":[["2","(+.f64 (*.f64 2 (pow.f64 x 2)) 2)","(fma.f64 2 (*.f64 x x) 2)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 2 (*.f64 2 (pow.f64 x 4))))","(fma.f64 (*.f64 x x) 2 (fma.f64 (pow.f64 x 4) 2 2))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 (pow.f64 x 6)) (+.f64 2 (*.f64 2 (pow.f64 x 4)))))","(+.f64 (*.f64 2 (+.f64 (*.f64 x x) (pow.f64 x 6))) (fma.f64 (pow.f64 x 4) 2 2))","(/.f64 -2 (pow.f64 x 2))","(/.f64 -2 (*.f64 x x))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(*.f64 -2 (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (*.f64 2 (+.f64 (+.f64 (pow.f64 x -4) (pow.f64 x -2)) (pow.f64 x -6))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(-.f64 (*.f64 -2 (pow.f64 x -8)) (*.f64 2 (+.f64 (+.f64 (pow.f64 x -4) (pow.f64 x -2)) (pow.f64 x -6))))","(/.f64 -2 (pow.f64 x 2))","(/.f64 -2 (*.f64 x x))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(*.f64 -2 (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (*.f64 2 (+.f64 (+.f64 (pow.f64 x -4) (pow.f64 x -2)) (pow.f64 x -6))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(-.f64 (*.f64 -2 (pow.f64 x -8)) (*.f64 2 (+.f64 (+.f64 (pow.f64 x -4) (pow.f64 x -2)) (pow.f64 x -6))))","-2","(-.f64 (*.f64 2 x) 2)","(fma.f64 2 x -2)","(-.f64 (+.f64 (*.f64 2 x) (*.f64 -2 (pow.f64 x 2))) 2)","(fma.f64 2 x (fma.f64 -2 (*.f64 x x) -2))","(-.f64 (+.f64 (*.f64 2 (pow.f64 x 3)) (+.f64 (*.f64 2 x) (*.f64 -2 (pow.f64 x 2)))) 2)","(+.f64 (*.f64 2 (+.f64 (pow.f64 x 3) x)) (fma.f64 -2 (*.f64 x x) -2))","(/.f64 -2 x)","(-.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 x)))","(fma.f64 2 (pow.f64 x -2) (/.f64 -2 x))","(-.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))","(*.f64 2 (-.f64 (pow.f64 x -2) (+.f64 (/.f64 1 x) (pow.f64 x -3))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))","(*.f64 2 (-.f64 (+.f64 (pow.f64 x -4) (pow.f64 x -2)) (+.f64 (/.f64 1 x) (pow.f64 x -3))))","(/.f64 -2 x)","(-.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 x)))","(fma.f64 2 (pow.f64 x -2) (/.f64 -2 x))","(-.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))","(*.f64 2 (-.f64 (pow.f64 x -2) (+.f64 (/.f64 1 x) (pow.f64 x -3))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))","(*.f64 2 (-.f64 (+.f64 (pow.f64 x -4) (pow.f64 x -2)) (+.f64 (/.f64 1 x) (pow.f64 x -3))))"]],"time":80.024169921875,"type":"simplify"},{"compiler":[[3076,2534]],"time":42.9638671875,"type":"eval"},{"alts":[["(/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))","next",0.07601340476030194],["(*.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (+.f64 x -1))) (cbrt.f64 (pow.f64 (+.f64 x -1) -2)))","fresh",0.11851503907376808],["(/.f64 (/.f64 2 (-.f64 -1 x)) (+.f64 x -1))","done",0.07421875],["(*.f64 (*.f64 (cbrt.f64 -2) (/.f64 (cbrt.f64 4) (+.f64 1 x))) (/.f64 1 (+.f64 x -1)))","fresh",0.1497650390737681]],"compiler":[[10,8],[18,15],[10,8],[16,14],[10,8],[18,15],[16,14]],"count":[[208,4]],"kept":[{"done":[0,0],"fresh":[3,2],"new":[204,1],"picked":[1,1]}],"min-error":[0],"time":70.43994140625,"type":"prune"},{"compiler":[[26,19]],"locations":[["(*.f64 (-.f64 1 x) (+.f64 1 x))",0.01171875,true],["(/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))",0.07210715476030194,true]],"time":6.05517578125,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 (-.f64 1 x) (+.f64 1 x))","x","-inf",0.166015625],["(*.f64 (-.f64 1 x) (+.f64 1 x))","x","inf",0.338134765625],["(*.f64 (-.f64 1 x) (+.f64 1 x))","x","0",0.219970703125],["(/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))","x","-inf",0.200927734375],["(/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))","x","inf",0.19287109375],["(/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))","x","0",0.294921875]],"time":1.496826171875,"type":"series"},{"count":[[2,239]],"inputs":[["(/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))","(*.f64 (-.f64 1 x) (+.f64 1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 0) (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) (*.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (*.f64 (+.f64 x -1) (+.f64 1 x))) (/.f64 -1 (*.f64 (+.f64 x -1) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))) (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) (*.f64 0 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 2 (*.f64 (+.f64 x -1) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 (+.f64 x -1) (+.f64 1 x))) (/.f64 2 (*.f64 (+.f64 x -1) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) (/.f64 0 (*.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 1/2)) (/.f64 2 (*.f64 (+.f64 x -1) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (/.f64 (/.f64 (cbrt.f64 4) (+.f64 1 x)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 2 (*.f64 (+.f64 x -1) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 2 (-.f64 1 x)) (cbrt.f64 (+.f64 1 x))) (/.f64 1 (cbrt.f64 (pow.f64 (+.f64 1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 8 (*.f64 (-.f64 1 x) (+.f64 1 x)))) (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 x) (+.f64 1 x))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))) (cbrt.f64 (pow.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 2)) (cbrt.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (/.f64 -1 (*.f64 (+.f64 x -1) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (*.f64 (+.f64 x -1) (+.f64 1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 2) (+.f64 1 x)) (/.f64 (sqrt.f64 2) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 2) (-.f64 1 x)) (/.f64 (sqrt.f64 2) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 2) (cbrt.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)))) (/.f64 (sqrt.f64 2) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (/.f64 (sqrt.f64 2) (*.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 2) (+.f64 1 x)) (/.f64 (cbrt.f64 4) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 2) (-.f64 1 x)) (/.f64 (cbrt.f64 4) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (-.f64 1 x)) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1 x)) (/.f64 2 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 x)) (/.f64 2 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (*.f64 (+.f64 x -1) (+.f64 1 x)))) (/.f64 2 (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (/.f64 (/.f64 -1 (+.f64 1 x)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 2))) (cbrt.f64 (/.f64 -1 (*.f64 (+.f64 x -1) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 -1 (+.f64 1 x)) (-.f64 1 x)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (*.f64 (+.f64 x -1) (+.f64 1 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 4) (+.f64 1 x)) (/.f64 (cbrt.f64 2) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 2) (*.f64 (-.f64 1 x) (+.f64 1 x))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (cbrt.f64 4) (+.f64 1 x)) (-.f64 1 x)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 4) (-.f64 1 x)) (/.f64 (cbrt.f64 2) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 2) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 2))) (/.f64 (sqrt.f64 2) (cbrt.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (+.f64 x -1)) (/.f64 -1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (-.f64 1 x)) (cbrt.f64 (+.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (+.f64 1 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (+.f64 1 x)) 1) (*.f64 (-.f64 1 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (+.f64 1 x)) 2) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sqrt.f64 2) (+.f64 1 x)) (sqrt.f64 2)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 2) (-.f64 1 x)) (cbrt.f64 4)) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 2) (+.f64 1 x)) (cbrt.f64 4)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 1 x)) (*.f64 (-.f64 1 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 2) (/.f64 (cbrt.f64 4) (+.f64 1 x))) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 2) (/.f64 (sqrt.f64 2) (+.f64 1 x))) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 2 (+.f64 1 x)) 1) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 2 (+.f64 x -1)) 1) (neg.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 2 (-.f64 1 x)) (cbrt.f64 (+.f64 1 x))) 1) (cbrt.f64 (pow.f64 (+.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (-.f64 1 x)) -1) (neg.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (*.f64 (-.f64 1 x) (cbrt.f64 (+.f64 1 x)))) (cbrt.f64 (pow.f64 (+.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (cbrt.f64 (+.f64 1 x))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 8 (-.f64 1 x))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 8 (*.f64 (-.f64 1 x) (+.f64 1 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (+.f64 1 x)) (cbrt.f64 (pow.f64 (-.f64 1 x) 2))) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 2 (-.f64 1 x)) (cbrt.f64 (+.f64 1 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 1 x))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 1 x))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 2 (-.f64 1 x)) (cbrt.f64 (+.f64 1 x))) 1) (cbrt.f64 (pow.f64 (+.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (*.f64 (+.f64 x -1) (+.f64 1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 1/2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 8 (-.f64 1 x))) 1) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 2 (-.f64 1 x))) (cbrt.f64 4)) (*.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 2 (-.f64 1 x)) (cbrt.f64 (+.f64 1 x)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (+.f64 x -1)) (neg.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (*.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (-.f64 1 x)) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 8 (*.f64 (-.f64 1 x) (+.f64 1 x)))) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -2 (*.f64 (+.f64 x -1) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))) (cbrt.f64 4)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sqrt.f64 2) (cbrt.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)))) (sqrt.f64 2)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (*.f64 (+.f64 x -1) (+.f64 1 x)))) 2) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (+.f64 1 x)) (cbrt.f64 (/.f64 8 (-.f64 1 x)))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (+.f64 1 x)) -2) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 2)) (cbrt.f64 -2)) (cbrt.f64 (*.f64 (+.f64 x -1) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 2)) (cbrt.f64 (/.f64 2 (-.f64 1 x)))) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 2)) (cbrt.f64 2)) (cbrt.f64 (*.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 8 (-.f64 1 x))) (/.f64 1 (+.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -2 (/.f64 1 (+.f64 1 x))) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 2) (/.f64 (sqrt.f64 2) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 2)))) (cbrt.f64 (*.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 2))) (cbrt.f64 (*.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 8 (*.f64 (-.f64 1 x) (+.f64 1 x)))) 1) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -2) (cbrt.f64 (pow.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 2))) (cbrt.f64 (*.f64 (+.f64 x -1) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 2 (-.f64 1 x))) (cbrt.f64 (pow.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 2))) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 (pow.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 2))) (cbrt.f64 (*.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (-.f64 1 x)) (cbrt.f64 (pow.f64 (+.f64 1 x) 2))) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (-.f64 1 x)) (+.f64 1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x (+.f64 x -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 -1) (*.f64 (+.f64 x -1) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (*.f64 (+.f64 1 x) (cbrt.f64 (-.f64 1 x)))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 8 (*.f64 (-.f64 1 x) (+.f64 1 x)))) 1) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (+.f64 1 x)) (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (+.f64 1 x)) -1) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (*.f64 (+.f64 x -1) (+.f64 1 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -2 (+.f64 1 x)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -2 (cbrt.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 2 (-.f64 1 x)) (cbrt.f64 (+.f64 1 x))) (cbrt.f64 (+.f64 1 x))) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (*.f64 (-.f64 1 x) 1/2) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (+.f64 1 x) (*.f64 (-.f64 1 x) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 2 (+.f64 1 x))) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 8 (*.f64 (-.f64 1 x) (+.f64 1 x))))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 2 (+.f64 1 x)) (-.f64 1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 1/2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 2 (*.f64 (+.f64 x -1) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -2 (/.f64 -1 (*.f64 (+.f64 x -1) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 2 (*.f64 (+.f64 x -1) (+.f64 1 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 (*.f64 (+.f64 x -1) (+.f64 1 x))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 x) (*.f64 (-.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 x) x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 x) (neg.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (fma.f64 x x x)) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (-.f64 1 x) x) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (-.f64 1 x) x) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (-.f64 1 x) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (+.f64 1 (*.f64 (-.f64 1 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 0) (*.f64 (-.f64 1 x) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) (*.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 x) (*.f64 (neg.f64 (fma.f64 x x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (-.f64 1 x) (+.f64 1 x))) (*.f64 (-.f64 1 x) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) (*.f64 0 (*.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 x) (*.f64 (*.f64 x (+.f64 x -1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 x (+.f64 -1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 -1 (-.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 x (neg.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (-.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (*.f64 x (+.f64 -1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (+.f64 (neg.f64 (*.f64 x x)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (*.f64 x (+.f64 -1 (-.f64 1 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 x (*.f64 x (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (-.f64 1 x) x) 0) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (-.f64 1 x) x) (/.f64 1 (fma.f64 x x (+.f64 1 x)))) (/.f64 (pow.f64 x 3) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 x -1) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (*.f64 x (+.f64 -1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (+.f64 x (*.f64 x (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 x) (*.f64 x (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (-.f64 1 x) x) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (/.f64 (+.f64 x (*.f64 x (+.f64 x -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (-.f64 1 x) x) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 x x (+.f64 1 x))) (-.f64 (/.f64 (pow.f64 x 3) (fma.f64 x x (+.f64 1 x))) (*.f64 (-.f64 1 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 x) (+.f64 1 x))) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 2)) (cbrt.f64 (*.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) (cbrt.f64 (+.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 1 x) (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 1 x)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 1 x) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 x -1) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) (+.f64 1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (*.f64 (-.f64 1 x) (cbrt.f64 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (-.f64 1 x)) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (+.f64 1 x)) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (*.f64 (+.f64 1 x) (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (+.f64 (cbrt.f64 (-.f64 1 x)) (*.f64 x (cbrt.f64 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (+.f64 (*.f64 x (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 1 x)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (+.f64 1 x))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) (neg.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 (pow.f64 x 3))) (/.f64 1 (*.f64 (fma.f64 x x (+.f64 1 x)) (fma.f64 x (+.f64 x -1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) (+.f64 1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x (+.f64 x -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 1 x) (-.f64 1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 x) (-.f64 1 (pow.f64 x 3))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (+.f64 1 (pow.f64 x 3))) (fma.f64 x (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 (pow.f64 x 3))) (*.f64 (fma.f64 x x (+.f64 1 x)) (fma.f64 x (+.f64 x -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (+.f64 -1 (neg.f64 (pow.f64 x 3)))) (+.f64 -1 (*.f64 (-.f64 1 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 1 (pow.f64 x 3))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (-.f64 1 x))) (cbrt.f64 (fma.f64 x (+.f64 x -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (neg.f64 (pow.f64 x 3))) (-.f64 1 x)) (+.f64 -1 (*.f64 (-.f64 1 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 x) (+.f64 1 (pow.f64 x 3))) 1) (fma.f64 x (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 1 x) (-.f64 1 (pow.f64 x 3))) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 (pow.f64 x 3))) 1) (*.f64 (fma.f64 x x (+.f64 1 x)) (fma.f64 x (+.f64 x -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 1 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x (+.f64 x -1) 1))) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 x -1) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 1 (pow.f64 x 3))) 1) (fma.f64 x (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 1 x) (-.f64 1 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 1 x) (-.f64 1 (pow.f64 x 3))) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x -1) (+.f64 1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (*.f64 x (+.f64 -1 (-.f64 1 x))) 3)) (+.f64 1 (-.f64 (*.f64 (*.f64 x (+.f64 -1 (-.f64 1 x))) (*.f64 x (+.f64 -1 (-.f64 1 x)))) (*.f64 x (+.f64 -1 (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (+.f64 x (*.f64 x (+.f64 x -1))) 3)) (+.f64 1 (+.f64 (*.f64 (+.f64 x (*.f64 x (+.f64 x -1))) (+.f64 x (*.f64 x (+.f64 x -1)))) (+.f64 x (*.f64 x (+.f64 x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 x (-.f64 1 (pow.f64 x 3))) (neg.f64 (fma.f64 x x (+.f64 1 x)))) (*.f64 (fma.f64 x x (+.f64 1 x)) (+.f64 -1 (pow.f64 x 3)))) (*.f64 (fma.f64 x x (+.f64 1 x)) (neg.f64 (fma.f64 x x (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 x (-.f64 1 (pow.f64 x 3))) (fma.f64 x x (+.f64 1 x))) (*.f64 (fma.f64 x x (+.f64 1 x)) (-.f64 1 (pow.f64 x 3)))) (*.f64 (fma.f64 x x (+.f64 1 x)) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (fma.f64 x x (+.f64 1 x))) (*.f64 (fma.f64 x x (+.f64 1 x)) (*.f64 x (-.f64 1 (pow.f64 x 3))))) (*.f64 (fma.f64 x x (+.f64 1 x)) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (fma.f64 x x (+.f64 1 x))) (*.f64 (neg.f64 (fma.f64 x x (+.f64 1 x))) (*.f64 x (-.f64 1 (pow.f64 x 3))))) (*.f64 (neg.f64 (fma.f64 x x (+.f64 1 x))) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) (+.f64 -1 (pow.f64 x 3))) (*.f64 (fma.f64 x (+.f64 x -1) 1) (neg.f64 (fma.f64 x x (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (neg.f64 (pow.f64 x 3))) (+.f64 -1 (pow.f64 x 3))) (*.f64 (+.f64 -1 (*.f64 (-.f64 1 x) x)) (neg.f64 (fma.f64 x x (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (neg.f64 (pow.f64 x 3))) (-.f64 1 (pow.f64 x 3))) (*.f64 (+.f64 -1 (*.f64 (-.f64 1 x) x)) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 (pow.f64 x 3))) 1) (*.f64 (*.f64 (fma.f64 x x (+.f64 1 x)) (fma.f64 x (+.f64 x -1) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 -1 (neg.f64 (pow.f64 x 3)))) (*.f64 (fma.f64 x x (+.f64 1 x)) (+.f64 -1 (*.f64 (-.f64 1 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (+.f64 1 (pow.f64 x 3))) (*.f64 (neg.f64 (fma.f64 x x (+.f64 1 x))) (fma.f64 x (+.f64 x -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (+.f64 -1 (neg.f64 (pow.f64 x 3)))) (*.f64 (neg.f64 (fma.f64 x x (+.f64 1 x))) (+.f64 -1 (*.f64 (-.f64 1 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 (pow.f64 x 3)))) (neg.f64 (*.f64 (fma.f64 x x (+.f64 1 x)) (fma.f64 x (+.f64 x -1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 1 x) (+.f64 1 (pow.f64 x 3)))) (+.f64 -1 (*.f64 (-.f64 1 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 x) (+.f64 -1 (pow.f64 x 3))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 x 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (+.f64 1 x))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (+.f64 1 x)) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 1 x) (-.f64 1 (pow.f64 x 3)))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 x) (+.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 x) (+.f64 1 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 x) (+.f64 1 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 x -1) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 x (*.f64 x (+.f64 x -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) (+.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 x)) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (*.f64 (-.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (neg.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (cbrt.f64 (+.f64 1 x)) (neg.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (pow.f64 x 3)) (/.f64 1 (fma.f64 x (+.f64 x -1) 1)) (neg.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (+.f64 1 x)) (neg.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 1 x) x)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) x) 2)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 x) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (-.f64 1 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (*.f64 x (+.f64 -1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 x -1) (*.f64 (-.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (cbrt.f64 (-.f64 1 x)) (*.f64 (-.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x -1) -1 (*.f64 (-.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 x) (*.f64 (-.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 x) 1 (*.f64 (-.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 1 x) (neg.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 x) 1 (neg.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (-.f64 1 x) x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (-.f64 1 x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 x) x (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (*.f64 x (+.f64 -1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 1 (fma.f64 x x (+.f64 1 x))) (*.f64 (-.f64 1 x) x))))))"]],"rules":[["egg-rr",121],["egg-rr",118]],"time":36.189208984375,"type":"rewrite"},{"count":[[263,259]],"inputs":[["2","(+.f64 (*.f64 2 (pow.f64 x 2)) 2)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 2 (*.f64 2 (pow.f64 x 4))))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 (pow.f64 x 6)) (+.f64 2 (*.f64 2 (pow.f64 x 4)))))","(/.f64 -2 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(/.f64 -2 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","1","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(*.f64 -1 (pow.f64 x 2))","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(*.f64 -1 (pow.f64 x 2))","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["2","(+.f64 (*.f64 2 (pow.f64 x 2)) 2)","(fma.f64 2 (*.f64 x x) 2)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 2 (*.f64 2 (pow.f64 x 4))))","(*.f64 2 (+.f64 (pow.f64 x 4) (+.f64 (*.f64 x x) 1)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 (pow.f64 x 6)) (+.f64 2 (*.f64 2 (pow.f64 x 4)))))","(fma.f64 2 (*.f64 x x) (*.f64 2 (+.f64 (pow.f64 x 4) (+.f64 1 (pow.f64 x 6)))))","(/.f64 -2 (pow.f64 x 2))","(/.f64 -2 (*.f64 x x))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(*.f64 -2 (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(*.f64 2 (-.f64 (neg.f64 (pow.f64 x -6)) (+.f64 (pow.f64 x -4) (pow.f64 x -2))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(*.f64 2 (-.f64 (neg.f64 (pow.f64 x -8)) (+.f64 (+.f64 (pow.f64 x -4) (pow.f64 x -2)) (pow.f64 x -6))))","(/.f64 -2 (pow.f64 x 2))","(/.f64 -2 (*.f64 x x))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(*.f64 -2 (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(*.f64 2 (-.f64 (neg.f64 (pow.f64 x -6)) (+.f64 (pow.f64 x -4) (pow.f64 x -2))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(*.f64 2 (-.f64 (neg.f64 (pow.f64 x -8)) (+.f64 (+.f64 (pow.f64 x -4) (pow.f64 x -2)) (pow.f64 x -6))))","1","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(-.f64 1 (*.f64 x x))","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(-.f64 1 (*.f64 x x))","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(-.f64 1 (*.f64 x x))","(*.f64 -1 (pow.f64 x 2))","(neg.f64 (*.f64 x x))","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(-.f64 1 (*.f64 x x))","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(-.f64 1 (*.f64 x x))","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(-.f64 1 (*.f64 x x))","(*.f64 -1 (pow.f64 x 2))","(neg.f64 (*.f64 x x))","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(-.f64 1 (*.f64 x x))","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(-.f64 1 (*.f64 x x))","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(-.f64 1 (*.f64 x x))"]],"time":112.61181640625,"type":"simplify"},{"compiler":[[4290,3359]],"time":57.916015625,"type":"eval"},{"alts":[["(/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))","done",0.07601340476030194],["(*.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (+.f64 x -1))) (cbrt.f64 (pow.f64 (+.f64 x -1) -2)))","fresh",0.11851503907376808],["(/.f64 (/.f64 2 (-.f64 -1 x)) (+.f64 x -1))","done",0.07421875],["(*.f64 (*.f64 (cbrt.f64 -2) (/.f64 (cbrt.f64 4) (+.f64 1 x))) (/.f64 1 (+.f64 x -1)))","fresh",0.1497650390737681]],"compiler":[[10,8],[18,15],[10,8],[16,14]],"count":[[263,4]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[259,0],"picked":[1,1]}],"min-error":[0],"time":109.116943359375,"type":"prune"},{"accuracy":[0.07421875],"baseline":[0.07421875],"branch":[["x",0.07421875,1],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))",0.07421875,1]],"compiler":[[2,1],[12,10],[116,92]],"count":[[9,1]],"inputs":[["(/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))","(*.f64 (/.f64 (/.f64 2 (-.f64 -1 x)) (cbrt.f64 (+.f64 x -1))) (cbrt.f64 (pow.f64 (+.f64 x -1) -2)))","(/.f64 (/.f64 2 (-.f64 -1 x)) (+.f64 x -1))","(*.f64 (*.f64 (cbrt.f64 -2) (/.f64 (cbrt.f64 4) (+.f64 1 x))) (/.f64 1 (+.f64 x -1)))","(/.f64 2 (*.f64 (-.f64 1 x) (+.f64 1 x)))","(*.f64 (/.f64 (-.f64 x (+.f64 2 x)) (+.f64 1 x)) (/.f64 1 (+.f64 x -1)))","(/.f64 (/.f64 (-.f64 x (+.f64 2 x)) (cbrt.f64 (+.f64 1 x))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) 2)) (+.f64 x -1)))","(*.f64 -2 (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))"]],"link":["."],"name":["Asymptote A"],"oracle":[47.13822943236692],"outputs":[["(/.f64 (/.f64 2 (-.f64 -1 x)) (+.f64 x -1))"]],"time":8.257080078125,"times":[["x",3.910888671875],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))",2.06201171875]],"type":"regimes"},{"compiler":[[10,8]],"inputs":[["(/.f64 (/.f64 2 (-.f64 -1 x)) (+.f64 x -1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (/.f64 2 (-.f64 -1 x)) (+.f64 x -1))","(/.f64 -2 (*.f64 (+.f64 1 x) (+.f64 x -1)))"]],"stop":[["fuel",1]],"time":19.208984375,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[10,8]],"remove-preprocessing":[[]],"time":8.2080078125,"type":"end"}]
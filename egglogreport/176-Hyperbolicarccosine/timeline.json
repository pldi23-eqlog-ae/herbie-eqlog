[{"compiler":[[11,8]],"method":["search"],"sampling":[[12,0.2493898868560791,0.2513420581817627,0.4992680549621582],[11,0.2489018440246582,0.2528061866760254,0.4982919692993164],[10,0.2479257583618164,0.2557344436645508,0.4963397979736328],[9,0.2459735870361328,0.26159095764160156,0.4924354553222656],[8,0.24206924438476563,0.2733039855957031,0.48462677001953125],[7,0.23426055908203125,0.29673004150390625,0.4690093994140625],[6,0.2186431884765625,0.3435821533203125,0.437774658203125],[5,0.187408447265625,0.437286376953125,0.37530517578125],[4,0.12493896484375,0.62469482421875,0.2503662109375],[3,0.0,0.99951171875,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":44.1181640625,"type":"analyze"},{"outcomes":[["body",256,"invalid",321.80322265625,8568],["body",256,"valid",372.5947265625,8256]],"time":709.8388671875,"type":"sample"},{"compiler":[[10,7]],"inputs":[["0"],["(log.f64 (+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) 1))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(log.f64 (+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) 1))))","(log.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))))"]],"symmetry":[[]],"time":52.26904296875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(log.f64 (+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) 1))))"]],"method":["egg-herbie"],"outputs":[["(log.f64 (+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) 1))))","(log.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))))"]],"time":18.9580078125,"type":"simplify"},{"compiler":[[18,12]],"time":0.35205078125,"type":"eval"},{"alts":[["(log.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))))","next",35.25]],"compiler":[[9,6],[9,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[35.25],"time":0.826904296875,"type":"prune"},{"compiler":[[27,16]],"locations":[["(+.f64 x (sqrt.f64 (fma.f64 x x -1)))",0.01953125,true],["(sqrt.f64 (fma.f64 x x -1))",32.88606936715139,true]],"time":7.84716796875,"type":"localize"},{"count":[[2,16]],"series":[["(+.f64 x (sqrt.f64 (fma.f64 x x -1)))","x","-inf",0.356201171875],["(+.f64 x (sqrt.f64 (fma.f64 x x -1)))","x","inf",0.191162109375],["(+.f64 x (sqrt.f64 (fma.f64 x x -1)))","x","0",0.2490234375],["(sqrt.f64 (fma.f64 x x -1))","x","-inf",0.31787109375],["(sqrt.f64 (fma.f64 x x -1))","x","inf",0.408935546875],["(sqrt.f64 (fma.f64 x x -1))","x","0",1.2587890625]],"time":2.8779296875,"type":"series"},{"count":[[2,68]],"inputs":[["(sqrt.f64 (fma.f64 x x -1))","(+.f64 x (sqrt.f64 (fma.f64 x x -1)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 x x -1)) 1/2) (*.f64 (sqrt.f64 (fma.f64 x x -1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 x x -1)) 0) (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 x x -1)) (*.f64 (sqrt.f64 (fma.f64 x x -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (fma.f64 x x -1))) (*.f64 1/2 (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (fma.f64 x x -1))) (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 x x -1)) (*.f64 0 (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x -1))) (sqrt.f64 (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x -1))) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x -1)) (cbrt.f64 (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x -1)))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x -1)))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x -1)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x -1)))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x -1)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x -1))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (fma.f64 x x -1))) (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x -1)))) (fabs.f64 (cbrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 x x -1)) 0) (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x x -1)) (pow.f64 (sqrt.f64 (fma.f64 x x -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fma.f64 x x -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x -1) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x -1) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x -1) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x -1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x x -1) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (fma.f64 x x -1))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))) 1/2) (*.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))) 0) (+.f64 x (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))) (*.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))) (*.f64 1/2 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))) (+.f64 x (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))) (*.f64 0 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 x x -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))) (pow.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))) 2/3) (cbrt.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 (fma.f64 x x -1)) (cbrt.f64 (*.f64 x (sqrt.f64 (fma.f64 x x -1)))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (fma.f64 x x -1)) (-.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 x (sqrt.f64 (fma.f64 x x -1)))))) (+.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x -1))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x -1))) (cbrt.f64 (fma.f64 x x -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x -1))) (sqrt.f64 (sqrt.f64 (fma.f64 x x -1))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x -1)))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x x -1)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x x -1)) (cbrt.f64 (sqrt.f64 (fma.f64 x x -1))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (sqrt.f64 (fma.f64 x x -1))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (fma.f64 x x -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x x -1)) 1 x)))))"]],"rules":[["egg-rr",34],["egg-rr",34]],"time":24.89990234375,"type":"rewrite"},{"count":[[84,97]],"inputs":[["x","(-.f64 x (*.f64 1/2 (/.f64 1 x)))","(-.f64 x (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 x (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))))","(*.f64 -1 x)","(+.f64 (*.f64 -1 x) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x))))","(*.f64 2 x)","(-.f64 (*.f64 2 x) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))))","(/.f64 1/2 x)","(+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x))))","(+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 5/128 (/.f64 1 (pow.f64 x 7))))))"]],"method":["egg-herbie"],"outputs":[["x","(-.f64 x (*.f64 1/2 (/.f64 1 x)))","(+.f64 x (/.f64 -1/2 x))","(-.f64 x (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))","(-.f64 x (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))))","(-.f64 x (fma.f64 1/16 (pow.f64 x -5) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1 x) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (/.f64 1/2 x) x)","(+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x)))","(-.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) x)","(+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x))))","(-.f64 (fma.f64 1/16 (pow.f64 x -5) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) x)","(*.f64 2 x)","(-.f64 (*.f64 2 x) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 2 x (/.f64 -1/2 x))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (*.f64 2 x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))))","(-.f64 (*.f64 2 x) (fma.f64 1/16 (pow.f64 x -5) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))","(/.f64 1/2 x)","(+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))","(+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x))))","(fma.f64 1/16 (pow.f64 x -5) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))","(+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 5/128 (/.f64 1 (pow.f64 x 7))))))","(fma.f64 1/16 (pow.f64 x -5) (fma.f64 (pow.f64 x -3) 1/8 (fma.f64 5/128 (pow.f64 x -7) (/.f64 1/2 x))))"]],"time":54.80517578125,"type":"simplify"},{"compiler":[[1356,976]],"time":19.180908203125,"type":"eval"},{"alts":[["(log.f64 (+.f64 x (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))))","next",0.06315267529745984],["(log.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))))","done",35.25]],"compiler":[[14,10],[9,6],[14,10]],"count":[[98,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[97,1],"picked":[1,1]}],"min-error":[0],"time":14.794921875,"type":"prune"},{"compiler":[[54,38]],"locations":[["(fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))",0.0078125,true],["(+.f64 x (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))",0.01953125,true]],"time":14.1220703125,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))","x","-inf",0.573974609375],["(fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))","x","inf",0.31396484375],["(fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))","x","0",0.3408203125],["(+.f64 x (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))","x","-inf",0.351806640625],["(+.f64 x (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))","x","inf",0.328125],["(+.f64 x (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))","x","0",0.468017578125]],"time":2.469970703125,"type":"series"},{"count":[[2,120]],"inputs":[["(+.f64 x (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) (*.f64 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) 0) (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) (*.f64 0 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))) (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x x) (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 1/2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 1/2 x) 3)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 2 (*.f64 -1/8 (pow.f64 x -3))) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (-.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 x (pow.f64 (/.f64 1/2 x) 3)) (-.f64 (/.f64 1/2 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x 2 (*.f64 -1/8 (pow.f64 x -3))) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (+.f64 x x) 0) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (+.f64 x x) (/.f64 1/2 x)) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) (*.f64 -2 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))) (cbrt.f64 (pow.f64 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (-.f64 (cbrt.f64 (pow.f64 (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) 2)) (cbrt.f64 (*.f64 x (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) 2)) (-.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 x (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))))) (+.f64 (cbrt.f64 (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) 2)) (cbrt.f64 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) (*.f64 -2 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 1/2 x) (fma.f64 x 2 (*.f64 -1/8 (pow.f64 x -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))) (cbrt.f64 (pow.f64 (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) 2)) (cbrt.f64 (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (-.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 x (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 1/2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 2 (cbrt.f64 (*.f64 x x))) (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 1/2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x x)) (cbrt.f64 (*.f64 4 (*.f64 x x))) (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 1/2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 2 (cbrt.f64 x)) (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 1/2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x x) (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 1/2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 2 (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 1/2 x) 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 1/2 x) 3) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/2 x) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (-.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 0 (pow.f64 (/.f64 1/2 x) 3)) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 0 (/.f64 1/2 x)) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (pow.f64 (/.f64 1/2 x) 3)) (-.f64 (/.f64 1/2 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (-.f64 x (pow.f64 (/.f64 1/2 x) 3))) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x 0) (-.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) (*.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) 0) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (*.f64 -1/8 (pow.f64 x -3))) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) (*.f64 0 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -1/8 (pow.f64 x -3)) -1) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (cbrt.f64 (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 1/2 x) 3))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 1/2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (*.f64 -1/8 (pow.f64 x -3))) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (/.f64 1/2 x) 3) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 1/2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (cbrt.f64 (pow.f64 (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) 2)) (cbrt.f64 (*.f64 x (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))))) (-.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 1/2 x) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (neg.f64 x) (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (+.f64 (*.f64 1/4 (pow.f64 x -3)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (+.f64 (/.f64 1 x) (*.f64 1/4 (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 x) (-.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) (cbrt.f64 (pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) 2)) (cbrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 1/2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 1/2 x) 3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (-.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (-.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 1 x) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 -1/2 x) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 (/.f64 -1 x) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/2 x)) (cbrt.f64 (/.f64 1/4 (*.f64 x x))) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/2) (/.f64 (sqrt.f64 1/2) x) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1/2 x) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 x) 1 (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 1/2) (cbrt.f64 x)) (/.f64 (sqrt.f64 1/2) (cbrt.f64 (*.f64 x x))) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 x) 1/2 (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/4 (*.f64 x x))) (cbrt.f64 (/.f64 1/2 x)) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (/.f64 (cbrt.f64 1/4) x) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (/.f64 1/8 (*.f64 x x))) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 1/2 x) 3) 1 (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (*.f64 1/4 (pow.f64 x -3)) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/8) (*.f64 (sqrt.f64 1/8) (pow.f64 x -3)) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -3) 1/8 (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (/.f64 1/2 x) 3) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (-.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (-.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (-.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/8 (/.f64 1 x)) (pow.f64 (/.f64 1 x) 2) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 x) (/.f64 1/4 (*.f64 x x)) (/.f64 1/2 x))))))"]],"rules":[["egg-rr",69],["egg-rr",51]],"time":29.666015625,"type":"rewrite"},{"count":[[144,135]],"inputs":[["(/.f64 -1/8 (pow.f64 x 3))","(neg.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(*.f64 2 x)","(-.f64 (*.f64 2 x) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(*.f64 2 x)","(-.f64 (*.f64 2 x) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(/.f64 1/8 (pow.f64 x 3))","(+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(/.f64 1/2 x)","(+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 x)","(+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 -1/8 (pow.f64 x 3))","(pow.f64 (/.f64 -1/2 x) 3)","(neg.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(fma.f64 (pow.f64 x -3) -1/8 (/.f64 -1/2 x))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(fma.f64 2 x (fma.f64 (pow.f64 x -3) -1/8 (/.f64 -1/2 x)))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(fma.f64 2 x (fma.f64 (pow.f64 x -3) -1/8 (/.f64 -1/2 x)))","(*.f64 2 x)","(+.f64 x x)","(-.f64 (*.f64 2 x) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 2 x (/.f64 -1/2 x))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(fma.f64 2 x (fma.f64 (pow.f64 x -3) -1/8 (/.f64 -1/2 x)))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(fma.f64 2 x (fma.f64 (pow.f64 x -3) -1/8 (/.f64 -1/2 x)))","(*.f64 2 x)","(+.f64 x x)","(-.f64 (*.f64 2 x) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 2 x (/.f64 -1/2 x))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(fma.f64 2 x (fma.f64 (pow.f64 x -3) -1/8 (/.f64 -1/2 x)))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(fma.f64 2 x (fma.f64 (pow.f64 x -3) -1/8 (/.f64 -1/2 x)))","(/.f64 1/8 (pow.f64 x 3))","(pow.f64 (/.f64 1/2 x) 3)","(+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))","(+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))","(+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))","(+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))","(+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))"]],"time":91.43603515625,"type":"simplify"},{"compiler":[[2349,1652]],"time":32.724853515625,"type":"eval"},{"alts":[["(log.f64 (+.f64 x (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))))","done",0.06315267529745984],["(log.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))))","done",35.25]],"compiler":[[14,10],[9,6]],"count":[[137,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[135,0],"picked":[1,1]}],"min-error":[0],"time":37.10205078125,"type":"prune"},{"accuracy":[0.06315267529745984],"baseline":[0.06315267529745984],"branch":[["x",0.06315267529745984,1],["(log.f64 (+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) 1))))",0.06315267529745984,1],["(+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) 1)))",0.06315267529745984,1]],"compiler":[[2,1],[10,7],[9,6],[31,21]],"count":[[3,1]],"inputs":[["(log.f64 (+.f64 x (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))))","(log.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))))","(log.f64 (+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) 1))))"]],"link":["."],"name":["Hyperbolic arc-cosine"],"oracle":[35.31315267529746],"outputs":[["(log.f64 (+.f64 x (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))))"]],"time":8.551025390625,"times":[["x",2.673095703125],["(log.f64 (+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) 1))))",2.47412109375],["(+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) 1)))",2.5068359375]],"type":"regimes"},{"compiler":[[14,10]],"inputs":[["(log.f64 (+.f64 x (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))))"]],"method":["egg-herbie"],"outputs":[["(log.f64 (+.f64 x (-.f64 x (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x)))))","(log.f64 (-.f64 (+.f64 x x) (fma.f64 1/8 (pow.f64 x -3) (/.f64 1/2 x))))"]],"stop":[["done",1]],"time":21.051025390625,"type":"simplify"},{"time":0.01806640625,"type":"soundness"},{"compiler":[[14,10]],"remove-preprocessing":[[]],"time":9.77490234375,"type":"end"}]
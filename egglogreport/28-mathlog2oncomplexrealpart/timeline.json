[{"compiler":[[32,21]],"method":["search"],"sampling":[[12,0.28522631091931316,0.3388586086990131,0.37591508038167376],[11,0.24280803903900505,0.3812768805793212,0.37591508038167376],[10,0.2047778642497633,0.41930705536856294,0.37591508038167376],[9,0.13651857616650886,0.6123833273754826,0.2510980964580085],[8,0.08581167644751986,0.6630902270944716,0.2510980964580085],[7,0.04680636897137447,0.702095534570617,0.2510980964580085],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":145.033935546875,"type":"analyze"},{"outcomes":[["body",256,"invalid",174.841796875,2068],["body",256,"valid",746.38623046875,8256]],"time":930.7099609375,"type":"sample"},{"compiler":[[31,20]],"inputs":[["0","1","2"],["(/.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) (log.f64 base)) (*.f64 (atan2.f64 im re) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","(/.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re)))) (log.f64 base)) (*.f64 (atan2.f64 re im) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","(/.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 base base) (*.f64 im im)))) (log.f64 re)) (*.f64 (atan2.f64 im base) 0)) (+.f64 (*.f64 (log.f64 re) (log.f64 re)) (*.f64 0 0)))","(/.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 base base)))) (log.f64 im)) (*.f64 (atan2.f64 base re) 0)) (+.f64 (*.f64 (log.f64 im) (log.f64 im)) (*.f64 0 0)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(/.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) (log.f64 base)) (*.f64 (atan2.f64 im re) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","(*.f64 (*.f64 (log.f64 (hypot.f64 im re)) (log.f64 base)) (pow.f64 (log.f64 base) -2))","(/.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re)))) (log.f64 base)) (*.f64 (atan2.f64 re im) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","(*.f64 (*.f64 (log.f64 (hypot.f64 im re)) (log.f64 base)) (pow.f64 (log.f64 base) -2))","(/.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 base base) (*.f64 im im)))) (log.f64 re)) (*.f64 (atan2.f64 im base) 0)) (+.f64 (*.f64 (log.f64 re) (log.f64 re)) (*.f64 0 0)))","(*.f64 (*.f64 (log.f64 (hypot.f64 base im)) (log.f64 re)) (pow.f64 (log.f64 re) -2))","(/.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 base base)))) (log.f64 im)) (*.f64 (atan2.f64 base re) 0)) (+.f64 (*.f64 (log.f64 im) (log.f64 im)) (*.f64 0 0)))","(*.f64 (*.f64 (log.f64 (hypot.f64 re base)) (log.f64 im)) (pow.f64 (log.f64 im) -2))"]],"symmetry":[[]],"time":80.587890625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) (log.f64 base)) (*.f64 (atan2.f64 im re) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) (log.f64 base)) (*.f64 (atan2.f64 im re) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (pow.f64 (log.f64 base) -2))"]],"time":21.89404296875,"type":"simplify"},{"compiler":[[43,26]],"time":0.593017578125,"type":"eval"},{"alts":[["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (pow.f64 (log.f64 base) -2))","next",0.48865131837909415],["(/.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) (log.f64 base)) (*.f64 (atan2.f64 im re) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","fresh",30.961598718750842]],"compiler":[[15,10],[31,20],[15,10],[31,20]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.4004288086106521],"time":1.714111328125,"type":"prune"},{"compiler":[[39,13]],"locations":[["(hypot.f64 re im)",0.0078125,true],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (pow.f64 (log.f64 base) -2))",0.31087875976844204,true],["(*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))",0.39453125,true],["(pow.f64 (log.f64 base) -2)",0.4918937988422102,true]],"time":8.843017578125,"type":"localize"},{"count":[[4,108]],"series":[["(hypot.f64 re im)","im","-inf",0.282958984375],["(hypot.f64 re im)","im","inf",0.197998046875],["(hypot.f64 re im)","im","0",0.208984375],["(hypot.f64 re im)","re","-inf",0.25390625],["(hypot.f64 re im)","re","inf",0.27392578125],["(hypot.f64 re im)","re","0",0.22998046875],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (pow.f64 (log.f64 base) -2))","base","-inf",0.5361328125],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (pow.f64 (log.f64 base) -2))","base","inf",0.48193359375],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (pow.f64 (log.f64 base) -2))","base","0",0.43994140625],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (pow.f64 (log.f64 base) -2))","im","-inf",0.2919921875],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (pow.f64 (log.f64 base) -2))","im","inf",0.421875],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (pow.f64 (log.f64 base) -2))","im","0",0.39208984375],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (pow.f64 (log.f64 base) -2))","re","-inf",0.322021484375],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (pow.f64 (log.f64 base) -2))","re","inf",0.451171875],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (pow.f64 (log.f64 base) -2))","re","0",0.40087890625],["(*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))","base","-inf",0.343017578125],["(*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))","base","inf",0.35205078125],["(*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))","base","0",8.883056640625],["(*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))","im","-inf",0.47412109375],["(*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))","im","inf",0.782958984375],["(*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))","im","0",0.869873046875],["(*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))","re","-inf",0.466064453125],["(*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))","re","inf",0.868896484375],["(*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))","re","0",1.1669921875],["(pow.f64 (log.f64 base) -2)","base","-inf",11.697021484375],["(pow.f64 (log.f64 base) -2)","base","inf",4.60009765625],["(pow.f64 (log.f64 base) -2)","base","0",14.617919921875]],"time":50.794921875,"type":"series"},{"count":[[4,127]],"inputs":[["(pow.f64 (log.f64 base) -2)","(*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))","(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (pow.f64 (log.f64 base) -2))","(hypot.f64 re im)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 base) -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 base) -2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (cbrt.f64 (pow.f64 (log.f64 base) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) -4)) (cbrt.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 base) -2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 base) -2))) (neg.f64 (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 base) -2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 base) -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 base) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 base) -2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 base) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 base) -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (log.f64 base) -2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 base) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (log.f64 base) -2) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 (log.f64 base)) (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 base) (log.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3) (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 base)) (*.f64 (pow.f64 (log.f64 base) 2/3) (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (*.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 base)) (cbrt.f64 (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 base) 2/3) (log.f64 (hypot.f64 re im))) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 base))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 base) (cbrt.f64 (log.f64 (hypot.f64 re im)))) (pow.f64 (log.f64 (hypot.f64 re im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (*.f64 (log.f64 base) (cbrt.f64 (log.f64 (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) 2/3) (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (pow.f64 (cbrt.f64 (*.f64 (neg.f64 (log.f64 base)) (log.f64 (hypot.f64 re im)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 (log.f64 base)) (log.f64 (hypot.f64 re im)))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 (neg.f64 (log.f64 base)) (log.f64 (hypot.f64 re im)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (log.f64 base)) (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (log.f64 base)) (log.f64 (hypot.f64 re im))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (log.f64 base)) (log.f64 (hypot.f64 re im))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (log.f64 base)) (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (neg.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (pow.f64 (log.f64 base) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -2) (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 base)) (log.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (cbrt.f64 (pow.f64 (log.f64 base) -2))) (cbrt.f64 (pow.f64 (log.f64 base) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 base) -2) (log.f64 (hypot.f64 re im))) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 base) -2) (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))) (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -4)) (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (*.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3) (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 base) (*.f64 (pow.f64 (log.f64 base) -2) (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3) (*.f64 (pow.f64 (log.f64 base) -2) (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3) (pow.f64 (log.f64 base) -2)) (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) -4)) (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (cbrt.f64 (pow.f64 (log.f64 base) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -4)) (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (cbrt.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 base)) (cbrt.f64 (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3) (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))) (neg.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (neg.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (hypot.f64 re im) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (hypot.f64 re im)) (sqrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (hypot.f64 re im)) -1) (*.f64 (sqrt.f64 (hypot.f64 re im)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (hypot.f64 re im))) (neg.f64 (sqrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 re im) (pow.f64 (hypot.f64 re im) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 re im) 0) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 re im) 2/3) (cbrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (cbrt.f64 (neg.f64 (hypot.f64 re im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (hypot.f64 re im))) (neg.f64 (pow.f64 (cbrt.f64 (neg.f64 (hypot.f64 re im))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (hypot.f64 re im))) (fabs.f64 (pow.f64 (hypot.f64 re im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (pow.f64 (hypot.f64 re im) 2/3)) (fabs.f64 (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 re im) (fabs.f64 (pow.f64 (hypot.f64 re im) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (pow.f64 (hypot.f64 re im) 0)) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (hypot.f64 re im)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 re im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (hypot.f64 re im) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (hypot.f64 re im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (hypot.f64 re im)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (hypot.f64 re im) 2) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 re im)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 re im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (hypot.f64 re im)) -1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (hypot.f64 re im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (neg.f64 (cbrt.f64 (hypot.f64 re im))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (hypot.f64 re im) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (hypot.f64 re im) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 re im)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 im re)))))"]],"rules":[["egg-rr",39],["egg-rr",37],["egg-rr",30],["egg-rr",21]],"time":60.968017578125,"type":"rewrite"},{"count":[[235,251]],"inputs":[["(/.f64 1 (pow.f64 (log.f64 base) 2))","(/.f64 1 (pow.f64 (log.f64 base) 2))","(/.f64 1 (pow.f64 (log.f64 base) 2))","(/.f64 1 (pow.f64 (log.f64 base) 2))","(/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2))","(/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2))","(/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2))","(/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2))","(/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(*.f64 (log.f64 base) (log.f64 im))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 2)) (pow.f64 im 2))) (*.f64 (log.f64 base) (log.f64 im)))","(+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 4)) (pow.f64 im 4))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 2)) (pow.f64 im 2))) (*.f64 (log.f64 base) (log.f64 im))))","(+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 4)) (pow.f64 im 4))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 2)) (pow.f64 im 2))) (+.f64 (*.f64 (log.f64 base) (log.f64 im)) (*.f64 1/6 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 6)) (pow.f64 im 6))))))","(*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 1 re))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 2)) (pow.f64 re 2))) (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 1 re)))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 4)) (pow.f64 re 4))) (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 1 re))))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 4)) (pow.f64 re 4))) (+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 1 re)))) (*.f64 1/720 (/.f64 (*.f64 (log.f64 base) (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6)))) (pow.f64 re 6))))))","(*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 -1 re))))","(+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 -1 re)))) (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 2)) (pow.f64 re 2))))","(+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 -1 re)))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 2)) (pow.f64 re 2))) (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 4)) (pow.f64 re 4)))))","(+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 -1 re)))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 4)) (pow.f64 re 4))) (*.f64 1/720 (/.f64 (*.f64 (log.f64 base) (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6)))) (pow.f64 re 6))))))","(*.f64 (log.f64 base) (log.f64 re))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 2)) (pow.f64 re 2))) (*.f64 (log.f64 base) (log.f64 re)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 4)) (pow.f64 re 4))) (*.f64 (log.f64 base) (log.f64 re))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 4)) (pow.f64 re 4))) (+.f64 (*.f64 (log.f64 base) (log.f64 re)) (*.f64 1/6 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 6)) (pow.f64 re 6))))))","(*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 1 im))))","(+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 1 im)))) (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 2)) (pow.f64 im 2))))","(+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 4)) (pow.f64 im 4))) (+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 1 im)))) (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 2)) (pow.f64 im 2)))))","(+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 4)) (pow.f64 im 4))) (+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 1 im)))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 2)) (pow.f64 im 2))) (*.f64 1/720 (/.f64 (*.f64 (log.f64 base) (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6)))) (pow.f64 im 6))))))","(*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 -1 im))))","(+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 -1 im)))) (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 2)) (pow.f64 im 2))))","(+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 4)) (pow.f64 im 4))) (+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 -1 im)))) (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 2)) (pow.f64 im 2)))))","(+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 4)) (pow.f64 im 4))) (+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 -1 im)))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 2)) (pow.f64 im 2))) (*.f64 1/720 (/.f64 (*.f64 (log.f64 base) (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6)))) (pow.f64 im 6))))))","(*.f64 (log.f64 base) (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(*.f64 (log.f64 base) (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(*.f64 (log.f64 base) (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(*.f64 (log.f64 base) (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(*.f64 -1 (*.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 -1 (*.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 -1 (*.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 -1 (*.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(*.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(*.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(*.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(/.f64 (log.f64 im) (log.f64 base))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 base) (pow.f64 im 6)))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 base) (pow.f64 re 6)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 base) (pow.f64 re 6)))))))","(/.f64 (log.f64 re) (log.f64 base))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 base) (pow.f64 re 6)))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 base) (pow.f64 im 6)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 base) (pow.f64 im 6)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base))))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","im","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im)","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) im)))","re","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(*.f64 -1 re)","(+.f64 (*.f64 -1 re) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(+.f64 (*.f64 -1 re) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(+.f64 (*.f64 -1 re) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","re","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","im","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im)","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) im)))","(*.f64 -1 im)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 (*.f64 -1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 (pow.f64 (log.f64 base) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (log.f64 base) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (log.f64 base) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (log.f64 base) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))) -2)","(/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))) -2)","(/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))) -2)","(/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))) -2)","(*.f64 (log.f64 base) (log.f64 im))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 2)) (pow.f64 im 2))) (*.f64 (log.f64 base) (log.f64 im)))","(fma.f64 1/2 (/.f64 (*.f64 (log.f64 base) (*.f64 re re)) (*.f64 im im)) (*.f64 (log.f64 base) (log.f64 im)))","(+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 4)) (pow.f64 im 4))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 2)) (pow.f64 im 2))) (*.f64 (log.f64 base) (log.f64 im))))","(fma.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 4)) (pow.f64 im 4)) (fma.f64 1/2 (/.f64 (*.f64 (log.f64 base) (*.f64 re re)) (*.f64 im im)) (*.f64 (log.f64 base) (log.f64 im))))","(+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 4)) (pow.f64 im 4))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 2)) (pow.f64 im 2))) (+.f64 (*.f64 (log.f64 base) (log.f64 im)) (*.f64 1/6 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 6)) (pow.f64 im 6))))))","(fma.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 4)) (pow.f64 im 4)) (fma.f64 1/2 (/.f64 (*.f64 (log.f64 base) (*.f64 re re)) (*.f64 im im)) (fma.f64 (log.f64 base) (log.f64 im) (*.f64 1/6 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 6)) (pow.f64 im 6))))))","(*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 1 re))))","(*.f64 (log.f64 base) (log.f64 re))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 2)) (pow.f64 re 2))) (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 1 re)))))","(fma.f64 1/2 (/.f64 (*.f64 (log.f64 base) (*.f64 im im)) (*.f64 re re)) (*.f64 (log.f64 base) (log.f64 re)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 4)) (pow.f64 re 4))) (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 1 re))))))","(fma.f64 1/2 (/.f64 (*.f64 (log.f64 base) (*.f64 im im)) (*.f64 re re)) (fma.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 4)) (pow.f64 re 4)) (*.f64 (log.f64 base) (log.f64 re))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 4)) (pow.f64 re 4))) (+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 1 re)))) (*.f64 1/720 (/.f64 (*.f64 (log.f64 base) (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6)))) (pow.f64 re 6))))))","(+.f64 (fma.f64 1/2 (/.f64 (*.f64 (log.f64 base) (*.f64 im im)) (*.f64 re re)) (fma.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 4)) (pow.f64 re 4)) (*.f64 (log.f64 base) (log.f64 re)))) (*.f64 1/720 (/.f64 (*.f64 (log.f64 base) (*.f64 (pow.f64 im 6) 120)) (pow.f64 re 6))))","(*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 -1 re))))","(*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 (neg.f64 re))))","(+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 -1 re)))) (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 2)) (pow.f64 re 2))))","(-.f64 (/.f64 (/.f64 (*.f64 (log.f64 base) (*.f64 im im)) (*.f64 re re)) 2) (*.f64 (log.f64 base) (neg.f64 (log.f64 (neg.f64 re)))))","(+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 -1 re)))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 2)) (pow.f64 re 2))) (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 4)) (pow.f64 re 4)))))","(-.f64 (fma.f64 1/2 (/.f64 (*.f64 (log.f64 base) (*.f64 im im)) (*.f64 re re)) (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 4)) (pow.f64 re 4)))) (*.f64 (log.f64 base) (neg.f64 (log.f64 (neg.f64 re)))))","(+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 -1 re)))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 4)) (pow.f64 re 4))) (*.f64 1/720 (/.f64 (*.f64 (log.f64 base) (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6)))) (pow.f64 re 6))))))","(-.f64 (fma.f64 1/2 (/.f64 (*.f64 (log.f64 base) (*.f64 im im)) (*.f64 re re)) (fma.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 4)) (pow.f64 re 4)) (*.f64 1/720 (/.f64 (*.f64 (log.f64 base) (*.f64 (pow.f64 im 6) 120)) (pow.f64 re 6))))) (*.f64 (log.f64 base) (neg.f64 (log.f64 (neg.f64 re)))))","(*.f64 (log.f64 base) (log.f64 re))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 2)) (pow.f64 re 2))) (*.f64 (log.f64 base) (log.f64 re)))","(fma.f64 1/2 (/.f64 (*.f64 (log.f64 base) (*.f64 im im)) (*.f64 re re)) (*.f64 (log.f64 base) (log.f64 re)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 4)) (pow.f64 re 4))) (*.f64 (log.f64 base) (log.f64 re))))","(fma.f64 1/2 (/.f64 (*.f64 (log.f64 base) (*.f64 im im)) (*.f64 re re)) (fma.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 4)) (pow.f64 re 4)) (*.f64 (log.f64 base) (log.f64 re))))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 4)) (pow.f64 re 4))) (+.f64 (*.f64 (log.f64 base) (log.f64 re)) (*.f64 1/6 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 6)) (pow.f64 re 6))))))","(fma.f64 1/2 (/.f64 (*.f64 (log.f64 base) (*.f64 im im)) (*.f64 re re)) (fma.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 4)) (pow.f64 re 4)) (fma.f64 (log.f64 base) (log.f64 re) (*.f64 1/6 (/.f64 (*.f64 (log.f64 base) (pow.f64 im 6)) (pow.f64 re 6))))))","(*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 1 im))))","(*.f64 (log.f64 base) (log.f64 im))","(+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 1 im)))) (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 2)) (pow.f64 im 2))))","(fma.f64 1/2 (/.f64 (*.f64 (log.f64 base) (*.f64 re re)) (*.f64 im im)) (*.f64 (log.f64 base) (log.f64 im)))","(+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 4)) (pow.f64 im 4))) (+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 1 im)))) (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 2)) (pow.f64 im 2)))))","(fma.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 4)) (pow.f64 im 4)) (fma.f64 1/2 (/.f64 (*.f64 (log.f64 base) (*.f64 re re)) (*.f64 im im)) (*.f64 (log.f64 base) (log.f64 im))))","(+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 4)) (pow.f64 im 4))) (+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 1 im)))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 2)) (pow.f64 im 2))) (*.f64 1/720 (/.f64 (*.f64 (log.f64 base) (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6)))) (pow.f64 im 6))))))","(+.f64 (fma.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 4)) (pow.f64 im 4)) (fma.f64 1/2 (/.f64 (*.f64 (log.f64 base) (*.f64 re re)) (*.f64 im im)) (*.f64 (log.f64 base) (log.f64 im)))) (*.f64 1/720 (/.f64 (*.f64 (log.f64 base) (*.f64 (pow.f64 re 6) 120)) (pow.f64 im 6))))","(*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 -1 im))))","(*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 (neg.f64 im))))","(+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 -1 im)))) (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 2)) (pow.f64 im 2))))","(-.f64 (/.f64 (/.f64 (*.f64 (log.f64 base) (*.f64 re re)) (*.f64 im im)) 2) (*.f64 (log.f64 base) (neg.f64 (log.f64 (neg.f64 im)))))","(+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 4)) (pow.f64 im 4))) (+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 -1 im)))) (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 2)) (pow.f64 im 2)))))","(fma.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 4)) (pow.f64 im 4)) (-.f64 (/.f64 (/.f64 (*.f64 (log.f64 base) (*.f64 re re)) (*.f64 im im)) 2) (*.f64 (log.f64 base) (neg.f64 (log.f64 (neg.f64 im))))))","(+.f64 (*.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 4)) (pow.f64 im 4))) (+.f64 (*.f64 -1 (*.f64 (log.f64 base) (log.f64 (/.f64 -1 im)))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 2)) (pow.f64 im 2))) (*.f64 1/720 (/.f64 (*.f64 (log.f64 base) (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6)))) (pow.f64 im 6))))))","(fma.f64 -1/4 (/.f64 (*.f64 (log.f64 base) (pow.f64 re 4)) (pow.f64 im 4)) (-.f64 (fma.f64 1/2 (/.f64 (*.f64 (log.f64 base) (*.f64 re re)) (*.f64 im im)) (*.f64 1/720 (/.f64 (*.f64 (log.f64 base) (*.f64 (pow.f64 re 6) 120)) (pow.f64 im 6)))) (*.f64 (log.f64 base) (neg.f64 (log.f64 (neg.f64 im))))))","(*.f64 (log.f64 base) (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(*.f64 (log.f64 base) (log.f64 (hypot.f64 im re)))","(*.f64 (log.f64 base) (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(*.f64 (log.f64 base) (log.f64 (hypot.f64 im re)))","(*.f64 (log.f64 base) (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(*.f64 (log.f64 base) (log.f64 (hypot.f64 im re)))","(*.f64 (log.f64 base) (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(*.f64 (log.f64 base) (log.f64 (hypot.f64 im re)))","(*.f64 -1 (*.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 (log.f64 base) (log.f64 (hypot.f64 im re)))","(*.f64 -1 (*.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 (log.f64 base) (log.f64 (hypot.f64 im re)))","(*.f64 -1 (*.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 (log.f64 base) (log.f64 (hypot.f64 im re)))","(*.f64 -1 (*.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 (log.f64 base) (log.f64 (hypot.f64 im re)))","(*.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))) (log.f64 (hypot.f64 im re)))","(*.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))) (log.f64 (hypot.f64 im re)))","(*.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))) (log.f64 (hypot.f64 im re)))","(*.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))) (log.f64 (hypot.f64 im re)))","(/.f64 (log.f64 im) (log.f64 base))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (/.f64 (*.f64 1/2 (*.f64 re re)) (*.f64 (log.f64 base) (*.f64 im im))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 base) (pow.f64 im 4)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 base) (pow.f64 im 6)))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (fma.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 base) (pow.f64 im 6))) (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base)))","(/.f64 (log.f64 re) (log.f64 base))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (/.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (log.f64 base) (*.f64 re re))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(+.f64 (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (/.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (log.f64 base) (*.f64 re re)))) (/.f64 (log.f64 re) (log.f64 base)))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 base) (pow.f64 re 6)))))))","(fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (+.f64 (/.f64 (log.f64 re) (log.f64 base)) (fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 base) (*.f64 re re))) (/.f64 (*.f64 (*.f64 (pow.f64 im 6) 120) 1/720) (*.f64 (log.f64 base) (pow.f64 re 6))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base)))","(/.f64 (neg.f64 (neg.f64 (log.f64 (neg.f64 re)))) (log.f64 base))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(-.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (log.f64 base) (*.f64 re re))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (log.f64 base)))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (-.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (log.f64 base) (*.f64 re re))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (log.f64 base))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 base) (pow.f64 re 6)))))))","(fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (-.f64 (fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 base) (*.f64 re re))) (/.f64 (*.f64 (*.f64 (pow.f64 im 6) 120) 1/720) (*.f64 (log.f64 base) (pow.f64 re 6)))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (log.f64 base))))","(/.f64 (log.f64 re) (log.f64 base))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (/.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (log.f64 base) (*.f64 re re))))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(+.f64 (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (/.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (log.f64 base) (*.f64 re re)))) (/.f64 (log.f64 re) (log.f64 base)))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 base) (pow.f64 re 6)))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (fma.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 base) (pow.f64 re 6))) (/.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (log.f64 base) (*.f64 re re))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base)))","(/.f64 (log.f64 im) (log.f64 base))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (/.f64 (*.f64 1/2 (*.f64 re re)) (*.f64 (log.f64 base) (*.f64 im im))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 base) (pow.f64 im 4)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 base) (pow.f64 im 6)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (fma.f64 1/720 (/.f64 (*.f64 (pow.f64 re 6) 120) (*.f64 (log.f64 base) (pow.f64 im 6))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base)))","(/.f64 (neg.f64 (log.f64 (neg.f64 im))) (neg.f64 (log.f64 base)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base))))","(fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (neg.f64 (log.f64 base))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base)))))","(fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (fma.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (neg.f64 (log.f64 base)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 base) (pow.f64 im 6)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base))))))","(fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (-.f64 (fma.f64 1/720 (/.f64 (*.f64 (pow.f64 re 6) 120) (*.f64 (log.f64 base) (pow.f64 im 6))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 base) (pow.f64 im 4)))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (log.f64 base))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (hypot.f64 im re)) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (hypot.f64 im re)) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (hypot.f64 im re)) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (hypot.f64 im re)) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","im","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im)","(fma.f64 1/2 (/.f64 (*.f64 re re) im) im)","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) im)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) (fma.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5)) im)))","re","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) re)","(fma.f64 1/2 (/.f64 (*.f64 im im) re) re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (fma.f64 1/2 (/.f64 (*.f64 im im) re) re) (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (+.f64 re (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3)))))","(*.f64 -1 re)","(neg.f64 re)","(+.f64 (*.f64 -1 re) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(-.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) re)","(+.f64 (*.f64 -1 re) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(-.f64 (fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re)) re)","(+.f64 (*.f64 -1 re) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(-.f64 (fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re))) re)","re","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) re)","(fma.f64 1/2 (/.f64 (*.f64 im im) re) re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (fma.f64 1/2 (/.f64 (*.f64 im im) re) re) (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (+.f64 re (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3)))))","im","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im)","(fma.f64 1/2 (/.f64 (*.f64 re re) im) im)","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) im)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) (fma.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5)) im)))","(*.f64 -1 im)","(neg.f64 im)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))","(fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(fma.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im)))","(+.f64 (*.f64 -1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))","(fma.f64 -1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5)) (fma.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im))))"]],"time":409.928955078125,"type":"simplify"},{"compiler":[[5477,2746]],"time":55.64306640625,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))) 2))","fresh",0.8971217286536596],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 base) -2))) 2)))","fresh",0.780821691895219],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (/.f64 1 (pow.f64 (log.f64 base) 2)))","fresh",0.5046463867581884],["(pow.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) 3)","fresh",0.8518679688852175],["(*.f64 (*.f64 (log.f64 (*.f64 (pow.f64 (hypot.f64 re im) 2/3) (cbrt.f64 (hypot.f64 re im)))) (log.f64 base)) (pow.f64 (log.f64 base) -2))","fresh",0.4762687988422101],["(*.f64 (log.f64 base) (*.f64 (pow.f64 (log.f64 base) -2) (log.f64 (hypot.f64 re im))))","fresh",0.46492011722130433],["(*.f64 (*.f64 (*.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 base)) (cbrt.f64 (log.f64 (hypot.f64 re im)))) (pow.f64 (log.f64 base) -2))","fresh",15.561644335599393],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -4)) (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))","fresh",0.5349389160635145],["(*.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (cbrt.f64 (pow.f64 (log.f64 base) -2))) (cbrt.f64 (pow.f64 (log.f64 base) -4)))","fresh",0.5574189453688406],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (hypot.f64 re im)))","next",0.42806625976844204]],"compiler":[[23,13],[25,18],[17,12],[13,10],[22,14],[15,10],[23,14],[22,15],[22,15],[12,9],[23,13],[25,18],[17,12],[13,10],[22,14],[15,10],[23,14],[22,15],[22,15],[12,9]],"count":[[253,10]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[251,10],"picked":[1,0]}],"min-error":[0.0234375],"time":68.405029296875,"type":"prune"},{"compiler":[[29,12]],"locations":[["(hypot.f64 re im)",0.0078125,false],["(/.f64 1 (log.f64 base))",0.2734375,true],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (hypot.f64 re im)))",0.40234375,true]],"time":7.47900390625,"type":"localize"},{"count":[[2,44]],"series":[["(/.f64 1 (log.f64 base))","base","-inf",0.362060546875],["(/.f64 1 (log.f64 base))","base","inf",0.35791015625],["(/.f64 1 (log.f64 base))","base","0",0.31494140625],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (hypot.f64 re im)))","im","-inf",0.260986328125],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (hypot.f64 re im)))","im","inf",0.326171875],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (hypot.f64 re im)))","im","0",0.233154296875],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (hypot.f64 re im)))","re","-inf",0.22509765625],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (hypot.f64 re im)))","re","inf",0.251953125],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (hypot.f64 re im)))","re","0",0.2119140625],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (hypot.f64 re im)))","base","-inf",0.222900390625],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (hypot.f64 re im)))","base","inf",0.19189453125],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (hypot.f64 re im)))","base","0",0.248046875]],"time":3.39404296875,"type":"series"},{"count":[[2,89]],"inputs":[["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (hypot.f64 re im)))","(/.f64 1 (log.f64 base))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 0) (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (*.f64 0 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 base) 2/3)) (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) -1) (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (cbrt.f64 (log.f64 base))) (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) -1) (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (neg.f64 (log.f64 base)))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -1/3) (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 base)) (log.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3) (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 base))) (cbrt.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (log.f64 base)) (pow.f64 (log.f64 (hypot.f64 re im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 base) 2/3)) (pow.f64 (log.f64 base) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 base)) (cbrt.f64 (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (/.f64 -1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) -1) (/.f64 -1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (log.f64 base)) (neg.f64 (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2))) (/.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 base) -1/3)) (/.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 base) -1/3)) (/.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (pow.f64 (log.f64 base) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (log.f64 base))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 base))) (cbrt.f64 (pow.f64 (log.f64 base) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 base))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (pow.f64 (log.f64 (hypot.f64 re im)) 2/3)) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3) (cbrt.f64 (log.f64 (hypot.f64 re im)))) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 base) 2/3)) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 base) 2/3))) (cbrt.f64 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 base))) 1) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) -1) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (log.f64 base))) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 base))) 1) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 base)))) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 (log.f64 base)) (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 -1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (log.f64 base)) 0) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (log.f64 base)) (*.f64 (/.f64 1 (log.f64 base)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (log.f64 base)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (log.f64 base)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -1/3) (/.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2))) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 base) -1/3)) (cbrt.f64 (log.f64 base))) (/.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2))) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 base) -1/3)) 1) (/.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2))) (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -1/3) (cbrt.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (pow.f64 (log.f64 base) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 base) -1/3)) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2))) (neg.f64 (pow.f64 (log.f64 base) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2/3))) (/.f64 (pow.f64 (log.f64 base) -1/3) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (log.f64 base)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (log.f64 base) -1/3) (cbrt.f64 (pow.f64 (log.f64 base) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 base) -1/3) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) -1) (cbrt.f64 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 base) -1/3)) -1) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2))) (cbrt.f64 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 base) -1/3)) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) 3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) -1/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 base) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 base)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 base) -3))))))"]],"rules":[["egg-rr",37],["egg-rr",52]],"time":29.587890625,"type":"rewrite"},{"count":[[133,137]],"inputs":[["(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 im) (log.f64 base))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 base) (pow.f64 im 6)))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 base) (pow.f64 re 6)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 base) (pow.f64 re 6)))))))","(/.f64 (log.f64 re) (log.f64 base))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 base) (pow.f64 re 6)))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 base) (pow.f64 im 6)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 base) (pow.f64 im 6)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base))))))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (hypot.f64 im re)) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (hypot.f64 im re)) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (hypot.f64 im re)) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (hypot.f64 im re)) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 (log.f64 im) (log.f64 base))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))))","(fma.f64 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 base)) 1/2 (/.f64 (log.f64 im) (log.f64 base)))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (fma.f64 1/2 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 base)) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 base) (pow.f64 im 4)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 base) (pow.f64 im 6)))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (fma.f64 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 base) (pow.f64 im 6))) 1/6 (fma.f64 1/2 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 base)) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base)))","(/.f64 (log.f64 re) (log.f64 base))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 base) (*.f64 re re))) (/.f64 (log.f64 re) (log.f64 base)))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 base) (*.f64 re re))) (/.f64 (log.f64 re) (log.f64 base))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 base) (pow.f64 re 6)))))))","(+.f64 (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 base) (*.f64 re re))) (/.f64 (log.f64 re) (log.f64 base)))) (/.f64 (*.f64 (*.f64 (pow.f64 im 6) 120) 1/720) (*.f64 (log.f64 base) (pow.f64 re 6))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base)))","(/.f64 (neg.f64 (log.f64 (neg.f64 re))) (neg.f64 (log.f64 base)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 base) (*.f64 re re))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (neg.f64 (log.f64 base))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 base) (*.f64 re re))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (neg.f64 (log.f64 base)))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 base) (pow.f64 re 6)))))))","(fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (-.f64 (fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 base) (*.f64 re re))) (/.f64 (*.f64 (*.f64 (pow.f64 im 6) 120) 1/720) (*.f64 (log.f64 base) (pow.f64 re 6)))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (log.f64 base))))","(/.f64 (log.f64 re) (log.f64 base))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 base) (*.f64 re re))) (/.f64 (log.f64 re) (log.f64 base)))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 base) (*.f64 re re))) (/.f64 (log.f64 re) (log.f64 base))))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 base) (pow.f64 re 6)))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))))","(+.f64 (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (/.f64 (log.f64 re) (log.f64 base))) (fma.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 base) (pow.f64 re 6))) (/.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (log.f64 base) (*.f64 re re)))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base)))","(/.f64 (log.f64 im) (log.f64 base))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))))","(fma.f64 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 base)) 1/2 (/.f64 (log.f64 im) (log.f64 base)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (fma.f64 1/2 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 base)) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 base) (pow.f64 im 4)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 base) (pow.f64 im 6)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (fma.f64 1/2 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 base)) (fma.f64 1/720 (/.f64 (*.f64 (pow.f64 re 6) 120) (*.f64 (log.f64 base) (pow.f64 im 6))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base)))","(/.f64 (neg.f64 (log.f64 (neg.f64 im))) (neg.f64 (log.f64 base)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base))))","(fma.f64 1/2 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 base)) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (neg.f64 (log.f64 base))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base)))))","(fma.f64 1/2 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 base)) (fma.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (neg.f64 (log.f64 base)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 base) (pow.f64 im 6)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base))))))","(fma.f64 1/2 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 base)) (fma.f64 1/720 (/.f64 (*.f64 (pow.f64 re 6) 120) (*.f64 (log.f64 base) (pow.f64 im 6))) (fma.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (neg.f64 (log.f64 base))))))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (log.f64 base))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))"]],"time":154.048095703125,"type":"simplify"},{"compiler":[[3691,1860]],"time":37.825927734375,"type":"eval"},{"alts":[["(*.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (cbrt.f64 (log.f64 base))) (log.f64 (hypot.f64 re im)))","fresh",0.4994125976844202],["(*.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))) 2))","fresh",0.8971217286536596],["(*.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -3) (log.f64 (hypot.f64 re im)))","fresh",0.6710702637479348],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (/.f64 1 (pow.f64 (log.f64 base) 2)))","fresh",0.5046463867581884],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","next",0.4209175293053261],["(*.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))) (log.f64 (hypot.f64 re im)))","fresh",0.44339755861065216],["(*.f64 (*.f64 (log.f64 (*.f64 (pow.f64 (hypot.f64 re im) 2/3) (cbrt.f64 (hypot.f64 re im)))) (log.f64 base)) (pow.f64 (log.f64 base) -2))","fresh",0.4762687988422101],["(*.f64 (log.f64 base) (*.f64 (pow.f64 (log.f64 base) -2) (log.f64 (hypot.f64 re im))))","fresh",0.46492011722130433],["(*.f64 (*.f64 (*.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 base)) (cbrt.f64 (log.f64 (hypot.f64 re im)))) (pow.f64 (log.f64 base) -2))","fresh",15.561644335599393]],"compiler":[[17,12],[23,13],[13,10],[17,12],[19,13],[25,13],[22,14],[15,10],[23,14],[17,12],[23,13],[13,10],[17,12],[19,13],[25,13],[22,14],[15,10],[23,14]],"count":[[216,9]],"kept":[{"done":[0,0],"fresh":[9,5],"new":[206,4],"picked":[1,0]}],"min-error":[0.0078125],"time":52.18896484375,"type":"prune"},{"compiler":[[63,26]],"locations":[["(*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))",0.24609375,true],["(/.f64 1 (log.f64 base))",0.2734375,false],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))",0.40234375,true],["(pow.f64 (hypot.f64 re im) 2/3)",6.030003997091688,true]],"time":25.033935546875,"type":"localize"},{"count":[[3,84]],"series":[["(*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))","im","-inf",0.197998046875],["(*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))","im","inf",0.16796875],["(*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))","im","0",0.175048828125],["(*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))","re","-inf",0.197021484375],["(*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))","re","inf",0.1708984375],["(*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))","re","0",0.205078125],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","im","-inf",0.35986328125],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","im","inf",0.381103515625],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","im","0",0.469970703125],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","re","-inf",0.390869140625],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","re","inf",0.39306640625],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","re","0",0.487060546875],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","base","-inf",0.364013671875],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","base","inf",0.39306640625],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","base","0",4.876953125],["(pow.f64 (hypot.f64 re im) 2/3)","im","-inf",0.35302734375],["(pow.f64 (hypot.f64 re im) 2/3)","im","inf",0.64501953125],["(pow.f64 (hypot.f64 re im) 2/3)","im","0",4.6650390625],["(pow.f64 (hypot.f64 re im) 2/3)","re","-inf",0.326904296875],["(pow.f64 (hypot.f64 re im) 2/3)","re","inf",0.76611328125],["(pow.f64 (hypot.f64 re im) 2/3)","re","0",0.72900390625]],"time":17.10595703125,"type":"series"},{"count":[[3,125]],"inputs":[["(pow.f64 (hypot.f64 re im) 2/3)","(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","(*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (hypot.f64 re im) 2/3) 0) (pow.f64 (hypot.f64 re im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (hypot.f64 re im) 2/3) 1/3) (*.f64 (pow.f64 (hypot.f64 re im) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (hypot.f64 re im) 2/3) 2/3) (*.f64 (pow.f64 (hypot.f64 re im) 2/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (hypot.f64 re im) 2/3) (*.f64 (pow.f64 (hypot.f64 re im) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (hypot.f64 re im) 2/3)) (pow.f64 (hypot.f64 re im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (pow.f64 (hypot.f64 re im) 2/3)) (*.f64 2/3 (pow.f64 (hypot.f64 re im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (pow.f64 (hypot.f64 re im) 2/3)) (*.f64 1/3 (pow.f64 (hypot.f64 re im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (hypot.f64 re im) 2/3) (*.f64 0 (pow.f64 (hypot.f64 re im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (hypot.f64 re im))) (cbrt.f64 (neg.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2/3) (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (hypot.f64 re im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 re im) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (hypot.f64 re im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) (pow.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) 4) (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (hypot.f64 re im) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) (+.f64 2 3)) (cbrt.f64 (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (hypot.f64 re im) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) (*.f64 2 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) (+.f64 1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) (*.f64 1/6 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) (*.f64 1/2 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 re im) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 re im)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (hypot.f64 re im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (hypot.f64 re im) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 0) (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1/3) (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3) (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (*.f64 2/3 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (*.f64 1/3 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (*.f64 0 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3) (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 base)) (log.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 base))) (cbrt.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (log.f64 base)) (pow.f64 (log.f64 (hypot.f64 re im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -1/3) (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 base) 2/3)) (pow.f64 (log.f64 base) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 base)) (cbrt.f64 (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (log.f64 base))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (/.f64 -1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 base))) (cbrt.f64 (pow.f64 (log.f64 base) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 base))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3) (cbrt.f64 (log.f64 (hypot.f64 re im)))) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (pow.f64 (log.f64 (hypot.f64 re im)) 2/3)) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3)) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 base))) 1) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 base) 2/3)) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 base) 2/3))) (cbrt.f64 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 base))) 1) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) -1) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (log.f64 base))) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 base)))) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 (log.f64 base)) (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 -1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (hypot.f64 re im) 0) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (hypot.f64 re im) 1/3) (*.f64 (hypot.f64 re im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (hypot.f64 re im) 2/3) (*.f64 (hypot.f64 re im) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (hypot.f64 re im) (*.f64 (hypot.f64 re im) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (hypot.f64 re im)) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (hypot.f64 re im)) (*.f64 2/3 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (hypot.f64 re im)) (*.f64 1/3 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (hypot.f64 re im) (*.f64 0 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (hypot.f64 re im)) (sqrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (hypot.f64 re im)) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (hypot.f64 re im)) 4) (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (hypot.f64 re im)) 4) (hypot.f64 re im))) (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)) 4) (cbrt.f64 (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (hypot.f64 re im)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)) (pow.f64 (cbrt.f64 (hypot.f64 re im)) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (hypot.f64 re im)) -1) (*.f64 (sqrt.f64 (hypot.f64 re im)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (sqrt.f64 (hypot.f64 re im))) (*.f64 -1 (sqrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (hypot.f64 re im))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 re im) (pow.f64 (hypot.f64 re im) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 re im) 0) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 re im) 2/3) (cbrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 re im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) (+.f64 2 3)) (pow.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) 4) (pow.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (hypot.f64 re im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) (+.f64 1/6 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) (+.f64 1/3 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) (*.f64 1/6 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) (*.f64 1/2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 re im) (*.f64 2 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 re im)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 re im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (hypot.f64 re im)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (hypot.f64 re im) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (hypot.f64 re im) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 re im)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 im re)))))"]],"rules":[["egg-rr",46],["egg-rr",47],["egg-rr",32]],"time":30.8251953125,"type":"rewrite"},{"count":[[209,223]],"inputs":[["(pow.f64 (pow.f64 im 2) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (pow.f64 (pow.f64 im 2) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3) (pow.f64 re 4))) (pow.f64 (pow.f64 im 2) 1/3)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (*.f64 5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 16)) 1/3) (pow.f64 re 6))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3) (pow.f64 re 4))) (pow.f64 (pow.f64 im 2) 1/3))))","(pow.f64 (pow.f64 re 2) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (pow.f64 (pow.f64 re 2) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 im 4)) (*.f64 -1/6 (pow.f64 im 4))))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 im 4)) (*.f64 -1/6 (pow.f64 im 4)))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 16)) 1/3) (+.f64 (*.f64 1/162 (pow.f64 im 6)) (+.f64 (*.f64 -1/18 (pow.f64 im 6)) (*.f64 1/1080 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))))))))))","(pow.f64 (pow.f64 re 2) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (pow.f64 (pow.f64 re 2) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 im 4)) (*.f64 -1/6 (pow.f64 im 4))))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 im 4)) (*.f64 -1/6 (pow.f64 im 4)))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 16)) 1/3) (+.f64 (*.f64 1/162 (pow.f64 im 6)) (+.f64 (*.f64 -1/18 (pow.f64 im 6)) (*.f64 1/1080 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))))))))))","(pow.f64 (pow.f64 re 2) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (pow.f64 (pow.f64 re 2) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (pow.f64 im 4)))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (pow.f64 im 4))) (*.f64 5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 16)) 1/3) (pow.f64 im 6))))))","(pow.f64 (pow.f64 im 2) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (pow.f64 (pow.f64 im 2) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (*.f64 (+.f64 (*.f64 1/18 (pow.f64 re 4)) (*.f64 -1/6 (pow.f64 re 4))) (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 16)) 1/3) (+.f64 (*.f64 1/1080 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6)))) (+.f64 (*.f64 -1/18 (pow.f64 re 6)) (*.f64 1/162 (pow.f64 re 6))))) (*.f64 (+.f64 (*.f64 1/18 (pow.f64 re 4)) (*.f64 -1/6 (pow.f64 re 4))) (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3)))))","(pow.f64 (pow.f64 im 2) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (pow.f64 (pow.f64 im 2) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (*.f64 (+.f64 (*.f64 1/18 (pow.f64 re 4)) (*.f64 -1/6 (pow.f64 re 4))) (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 16)) 1/3) (+.f64 (*.f64 1/1080 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6)))) (+.f64 (*.f64 -1/18 (pow.f64 re 6)) (*.f64 1/162 (pow.f64 re 6))))) (*.f64 (+.f64 (*.f64 1/18 (pow.f64 re 4)) (*.f64 -1/6 (pow.f64 re 4))) (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 im) (log.f64 base))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 base) (pow.f64 im 6)))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 base) (pow.f64 re 6)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 base) (pow.f64 re 6)))))))","(/.f64 (log.f64 re) (log.f64 base))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 base) (pow.f64 re 6)))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 base) (pow.f64 im 6)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 base) (pow.f64 im 6)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base))))))","im","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im)","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) im)))","re","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(*.f64 -1 re)","(+.f64 (*.f64 -1 re) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(+.f64 (*.f64 -1 re) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(+.f64 (*.f64 -1 re) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","re","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","im","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im)","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) im)))","(*.f64 -1 im)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 (*.f64 -1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (pow.f64 im 2) 1/3)","(cbrt.f64 (*.f64 im im))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (pow.f64 (pow.f64 im 2) 1/3))","(fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (cbrt.f64 (*.f64 im im)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3) (pow.f64 re 4))) (pow.f64 (pow.f64 im 2) 1/3)))","(fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (fma.f64 -1/9 (*.f64 (cbrt.f64 (pow.f64 im -10)) (pow.f64 re 4)) (cbrt.f64 (*.f64 im im))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (*.f64 5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 16)) 1/3) (pow.f64 re 6))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3) (pow.f64 re 4))) (pow.f64 (pow.f64 im 2) 1/3))))","(fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (fma.f64 5/81 (*.f64 (cbrt.f64 (pow.f64 im -16)) (pow.f64 re 6)) (fma.f64 -1/9 (*.f64 (cbrt.f64 (pow.f64 im -10)) (pow.f64 re 4)) (cbrt.f64 (*.f64 im im)))))","(pow.f64 (pow.f64 re 2) 1/3)","(cbrt.f64 (*.f64 re re))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (pow.f64 (pow.f64 re 2) 1/3))","(fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 re -4)) (*.f64 im im)) (cbrt.f64 (*.f64 re re)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 im 4)) (*.f64 -1/6 (pow.f64 im 4))))))","(+.f64 (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 re -4)) (*.f64 im im)) (cbrt.f64 (*.f64 re re))) (*.f64 (cbrt.f64 (pow.f64 re -10)) (*.f64 (pow.f64 im 4) -1/9)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 im 4)) (*.f64 -1/6 (pow.f64 im 4)))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 16)) 1/3) (+.f64 (*.f64 1/162 (pow.f64 im 6)) (+.f64 (*.f64 -1/18 (pow.f64 im 6)) (*.f64 1/1080 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))))))))))","(+.f64 (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 re -4)) (*.f64 im im)) (cbrt.f64 (*.f64 re re))) (fma.f64 (cbrt.f64 (pow.f64 re -10)) (*.f64 (pow.f64 im 4) -1/9) (*.f64 (cbrt.f64 (pow.f64 re -16)) (+.f64 (*.f64 (pow.f64 im 6) -4/81) (*.f64 1/1080 (*.f64 (pow.f64 im 6) 120))))))","(pow.f64 (pow.f64 re 2) 1/3)","(cbrt.f64 (*.f64 re re))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (pow.f64 (pow.f64 re 2) 1/3))","(fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 re -4)) (*.f64 im im)) (cbrt.f64 (*.f64 re re)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 im 4)) (*.f64 -1/6 (pow.f64 im 4))))))","(+.f64 (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 re -4)) (*.f64 im im)) (cbrt.f64 (*.f64 re re))) (*.f64 (cbrt.f64 (pow.f64 re -10)) (*.f64 (pow.f64 im 4) -1/9)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 im 4)) (*.f64 -1/6 (pow.f64 im 4)))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 16)) 1/3) (+.f64 (*.f64 1/162 (pow.f64 im 6)) (+.f64 (*.f64 -1/18 (pow.f64 im 6)) (*.f64 1/1080 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))))))))))","(+.f64 (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 re -4)) (*.f64 im im)) (cbrt.f64 (*.f64 re re))) (fma.f64 (cbrt.f64 (pow.f64 re -10)) (*.f64 (pow.f64 im 4) -1/9) (*.f64 (cbrt.f64 (pow.f64 re -16)) (+.f64 (*.f64 (pow.f64 im 6) -4/81) (*.f64 1/1080 (*.f64 (pow.f64 im 6) 120))))))","(pow.f64 (pow.f64 re 2) 1/3)","(cbrt.f64 (*.f64 re re))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (pow.f64 (pow.f64 re 2) 1/3))","(fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 re -4)) (*.f64 im im)) (cbrt.f64 (*.f64 re re)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (pow.f64 im 4)))))","(+.f64 (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 re -4)) (*.f64 im im)) (cbrt.f64 (*.f64 re re))) (*.f64 -1/9 (*.f64 (cbrt.f64 (pow.f64 re -10)) (pow.f64 im 4))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (pow.f64 im 4))) (*.f64 5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 16)) 1/3) (pow.f64 im 6))))))","(+.f64 (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 re -4)) (*.f64 im im)) (cbrt.f64 (*.f64 re re))) (fma.f64 -1/9 (*.f64 (cbrt.f64 (pow.f64 re -10)) (pow.f64 im 4)) (*.f64 5/81 (*.f64 (cbrt.f64 (pow.f64 re -16)) (pow.f64 im 6)))))","(pow.f64 (pow.f64 im 2) 1/3)","(cbrt.f64 (*.f64 im im))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (pow.f64 (pow.f64 im 2) 1/3))","(fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (cbrt.f64 (*.f64 im im)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (*.f64 (+.f64 (*.f64 1/18 (pow.f64 re 4)) (*.f64 -1/6 (pow.f64 re 4))) (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3))))","(+.f64 (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (cbrt.f64 (*.f64 im im))) (*.f64 (*.f64 (pow.f64 re 4) -1/9) (cbrt.f64 (pow.f64 im -10))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 16)) 1/3) (+.f64 (*.f64 1/1080 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6)))) (+.f64 (*.f64 -1/18 (pow.f64 re 6)) (*.f64 1/162 (pow.f64 re 6))))) (*.f64 (+.f64 (*.f64 1/18 (pow.f64 re 4)) (*.f64 -1/6 (pow.f64 re 4))) (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3)))))","(+.f64 (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (cbrt.f64 (*.f64 im im))) (fma.f64 (cbrt.f64 (pow.f64 im -16)) (fma.f64 1/1080 (*.f64 (pow.f64 re 6) 120) (*.f64 (pow.f64 re 6) -4/81)) (*.f64 (*.f64 (pow.f64 re 4) -1/9) (cbrt.f64 (pow.f64 im -10)))))","(pow.f64 (pow.f64 im 2) 1/3)","(cbrt.f64 (*.f64 im im))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (pow.f64 (pow.f64 im 2) 1/3))","(fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (cbrt.f64 (*.f64 im im)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (*.f64 (+.f64 (*.f64 1/18 (pow.f64 re 4)) (*.f64 -1/6 (pow.f64 re 4))) (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3))))","(+.f64 (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (cbrt.f64 (*.f64 im im))) (*.f64 (*.f64 (pow.f64 re 4) -1/9) (cbrt.f64 (pow.f64 im -10))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 16)) 1/3) (+.f64 (*.f64 1/1080 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6)))) (+.f64 (*.f64 -1/18 (pow.f64 re 6)) (*.f64 1/162 (pow.f64 re 6))))) (*.f64 (+.f64 (*.f64 1/18 (pow.f64 re 4)) (*.f64 -1/6 (pow.f64 re 4))) (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3)))))","(+.f64 (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (cbrt.f64 (*.f64 im im))) (fma.f64 (cbrt.f64 (pow.f64 im -16)) (fma.f64 1/1080 (*.f64 (pow.f64 re 6) 120) (*.f64 (pow.f64 re 6) -4/81)) (*.f64 (*.f64 (pow.f64 re 4) -1/9) (cbrt.f64 (pow.f64 im -10)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (hypot.f64 re im)) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (hypot.f64 re im)) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (hypot.f64 re im)) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (hypot.f64 re im)) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 (log.f64 im) (log.f64 base))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (/.f64 (*.f64 1/2 (*.f64 re re)) (*.f64 (log.f64 base) (*.f64 im im))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 base) (pow.f64 im 4)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 base) (pow.f64 im 6)))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (fma.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 base) (pow.f64 im 6))) (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base)))","(/.f64 (log.f64 re) (log.f64 base))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (/.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (log.f64 base) (*.f64 re re))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(+.f64 (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (/.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (log.f64 base) (*.f64 re re)))) (/.f64 (log.f64 re) (log.f64 base)))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 base) (pow.f64 re 6)))))))","(fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (+.f64 (/.f64 (log.f64 re) (log.f64 base)) (fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 base) (*.f64 re re))) (/.f64 (*.f64 (*.f64 (pow.f64 im 6) 120) 1/720) (*.f64 (log.f64 base) (pow.f64 re 6))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base)))","(/.f64 (neg.f64 (log.f64 (neg.f64 re))) (neg.f64 (log.f64 base)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(-.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (log.f64 base) (*.f64 re re))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (log.f64 base)))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (-.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (log.f64 base) (*.f64 re re))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (log.f64 base))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 base) (pow.f64 re 6)))))))","(fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (-.f64 (fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 base) (*.f64 re re))) (/.f64 (*.f64 (*.f64 (pow.f64 im 6) 120) 1/720) (*.f64 (log.f64 base) (pow.f64 re 6)))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (log.f64 base))))","(/.f64 (log.f64 re) (log.f64 base))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (/.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (log.f64 base) (*.f64 re re))))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(+.f64 (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (/.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (log.f64 base) (*.f64 re re)))) (/.f64 (log.f64 re) (log.f64 base)))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 base) (pow.f64 re 6)))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (fma.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 base) (pow.f64 re 6))) (/.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (log.f64 base) (*.f64 re re))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base)))","(/.f64 (log.f64 im) (log.f64 base))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (/.f64 (*.f64 1/2 (*.f64 re re)) (*.f64 (log.f64 base) (*.f64 im im))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 base) (pow.f64 im 4)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 base) (pow.f64 im 6)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (fma.f64 1/720 (/.f64 (*.f64 (pow.f64 re 6) 120) (*.f64 (log.f64 base) (pow.f64 im 6))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base)))","(/.f64 (neg.f64 (log.f64 (neg.f64 im))) (neg.f64 (log.f64 base)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base))))","(fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (neg.f64 (log.f64 base))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base)))))","(fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (fma.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (neg.f64 (log.f64 base)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 base) (pow.f64 im 6)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base))))))","(fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (fma.f64 1/720 (/.f64 (*.f64 (pow.f64 re 6) 120) (*.f64 (log.f64 base) (pow.f64 im 6))) (fma.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (neg.f64 (log.f64 base))))))","im","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im)","(fma.f64 1/2 (/.f64 (*.f64 re re) im) im)","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) im)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) (fma.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5)) im)))","re","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) re)","(fma.f64 1/2 (/.f64 (*.f64 im im) re) re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (fma.f64 1/2 (/.f64 (*.f64 im im) re) re) (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (+.f64 re (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3)))))","(*.f64 -1 re)","(neg.f64 re)","(+.f64 (*.f64 -1 re) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(-.f64 (/.f64 (*.f64 -1/2 (*.f64 im im)) re) re)","(+.f64 (*.f64 -1 re) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(-.f64 (fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re)) re)","(+.f64 (*.f64 -1 re) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(-.f64 (fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re))) re)","re","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) re)","(fma.f64 1/2 (/.f64 (*.f64 im im) re) re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (fma.f64 1/2 (/.f64 (*.f64 im im) re) re) (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (+.f64 re (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3)))))","im","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im)","(fma.f64 1/2 (/.f64 (*.f64 re re) im) im)","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) im))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) im)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) (fma.f64 1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5)) im)))","(*.f64 -1 im)","(neg.f64 im)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))","(fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(fma.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im)))","(+.f64 (*.f64 -1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5))) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))","(fma.f64 -1/16 (/.f64 (pow.f64 re 6) (pow.f64 im 5)) (fma.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im))))"]],"time":329.08203125,"type":"simplify"},{"compiler":[[5742,3088]],"time":60.081787109375,"type":"eval"},{"alts":[["(*.f64 (log.f64 base) (*.f64 (pow.f64 (log.f64 base) -2) (log.f64 (hypot.f64 re im))))","fresh",0.46492011722130433],["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (*.f64 (pow.f64 (cbrt.f64 (hypot.f64 re im)) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)))))","fresh",0.5058975586106521],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 base))))","fresh",0.4736900879159782],["(+.f64 (*.f64 2/3 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (*.f64 1/3 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))","fresh",0.5417939453688405],["(*.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))) 2))","fresh",0.8971217286536596],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (/.f64 1 (pow.f64 (log.f64 base) 2)))","fresh",0.5046463867581884],["(*.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","next",0.44863134768442026],["(*.f64 (*.f64 (*.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 base)) (cbrt.f64 (log.f64 (hypot.f64 re im)))) (pow.f64 (log.f64 base) -2))","fresh",15.561644335599393]],"compiler":[[15,10],[24,18],[17,12],[22,12],[23,13],[17,12],[32,17],[23,14],[15,10],[24,18],[17,12],[22,12],[23,13],[17,12],[32,17],[23,14]],"count":[[272,8]],"kept":[{"done":[0,0],"fresh":[8,4],"new":[263,4],"picked":[1,0]}],"min-error":[0],"time":73.6630859375,"type":"prune"},{"compiler":[[113,37]],"locations":[["(/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base))))",0.3483200195368841,true],["(*.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))",0.40234375,true],["(*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))",0.5397262695368841,true],["(pow.f64 (hypot.f64 re im) 2/3)",6.030003997091688,false]],"time":32.263916015625,"type":"localize"},{"count":[[3,60]],"series":[["(/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base))))","base","-inf",0.18994140625],["(/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base))))","base","inf",0.14892578125],["(/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base))))","base","0",0.14599609375],["(*.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","im","-inf",0.251953125],["(*.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","im","inf",0.236083984375],["(*.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","im","0",0.221923828125],["(*.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","re","-inf",0.256103515625],["(*.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","re","inf",0.23291015625],["(*.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","re","0",0.25],["(*.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","base","-inf",0.208984375],["(*.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","base","inf",0.208984375],["(*.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","base","0",0.197021484375],["(*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))","base","-inf",0.383056640625],["(*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))","base","inf",0.35986328125],["(*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))","base","0",0.378173828125]],"time":3.984130859375,"type":"series"},{"count":[[3,265]],"inputs":[["(*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))","(*.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","(/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 base) 2) 1/3) (*.f64 (pow.f64 (log.f64 base) 2) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 base) 2) 2/3) (*.f64 (pow.f64 (log.f64 base) 2) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (pow.f64 (log.f64 base) 2)) (*.f64 2/3 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (pow.f64 (log.f64 base) 2)) (*.f64 1/3 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 base) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (log.f64 base) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 base) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) 2/3) (cbrt.f64 (pow.f64 (log.f64 base) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 base)) (*.f64 (pow.f64 (log.f64 base) 2/3) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 base))) (*.f64 (pow.f64 (log.f64 base) 2/3) (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 base))) (-.f64 0 (*.f64 (pow.f64 (log.f64 base) 2/3) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 base))) (-.f64 (*.f64 (pow.f64 (log.f64 base) 2/3) (neg.f64 (log.f64 base))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) 2/3) (+.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) 2/3) (+.f64 0 (cbrt.f64 (pow.f64 (log.f64 base) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) 2/3) (-.f64 0 (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) 2/3) (-.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 base) 2/3)) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4))) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) 0)) (+.f64 0 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) 0) (+.f64 (pow.f64 (log.f64 base) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) 0) (-.f64 (pow.f64 (log.f64 base) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 base) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 base) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 base) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log.f64 base)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 base) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (log.f64 base) 3)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (log.f64 base))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 base)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 base) 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (log.f64 base) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (log.f64 base) 2/3) (cbrt.f64 (pow.f64 (log.f64 base) 4)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 base) (log.f64 base) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (neg.f64 (log.f64 base)) (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (log.f64 base)) 0 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (/.f64 -1 (log.f64 base)) (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (cbrt.f64 (neg.f64 (log.f64 base))) (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (pow.f64 (log.f64 base) -2) (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (pow.f64 (log.f64 base) 2) (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (neg.f64 (log.f64 base)) (pow.f64 (log.f64 base) 2/3)) 0 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) 0 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 -1 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (cbrt.f64 (/.f64 -1 (log.f64 base))) (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (log.f64 base) (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (log.f64 base)) 0 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (log.f64 base))) 0 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (log.f64 base) 3)) 0 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (log.f64 base) 2) 0 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 base) 0 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (neg.f64 (pow.f64 (log.f64 base) 3)) (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (pow.f64 (log.f64 base) 2/3) (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1 (log.f64 base)) 0 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (neg.f64 (pow.f64 (log.f64 base) 2)) (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (log.f64 base))) (*.f64 (pow.f64 (log.f64 base) 2/3) (neg.f64 (log.f64 base))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (log.f64 base) 2) 1 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (pow.f64 (log.f64 base) 2/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 base)) (*.f64 (pow.f64 (log.f64 base) 2/3) (log.f64 base)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (pow.f64 (log.f64 base) 2)) 0)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 0) (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1/3) (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3) (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (hypot.f64 re im)) 0) (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (*.f64 2/3 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (*.f64 1/3 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (*.f64 0 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (log.f64 (hypot.f64 re im))) (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (*.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (/.f64 1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (log.f64 base)) (pow.f64 (log.f64 (hypot.f64 re im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 base) (*.f64 (pow.f64 (log.f64 base) -2) (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 base) (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 base) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2/3)) (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 base) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (log.f64 base) (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 base) 2/3)) (pow.f64 (pow.f64 (log.f64 base) 2/3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (log.f64 base))) (neg.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3) (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (neg.f64 (log.f64 base)))) (cbrt.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 base)) (log.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (/.f64 -1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (log.f64 base))) (neg.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (log.f64 base) (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 base) 2/3)) (cbrt.f64 (pow.f64 (log.f64 base) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 base) (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (log.f64 base) (log.f64 (hypot.f64 re im))) -1) (neg.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2/3))) (cbrt.f64 (pow.f64 (log.f64 base) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (neg.f64 (log.f64 base)))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 base) 3)) (pow.f64 (log.f64 base) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2/3)) (log.f64 (hypot.f64 re im))) (cbrt.f64 (pow.f64 (log.f64 base) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3) (cbrt.f64 (*.f64 (log.f64 base) (log.f64 (hypot.f64 re im))))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (log.f64 base))) 1) (neg.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (log.f64 (hypot.f64 re im))) 1) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (log.f64 base) (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 base) 2/3)) 1) (cbrt.f64 (pow.f64 (log.f64 base) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 base) (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 base) 4)))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 base))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (log.f64 (hypot.f64 re im)))) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (log.f64 base)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (log.f64 (hypot.f64 re im)))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (log.f64 (hypot.f64 re im)))) (cbrt.f64 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 base) (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 base) 3) (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 base) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (log.f64 base) (log.f64 (hypot.f64 re im)))) (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 2/3)) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 base) (/.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (log.f64 base)))) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (log.f64 base)) (/.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (log.f64 base)))) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (log.f64 base) (cbrt.f64 (neg.f64 (log.f64 base)))) (/.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (log.f64 base)))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (log.f64 base) (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 base) 2/3))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (log.f64 base))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (log.f64 base)) (*.f64 (pow.f64 (log.f64 base) -2) (log.f64 (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (log.f64 base))) (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 (log.f64 base)) (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (log.f64 base)) 1/3) (*.f64 (/.f64 1 (log.f64 base)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (log.f64 base)) 2/3) (*.f64 (/.f64 1 (log.f64 base)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (/.f64 1 (log.f64 base))) (*.f64 2/3 (/.f64 1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (/.f64 1 (log.f64 base))) (*.f64 1/3 (/.f64 1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (log.f64 base)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (log.f64 base)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (log.f64 base)) (/.f64 2 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 base) (pow.f64 (log.f64 base) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (cbrt.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -2) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (cbrt.f64 (/.f64 1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 base)) (pow.f64 (pow.f64 (log.f64 base) 2/3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 base)) (neg.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (log.f64 base))) (log.f64 base)) (cbrt.f64 (/.f64 -1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 base)) (log.f64 base)) (cbrt.f64 (/.f64 1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 base)) (+.f64 0 (neg.f64 (pow.f64 (log.f64 base) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (+.f64 0 (cbrt.f64 (/.f64 1 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (log.f64 base))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 base) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (cbrt.f64 (neg.f64 (log.f64 base))) (log.f64 base))) (cbrt.f64 (/.f64 1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 base) -2))) (cbrt.f64 (/.f64 -1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (cbrt.f64 (log.f64 base)) (log.f64 base))) (cbrt.f64 (/.f64 -1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 base))) (neg.f64 (pow.f64 (pow.f64 (log.f64 base) 2/3) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2/3)) (pow.f64 (pow.f64 (log.f64 base) 2/3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) 3) (/.f64 1 (pow.f64 (log.f64 base) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (cbrt.f64 (pow.f64 (log.f64 base) -2))) (+.f64 0 (cbrt.f64 (/.f64 1 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (log.f64 base)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 base)) (neg.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2/3)) (cbrt.f64 (pow.f64 (log.f64 base) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 base) 3) (pow.f64 (log.f64 base) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 base) (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (neg.f64 (log.f64 base))) (log.f64 base)) (pow.f64 (log.f64 base) 2/3)) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (pow.f64 (log.f64 base) 2/3)) (cbrt.f64 (pow.f64 (log.f64 base) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (log.f64 base)) (log.f64 base)) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (neg.f64 (log.f64 base)) (pow.f64 (log.f64 base) 2/3))) (cbrt.f64 (pow.f64 (log.f64 base) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 (log.f64 base)) (log.f64 base)) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 (log.f64 base)) (neg.f64 (log.f64 base))) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 (log.f64 base)) (/.f64 (log.f64 base) (cbrt.f64 (neg.f64 (log.f64 base))))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (log.f64 base)) (log.f64 base)) (pow.f64 (log.f64 base) 2/3)) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (cbrt.f64 (neg.f64 (log.f64 base)))) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) -1) (cbrt.f64 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (log.f64 base)) (cbrt.f64 (pow.f64 (log.f64 base) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1 (log.f64 base))) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 base) -2))) (cbrt.f64 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2/3)) 1) (cbrt.f64 (pow.f64 (log.f64 base) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (log.f64 base) (cbrt.f64 (neg.f64 (log.f64 base)))) (/.f64 -1 (log.f64 base))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/3 (/.f64 (log.f64 base) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2/3))) (cbrt.f64 (pow.f64 (log.f64 base) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (log.f64 base))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2/3)))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (cbrt.f64 (pow.f64 (log.f64 base) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) -1)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) 1)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (cbrt.f64 (/.f64 1 (log.f64 base))))) (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (pow.f64 (log.f64 base) 3))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (pow.f64 (log.f64 base) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (neg.f64 (log.f64 base)))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (neg.f64 (pow.f64 (log.f64 base) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 base) 2)) (neg.f64 (pow.f64 (log.f64 base) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (neg.f64 (log.f64 base)) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2/3)))) (*.f64 (neg.f64 (log.f64 base)) (cbrt.f64 (pow.f64 (log.f64 base) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (neg.f64 (log.f64 base)) (cbrt.f64 (/.f64 1 (log.f64 base))))) (*.f64 (neg.f64 (log.f64 base)) (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (neg.f64 (log.f64 base)) (pow.f64 (log.f64 base) 3))) (*.f64 (neg.f64 (log.f64 base)) (pow.f64 (log.f64 base) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 base) 2) (pow.f64 (log.f64 base) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (cbrt.f64 (/.f64 1 (log.f64 base)))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (pow.f64 (log.f64 base) 2) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2/3)))) (*.f64 (pow.f64 (log.f64 base) 2) (cbrt.f64 (pow.f64 (log.f64 base) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (pow.f64 (log.f64 base) 2) (cbrt.f64 (/.f64 1 (log.f64 base))))) (*.f64 (pow.f64 (log.f64 base) 2) (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (pow.f64 (log.f64 base) 2) (pow.f64 (log.f64 base) 3))) (pow.f64 (log.f64 base) 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 base) 3)) (*.f64 (pow.f64 (log.f64 base) 2) (neg.f64 (pow.f64 (log.f64 base) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 base) 3)) (*.f64 (neg.f64 (pow.f64 (log.f64 base) 2)) (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (neg.f64 (pow.f64 (log.f64 base) 2)) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2/3)))) (*.f64 (neg.f64 (pow.f64 (log.f64 base) 2)) (cbrt.f64 (pow.f64 (log.f64 base) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (neg.f64 (pow.f64 (log.f64 base) 2)) (cbrt.f64 (/.f64 1 (log.f64 base))))) (*.f64 (neg.f64 (pow.f64 (log.f64 base) 2)) (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (neg.f64 (pow.f64 (log.f64 base) 2)) (pow.f64 (log.f64 base) 3))) (neg.f64 (pow.f64 (log.f64 base) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (log.f64 base) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2/3)))) (*.f64 (log.f64 base) (cbrt.f64 (pow.f64 (log.f64 base) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (log.f64 base) (cbrt.f64 (/.f64 1 (log.f64 base))))) (*.f64 (log.f64 base) (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (log.f64 base) (pow.f64 (log.f64 base) 3))) (*.f64 (log.f64 base) (pow.f64 (log.f64 base) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (neg.f64 (log.f64 base)))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (/.f64 (neg.f64 (log.f64 base)) (pow.f64 (log.f64 base) 2/3)))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (cbrt.f64 (pow.f64 (log.f64 base) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) 1)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) -1)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (log.f64 base))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (neg.f64 (pow.f64 (log.f64 base) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 (neg.f64 (log.f64 base)) (/.f64 (neg.f64 (log.f64 base)) (pow.f64 (log.f64 base) 2/3)))) (*.f64 (neg.f64 (log.f64 base)) (cbrt.f64 (pow.f64 (log.f64 base) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 (pow.f64 (log.f64 base) 2) (/.f64 (neg.f64 (log.f64 base)) (pow.f64 (log.f64 base) 2/3)))) (*.f64 (pow.f64 (log.f64 base) 2) (cbrt.f64 (pow.f64 (log.f64 base) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 (neg.f64 (pow.f64 (log.f64 base) 2)) (/.f64 (neg.f64 (log.f64 base)) (pow.f64 (log.f64 base) 2/3)))) (*.f64 (neg.f64 (pow.f64 (log.f64 base) 2)) (cbrt.f64 (pow.f64 (log.f64 base) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 (log.f64 base) (/.f64 (neg.f64 (log.f64 base)) (pow.f64 (log.f64 base) 2/3)))) (*.f64 (log.f64 base) (cbrt.f64 (pow.f64 (log.f64 base) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (log.f64 base)) (pow.f64 (log.f64 base) 2/3)) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 base) 3)) (neg.f64 (pow.f64 (log.f64 base) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (log.f64 base)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) 3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 base)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (log.f64 base)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 base) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1 (log.f64 base)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (/.f64 -1 (log.f64 base)) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (neg.f64 (log.f64 base)) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (cbrt.f64 (neg.f64 (log.f64 base))) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (pow.f64 (log.f64 base) -2) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (pow.f64 (log.f64 base) 2) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (neg.f64 (log.f64 base)) (pow.f64 (log.f64 base) 2/3)) 0 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) 0 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 -1 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (cbrt.f64 (/.f64 -1 (log.f64 base))) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (log.f64 base) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (log.f64 base)) 0 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (log.f64 base)) 0 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (log.f64 base))) 0 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (log.f64 base) 3)) 0 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (log.f64 base) 2) 0 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 base) 0 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (neg.f64 (pow.f64 (log.f64 base) 3)) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (pow.f64 (log.f64 base) 2/3) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1 (log.f64 base)) 0 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 (neg.f64 (pow.f64 (log.f64 base) 2)) (/.f64 1 (log.f64 base)))))))"]],"rules":[["egg-rr",125],["egg-rr",64],["egg-rr",76]],"time":42.446044921875,"type":"rewrite"},{"count":[[325,316]],"inputs":[["(pow.f64 (log.f64 base) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 im) (log.f64 base))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 base) (pow.f64 im 6)))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 base) (pow.f64 re 6)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 base) (pow.f64 re 6)))))))","(/.f64 (log.f64 re) (log.f64 base))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 base) (pow.f64 re 6)))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 base) (pow.f64 im 6)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 base) (pow.f64 im 6)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base))))))","(/.f64 1 (log.f64 base))","(/.f64 1 (log.f64 base))","(/.f64 1 (log.f64 base))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (log.f64 base) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))) 2)","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 base))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(*.f64 -1 (/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (log.f64 (/.f64 1 base))))","(/.f64 (log.f64 (hypot.f64 im re)) (log.f64 base))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (hypot.f64 im re)) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (hypot.f64 im re)) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (hypot.f64 im re)) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (log.f64 (hypot.f64 im re)) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 (log.f64 im) (log.f64 base))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))))","(fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (/.f64 (log.f64 im) (log.f64 base)))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 base) (pow.f64 im 4)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 base) (pow.f64 im 6)))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (fma.f64 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 base) (pow.f64 im 6))) 1/6 (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base)))","(/.f64 (log.f64 re) (log.f64 base))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(fma.f64 (/.f64 (/.f64 (*.f64 im im) (*.f64 re re)) (log.f64 base)) 1/2 (/.f64 (log.f64 re) (log.f64 base)))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (fma.f64 (/.f64 (/.f64 (*.f64 im im) (*.f64 re re)) (log.f64 base)) 1/2 (/.f64 (log.f64 re) (log.f64 base))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 base) (pow.f64 re 6)))))))","(+.f64 (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (fma.f64 (/.f64 (/.f64 (*.f64 im im) (*.f64 re re)) (log.f64 base)) 1/2 (/.f64 (log.f64 re) (log.f64 base)))) (/.f64 (*.f64 (*.f64 (pow.f64 im 6) 120) 1/720) (*.f64 (log.f64 base) (pow.f64 re 6))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base)))","(/.f64 (neg.f64 (log.f64 (neg.f64 re))) (neg.f64 (log.f64 base)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(fma.f64 (/.f64 (/.f64 (*.f64 im im) (*.f64 re re)) (log.f64 base)) 1/2 (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (neg.f64 (log.f64 base))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(fma.f64 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) -1/4 (fma.f64 (/.f64 (/.f64 (*.f64 im im) (*.f64 re re)) (log.f64 base)) 1/2 (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (neg.f64 (log.f64 base)))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 base) (pow.f64 re 6)))))))","(fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (-.f64 (fma.f64 1/2 (/.f64 (/.f64 (*.f64 im im) (*.f64 re re)) (log.f64 base)) (/.f64 (*.f64 (*.f64 (pow.f64 im 6) 120) 1/720) (*.f64 (log.f64 base) (pow.f64 re 6)))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (log.f64 base))))","(/.f64 (log.f64 re) (log.f64 base))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))","(fma.f64 (/.f64 (/.f64 (*.f64 im im) (*.f64 re re)) (log.f64 base)) 1/2 (/.f64 (log.f64 re) (log.f64 base)))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2))))))","(fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (fma.f64 (/.f64 (/.f64 (*.f64 im im) (*.f64 re re)) (log.f64 base)) 1/2 (/.f64 (log.f64 re) (log.f64 base))))","(+.f64 (/.f64 (log.f64 re) (log.f64 base)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 base) (pow.f64 re 6)))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 base) (pow.f64 re 2)))))))","(+.f64 (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 base) (pow.f64 re 4))) (/.f64 (log.f64 re) (log.f64 base))) (fma.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 base) (pow.f64 re 6))) (/.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (log.f64 base) (*.f64 re re)))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base)))","(/.f64 (log.f64 im) (log.f64 base))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))))","(fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (/.f64 (log.f64 im) (log.f64 base)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 base) (pow.f64 im 4)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 base))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 base) (pow.f64 im 6)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 base)) (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (fma.f64 1/720 (/.f64 (*.f64 (pow.f64 re 6) 120) (*.f64 (log.f64 base) (pow.f64 im 6))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 base) (pow.f64 im 4))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base)))","(/.f64 (neg.f64 (log.f64 (neg.f64 im))) (neg.f64 (log.f64 base)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base))))","(fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (neg.f64 (log.f64 base))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base)))))","(fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (fma.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (neg.f64 (log.f64 base)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 base) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 base) (pow.f64 im 6)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 base))))))","(fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 base) (*.f64 im im))) (fma.f64 1/720 (/.f64 (*.f64 (pow.f64 re 6) 120) (*.f64 (log.f64 base) (pow.f64 im 6))) (fma.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 base) (pow.f64 im 4))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (neg.f64 (log.f64 base))))))","(/.f64 1 (log.f64 base))","(/.f64 1 (log.f64 base))","(/.f64 1 (log.f64 base))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (log.f64 base))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 base)))))"]],"time":207.19189453125,"type":"simplify"},{"compiler":[[10184,4808]],"time":90.797119140625,"type":"eval"},{"alts":[["(/.f64 (*.f64 (log.f64 base) (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 base) 2))","fresh",0.45673754884221013],["(/.f64 (*.f64 (pow.f64 (log.f64 base) 3) (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 base) 4))","fresh",0.5065613281475363],["(+.f64 (*.f64 2/3 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (*.f64 1/3 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))","fresh",0.5417939453688405],["(*.f64 (/.f64 (+.f64 0 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (log.f64 base))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (pow.f64 (log.f64 base) 2))) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","fresh",0.6127702149057246],["(pow.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) 3)","fresh",0.8518679688852175],["(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (log.f64 (hypot.f64 re im))))","fresh",0.5205650879159782],["(*.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","done",0.44863134768442026],["(*.f64 (log.f64 base) (*.f64 (pow.f64 (log.f64 base) -2) (log.f64 (hypot.f64 re im))))","fresh",0.46492011722130433],["(/.f64 (*.f64 -1 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (log.f64 (hypot.f64 re im)))) (cbrt.f64 (neg.f64 (log.f64 base))))","fresh",0.4635925781475362]],"compiler":[[15,10],[17,12],[22,12],[36,24],[13,10],[19,14],[32,17],[15,10],[20,15]],"count":[[380,9]],"kept":[{"done":[0,0],"fresh":[7,1],"new":[372,7],"picked":[1,1]}],"min-error":[0],"time":143.35791015625,"type":"prune"},{"accuracy":[0.420917529305326],"baseline":[0.4209175293053261],"branch":[["re",0.420917529305326,1],["im",0.4209175293053261,1],["base",0.4209175293053261,1],["(/.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) (log.f64 base)) (*.f64 (atan2.f64 im re) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))",0.4209175293053261,1],["(log.f64 base)",0.4209175293053261,1]],"compiler":[[4,3],[4,3],[4,3],[31,20],[5,4],[473,196]],"count":[[27,1]],"inputs":[["(/.f64 (*.f64 (log.f64 base) (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 base) 2))","(/.f64 (*.f64 (pow.f64 (log.f64 base) 3) (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 base) 4))","(+.f64 (*.f64 2/3 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (*.f64 1/3 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))","(*.f64 (/.f64 (+.f64 0 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (log.f64 base))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 4)) (pow.f64 (log.f64 base) 2))) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","(pow.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) 3)","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (log.f64 (hypot.f64 re im))))","(/.f64 (*.f64 -1 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (log.f64 (hypot.f64 re im)))) (cbrt.f64 (neg.f64 (log.f64 base))))","(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (*.f64 (pow.f64 (cbrt.f64 (hypot.f64 re im)) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)))))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 base))))","(+.f64 (*.f64 2/3 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (*.f64 1/3 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))","(*.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","(*.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (cbrt.f64 (log.f64 base))) (log.f64 (hypot.f64 re im)))","(*.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -3) (log.f64 (hypot.f64 re im)))","(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","(*.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (log.f64 base))) (neg.f64 (log.f64 base))) (*.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))) (log.f64 (hypot.f64 re im)))","(*.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)))) 2))","(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 base) -2))) 2)))","(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (/.f64 1 (pow.f64 (log.f64 base) 2)))","(pow.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))) 3)","(*.f64 (*.f64 (log.f64 (*.f64 (pow.f64 (hypot.f64 re im) 2/3) (cbrt.f64 (hypot.f64 re im)))) (log.f64 base)) (pow.f64 (log.f64 base) -2))","(*.f64 (log.f64 base) (*.f64 (pow.f64 (log.f64 base) -2) (log.f64 (hypot.f64 re im))))","(*.f64 (*.f64 (*.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 base)) (cbrt.f64 (log.f64 (hypot.f64 re im)))) (pow.f64 (log.f64 base) -2))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -4)) (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))))","(*.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (cbrt.f64 (pow.f64 (log.f64 base) -2))) (cbrt.f64 (pow.f64 (log.f64 base) -4)))","(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (hypot.f64 re im)))","(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (log.f64 base)) (pow.f64 (log.f64 base) -2))","(/.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) (log.f64 base)) (*.f64 (atan2.f64 im re) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))"]],"link":["."],"name":["math.log/2 on complex, real part"],"oracle":[43.47540677467343],"outputs":[["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))"]],"time":48.239990234375,"times":[["re",8.625],["im",8.47607421875],["base",8.594970703125],["(/.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) (log.f64 base)) (*.f64 (atan2.f64 im re) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))",5.8740234375],["(log.f64 base)",8.760009765625]],"type":"regimes"},{"compiler":[[19,13]],"inputs":[["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 1 (log.f64 base)) (log.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3))))","(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 base))"]],"stop":[["fuel",1]],"time":19.462890625,"type":"simplify"},{"time":0.01611328125,"type":"soundness"},{"compiler":[[19,13]],"remove-preprocessing":[[]],"time":11.115966796875,"type":"end"}]
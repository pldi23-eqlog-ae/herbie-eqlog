[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.49170696549117565,0.29560954472981393,0.21268348977901042],[11,0.48390209302306175,0.3102436806075275,0.20585422636941075],[10,0.48390209302306175,0.3395119523629546,0.17658595461398363],[9,0.46829234808683395,0.36682900600135326,0.16487864591181278],[8,0.46829234808683395,0.42146311327815056,0.11024453863501549],[7,0.43707285821437836,0.46829234808683395,0.09463479369878769],[6,0.43707285821437836,0.5619508177042007,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":66.0419921875,"type":"analyze"},{"outcomes":[["body",512,"invalid",113.995849609375,1045],["body",2048,"invalid",0.343017578125,1],["body",256,"invalid",93.349853515625,1606],["body",1024,"valid",128.580810546875,638],["body",1024,"invalid",359.78955078125,2002],["body",512,"valid",77.275634765625,695],["body",2048,"valid",0.433837890625,1],["body",256,"valid",368.63525390625,6922]],"time":1156.3251953125,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) x)","(/.f64 (*.f64 (sin.f64 y) (sinh.f64 x)) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) x)","(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))","(/.f64 (*.f64 (sin.f64 y) (sinh.f64 x)) y)","(*.f64 (sin.f64 y) (/.f64 (sinh.f64 x) y))"]],"symmetry":[[]],"time":56.973876953125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) x)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) x)","(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))"]],"time":20.31005859375,"type":"simplify"},{"compiler":[[16,8]],"time":1.7939453125,"type":"eval"},{"alts":[["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))","next",0.1484375],["(/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) x)","fresh",12.93165753032931]],"compiler":[[9,6],[9,6],[9,6],[9,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.06640625],"time":1.18994140625,"type":"prune"},{"compiler":[[19,6]],"locations":[["(/.f64 (sinh.f64 y) x)",0.0078125,true],["(sin.f64 x)",0.0234375,true],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))",0.1484375,true]],"time":4.9970703125,"type":"localize"},{"count":[[3,52]],"series":[["(/.f64 (sinh.f64 y) x)","x","-inf",0.326904296875],["(/.f64 (sinh.f64 y) x)","x","inf",0.263916015625],["(/.f64 (sinh.f64 y) x)","x","0",0.322998046875],["(/.f64 (sinh.f64 y) x)","y","-inf",0.357177734375],["(/.f64 (sinh.f64 y) x)","y","inf",0.3701171875],["(/.f64 (sinh.f64 y) x)","y","0",0.2958984375],["(sin.f64 x)","x","-inf",0.15087890625],["(sin.f64 x)","x","inf",0.139892578125],["(sin.f64 x)","x","0",0.9150390625],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))","y","-inf",0.922119140625],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))","y","inf",1.156005859375],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))","y","0",0.958984375],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))","x","-inf",0.705078125],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))","x","inf",1.02294921875],["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))","x","0",0.759033203125]],"time":8.886962890625,"type":"series"},{"count":[[3,181]],"inputs":[["(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))","(sin.f64 x)","(/.f64 (sinh.f64 y) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 0) (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) (*.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))) (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) (*.f64 0 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sinh.f64 y) x)) (*.f64 (pow.f64 (/.f64 (sinh.f64 y) x) 2/3) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) (/.f64 (sinh.f64 y) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (sinh.f64 y) x) 2/3) (sin.f64 x)) (cbrt.f64 (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sinh.f64 y) (pow.f64 x 2/3)) (/.f64 (sin.f64 x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))) (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 2/3) (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (sinh.f64 y) x) (cbrt.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (cbrt.f64 (/.f64 (sinh.f64 y) x))) (pow.f64 (/.f64 (sinh.f64 y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) 2/3) (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (*.f64 (sin.f64 x) (sinh.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) 2/3) (*.f64 (/.f64 (sinh.f64 y) x) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) x) (sinh.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 x) 2/3) (/.f64 (sinh.f64 y) x)) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sinh.f64 y) x) 2/3) (*.f64 (sin.f64 x) (cbrt.f64 (/.f64 (sinh.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (*.f64 2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3))) (pow.f64 (cbrt.f64 (pow.f64 x 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) 1) (*.f64 2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) -1) (*.f64 2 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (pow.f64 x -1/3)) (*.f64 2 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) (sinh.f64 y)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 2/3) (cbrt.f64 (*.f64 (sin.f64 x) (sinh.f64 y)))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) (cbrt.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) (pow.f64 x 2/3))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 x)) 1) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sinh.f64 y))) (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 2/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sinh.f64 y) (cbrt.f64 x)) (sin.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (/.f64 (sin.f64 x) x)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (/.f64 (sin.f64 x) x)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sinh.f64 y))) (*.f64 (pow.f64 (/.f64 (sinh.f64 y) x) 2/3) (sin.f64 x))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sinh.f64 y)) (*.f64 (pow.f64 (/.f64 (sinh.f64 y) x) 2/3) (sin.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (pow.f64 x 2/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 x)) 1) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 x)) (cbrt.f64 x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) (cbrt.f64 x)) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (cbrt.f64 x))) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (/.f64 (sin.f64 x) x)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (/.f64 1 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) x) (sin.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (/.f64 (sin.f64 x) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (sinh.f64 y) x)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sin.f64 x) (neg.f64 (/.f64 (sinh.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) 0) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 x) (*.f64 (sin.f64 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sin.f64 x)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 x) (*.f64 0 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (pow.f64 (sin.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) 2/3) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (sinh.f64 y) x) 0) (/.f64 (sinh.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sinh.f64 y) x) (*.f64 (/.f64 (sinh.f64 y) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (sinh.f64 y) x)) (/.f64 (sinh.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sinh.f64 y) x) (*.f64 0 (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 x)) (neg.f64 (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (exp.f64 y) 1/2) x) (/.f64 (*.f64 (exp.f64 (neg.f64 y)) 1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sinh.f64 y) x)) (pow.f64 (/.f64 (sinh.f64 y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sinh.f64 y) x) 2/3) (cbrt.f64 (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sinh.f64 y)) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sinh.f64 y)) (/.f64 (pow.f64 (sinh.f64 y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sinh.f64 y) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (sinh.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/3) (/.f64 (sinh.f64 y) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sinh.f64 y) (pow.f64 x 2/3)) (pow.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) (neg.f64 (sinh.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sinh.f64 y) 2/3) x) (cbrt.f64 (sinh.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sinh.f64 y) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (/.f64 1 (*.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sinh.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sinh.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (sinh.f64 y) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (/.f64 (pow.f64 (sinh.f64 y) 2/3) x)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sinh.f64 y) (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3))) (pow.f64 (cbrt.f64 (pow.f64 x 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) x) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) x) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) -1) (*.f64 2 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (pow.f64 x -1/3)) (*.f64 2 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) 1) (*.f64 (cbrt.f64 4) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) -1) (*.f64 (cbrt.f64 4) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (pow.f64 x -1/3)) (*.f64 (cbrt.f64 4) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) 1) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) -1) (*.f64 -2 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (pow.f64 x -1/3)) (*.f64 -2 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) 1) (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) -1) (*.f64 (sqrt.f64 2) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (pow.f64 x -1/3)) (*.f64 (sqrt.f64 2) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (*.f64 x (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (*.f64 x (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2))) (*.f64 (pow.f64 x 2/3) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y))) (*.f64 (pow.f64 x 2/3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2))) (*.f64 (pow.f64 x 2/3) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (*.f64 (pow.f64 x 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2))) (*.f64 (neg.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2))) (*.f64 (neg.f64 x) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) 1) (*.f64 2 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (neg.f64 (*.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sinh.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sinh.f64 y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sinh.f64 y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (*.f64 2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (sinh.f64 y)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sinh.f64 y) x)) (pow.f64 (sinh.f64 y) 2/3)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 x) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2))) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 x) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (sinh.f64 y) x) 2/3) (cbrt.f64 (neg.f64 (sinh.f64 y)))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (sinh.f64 y) x) 2/3) (cbrt.f64 (sinh.f64 y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sinh.f64 y) (pow.f64 x 2/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sinh.f64 y) (cbrt.f64 x)) 1) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (/.f64 1 x)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (/.f64 1 x)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sinh.f64 y))) (pow.f64 (/.f64 (sinh.f64 y) x) 2/3)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sinh.f64 y)) (pow.f64 (/.f64 (sinh.f64 y) x) 2/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sinh.f64 y) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sinh.f64 y) (cbrt.f64 x)) 1) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (sinh.f64 y)) (cbrt.f64 x)) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) x) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) x) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (/.f64 x 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (/.f64 (*.f64 2 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (*.f64 (*.f64 2 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (*.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (*.f64 (neg.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (*.f64 (neg.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sinh.f64 y) (cbrt.f64 x))) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 x) (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (/.f64 1 x)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) x) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) x)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sinh.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (/.f64 -1 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) x) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) x) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sinh.f64 y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sinh.f64 y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sinh.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (sinh.f64 y) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sinh.f64 y) x) 3))))))"]],"rules":[["egg-rr",92],["egg-rr",19],["egg-rr",70]],"time":33.404052734375,"type":"rewrite"},{"count":[[233,214]],"inputs":[["(*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (+.f64 (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 4)))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (+.f64 (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))) (+.f64 (*.f64 -1/10080 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 6))) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 4))))))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 y (sin.f64 x)) x)","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 5) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x)))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 5) (sin.f64 x)) x)) (+.f64 (*.f64 1/5040 (/.f64 (*.f64 (pow.f64 y 7) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x))))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","x","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) x))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 -1/5040 (pow.f64 x 7)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) x)))","(/.f64 y x)","(+.f64 (/.f64 y x) (*.f64 1/6 (/.f64 (pow.f64 y 3) x)))","(+.f64 (/.f64 y x) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 y 3) x)) (*.f64 1/120 (/.f64 (pow.f64 y 5) x))))","(+.f64 (*.f64 1/5040 (/.f64 (pow.f64 y 7) x)) (+.f64 (/.f64 y x) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 y 3) x)) (*.f64 1/120 (/.f64 (pow.f64 y 5) x)))))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))","(*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))))","(fma.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (*.f64 (*.f64 -1/12 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (*.f64 x x)))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (+.f64 (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 4)))))","(fma.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (fma.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (pow.f64 x 4)) (*.f64 (*.f64 -1/12 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (*.f64 x x))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (+.f64 (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))) (+.f64 (*.f64 -1/10080 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 6))) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 4))))))","(fma.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (fma.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (*.f64 x x)) (fma.f64 -1/10080 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (pow.f64 x 6)) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (pow.f64 x 4))))))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(/.f64 (*.f64 y (sin.f64 x)) x)","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x))","(/.f64 (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) (sin.f64 x))) (*.f64 y (sin.f64 x))) x)","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 5) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x)))","(fma.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x) (/.f64 (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 5) (sin.f64 x))) (*.f64 y (sin.f64 x))) x))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 5) (sin.f64 x)) x)) (+.f64 (*.f64 1/5040 (/.f64 (*.f64 (pow.f64 y 7) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x))))","(+.f64 (/.f64 (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) (sin.f64 x))) (*.f64 1/120 (*.f64 (pow.f64 y 5) (sin.f64 x)))) x) (/.f64 (+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 7) (sin.f64 x))) (*.f64 y (sin.f64 x))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","x","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) x))","(fma.f64 (pow.f64 x 3) -1/6 (fma.f64 1/120 (pow.f64 x 5) x))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 -1/5040 (pow.f64 x 7)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) x)))","(fma.f64 (pow.f64 x 3) -1/6 (fma.f64 (pow.f64 x 7) -1/5040 (fma.f64 1/120 (pow.f64 x 5) x)))","(/.f64 y x)","(+.f64 (/.f64 y x) (*.f64 1/6 (/.f64 (pow.f64 y 3) x)))","(/.f64 (+.f64 (*.f64 1/6 (pow.f64 y 3)) y) x)","(+.f64 (/.f64 y x) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 y 3) x)) (*.f64 1/120 (/.f64 (pow.f64 y 5) x))))","(+.f64 (/.f64 y x) (/.f64 (+.f64 (*.f64 1/120 (pow.f64 y 5)) (*.f64 1/6 (pow.f64 y 3))) x))","(+.f64 (*.f64 1/5040 (/.f64 (pow.f64 y 7) x)) (+.f64 (/.f64 y x) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 y 3) x)) (*.f64 1/120 (/.f64 (pow.f64 y 5) x)))))","(+.f64 (/.f64 (+.f64 (*.f64 1/5040 (pow.f64 y 7)) y) x) (/.f64 (+.f64 (*.f64 1/120 (pow.f64 y 5)) (*.f64 1/6 (pow.f64 y 3))) x))","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)","(*.f64 1/2 (/.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) x))","(/.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)"]],"time":164.64697265625,"type":"simplify"},{"compiler":[[3134,1242]],"time":29.025146484375,"type":"eval"},{"alts":[["(*.f64 (sin.f64 x) (*.f64 (sinh.f64 y) (/.f64 1 x)))","fresh",0.205410009768442],["(*.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 3) (/.f64 (sinh.f64 y) x))","fresh",0.5574253051370305],["(*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))","next",0.10546875],["(/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) x)","fresh",12.93165753032931],["(*.f64 (sin.f64 x) (*.f64 (/.f64 (sinh.f64 y) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) -2)))","fresh",0.5685502930532609]],"compiler":[[11,8],[12,9],[9,6],[9,6],[15,10],[11,8],[12,9],[9,6],[9,6],[15,10]],"count":[[216,5]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[214,4],"picked":[1,0]}],"min-error":[0],"time":65.15087890625,"type":"prune"},{"compiler":[[19,6]],"locations":[["(sin.f64 x)",0.0234375,false],["(*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))",0.0625,true],["(/.f64 (sin.f64 x) x)",0.16015625,true]],"time":5.0029296875,"type":"localize"},{"count":[[2,28]],"series":[["(*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))","x","-inf",0.191162109375],["(*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))","x","inf",0.1748046875],["(*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))","x","0",0.39306640625],["(*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))","y","-inf",0.44580078125],["(*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))","y","inf",0.177001953125],["(*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))","y","0",0.22705078125],["(/.f64 (sin.f64 x) x)","x","-inf",0.31005859375],["(/.f64 (sin.f64 x) x)","x","inf",0.1630859375],["(/.f64 (sin.f64 x) x)","x","0",0.35400390625]],"time":2.56201171875,"type":"series"},{"count":[[2,156]],"inputs":[["(/.f64 (sin.f64 x) x)","(*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (sin.f64 x) x) 0) (/.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 x) x) (*.f64 (/.f64 (sin.f64 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (sin.f64 x) x)) (/.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 x) x) (*.f64 0 (/.f64 (sin.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (sin.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 x)) (/.f64 (sin.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (sin.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2)) (cbrt.f64 (/.f64 (sin.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 x)) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 x)) (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 x x))) (cbrt.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (neg.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) x) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2)) (cbrt.f64 (neg.f64 (sin.f64 x)))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) (sin.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 x)) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) 1) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 x) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) 1) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (sin.f64 x)) (cbrt.f64 x)) (neg.f64 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 x) (cbrt.f64 x))) (neg.f64 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sin.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 x) (neg.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 0) (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) (*.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))) (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) (*.f64 0 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sinh.f64 y) (cbrt.f64 x)) (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sinh.f64 y) (cbrt.f64 (/.f64 (sin.f64 x) x))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2)) (sinh.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (neg.f64 (sinh.f64 y)) (sin.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2)) (*.f64 (sinh.f64 y) (cbrt.f64 (/.f64 (sin.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 x x))) (/.f64 (sinh.f64 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (neg.f64 (sinh.f64 y)) (sin.f64 x)) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2)) (sinh.f64 y)) (cbrt.f64 (/.f64 (sin.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 2)) (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sinh.f64 y)) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (sinh.f64 y) 2)) (sin.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) x) (sinh.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 x) (cbrt.f64 (sinh.f64 y))) x) (cbrt.f64 (pow.f64 (sinh.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (sinh.f64 y) 2)) (sin.f64 x)) x) (cbrt.f64 (sinh.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sinh.f64 y) 2)) (/.f64 (*.f64 (sin.f64 x) (cbrt.f64 (sinh.f64 y))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (*.f64 (sinh.f64 y) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x))) (/.f64 1 (neg.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sinh.f64 y)) (sin.f64 x)) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) (/.f64 1 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x))) (neg.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) x) (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (/.f64 (sin.f64 x) x)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) 1) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x))) 1) (neg.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (sinh.f64 y) 2)) (sin.f64 x)) x)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) x) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) x) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) x) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) -1) (neg.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) (cbrt.f64 (/.f64 1 x))) (*.f64 2 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y))) (*.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2))) (*.f64 x (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2))) (*.f64 x (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y))) (*.f64 (cbrt.f64 (*.f64 x x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2))) (*.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (*.f64 (cbrt.f64 (*.f64 x x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2))) (*.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y))) (*.f64 (neg.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2))) (*.f64 (neg.f64 x) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2))) (*.f64 (neg.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (/.f64 (sin.f64 x) (cbrt.f64 x))) (*.f64 2 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (sin.f64 x)) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (neg.f64 (sin.f64 x))) (*.f64 -2 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (/.f64 (sin.f64 x) (cbrt.f64 x))) (*.f64 -2 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (sin.f64 x)) (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (neg.f64 (sin.f64 x))) (*.f64 (sqrt.f64 2) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (/.f64 (sin.f64 x) (cbrt.f64 x))) (*.f64 (sqrt.f64 2) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (sin.f64 x)) (*.f64 (cbrt.f64 4) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (neg.f64 (sin.f64 x))) (*.f64 (cbrt.f64 4) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (/.f64 (sin.f64 x) (cbrt.f64 x))) (*.f64 (cbrt.f64 4) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) 1) (*.f64 (+.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x))) 1) (*.f64 (neg.f64 (+.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)))) (neg.f64 (neg.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) x)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sinh.f64 y)) (sin.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) x) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) x) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2))) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sinh.f64 y) (cbrt.f64 x)) (sin.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) (cbrt.f64 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 2)) (cbrt.f64 (*.f64 (sinh.f64 y) (sin.f64 x)))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) (/.f64 1 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2)) (sinh.f64 y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2)) (sinh.f64 y))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (/.f64 (sin.f64 x) x)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (/.f64 (sin.f64 x) x)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 x x)))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sinh.f64 y) (sin.f64 x))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 2))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) (sinh.f64 y)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (cbrt.f64 x)) 1) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 (sinh.f64 y)) (sin.f64 x)) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) x) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (cbrt.f64 x)) 1) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (cbrt.f64 x)) (cbrt.f64 x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 (sinh.f64 y)) (sin.f64 x)) (cbrt.f64 x)) (neg.f64 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 (sinh.f64 y)) (sin.f64 x)) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) x) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) x) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) x) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (cbrt.f64 x))) (neg.f64 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (neg.f64 (sinh.f64 y)) (sin.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 x) (neg.f64 x)) (sinh.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 3))))))"]],"rules":[["egg-rr",110],["egg-rr",46]],"time":28.63916015625,"type":"rewrite"},{"count":[[184,180]],"inputs":[["1","(+.f64 1 (*.f64 -1/6 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 x 2)) (*.f64 1/120 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 x 2)) (+.f64 (*.f64 -1/5040 (pow.f64 x 6)) (*.f64 1/120 (pow.f64 x 4)))))","(/.f64 (*.f64 y (sin.f64 x)) x)","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 5) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x)))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 5) (sin.f64 x)) x)) (+.f64 (*.f64 1/5040 (/.f64 (*.f64 (pow.f64 y 7) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x))))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (+.f64 (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 4)))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (+.f64 (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))) (+.f64 (*.f64 -1/10080 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 6))) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 4))))))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/6 (pow.f64 x 2)))","(fma.f64 (*.f64 x x) -1/6 1)","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 x 2)) (*.f64 1/120 (pow.f64 x 4))))","(+.f64 (fma.f64 (*.f64 x x) -1/6 1) (*.f64 1/120 (pow.f64 x 4)))","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 x 2)) (+.f64 (*.f64 -1/5040 (pow.f64 x 6)) (*.f64 1/120 (pow.f64 x 4)))))","(+.f64 (fma.f64 (*.f64 x x) -1/6 1) (fma.f64 -1/5040 (pow.f64 x 6) (*.f64 1/120 (pow.f64 x 4))))","(/.f64 (*.f64 y (sin.f64 x)) x)","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x))","(/.f64 (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) (sin.f64 x))) (*.f64 y (sin.f64 x))) x)","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 5) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x)))","(fma.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x) (/.f64 (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 5) (sin.f64 x))) (*.f64 y (sin.f64 x))) x))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 5) (sin.f64 x)) x)) (+.f64 (*.f64 1/5040 (/.f64 (*.f64 (pow.f64 y 7) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x))))","(+.f64 (/.f64 (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) (sin.f64 x))) (*.f64 1/120 (*.f64 (pow.f64 y 5) (sin.f64 x)))) x) (/.f64 (+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 7) (sin.f64 x))) (*.f64 y (sin.f64 x))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))","(*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))))","(fma.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (*.f64 (*.f64 -1/12 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (*.f64 x x)))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (+.f64 (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 4)))))","(fma.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (fma.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (*.f64 x x)) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (pow.f64 x 4)))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (+.f64 (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))) (+.f64 (*.f64 -1/10080 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 6))) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 4))))))","(fma.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (fma.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (*.f64 x x)) (fma.f64 -1/10080 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (pow.f64 x 6)) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (pow.f64 x 4))))))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)"]],"time":92.662841796875,"type":"simplify"},{"compiler":[[3022,1084]],"time":26.273193359375,"type":"eval"},{"alts":[["(*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))","done",0.10546875],["(*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))","next",0.1484375],["(*.f64 (sinh.f64 y) (*.f64 (sin.f64 x) (/.f64 1 x)))","fresh",0.201503759768442],["(*.f64 (sinh.f64 y) (*.f64 (cbrt.f64 (sin.f64 x)) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) x)))","fresh",14.753170513608556],["(*.f64 (sinh.f64 y) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3))","fresh",0.19310385745286215],["(/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) x)","fresh",12.93165753032931]],"compiler":[[9,6],[9,6],[11,8],[16,11],[12,9],[9,6],[9,6],[11,8],[16,11],[12,9],[9,6]],"count":[[211,6]],"kept":[{"done":[0,0],"fresh":[4,1],"new":[206,4],"picked":[1,1]}],"min-error":[0],"time":61.537841796875,"type":"prune"},{"compiler":[[19,6]],"locations":[["(/.f64 (sinh.f64 y) x)",0.0078125,false],["(sin.f64 x)",0.0234375,false],["(*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))",0.1484375,true]],"time":4.9970703125,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))","x","-inf",0.212158203125],["(*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))","x","inf",0.190185546875],["(*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))","x","0",0.239013671875],["(*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))","y","-inf",0.18408203125],["(*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))","y","inf",0.18701171875],["(*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))","y","0",0.27001953125]],"time":1.376953125,"type":"series"},{"count":[[1,69]],"inputs":[["(*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x)) (*.f64 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x)) 0) (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x)) (*.f64 0 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))) (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))) (pow.f64 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x)) 2/3) (cbrt.f64 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (pow.f64 (sin.f64 x) 2/3) (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sinh.f64 y) (cbrt.f64 x)) (/.f64 (sin.f64 x) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (cbrt.f64 (/.f64 (sinh.f64 y) x))) (pow.f64 (/.f64 (sinh.f64 y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (sinh.f64 y) x) (cbrt.f64 (sin.f64 x))) (pow.f64 (sin.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sinh.f64 y) x)) (*.f64 (pow.f64 (/.f64 (sinh.f64 y) x) 2/3) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (sinh.f64 y) x) 2/3) (sin.f64 x)) (cbrt.f64 (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) x) (sinh.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sinh.f64 y) x) 2/3) (*.f64 (sin.f64 x) (cbrt.f64 (/.f64 (sinh.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 x) 2/3) (/.f64 (sinh.f64 y) x)) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (*.f64 (sinh.f64 y) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (pow.f64 x 2/3)) (/.f64 (sinh.f64 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) 2/3) (*.f64 (/.f64 (sinh.f64 y) x) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) (*.f64 2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3))) (pow.f64 (cbrt.f64 (pow.f64 x 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) -1) (*.f64 2 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) 1) (*.f64 2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) (pow.f64 x -1/3)) (*.f64 2 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) (cbrt.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sinh.f64 y) (cbrt.f64 x)) (sin.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x)) 2/3) (cbrt.f64 (*.f64 (sinh.f64 y) (sin.f64 x)))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (cbrt.f64 x)) 1) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sinh.f64 y))) (*.f64 (pow.f64 (/.f64 (sinh.f64 y) x) 2/3) (sin.f64 x))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sinh.f64 y)) (*.f64 (pow.f64 (/.f64 (sinh.f64 y) x) 2/3) (sin.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) (pow.f64 x 2/3))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (/.f64 (sin.f64 x) x)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (/.f64 (sin.f64 x) x)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sinh.f64 y) (sin.f64 x))) (pow.f64 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x)) 2/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (cbrt.f64 x)) 1) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (cbrt.f64 x)) (cbrt.f64 x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (pow.f64 x 2/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) (cbrt.f64 x)) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (cbrt.f64 x))) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (/.f64 (sin.f64 x) x)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) x) (sin.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sin.f64 x)) (/.f64 1 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (/.f64 (sin.f64 x) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (sinh.f64 y) x)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 x) (neg.f64 (sinh.f64 y))) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sin.f64 x) (neg.f64 (/.f64 (sinh.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x)) 3))))))"]],"rules":[["egg-rr",69]],"time":23.005126953125,"type":"rewrite"},{"count":[[93,86]],"inputs":[["(/.f64 (*.f64 y (sin.f64 x)) x)","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 5) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x)))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 5) (sin.f64 x)) x)) (+.f64 (*.f64 1/5040 (/.f64 (*.f64 (pow.f64 y 7) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x))))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (+.f64 (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 4)))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (+.f64 (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))) (+.f64 (*.f64 -1/10080 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 6))) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 4))))))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y (sin.f64 x)) x)","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x))","(/.f64 (+.f64 (*.f64 y (sin.f64 x)) (*.f64 1/6 (*.f64 (pow.f64 y 3) (sin.f64 x)))) x)","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 5) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x)))","(fma.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x) (/.f64 (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 5) (sin.f64 x))) (*.f64 y (sin.f64 x))) x))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 5) (sin.f64 x)) x)) (+.f64 (*.f64 1/5040 (/.f64 (*.f64 (pow.f64 y 7) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x))))","(+.f64 (/.f64 (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) (sin.f64 x))) (*.f64 1/120 (*.f64 (pow.f64 y 5) (sin.f64 x)))) x) (/.f64 (+.f64 (*.f64 y (sin.f64 x)) (*.f64 1/5040 (*.f64 (pow.f64 y 7) (sin.f64 x)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))","(*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))))","(fma.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (*.f64 x x))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (+.f64 (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 4)))))","(fma.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (fma.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (*.f64 x x)) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (pow.f64 x 4)))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (+.f64 (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))) (+.f64 (*.f64 -1/10080 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 6))) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 4))))))","(fma.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (fma.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (*.f64 x x)) (fma.f64 -1/10080 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (pow.f64 x 6)) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (pow.f64 x 4))))))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)"]],"time":80.005859375,"type":"simplify"},{"compiler":[[3122,1236]],"time":29.362060546875,"type":"eval"},{"alts":[["(*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))","done",0.10546875],["(*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))","done",0.1484375],["(*.f64 (sinh.f64 y) (*.f64 (sin.f64 x) (/.f64 1 x)))","fresh",0.201503759768442],["(*.f64 (sinh.f64 y) (*.f64 (cbrt.f64 (sin.f64 x)) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) x)))","fresh",14.753170513608556],["(*.f64 (sinh.f64 y) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3))","next",0.19310385745286215],["(/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) x)","fresh",12.93165753032931]],"compiler":[[9,6],[9,6],[11,8],[16,11],[12,9],[9,6],[11,8],[16,11],[12,9],[9,6]],"count":[[219,6]],"kept":[{"done":[1,1],"fresh":[4,3],"new":[213,1],"picked":[1,1]}],"min-error":[0],"time":57.5400390625,"type":"prune"},{"compiler":[[35,12]],"locations":[["(cbrt.f64 (/.f64 (sin.f64 x) x))",0.05078125,true],["(*.f64 (sinh.f64 y) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3))",0.0625,true],["(/.f64 (sin.f64 x) x)",0.16015625,false],["(pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3)",0.37345512698974626,true]],"time":7.572021484375,"type":"localize"},{"count":[[3,32]],"series":[["(cbrt.f64 (/.f64 (sin.f64 x) x))","x","-inf",0.488037109375],["(cbrt.f64 (/.f64 (sin.f64 x) x))","x","inf",0.286865234375],["(cbrt.f64 (/.f64 (sin.f64 x) x))","x","0",0.2109375],["(*.f64 (sinh.f64 y) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3))","x","-inf",2.204833984375],["(*.f64 (sinh.f64 y) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3))","x","inf",0.427001953125],["(*.f64 (sinh.f64 y) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3))","x","0",0.2900390625],["(*.f64 (sinh.f64 y) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3))","y","-inf",0.449951171875],["(*.f64 (sinh.f64 y) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3))","y","inf",0.472900390625],["(*.f64 (sinh.f64 y) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3))","y","0",0.26513671875],["(pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3)","x","-inf",0.975830078125],["(pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3)","x","inf",0.81103515625],["(pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3)","x","0",0.43994140625]],"time":7.516845703125,"type":"series"},{"count":[[3,212]],"inputs":[["(pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3)","(*.f64 (sinh.f64 y) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3))","(cbrt.f64 (/.f64 (sin.f64 x) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (sin.f64 x) x) 0) (/.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 x) x) (*.f64 (/.f64 (sin.f64 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (sin.f64 x) x)) (/.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 x) x) (*.f64 0 (/.f64 (sin.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (sin.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 x)) (/.f64 (sin.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (sin.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 x)) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) (pow.f64 (/.f64 (sin.f64 x) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2/3) (cbrt.f64 (/.f64 (sin.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 x) x))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 x) x))) 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/3) (/.f64 (sin.f64 x) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (neg.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2/3)) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 x) x))) 4) 2) (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 x) 2/3) x) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (pow.f64 x 2/3)) (pow.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (sin.f64 x))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 x) x))) 4) 2)) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3))) (pow.f64 (cbrt.f64 (pow.f64 x 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 x) (pow.f64 x 2/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (sin.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2/3) (cbrt.f64 (neg.f64 (sin.f64 x)))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) (/.f64 (pow.f64 (sin.f64 x) 2/3) (cbrt.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) (pow.f64 (sin.f64 x) 2/3)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 x))) (pow.f64 (/.f64 (sin.f64 x) x) 2/3)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) 1) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (pow.f64 x 2/3)) 1) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) 2/3) (cbrt.f64 x)) (cbrt.f64 (/.f64 (sin.f64 x) x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 x) 2/3) (cbrt.f64 (/.f64 (sin.f64 x) x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 x) (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 x) (pow.f64 x 2/3)) 1) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (sin.f64 x)) (cbrt.f64 x)) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 x) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) 1) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) 2/3) (cbrt.f64 x)) (cbrt.f64 (neg.f64 (sin.f64 x)))) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) 2/3) (cbrt.f64 x)) (cbrt.f64 (sin.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 2/3) (cbrt.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2/3) (cbrt.f64 x))) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 x) (cbrt.f64 x))) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 x) (pow.f64 x 2/3))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 x) x) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 x) x) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sin.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 x) (neg.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 0) (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) (*.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))) (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) (*.f64 0 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sinh.f64 y) (pow.f64 (/.f64 (sin.f64 x) x) 2/3)) (cbrt.f64 (/.f64 (sin.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) (*.f64 (sinh.f64 y) (pow.f64 (/.f64 (sin.f64 x) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sinh.f64 y)) (/.f64 (*.f64 (pow.f64 (sinh.f64 y) 2/3) (sin.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 (sinh.f64 y) 2/3) (sin.f64 x)) x) (cbrt.f64 (sinh.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sinh.f64 y) (sin.f64 x))) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))) (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) x) (sinh.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 2/3) (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sinh.f64 y) (cbrt.f64 (/.f64 (sin.f64 x) x))) (pow.f64 (/.f64 (sin.f64 x) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 x) (cbrt.f64 (sinh.f64 y))) x) (pow.f64 (sinh.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2/3) (*.f64 (sinh.f64 y) (cbrt.f64 (/.f64 (sin.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (*.f64 (sinh.f64 y) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sinh.f64 y) 2/3) (/.f64 (*.f64 (sin.f64 x) (cbrt.f64 (sinh.f64 y))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) (/.f64 1 (neg.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (/.f64 1 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) (neg.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) x) (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (/.f64 (sin.f64 x) x)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) 1) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) 1) (neg.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (/.f64 (*.f64 (pow.f64 (sinh.f64 y) 2/3) (sin.f64 x)) x)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) 1) (*.f64 (+.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) 1) (*.f64 (neg.f64 (+.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2))) (*.f64 (pow.f64 x 2/3) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (*.f64 (pow.f64 x 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y))) (*.f64 (pow.f64 x 2/3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2))) (*.f64 (pow.f64 x 2/3) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2))) (*.f64 x (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y))) (*.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2))) (*.f64 x (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (pow.f64 x 2/3)) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2))) (*.f64 (cbrt.f64 x) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (pow.f64 x 2/3)) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (*.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (pow.f64 x 2/3)) (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y))) (*.f64 (cbrt.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (pow.f64 x 2/3)) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2))) (*.f64 (cbrt.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2))) (*.f64 (neg.f64 x) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y))) (*.f64 (neg.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2))) (*.f64 (neg.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (/.f64 (sin.f64 x) (cbrt.f64 x))) (*.f64 (sqrt.f64 2) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (sin.f64 x)) (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (neg.f64 (sin.f64 x))) (*.f64 (sqrt.f64 2) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (/.f64 (sin.f64 x) (pow.f64 x 2/3))) (*.f64 (sqrt.f64 2) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (/.f64 (sin.f64 x) (cbrt.f64 x))) (*.f64 2 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (/.f64 (sin.f64 x) (pow.f64 x 2/3))) (*.f64 2 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (/.f64 (sin.f64 x) (cbrt.f64 x))) (*.f64 (cbrt.f64 4) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (sin.f64 x)) (*.f64 (cbrt.f64 4) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (neg.f64 (sin.f64 x))) (*.f64 (cbrt.f64 4) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (/.f64 (sin.f64 x) (pow.f64 x 2/3))) (*.f64 (cbrt.f64 4) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (/.f64 (sin.f64 x) (cbrt.f64 x))) (*.f64 -2 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (sin.f64 x)) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (neg.f64 (sin.f64 x))) (*.f64 -2 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 y)) (exp.f64 y)) (/.f64 (sin.f64 x) (pow.f64 x 2/3))) (*.f64 -2 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))))) (neg.f64 (neg.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sinh.f64 y) (sin.f64 x))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) x) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) x) (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2))) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sinh.f64 y) (pow.f64 (/.f64 (sin.f64 x) x) 2/3)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sinh.f64 y) (pow.f64 (/.f64 (sin.f64 x) x) 2/3)) (cbrt.f64 (neg.f64 (sin.f64 x)))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (pow.f64 x -1/3)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) (cbrt.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) (pow.f64 x 2/3))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sinh.f64 y) (cbrt.f64 (/.f64 (sin.f64 x) x))) (/.f64 (pow.f64 (sin.f64 x) 2/3) (cbrt.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sinh.f64 y) (cbrt.f64 (/.f64 (sin.f64 x) x))) (pow.f64 (sin.f64 x) 2/3)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (sqrt.f64 2)) (/.f64 (sin.f64 x) x)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (cbrt.f64 2)) (/.f64 (sin.f64 x) x)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (sinh.f64 y) (pow.f64 (/.f64 (sin.f64 x) x) 2/3))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 x))) (*.f64 (sinh.f64 y) (pow.f64 (/.f64 (sin.f64 x) x) 2/3))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (sinh.f64 y) (sin.f64 x))) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 x)) (sinh.f64 y)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 x) (pow.f64 x 2/3)) (sinh.f64 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) 2/3) (cbrt.f64 x)) (*.f64 (sinh.f64 y) (cbrt.f64 (/.f64 (sin.f64 x) x)))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 x) 2/3) (*.f64 (sinh.f64 y) (cbrt.f64 (/.f64 (sin.f64 x) x)))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 (sinh.f64 y) (sin.f64 x))) (cbrt.f64 (neg.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 (sinh.f64 y) (sin.f64 x))) (cbrt.f64 x)) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 (sinh.f64 y) (sin.f64 x))) -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 (sinh.f64 y) (sin.f64 x))) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) (pow.f64 x 2/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) x) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (*.f64 (sinh.f64 y) (sin.f64 x)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 x) (neg.f64 x)) (sinh.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 0) (cbrt.f64 (/.f64 (sin.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) (*.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (/.f64 (sin.f64 x) x))) (cbrt.f64 (/.f64 (sin.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) (*.f64 0 (cbrt.f64 (/.f64 (sin.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2/3)) (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 x))) (neg.f64 (pow.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) (+.f64 2 1/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 x) x))) 4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 x) x))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (pow.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 (sin.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (/.f64 (sin.f64 x) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/3) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 x) (neg.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sin.f64 x))) (cbrt.f64 (/.f64 (pow.f64 (sin.f64 x) 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x -1/3)) (cbrt.f64 (/.f64 (sin.f64 x) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2/3)) (cbrt.f64 (cbrt.f64 (sin.f64 x)))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) x) 2/3))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 x))) 1) (*.f64 (cbrt.f64 (neg.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (sin.f64 x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (sin.f64 x) (pow.f64 x 2/3))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (sin.f64 x))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 x))) 1) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (sin.f64 x)) (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (sin.f64 x) (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 x) x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 x) x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 x) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 x) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (/.f64 (sin.f64 x) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (sin.f64 x) x))))))"]],"rules":[["egg-rr",34],["egg-rr",116],["egg-rr",62]],"time":34.670166015625,"type":"rewrite"},{"count":[[244,242]],"inputs":[["1","(+.f64 1 (*.f64 -1/6 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 x 2)) (*.f64 1/120 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 x 2)) (+.f64 (*.f64 -1/5040 (pow.f64 x 6)) (*.f64 1/120 (pow.f64 x 4)))))","(/.f64 (*.f64 y (sin.f64 x)) x)","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 5) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x)))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 5) (sin.f64 x)) x)) (+.f64 (*.f64 1/5040 (/.f64 (*.f64 (pow.f64 y 7) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x))))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (+.f64 (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 4)))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (+.f64 (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))) (+.f64 (*.f64 -1/10080 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 6))) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 4))))))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","1","(+.f64 (*.f64 -1/18 (pow.f64 x 2)) 1)","(+.f64 (*.f64 -1/18 (pow.f64 x 2)) (+.f64 1 (*.f64 -1/3240 (pow.f64 x 4))))","(+.f64 (*.f64 -1/18 (pow.f64 x 2)) (+.f64 (*.f64 -53/1224720 (pow.f64 x 6)) (+.f64 1 (*.f64 -1/3240 (pow.f64 x 4)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/6 (pow.f64 x 2)))","(fma.f64 -1/6 (*.f64 x x) 1)","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 x 2)) (*.f64 1/120 (pow.f64 x 4))))","(+.f64 (fma.f64 -1/6 (*.f64 x x) 1) (*.f64 1/120 (pow.f64 x 4)))","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 x 2)) (+.f64 (*.f64 -1/5040 (pow.f64 x 6)) (*.f64 1/120 (pow.f64 x 4)))))","(+.f64 (fma.f64 -1/6 (*.f64 x x) 1) (fma.f64 -1/5040 (pow.f64 x 6) (*.f64 1/120 (pow.f64 x 4))))","(/.f64 (*.f64 y (sin.f64 x)) x)","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x))","(/.f64 (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) (sin.f64 x))) (*.f64 y (sin.f64 x))) x)","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 5) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x)))","(fma.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x) (/.f64 (+.f64 (*.f64 y (sin.f64 x)) (*.f64 1/120 (*.f64 (pow.f64 y 5) (sin.f64 x)))) x))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (pow.f64 y 3) (sin.f64 x)) x)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 5) (sin.f64 x)) x)) (+.f64 (*.f64 1/5040 (/.f64 (*.f64 (pow.f64 y 7) (sin.f64 x)) x)) (/.f64 (*.f64 y (sin.f64 x)) x))))","(+.f64 (/.f64 (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) (sin.f64 x))) (*.f64 1/120 (*.f64 (pow.f64 y 5) (sin.f64 x)))) x) (/.f64 (+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 7) (sin.f64 x))) (*.f64 y (sin.f64 x))) x))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))))","(*.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))))","(fma.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (*.f64 (*.f64 -1/12 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (*.f64 x x)))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (+.f64 (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 4)))))","(fma.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (fma.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (*.f64 x x)) (*.f64 (*.f64 1/240 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (pow.f64 x 4))))","(+.f64 (*.f64 1/2 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) (+.f64 (*.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 2))) (+.f64 (*.f64 -1/10080 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 6))) (*.f64 1/240 (*.f64 (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y))) (pow.f64 x 4))))))","(fma.f64 1/2 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (fma.f64 -1/12 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (*.f64 x x)) (fma.f64 -1/10080 (*.f64 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))) (pow.f64 x 6)) (*.f64 (*.f64 1/240 (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y)))) (pow.f64 x 4)))))","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","(*.f64 1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (/.f64 1 (exp.f64 y)))) x))","(/.f64 (*.f64 1/2 (*.f64 (sin.f64 x) (-.f64 (exp.f64 y) (exp.f64 (neg.f64 y))))) x)","1","(+.f64 (*.f64 -1/18 (pow.f64 x 2)) 1)","(fma.f64 -1/18 (*.f64 x x) 1)","(+.f64 (*.f64 -1/18 (pow.f64 x 2)) (+.f64 1 (*.f64 -1/3240 (pow.f64 x 4))))","(fma.f64 (*.f64 x x) -1/18 (fma.f64 -1/3240 (pow.f64 x 4) 1))","(+.f64 (*.f64 -1/18 (pow.f64 x 2)) (+.f64 (*.f64 -53/1224720 (pow.f64 x 6)) (+.f64 1 (*.f64 -1/3240 (pow.f64 x 4)))))","(fma.f64 (*.f64 x x) -1/18 (fma.f64 (pow.f64 x 6) -53/1224720 (fma.f64 -1/3240 (pow.f64 x 4) 1)))"]],"time":107.65185546875,"type":"simplify"},{"compiler":[[4531,1865]],"time":42.760009765625,"type":"eval"},{"alts":[["(*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))","done",0.10546875],["(*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))","done",0.1484375],["(*.f64 (sinh.f64 y) (*.f64 (/.f64 1 x) (sin.f64 x)))","fresh",0.201503759768442],["(*.f64 (sinh.f64 y) (*.f64 (cbrt.f64 (sin.f64 x)) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) x)))","fresh",14.753170513608556],["(*.f64 (sinh.f64 y) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3))","done",0.19310385745286215],["(/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) x)","fresh",12.93165753032931]],"compiler":[[9,6],[9,6],[11,8],[16,11],[12,9],[9,6]],"count":[[301,6]],"kept":[{"done":[2,2],"fresh":[3,1],"new":[295,2],"picked":[1,1]}],"min-error":[0],"time":109.7119140625,"type":"prune"},{"accuracy":[0.10546875],"baseline":[0.10546875],"branch":[["x",0.10546875,1],["y",0.10546875,1],["(/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) x)",0.10546875,1],["(sinh.f64 y)",0.10546875,1]],"compiler":[[3,2],[3,2],[9,6],[4,3],[118,45]],"count":[[13,1]],"inputs":[["(*.f64 (sinh.f64 y) (*.f64 (/.f64 1 x) (sin.f64 x)))","(/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) x)","(/.f64 (*.f64 (sinh.f64 y) (sin.f64 x)) x)","(*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x))","(*.f64 (sinh.f64 y) (*.f64 (sin.f64 x) (/.f64 1 x)))","(*.f64 (sinh.f64 y) (*.f64 (cbrt.f64 (sin.f64 x)) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) x)))","(*.f64 (sinh.f64 y) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) x)) 3))","(*.f64 (sin.f64 x) (*.f64 (sinh.f64 y) (/.f64 1 x)))","(*.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 3) (/.f64 (sinh.f64 y) x))","(*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))","(*.f64 (sin.f64 x) (*.f64 (/.f64 (sinh.f64 y) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) -2)))","(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))","(/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) x)"]],"link":["."],"name":["Linear.Quaternion:$ccosh from linear-1.19.1.3"],"oracle":[18.41545721081893],"outputs":[["(*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))"]],"time":20.668212890625,"times":[["x",4.85693359375],["y",4.942138671875],["(/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) x)",3.6630859375],["(sinh.f64 y)",5.0830078125]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) x))","(*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) x))"]],"stop":[["fuel",1]],"time":17.548828125,"type":"simplify"},{"time":0.01416015625,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":9.61083984375,"type":"end"}]
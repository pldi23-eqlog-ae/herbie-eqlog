[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.9073164244182408,0.09170725150033832,0.0009763240814208984],[11,0.8780481526628137,0.12097552325576544,0.0009763240814208984],[10,0.8195116091519594,0.17951206676661968,0.0009763240814208984],[9,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[8,0.6556092873215675,0.34341438859701157,0.0009763240814208984],[7,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":21.419921875,"type":"analyze"},{"outcomes":[["body",256,"invalid",2.47802734375,77],["body",1024,"valid",4.760009765625,58],["body",512,"valid",1.829345703125,34],["body",2048,"valid",4.359375,39],["body",256,"valid",305.708251953125,8125]],"time":328.884033203125,"type":"sample"},{"compiler":[[7,5]],"inputs":[["0","1"],["(*.f64 200 (-.f64 x y))","(*.f64 200 (-.f64 y x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 200 (-.f64 x y))","(*.f64 200 (-.f64 y x))"]],"symmetry":[[]],"time":63.421875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 200 (-.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 200 (-.f64 x y))","(*.f64 -200 (-.f64 y x))"]],"time":38.756103515625,"type":"simplify"},{"compiler":[[12,8]],"time":0.323974609375,"type":"eval"},{"alts":[["(*.f64 -200 (-.f64 y x))","next",0.015625]],"compiler":[[7,5],[7,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.015625],"time":0.828125,"type":"prune"},{"compiler":[[13,6]],"locations":[["(*.f64 -200 (-.f64 y x))",0.0078125,true]],"time":4.39697265625,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 -200 (-.f64 y x))","x","-inf",0.23291015625],["(*.f64 -200 (-.f64 y x))","x","inf",0.306884765625],["(*.f64 -200 (-.f64 y x))","x","0",0.22509765625],["(*.f64 -200 (-.f64 y x))","y","-inf",0.321044921875],["(*.f64 -200 (-.f64 y x))","y","inf",0.375],["(*.f64 -200 (-.f64 y x))","y","0",0.31494140625]],"time":1.85791015625,"type":"series"},{"count":[[1,53]],"inputs":[["(*.f64 -200 (-.f64 y x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -200 y) (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 200 x) (*.f64 -200 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 200 x) (neg.f64 (*.f64 -200 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 -200 y) -1)) (neg.f64 (*.f64 (*.f64 200 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (*.f64 -200 y))) (neg.f64 (neg.f64 (*.f64 200 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 200 x) (neg.f64 (*.f64 (neg.f64 y) -200)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -200 (-.f64 y x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 -200 (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 200 x) (*.f64 -200 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (*.f64 (*.f64 -200 y) -1)) (*.f64 (*.f64 200 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (neg.f64 (*.f64 -200 y))) (neg.f64 (*.f64 200 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 200 x) (*.f64 (neg.f64 y) -200))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -200 y) (*.f64 x -200))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -200 y) (*.f64 -200 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (*.f64 (-.f64 x y) -200)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 x y) -200))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 (-.f64 x y) -200) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (*.f64 (-.f64 x y) -200)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (*.f64 (-.f64 x y) -200)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 y x) (cbrt.f64 -200)) (cbrt.f64 40000))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -200) (*.f64 (cbrt.f64 40000) (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 40000) (*.f64 (-.f64 y x) (cbrt.f64 -200)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 40000) (-.f64 y x)) (cbrt.f64 -200))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -200 (-.f64 y x))) (pow.f64 (*.f64 -200 (-.f64 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 -200 (-.f64 y x)) 2/3) (cbrt.f64 (*.f64 -200 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -8000000 (-.f64 y x))) (pow.f64 (-.f64 y x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 y x) 2/3) (cbrt.f64 (*.f64 -8000000 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -200 (-.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y x) -200)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 y x)) (*.f64 (pow.f64 (-.f64 y x) 2/3) -200))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 y x) 2/3) -200) (cbrt.f64 (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 200 (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x y) 200)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 x y) -200)) (neg.f64 (pow.f64 (*.f64 -200 (-.f64 y x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (*.f64 -200 (-.f64 y x)) 2/3) (*.f64 0 (cbrt.f64 (*.f64 (-.f64 x y) -200))))) (cbrt.f64 (*.f64 -200 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 x y) -200))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 x y) -200) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 -200 (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -200 (-.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -200 (-.f64 y x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y x) (/.f64 1 -200))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -200 (-.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x y) -200) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 2 (*.f64 (-.f64 x y) -200))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 3 (*.f64 (-.f64 x y) -200))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -200 (-.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -200 (-.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -200 (-.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 x y) -200))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (-.f64 x y) -200) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 -200 (-.f64 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -200 y (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y -200 (*.f64 200 x))))))"]],"rules":[["egg-rr",53]],"time":39.568115234375,"type":"rewrite"},{"count":[[77,56]],"inputs":[["(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))"]],"time":79.333984375,"type":"simplify"},{"compiler":[[491,313]],"time":7.669921875,"type":"eval"},{"alts":[["(fma.f64 -200 y (*.f64 200 x))","fresh",0.01171875],["(fma.f64 200 x (*.f64 -200 y))","next",0.00390625]],"compiler":[[8,6],[8,6],[8,6],[8,6]],"count":[[57,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[56,2],"picked":[1,0]}],"min-error":[0],"time":11.60498046875,"type":"prune"},{"compiler":[[15,10]],"locations":[["(fma.f64 200 x (*.f64 -200 y))",0.00390625,true]],"time":3.9140625,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 200 x (*.f64 -200 y))","y","-inf",0.264892578125],["(fma.f64 200 x (*.f64 -200 y))","y","inf",0.243896484375],["(fma.f64 200 x (*.f64 -200 y))","y","0",0.2919921875],["(fma.f64 200 x (*.f64 -200 y))","x","-inf",0.3359375],["(fma.f64 200 x (*.f64 -200 y))","x","inf",0.223876953125],["(fma.f64 200 x (*.f64 -200 y))","x","0",0.49609375]],"time":1.93798828125,"type":"series"},{"count":[[1,43]],"inputs":[["(fma.f64 200 x (*.f64 -200 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 200 x) (*.f64 -200 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -200 y) (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 200 x (*.f64 -200 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 200 x (*.f64 -200 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -200 y) (*.f64 -200 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 200 x) (*.f64 200 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (*.f64 -200 x) (*.f64 200 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 200 x (*.f64 -200 y))) (pow.f64 (fma.f64 200 x (*.f64 -200 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 200 x (*.f64 -200 y)) 2/3) (cbrt.f64 (fma.f64 200 x (*.f64 -200 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 -200 x) (*.f64 200 y))) (neg.f64 (pow.f64 (fma.f64 200 x (*.f64 -200 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 40000 (*.f64 x x))) (-.f64 (pow.f64 (*.f64 -200 y) 2/3) (*.f64 (cbrt.f64 (*.f64 200 x)) (cbrt.f64 (*.f64 -200 y))))) (+.f64 (cbrt.f64 (*.f64 200 x)) (cbrt.f64 (*.f64 -200 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 -200 y) 2/3) (-.f64 (cbrt.f64 (*.f64 40000 (*.f64 x x))) (*.f64 (cbrt.f64 (*.f64 -200 y)) (cbrt.f64 (*.f64 200 x))))) (+.f64 (cbrt.f64 (*.f64 -200 y)) (cbrt.f64 (*.f64 200 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 -200 x) (*.f64 200 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -200 x) (*.f64 200 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 200 x (*.f64 -200 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 200 x (*.f64 -200 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 200 x (*.f64 -200 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 200 x (*.f64 -200 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -200 x) (*.f64 200 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 200 x (*.f64 -200 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 200 x (*.f64 -200 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 200 x (*.f64 -200 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 -200 x) (*.f64 200 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 200 x (*.f64 -200 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 200 x (*.f64 -200 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 200) (*.f64 (sqrt.f64 200) x) (*.f64 -200 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 8000000 x)) (pow.f64 x 2/3) (*.f64 -200 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 200) (*.f64 (cbrt.f64 40000) x) (*.f64 -200 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 200 x)) (cbrt.f64 (*.f64 40000 (*.f64 x x))) (*.f64 -200 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 200 (*.f64 -200 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y -200 (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -200) (*.f64 (cbrt.f64 40000) y) (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) -200) (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 -200 y) 2/3) (cbrt.f64 (*.f64 -200 y)) (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 -200)) (cbrt.f64 40000) (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -200 y)) (pow.f64 (*.f64 -200 y) 2/3) (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -200 y (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -8000000 y)) (pow.f64 y 2/3) (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 200 y) (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 200 x) (*.f64 -200 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 200 x) 1 (*.f64 -200 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -200 y) 1 (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -200 y) (*.f64 200 x))))))"]],"rules":[["egg-rr",43]],"time":37.14990234375,"type":"rewrite"},{"count":[[67,45]],"inputs":[["(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))"]],"time":76.282958984375,"type":"simplify"},{"compiler":[[457,344]],"time":7.5,"type":"eval"},{"alts":[["(fma.f64 y -200 (*.f64 200 x))","next",0.01171875],["(fma.f64 200 x (*.f64 -200 y))","done",0.00390625]],"compiler":[[8,6],[8,6],[8,6]],"count":[[47,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[45,1],"picked":[1,1]}],"min-error":[0],"time":8.174072265625,"type":"prune"},{"compiler":[[15,10]],"locations":[["(fma.f64 y -200 (*.f64 200 x))",0.01171875,true]],"time":3.737060546875,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 y -200 (*.f64 200 x))","x","-inf",0.20703125],["(fma.f64 y -200 (*.f64 200 x))","x","inf",0.239013671875],["(fma.f64 y -200 (*.f64 200 x))","x","0",0.205078125],["(fma.f64 y -200 (*.f64 200 x))","y","-inf",0.284912109375],["(fma.f64 y -200 (*.f64 200 x))","y","inf",0.197021484375],["(fma.f64 y -200 (*.f64 200 x))","y","0",0.536865234375]],"time":1.741943359375,"type":"series"},{"count":[[1,45]],"inputs":[["(fma.f64 y -200 (*.f64 200 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y -200) (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 200 x) (*.f64 y -200))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y -200 (*.f64 200 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y -200 (*.f64 200 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 200 x) (*.f64 200 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y -200) (*.f64 -200 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (*.f64 200 y) (*.f64 -200 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y -200 (*.f64 200 x))) (pow.f64 (fma.f64 y -200 (*.f64 200 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y -200 (*.f64 200 x)) 2/3) (cbrt.f64 (fma.f64 y -200 (*.f64 200 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 40000) (+.f64 (*.f64 x (cbrt.f64 200)) (*.f64 y (cbrt.f64 -200))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 200 y) (*.f64 -200 x))) (neg.f64 (pow.f64 (fma.f64 y -200 (*.f64 200 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 40000 (*.f64 y y))) (-.f64 (pow.f64 (*.f64 200 x) 2/3) (*.f64 (cbrt.f64 (*.f64 y -200)) (cbrt.f64 (*.f64 200 x))))) (+.f64 (cbrt.f64 (*.f64 y -200)) (cbrt.f64 (*.f64 200 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 200 x) 2/3) (-.f64 (cbrt.f64 (*.f64 40000 (*.f64 y y))) (*.f64 (cbrt.f64 (*.f64 200 x)) (cbrt.f64 (*.f64 y -200))))) (+.f64 (cbrt.f64 (*.f64 200 x)) (cbrt.f64 (*.f64 y -200))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 200 y) (*.f64 -200 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 200 y) (*.f64 -200 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y -200 (*.f64 200 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y -200 (*.f64 200 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 y -200 (*.f64 200 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y -200 (*.f64 200 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 200 y) (*.f64 -200 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y -200 (*.f64 200 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y -200 (*.f64 200 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y -200 (*.f64 200 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 200 y) (*.f64 -200 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y -200 (*.f64 200 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y -200 (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) -200) (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -200 y (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 -200)) (cbrt.f64 40000) (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y -200)) (cbrt.f64 (*.f64 40000 (*.f64 y y))) (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 200)) (sqrt.f64 200) (*.f64 y -200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 200 (*.f64 y -200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 200 x) 2/3) (cbrt.f64 (*.f64 200 x)) (*.f64 y -200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 200) (*.f64 (cbrt.f64 40000) x) (*.f64 y -200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) 200) (*.f64 y -200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 200 x)) (pow.f64 (*.f64 200 x) 2/3) (*.f64 y -200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 8000000 x)) (pow.f64 x 2/3) (*.f64 y -200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 200)) (cbrt.f64 40000) (*.f64 y -200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 200) (*.f64 x (sqrt.f64 200)) (*.f64 y -200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 200 x (*.f64 y -200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 -200 x) (*.f64 y -200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y -200) 1 (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y -200) (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 200 x) 1 (*.f64 y -200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 200 x) (*.f64 y -200))))))"]],"rules":[["egg-rr",45]],"time":38.64892578125,"type":"rewrite"},{"count":[[69,50]],"inputs":[["(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))"]],"time":79.18603515625,"type":"simplify"},{"compiler":[[499,376]],"time":9.47900390625,"type":"eval"},{"alts":[["(fma.f64 y -200 (*.f64 200 x))","done",0.01171875],["(fma.f64 200 x (*.f64 -200 y))","done",0.00390625]],"compiler":[[8,6],[8,6]],"count":[[52,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[50,0],"picked":[1,1]}],"min-error":[0],"time":9.23095703125,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["(*.f64 200 (-.f64 x y))",0.00390625,1],["(-.f64 x y)",0.00390625,1]],"compiler":[[3,2],[3,2],[7,5],[5,3],[30,20]],"count":[[5,1]],"inputs":[["(fma.f64 y -200 (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(*.f64 -200 (-.f64 y x))","(*.f64 200 (-.f64 x y))"]],"link":["."],"name":["Data.Colour.CIE:cieLABView from colour-2.3.3, C"],"oracle":[0.01953125],"outputs":[["(fma.f64 200 x (*.f64 -200 y))"]],"time":14.968017578125,"times":[["x",4.001953125],["y",3.279052734375],["(*.f64 200 (-.f64 x y))",3.407958984375],["(-.f64 x y)",3.242919921875]],"type":"regimes"},{"compiler":[[8,6]],"inputs":[["(fma.f64 200 x (*.f64 -200 y))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 200 x (*.f64 -200 y))"]],"stop":[["done",1]],"time":41.708984375,"type":"simplify"},{"time":0.037109375,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":8.93310546875,"type":"end"}]
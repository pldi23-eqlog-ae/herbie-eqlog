[{"compiler":[[18,13]],"method":["search"],"sampling":[[12,0.6585361144971102,0.34048756142146885,0.0009763240814208984],[11,0.6439019786193967,0.3551216972991824,0.0009763240814208984],[10,0.5736581264063716,0.4253655495122075,0.0009763240814208984],[9,0.546341072767973,0.45268260315060616,0.0009763240814208984],[8,0.42146311327815056,0.5775605626404285,0.0009763240814208984],[7,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[6,0.18731693923473358,0.8117067366838455,0.0009763240814208984],[5,0.12487795948982239,0.8741457164287567,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":82.22998046875,"type":"analyze"},{"outcomes":[["body",4096,"valid",144.29931640625,629],["body",1024,"valid",59.5517578125,434],["body",512,"valid",21.60888671875,227],["body",2048,"valid",115.107421875,628],["body",256,"valid",329.716552734375,6338]],"time":679.486083984375,"type":"sample"},{"compiler":[[17,12]],"inputs":[["0","1"],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re))) im))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))","(sqrt.f64 (/.f64 (*.f64 2 (+.f64 (hypot.f64 im re) re)) 4))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re))) im))))","(sqrt.f64 (/.f64 (*.f64 2 (+.f64 (hypot.f64 im re) im)) 4))"]],"symmetry":[[]],"time":60.7939453125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))","(sqrt.f64 (*.f64 (*.f64 2 (+.f64 (hypot.f64 re im) re)) 1/4))"]],"time":19.818115234375,"type":"simplify"},{"compiler":[[27,19]],"time":0.447998046875,"type":"eval"},{"alts":[["(sqrt.f64 (*.f64 (*.f64 2 (+.f64 (hypot.f64 re im) re)) 1/4))","next",14.070460287884416]],"compiler":[[12,9],[12,9]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[14.070460287884416],"time":0.93994140625,"type":"prune"},{"compiler":[[40,17]],"locations":[["(+.f64 (hypot.f64 re im) re)",0.6262961606704236,true]],"time":7.7509765625,"type":"localize"},{"count":[[1,24]],"series":[["(+.f64 (hypot.f64 re im) re)","im","-inf",0.2548828125],["(+.f64 (hypot.f64 re im) re)","im","inf",0.282958984375],["(+.f64 (hypot.f64 re im) re)","im","0",0.365966796875],["(+.f64 (hypot.f64 re im) re)","re","-inf",0.590087890625],["(+.f64 (hypot.f64 re im) re)","re","inf",0.494873046875],["(+.f64 (hypot.f64 re im) re)","re","0",0.4970703125]],"time":2.609130859375,"type":"series"},{"count":[[1,36]],"inputs":[["(+.f64 (hypot.f64 re im) re)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (hypot.f64 re im) re)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 re (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (hypot.f64 re im) 0) re)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (hypot.f64 re im) re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (hypot.f64 re im) re) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (hypot.f64 re im) (neg.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 re (neg.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (neg.f64 re) (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 re 2/3) (*.f64 (cbrt.f64 (hypot.f64 re im)) (-.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re)))) (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (hypot.f64 re im) 2/3) (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))) (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (neg.f64 re) (hypot.f64 re im))) (neg.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 re) (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (neg.f64 re) (hypot.f64 re im)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (hypot.f64 re im) re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (hypot.f64 re im) re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (hypot.f64 re im) re) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (hypot.f64 re im) re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 re) (hypot.f64 re im)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (hypot.f64 re im) re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 re) (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 re) (pow.f64 re 2/3) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 re 2/3) (cbrt.f64 re) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (hypot.f64 re im)) (sqrt.f64 (hypot.f64 re im)) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (hypot.f64 re im) 2/3) (cbrt.f64 (hypot.f64 re im)) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 re) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (hypot.f64 re im)) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 re (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (hypot.f64 re im) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 re 1 (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 re im) 1 re)))))"]],"rules":[["egg-rr",36]],"time":36.760009765625,"type":"rewrite"},{"count":[[60,65]],"inputs":[["im","(+.f64 re im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(*.f64 2 re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(*.f64 -1/2 (/.f64 (pow.f64 im 2) re))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 re 7))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(*.f64 2 re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","im","(+.f64 re im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(*.f64 -1 im)","(+.f64 re (*.f64 -1 im))","(+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))"]],"method":["egg-herbie"],"outputs":[["im","(+.f64 re im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 re im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 re im)))","(*.f64 2 re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (*.f64 2 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 (/.f64 (*.f64 im im) re) 1/2 (fma.f64 2 re (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) 1/16 (fma.f64 2 re (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3)))))","(*.f64 -1/2 (/.f64 (pow.f64 im 2) re))","(/.f64 (*.f64 -1/2 (*.f64 im im)) re)","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 re 7))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(fma.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) 1/8 (fma.f64 1/2 (/.f64 (fma.f64 1/16 (pow.f64 im 8) (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2)) (pow.f64 re 7)) (fma.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re))))","(*.f64 2 re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (*.f64 2 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 (/.f64 (*.f64 im im) re) 1/2 (fma.f64 2 re (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) 1/16 (fma.f64 2 re (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3)))))","im","(+.f64 re im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 re im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 re im)))","(*.f64 -1 im)","(neg.f64 im)","(+.f64 re (*.f64 -1 im))","(-.f64 re im)","(+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 (-.f64 re im) (/.f64 (*.f64 -1/2 (*.f64 re re)) im))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))","(fma.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 (-.f64 re im) (/.f64 (*.f64 -1/2 (*.f64 re re)) im)))"]],"time":78.23583984375,"type":"simplify"},{"compiler":[[1108,731]],"time":13.89501953125,"type":"eval"},{"alts":[["(sqrt.f64 (*.f64 (*.f64 2 (*.f64 (+.f64 (pow.f64 (hypot.f64 re im) 2/3) (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))) (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))) 1/4))","fresh",17.758542147895483],["(sqrt.f64 (*.f64 (*.f64 2 (neg.f64 im)) 1/4))","fresh",48.501427099443866],["(sqrt.f64 (*.f64 (*.f64 2 (/.f64 (*.f64 -1/2 (*.f64 im im)) re)) 1/4))","fresh",54.99722014174851],["(sqrt.f64 (*.f64 (*.f64 2 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))) 1/4))","next",17.754473817085128],["(sqrt.f64 (*.f64 (*.f64 2 (+.f64 (hypot.f64 re im) re)) 1/4))","done",14.070460287884416],["(sqrt.f64 (*.f64 (*.f64 2 im) 1/4))","fresh",48.962360533202926]],"compiler":[[31,17],[9,8],[14,11],[21,13],[12,9],[8,7],[31,17],[9,8],[14,11],[21,13],[8,7]],"count":[[66,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[65,5],"picked":[1,1]}],"min-error":[8.699875417194649],"time":11.8740234375,"type":"prune"},{"compiler":[[95,33]],"locations":[["(cbrt.f64 (+.f64 (hypot.f64 re im) re))",0.078125,true],["(*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))",0.203125,true],["(+.f64 (hypot.f64 re im) re)",0.6262961606704236,false],["(pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)",4.4761159860506154,true]],"time":24.218994140625,"type":"localize"},{"count":[[3,56]],"series":[["(cbrt.f64 (+.f64 (hypot.f64 re im) re))","im","-inf",0.316162109375],["(cbrt.f64 (+.f64 (hypot.f64 re im) re))","im","inf",0.505126953125],["(cbrt.f64 (+.f64 (hypot.f64 re im) re))","im","0",1.663818359375],["(cbrt.f64 (+.f64 (hypot.f64 re im) re))","re","-inf",0.463134765625],["(cbrt.f64 (+.f64 (hypot.f64 re im) re))","re","inf",0.51904296875],["(cbrt.f64 (+.f64 (hypot.f64 re im) re))","re","0",0.7939453125],["(*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))","im","-inf",0.180908203125],["(*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))","im","inf",0.218994140625],["(*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))","im","0",0.222900390625],["(*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))","re","-inf",0.323974609375],["(*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))","re","inf",0.220947265625],["(*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))","re","0",0.251953125],["(pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)","im","-inf",0.407958984375],["(pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)","im","inf",0.787109375],["(pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)","im","0",1.319091796875],["(pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)","re","-inf",1.503173828125],["(pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)","re","inf",1.429931640625],["(pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)","re","0",0.739990234375]],"time":14.7919921875,"type":"series"},{"count":[[3,101]],"inputs":[["(pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)","(*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))","(cbrt.f64 (+.f64 (hypot.f64 re im) re))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) 1/3) (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) 0) (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) 2/3) (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) (*.f64 2/3 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (*.f64 0 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) (*.f64 1/3 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (+.f64 (hypot.f64 re im) re))) (cbrt.f64 (neg.f64 (+.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (+.f64 3 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 4) (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (+.f64 3 2)) (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (+.f64 (hypot.f64 re im) re))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (hypot.f64 re im) re)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 re (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (hypot.f64 re im) re) 1/3) (*.f64 (+.f64 (hypot.f64 re im) re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (hypot.f64 re im) re) 0) (+.f64 (hypot.f64 re im) re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (hypot.f64 re im) re) (*.f64 (+.f64 (hypot.f64 re im) re) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (hypot.f64 re im) re) 2/3) (*.f64 (+.f64 (hypot.f64 re im) re) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (+.f64 (hypot.f64 re im) re)) (*.f64 2/3 (+.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (hypot.f64 re im) re)) (+.f64 (hypot.f64 re im) re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (hypot.f64 re im) re) (*.f64 0 (+.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (+.f64 (hypot.f64 re im) re)) (*.f64 1/3 (+.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (pow.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 4) (+.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) (pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) 4) (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (hypot.f64 re im) re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 4) (+.f64 (hypot.f64 re im) re))) (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 re 2/3) (-.f64 (pow.f64 (hypot.f64 re im) 2/3) (cbrt.f64 (*.f64 (hypot.f64 re im) re)))) (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (hypot.f64 re im) 2/3) (-.f64 (pow.f64 re 2/3) (cbrt.f64 (*.f64 (hypot.f64 re im) re)))) (+.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (hypot.f64 re im) re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (hypot.f64 re im) re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (+.f64 3 2)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 4) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (+.f64 3 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (hypot.f64 re im) re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (hypot.f64 re im) re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 re) (pow.f64 re 2/3) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 re 2/3) (cbrt.f64 re) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 re) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (hypot.f64 re im)) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (hypot.f64 re im)) (sqrt.f64 (hypot.f64 re im)) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (hypot.f64 re im) 2/3) (cbrt.f64 (hypot.f64 re im)) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 re (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (hypot.f64 re im) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 re 1 (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 re im) 1 re)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 1/3) (*.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 0) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) (*.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 2/3) (*.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (*.f64 2/3 (cbrt.f64 (+.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) (*.f64 0 (cbrt.f64 (+.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (*.f64 1/3 (cbrt.f64 (+.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (+.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (+.f64 (hypot.f64 re im) re))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3))) (cbrt.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 4) (+.f64 (hypot.f64 re im) re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) (+.f64 2 1/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (+.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)))) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (+.f64 3 2))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (hypot.f64 re im) re) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (+.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (+.f64 (hypot.f64 re im) re))))))"]],"rules":[["egg-rr",26],["egg-rr",45],["egg-rr",30]],"time":28.109130859375,"type":"rewrite"},{"count":[[157,188]],"inputs":[["(pow.f64 (pow.f64 im 2) 1/3)","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (pow.f64 (pow.f64 im 2) 1/3))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (pow.f64 (pow.f64 im 2) 1/3)))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (*.f64 -5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 7)) 1/3) (pow.f64 re 3))))))","(exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re))))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (pow.f64 im 2)) (pow.f64 re 2))) (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (+.f64 (*.f64 1/72 (pow.f64 im 4)) (*.f64 1/36 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 -3/2 (pow.f64 im 4)))))) (pow.f64 re 4))))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (+.f64 (*.f64 1/216 (*.f64 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 -3/2 (pow.f64 im 4))) (pow.f64 im 2))) (+.f64 (*.f64 1/1296 (pow.f64 im 6)) (*.f64 1/1080 (+.f64 (*.f64 15/4 (pow.f64 im 6)) (+.f64 (*.f64 45/2 (pow.f64 im 6)) (*.f64 45/4 (pow.f64 im 6)))))))) (pow.f64 re 6)) (+.f64 (*.f64 1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (+.f64 (*.f64 1/72 (pow.f64 im 4)) (*.f64 1/36 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 -3/2 (pow.f64 im 4)))))) (pow.f64 re 4)))))","(exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2))))))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (pow.f64 im 2)) (pow.f64 re 2))) (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (+.f64 (*.f64 1/72 (pow.f64 im 4)) (*.f64 1/36 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 3 (pow.f64 im 4)))))) (pow.f64 re 4))))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (+.f64 (*.f64 1/72 (pow.f64 im 4)) (*.f64 1/36 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 3 (pow.f64 im 4)))))) (pow.f64 re 4)) (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (+.f64 (*.f64 -1/216 (*.f64 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 3 (pow.f64 im 4))) (pow.f64 im 2))) (+.f64 (*.f64 1/1080 (+.f64 (*.f64 45/2 (pow.f64 im 6)) (+.f64 (*.f64 -720 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 im 2))) (*.f64 -15/4 (pow.f64 im 6))))) (*.f64 -1/1296 (pow.f64 im 6))))) (pow.f64 re 6)))))","(pow.f64 (*.f64 4 (pow.f64 re 2)) 1/3)","(+.f64 (pow.f64 (*.f64 4 (pow.f64 re 2)) 1/3) (*.f64 1/6 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 4)) 1/3) (pow.f64 im 2))))","(+.f64 (*.f64 -7/144 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 10)) 1/3) (pow.f64 im 4))) (+.f64 (pow.f64 (*.f64 4 (pow.f64 re 2)) 1/3) (*.f64 1/6 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 4)) 1/3) (pow.f64 im 2)))))","(+.f64 (*.f64 -7/144 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 10)) 1/3) (pow.f64 im 4))) (+.f64 (*.f64 65/2592 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 16)) 1/3) (pow.f64 im 6))) (+.f64 (pow.f64 (*.f64 4 (pow.f64 re 2)) 1/3) (*.f64 1/6 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 4)) 1/3) (pow.f64 im 2))))))","(pow.f64 (pow.f64 im 2) 1/3)","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (pow.f64 (pow.f64 im 2) 1/3))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (+.f64 (*.f64 2/9 (pow.f64 re 2)) (*.f64 1/3 (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2)))))) (pow.f64 (pow.f64 im 2) 1/3)))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (+.f64 (*.f64 2/9 (pow.f64 re 2)) (*.f64 1/3 (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2)))))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 7)) 1/3) (+.f64 (*.f64 2/9 (*.f64 re (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2))))) (+.f64 (*.f64 1/9 (+.f64 (*.f64 -3 (pow.f64 re 3)) (*.f64 2 (pow.f64 re 3)))) (*.f64 4/81 (pow.f64 re 3))))) (pow.f64 (pow.f64 im 2) 1/3))))","(pow.f64 (pow.f64 im 2) 1/3)","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (pow.f64 (pow.f64 im 2) 1/3))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (+.f64 (*.f64 2/9 (pow.f64 re 2)) (*.f64 1/3 (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2)))))) (pow.f64 (pow.f64 im 2) 1/3)))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (+.f64 (*.f64 2/9 (pow.f64 re 2)) (*.f64 1/3 (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2)))))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 7)) 1/3) (+.f64 (*.f64 2/9 (*.f64 re (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2))))) (+.f64 (*.f64 1/9 (+.f64 (*.f64 -3 (pow.f64 re 3)) (*.f64 2 (pow.f64 re 3)))) (*.f64 4/81 (pow.f64 re 3)))))) (pow.f64 (pow.f64 im 2) 1/3))))","im","(+.f64 re im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(*.f64 2 re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(*.f64 -1/2 (/.f64 (pow.f64 im 2) re))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 re 7))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(*.f64 2 re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","im","(+.f64 re im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(*.f64 -1 im)","(+.f64 re (*.f64 -1 im))","(+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))","(pow.f64 im 1/3)","(+.f64 (pow.f64 im 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 2)) 1/9) re)))","(+.f64 (pow.f64 im 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 2)) 1/3) (*.f64 (-.f64 (*.f64 1/2 (/.f64 1 im)) (*.f64 1/3 (pow.f64 (/.f64 1 im) 1/9))) (pow.f64 re 2)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 2)) 1/9) re))))","(+.f64 (pow.f64 im 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 2)) 1/3) (*.f64 (-.f64 (*.f64 1/2 (/.f64 1 im)) (*.f64 1/3 (pow.f64 (/.f64 1 im) 1/9))) (pow.f64 re 2)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 2)) 1/9) re)) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 2)) 1/3) (*.f64 (+.f64 (*.f64 1/27 (pow.f64 (/.f64 1 (pow.f64 im 2)) 1/3)) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 5)) 1/9) (-.f64 (*.f64 1/2 (/.f64 1 im)) (*.f64 1/3 (pow.f64 (/.f64 1 im) 1/9)))))) (pow.f64 re 3)))))))","(*.f64 (pow.f64 (*.f64 1 re) 1/3) (cbrt.f64 2))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 (cbrt.f64 2) 2)))) (*.f64 (pow.f64 (*.f64 1 re) 1/3) (cbrt.f64 2)))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 (cbrt.f64 2) 2)))) (+.f64 (*.f64 -1/18 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 11)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 (cbrt.f64 2) 2)))) (*.f64 (pow.f64 (*.f64 1 re) 1/3) (cbrt.f64 2))))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 (cbrt.f64 2) 2)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 2)) 1/3) (/.f64 (*.f64 (-.f64 (*.f64 13/144 (/.f64 1 (pow.f64 re 5))) (*.f64 1/216 (/.f64 1 (*.f64 (pow.f64 (cbrt.f64 2) 6) (pow.f64 re 5))))) (pow.f64 im 6)) (pow.f64 (cbrt.f64 2) 2)))) (+.f64 (*.f64 -1/18 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 11)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 (cbrt.f64 2) 2)))) (*.f64 (pow.f64 (*.f64 1 re) 1/3) (cbrt.f64 2)))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (pow.f64 im 2) 1/3)","(cbrt.f64 (*.f64 im im))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (pow.f64 (pow.f64 im 2) 1/3))","(fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 im)) re) (cbrt.f64 (*.f64 im im)))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (pow.f64 (pow.f64 im 2) 1/3)))","(fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 im)) re) (fma.f64 2/9 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (cbrt.f64 (*.f64 im im))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (*.f64 -5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 7)) 1/3) (pow.f64 re 3))))))","(+.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 im)) re) (fma.f64 2/9 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (cbrt.f64 (*.f64 im im)))) (*.f64 -5/81 (*.f64 (cbrt.f64 (pow.f64 im -7)) (pow.f64 re 3))))","(exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re))))))","(pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re)))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (pow.f64 im 2)) (pow.f64 re 2))) (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))))","(fma.f64 1/6 (/.f64 (*.f64 (pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re))) (*.f64 im im)) (*.f64 re re)) (pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (+.f64 (*.f64 1/72 (pow.f64 im 4)) (*.f64 1/36 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 -3/2 (pow.f64 im 4)))))) (pow.f64 re 4))))","(+.f64 (fma.f64 1/6 (/.f64 (*.f64 (pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re))) (*.f64 im im)) (*.f64 re re)) (pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re)))) (*.f64 (*.f64 (pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re))) (fma.f64 1/72 (pow.f64 im 4) (*.f64 1/36 (*.f64 (pow.f64 im 4) -9/4)))) (pow.f64 re -4)))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (+.f64 (*.f64 1/216 (*.f64 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 -3/2 (pow.f64 im 4))) (pow.f64 im 2))) (+.f64 (*.f64 1/1296 (pow.f64 im 6)) (*.f64 1/1080 (+.f64 (*.f64 15/4 (pow.f64 im 6)) (+.f64 (*.f64 45/2 (pow.f64 im 6)) (*.f64 45/4 (pow.f64 im 6)))))))) (pow.f64 re 6)) (+.f64 (*.f64 1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (+.f64 (*.f64 1/72 (pow.f64 im 4)) (*.f64 1/36 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 -3/2 (pow.f64 im 4)))))) (pow.f64 re 4)))))","(+.f64 (+.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re))) (fma.f64 1/216 (*.f64 (*.f64 (pow.f64 im 4) -9/4) (*.f64 im im)) (fma.f64 1/1296 (pow.f64 im 6) (*.f64 1/1080 (*.f64 (pow.f64 im 6) (+.f64 135/4 15/4)))))) (pow.f64 re 6)) (fma.f64 1/6 (/.f64 (*.f64 (pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re))) (*.f64 im im)) (*.f64 re re)) (pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re))))) (*.f64 (*.f64 (pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re))) (fma.f64 1/72 (pow.f64 im 4) (*.f64 1/36 (*.f64 (pow.f64 im 4) -9/4)))) (pow.f64 re -4)))","(exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2))))))","(pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (pow.f64 im 2)) (pow.f64 re 2))) (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))))","(fma.f64 -1/6 (/.f64 (*.f64 (pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3) (*.f64 im im)) (*.f64 re re)) (pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (+.f64 (*.f64 1/72 (pow.f64 im 4)) (*.f64 1/36 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 3 (pow.f64 im 4)))))) (pow.f64 re 4))))","(+.f64 (fma.f64 -1/6 (/.f64 (*.f64 (pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3) (*.f64 im im)) (*.f64 re re)) (pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3)) (*.f64 (*.f64 (pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3) (fma.f64 1/72 (pow.f64 im 4) (*.f64 1/36 (*.f64 (pow.f64 im 4) 9/4)))) (pow.f64 re -4)))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (+.f64 (*.f64 1/72 (pow.f64 im 4)) (*.f64 1/36 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 3 (pow.f64 im 4)))))) (pow.f64 re 4)) (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (+.f64 (*.f64 -1/216 (*.f64 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 3 (pow.f64 im 4))) (pow.f64 im 2))) (+.f64 (*.f64 1/1080 (+.f64 (*.f64 45/2 (pow.f64 im 6)) (+.f64 (*.f64 -720 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 im 2))) (*.f64 -15/4 (pow.f64 im 6))))) (*.f64 -1/1296 (pow.f64 im 6))))) (pow.f64 re 6)))))","(+.f64 (fma.f64 -1/6 (/.f64 (*.f64 (pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3) (*.f64 im im)) (*.f64 re re)) (pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3)) (+.f64 (*.f64 (*.f64 (pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3) (fma.f64 1/72 (pow.f64 im 4) (*.f64 1/36 (*.f64 (pow.f64 im 4) 9/4)))) (pow.f64 re -4)) (/.f64 (*.f64 (pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3) (fma.f64 -1/216 (*.f64 (*.f64 (pow.f64 im 4) 9/4) (*.f64 im im)) (fma.f64 1/1080 (fma.f64 45/2 (pow.f64 im 6) (fma.f64 -720 (*.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 im -2)) (*.f64 -15/4 (pow.f64 im 6)))) (*.f64 -1/1296 (pow.f64 im 6))))) (pow.f64 re 6))))","(pow.f64 (*.f64 4 (pow.f64 re 2)) 1/3)","(cbrt.f64 (pow.f64 (*.f64 2 re) 2))","(+.f64 (pow.f64 (*.f64 4 (pow.f64 re 2)) 1/3) (*.f64 1/6 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 4)) 1/3) (pow.f64 im 2))))","(+.f64 (cbrt.f64 (pow.f64 (*.f64 2 re) 2)) (*.f64 1/6 (*.f64 (cbrt.f64 (*.f64 4 (pow.f64 re -4))) (*.f64 im im))))","(+.f64 (*.f64 -7/144 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 10)) 1/3) (pow.f64 im 4))) (+.f64 (pow.f64 (*.f64 4 (pow.f64 re 2)) 1/3) (*.f64 1/6 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 4)) 1/3) (pow.f64 im 2)))))","(fma.f64 -7/144 (*.f64 (cbrt.f64 (/.f64 4 (pow.f64 re 10))) (pow.f64 im 4)) (+.f64 (cbrt.f64 (pow.f64 (*.f64 2 re) 2)) (*.f64 1/6 (*.f64 (cbrt.f64 (*.f64 4 (pow.f64 re -4))) (*.f64 im im)))))","(+.f64 (*.f64 -7/144 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 10)) 1/3) (pow.f64 im 4))) (+.f64 (*.f64 65/2592 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 16)) 1/3) (pow.f64 im 6))) (+.f64 (pow.f64 (*.f64 4 (pow.f64 re 2)) 1/3) (*.f64 1/6 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 4)) 1/3) (pow.f64 im 2))))))","(fma.f64 -7/144 (*.f64 (cbrt.f64 (/.f64 4 (pow.f64 re 10))) (pow.f64 im 4)) (fma.f64 65/2592 (*.f64 (cbrt.f64 (/.f64 4 (pow.f64 re 16))) (pow.f64 im 6)) (+.f64 (cbrt.f64 (pow.f64 (*.f64 2 re) 2)) (*.f64 1/6 (*.f64 (cbrt.f64 (*.f64 4 (pow.f64 re -4))) (*.f64 im im))))))","(pow.f64 (pow.f64 im 2) 1/3)","(cbrt.f64 (*.f64 im im))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (pow.f64 (pow.f64 im 2) 1/3))","(fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 im)) re) (cbrt.f64 (*.f64 im im)))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (+.f64 (*.f64 2/9 (pow.f64 re 2)) (*.f64 1/3 (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2)))))) (pow.f64 (pow.f64 im 2) 1/3)))","(fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 im)) re) (fma.f64 (cbrt.f64 (pow.f64 im -4)) (fma.f64 2/9 (*.f64 re re) (*.f64 0 1/3)) (cbrt.f64 (*.f64 im im))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (+.f64 (*.f64 2/9 (pow.f64 re 2)) (*.f64 1/3 (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2)))))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 7)) 1/3) (+.f64 (*.f64 2/9 (*.f64 re (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2))))) (+.f64 (*.f64 1/9 (+.f64 (*.f64 -3 (pow.f64 re 3)) (*.f64 2 (pow.f64 re 3)))) (*.f64 4/81 (pow.f64 re 3))))) (pow.f64 (pow.f64 im 2) 1/3))))","(fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 im)) re) (fma.f64 (cbrt.f64 (pow.f64 im -4)) (fma.f64 2/9 (*.f64 re re) (*.f64 0 1/3)) (fma.f64 (cbrt.f64 (pow.f64 im -7)) (fma.f64 2/9 (*.f64 re 0) (fma.f64 1/9 (*.f64 (pow.f64 re 3) -1) (*.f64 4/81 (pow.f64 re 3)))) (cbrt.f64 (*.f64 im im)))))","(pow.f64 (pow.f64 im 2) 1/3)","(cbrt.f64 (*.f64 im im))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (pow.f64 (pow.f64 im 2) 1/3))","(fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 im)) re) (cbrt.f64 (*.f64 im im)))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (+.f64 (*.f64 2/9 (pow.f64 re 2)) (*.f64 1/3 (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2)))))) (pow.f64 (pow.f64 im 2) 1/3)))","(fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 im)) re) (fma.f64 (cbrt.f64 (pow.f64 im -4)) (fma.f64 2/9 (*.f64 re re) (*.f64 0 1/3)) (cbrt.f64 (*.f64 im im))))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (+.f64 (*.f64 2/9 (pow.f64 re 2)) (*.f64 1/3 (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2)))))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 7)) 1/3) (+.f64 (*.f64 2/9 (*.f64 re (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2))))) (+.f64 (*.f64 1/9 (+.f64 (*.f64 -3 (pow.f64 re 3)) (*.f64 2 (pow.f64 re 3)))) (*.f64 4/81 (pow.f64 re 3)))))) (pow.f64 (pow.f64 im 2) 1/3))))","(fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 im)) re) (fma.f64 (cbrt.f64 (pow.f64 im -4)) (fma.f64 2/9 (*.f64 re re) (*.f64 0 1/3)) (-.f64 (cbrt.f64 (*.f64 im im)) (*.f64 (cbrt.f64 (pow.f64 im -7)) (fma.f64 2/9 (*.f64 re 0) (fma.f64 1/9 (*.f64 (pow.f64 re 3) -1) (*.f64 4/81 (pow.f64 re 3))))))))","im","(+.f64 re im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 re im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 re im)))","(*.f64 2 re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (*.f64 2 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 2 re (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 1/16 (*.f64 (pow.f64 im 6) (pow.f64 re -5)) (fma.f64 2 re (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3)))))","(*.f64 -1/2 (/.f64 (pow.f64 im 2) re))","(/.f64 (*.f64 -1/2 (*.f64 im im)) re)","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 -1/16 (*.f64 (pow.f64 im 6) (pow.f64 re -5)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 re 7))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 1/2 (*.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 re -7)) (fma.f64 -1/16 (*.f64 (pow.f64 im 6) (pow.f64 re -5)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re))))","(*.f64 2 re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (*.f64 2 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 2 re (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 1/16 (*.f64 (pow.f64 im 6) (pow.f64 re -5)) (fma.f64 2 re (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3)))))","im","(+.f64 re im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 re im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 re im)))","(*.f64 -1 im)","(neg.f64 im)","(+.f64 re (*.f64 -1 im))","(-.f64 re im)","(+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 re (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))","(fma.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 re (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im))))","(pow.f64 im 1/3)","(cbrt.f64 im)","(+.f64 (pow.f64 im 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 2)) 1/9) re)))","(+.f64 (cbrt.f64 im) (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 im -2) 1/9) re)))","(+.f64 (pow.f64 im 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 2)) 1/3) (*.f64 (-.f64 (*.f64 1/2 (/.f64 1 im)) (*.f64 1/3 (pow.f64 (/.f64 1 im) 1/9))) (pow.f64 re 2)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 2)) 1/9) re))))","(+.f64 (cbrt.f64 im) (*.f64 1/3 (+.f64 (*.f64 (cbrt.f64 (pow.f64 im -2)) (*.f64 (+.f64 (/.f64 1/2 im) (*.f64 -1/3 (pow.f64 (/.f64 1 im) 1/9))) (*.f64 re re))) (*.f64 (pow.f64 (pow.f64 im -2) 1/9) re))))","(+.f64 (pow.f64 im 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 2)) 1/3) (*.f64 (-.f64 (*.f64 1/2 (/.f64 1 im)) (*.f64 1/3 (pow.f64 (/.f64 1 im) 1/9))) (pow.f64 re 2)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 2)) 1/9) re)) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 2)) 1/3) (*.f64 (+.f64 (*.f64 1/27 (pow.f64 (/.f64 1 (pow.f64 im 2)) 1/3)) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 5)) 1/9) (-.f64 (*.f64 1/2 (/.f64 1 im)) (*.f64 1/3 (pow.f64 (/.f64 1 im) 1/9)))))) (pow.f64 re 3)))))))","(+.f64 (+.f64 (cbrt.f64 im) (*.f64 1/3 (+.f64 (*.f64 (cbrt.f64 (pow.f64 im -2)) (*.f64 (+.f64 (/.f64 1/2 im) (*.f64 -1/3 (pow.f64 (/.f64 1 im) 1/9))) (*.f64 re re))) (*.f64 (pow.f64 (pow.f64 im -2) 1/9) re)))) (*.f64 -1/3 (*.f64 (cbrt.f64 (pow.f64 im -2)) (*.f64 (fma.f64 1/27 (cbrt.f64 (pow.f64 im -2)) (*.f64 2/3 (*.f64 (pow.f64 (pow.f64 im -5) 1/9) (+.f64 (/.f64 1/2 im) (*.f64 -1/3 (pow.f64 (/.f64 1 im) 1/9)))))) (pow.f64 re 3)))))","(*.f64 (pow.f64 (*.f64 1 re) 1/3) (cbrt.f64 2))","(*.f64 (cbrt.f64 re) (cbrt.f64 2))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 (cbrt.f64 2) 2)))) (*.f64 (pow.f64 (*.f64 1 re) 1/3) (cbrt.f64 2)))","(fma.f64 1/6 (/.f64 (*.f64 (cbrt.f64 (pow.f64 re -5)) (*.f64 im im)) (cbrt.f64 4)) (*.f64 (cbrt.f64 re) (cbrt.f64 2)))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 (cbrt.f64 2) 2)))) (+.f64 (*.f64 -1/18 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 11)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 (cbrt.f64 2) 2)))) (*.f64 (pow.f64 (*.f64 1 re) 1/3) (cbrt.f64 2))))","(fma.f64 1/6 (/.f64 (*.f64 (cbrt.f64 (pow.f64 re -5)) (*.f64 im im)) (cbrt.f64 4)) (fma.f64 -1/18 (/.f64 (*.f64 (cbrt.f64 (pow.f64 re -11)) (pow.f64 im 4)) (cbrt.f64 4)) (*.f64 (cbrt.f64 re) (cbrt.f64 2))))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 (cbrt.f64 2) 2)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 2)) 1/3) (/.f64 (*.f64 (-.f64 (*.f64 13/144 (/.f64 1 (pow.f64 re 5))) (*.f64 1/216 (/.f64 1 (*.f64 (pow.f64 (cbrt.f64 2) 6) (pow.f64 re 5))))) (pow.f64 im 6)) (pow.f64 (cbrt.f64 2) 2)))) (+.f64 (*.f64 -1/18 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 11)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 (cbrt.f64 2) 2)))) (*.f64 (pow.f64 (*.f64 1 re) 1/3) (cbrt.f64 2)))))","(fma.f64 1/6 (/.f64 (*.f64 (cbrt.f64 (pow.f64 re -5)) (*.f64 im im)) (cbrt.f64 4)) (fma.f64 1/3 (/.f64 (*.f64 (cbrt.f64 (pow.f64 re -2)) (*.f64 (fma.f64 13/144 (pow.f64 re -5) (/.f64 -1/216 (*.f64 (pow.f64 (cbrt.f64 2) 6) (pow.f64 re 5)))) (pow.f64 im 6))) (cbrt.f64 4)) (fma.f64 -1/18 (/.f64 (*.f64 (cbrt.f64 (pow.f64 re -11)) (pow.f64 im 4)) (cbrt.f64 4)) (*.f64 (cbrt.f64 re) (cbrt.f64 2)))))"]],"time":251.10595703125,"type":"simplify"},{"compiler":[[9195,5530]],"time":95.19384765625,"type":"eval"},{"alts":[["(sqrt.f64 (*.f64 (*.f64 2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))) 1/4))","fresh",54.99722014174851],["(sqrt.f64 (*.f64 (*.f64 2 (+.f64 (hypot.f64 re im) re)) 1/4))","done",14.070460287884416],["(sqrt.f64 (*.f64 (*.f64 2 (neg.f64 im)) 1/4))","fresh",48.501427099443866],["(sqrt.f64 (*.f64 (*.f64 2 (*.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))) 1/4))","fresh",18.269198988621074],["(sqrt.f64 (*.f64 (*.f64 2 (*.f64 (+.f64 (pow.f64 (hypot.f64 re im) 2/3) (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))) (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))) 1/4))","next",17.758542147895483],["(sqrt.f64 (*.f64 (*.f64 2 im) 1/4))","fresh",48.962360533202926]],"compiler":[[14,12],[12,9],[9,8],[30,16],[31,17],[8,7],[14,12],[9,8],[30,16],[31,17],[8,7]],"count":[[324,6]],"kept":[{"done":[1,1],"fresh":[4,2],"new":[318,3],"picked":[1,0]}],"min-error":[8.69986823276967],"time":67.151123046875,"type":"prune"},{"compiler":[[168,43]],"locations":[["(*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))",0.29525375976844204,true],["(-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))",0.29615866132305735,true],["(+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))",0.6456326204327076,true],["(pow.f64 (hypot.f64 re im) 2/3)",5.994210465255467,true]],"time":38.60791015625,"type":"localize"},{"count":[[4,44]],"series":[["(*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))","im","-inf",0.287109375],["(*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))","im","inf",0.43603515625],["(*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))","im","0",0.68994140625],["(*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))","re","-inf",1.375],["(*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))","re","inf",1.39306640625],["(*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))","re","0",0.56298828125],["(-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))","im","-inf",0.241943359375],["(-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))","im","inf",0.2919921875],["(-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))","im","0",0.9130859375],["(-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))","re","-inf",0.441162109375],["(-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))","re","inf",0.9228515625],["(-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))","re","0",0.31494140625],["(+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))","im","-inf",0.2548828125],["(+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))","im","inf",0.235107421875],["(+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))","im","0",0.799072265625],["(+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))","re","-inf",0.926025390625],["(+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))","re","inf",0.449951171875],["(+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))","re","0",0.52392578125],["(pow.f64 (hypot.f64 re im) 2/3)","im","-inf",0.3759765625],["(pow.f64 (hypot.f64 re im) 2/3)","im","inf",0.890869140625],["(pow.f64 (hypot.f64 re im) 2/3)","im","0",0.757080078125],["(pow.f64 (hypot.f64 re im) 2/3)","re","-inf",0.406982421875],["(pow.f64 (hypot.f64 re im) 2/3)","re","inf",1.764892578125],["(pow.f64 (hypot.f64 re im) 2/3)","re","0",1.029052734375]],"time":16.66015625,"type":"series"},{"count":[[4,155]],"inputs":[["(pow.f64 (hypot.f64 re im) 2/3)","(+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))","(-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))","(*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (hypot.f64 re im) 2/3) 0) (pow.f64 (hypot.f64 re im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (hypot.f64 re im) 2/3) (*.f64 (pow.f64 (hypot.f64 re im) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (hypot.f64 re im) 2/3)) (pow.f64 (hypot.f64 re im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (hypot.f64 re im) 2/3) (*.f64 0 (pow.f64 (hypot.f64 re im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (hypot.f64 re im))) (cbrt.f64 (neg.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (hypot.f64 re im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 re im) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) (pow.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) (+.f64 2 3)) (cbrt.f64 (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2/3) (pow.f64 (sqrt.f64 (hypot.f64 re im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (hypot.f64 re im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) 4) (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (hypot.f64 re im) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (hypot.f64 re im) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 re im) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 re im)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (hypot.f64 re im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) (+.f64 1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 re im) 2) (*.f64 1/6 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 (neg.f64 (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (neg.f64 (hypot.f64 re im))) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (hypot.f64 re im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (hypot.f64 re im) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 0) (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) (*.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) (*.f64 0 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 re) (*.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im)))) (neg.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cbrt.f64 re) 0) (cbrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 re) (cbrt.f64 (neg.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 re 2/3)) (-.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 re (hypot.f64 re im)))))) (+.f64 (cbrt.f64 (cbrt.f64 re)) (cbrt.f64 (cbrt.f64 (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)) (-.f64 (cbrt.f64 (pow.f64 re 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 re (hypot.f64 re im)))))) (+.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) (cbrt.f64 (cbrt.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) (pow.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 2/3) (cbrt.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (cbrt.f64 (neg.f64 re)) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (cbrt.f64 (neg.f64 (hypot.f64 re im))) (cbrt.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)) (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 (neg.f64 (hypot.f64 re im))) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 re)) (cbrt.f64 (pow.f64 re 2/3)) (cbrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 (neg.f64 re)) (cbrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 re 2/3)) (cbrt.f64 (cbrt.f64 re)) (cbrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 re) 1 (cbrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (hypot.f64 re im)) 1 (cbrt.f64 re))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 0) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) (*.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) (*.f64 0 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 re) (cbrt.f64 (neg.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 (hypot.f64 re im))) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 (neg.f64 (hypot.f64 re im))) (cbrt.f64 (neg.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (cbrt.f64 re) 0) (cbrt.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re)))) (pow.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 re 2/3)) (+.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 re (hypot.f64 re im)))))) (-.f64 (cbrt.f64 (cbrt.f64 re)) (cbrt.f64 (cbrt.f64 (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) (pow.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 2/3) (cbrt.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (cbrt.f64 (neg.f64 re)) (cbrt.f64 (neg.f64 (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re))) (neg.f64 (pow.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 re)) (cbrt.f64 (pow.f64 re 2/3)) (cbrt.f64 (neg.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 re) (cbrt.f64 (neg.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im)))) (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3)) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (neg.f64 (hypot.f64 re im))) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 re im))) (neg.f64 (cbrt.f64 (pow.f64 (hypot.f64 re im) 2/3))) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 (neg.f64 re)) (cbrt.f64 (neg.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 re 2/3)) (cbrt.f64 (cbrt.f64 re)) (cbrt.f64 (neg.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 re) 1 (cbrt.f64 (neg.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 re 2/3) (neg.f64 (cbrt.f64 (*.f64 re (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (cbrt.f64 (*.f64 re (hypot.f64 re im)))) (pow.f64 re 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) 0) (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) (*.f64 (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 re 2/3) (*.f64 (neg.f64 (cbrt.f64 (*.f64 re (hypot.f64 re im)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))) (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) (*.f64 0 (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 re 2/3) (cbrt.f64 (*.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re)) (cbrt.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 re)) (*.f64 (cbrt.f64 (pow.f64 re 2/3)) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) (*.f64 (pow.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 2/3) (cbrt.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 2/3) (cbrt.f64 re)) (cbrt.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 re 2/3)) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) (cbrt.f64 (cbrt.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 re)) (-.f64 (cbrt.f64 (pow.f64 re (+.f64 2/3 1))) (cbrt.f64 (*.f64 (pow.f64 re 2/3) (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) (cbrt.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))) (pow.f64 (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 re (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))) (pow.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) (cbrt.f64 (cbrt.f64 re))) (cbrt.f64 (pow.f64 re 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re)) (cbrt.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re)) (cbrt.f64 re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 2/3) (cbrt.f64 (*.f64 re (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 re 2/3)) (*.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) (cbrt.f64 (cbrt.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 re)) (-.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re)) (cbrt.f64 (neg.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 3) re) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re)) (cbrt.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (-.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re)) (cbrt.f64 re)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (cbrt.f64 (*.f64 re (hypot.f64 re im))) (pow.f64 re 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 3) re))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 re)) (cbrt.f64 (pow.f64 re (+.f64 2/3 1))) (neg.f64 (cbrt.f64 (*.f64 re (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 re) (cbrt.f64 re) (neg.f64 (cbrt.f64 (*.f64 re (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 re 2/3) (neg.f64 (cbrt.f64 (*.f64 re (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 re)) 4) (cbrt.f64 (pow.f64 re 2/3)) (neg.f64 (cbrt.f64 (*.f64 re (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 re 2/3)) (pow.f64 (cbrt.f64 (cbrt.f64 re)) 4) (neg.f64 (cbrt.f64 (*.f64 re (hypot.f64 re im)))))))))"]],"rules":[["egg-rr",43],["egg-rr",44],["egg-rr",37],["egg-rr",31]],"time":35.298828125,"type":"rewrite"},{"count":[[199,209]],"inputs":[["(pow.f64 (pow.f64 im 2) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (pow.f64 (pow.f64 im 2) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3) (pow.f64 re 4))) (pow.f64 (pow.f64 im 2) 1/3)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (*.f64 5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 16)) 1/3) (pow.f64 re 6))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3) (pow.f64 re 4))) (pow.f64 (pow.f64 im 2) 1/3))))","(pow.f64 (pow.f64 re 2) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (pow.f64 (pow.f64 re 2) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 im 4)) (*.f64 -1/6 (pow.f64 im 4))))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 im 4)) (*.f64 -1/6 (pow.f64 im 4)))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 16)) 1/3) (+.f64 (*.f64 1/162 (pow.f64 im 6)) (+.f64 (*.f64 -1/18 (pow.f64 im 6)) (*.f64 1/1080 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))))))))))","(pow.f64 (pow.f64 re 2) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (pow.f64 (pow.f64 re 2) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 im 4)) (*.f64 -1/6 (pow.f64 im 4))))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 im 4)) (*.f64 -1/6 (pow.f64 im 4)))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 16)) 1/3) (+.f64 (*.f64 1/162 (pow.f64 im 6)) (+.f64 (*.f64 -1/18 (pow.f64 im 6)) (*.f64 1/1080 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))))))))))","(pow.f64 (pow.f64 re 2) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (pow.f64 (pow.f64 re 2) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (pow.f64 im 4)))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (pow.f64 im 4))) (*.f64 5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 16)) 1/3) (pow.f64 im 6))))))","(pow.f64 (pow.f64 im 2) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (pow.f64 (pow.f64 im 2) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (*.f64 (+.f64 (*.f64 1/18 (pow.f64 re 4)) (*.f64 -1/6 (pow.f64 re 4))) (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 16)) 1/3) (+.f64 (*.f64 1/1080 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6)))) (+.f64 (*.f64 -1/18 (pow.f64 re 6)) (*.f64 1/162 (pow.f64 re 6))))) (*.f64 (+.f64 (*.f64 1/18 (pow.f64 re 4)) (*.f64 -1/6 (pow.f64 re 4))) (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3)))))","(pow.f64 (pow.f64 im 2) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (pow.f64 (pow.f64 im 2) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (*.f64 (+.f64 (*.f64 1/18 (pow.f64 re 4)) (*.f64 -1/6 (pow.f64 re 4))) (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 16)) 1/3) (+.f64 (*.f64 1/1080 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6)))) (+.f64 (*.f64 -1/18 (pow.f64 re 6)) (*.f64 1/162 (pow.f64 re 6))))) (*.f64 (+.f64 (*.f64 1/18 (pow.f64 re 4)) (*.f64 -1/6 (pow.f64 re 4))) (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3)))))","(pow.f64 im 1/3)","(*.f64 2 (pow.f64 (*.f64 1 re) 1/3))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (pow.f64 im 2))) (*.f64 2 (pow.f64 (*.f64 1 re) 1/3)))","(+.f64 (*.f64 -5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 11)) 1/3) (pow.f64 im 4))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (pow.f64 im 2))) (*.f64 2 (pow.f64 (*.f64 1 re) 1/3))))","(+.f64 (*.f64 55/1296 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 17)) 1/3) (pow.f64 im 6))) (+.f64 (*.f64 -5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 11)) 1/3) (pow.f64 im 4))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (pow.f64 im 2))) (*.f64 2 (pow.f64 (*.f64 1 re) 1/3)))))","(pow.f64 re 1/3)","(pow.f64 re 1/3)","(*.f64 -1 (pow.f64 (*.f64 1 im) 1/3))","(*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (pow.f64 im 2)))","(+.f64 (*.f64 5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 11)) 1/3) (pow.f64 im 4))) (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (pow.f64 im 2))))","(+.f64 (*.f64 5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 11)) 1/3) (pow.f64 im 4))) (+.f64 (*.f64 -55/1296 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 17)) 1/3) (pow.f64 im 6))) (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (pow.f64 im 2)))))","(+.f64 (*.f64 5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 11)) 1/3) (pow.f64 im 4))) (+.f64 (*.f64 -55/1296 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 17)) 1/3) (pow.f64 im 6))) (+.f64 (*.f64 -1/3 (*.f64 (*.f64 (-.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 re 3)) 2) (*.f64 1/16 (/.f64 1 (pow.f64 re 6)))) re)) (*.f64 265/5184 (/.f64 1 (pow.f64 re 7)))) (pow.f64 im 8)) (pow.f64 (/.f64 1 (pow.f64 re 2)) 1/3))) (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (pow.f64 im 2))))))","(pow.f64 re 1/3)","(pow.f64 re 1/3)","(*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2)))","(+.f64 (*.f64 5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (pow.f64 im 4))) (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))))","(+.f64 (*.f64 -55/1296 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 16)) 1/3) (pow.f64 im 6))) (+.f64 (*.f64 5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (pow.f64 im 4))) (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2)))))","(+.f64 (*.f64 -55/1296 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 16)) 1/3) (pow.f64 im 6))) (+.f64 (*.f64 5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (pow.f64 im 4))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 re) 1/3) (*.f64 (-.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 re 3)) 2) (*.f64 1/16 (/.f64 1 (pow.f64 re 6)))) re)) (*.f64 265/5184 (/.f64 1 (pow.f64 re 7)))) (pow.f64 im 8)))) (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))))))","(pow.f64 (pow.f64 re 2) 1/3)","(pow.f64 (pow.f64 re 2) 1/3)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (pow.f64 im 2) 1/3)","(cbrt.f64 (*.f64 im im))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (pow.f64 (pow.f64 im 2) 1/3))","(fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (cbrt.f64 (*.f64 im im)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3) (pow.f64 re 4))) (pow.f64 (pow.f64 im 2) 1/3)))","(fma.f64 (*.f64 1/3 (cbrt.f64 (pow.f64 im -4))) (*.f64 re re) (fma.f64 -1/9 (*.f64 (cbrt.f64 (pow.f64 im -10)) (pow.f64 re 4)) (cbrt.f64 (*.f64 im im))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (*.f64 5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 16)) 1/3) (pow.f64 re 6))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3) (pow.f64 re 4))) (pow.f64 (pow.f64 im 2) 1/3))))","(fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (fma.f64 (*.f64 5/81 (cbrt.f64 (pow.f64 im -16))) (pow.f64 re 6) (fma.f64 -1/9 (*.f64 (cbrt.f64 (pow.f64 im -10)) (pow.f64 re 4)) (cbrt.f64 (*.f64 im im)))))","(pow.f64 (pow.f64 re 2) 1/3)","(cbrt.f64 (*.f64 re re))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (pow.f64 (pow.f64 re 2) 1/3))","(fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 re -4)) (*.f64 im im)) (cbrt.f64 (*.f64 re re)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 im 4)) (*.f64 -1/6 (pow.f64 im 4))))))","(fma.f64 (*.f64 1/3 (cbrt.f64 (pow.f64 re -4))) (*.f64 im im) (fma.f64 (cbrt.f64 (pow.f64 re -10)) (*.f64 (pow.f64 im 4) -1/9) (cbrt.f64 (*.f64 re re))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 im 4)) (*.f64 -1/6 (pow.f64 im 4)))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 16)) 1/3) (+.f64 (*.f64 1/162 (pow.f64 im 6)) (+.f64 (*.f64 -1/18 (pow.f64 im 6)) (*.f64 1/1080 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))))))))))","(+.f64 (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 re -4)) (*.f64 im im)) (cbrt.f64 (*.f64 re re))) (fma.f64 (cbrt.f64 (pow.f64 re -10)) (*.f64 (pow.f64 im 4) -1/9) (*.f64 (cbrt.f64 (pow.f64 re -16)) (+.f64 (*.f64 (pow.f64 im 6) -4/81) (*.f64 1/1080 (*.f64 (pow.f64 im 6) 120))))))","(pow.f64 (pow.f64 re 2) 1/3)","(cbrt.f64 (*.f64 re re))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (pow.f64 (pow.f64 re 2) 1/3))","(fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 re -4)) (*.f64 im im)) (cbrt.f64 (*.f64 re re)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 im 4)) (*.f64 -1/6 (pow.f64 im 4))))))","(fma.f64 (*.f64 1/3 (cbrt.f64 (pow.f64 re -4))) (*.f64 im im) (fma.f64 (cbrt.f64 (pow.f64 re -10)) (*.f64 (pow.f64 im 4) -1/9) (cbrt.f64 (*.f64 re re))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (+.f64 (*.f64 1/18 (pow.f64 im 4)) (*.f64 -1/6 (pow.f64 im 4)))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 16)) 1/3) (+.f64 (*.f64 1/162 (pow.f64 im 6)) (+.f64 (*.f64 -1/18 (pow.f64 im 6)) (*.f64 1/1080 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))))))))))","(+.f64 (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 re -4)) (*.f64 im im)) (cbrt.f64 (*.f64 re re))) (fma.f64 (cbrt.f64 (pow.f64 re -10)) (*.f64 (pow.f64 im 4) -1/9) (*.f64 (cbrt.f64 (pow.f64 re -16)) (+.f64 (*.f64 (pow.f64 im 6) -4/81) (*.f64 1/1080 (*.f64 (pow.f64 im 6) 120))))))","(pow.f64 (pow.f64 re 2) 1/3)","(cbrt.f64 (*.f64 re re))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (pow.f64 (pow.f64 re 2) 1/3))","(fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 re -4)) (*.f64 im im)) (cbrt.f64 (*.f64 re re)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (pow.f64 im 4)))))","(fma.f64 (*.f64 1/3 (cbrt.f64 (pow.f64 re -4))) (*.f64 im im) (fma.f64 (*.f64 -1/9 (cbrt.f64 (pow.f64 re -10))) (pow.f64 im 4) (cbrt.f64 (*.f64 re re))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))) (+.f64 (pow.f64 (pow.f64 re 2) 1/3) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (pow.f64 im 4))) (*.f64 5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 16)) 1/3) (pow.f64 im 6))))))","(+.f64 (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 re -4)) (*.f64 im im)) (cbrt.f64 (*.f64 re re))) (fma.f64 -1/9 (*.f64 (cbrt.f64 (pow.f64 re -10)) (pow.f64 im 4)) (*.f64 5/81 (*.f64 (cbrt.f64 (pow.f64 re -16)) (pow.f64 im 6)))))","(pow.f64 (pow.f64 im 2) 1/3)","(cbrt.f64 (*.f64 im im))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (pow.f64 (pow.f64 im 2) 1/3))","(fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (cbrt.f64 (*.f64 im im)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (*.f64 (+.f64 (*.f64 1/18 (pow.f64 re 4)) (*.f64 -1/6 (pow.f64 re 4))) (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3))))","(fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (fma.f64 (cbrt.f64 (pow.f64 im -10)) (*.f64 (pow.f64 re 4) -1/9) (cbrt.f64 (*.f64 im im))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 16)) 1/3) (+.f64 (*.f64 1/1080 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6)))) (+.f64 (*.f64 -1/18 (pow.f64 re 6)) (*.f64 1/162 (pow.f64 re 6))))) (*.f64 (+.f64 (*.f64 1/18 (pow.f64 re 4)) (*.f64 -1/6 (pow.f64 re 4))) (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3)))))","(+.f64 (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (cbrt.f64 (*.f64 im im))) (fma.f64 (cbrt.f64 (pow.f64 im -16)) (fma.f64 1/1080 (*.f64 (pow.f64 re 6) 120) (*.f64 (pow.f64 re 6) -4/81)) (*.f64 (*.f64 (pow.f64 re 4) -1/9) (cbrt.f64 (pow.f64 im -10)))))","(pow.f64 (pow.f64 im 2) 1/3)","(cbrt.f64 (*.f64 im im))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (pow.f64 (pow.f64 im 2) 1/3))","(fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (cbrt.f64 (*.f64 im im)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (*.f64 (+.f64 (*.f64 1/18 (pow.f64 re 4)) (*.f64 -1/6 (pow.f64 re 4))) (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3))))","(fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (fma.f64 (cbrt.f64 (pow.f64 im -10)) (*.f64 (pow.f64 re 4) -1/9) (cbrt.f64 (*.f64 im im))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 16)) 1/3) (+.f64 (*.f64 1/1080 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6)))) (+.f64 (*.f64 -1/18 (pow.f64 re 6)) (*.f64 1/162 (pow.f64 re 6))))) (*.f64 (+.f64 (*.f64 1/18 (pow.f64 re 4)) (*.f64 -1/6 (pow.f64 re 4))) (pow.f64 (/.f64 1 (pow.f64 im 10)) 1/3)))))","(+.f64 (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (cbrt.f64 (*.f64 im im))) (fma.f64 (cbrt.f64 (pow.f64 im -16)) (fma.f64 1/1080 (*.f64 (pow.f64 re 6) 120) (*.f64 (pow.f64 re 6) -4/81)) (*.f64 (*.f64 (pow.f64 re 4) -1/9) (cbrt.f64 (pow.f64 im -10)))))","(pow.f64 im 1/3)","(cbrt.f64 im)","(*.f64 2 (pow.f64 (*.f64 1 re) 1/3))","(*.f64 2 (cbrt.f64 re))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (pow.f64 im 2))) (*.f64 2 (pow.f64 (*.f64 1 re) 1/3)))","(fma.f64 1/6 (*.f64 (cbrt.f64 (pow.f64 re -5)) (*.f64 im im)) (*.f64 2 (cbrt.f64 re)))","(+.f64 (*.f64 -5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 11)) 1/3) (pow.f64 im 4))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (pow.f64 im 2))) (*.f64 2 (pow.f64 (*.f64 1 re) 1/3))))","(fma.f64 -5/72 (*.f64 (cbrt.f64 (pow.f64 re -11)) (pow.f64 im 4)) (fma.f64 1/6 (*.f64 (cbrt.f64 (pow.f64 re -5)) (*.f64 im im)) (*.f64 2 (cbrt.f64 re))))","(+.f64 (*.f64 55/1296 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 17)) 1/3) (pow.f64 im 6))) (+.f64 (*.f64 -5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 11)) 1/3) (pow.f64 im 4))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (pow.f64 im 2))) (*.f64 2 (pow.f64 (*.f64 1 re) 1/3)))))","(fma.f64 55/1296 (*.f64 (cbrt.f64 (pow.f64 re -17)) (pow.f64 im 6)) (fma.f64 -5/72 (*.f64 (cbrt.f64 (pow.f64 re -11)) (pow.f64 im 4)) (fma.f64 1/6 (*.f64 (cbrt.f64 (pow.f64 re -5)) (*.f64 im im)) (*.f64 2 (cbrt.f64 re)))))","(pow.f64 re 1/3)","(cbrt.f64 re)","(pow.f64 re 1/3)","(cbrt.f64 re)","(*.f64 -1 (pow.f64 (*.f64 1 im) 1/3))","(cbrt.f64 (neg.f64 im))","(*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (pow.f64 im 2)))","(*.f64 (*.f64 -1/6 (cbrt.f64 (pow.f64 re -5))) (*.f64 im im))","(+.f64 (*.f64 5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 11)) 1/3) (pow.f64 im 4))) (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (pow.f64 im 2))))","(fma.f64 5/72 (*.f64 (cbrt.f64 (pow.f64 re -11)) (pow.f64 im 4)) (*.f64 (*.f64 -1/6 (cbrt.f64 (pow.f64 re -5))) (*.f64 im im)))","(+.f64 (*.f64 5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 11)) 1/3) (pow.f64 im 4))) (+.f64 (*.f64 -55/1296 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 17)) 1/3) (pow.f64 im 6))) (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (pow.f64 im 2)))))","(fma.f64 5/72 (*.f64 (cbrt.f64 (pow.f64 re -11)) (pow.f64 im 4)) (fma.f64 -55/1296 (*.f64 (cbrt.f64 (pow.f64 re -17)) (pow.f64 im 6)) (*.f64 (*.f64 -1/6 (cbrt.f64 (pow.f64 re -5))) (*.f64 im im))))","(+.f64 (*.f64 5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 11)) 1/3) (pow.f64 im 4))) (+.f64 (*.f64 -55/1296 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 17)) 1/3) (pow.f64 im 6))) (+.f64 (*.f64 -1/3 (*.f64 (*.f64 (-.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 re 3)) 2) (*.f64 1/16 (/.f64 1 (pow.f64 re 6)))) re)) (*.f64 265/5184 (/.f64 1 (pow.f64 re 7)))) (pow.f64 im 8)) (pow.f64 (/.f64 1 (pow.f64 re 2)) 1/3))) (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 5)) 1/3) (pow.f64 im 2))))))","(fma.f64 (*.f64 5/72 (cbrt.f64 (pow.f64 re -11))) (pow.f64 im 4) (fma.f64 (*.f64 -55/1296 (cbrt.f64 (pow.f64 re -17))) (pow.f64 im 6) (fma.f64 -1/3 (*.f64 (fma.f64 -1/2 (/.f64 (fma.f64 (pow.f64 re -6) 1/16 (pow.f64 (pow.f64 (/.f64 -1/2 re) 3) 2)) re) (*.f64 -265/5184 (pow.f64 re -7))) (*.f64 (pow.f64 im 8) (cbrt.f64 (pow.f64 re -2)))) (*.f64 (*.f64 -1/6 (cbrt.f64 (pow.f64 re -5))) (*.f64 im im)))))","(pow.f64 re 1/3)","(cbrt.f64 re)","(pow.f64 re 1/3)","(cbrt.f64 re)","(*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2)))","(*.f64 (*.f64 -1/6 (cbrt.f64 (pow.f64 re -4))) (*.f64 im im))","(+.f64 (*.f64 5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (pow.f64 im 4))) (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))))","(fma.f64 5/72 (*.f64 (cbrt.f64 (pow.f64 re -10)) (pow.f64 im 4)) (*.f64 (*.f64 -1/6 (cbrt.f64 (pow.f64 re -4))) (*.f64 im im)))","(+.f64 (*.f64 -55/1296 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 16)) 1/3) (pow.f64 im 6))) (+.f64 (*.f64 5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (pow.f64 im 4))) (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2)))))","(fma.f64 -55/1296 (*.f64 (cbrt.f64 (pow.f64 re -16)) (pow.f64 im 6)) (fma.f64 5/72 (*.f64 (cbrt.f64 (pow.f64 re -10)) (pow.f64 im 4)) (*.f64 (*.f64 -1/6 (cbrt.f64 (pow.f64 re -4))) (*.f64 im im))))","(+.f64 (*.f64 -55/1296 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 16)) 1/3) (pow.f64 im 6))) (+.f64 (*.f64 5/72 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 10)) 1/3) (pow.f64 im 4))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 re) 1/3) (*.f64 (-.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 re 3)) 2) (*.f64 1/16 (/.f64 1 (pow.f64 re 6)))) re)) (*.f64 265/5184 (/.f64 1 (pow.f64 re 7)))) (pow.f64 im 8)))) (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 re 4)) 1/3) (pow.f64 im 2))))))","(fma.f64 (*.f64 -55/1296 (cbrt.f64 (pow.f64 re -16))) (pow.f64 im 6) (fma.f64 (*.f64 5/72 (cbrt.f64 (pow.f64 re -10))) (pow.f64 im 4) (fma.f64 -1/3 (*.f64 (cbrt.f64 (/.f64 1 re)) (*.f64 (fma.f64 -1/2 (/.f64 (fma.f64 (pow.f64 re -6) 1/16 (pow.f64 (pow.f64 (/.f64 -1/2 re) 3) 2)) re) (*.f64 -265/5184 (pow.f64 re -7))) (pow.f64 im 8))) (*.f64 (*.f64 -1/6 (cbrt.f64 (pow.f64 re -4))) (*.f64 im im)))))","(pow.f64 (pow.f64 re 2) 1/3)","(cbrt.f64 (*.f64 re re))","(pow.f64 (pow.f64 re 2) 1/3)","(cbrt.f64 (*.f64 re re))"]],"time":162.22705078125,"type":"simplify"},{"compiler":[[7977,3528]],"time":62.511962890625,"type":"eval"},{"alts":[["(sqrt.f64 (*.f64 (*.f64 2 (*.f64 (+.f64 (pow.f64 (hypot.f64 re im) 2/3) (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))) (pow.f64 (pow.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 3) 1/3))) 1/4))","fresh",18.386548489870606],["(sqrt.f64 (*.f64 (*.f64 2 (neg.f64 im)) 1/4))","fresh",48.501427099443866],["(sqrt.f64 (*.f64 (*.f64 2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))) 1/4))","fresh",54.99722014174851],["(sqrt.f64 (*.f64 (*.f64 2 (+.f64 (hypot.f64 re im) re)) 1/4))","done",14.070460287884416],["(sqrt.f64 (*.f64 (*.f64 2 (*.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))) 1/4))","next",18.269198988621074],["(sqrt.f64 (*.f64 (*.f64 2 im) 1/4))","fresh",48.962360533202926]],"compiler":[[35,21],[9,8],[14,12],[12,9],[30,16],[8,7],[35,21],[9,8],[14,12],[30,16],[8,7]],"count":[[215,6]],"kept":[{"done":[1,1],"fresh":[4,4],"new":[209,1],"picked":[1,0]}],"min-error":[8.699867981700011],"time":33.446044921875,"type":"prune"},{"compiler":[[161,53]],"locations":[["(*.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))",0.203125,true],["(+.f64 (hypot.f64 re im) re)",0.6262961606704236,false],["(pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3)",4.4761159860506154,true],["(pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)",4.4761159860506154,false]],"time":45.135009765625,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))","im","-inf",0.1728515625],["(*.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))","im","inf",0.203125],["(*.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))","im","0",0.178955078125],["(*.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))","re","-inf",0.238037109375],["(*.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))","re","inf",0.199951171875],["(*.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))","re","0",0.18798828125],["(pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3)","im","-inf",0.295166015625],["(pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3)","im","inf",0.31298828125],["(pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3)","im","0",0.305908203125],["(pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3)","re","-inf",0.47607421875],["(pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3)","re","inf",0.454833984375],["(pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3)","re","0",0.31298828125]],"time":3.616943359375,"type":"series"},{"count":[[2,75]],"inputs":[["(pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3)","(*.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) 2/3) (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) 0) (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) 1/3) (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (*.f64 0 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) (*.f64 1/3 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) (*.f64 2/3 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (+.f64 (hypot.f64 re im) re))) (cbrt.f64 (neg.f64 (+.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 4) (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (+.f64 3 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (+.f64 3 2)) (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (+.f64 (hypot.f64 re im) re))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (hypot.f64 re im) re)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 re (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (hypot.f64 re im) re) (*.f64 (+.f64 (hypot.f64 re im) re) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (hypot.f64 re im) re) 2/3) (*.f64 (+.f64 (hypot.f64 re im) re) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (hypot.f64 re im) re) 0) (+.f64 (hypot.f64 re im) re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (hypot.f64 re im) re) 1/3) (*.f64 (+.f64 (hypot.f64 re im) re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (hypot.f64 re im) re) (*.f64 0 (+.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (+.f64 (hypot.f64 re im) re)) (*.f64 1/3 (+.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (hypot.f64 re im) re)) (+.f64 (hypot.f64 re im) re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (+.f64 (hypot.f64 re im) re)) (*.f64 2/3 (+.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (pow.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 4) (+.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) (pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)) 4) (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (hypot.f64 re im) re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 4) (+.f64 (hypot.f64 re im) re))) (cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (hypot.f64 re im) 2/3) (-.f64 (pow.f64 re 2/3) (cbrt.f64 (*.f64 (hypot.f64 re im) re)))) (+.f64 (cbrt.f64 (hypot.f64 re im)) (cbrt.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 re 2/3) (-.f64 (pow.f64 (hypot.f64 re im) 2/3) (cbrt.f64 (*.f64 (hypot.f64 re im) re)))) (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (hypot.f64 re im) re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (hypot.f64 re im) re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (+.f64 3 2)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 4) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re))) (+.f64 3 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (hypot.f64 re im) re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (hypot.f64 re im) re)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (hypot.f64 re im) re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 (hypot.f64 re im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 re) (pow.f64 re 2/3) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (hypot.f64 re im)) (pow.f64 (hypot.f64 re im) 2/3) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 re 2/3) (cbrt.f64 re) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 re) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (hypot.f64 re im) 2/3) (cbrt.f64 (hypot.f64 re im)) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (hypot.f64 re im)) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (hypot.f64 re im)) (sqrt.f64 (hypot.f64 re im)) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 re (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (hypot.f64 re im) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 re 1 (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 re im) 1 re)))))"]],"rules":[["egg-rr",45],["egg-rr",30]],"time":24.578125,"type":"rewrite"},{"count":[[123,146]],"inputs":[["(pow.f64 (pow.f64 im 2) 1/3)","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (pow.f64 (pow.f64 im 2) 1/3))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (pow.f64 (pow.f64 im 2) 1/3)))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (*.f64 -5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 7)) 1/3) (pow.f64 re 3))))))","(exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re))))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (pow.f64 im 2)) (pow.f64 re 2))) (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (+.f64 (*.f64 1/72 (pow.f64 im 4)) (*.f64 1/36 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 -3/2 (pow.f64 im 4)))))) (pow.f64 re 4))))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (+.f64 (*.f64 1/216 (*.f64 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 -3/2 (pow.f64 im 4))) (pow.f64 im 2))) (+.f64 (*.f64 1/1296 (pow.f64 im 6)) (*.f64 1/1080 (+.f64 (*.f64 15/4 (pow.f64 im 6)) (+.f64 (*.f64 45/2 (pow.f64 im 6)) (*.f64 45/4 (pow.f64 im 6)))))))) (pow.f64 re 6)) (+.f64 (*.f64 1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (+.f64 (*.f64 1/72 (pow.f64 im 4)) (*.f64 1/36 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 -3/2 (pow.f64 im 4)))))) (pow.f64 re 4)))))","(exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2))))))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (pow.f64 im 2)) (pow.f64 re 2))) (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (+.f64 (*.f64 1/72 (pow.f64 im 4)) (*.f64 1/36 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 3 (pow.f64 im 4)))))) (pow.f64 re 4))))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (+.f64 (*.f64 1/72 (pow.f64 im 4)) (*.f64 1/36 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 3 (pow.f64 im 4)))))) (pow.f64 re 4)) (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (+.f64 (*.f64 -1/216 (*.f64 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 3 (pow.f64 im 4))) (pow.f64 im 2))) (+.f64 (*.f64 1/1080 (+.f64 (*.f64 45/2 (pow.f64 im 6)) (+.f64 (*.f64 -720 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 im 2))) (*.f64 -15/4 (pow.f64 im 6))))) (*.f64 -1/1296 (pow.f64 im 6))))) (pow.f64 re 6)))))","(pow.f64 (*.f64 4 (pow.f64 re 2)) 1/3)","(+.f64 (pow.f64 (*.f64 4 (pow.f64 re 2)) 1/3) (*.f64 1/6 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 4)) 1/3) (pow.f64 im 2))))","(+.f64 (*.f64 -7/144 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 10)) 1/3) (pow.f64 im 4))) (+.f64 (pow.f64 (*.f64 4 (pow.f64 re 2)) 1/3) (*.f64 1/6 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 4)) 1/3) (pow.f64 im 2)))))","(+.f64 (*.f64 -7/144 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 10)) 1/3) (pow.f64 im 4))) (+.f64 (*.f64 65/2592 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 16)) 1/3) (pow.f64 im 6))) (+.f64 (pow.f64 (*.f64 4 (pow.f64 re 2)) 1/3) (*.f64 1/6 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 4)) 1/3) (pow.f64 im 2))))))","(pow.f64 (pow.f64 im 2) 1/3)","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (pow.f64 (pow.f64 im 2) 1/3))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (+.f64 (*.f64 2/9 (pow.f64 re 2)) (*.f64 1/3 (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2)))))) (pow.f64 (pow.f64 im 2) 1/3)))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (+.f64 (*.f64 2/9 (pow.f64 re 2)) (*.f64 1/3 (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2)))))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 7)) 1/3) (+.f64 (*.f64 2/9 (*.f64 re (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2))))) (+.f64 (*.f64 1/9 (+.f64 (*.f64 -3 (pow.f64 re 3)) (*.f64 2 (pow.f64 re 3)))) (*.f64 4/81 (pow.f64 re 3))))) (pow.f64 (pow.f64 im 2) 1/3))))","(pow.f64 (pow.f64 im 2) 1/3)","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (pow.f64 (pow.f64 im 2) 1/3))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (+.f64 (*.f64 2/9 (pow.f64 re 2)) (*.f64 1/3 (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2)))))) (pow.f64 (pow.f64 im 2) 1/3)))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (+.f64 (*.f64 2/9 (pow.f64 re 2)) (*.f64 1/3 (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2)))))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 7)) 1/3) (+.f64 (*.f64 2/9 (*.f64 re (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2))))) (+.f64 (*.f64 1/9 (+.f64 (*.f64 -3 (pow.f64 re 3)) (*.f64 2 (pow.f64 re 3)))) (*.f64 4/81 (pow.f64 re 3)))))) (pow.f64 (pow.f64 im 2) 1/3))))","im","(+.f64 re im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(*.f64 2 re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(*.f64 -1/2 (/.f64 (pow.f64 im 2) re))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 re 7))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(*.f64 2 re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","im","(+.f64 re im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(*.f64 -1 im)","(+.f64 re (*.f64 -1 im))","(+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (pow.f64 im 2) 1/3)","(cbrt.f64 (*.f64 im im))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (pow.f64 (pow.f64 im 2) 1/3))","(fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 im)) re) (cbrt.f64 (*.f64 im im)))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (pow.f64 (pow.f64 im 2) 1/3)))","(fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 im)) re) (fma.f64 2/9 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (cbrt.f64 (*.f64 im im))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (pow.f64 re 2))) (+.f64 (pow.f64 (pow.f64 im 2) 1/3) (*.f64 -5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 7)) 1/3) (pow.f64 re 3))))))","(+.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 im)) re) (fma.f64 2/9 (*.f64 (cbrt.f64 (pow.f64 im -4)) (*.f64 re re)) (cbrt.f64 (*.f64 im im)))) (*.f64 -5/81 (*.f64 (cbrt.f64 (pow.f64 im -7)) (pow.f64 re 3))))","(exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re))))))","(pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re)))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (pow.f64 im 2)) (pow.f64 re 2))) (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))))","(fma.f64 1/6 (/.f64 (*.f64 (pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re))) (*.f64 im im)) (*.f64 re re)) (pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (+.f64 (*.f64 1/72 (pow.f64 im 4)) (*.f64 1/36 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 -3/2 (pow.f64 im 4)))))) (pow.f64 re 4))))","(+.f64 (fma.f64 1/6 (/.f64 (*.f64 (pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re))) (*.f64 im im)) (*.f64 re re)) (pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re)))) (*.f64 (*.f64 (pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re))) (fma.f64 1/72 (pow.f64 im 4) (*.f64 1/36 (*.f64 (pow.f64 im 4) -9/4)))) (pow.f64 re -4)))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (+.f64 (*.f64 1/216 (*.f64 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 -3/2 (pow.f64 im 4))) (pow.f64 im 2))) (+.f64 (*.f64 1/1296 (pow.f64 im 6)) (*.f64 1/1080 (+.f64 (*.f64 15/4 (pow.f64 im 6)) (+.f64 (*.f64 45/2 (pow.f64 im 6)) (*.f64 45/4 (pow.f64 im 6)))))))) (pow.f64 re 6)) (+.f64 (*.f64 1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 re)))))) (+.f64 (*.f64 1/72 (pow.f64 im 4)) (*.f64 1/36 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 -3/2 (pow.f64 im 4)))))) (pow.f64 re 4)))))","(+.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re))) (fma.f64 1/216 (*.f64 (*.f64 (pow.f64 im 4) -9/4) (*.f64 im im)) (fma.f64 1/1296 (pow.f64 im 6) (*.f64 1/1080 (*.f64 (pow.f64 im 6) (+.f64 15/4 135/4)))))) (pow.f64 re 6)) (+.f64 (fma.f64 1/6 (/.f64 (*.f64 (pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re))) (*.f64 im im)) (*.f64 re re)) (pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re)))) (*.f64 (*.f64 (pow.f64 (exp.f64 2/3) (+.f64 (log.f64 2) (log.f64 re))) (fma.f64 1/72 (pow.f64 im 4) (*.f64 1/36 (*.f64 (pow.f64 im 4) -9/4)))) (pow.f64 re -4))))","(exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2))))))","(pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (pow.f64 im 2)) (pow.f64 re 2))) (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))))","(fma.f64 -1/6 (/.f64 (*.f64 (pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3) (*.f64 im im)) (*.f64 re re)) (pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (+.f64 (*.f64 1/72 (pow.f64 im 4)) (*.f64 1/36 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 3 (pow.f64 im 4)))))) (pow.f64 re 4))))","(+.f64 (fma.f64 -1/6 (/.f64 (*.f64 (pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3) (*.f64 im im)) (*.f64 re re)) (pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3)) (*.f64 (*.f64 (pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3) (fma.f64 1/72 (pow.f64 im 4) (*.f64 1/36 (*.f64 (pow.f64 im 4) 9/4)))) (pow.f64 re -4)))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (pow.f64 im 2)) (pow.f64 re 2))) (+.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (+.f64 (*.f64 1/72 (pow.f64 im 4)) (*.f64 1/36 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 3 (pow.f64 im 4)))))) (pow.f64 re 4)) (/.f64 (*.f64 (exp.f64 (*.f64 2/3 (+.f64 (log.f64 (/.f64 -1 re)) (log.f64 (*.f64 1/2 (pow.f64 im 2)))))) (+.f64 (*.f64 -1/216 (*.f64 (+.f64 (*.f64 -3/4 (pow.f64 im 4)) (*.f64 3 (pow.f64 im 4))) (pow.f64 im 2))) (+.f64 (*.f64 1/1080 (+.f64 (*.f64 45/2 (pow.f64 im 6)) (+.f64 (*.f64 -720 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 im 2))) (*.f64 -15/4 (pow.f64 im 6))))) (*.f64 -1/1296 (pow.f64 im 6))))) (pow.f64 re 6)))))","(+.f64 (fma.f64 -1/6 (/.f64 (*.f64 (pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3) (*.f64 im im)) (*.f64 re re)) (pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3)) (+.f64 (*.f64 (*.f64 (pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3) (fma.f64 1/72 (pow.f64 im 4) (*.f64 1/36 (*.f64 (pow.f64 im 4) 9/4)))) (pow.f64 re -4)) (/.f64 (*.f64 (pow.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (neg.f64 re)) 2/3) (fma.f64 -1/216 (*.f64 (*.f64 (pow.f64 im 4) 9/4) (*.f64 im im)) (fma.f64 1/1080 (fma.f64 45/2 (pow.f64 im 6) (fma.f64 -720 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (*.f64 im im)) (*.f64 -15/4 (pow.f64 im 6)))) (*.f64 -1/1296 (pow.f64 im 6))))) (pow.f64 re 6))))","(pow.f64 (*.f64 4 (pow.f64 re 2)) 1/3)","(cbrt.f64 (*.f64 4 (*.f64 re re)))","(+.f64 (pow.f64 (*.f64 4 (pow.f64 re 2)) 1/3) (*.f64 1/6 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 4)) 1/3) (pow.f64 im 2))))","(+.f64 (cbrt.f64 (*.f64 4 (*.f64 re re))) (*.f64 1/6 (*.f64 (cbrt.f64 (*.f64 4 (pow.f64 re -4))) (*.f64 im im))))","(+.f64 (*.f64 -7/144 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 10)) 1/3) (pow.f64 im 4))) (+.f64 (pow.f64 (*.f64 4 (pow.f64 re 2)) 1/3) (*.f64 1/6 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 4)) 1/3) (pow.f64 im 2)))))","(fma.f64 -7/144 (*.f64 (cbrt.f64 (/.f64 4 (pow.f64 re 10))) (pow.f64 im 4)) (+.f64 (cbrt.f64 (*.f64 4 (*.f64 re re))) (*.f64 1/6 (*.f64 (cbrt.f64 (*.f64 4 (pow.f64 re -4))) (*.f64 im im)))))","(+.f64 (*.f64 -7/144 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 10)) 1/3) (pow.f64 im 4))) (+.f64 (*.f64 65/2592 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 16)) 1/3) (pow.f64 im 6))) (+.f64 (pow.f64 (*.f64 4 (pow.f64 re 2)) 1/3) (*.f64 1/6 (*.f64 (pow.f64 (/.f64 4 (pow.f64 re 4)) 1/3) (pow.f64 im 2))))))","(fma.f64 -7/144 (*.f64 (cbrt.f64 (/.f64 4 (pow.f64 re 10))) (pow.f64 im 4)) (fma.f64 65/2592 (*.f64 (cbrt.f64 (/.f64 4 (pow.f64 re 16))) (pow.f64 im 6)) (+.f64 (cbrt.f64 (*.f64 4 (*.f64 re re))) (*.f64 1/6 (*.f64 (cbrt.f64 (*.f64 4 (pow.f64 re -4))) (*.f64 im im))))))","(pow.f64 (pow.f64 im 2) 1/3)","(cbrt.f64 (*.f64 im im))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (pow.f64 (pow.f64 im 2) 1/3))","(fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 im)) re) (cbrt.f64 (*.f64 im im)))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (+.f64 (*.f64 2/9 (pow.f64 re 2)) (*.f64 1/3 (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2)))))) (pow.f64 (pow.f64 im 2) 1/3)))","(fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 im)) re) (fma.f64 (cbrt.f64 (pow.f64 im -4)) (fma.f64 2/9 (*.f64 re re) (*.f64 0 1/3)) (cbrt.f64 (*.f64 im im))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (+.f64 (*.f64 2/9 (pow.f64 re 2)) (*.f64 1/3 (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2)))))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 7)) 1/3) (+.f64 (*.f64 2/9 (*.f64 re (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2))))) (+.f64 (*.f64 1/9 (+.f64 (*.f64 -3 (pow.f64 re 3)) (*.f64 2 (pow.f64 re 3)))) (*.f64 4/81 (pow.f64 re 3))))) (pow.f64 (pow.f64 im 2) 1/3))))","(fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 im)) re) (fma.f64 (cbrt.f64 (pow.f64 im -4)) (fma.f64 2/9 (*.f64 re re) (*.f64 0 1/3)) (fma.f64 (cbrt.f64 (pow.f64 im -7)) (fma.f64 2/9 (*.f64 0 re) (fma.f64 1/9 (*.f64 (pow.f64 re 3) -1) (*.f64 4/81 (pow.f64 re 3)))) (cbrt.f64 (*.f64 im im)))))","(pow.f64 (pow.f64 im 2) 1/3)","(cbrt.f64 (*.f64 im im))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (pow.f64 (pow.f64 im 2) 1/3))","(fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 im)) re) (cbrt.f64 (*.f64 im im)))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (+.f64 (*.f64 2/9 (pow.f64 re 2)) (*.f64 1/3 (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2)))))) (pow.f64 (pow.f64 im 2) 1/3)))","(fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 im)) re) (fma.f64 (cbrt.f64 (pow.f64 im -4)) (fma.f64 2/9 (*.f64 re re) (*.f64 0 1/3)) (cbrt.f64 (*.f64 im im))))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 im) 1/3) re)) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 4)) 1/3) (+.f64 (*.f64 2/9 (pow.f64 re 2)) (*.f64 1/3 (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2)))))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 im 7)) 1/3) (+.f64 (*.f64 2/9 (*.f64 re (+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 re 2))))) (+.f64 (*.f64 1/9 (+.f64 (*.f64 -3 (pow.f64 re 3)) (*.f64 2 (pow.f64 re 3)))) (*.f64 4/81 (pow.f64 re 3)))))) (pow.f64 (pow.f64 im 2) 1/3))))","(fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 im)) re) (fma.f64 (cbrt.f64 (pow.f64 im -4)) (fma.f64 2/9 (*.f64 re re) (*.f64 0 1/3)) (-.f64 (cbrt.f64 (*.f64 im im)) (*.f64 (cbrt.f64 (pow.f64 im -7)) (fma.f64 2/9 (*.f64 0 re) (fma.f64 1/9 (*.f64 (pow.f64 re 3) -1) (*.f64 4/81 (pow.f64 re 3))))))))","im","(+.f64 re im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 re im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 re im)))","(*.f64 2 re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (*.f64 2 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 2 re (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (fma.f64 2 re (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3)))))","(*.f64 -1/2 (/.f64 (pow.f64 im 2) re))","(/.f64 (*.f64 -1/2 (*.f64 im im)) re)","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 re 7))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 1/2 (*.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 re -7)) (fma.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (/.f64 (*.f64 -1/2 (*.f64 im im)) re))))","(*.f64 2 re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (*.f64 2 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 2 re (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (fma.f64 2 re (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3)))))","im","(+.f64 re im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 re im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 re im)))","(*.f64 -1 im)","(neg.f64 im)","(+.f64 re (*.f64 -1 im))","(-.f64 re im)","(+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 re (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))","(fma.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 re (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im))))"]],"time":208.824951171875,"type":"simplify"},{"compiler":[[14830,8299]],"time":142.2138671875,"type":"eval"},{"alts":[["(sqrt.f64 (*.f64 (*.f64 2 (*.f64 (+.f64 (pow.f64 (hypot.f64 re im) 2/3) (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))) (pow.f64 (pow.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 3) 1/3))) 1/4))","fresh",18.386548489870606],["(sqrt.f64 (*.f64 (*.f64 2 (neg.f64 im)) 1/4))","fresh",48.501427099443866],["(sqrt.f64 (*.f64 (*.f64 2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))) 1/4))","fresh",54.99722014174851],["(sqrt.f64 (*.f64 (*.f64 2 (+.f64 (hypot.f64 re im) re)) 1/4))","done",14.070460287884416],["(sqrt.f64 (*.f64 (*.f64 2 (*.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (fma.f64 (sqrt.f64 (hypot.f64 re im)) (sqrt.f64 (hypot.f64 re im)) re))) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))) 1/4))","fresh",18.263377527072002],["(sqrt.f64 (*.f64 (*.f64 2 im) 1/4))","fresh",48.962360533202926]],"compiler":[[35,21],[9,8],[14,12],[12,9],[35,19],[8,7]],"count":[[419,6]],"kept":[{"done":[1,1],"fresh":[4,3],"new":[413,2],"picked":[1,0]}],"min-error":[8.694432753482877],"time":99.0830078125,"type":"prune"},{"accuracy":[10.401663909712742],"baseline":[14.070460287884416],"branch":[["re",11.497468767108003,2],["im",14.070460287884412,1],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))",10.401663909712742,2],["(sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re)))",10.401663909712742,2],["(*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))",10.641782087784804,2],["(+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re)",10.641782087784804,2],["(*.f64 im im)",14.070460287884414,1],["(*.f64 im im)",14.070460287884414,1]],"compiler":[[3,2],[3,2],[17,12],[15,10],[14,9],[12,7],[5,3],[5,3],[219,119]],"count":[[13,2]],"inputs":[["(sqrt.f64 (*.f64 (*.f64 2 (*.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (fma.f64 (sqrt.f64 (hypot.f64 re im)) (sqrt.f64 (hypot.f64 re im)) re))) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))) 1/4))","(sqrt.f64 (*.f64 (*.f64 2 im) 1/4))","(sqrt.f64 (*.f64 (*.f64 2 (*.f64 (+.f64 (pow.f64 (hypot.f64 re im) 2/3) (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))) (pow.f64 (pow.f64 (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))) 3) 1/3))) 1/4))","(sqrt.f64 (*.f64 (*.f64 2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))) 1/4))","(sqrt.f64 (*.f64 (*.f64 2 (neg.f64 im)) 1/4))","(sqrt.f64 (*.f64 (*.f64 2 (*.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re))) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))) 1/4))","(sqrt.f64 (*.f64 (*.f64 2 (*.f64 (+.f64 (pow.f64 (hypot.f64 re im) 2/3) (*.f64 (cbrt.f64 re) (-.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))) (+.f64 (cbrt.f64 re) (cbrt.f64 (hypot.f64 re im))))) 1/4))","(sqrt.f64 (*.f64 (*.f64 2 (neg.f64 im)) 1/4))","(sqrt.f64 (*.f64 (*.f64 2 (/.f64 (*.f64 -1/2 (*.f64 im im)) re)) 1/4))","(sqrt.f64 (*.f64 (*.f64 2 (*.f64 (pow.f64 (+.f64 (hypot.f64 re im) re) 2/3) (cbrt.f64 (+.f64 (hypot.f64 re im) re)))) 1/4))","(sqrt.f64 (*.f64 (*.f64 2 im) 1/4))","(sqrt.f64 (*.f64 (*.f64 2 (+.f64 (hypot.f64 re im) re)) 1/4))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))"]],"link":["."],"name":["math.sqrt on complex, real part"],"oracle":[64.0],"outputs":[["(sqrt.f64 (*.f64 (*.f64 2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))) 1/4))","(sqrt.f64 (*.f64 (*.f64 2 (+.f64 (hypot.f64 re im) re)) 1/4))"]],"time":52.76806640625,"times":[["re",9.52490234375],["im",4.955078125],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))",6.72998046875],["(sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re)))",6.637939453125],["(*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))",6.7490234375],["(+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re)",6.611083984375],["(*.f64 im im)",3.843994140625],["(*.f64 im im)",3.51904296875]],"type":"regimes"},{"bstep":[[0.0,1.2212077599189318e-125,0.029052734375]],"compiler":[[7,6],[15,10]],"method":["left-value"],"time":0.176025390625,"type":"bsearch"},{"compiler":[[40,30]],"inputs":[["(if (<=.f64 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))) 0) (sqrt.f64 (*.f64 (*.f64 2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))) 1/4)) (sqrt.f64 (*.f64 (*.f64 2 (+.f64 (hypot.f64 re im) re)) 1/4)))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))) 0) (sqrt.f64 (*.f64 (*.f64 2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))) 1/4)) (sqrt.f64 (*.f64 (*.f64 2 (+.f64 (hypot.f64 re im) re)) 1/4)))","(if (<=.f64 (sqrt.f64 (*.f64 2 (+.f64 (hypot.f64 re im) re))) 0) (sqrt.f64 (/.f64 (*.f64 -1/4 (*.f64 im im)) re)) (sqrt.f64 (*.f64 (+.f64 (hypot.f64 re im) re) 1/2)))"]],"stop":[["fuel",1]],"time":24.052001953125,"type":"simplify"},{"time":0.02392578125,"type":"soundness"},{"compiler":[[40,30]],"remove-preprocessing":[[]],"time":16.669189453125,"type":"end"}]
[{"compiler":[[20,12]],"method":["search"],"sampling":[[12,0.17153955242975893,0.7972690561792205,0.031191391391020562],[11,0.12475603813073377,0.8499005097656238,0.025343452103642417],[10,0.09356702859805033,0.9044812764478198,0.0019516949541298345],[9,0.062378019065366885,0.9356702859805033,0.0019516949541298345],[8,0.0,0.9980483050458702,0.0019516949541298345],[7,0.0,0.9980483050458702,0.0019516949541298345],[6,0.0,0.9980483050458702,0.0019516949541298345],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":170.906982421875,"type":"analyze"},{"outcomes":[["body",256,"invalid",394.354248046875,7129],["body",256,"valid",455.4697265625,8256]],"time":864.1630859375,"type":"sample"},{"compiler":[[19,11]],"inputs":[["0","1","2","3"],["(+.f64 (/.f64 (*.f64 x x) (*.f64 y y)) (/.f64 (*.f64 z z) (*.f64 t t)))","(+.f64 (/.f64 (*.f64 y y) (*.f64 x x)) (/.f64 (*.f64 z z) (*.f64 t t)))","(+.f64 (/.f64 (*.f64 z z) (*.f64 y y)) (/.f64 (*.f64 x x) (*.f64 t t)))","(+.f64 (/.f64 (*.f64 t t) (*.f64 y y)) (/.f64 (*.f64 z z) (*.f64 x x)))","(+.f64 (/.f64 (*.f64 x x) (*.f64 z z)) (/.f64 (*.f64 y y) (*.f64 t t)))","(+.f64 (/.f64 (*.f64 x x) (*.f64 t t)) (/.f64 (*.f64 z z) (*.f64 y y)))","(+.f64 (/.f64 (*.f64 x x) (*.f64 y y)) (/.f64 (*.f64 t t) (*.f64 z z)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(+.f64 (/.f64 (*.f64 x x) (*.f64 y y)) (/.f64 (*.f64 z z) (*.f64 t t)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (*.f64 y y) (*.f64 x x)) (/.f64 (*.f64 z z) (*.f64 t t)))","(+.f64 (pow.f64 (/.f64 y x) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (*.f64 z z) (*.f64 y y)) (/.f64 (*.f64 x x) (*.f64 t t)))","(+.f64 (pow.f64 (/.f64 z y) 2) (pow.f64 (/.f64 x t) 2))","(+.f64 (/.f64 (*.f64 t t) (*.f64 y y)) (/.f64 (*.f64 z z) (*.f64 x x)))","(+.f64 (pow.f64 (/.f64 t y) 2) (pow.f64 (/.f64 z x) 2))","(+.f64 (/.f64 (*.f64 x x) (*.f64 z z)) (/.f64 (*.f64 y y) (*.f64 t t)))","(+.f64 (pow.f64 (/.f64 x z) 2) (pow.f64 (/.f64 y t) 2))","(+.f64 (/.f64 (*.f64 x x) (*.f64 t t)) (/.f64 (*.f64 z z) (*.f64 y y)))","(+.f64 (pow.f64 (/.f64 z y) 2) (pow.f64 (/.f64 x t) 2))","(+.f64 (/.f64 (*.f64 x x) (*.f64 y y)) (/.f64 (*.f64 t t) (*.f64 z z)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 t z) 2))"]],"symmetry":[[]],"time":71.958984375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (/.f64 (*.f64 x x) (*.f64 y y)) (/.f64 (*.f64 z z) (*.f64 t t)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (/.f64 (*.f64 x x) (*.f64 y y)) (/.f64 (*.f64 z z) (*.f64 t t)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))"]],"time":20.89697265625,"type":"simplify"},{"compiler":[[30,18]],"time":0.43408203125,"type":"eval"},{"alts":[["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","next",0.4225387695368841],["(+.f64 (/.f64 (*.f64 x x) (*.f64 y y)) (/.f64 (*.f64 z z) (*.f64 t t)))","fresh",33.575045439293845]],"compiler":[[15,11],[19,11],[15,11],[19,11]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.285820019536884],"time":1.3828125,"type":"prune"},{"compiler":[[36,16]],"locations":[["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))",0.00390625,true],["(pow.f64 (/.f64 x y) 2)",0.28810502930532605,true],["(pow.f64 (/.f64 z t) 2)",0.303730029305326,true]],"time":9.14501953125,"type":"localize"},{"count":[[3,96]],"series":[["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","t","-inf",0.171142578125],["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","t","inf",0.216796875],["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","t","0",0.26708984375],["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","z","-inf",0.173095703125],["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","z","inf",0.196044921875],["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","z","0",0.39599609375],["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","y","-inf",0.194091796875],["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","y","inf",0.199951171875],["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","y","0",0.264892578125],["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","x","-inf",0.175048828125],["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","x","inf",0.197998046875],["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","x","0",0.403076171875],["(pow.f64 (/.f64 x y) 2)","y","-inf",0.489990234375],["(pow.f64 (/.f64 x y) 2)","y","inf",0.39794921875],["(pow.f64 (/.f64 x y) 2)","y","0",0.4580078125],["(pow.f64 (/.f64 x y) 2)","x","-inf",0.501953125],["(pow.f64 (/.f64 x y) 2)","x","inf",0.510986328125],["(pow.f64 (/.f64 x y) 2)","x","0",0.85791015625],["(pow.f64 (/.f64 z t) 2)","t","-inf",0.509033203125],["(pow.f64 (/.f64 z t) 2)","t","inf",0.402099609375],["(pow.f64 (/.f64 z t) 2)","t","0",0.633056640625],["(pow.f64 (/.f64 z t) 2)","z","-inf",0.526123046875],["(pow.f64 (/.f64 z t) 2)","z","inf",0.63720703125],["(pow.f64 (/.f64 z t) 2)","z","0",0.6259765625]],"time":9.7021484375,"type":"series"},{"count":[[3,199]],"inputs":[["(pow.f64 (/.f64 z t) 2)","(pow.f64 (/.f64 x y) 2)","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 z t) 2) (*.f64 (pow.f64 (/.f64 z t) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (/.f64 z t) 2) 0) (pow.f64 (/.f64 z t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 z t) 2) (*.f64 0 (pow.f64 (/.f64 z t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (/.f64 z t) 2)) (pow.f64 (/.f64 z t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z t) (/.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 z t)) (pow.f64 (cbrt.f64 (/.f64 z t)) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z z) (pow.f64 t -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) (cbrt.f64 (pow.f64 (/.f64 z t) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 z t)) (neg.f64 (/.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 4)) (cbrt.f64 (pow.f64 (/.f64 z t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 z z) t) (/.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (/.f64 (/.f64 z t) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (/.f64 z t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 z t) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (/.f64 z t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (/.f64 z t) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 t -2) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 z t) t) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (/.f64 (*.f64 z z) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 z t)) (+.f64 2 3)) (cbrt.f64 (/.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 t -2)) (*.f64 (/.f64 z (cbrt.f64 (*.f64 t t))) (/.f64 z (cbrt.f64 (*.f64 t t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (/.f64 (cbrt.f64 (*.f64 z z)) t) (/.f64 (cbrt.f64 (*.f64 z z)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z z) (*.f64 (/.f64 -1 t) (/.f64 -1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 z z)) (/.f64 1 (neg.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z z) (/.f64 1 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 z z) t)) (/.f64 -1 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 z z) t)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z z) t) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 z z)) (neg.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z z) (*.f64 t t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 z t) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 z z) t) -1) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 z z) t) (cbrt.f64 (/.f64 1 t))) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 z z) t) 1) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z t) (/.f64 z (cbrt.f64 t))) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 z)) (pow.f64 (cbrt.f64 (/.f64 z t)) (+.f64 2 3))) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 z t)) (+.f64 2 3))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 z z)) 1) (neg.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 (*.f64 z z) t)) 1) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z (cbrt.f64 t)) (/.f64 z t)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 z z) t) -1) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 z z) t) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 z z) t) (cbrt.f64 (*.f64 t t))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 z z) t) 1) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 z z) t)) (cbrt.f64 (neg.f64 t))) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 z z) t)) (cbrt.f64 t)) (neg.f64 (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 z z) t)) -1) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 z z) t)) 1) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (/.f64 (*.f64 z z) t))) t)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z t) 3) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z t) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z t) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z t) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z t) 3) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 z t)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 z t)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (/.f64 z t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 z t) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 x y) 2) (*.f64 (pow.f64 (/.f64 x y) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (/.f64 x y) 2) 0) (pow.f64 (/.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 x y) 2) (*.f64 0 (pow.f64 (/.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (/.f64 x y) 2)) (pow.f64 (/.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (pow.f64 y -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (cbrt.f64 (pow.f64 (/.f64 x y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x y)) (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 4)) (cbrt.f64 (pow.f64 (/.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x x) y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (/.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (/.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (/.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 2 3)) (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -2) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (/.f64 x y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 x (cbrt.f64 (*.f64 y y))) (/.f64 x (cbrt.f64 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (*.f64 (/.f64 -1 y) (/.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (/.f64 (cbrt.f64 (*.f64 x x)) y) (/.f64 (cbrt.f64 (*.f64 x x)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (/.f64 x y)) 1) (*.f64 (neg.f64 (/.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x x)) (/.f64 1 (neg.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (/.f64 1 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x x) y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x x) y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x x) y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x x) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x x)) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 x y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x x) y) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x x) y) (cbrt.f64 (/.f64 1 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x x) y) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x y) (/.f64 x (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 2 3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 2 3))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x x)) 1) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 (*.f64 x x) y)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 x y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 x x) y)) -1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 x x) y)) (cbrt.f64 (neg.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 x x) y)) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 x x) y)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x x) y) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x x) y) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x x) y) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x x) y) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (/.f64 (*.f64 x x) y))) y)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x y) 3) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x y) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x y) 3) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x y)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 x y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (/.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x y) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2)) (*.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2)) 0) (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2)) (*.f64 0 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))) (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 z t) 2) (pow.f64 (/.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))) (cbrt.f64 (pow.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 4)) (-.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 4)) (cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) (/.f64 z t)) 2)))) (+.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) (cbrt.f64 (pow.f64 (/.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 4)) (-.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 4)) (cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) (/.f64 z t)) 2)))) (+.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (cbrt.f64 (pow.f64 (/.f64 z t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2)) 2)) (cbrt.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 z z) t) (neg.f64 (*.f64 y y))) (*.f64 t (neg.f64 (*.f64 x x)))) (*.f64 t (neg.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 z z) t) y) (*.f64 t (/.f64 (*.f64 x x) y))) (*.f64 t y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 z z) t) (*.f64 y y)) (*.f64 t (*.f64 x x))) (*.f64 t (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 z z) t) (neg.f64 y)) (*.f64 t (neg.f64 (/.f64 (*.f64 x x) y)))) (*.f64 t (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 z z)) (neg.f64 (*.f64 y y))) (*.f64 (neg.f64 (*.f64 t t)) (neg.f64 (*.f64 x x)))) (*.f64 (neg.f64 (*.f64 t t)) (neg.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 z z)) y) (*.f64 (neg.f64 (*.f64 t t)) (/.f64 (*.f64 x x) y))) (*.f64 (neg.f64 (*.f64 t t)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 z z)) (*.f64 y y)) (*.f64 (neg.f64 (*.f64 t t)) (*.f64 x x))) (*.f64 (neg.f64 (*.f64 t t)) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 z z)) (neg.f64 y)) (*.f64 (neg.f64 (*.f64 t t)) (neg.f64 (/.f64 (*.f64 x x) y)))) (*.f64 (neg.f64 (*.f64 t t)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 (*.f64 z z) t)) (neg.f64 (*.f64 y y))) (*.f64 (neg.f64 t) (neg.f64 (*.f64 x x)))) (*.f64 (neg.f64 t) (neg.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 (*.f64 z z) t)) y) (*.f64 (neg.f64 t) (/.f64 (*.f64 x x) y))) (*.f64 (neg.f64 t) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 (*.f64 z z) t)) (*.f64 y y)) (*.f64 (neg.f64 t) (*.f64 x x))) (*.f64 (neg.f64 t) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 (*.f64 z z) t)) (neg.f64 y)) (*.f64 (neg.f64 t) (neg.f64 (/.f64 (*.f64 x x) y)))) (*.f64 (neg.f64 t) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z z) (neg.f64 (*.f64 y y))) (*.f64 (*.f64 t t) (neg.f64 (*.f64 x x)))) (*.f64 (*.f64 t t) (neg.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z z) y) (*.f64 (*.f64 t t) (/.f64 (*.f64 x x) y))) (*.f64 (*.f64 t t) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z z) (*.f64 y y)) (*.f64 (*.f64 t t) (*.f64 x x))) (*.f64 (*.f64 t t) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z z) (neg.f64 y)) (*.f64 (*.f64 t t) (neg.f64 (/.f64 (*.f64 x x) y)))) (*.f64 (*.f64 t t) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 x x) (neg.f64 (*.f64 t t))) (*.f64 (*.f64 y y) (neg.f64 (*.f64 z z)))) (*.f64 (*.f64 y y) (neg.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 x x) (*.f64 t t)) (*.f64 (*.f64 y y) (*.f64 z z))) (*.f64 (*.f64 y y) (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 x x) t) (*.f64 (*.f64 y y) (/.f64 (*.f64 z z) t))) (*.f64 (*.f64 y y) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 x x) (neg.f64 t)) (*.f64 (*.f64 y y) (neg.f64 (/.f64 (*.f64 z z) t)))) (*.f64 (*.f64 y y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 x x)) (neg.f64 (*.f64 t t))) (*.f64 (neg.f64 (*.f64 y y)) (neg.f64 (*.f64 z z)))) (*.f64 (neg.f64 (*.f64 y y)) (neg.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 x x)) (*.f64 t t)) (*.f64 (neg.f64 (*.f64 y y)) (*.f64 z z))) (*.f64 (neg.f64 (*.f64 y y)) (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 x x)) t) (*.f64 (neg.f64 (*.f64 y y)) (/.f64 (*.f64 z z) t))) (*.f64 (neg.f64 (*.f64 y y)) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 x x)) (neg.f64 t)) (*.f64 (neg.f64 (*.f64 y y)) (neg.f64 (/.f64 (*.f64 z z) t)))) (*.f64 (neg.f64 (*.f64 y y)) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 (*.f64 x x) y)) (neg.f64 (*.f64 t t))) (*.f64 (neg.f64 y) (neg.f64 (*.f64 z z)))) (*.f64 (neg.f64 y) (neg.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 (*.f64 x x) y)) (*.f64 t t)) (*.f64 (neg.f64 y) (*.f64 z z))) (*.f64 (neg.f64 y) (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 (*.f64 x x) y)) t) (*.f64 (neg.f64 y) (/.f64 (*.f64 z z) t))) (*.f64 (neg.f64 y) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 (*.f64 x x) y)) (neg.f64 t)) (*.f64 (neg.f64 y) (neg.f64 (/.f64 (*.f64 z z) t)))) (*.f64 (neg.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 x x) y) (neg.f64 (*.f64 t t))) (*.f64 y (neg.f64 (*.f64 z z)))) (*.f64 y (neg.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 x x) y) (*.f64 t t)) (*.f64 y (*.f64 z z))) (*.f64 y (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 x x) y) t) (*.f64 y (/.f64 (*.f64 z z) t))) (*.f64 y t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 x x) y) (neg.f64 t)) (*.f64 y (neg.f64 (/.f64 (*.f64 z z) t)))) (*.f64 y (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) (cbrt.f64 (pow.f64 (/.f64 z t) 4)) (pow.f64 (/.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z t) (/.f64 z t) (pow.f64 (/.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) (/.f64 x y) (pow.f64 (/.f64 z t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (cbrt.f64 (pow.f64 (/.f64 x y) 4)) (pow.f64 (/.f64 z t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (pow.f64 (/.f64 z t) 2)) (pow.f64 (/.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z z) (pow.f64 t -2) (pow.f64 (/.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (/.f64 (/.f64 z t) t) (pow.f64 (/.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 z z) t) (/.f64 1 t) (pow.f64 (/.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 4)) (cbrt.f64 (pow.f64 (/.f64 z t) 2)) (pow.f64 (/.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 z t)) (pow.f64 (cbrt.f64 (/.f64 z t)) (+.f64 2 3)) (pow.f64 (/.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (/.f64 z t)) (neg.f64 (/.f64 z t)) (pow.f64 (/.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 2 3)) (pow.f64 (/.f64 z t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (pow.f64 y -2) (pow.f64 (/.f64 z t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (pow.f64 (/.f64 x y) 2)) (pow.f64 (/.f64 z t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (/.f64 x y)) (neg.f64 (/.f64 x y)) (pow.f64 (/.f64 z t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x x) y) (/.f64 1 y) (pow.f64 (/.f64 z t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 4)) (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (pow.f64 (/.f64 z t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 (/.f64 x y) y) (pow.f64 (/.f64 z t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (/.f64 z t) 2) (pow.f64 (/.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 z t) 2) 1 (pow.f64 (/.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 x y) 2) 1 (pow.f64 (/.f64 z t) 2))))))"]],"rules":[["egg-rr",76],["egg-rr",62],["egg-rr",61]],"time":35.501953125,"type":"rewrite"},{"count":[[295,202]],"inputs":[["(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(/.f64 (pow.f64 z 2) (pow.f64 t 2))","(pow.f64 (/.f64 z t) 2)","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (/.f64 (pow.f64 z 2) (pow.f64 t 2)))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))"]],"time":283.777099609375,"type":"simplify"},{"compiler":[[3532,1408]],"time":32.19384765625,"type":"eval"},{"alts":[["(+.f64 (pow.f64 (/.f64 x y) 2) (/.f64 (*.f64 (/.f64 z (cbrt.f64 t)) (/.f64 z t)) (cbrt.f64 (*.f64 t t))))","fresh",14.135177450733993],["(fma.f64 (cbrt.f64 (/.f64 z t)) (pow.f64 (cbrt.f64 (/.f64 z t)) (+.f64 2 3)) (pow.f64 (/.f64 x y) 2))","fresh",0.6691566106263953],["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) 3))","fresh",0.5681802246741666],["(+.f64 (pow.f64 (/.f64 x y) 2) (/.f64 (*.f64 (cbrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 z t)) (+.f64 2 3))) (cbrt.f64 t)))","fresh",1.5826513377839746],["(fma.f64 z (/.f64 (/.f64 z t) t) (pow.f64 (/.f64 x y) 2))","fresh",4.502142701198656],["(/.f64 (+.f64 (*.f64 (/.f64 (*.f64 x x) y) t) (*.f64 y (/.f64 (*.f64 z z) t))) (*.f64 y t))","fresh",33.818393301541285],["(fma.f64 x (/.f64 (/.f64 x y) y) (pow.f64 (/.f64 z t) 2))","fresh",4.797898887931002],["(+.f64 (pow.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) 3) (pow.f64 (/.f64 z t) 2))","next",0.5630228028217029],["(fma.f64 (/.f64 (*.f64 z z) t) (/.f64 1 t) (pow.f64 (/.f64 x y) 2))","fresh",13.249081551042709],["(fma.f64 (*.f64 z z) (pow.f64 t -2) (pow.f64 (/.f64 x y) 2))","fresh",18.783959744313236],["(+.f64 (/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 2 3))) (cbrt.f64 y)) (pow.f64 (/.f64 z t) 2))","fresh",1.4089514035352282],["(fma.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) (cbrt.f64 (pow.f64 (/.f64 z t) 4)) (pow.f64 (/.f64 x y) 2))","fresh",12.336324975340785],["(fma.f64 (/.f64 (*.f64 x x) y) (/.f64 1 y) (pow.f64 (/.f64 z t) 2))","fresh",14.098075202699679],["(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (pow.f64 (/.f64 z t) 2))","fresh",19.020571320957128],["(+.f64 (pow.f64 (/.f64 x y) 2) (cbrt.f64 (pow.f64 (/.f64 z t) 6)))","fresh",15.948687602516491],["(+.f64 (/.f64 (/.f64 (*.f64 x x) y) y) (pow.f64 (/.f64 z t) 2))","fresh",14.070731688727886]],"compiler":[[23,15],[22,14],[18,14],[24,18],[16,10],[23,13],[16,10],[18,14],[18,12],[16,11],[24,18],[22,15],[18,12],[17,13],[16,12],[17,11],[23,15],[22,14],[18,14],[24,18],[16,10],[23,13],[16,10],[18,14],[18,12],[16,11],[24,18],[22,15],[18,12],[17,13],[16,12],[17,11]],"count":[[204,16]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[202,16],"picked":[1,0]}],"min-error":[0.0390625],"time":62.154052734375,"type":"prune"},{"compiler":[[54,28]],"locations":[["(pow.f64 (/.f64 x y) 2)",0.28810502930532605,false],["(pow.f64 (/.f64 z t) 2)",0.303730029305326,false],["(pow.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) 3)",0.4060326660635144,true],["(cbrt.f64 (pow.f64 (/.f64 x y) 2))",20.70721663987504,true]],"time":13.675048828125,"type":"localize"},{"count":[[2,0]],"series":[["(pow.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) 3)","y","-inf",0.405029296875],["(pow.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) 3)","y","inf",0.509033203125],["(pow.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) 3)","y","0",0.34619140625],["(pow.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) 3)","x","-inf",0.39697265625],["(pow.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) 3)","x","inf",0.475830078125],["(pow.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) 3)","x","0",0.552001953125],["(cbrt.f64 (pow.f64 (/.f64 x y) 2))","y","-inf",0.330078125],["(cbrt.f64 (pow.f64 (/.f64 x y) 2))","y","inf",0.31103515625],["(cbrt.f64 (pow.f64 (/.f64 x y) 2))","y","0",0.3271484375],["(cbrt.f64 (pow.f64 (/.f64 x y) 2))","x","-inf",0.285888671875],["(cbrt.f64 (pow.f64 (/.f64 x y) 2))","x","inf",0.343994140625],["(cbrt.f64 (pow.f64 (/.f64 x y) 2))","x","0",1.240966796875]],"time":5.661865234375,"type":"series"},{"count":[[2,132]],"inputs":[["(cbrt.f64 (pow.f64 (/.f64 x y) 2))","(pow.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (/.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 x y) 2/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (/.f64 x y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2/3)) (cbrt.f64 (pow.f64 (/.f64 x y) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 4/3)) (cbrt.f64 (pow.f64 (/.f64 x y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 x y)) -1) (*.f64 (cbrt.f64 (/.f64 x y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (/.f64 (cbrt.f64 (pow.f64 (pow.f64 x 2/3) 2)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) (cbrt.f64 (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 x 2/3) y)) (/.f64 (cbrt.f64 (pow.f64 (pow.f64 x 2/3) 2)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2/3)) (/.f64 (cbrt.f64 (pow.f64 (pow.f64 x 2/3) 2)) (cbrt.f64 (pow.f64 (pow.f64 y 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (pow.f64 y -2/3))) (/.f64 (cbrt.f64 x) (cbrt.f64 (pow.f64 (pow.f64 y 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y -2/3)) (/.f64 (pow.f64 x 2/3) (cbrt.f64 (pow.f64 (pow.f64 y 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (pow.f64 (/.f64 x y) 2/3) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (/.f64 x y) 4/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (/.f64 x y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (/.f64 x y) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 (/.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (cbrt.f64 (/.f64 (*.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x x) y)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (/.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x y) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (/.f64 x y))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 x 2/3) (cbrt.f64 (pow.f64 y 2/3))) (cbrt.f64 (pow.f64 (pow.f64 y 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (/.f64 x y) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 x (cbrt.f64 y)) x)) (cbrt.f64 (pow.f64 y (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x x) y) -1)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 x y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 x) (/.f64 x (cbrt.f64 y)))) (cbrt.f64 (*.f64 (neg.f64 y) (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 x 2/3)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (neg.f64 x))) (cbrt.f64 (*.f64 (pow.f64 y 2/3) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x x) y) (pow.f64 y 2/3))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (/.f64 x (cbrt.f64 y)) 2)) (cbrt.f64 (pow.f64 (pow.f64 y 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 x (/.f64 x (cbrt.f64 y)))) (cbrt.f64 (*.f64 y (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 x y) (/.f64 x (cbrt.f64 y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (neg.f64 (/.f64 (*.f64 x x) y)) (cbrt.f64 (neg.f64 y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x x) y) (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 x 2/3) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))) (cbrt.f64 (cbrt.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (neg.f64 (/.f64 (*.f64 x x) y)) (cbrt.f64 y))) (cbrt.f64 (neg.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (/.f64 (/.f64 (*.f64 x x) y) -1))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x x) y))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 x x) y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 x y) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x y) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (/.f64 x y)) -1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x y) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x y) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (/.f64 x y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x y) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (/.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 x y) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (/.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x y) 2/3) (pow.f64 (/.f64 x y) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x y) 4/3) (pow.f64 (/.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (/.f64 x y) 2/3) 7/3) (cbrt.f64 (pow.f64 (/.f64 x y) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2/3)) (pow.f64 (pow.f64 (/.f64 x y) 4/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (/.f64 x y) 4/3) 4/3) (cbrt.f64 (pow.f64 (/.f64 x y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 4/3)) (pow.f64 (pow.f64 (/.f64 x y) 2/3) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -2/3) (pow.f64 (*.f64 x (pow.f64 y -2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x x)) (neg.f64 (pow.f64 y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (pow.f64 (/.f64 (pow.f64 x 2/3) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) (cbrt.f64 (neg.f64 y))) (/.f64 (neg.f64 x) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (*.f64 x (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 y -2/3)) (/.f64 (/.f64 x y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x x) y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (/.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (pow.f64 y -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x y)) (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -2) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x x) y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 x y) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (/.f64 (/.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (neg.f64 y))) (/.f64 (/.f64 x y) (neg.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) (pow.f64 y 2/3)) (/.f64 x (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (/.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (/.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (/.f64 x y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (/.f64 x (cbrt.f64 y))) (*.f64 (neg.f64 y) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 x (cbrt.f64 y))) (*.f64 y (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 y)) x) (pow.f64 y (+.f64 2/3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (neg.f64 x)) (*.f64 (pow.f64 y 2/3) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 x (cbrt.f64 y)) 2) (pow.f64 (pow.f64 y 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 (pow.f64 x 2/3) (cbrt.f64 (pow.f64 y 2/3))) 3) (pow.f64 (pow.f64 y 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (/.f64 (*.f64 x x) y)) (pow.f64 (/.f64 x y) 4))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x y) 4) (neg.f64 (/.f64 (*.f64 x x) y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x x) y) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x y) (/.f64 x (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 x y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 x x) y)) (cbrt.f64 (neg.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x x) y) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x x) y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x x) y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x x)) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x x) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x x) y) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 x x) y) -1)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 x x) y)) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 x y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (/.f64 x y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (cbrt.f64 (neg.f64 x))) 3) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (/.f64 x y))) 3) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 x x) (pow.f64 (/.f64 x y) 4))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (*.f64 x x) y) (pow.f64 (/.f64 x y) 4))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x y) 4) (neg.f64 (*.f64 x x)))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (*.f64 x x)) (pow.f64 (/.f64 x y) 4))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x y) 4) (/.f64 (*.f64 x x) y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x y) 4) (*.f64 x x))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x y)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x y) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x y) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x y) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 x y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (/.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x y) 6))))))"]],"rules":[["egg-rr",75],["egg-rr",57]],"time":49.68310546875,"type":"rewrite"},{"count":[[132,132]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"time":27.364013671875,"type":"simplify"},{"compiler":[[4738,2392]],"time":50.3759765625,"type":"eval"},{"alts":[["(+.f64 (pow.f64 (/.f64 x y) 2) (/.f64 (*.f64 (/.f64 z (cbrt.f64 t)) (/.f64 z t)) (cbrt.f64 (*.f64 t t))))","fresh",14.135177450733993],["(fma.f64 (cbrt.f64 (/.f64 z t)) (pow.f64 (cbrt.f64 (/.f64 z t)) (+.f64 2 3)) (pow.f64 (/.f64 x y) 2))","fresh",0.6691566106263953],["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) 3))","next",0.5681802246741666],["(+.f64 (pow.f64 (/.f64 x y) 2) (/.f64 (*.f64 (cbrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 z t)) (+.f64 2 3))) (cbrt.f64 t)))","fresh",1.5826513377839746],["(fma.f64 z (/.f64 (/.f64 z t) t) (pow.f64 (/.f64 x y) 2))","fresh",4.502142701198656],["(/.f64 (+.f64 (*.f64 (/.f64 (*.f64 x x) y) t) (*.f64 y (/.f64 (*.f64 z z) t))) (*.f64 y t))","fresh",33.818393301541285],["(fma.f64 x (/.f64 (/.f64 x y) y) (pow.f64 (/.f64 z t) 2))","fresh",4.797898887931002],["(+.f64 (pow.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) 3) (pow.f64 (/.f64 z t) 2))","done",0.5630228028217029],["(fma.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) (cbrt.f64 (pow.f64 (/.f64 z t) 4)) (pow.f64 (/.f64 x y) 2))","fresh",12.336324975340785],["(+.f64 (/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 y)) (pow.f64 (/.f64 z t) 2))","fresh",1.4089514035352282],["(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (pow.f64 (/.f64 z t) 2))","fresh",19.020571320957128],["(+.f64 (/.f64 (pow.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (/.f64 x y))) 3) (neg.f64 y)) (pow.f64 (/.f64 z t) 2))","fresh",5.330584524130232],["(fma.f64 (/.f64 (*.f64 z z) t) (/.f64 1 t) (pow.f64 (/.f64 x y) 2))","fresh",13.249081551042709],["(fma.f64 (*.f64 z z) (pow.f64 t -2) (pow.f64 (/.f64 x y) 2))","fresh",18.783959744313236],["(fma.f64 (/.f64 (*.f64 x x) y) (/.f64 1 y) (pow.f64 (/.f64 z t) 2))","fresh",14.098075202699679],["(+.f64 (pow.f64 (/.f64 x y) 2) (cbrt.f64 (pow.f64 (/.f64 z t) 6)))","fresh",15.948687602516491]],"compiler":[[23,15],[22,14],[18,14],[24,18],[16,10],[23,13],[16,10],[18,14],[22,15],[22,16],[17,13],[23,17],[18,12],[16,11],[18,12],[16,12],[23,15],[22,14],[18,14],[24,18],[16,10],[23,13],[16,10],[22,15],[22,16],[17,13],[23,17],[18,12],[16,11],[18,12],[16,12]],"count":[[273,16]],"kept":[{"done":[0,0],"fresh":[15,13],"new":[257,2],"picked":[1,1]}],"min-error":[0.03125],"time":84.779052734375,"type":"prune"},{"compiler":[[54,28]],"locations":[["(pow.f64 (/.f64 x y) 2)",0.28810502930532605,false],["(pow.f64 (/.f64 z t) 2)",0.303730029305326,false],["(pow.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) 3)",0.4379464356003985,true],["(cbrt.f64 (pow.f64 (/.f64 z t) 2))",20.834116620372868,true]],"time":12.56494140625,"type":"localize"},{"count":[[2,0]],"series":[["(pow.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) 3)","t","-inf",0.410888671875],["(pow.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) 3)","t","inf",0.510009765625],["(pow.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) 3)","t","0",0.35986328125],["(pow.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) 3)","z","-inf",0.60595703125],["(pow.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) 3)","z","inf",0.4560546875],["(pow.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) 3)","z","0",0.3759765625],["(cbrt.f64 (pow.f64 (/.f64 z t) 2))","t","-inf",0.283935546875],["(cbrt.f64 (pow.f64 (/.f64 z t) 2))","t","inf",0.474853515625],["(cbrt.f64 (pow.f64 (/.f64 z t) 2))","t","0",0.31005859375],["(cbrt.f64 (pow.f64 (/.f64 z t) 2))","z","-inf",0.2919921875],["(cbrt.f64 (pow.f64 (/.f64 z t) 2))","z","inf",0.365966796875],["(cbrt.f64 (pow.f64 (/.f64 z t) 2))","z","0",0.419921875]],"time":5.01806640625,"type":"series"},{"count":[[2,132]],"inputs":[["(cbrt.f64 (pow.f64 (/.f64 z t) 2))","(pow.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (/.f64 z t) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 z t) 2/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (/.f64 z t) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 z t)) (cbrt.f64 (/.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2/3)) (cbrt.f64 (pow.f64 (/.f64 z t) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 4/3)) (cbrt.f64 (pow.f64 (/.f64 z t) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 z t)) -1) (*.f64 (cbrt.f64 (/.f64 z t)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z 2/3)) (/.f64 (cbrt.f64 (pow.f64 (pow.f64 z 2/3) 2)) (pow.f64 t 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 z t))) (cbrt.f64 (neg.f64 (/.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (pow.f64 t -2/3))) (/.f64 (cbrt.f64 z) (cbrt.f64 (pow.f64 (pow.f64 t 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2/3)) (/.f64 (cbrt.f64 (pow.f64 (pow.f64 z 2/3) 2)) (cbrt.f64 (pow.f64 (pow.f64 t 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 z 2/3) t)) (/.f64 (cbrt.f64 (pow.f64 (pow.f64 z 2/3) 2)) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 t -2/3)) (/.f64 (pow.f64 z 2/3) (cbrt.f64 (pow.f64 (pow.f64 t 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 z t))) (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 z t)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (/.f64 z t) 4/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (pow.f64 (/.f64 z t) 2/3) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (/.f64 z t) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (/.f64 z t) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (cbrt.f64 (/.f64 (/.f64 z t) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (pow.f64 t -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 t -1/3) (cbrt.f64 (/.f64 (*.f64 z z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 z z) t)) (pow.f64 t -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (/.f64 z t) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 z t) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 z t)) (cbrt.f64 (neg.f64 z))) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (/.f64 z t))) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 z 2/3) (cbrt.f64 (pow.f64 t 2/3))) (cbrt.f64 (pow.f64 (pow.f64 t 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (/.f64 z t) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (/.f64 z (cbrt.f64 t)) 2)) (cbrt.f64 (pow.f64 (pow.f64 t 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 z z) t) (cbrt.f64 t))) (cbrt.f64 (pow.f64 t 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 z (cbrt.f64 t)) (neg.f64 z))) (cbrt.f64 (*.f64 (pow.f64 t 2/3) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 z t)) 5))) (cbrt.f64 (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 z t) (/.f64 z (cbrt.f64 t)))) (cbrt.f64 (pow.f64 t 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 z z) t) -1)) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 z z) t) (pow.f64 t 2/3))) (cbrt.f64 (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 z (cbrt.f64 t)) z)) (cbrt.f64 (pow.f64 t (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (neg.f64 (/.f64 (*.f64 z z) t)) (cbrt.f64 (neg.f64 t)))) (cbrt.f64 (pow.f64 t 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 z) (/.f64 z (cbrt.f64 t)))) (cbrt.f64 (*.f64 (neg.f64 t) (pow.f64 t 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 z (/.f64 z (cbrt.f64 t)))) (cbrt.f64 (*.f64 t (pow.f64 t 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 z (cbrt.f64 t)) (/.f64 z t))) (cbrt.f64 (pow.f64 t 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 z 2/3) (pow.f64 t 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 z 2/3)) (neg.f64 (pow.f64 t 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (neg.f64 (/.f64 (*.f64 z z) t)) (cbrt.f64 t))) (cbrt.f64 (neg.f64 (pow.f64 t 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (/.f64 (/.f64 (*.f64 z z) t) -1))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (neg.f64 z)) (pow.f64 (cbrt.f64 (/.f64 z t)) 5))) (cbrt.f64 (cbrt.f64 (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 z z) t)) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 z z) t))) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 z t) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z t) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 z t)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (/.f64 z t)) -1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 z t))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z t) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z t) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (/.f64 z t) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 z t) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (/.f64 z t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 z t) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (/.f64 z t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 z t) 2/3) (pow.f64 (/.f64 z t) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 z t) 4/3) (pow.f64 (/.f64 z t) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (/.f64 z t) 2/3) 7/3) (cbrt.f64 (pow.f64 (/.f64 z t) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2/3)) (pow.f64 (pow.f64 (/.f64 z t) 4/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 z t)) (pow.f64 (cbrt.f64 (/.f64 z t)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 z t)) 5) (cbrt.f64 (/.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (/.f64 z t) 4/3) 4/3) (cbrt.f64 (pow.f64 (/.f64 z t) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 4/3)) (pow.f64 (pow.f64 (/.f64 z t) 2/3) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 t -2/3) (pow.f64 (*.f64 z (pow.f64 t -2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 z z)) (neg.f64 (pow.f64 t -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z t) (/.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (pow.f64 (/.f64 (pow.f64 z 2/3) t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 z t) (cbrt.f64 t)) (*.f64 z (pow.f64 t -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 z t) (cbrt.f64 (neg.f64 t))) (/.f64 (neg.f64 z) (pow.f64 t 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (pow.f64 t -2/3)) (/.f64 (/.f64 z t) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 z z) t) (/.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (/.f64 (/.f64 z t) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z z) (pow.f64 t -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 z t)) (neg.f64 (/.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 z t) t) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (/.f64 (*.f64 z z) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 t -2) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 z z) t)) (/.f64 -1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (cbrt.f64 (neg.f64 t))) (/.f64 (/.f64 z t) (neg.f64 (pow.f64 t 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 z) (neg.f64 (/.f64 (/.f64 z t) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (cbrt.f64 t)) (/.f64 (/.f64 z t) (pow.f64 t 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 z t) (pow.f64 t 2/3)) (/.f64 z (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (/.f64 z t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 z t) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (/.f64 z t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (/.f64 z t) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 z)) (pow.f64 (cbrt.f64 (/.f64 z t)) 5)) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (/.f64 z (cbrt.f64 t))) (*.f64 (neg.f64 t) (pow.f64 t 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (/.f64 z (cbrt.f64 t))) (*.f64 t (pow.f64 t 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z (cbrt.f64 t)) z) (pow.f64 t (+.f64 2/3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z (cbrt.f64 t)) (neg.f64 z)) (*.f64 (pow.f64 t 2/3) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 z (cbrt.f64 t)) 2) (pow.f64 (pow.f64 t 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z z) t) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z z) (*.f64 t t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 (pow.f64 z 2/3) (cbrt.f64 (pow.f64 t 2/3))) 3) (pow.f64 (pow.f64 t 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 z t) 4) (neg.f64 (/.f64 (*.f64 z z) t)))) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (/.f64 (*.f64 z z) t)) (pow.f64 (/.f64 z t) 4))) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 z z) t) (cbrt.f64 t)) (pow.f64 t 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z t) (/.f64 z (cbrt.f64 t))) (pow.f64 t 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 z t)) 5)) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z (cbrt.f64 t)) (/.f64 z t)) (pow.f64 t 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 z z) t)) (cbrt.f64 (neg.f64 t))) (pow.f64 t 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 z z) t) (pow.f64 t 2/3)) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 z z) t)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 z z)) (neg.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 z z) t) -1) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 z z) t)) (cbrt.f64 t)) (neg.f64 (pow.f64 t 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 z z) t) -1)) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 z t) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (/.f64 z t) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (/.f64 z t))) 3) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cbrt.f64 (/.f64 z t)) (cbrt.f64 (neg.f64 z))) 3) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (*.f64 z z) t) (pow.f64 (/.f64 z t) 4))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (*.f64 z z)) (pow.f64 (/.f64 z t) 4))) (neg.f64 (pow.f64 t 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 z t) 4) (*.f64 z z))) (pow.f64 t 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 z t) 4) (neg.f64 (*.f64 z z)))) (neg.f64 (pow.f64 t 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 z z) (pow.f64 (/.f64 z t) 4))) (pow.f64 t 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 z t) 4) (/.f64 (*.f64 z z) t))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 z t)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z t) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z t) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z t) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z t) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z t) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 z t)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (/.f64 z t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 z t) 6))))))"]],"rules":[["egg-rr",75],["egg-rr",57]],"time":49.87890625,"type":"rewrite"},{"count":[[132,132]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"time":27.820068359375,"type":"simplify"},{"compiler":[[4738,2392]],"time":51.7939453125,"type":"eval"},{"alts":[["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) 3))","done",0.5681802246741666],["(fma.f64 z (/.f64 (/.f64 z t) t) (pow.f64 (/.f64 x y) 2))","fresh",4.502142701198656],["(fma.f64 x (/.f64 (/.f64 x y) y) (pow.f64 (/.f64 z t) 2))","fresh",4.797898887931002],["(+.f64 (pow.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) 3) (pow.f64 (/.f64 z t) 2))","done",0.5630228028217029],["(+.f64 (pow.f64 (/.f64 x y) 2) (/.f64 (pow.f64 (*.f64 (cbrt.f64 (/.f64 z t)) (cbrt.f64 (neg.f64 z))) 3) (neg.f64 t)))","fresh",4.296333709941086],["(+.f64 (/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 y)) (pow.f64 (/.f64 z t) 2))","next",1.4089514035352282],["(+.f64 (pow.f64 (/.f64 x y) 2) (cbrt.f64 (pow.f64 (/.f64 z t) 6)))","fresh",15.948687602516491],["(fma.f64 (/.f64 (*.f64 x x) y) (/.f64 1 y) (pow.f64 (/.f64 z t) 2))","fresh",14.098075202699679],["(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (pow.f64 (/.f64 z t) 2))","fresh",19.020571320957128],["(+.f64 (/.f64 (pow.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (/.f64 x y))) 3) (neg.f64 y)) (pow.f64 (/.f64 z t) 2))","fresh",5.330584524130232],["(+.f64 (pow.f64 (/.f64 x y) 2) (/.f64 (*.f64 (/.f64 z (cbrt.f64 t)) (/.f64 z t)) (cbrt.f64 (*.f64 t t))))","fresh",14.135177450733993],["(fma.f64 (/.f64 (*.f64 z z) t) (/.f64 1 t) (pow.f64 (/.f64 x y) 2))","fresh",13.249081551042709],["(fma.f64 (*.f64 z z) (pow.f64 t -2) (pow.f64 (/.f64 x y) 2))","fresh",18.783959744313236],["(+.f64 (pow.f64 (/.f64 x y) 2) (/.f64 (*.f64 (cbrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 z t)) 5)) (cbrt.f64 t)))","fresh",1.5826513377839746]],"compiler":[[18,14],[16,10],[16,10],[18,14],[23,17],[22,16],[16,12],[18,12],[17,13],[23,17],[23,15],[18,12],[16,11],[22,16],[16,10],[16,10],[23,17],[22,16],[16,12],[18,12],[17,13],[23,17],[23,15],[18,12],[16,11],[22,16]],"count":[[273,14]],"kept":[{"done":[1,1],"fresh":[14,9],"new":[257,3],"picked":[1,1]}],"min-error":[0.03125],"time":86.431884765625,"type":"prune"},{"compiler":[[74,29]],"locations":[["(pow.f64 (cbrt.f64 (/.f64 x y)) 5)",0.6518517942102946,true],["(*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))",0.9648969177905061,true],["(/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 y))",0.9775254154630078,true],["(cbrt.f64 (/.f64 x y))",10.368664283516114,true]],"time":15.815185546875,"type":"localize"},{"count":[[4,36]],"series":[["(pow.f64 (cbrt.f64 (/.f64 x y)) 5)","y","-inf",0.766845703125],["(pow.f64 (cbrt.f64 (/.f64 x y)) 5)","y","inf",0.7080078125],["(pow.f64 (cbrt.f64 (/.f64 x y)) 5)","y","0",0.903076171875],["(pow.f64 (cbrt.f64 (/.f64 x y)) 5)","x","-inf",1.287109375],["(pow.f64 (cbrt.f64 (/.f64 x y)) 5)","x","inf",0.63720703125],["(pow.f64 (cbrt.f64 (/.f64 x y)) 5)","x","0",0.885986328125],["(*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))","y","-inf",0.551025390625],["(*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))","y","inf",0.298828125],["(*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))","y","0",0.381103515625],["(*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))","x","-inf",0.42578125],["(*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))","x","inf",0.4130859375],["(*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))","x","0",2.216064453125],["(/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 y))","y","-inf",2.773193359375],["(/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 y))","y","inf",0.32080078125],["(/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 y))","y","0",0.448974609375],["(/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 y))","x","-inf",1.73681640625],["(/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 y))","x","inf",0.447998046875],["(/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 y))","x","0",0.655029296875],["(cbrt.f64 (/.f64 x y))","y","-inf",0.341064453125],["(cbrt.f64 (/.f64 x y))","y","inf",0.194091796875],["(cbrt.f64 (/.f64 x y))","y","0",0.215087890625],["(cbrt.f64 (/.f64 x y))","x","-inf",0.408935546875],["(cbrt.f64 (/.f64 x y))","x","inf",0.22802734375],["(cbrt.f64 (/.f64 x y))","x","0",0.2587890625]],"time":17.801025390625,"type":"series"},{"count":[[4,156]],"inputs":[["(cbrt.f64 (/.f64 x y))","(/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 y))","(*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))","(pow.f64 (cbrt.f64 (/.f64 x y)) 5)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 x y)) (*.f64 (cbrt.f64 (/.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (/.f64 x y)) 0) (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 x y)) (*.f64 0 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (/.f64 x y))) (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (/.f64 (pow.f64 x 2/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 x y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y)))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2/3)) (pow.f64 (/.f64 x y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2/3)) (cbrt.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y -1/3)) (cbrt.f64 (/.f64 x (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (pow.f64 y 2/3))) (cbrt.f64 (pow.f64 y -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 x 2/3) y)) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (neg.f64 (pow.f64 y -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (cbrt.f64 y))) (pow.f64 (cbrt.f64 (cbrt.f64 y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 x) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 x (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2/3)) (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 y -1/3)) (cbrt.f64 x)) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) (cbrt.f64 (pow.f64 x 2/3))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (/.f64 x y) 2/3))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x (cbrt.f64 y))) 1) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 x (pow.f64 y 2/3))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 x) -1) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 x (cbrt.f64 y))) (cbrt.f64 (cbrt.f64 (pow.f64 y 2/3)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 x (cbrt.f64 y))) 1) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 x (cbrt.f64 y)))) (neg.f64 (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 x y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)) (*.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)) 0) (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)) (*.f64 0 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1))) (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (cbrt.f64 (neg.f64 y))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1))) (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)) 2/3) (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 x)) (neg.f64 (pow.f64 y -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (/.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))) (/.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)) 2/3) (cbrt.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) (cbrt.f64 (cbrt.f64 y))) (cbrt.f64 (/.f64 x (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y -1/3)) (/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)) 2/3) (cbrt.f64 (cbrt.f64 y))) (cbrt.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) (cbrt.f64 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 y -1/3)) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (pow.f64 y 2/3))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) (cbrt.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) (cbrt.f64 (pow.f64 y 2/3))) (cbrt.f64 (/.f64 x (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 (pow.f64 y 2/3))) (cbrt.f64 (pow.f64 y -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 (cbrt.f64 y))) (pow.f64 (cbrt.f64 (cbrt.f64 y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 x)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) (cbrt.f64 (/.f64 x (cbrt.f64 y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) (cbrt.f64 (cbrt.f64 y))) (cbrt.f64 x)) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 y -1/3)) (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)) 2/3) (cbrt.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 x)))) (cbrt.f64 (cbrt.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x (cbrt.f64 y))) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1))) (pow.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) 2/3)) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) (cbrt.f64 (/.f64 x (pow.f64 y 2/3)))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (/.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) (cbrt.f64 (pow.f64 y 2/3)))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 x))) (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)) 2/3)) (cbrt.f64 (cbrt.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))) (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)) 2/3)) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 (cbrt.f64 y))) 1) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 (pow.f64 y 2/3))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 x)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) -1) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 (cbrt.f64 y))) (cbrt.f64 (cbrt.f64 (pow.f64 y 2/3)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 (cbrt.f64 y))) 1) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 (cbrt.f64 y)))) (neg.f64 (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 5 1)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) 0) (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (*.f64 0 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))) (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))) (pow.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 (/.f64 x y)) 5))) (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) 2/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) 2/3) (cbrt.f64 x)) (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (*.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) (cbrt.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) 2/3) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 (/.f64 x y)) 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 x))) (neg.f64 (pow.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 x (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) (*.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) 0) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) (*.f64 0 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (pow.f64 (cbrt.f64 (/.f64 x y)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) 2/3) (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (/.f64 x y)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x y)) 5)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 5) 3))))))"]],"rules":[["egg-rr",21],["egg-rr",34],["egg-rr",60],["egg-rr",41]],"time":35.513916015625,"type":"rewrite"},{"count":[[192,161]],"inputs":[["(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(/.f64 (*.f64 (pow.f64 (cbrt.f64 -1) 4) (pow.f64 x 2)) (pow.f64 y 2))","(/.f64 (*.f64 (pow.f64 (cbrt.f64 -1) 4) (pow.f64 x 2)) (pow.f64 y 2))","(/.f64 (*.f64 (pow.f64 (cbrt.f64 -1) 4) (pow.f64 x 2)) (pow.f64 y 2))","(/.f64 (*.f64 (pow.f64 (cbrt.f64 -1) 4) (pow.f64 x 2)) (pow.f64 y 2))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (pow.f64 x 2) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (*.f64 (pow.f64 (cbrt.f64 -1) 4) (pow.f64 x 2)) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (*.f64 (pow.f64 (cbrt.f64 -1) 4) (pow.f64 x 2)) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (*.f64 (pow.f64 (cbrt.f64 -1) 4) (pow.f64 x 2)) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(/.f64 (*.f64 (pow.f64 (cbrt.f64 -1) 4) (pow.f64 x 2)) (pow.f64 y 2))","(pow.f64 (/.f64 x y) 2)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (cbrt.f64 (pow.f64 y -5)) (*.f64 x x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (cbrt.f64 (pow.f64 y -5)) (*.f64 x x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (cbrt.f64 (pow.f64 y -5)) (*.f64 x x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (cbrt.f64 (pow.f64 y -5)) (*.f64 x x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (cbrt.f64 (pow.f64 y -5)) (*.f64 x x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (cbrt.f64 (pow.f64 y -5)) (*.f64 x x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (cbrt.f64 (pow.f64 y -5)) (*.f64 x x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (cbrt.f64 (pow.f64 y -5)) (*.f64 x x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (cbrt.f64 (pow.f64 y -5)) (*.f64 x x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (cbrt.f64 (pow.f64 y -5)) (*.f64 x x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (cbrt.f64 (pow.f64 y -5)) (*.f64 x x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 2))","(*.f64 (cbrt.f64 (pow.f64 y -5)) (*.f64 x x))"]],"time":112.666015625,"type":"simplify"},{"compiler":[[3696,1799]],"time":35.970947265625,"type":"eval"},{"alts":[["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) 3))","done",0.5681802246741666],["(fma.f64 z (/.f64 (/.f64 z t) t) (pow.f64 (/.f64 x y) 2))","fresh",4.502142701198656],["(fma.f64 x (/.f64 (/.f64 x y) y) (pow.f64 (/.f64 z t) 2))","fresh",4.797898887931002],["(+.f64 (pow.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) 3) (pow.f64 (/.f64 z t) 2))","done",0.5630228028217029],["(+.f64 (pow.f64 (/.f64 x y) 2) (/.f64 (pow.f64 (*.f64 (cbrt.f64 (/.f64 z t)) (cbrt.f64 (neg.f64 z))) 3) (neg.f64 t)))","fresh",4.296333709941086],["(+.f64 (/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 y)) (pow.f64 (/.f64 z t) 2))","done",1.4089514035352282],["(+.f64 (pow.f64 (/.f64 x y) 2) (cbrt.f64 (pow.f64 (/.f64 z t) 6)))","fresh",15.948687602516491],["(fma.f64 (/.f64 (*.f64 x x) y) (/.f64 1 y) (pow.f64 (/.f64 z t) 2))","fresh",14.098075202699679],["(+.f64 (pow.f64 (/.f64 x y) 2) (/.f64 (*.f64 (/.f64 z (cbrt.f64 t)) (/.f64 z t)) (cbrt.f64 (*.f64 t t))))","fresh",14.135177450733993],["(fma.f64 (/.f64 (*.f64 z z) t) (/.f64 1 t) (pow.f64 (/.f64 x y) 2))","fresh",13.249081551042709],["(fma.f64 (*.f64 z z) (pow.f64 t -2) (pow.f64 (/.f64 x y) 2))","fresh",18.783959744313236],["(+.f64 (pow.f64 (/.f64 x y) 2) (/.f64 (*.f64 (cbrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 z t)) 5)) (cbrt.f64 t)))","fresh",1.5826513377839746],["(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (pow.f64 (/.f64 z t) 2))","fresh",19.020571320957128],["(+.f64 (/.f64 (pow.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (/.f64 x y))) 3) (neg.f64 y)) (pow.f64 (/.f64 z t) 2))","fresh",5.330584524130232]],"compiler":[[18,14],[16,10],[16,10],[18,14],[23,17],[22,16],[16,12],[18,12],[23,15],[18,12],[16,11],[22,16],[17,13],[23,17]],"count":[[175,14]],"kept":[{"done":[2,2],"fresh":[11,10],"new":[161,1],"picked":[1,1]}],"min-error":[0.03125],"time":40.4140625,"type":"prune"},{"accuracy":[0.422538769536884],"baseline":[0.4225387695368841],"branch":[["x",0.4225387695368841,1],["y",0.4225387695368841,1],["z",0.4225387695368841,1],["t",0.422538769536884,1],["(+.f64 (/.f64 (*.f64 x x) (*.f64 y y)) (/.f64 (*.f64 z z) (*.f64 t t)))",0.4225387695368841,1],["(/.f64 (*.f64 x x) (*.f64 y y))",0.4225387695368841,1],["(*.f64 x x)",0.4225387695368841,1],["(*.f64 x x)",0.4225387695368841,1],["(*.f64 y y)",0.4225387695368841,1],["(/.f64 (*.f64 z z) (*.f64 t t))",0.4225387695368841,1],["(*.f64 z z)",0.422538769536884,1],["(*.f64 z z)",0.422538769536884,1],["(*.f64 t t)",0.422538769536884,1]],"compiler":[[5,4],[5,4],[5,4],[5,4],[19,11],[11,7],[7,5],[7,5],[7,5],[11,7],[7,5],[7,5],[7,5],[373,177]],"count":[[24,1]],"inputs":[["(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (pow.f64 (/.f64 z t) 2))","(+.f64 (pow.f64 (/.f64 x y) 2) (/.f64 (pow.f64 (*.f64 (cbrt.f64 (/.f64 z t)) (cbrt.f64 (neg.f64 z))) 3) (neg.f64 t)))","(+.f64 (pow.f64 (/.f64 x y) 2) (cbrt.f64 (pow.f64 (/.f64 z t) 6)))","(+.f64 (pow.f64 (/.f64 x y) 2) (/.f64 (*.f64 (cbrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 z t)) 5)) (cbrt.f64 t)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) 5)) (cbrt.f64 y)) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (/.f64 x y))) 3) (neg.f64 y)) (pow.f64 (/.f64 z t) 2))","(+.f64 (pow.f64 (/.f64 x y) 2) (/.f64 (*.f64 (/.f64 z (cbrt.f64 t)) (/.f64 z t)) (cbrt.f64 (*.f64 t t))))","(fma.f64 (cbrt.f64 (/.f64 z t)) (pow.f64 (cbrt.f64 (/.f64 z t)) (+.f64 2 3)) (pow.f64 (/.f64 x y) 2))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) 3))","(+.f64 (pow.f64 (/.f64 x y) 2) (/.f64 (*.f64 (cbrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 z t)) (+.f64 2 3))) (cbrt.f64 t)))","(fma.f64 z (/.f64 (/.f64 z t) t) (pow.f64 (/.f64 x y) 2))","(/.f64 (+.f64 (*.f64 (/.f64 (*.f64 x x) y) t) (*.f64 y (/.f64 (*.f64 z z) t))) (*.f64 y t))","(fma.f64 x (/.f64 (/.f64 x y) y) (pow.f64 (/.f64 z t) 2))","(+.f64 (pow.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) 3) (pow.f64 (/.f64 z t) 2))","(fma.f64 (/.f64 (*.f64 z z) t) (/.f64 1 t) (pow.f64 (/.f64 x y) 2))","(fma.f64 (*.f64 z z) (pow.f64 t -2) (pow.f64 (/.f64 x y) 2))","(+.f64 (/.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 x y)) (+.f64 2 3))) (cbrt.f64 y)) (pow.f64 (/.f64 z t) 2))","(fma.f64 (cbrt.f64 (pow.f64 (/.f64 z t) 2)) (cbrt.f64 (pow.f64 (/.f64 z t) 4)) (pow.f64 (/.f64 x y) 2))","(fma.f64 (/.f64 (*.f64 x x) y) (/.f64 1 y) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (pow.f64 x 2) (pow.f64 y 2)) (pow.f64 (/.f64 z t) 2))","(+.f64 (pow.f64 (/.f64 x y) 2) (cbrt.f64 (pow.f64 (/.f64 z t) 6)))","(+.f64 (/.f64 (/.f64 (*.f64 x x) y) y) (pow.f64 (/.f64 z t) 2))","(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))","(+.f64 (/.f64 (*.f64 x x) (*.f64 y y)) (/.f64 (*.f64 z z) (*.f64 t t)))"]],"link":["."],"name":["Graphics.Rasterific.Svg.PathConverter:arcToSegments from rasterific-svg-0.2.3.1"],"oracle":[41.325956388176635],"outputs":[["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))"]],"time":83.7900390625,"times":[["x",7.931884765625],["y",10.432861328125],["z",7.868896484375],["t",7.808837890625],["(+.f64 (/.f64 (*.f64 x x) (*.f64 y y)) (/.f64 (*.f64 z z) (*.f64 t t)))",4.4970703125],["(/.f64 (*.f64 x x) (*.f64 y y))",3.447998046875],["(*.f64 x x)",4.666015625],["(*.f64 x x)",4.927978515625],["(*.f64 y y)",5.968994140625],["(/.f64 (*.f64 z z) (*.f64 t t))",3.283935546875],["(*.f64 z z)",4.7119140625],["(*.f64 z z)",4.5458984375],["(*.f64 t t)",6.216064453125]],"type":"regimes"},{"compiler":[[15,11]],"inputs":[["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z t) 2))"]],"stop":[["fuel",1]],"time":19.344970703125,"type":"simplify"},{"time":0.015869140625,"type":"soundness"},{"compiler":[[15,11]],"remove-preprocessing":[[]],"time":9.612060546875,"type":"end"}]
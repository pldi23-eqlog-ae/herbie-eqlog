[{"compiler":[[11,8]],"method":["search"],"sampling":[[12,0.4875663434518174,0.42515785148998475,0.08727580505819788],[11,0.4290583822375993,0.5070689971898901,0.06387262057251064],[10,0.3588488287805376,0.5772785506469518,0.06387262057251064],[9,0.2496339678473305,0.7176976575610752,0.03266837459159433],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":80.18115234375,"type":"analyze"},{"outcomes":[["body",256,"invalid",29.151611328125,782],["body",256,"valid",315.783447265625,8256]],"time":354.031982421875,"type":"sample"},{"compiler":[[10,7]],"inputs":[["0","1","2"],["(*.f64 x (-.f64 1 (*.f64 y z)))","(*.f64 y (-.f64 1 (*.f64 x z)))","(*.f64 z (-.f64 1 (*.f64 y x)))","(*.f64 x (-.f64 1 (*.f64 z y)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(*.f64 x (-.f64 1 (*.f64 y z)))","(*.f64 x (fma.f64 (neg.f64 y) z 1))","(*.f64 y (-.f64 1 (*.f64 x z)))","(*.f64 y (fma.f64 z (neg.f64 x) 1))","(*.f64 z (-.f64 1 (*.f64 y x)))","(*.f64 z (fma.f64 y (neg.f64 x) 1))","(*.f64 x (-.f64 1 (*.f64 z y)))","(*.f64 x (fma.f64 (neg.f64 y) z 1))"]],"symmetry":[[]],"time":68.009033203125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 x (-.f64 1 (*.f64 y z)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (-.f64 1 (*.f64 y z)))","(*.f64 x (fma.f64 (neg.f64 z) y 1))"]],"time":18.864990234375,"type":"simplify"},{"compiler":[[17,11]],"time":0.350830078125,"type":"eval"},{"alts":[["(*.f64 x (fma.f64 (neg.f64 z) y 1))","next",4.87109375]],"compiler":[[10,7],[10,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[4.87109375],"time":0.844970703125,"type":"prune"},{"compiler":[[21,10]],"locations":[["(*.f64 x (fma.f64 (neg.f64 z) y 1))",4.5488531168653115,true]],"time":5.029052734375,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 x (fma.f64 (neg.f64 z) y 1))","y","-inf",0.717041015625],["(*.f64 x (fma.f64 (neg.f64 z) y 1))","y","inf",0.3740234375],["(*.f64 x (fma.f64 (neg.f64 z) y 1))","y","0",0.31494140625],["(*.f64 x (fma.f64 (neg.f64 z) y 1))","z","-inf",0.31591796875],["(*.f64 x (fma.f64 (neg.f64 z) y 1))","z","inf",0.402099609375],["(*.f64 x (fma.f64 (neg.f64 z) y 1))","z","0",0.531005859375],["(*.f64 x (fma.f64 (neg.f64 z) y 1))","x","-inf",0.340087890625],["(*.f64 x (fma.f64 (neg.f64 z) y 1))","x","inf",0.43701171875],["(*.f64 x (fma.f64 (neg.f64 z) y 1))","x","0",0.676025390625]],"time":4.22607421875,"type":"series"},{"count":[[1,44]],"inputs":[["(*.f64 x (fma.f64 (neg.f64 z) y 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 z y) x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (*.f64 (*.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (neg.f64 (*.f64 (*.f64 z y) x)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (neg.f64 (*.f64 (*.f64 z y) x)) -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (neg.f64 (*.f64 z y)) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (neg.f64 (*.f64 z y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 x (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 (*.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 (*.f64 z y) x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 (*.f64 z y) -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (neg.f64 (*.f64 z y)) x)) (pow.f64 (fma.f64 x (neg.f64 (*.f64 z y)) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (neg.f64 (*.f64 z y)) x) 2/3) (cbrt.f64 (fma.f64 x (neg.f64 (*.f64 z y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (fma.f64 (neg.f64 z) y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (neg.f64 z) y 1)) (*.f64 (pow.f64 (fma.f64 (neg.f64 z) y 1) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 z) y 1) 2/3) x) (cbrt.f64 (fma.f64 (neg.f64 z) y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (fma.f64 (neg.f64 z) y 1)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 (neg.f64 z) y 1) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (fma.f64 (neg.f64 z) y 1))) (pow.f64 (fma.f64 (neg.f64 z) y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (fma.f64 (neg.f64 z) y 1) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (neg.f64 z) y 1) 2/3) (*.f64 x (cbrt.f64 (fma.f64 (neg.f64 z) y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 (*.f64 z y) -1) x)) (neg.f64 (pow.f64 (fma.f64 x (neg.f64 (*.f64 z y)) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 (neg.f64 z) y 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 z) y 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 (*.f64 z y) -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (*.f64 z y) -1) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x (neg.f64 (*.f64 z y)) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 z y) 3))) (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (*.f64 z y) 2) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (neg.f64 (*.f64 z y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (neg.f64 (*.f64 z y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 z y) -1) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 z y) 3)))) (+.f64 (neg.f64 (pow.f64 (*.f64 z y) 2)) (fma.f64 y (neg.f64 z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 z y) 3))) (+.f64 1 (+.f64 (pow.f64 (*.f64 z y) 2) (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (neg.f64 (*.f64 z y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (neg.f64 (*.f64 z y)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (neg.f64 (*.f64 z y)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (neg.f64 (*.f64 z y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 (*.f64 z y) -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (neg.f64 x) (*.f64 x (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (neg.f64 x) (*.f64 (*.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 x (*.f64 z y)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 (*.f64 z y) x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (neg.f64 (*.f64 z y)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 (*.f64 z y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 z y)) x x)))))"]],"rules":[["egg-rr",44]],"time":37.23486328125,"type":"rewrite"},{"count":[[80,50]],"inputs":[["(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","x","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","x","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","x","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(neg.f64 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(neg.f64 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","x","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(neg.f64 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(neg.f64 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)"]],"time":111.900146484375,"type":"simplify"},{"compiler":[[540,216]],"time":6.0849609375,"type":"eval"},{"alts":[["(fma.f64 (neg.f64 y) (*.f64 z x) x)","next",5.374741038001584],["(*.f64 x (fma.f64 (neg.f64 z) y 1))","done",4.87109375],["(pow.f64 (cbrt.f64 (fma.f64 x (neg.f64 (*.f64 z y)) x)) 3)","fresh",5.434780322358586],["(/.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 z y) 3))) (+.f64 1 (+.f64 (pow.f64 (*.f64 z y) 2) (*.f64 z y))))","fresh",18.064785009768443]],"compiler":[[10,6],[10,7],[13,9],[24,15],[10,6],[13,9],[24,15]],"count":[[51,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[50,3],"picked":[1,1]}],"min-error":[0.02734375],"time":9.56494140625,"type":"prune"},{"compiler":[[18,6]],"locations":[["(fma.f64 (neg.f64 y) (*.f64 z x) x)",5.215446071291823,true]],"time":4.27197265625,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 (neg.f64 y) (*.f64 z x) x)","x","-inf",0.55517578125],["(fma.f64 (neg.f64 y) (*.f64 z x) x)","x","inf",0.5810546875],["(fma.f64 (neg.f64 y) (*.f64 z x) x)","x","0",0.450927734375],["(fma.f64 (neg.f64 y) (*.f64 z x) x)","z","-inf",0.330078125],["(fma.f64 (neg.f64 y) (*.f64 z x) x)","z","inf",0.340087890625],["(fma.f64 (neg.f64 y) (*.f64 z x) x)","z","0",0.282958984375],["(fma.f64 (neg.f64 y) (*.f64 z x) x)","y","-inf",0.25],["(fma.f64 (neg.f64 y) (*.f64 z x) x)","y","inf",0.221923828125],["(fma.f64 (neg.f64 y) (*.f64 z x) x)","y","0",0.365966796875]],"time":3.507080078125,"type":"series"},{"count":[[1,43]],"inputs":[["(fma.f64 (neg.f64 y) (*.f64 z x) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 y (*.f64 z x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (*.f64 y (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 y) (*.f64 z x) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (neg.f64 y) (*.f64 z x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 y (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (-.f64 (*.f64 y (*.f64 z x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 y (*.f64 z x))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 y (*.f64 z x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (-.f64 1 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (*.f64 y z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (neg.f64 y) (*.f64 z x) x)) (pow.f64 (fma.f64 (neg.f64 y) (*.f64 z x) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (neg.f64 y) (*.f64 z x) x) 2/3) (cbrt.f64 (fma.f64 (neg.f64 y) (*.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 z x)) 2)) (*.f64 (cbrt.f64 x) (cbrt.f64 (neg.f64 (*.f64 y (*.f64 z x))))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (neg.f64 (*.f64 y (*.f64 z x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 z x)) 2)) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 z x)))) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 z x)))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (+.f64 (pow.f64 (cbrt.f64 (*.f64 y (*.f64 z x))) 2) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (*.f64 z x)))))) (-.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (*.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 y (*.f64 z x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 y (*.f64 z x)) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (neg.f64 y) (*.f64 z x) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 y (*.f64 z x)) x)) (neg.f64 (pow.f64 (fma.f64 (neg.f64 y) (*.f64 z x) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (neg.f64 y) (*.f64 z x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 y) (*.f64 z x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y (*.f64 z x)) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 y) (*.f64 z x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (neg.f64 y) (*.f64 z x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 y) (*.f64 z x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 y) (*.f64 z x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 y (*.f64 z x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (neg.f64 y) (*.f64 z x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (*.f64 z x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (neg.f64 (*.f64 y (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (neg.f64 (*.f64 y (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 y)) (*.f64 (pow.f64 y 2/3) (*.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 z x)))) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 z x)) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 y z)) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 y x)) z x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z x) (neg.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 z x))) (pow.f64 (*.f64 z x) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (*.f64 y (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 y (*.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (*.f64 y (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (*.f64 y (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 y (*.f64 z x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 y (*.f64 z x))) 1 x)))))"]],"rules":[["egg-rr",43]],"time":36.33203125,"type":"rewrite"},{"count":[[79,49]],"inputs":[["x","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","x","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 y z) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 y z) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 y z) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 y z) 1) x))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(neg.f64 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(neg.f64 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","x","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(neg.f64 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(neg.f64 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 y z) 1) x))","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 y z) 1) x))","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 y z) 1) x))","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 y z) 1) x))","(fma.f64 (neg.f64 y) (*.f64 z x) x)"]],"time":126.39501953125,"type":"simplify"},{"compiler":[[543,155]],"time":6.4619140625,"type":"eval"},{"alts":[["(fma.f64 (neg.f64 y) (*.f64 z x) x)","done",5.374741038001584],["(*.f64 x (fma.f64 (neg.f64 z) y 1))","done",4.87109375],["(fma.f64 (neg.f64 (*.f64 y x)) z x)","next",4.819486366073208],["(fma.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 z x)))) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 z x)) 2)) x)","fresh",17.908279766847926],["(/.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 z y) 3))) (+.f64 1 (+.f64 (pow.f64 (*.f64 z y) 2) (*.f64 z y))))","fresh",18.064785009768443]],"compiler":[[10,6],[10,7],[10,6],[20,11],[24,15],[10,6],[20,11],[24,15]],"count":[[53,5]],"kept":[{"done":[1,1],"fresh":[2,1],"new":[49,2],"picked":[1,1]}],"min-error":[0.0078125],"time":11.2861328125,"type":"prune"},{"compiler":[[20,6]],"locations":[["(fma.f64 (neg.f64 (*.f64 y x)) z x)",4.686012805847176,true]],"time":4.740966796875,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 (neg.f64 (*.f64 y x)) z x)","z","-inf",0.305908203125],["(fma.f64 (neg.f64 (*.f64 y x)) z x)","z","inf",0.22705078125],["(fma.f64 (neg.f64 (*.f64 y x)) z x)","z","0",0.2978515625],["(fma.f64 (neg.f64 (*.f64 y x)) z x)","x","-inf",0.444091796875],["(fma.f64 (neg.f64 (*.f64 y x)) z x)","x","inf",0.44091796875],["(fma.f64 (neg.f64 (*.f64 y x)) z x)","x","0",1.10107421875],["(fma.f64 (neg.f64 (*.f64 y x)) z x)","y","-inf",0.331787109375],["(fma.f64 (neg.f64 (*.f64 y x)) z x)","y","inf",0.29296875],["(fma.f64 (neg.f64 (*.f64 y x)) z x)","y","0",0.39990234375]],"time":3.967041015625,"type":"series"},{"count":[[1,40]],"inputs":[["(fma.f64 (neg.f64 (*.f64 y x)) z x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 y (*.f64 x z))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (*.f64 y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (neg.f64 (*.f64 y x)) z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 (*.f64 y x)) z x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (-.f64 (*.f64 y (*.f64 x z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 y (*.f64 x z))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 y (*.f64 x z)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 y x)) z x)) (pow.f64 (fma.f64 (neg.f64 (*.f64 y x)) z x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 y x)) z x) 2/3) (cbrt.f64 (fma.f64 (neg.f64 (*.f64 y x)) z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2)) (*.f64 (cbrt.f64 x) (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2)) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (+.f64 (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x z))) 2) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (*.f64 x z)))))) (-.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (*.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 y (*.f64 x z)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 y (*.f64 x z)) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (neg.f64 (*.f64 y x)) z x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (neg.f64 (*.f64 y x)) z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 (*.f64 y x)) z x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y (*.f64 x z)) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 (*.f64 y x)) z x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 y x)) z x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (*.f64 y x)) z x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 (*.f64 y x)) z x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 y (*.f64 x z)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (neg.f64 (*.f64 y x)) z x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 y x)) z x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 (*.f64 y x)) (cbrt.f64 z)) (pow.f64 z 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (neg.f64 (*.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (*.f64 x z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (neg.f64 (*.f64 x z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 y x))) (*.f64 (pow.f64 (*.f64 y x) 2/3) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (neg.f64 (*.f64 y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (neg.f64 (*.f64 y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 y (*.f64 x z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (*.f64 y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 y (*.f64 x z))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (*.f64 y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (*.f64 y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 y (*.f64 x z))) 1 x)))))"]],"rules":[["egg-rr",40]],"time":42.23486328125,"type":"rewrite"},{"count":[[76,47]],"inputs":[["x","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 y z) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 y z) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 y z) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 y z) 1) x))","x","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(neg.f64 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(neg.f64 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 (*.f64 y z))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 y z) 1) x))","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 y z) 1) x))","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 y z) 1) x))","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 y z) 1) x))","(fma.f64 (neg.f64 y) (*.f64 z x) x)","x","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(neg.f64 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 -1 (*.f64 y (*.f64 z x)))","(neg.f64 (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 z x))) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)"]],"time":126.801025390625,"type":"simplify"},{"compiler":[[517,148]],"time":6.68505859375,"type":"eval"},{"alts":[["(fma.f64 (neg.f64 y) (*.f64 z x) x)","done",5.374741038001584],["(*.f64 x (fma.f64 (neg.f64 z) y 1))","done",4.87109375],["(fma.f64 (neg.f64 (*.f64 y x)) z x)","done",4.819486366073208],["(fma.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2)) x)","next",17.908279766847926],["(/.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 z y) 3))) (+.f64 1 (+.f64 (pow.f64 (*.f64 z y) 2) (*.f64 z y))))","fresh",18.064785009768443]],"compiler":[[10,6],[10,7],[10,6],[20,11],[24,15],[20,11],[24,15]],"count":[[52,5]],"kept":[{"done":[2,2],"fresh":[2,1],"new":[47,1],"picked":[1,1]}],"min-error":[0.0078125],"time":9.765869140625,"type":"prune"},{"compiler":[[60,17]],"locations":[["(pow.f64 (*.f64 y (*.f64 x z)) 2)",0.26953125,true],["(*.f64 y (*.f64 x z))",6.653686149411013,true],["(cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))",9.378153268441409,true],["(cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2))",29.408277042196303,true]],"time":12.4931640625,"type":"localize"},{"count":[[4,72]],"series":[["(pow.f64 (*.f64 y (*.f64 x z)) 2)","z","-inf",0.35791015625],["(pow.f64 (*.f64 y (*.f64 x z)) 2)","z","inf",0.284912109375],["(pow.f64 (*.f64 y (*.f64 x z)) 2)","z","0",0.2919921875],["(pow.f64 (*.f64 y (*.f64 x z)) 2)","x","-inf",1.910888671875],["(pow.f64 (*.f64 y (*.f64 x z)) 2)","x","inf",0.342041015625],["(pow.f64 (*.f64 y (*.f64 x z)) 2)","x","0",0.342041015625],["(pow.f64 (*.f64 y (*.f64 x z)) 2)","y","-inf",0.464111328125],["(pow.f64 (*.f64 y (*.f64 x z)) 2)","y","inf",0.3779296875],["(pow.f64 (*.f64 y (*.f64 x z)) 2)","y","0",0.375],["(*.f64 y (*.f64 x z))","z","-inf",0.344970703125],["(*.f64 y (*.f64 x z))","z","inf",0.37890625],["(*.f64 y (*.f64 x z))","z","0",0.37109375],["(*.f64 y (*.f64 x z))","x","-inf",0.31787109375],["(*.f64 y (*.f64 x z))","x","inf",0.552001953125],["(*.f64 y (*.f64 x z))","x","0",0.31298828125],["(*.f64 y (*.f64 x z))","y","-inf",0.3369140625],["(*.f64 y (*.f64 x z))","y","inf",0.3798828125],["(*.f64 y (*.f64 x z))","y","0",0.403076171875],["(cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))","z","-inf",0.234130859375],["(cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))","z","inf",0.3818359375],["(cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))","z","0",0.35107421875],["(cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))","x","-inf",0.218994140625],["(cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))","x","inf",0.366943359375],["(cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))","x","0",0.39501953125],["(cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))","y","-inf",0.218017578125],["(cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))","y","inf",0.35302734375],["(cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))","y","0",0.429931640625],["(cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2))","z","-inf",0.31103515625],["(cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2))","z","inf",0.367919921875],["(cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2))","z","0",0.35107421875],["(cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2))","x","-inf",0.31298828125],["(cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2))","x","inf",0.39990234375],["(cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2))","x","0",0.35498046875],["(cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2))","y","-inf",0.31494140625],["(cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2))","y","inf",0.3720703125],["(cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2))","y","0",0.635009765625]],"time":15.08984375,"type":"series"},{"count":[[4,210]],"inputs":[["(cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2))","(cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))","(*.f64 y (*.f64 x z))","(pow.f64 (*.f64 y (*.f64 x z)) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3) (*.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3) 0) (pow.f64 (*.f64 y (*.f64 x z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3) (*.f64 0 (pow.f64 (*.f64 y (*.f64 x z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (*.f64 y (*.f64 x z)) 2/3)) (pow.f64 (*.f64 y (*.f64 x z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (*.f64 x z))) (cbrt.f64 (*.f64 y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))) (pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 4/3)) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3)) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))) 5) (cbrt.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x z) 2/3) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 y x) 2)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (pow.f64 (*.f64 x z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y (*.f64 x z)) (*.f64 y x))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x z)) (cbrt.f64 (*.f64 (*.f64 y (*.f64 x z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 4/3)) (pow.f64 (*.f64 y (*.f64 x z)) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 (*.f64 y (*.f64 x z)) (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x z)))) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x z))) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y (*.f64 x z)) y)) (cbrt.f64 (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y (*.f64 x z)) (*.f64 x z))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y x)) (cbrt.f64 (*.f64 z (*.f64 y (*.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 y (*.f64 x z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (*.f64 y (*.f64 x z))) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (*.f64 x z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (*.f64 x z)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) (*.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) 0) (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) (*.f64 0 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))) (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (*.f64 y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 (neg.f64 (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 x z))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 y x))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 y z))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 y)) (cbrt.f64 (*.f64 (pow.f64 y 2/3) (neg.f64 (*.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 y x))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 y)) (cbrt.f64 (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3)) (cbrt.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x z)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x z))))) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x z)))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y x)) (neg.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 x z)))) (cbrt.f64 (pow.f64 (*.f64 x z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x z)))) (cbrt.f64 (neg.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))))) (cbrt.f64 (pow.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y x)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (*.f64 y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (*.f64 x z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (*.f64 y (*.f64 x z))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (*.f64 y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 x z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y (*.f64 x z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x z)) (*.f64 (pow.f64 (*.f64 x z) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (*.f64 x z))) (pow.f64 (*.f64 y (*.f64 x z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3) (cbrt.f64 (*.f64 y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y x) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (*.f64 x z))) (pow.f64 (*.f64 x z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x z) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x z) 2/3) y) (cbrt.f64 (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (*.f64 (*.f64 y x) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 x z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x z) 2/3) (*.f64 y (cbrt.f64 (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 x z)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3) (*.f64 0 (cbrt.f64 (*.f64 y (*.f64 x z)))))) (+.f64 0 (cbrt.f64 (*.f64 y (*.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3) (+.f64 0 (*.f64 (cbrt.f64 (*.f64 y (*.f64 x z))) 0))) (-.f64 (cbrt.f64 (*.f64 y (*.f64 x z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (*.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 y (*.f64 x z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (*.f64 y (*.f64 x z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (*.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (*.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (*.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (*.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x z)) (*.f64 (pow.f64 (*.f64 x z) 2/3) y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) z 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x z) y 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3) (cbrt.f64 (*.f64 y (*.f64 x z))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) x 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 x z) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 x z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (*.f64 x z))) (pow.f64 (*.f64 y (*.f64 x z)) 2/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (*.f64 x z))) (pow.f64 (*.f64 x z) 2/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 y (*.f64 x z))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x z) (cbrt.f64 y)) (pow.f64 y 2/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y x) (cbrt.f64 z)) (pow.f64 z 2/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 y z) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 y x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (*.f64 x z)) 1 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (*.f64 x z)) 0)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (*.f64 y (*.f64 x z))) 0) (pow.f64 (*.f64 y (*.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2) (*.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2) 0) (pow.f64 (*.f64 y (*.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (neg.f64 (*.f64 y (*.f64 x z)))) (pow.f64 (*.f64 y (*.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2) (*.f64 0 (pow.f64 (*.f64 y (*.f64 x z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (*.f64 y (*.f64 x z)) 2)) (pow.f64 (*.f64 y (*.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (*.f64 y (*.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 x z))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 x z)))) (*.f64 (pow.f64 (*.f64 x z) 2/3) (pow.f64 (*.f64 x z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (*.f64 y z)) (neg.f64 (*.f64 y z))) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (*.f64 y x)) (neg.f64 (*.f64 y x))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 y x) (cbrt.f64 z)) (*.f64 (*.f64 y x) (cbrt.f64 z))) (*.f64 (pow.f64 z 2/3) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 x z) (cbrt.f64 y)) (*.f64 (*.f64 x z) (cbrt.f64 y))) (*.f64 (pow.f64 y 2/3) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y (cbrt.f64 (*.f64 x z))) (*.f64 y (cbrt.f64 (*.f64 x z)))) (*.f64 (pow.f64 (*.f64 x z) 2/3) (pow.f64 (*.f64 x z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (*.f64 (*.f64 y z) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y x) 2) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))) 5) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 y (*.f64 x z))) (neg.f64 (*.f64 y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (*.f64 x z)) (*.f64 y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3) (pow.f64 (*.f64 y (*.f64 x z)) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (*.f64 x z)) 4/3) (pow.f64 (*.f64 y (*.f64 x z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y (*.f64 x z)) y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y (*.f64 x z)) (*.f64 x z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y (*.f64 x z)) (*.f64 y x)) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x z) (*.f64 (*.f64 y (*.f64 x z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (*.f64 x z))) (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x z))) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 (*.f64 y (*.f64 x z)) (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) (*.f64 z (*.f64 y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 4/3)) (pow.f64 (*.f64 y (*.f64 x z)) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y y) (pow.f64 (*.f64 x z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x z) 2) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x z))) 5) (cbrt.f64 (*.f64 y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z z) (pow.f64 (*.f64 y x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (*.f64 y (*.f64 x z))) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (*.f64 (*.f64 y (*.f64 x z)) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 4/3)) (pow.f64 (*.f64 y (*.f64 x z)) 4/3)) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y y) (*.f64 (neg.f64 (*.f64 x z)) (neg.f64 (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 (pow.f64 y 2/3) (neg.f64 (*.f64 x z))) (*.f64 (pow.f64 y 2/3) (neg.f64 (*.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 y) (neg.f64 y)) (pow.f64 (*.f64 x z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (*.f64 x z)) (neg.f64 (*.f64 x z))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x z) 2) (*.f64 (neg.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y x) 2) (*.f64 (neg.f64 z) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x z) 2/3) (*.f64 (*.f64 (pow.f64 (*.f64 x z) 2/3) y) (*.f64 (pow.f64 (*.f64 x z) 2/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 (pow.f64 y 2/3) (*.f64 x z)) (*.f64 (pow.f64 y 2/3) (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y z) (*.f64 y z)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (neg.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 y (*.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (*.f64 x z)) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (*.f64 y (*.f64 x z)) 3)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (*.f64 x z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (*.f64 y (*.f64 x z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (*.f64 x z))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (*.f64 x z)) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 y (*.f64 x z)) (neg.f64 (*.f64 y (*.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (*.f64 y (*.f64 x z))) (*.f64 y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (*.f64 x z)) (*.f64 y (*.f64 x z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3) (pow.f64 (*.f64 y (*.f64 x z)) 4/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 y (*.f64 x z))) (neg.f64 (*.f64 y (*.f64 x z))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y (*.f64 x z)) y) (*.f64 x z) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (*.f64 x z))) (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x z))) 5) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 y (*.f64 x z)) 4/3) (pow.f64 (*.f64 y (*.f64 x z)) 2/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) (pow.f64 (*.f64 x z) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y (*.f64 x z)) (*.f64 x z)) y 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 (*.f64 y (*.f64 x z)) (*.f64 x z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 y x) 2) (*.f64 z z) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 x z) 2) (*.f64 y y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) (*.f64 z (*.f64 y (*.f64 x z))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y (*.f64 x z)) (*.f64 y x)) z 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x z) (*.f64 (*.f64 y (*.f64 x z)) y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 4/3)) (pow.f64 (*.f64 y (*.f64 x z)) 4/3)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (pow.f64 (*.f64 y (*.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (pow.f64 (*.f64 y (*.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (pow.f64 (*.f64 y (*.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (*.f64 y (*.f64 x z)) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2) 1 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (pow.f64 (*.f64 y (*.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (pow.f64 (*.f64 y (*.f64 x z)) 2))))))"]],"rules":[["egg-rr",87],["egg-rr",55],["egg-rr",32],["egg-rr",36]],"time":42.593017578125,"type":"rewrite"},{"count":[[282,213]],"inputs":[["(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)","(*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))","(pow.f64 (*.f64 y (*.f64 z x)) 2)"]],"time":247.760009765625,"type":"simplify"},{"compiler":[[5881,1850]],"time":48.050048828125,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) (pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))) 6) x)","fresh",5.79915782858346],["(fma.f64 (neg.f64 y) (*.f64 z x) x)","done",5.374741038001584],["(*.f64 x (fma.f64 (neg.f64 z) y 1))","done",4.87109375],["(fma.f64 (neg.f64 (*.f64 y x)) z x)","done",4.819486366073208],["(fma.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2)) x)","done",17.908279766847926],["(/.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 z y) 3))) (+.f64 1 (+.f64 (pow.f64 (*.f64 z y) 2) (*.f64 z y))))","fresh",18.064785009768443]],"compiler":[[22,11],[10,6],[10,7],[10,6],[20,11],[24,15]],"count":[[274,6]],"kept":[{"done":[3,3],"fresh":[1,1],"new":[269,1],"picked":[1,1]}],"min-error":[0.00390625],"time":98.10009765625,"type":"prune"},{"accuracy":[0.1171875],"baseline":[4.819486366073208],"branch":[["x",1.8614887979717358,4],["y",2.1325535380015848,3],["z",1.5739489135927787,4],["(*.f64 x (-.f64 1 (*.f64 y z)))",0.12890625,3],["(-.f64 1 (*.f64 y z))",0.1171875,3],["(*.f64 y z)",0.1171875,3]],"compiler":[[4,3],[4,3],[4,3],[10,7],[8,6],[6,4],[115,53]],"count":[[9,3]],"inputs":[["(fma.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) (pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z))))) 6) x)","(fma.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x z)))) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x z)) 2)) x)","(fma.f64 (neg.f64 (*.f64 y x)) z x)","(fma.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 z x)))) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 z x)) 2)) x)","(fma.f64 (neg.f64 y) (*.f64 z x) x)","(pow.f64 (cbrt.f64 (fma.f64 x (neg.f64 (*.f64 z y)) x)) 3)","(/.f64 (*.f64 x (-.f64 1 (pow.f64 (*.f64 z y) 3))) (+.f64 1 (+.f64 (pow.f64 (*.f64 z y) 2) (*.f64 z y))))","(*.f64 x (fma.f64 (neg.f64 z) y 1))","(*.f64 x (-.f64 1 (*.f64 y z)))"]],"link":["."],"name":["Data.Colour.RGBSpace.HSV:hsv from colour-2.3.3, I"],"oracle":[27.18954149250756],"outputs":[["(fma.f64 (neg.f64 y) (*.f64 z x) x)","(*.f64 x (fma.f64 (neg.f64 z) y 1))","(fma.f64 (neg.f64 y) (*.f64 z x) x)"]],"time":79.806884765625,"times":[["x",16.259033203125],["y",12.426025390625],["z",16.359130859375],["(*.f64 x (-.f64 1 (*.f64 y z)))",12.156005859375],["(-.f64 1 (*.f64 y z))",8.1591796875],["(*.f64 y z)",11.85595703125]],"type":"regimes"},{"bstep":[[3.453991884855819e+104,2.6848688736989976e+108,0.06591796875],[-1.2819519711619774e+253,-7.790253192359044e+245,0.130859375]],"compiler":[[10,8],[6,4]],"method":["left-value","left-value"],"time":0.337890625,"type":"bsearch"},{"compiler":[[36,17]],"inputs":[["(if (<=.f64 (*.f64 y z) -9999999999999999363587069377675917736425707327570073564839440723358156278052707548893386994586947577981035182609405692455150664165314335743772262409420005560181719702721238568128862437403998276353831973920663150777435958293799716241167969694049028276224) (fma.f64 (neg.f64 y) (*.f64 z x) x) (if (<=.f64 (*.f64 y z) 499999999999999969129150412640989270163513682236062239147208106269435745912299856818410263751954127650816) (*.f64 x (fma.f64 (neg.f64 z) y 1)) (fma.f64 (neg.f64 y) (*.f64 z x) x)))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (*.f64 y z) -9999999999999999363587069377675917736425707327570073564839440723358156278052707548893386994586947577981035182609405692455150664165314335743772262409420005560181719702721238568128862437403998276353831973920663150777435958293799716241167969694049028276224) (fma.f64 (neg.f64 y) (*.f64 z x) x) (if (<=.f64 (*.f64 y z) 499999999999999969129150412640989270163513682236062239147208106269435745912299856818410263751954127650816) (*.f64 x (fma.f64 (neg.f64 z) y 1)) (fma.f64 (neg.f64 y) (*.f64 z x) x)))","(if (<=.f64 (*.f64 y z) -9999999999999999363587069377675917736425707327570073564839440723358156278052707548893386994586947577981035182609405692455150664165314335743772262409420005560181719702721238568128862437403998276353831973920663150777435958293799716241167969694049028276224) (fma.f64 (neg.f64 y) (*.f64 z x) x) (if (<=.f64 (*.f64 y z) 499999999999999969129150412640989270163513682236062239147208106269435745912299856818410263751954127650816) (fma.f64 (neg.f64 y) (*.f64 z x) x) (fma.f64 (neg.f64 y) (*.f64 z x) x)))"]],"stop":[["fuel",1]],"time":22.836181640625,"type":"simplify"},{"time":0.0400390625,"type":"soundness"},{"compiler":[[36,17]],"remove-preprocessing":[[]],"time":13.197998046875,"type":"end"}]
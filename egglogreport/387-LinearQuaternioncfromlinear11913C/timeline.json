[{"compiler":[[19,10]],"method":["search"],"sampling":[[12,0.397854136256683,0.600681735132639,0.0014641286106780171],[11,0.3276445827996213,0.6708912885897007,0.0014641286106780171],[10,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[9,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":119.0380859375,"type":"analyze"},{"outcomes":[["body",512,"invalid",23.655517578125,299],["body",256,"invalid",75.8681640625,1692],["body",1024,"invalid",27.78759765625,240],["body",512,"valid",42.68017578125,537],["body",1024,"valid",104.228271484375,909],["body",2048,"valid",77.026123046875,499],["body",256,"valid",286.2041015625,6311]],"time":648.557861328125,"type":"sample"},{"compiler":[[18,9]],"inputs":[["0","1","2"],["(-.f64 (-.f64 (+.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y z)) (*.f64 y y))","(-.f64 (-.f64 (+.f64 (*.f64 y x) (*.f64 x x)) (*.f64 x z)) (*.f64 x x))","(-.f64 (-.f64 (+.f64 (*.f64 z y) (*.f64 y y)) (*.f64 y x)) (*.f64 y y))","(-.f64 (-.f64 (+.f64 (*.f64 x z) (*.f64 z z)) (*.f64 z y)) (*.f64 z z))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(-.f64 (-.f64 (+.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y z)) (*.f64 y y))","(*.f64 y (-.f64 (+.f64 x y) (+.f64 z y)))","(-.f64 (-.f64 (+.f64 (*.f64 y x) (*.f64 x x)) (*.f64 x z)) (*.f64 x x))","(*.f64 x (-.f64 (-.f64 (+.f64 x y) z) x))","(-.f64 (-.f64 (+.f64 (*.f64 z y) (*.f64 y y)) (*.f64 y x)) (*.f64 y y))","(*.f64 y (-.f64 (+.f64 z y) (+.f64 x y)))","(-.f64 (-.f64 (+.f64 (*.f64 x z) (*.f64 z z)) (*.f64 z y)) (*.f64 z z))","(*.f64 z (-.f64 (+.f64 x z) (+.f64 z y)))"]],"symmetry":[[]],"time":76.31103515625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (-.f64 (+.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y z)) (*.f64 y y))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 (+.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y z)) (*.f64 y y))","(*.f64 y (-.f64 (-.f64 (+.f64 x y) z) y))"]],"time":19.696044921875,"type":"simplify"},{"compiler":[[27,13]],"time":0.375,"type":"eval"},{"alts":[["(*.f64 y (-.f64 (-.f64 (+.f64 x y) z) y))","next",18.577349600909546],["(-.f64 (-.f64 (+.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y z)) (*.f64 y y))","fresh",18.75111491369989]],"compiler":[[12,7],[18,9],[12,7],[18,9]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[18.567780525170285],"time":1.2548828125,"type":"prune"},{"compiler":[[30,7]],"locations":[["(-.f64 (-.f64 (+.f64 x y) z) y)",1.836920614667378,true]],"time":4.998046875,"type":"localize"},{"count":[[1,36]],"series":[["(-.f64 (-.f64 (+.f64 x y) z) y)","z","-inf",0.18603515625],["(-.f64 (-.f64 (+.f64 x y) z) y)","z","inf",0.2109375],["(-.f64 (-.f64 (+.f64 x y) z) y)","z","0",0.156005859375],["(-.f64 (-.f64 (+.f64 x y) z) y)","y","-inf",0.177001953125],["(-.f64 (-.f64 (+.f64 x y) z) y)","y","inf",0.156005859375],["(-.f64 (-.f64 (+.f64 x y) z) y)","y","0",0.199951171875],["(-.f64 (-.f64 (+.f64 x y) z) y)","x","-inf",0.18505859375],["(-.f64 (-.f64 (+.f64 x y) z) y)","x","inf",0.291015625],["(-.f64 (-.f64 (+.f64 x y) z) y)","x","0",0.31103515625]],"time":1.969970703125,"type":"series"},{"count":[[1,85]],"inputs":[["(-.f64 (-.f64 (+.f64 x y) z) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 y) y) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (-.f64 (-.f64 y z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (+.f64 x y) (+.f64 z y)) 0) (-.f64 (+.f64 x y) (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (+.f64 x y) (+.f64 z y)) (*.f64 (-.f64 (+.f64 x y) (+.f64 z y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (-.f64 (-.f64 y z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (+.f64 x y) (+.f64 z y))) (-.f64 (+.f64 x y) (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (+.f64 x y) (+.f64 z y)) (*.f64 0 (-.f64 (+.f64 x y) (+.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (+.f64 x y) z) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 y) (-.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x y) (neg.f64 (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (-.f64 y z) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (+.f64 z y)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x y) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 y) (+.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 y z) (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (+.f64 (+.f64 x y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (-.f64 (+.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 0 (-.f64 y (+.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (-.f64 y (+.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x y) (*.f64 (neg.f64 (+.f64 z y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 y (+.f64 x y)) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (-.f64 y (+.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (+.f64 x y) (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (-.f64 x (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (+.f64 z y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (+.f64 (-.f64 x z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 (-.f64 x (+.f64 z y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x y) (+.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (+.f64 z y) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 y) 0) (-.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (-.f64 z (+.f64 x y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 y) (-.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (+.f64 x y) z) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 y) (+.f64 x y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (-.f64 (+.f64 x y) z) 0) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (-.f64 y (+.f64 x y))) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (+.f64 x y) y) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (-.f64 z (+.f64 x y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (+.f64 z y) (+.f64 x y)))) (cbrt.f64 (pow.f64 (-.f64 (+.f64 x y) (+.f64 z y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (-.f64 (+.f64 x y) z) 2)) (+.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (*.f64 (-.f64 (+.f64 x y) z) y)))) (-.f64 (cbrt.f64 (-.f64 (+.f64 x y) z)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (+.f64 x y) (+.f64 z y))) (cbrt.f64 (pow.f64 (-.f64 (+.f64 x y) (+.f64 z y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (+.f64 x y) (+.f64 z y)) 2)) (cbrt.f64 (-.f64 (+.f64 x y) (+.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (+.f64 z y) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (+.f64 x y) (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 x y) (+.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 z y) (+.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (+.f64 z y) (+.f64 x y))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 (+.f64 x y) (+.f64 z y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 x y) (+.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (+.f64 x y) (+.f64 z y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (+.f64 x y) (+.f64 z y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (+.f64 x y) (+.f64 z y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (+.f64 x y) (+.f64 z y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (+.f64 x y) (+.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 z y) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (+.f64 z y) (+.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (+.f64 x y) (+.f64 z y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (+.f64 x y) z)) (cbrt.f64 (pow.f64 (-.f64 (+.f64 x y) z) 2)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (neg.f64 (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (cbrt.f64 (+.f64 x y)) (neg.f64 (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (+.f64 x y)) (neg.f64 (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (+.f64 x y) z) 2)) (cbrt.f64 (-.f64 (+.f64 x y) z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (-.f64 z (+.f64 x y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (-.f64 (-.f64 y z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (-.f64 (-.f64 y z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (-.f64 (-.f64 y z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y y)) (-.f64 x (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 y) (-.f64 x (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 y) (-.f64 x (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 y)) (cbrt.f64 (*.f64 y y)) (-.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (neg.f64 (cbrt.f64 (*.f64 y y))) (-.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (+.f64 x y) (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (+.f64 x y) (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (+.f64 x y) (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (+.f64 x y) z) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x y) (neg.f64 (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x y) 1 (neg.f64 (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (+.f64 x y) z) 1 (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (-.f64 (-.f64 y z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (-.f64 (-.f64 y z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 y (-.f64 x (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1 (-.f64 x (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 y (-.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 y) (-.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (+.f64 x y) (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (+.f64 x y) (+.f64 z y)))))))"]],"rules":[["egg-rr",85]],"time":22.407958984375,"type":"rewrite"},{"count":[[121,90]],"inputs":[["(*.f64 -1 z)","(+.f64 (*.f64 -1 z) x)","(+.f64 (*.f64 -1 z) x)","(+.f64 (*.f64 -1 z) x)","x","(+.f64 (*.f64 -1 z) x)","(+.f64 (*.f64 -1 z) x)","(+.f64 (*.f64 -1 z) x)","x","(+.f64 (*.f64 -1 z) x)","(+.f64 (*.f64 -1 z) x)","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","x","(+.f64 (*.f64 -1 z) x)","(+.f64 (*.f64 -1 z) x)","(+.f64 (*.f64 -1 z) x)","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) x)","(+.f64 (*.f64 -1 z) x)","(+.f64 (*.f64 -1 z) x)","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) x)","(+.f64 (*.f64 -1 z) x)","(+.f64 (*.f64 -1 z) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)","x","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)","x","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","(-.f64 x z)","x","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)","(+.f64 (*.f64 -1 z) x)","(-.f64 x z)"]],"time":139.587158203125,"type":"simplify"},{"compiler":[[1098,326]],"time":10.31591796875,"type":"eval"},{"alts":[["(*.f64 y (-.f64 x z))","next",0.00390625]],"compiler":[[8,5],[8,5]],"count":[[92,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[90,1],"picked":[1,0]}],"min-error":[0.00390625],"time":18.66015625,"type":"prune"},{"compiler":[[14,5]],"locations":[["(*.f64 y (-.f64 x z))",0.00390625,true]],"time":3.02587890625,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 y (-.f64 x z))","z","-inf",0.238037109375],["(*.f64 y (-.f64 x z))","z","inf",0.241943359375],["(*.f64 y (-.f64 x z))","z","0",0.222900390625],["(*.f64 y (-.f64 x z))","x","-inf",0.3388671875],["(*.f64 y (-.f64 x z))","x","inf",0.363037109375],["(*.f64 y (-.f64 x z))","x","0",0.25],["(*.f64 y (-.f64 x z))","y","-inf",0.274169921875],["(*.f64 y (-.f64 x z))","y","inf",0.3330078125],["(*.f64 y (-.f64 x z))","y","0",0.405029296875]],"time":2.763916015625,"type":"series"},{"count":[[1,52]],"inputs":[["(*.f64 y (-.f64 x z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z y)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (*.f64 y x))) (neg.f64 (neg.f64 (neg.f64 (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 y x) -1)) (neg.f64 (*.f64 (neg.f64 (*.f64 z y)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z y)) (neg.f64 (*.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z y)) (neg.f64 (*.f64 y (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 x z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (neg.f64 (*.f64 y x))) (neg.f64 (neg.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (*.f64 (*.f64 y x) -1)) (*.f64 (neg.f64 (*.f64 z y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 z y)) (*.f64 (neg.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 z y)) (*.f64 y (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y x) (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (*.f64 (-.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 (-.f64 z x) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (*.f64 (-.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (*.f64 (-.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (-.f64 x z)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) (pow.f64 (*.f64 y (-.f64 x z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2/3) (cbrt.f64 (*.f64 y (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 x z) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (-.f64 x z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 z x) y)) (neg.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2/3) (*.f64 0 (cbrt.f64 (*.f64 (-.f64 z x) y))))) (cbrt.f64 (*.f64 y (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (-.f64 x z))) (pow.f64 (-.f64 x z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 x z) 2/3) (*.f64 y (cbrt.f64 (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x z)) (*.f64 (pow.f64 (-.f64 x z) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 x z) 2/3) y) (cbrt.f64 (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 z x) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (-.f64 x z)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 z x) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 3 (*.f64 (-.f64 z x) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 2 (*.f64 (-.f64 z x) y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (-.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (-.f64 z x) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (neg.f64 (*.f64 z y)))))))"]],"rules":[["egg-rr",52]],"time":38.18505859375,"type":"rewrite"},{"count":[[76,57]],"inputs":[["(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))"]],"time":75.705078125,"type":"simplify"},{"compiler":[[521,178]],"time":5.659912109375,"type":"eval"},{"alts":[["(fma.f64 y x (neg.f64 (*.f64 z y)))","next",0]],"compiler":[[10,6],[10,6]],"count":[[58,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[57,1],"picked":[1,0]}],"min-error":[0],"time":10.867919921875,"type":"prune"},{"compiler":[[20,6]],"time":4.297119140625,"type":"localize"},{"compiler":[[3,3]],"time":0.093994140625,"type":"eval"},{"alts":[["(fma.f64 y x (neg.f64 (*.f64 z y)))","done",0]],"compiler":[[10,6]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.4599609375,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["z",0,1],["(-.f64 (-.f64 (+.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y z)) (*.f64 y y))",0,1]],"compiler":[[4,3],[4,3],[4,3],[18,9],[39,18]],"count":[[4,1]],"inputs":[["(fma.f64 y x (neg.f64 (*.f64 z y)))","(*.f64 y (-.f64 x z))","(*.f64 y (-.f64 (-.f64 (+.f64 x y) z) y))","(-.f64 (-.f64 (+.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y z)) (*.f64 y y))"]],"link":["."],"name":["Linear.Quaternion:$c/ from linear-1.19.1.3, C"],"oracle":[18.76068398943915],"outputs":[["(fma.f64 y x (neg.f64 (*.f64 z y)))"]],"time":11.985107421875,"times":[["x",2.760986328125],["y",2.7958984375],["z",2.772216796875],["(-.f64 (-.f64 (+.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y z)) (*.f64 y y))",2.77880859375]],"type":"regimes"},{"compiler":[[10,6]],"inputs":[["(fma.f64 y x (neg.f64 (*.f64 z y)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 y x (neg.f64 (*.f64 z y)))","(*.f64 y (-.f64 x z))"]],"stop":[["done",1]],"time":35.02294921875,"type":"simplify"},{"time":0.01708984375,"type":"soundness"},{"compiler":[[10,6]],"remove-preprocessing":[[]],"time":7.885009765625,"type":"end"}]
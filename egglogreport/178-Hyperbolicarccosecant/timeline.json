[{"compiler":[[15,11]],"method":["search"],"sampling":[[12,0.2493898868560791,0.0009760856628417969,0.7496340274810791],[11,0.2489018440246582,0.0019521713256835938,0.7491459846496582],[10,0.2479257583618164,0.0039043426513671875,0.7481698989868164],[9,0.2459735870361328,0.007808685302734375,0.7462177276611328],[8,0.24206924438476563,0.01561737060546875,0.7423133850097656],[7,0.23426055908203125,0.0312347412109375,0.7345046997070313],[6,0.2186431884765625,0.062469482421875,0.7188873291015625],[5,0.187408447265625,0.12493896484375,0.687652587890625],[4,0.12493896484375,0.2498779296875,0.62518310546875],[3,0.0,0.499755859375,0.500244140625],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":2.035888671875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.849365234375,19],["body",256,"valid",435.021728515625,8256]],"time":443.06201171875,"type":"sample"},{"compiler":[[14,10]],"inputs":[["0"],["(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))","(log.f64 (/.f64 (+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x))"]],"symmetry":[[]],"time":54.830078125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))"]],"method":["egg-herbie"],"outputs":[["(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))","(log.f64 (/.f64 (+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x))"]],"time":21.1630859375,"type":"simplify"},{"compiler":[[25,18]],"time":0.44580078125,"type":"eval"},{"alts":[["(log.f64 (/.f64 (+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x))","next",0.00390625]],"compiler":[[12,9],[12,9]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.879150390625,"type":"prune"},{"compiler":[[45,26]],"locations":[["(log.f64 (/.f64 (+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x))",0.00390625,true],["(+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))",0.00390625,true],["(/.f64 (+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x)",0.0078125,true],["(sqrt.f64 (fma.f64 (neg.f64 x) x 1))",0.0078125,true]],"time":11.410888671875,"type":"localize"},{"count":[[4,16]],"series":[["(log.f64 (/.f64 (+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x))","x","-inf",0.60791015625],["(log.f64 (/.f64 (+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x))","x","inf",0.721923828125],["(log.f64 (/.f64 (+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x))","x","0",0.43017578125],["(+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))","x","-inf",0.20703125],["(+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))","x","inf",0.193115234375],["(+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))","x","0",0.18505859375],["(/.f64 (+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x)","x","-inf",0.342041015625],["(/.f64 (+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x)","x","inf",0.4208984375],["(/.f64 (+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x)","x","0",0.263916015625],["(sqrt.f64 (fma.f64 (neg.f64 x) x 1))","x","-inf",0.412841796875],["(sqrt.f64 (fma.f64 (neg.f64 x) x 1))","x","inf",0.554931640625],["(sqrt.f64 (fma.f64 (neg.f64 x) x 1))","x","0",0.399169921875]],"time":4.924072265625,"type":"series"},{"count":[[4,253]],"inputs":[["(sqrt.f64 (fma.f64 (neg.f64 x) x 1))","(/.f64 (+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x)","(+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))","(log.f64 (/.f64 (+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 1/2) (*.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) (*.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 0) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (*.f64 1/2 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) (*.f64 0 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (cbrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (neg.f64 x) x 1)) (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (fma.f64 (neg.f64 x) x 1))) (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (fabs.f64 (cbrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) (pow.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 0) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 x) x 1) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 x) x 1) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 x) x 1) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 x) x 1) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 x) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 x) (*.f64 (/.f64 1 x) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x) 1/2) (*.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x) (*.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x) 0) (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) (/.f64 1 x)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 x) (*.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) (*.f64 1/2 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x) (*.f64 0 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x) (/.f64 0 (/.f64 x (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (/.f64 x (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (/.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 x)) (/.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) (cbrt.f64 (pow.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x) 2)) (cbrt.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (cbrt.f64 x)) (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (pow.f64 (cbrt.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (/.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (/.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 x)) (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (pow.f64 (cbrt.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (pow.f64 (cbrt.f64 x) -2)) (/.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 2)) x) (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) x) (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (pow.f64 (cbrt.f64 x) -2)) (cbrt.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) (/.f64 1 (*.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) x) (/.f64 1 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) x) (cbrt.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (pow.f64 (cbrt.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (cbrt.f64 x)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (neg.f64 x) (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (/.f64 (neg.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (/.f64 (/.f64 x (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (/.f64 x (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (+.f64 -1 (neg.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)))) (*.f64 (neg.f64 x) (neg.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2))) (*.f64 (cbrt.f64 (*.f64 x x)) (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) (+.f64 -1 (neg.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)))) (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) -1) (*.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) (cbrt.f64 (/.f64 1 x))) (*.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (neg.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2))) -1) (*.f64 (neg.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (neg.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2))) 1) (*.f64 (neg.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (neg.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2))) (cbrt.f64 (/.f64 1 x))) (*.f64 (neg.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (neg.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2))) 1) (*.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (/.f64 x (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (neg.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2))) (neg.f64 (*.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (neg.f64 (/.f64 x (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) x) (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (/.f64 x (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) (*.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 x (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 x) (+.f64 -1 (neg.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)))) (neg.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (cbrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 2))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x) 2)) (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x) 2)) (cbrt.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (neg.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2))) (/.f64 1 x)) (neg.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (pow.f64 (cbrt.f64 x) -2))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (cbrt.f64 (pow.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x) 2))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (cbrt.f64 (pow.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x) 2))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (neg.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2))) (/.f64 -1 x)) (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (cbrt.f64 x)) 1) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) x) 1) (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2))) (/.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 2)) x)) (cbrt.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (pow.f64 (cbrt.f64 x) -2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (cbrt.f64 x)) (cbrt.f64 (neg.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (cbrt.f64 (*.f64 x x))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (cbrt.f64 x)) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) x) 1) (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (cbrt.f64 x)) 1) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) (/.f64 (*.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (/.f64 (/.f64 x (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (neg.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2))) (*.f64 (neg.f64 x) (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (neg.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2))) (*.f64 x (neg.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 x (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (*.f64 (/.f64 x (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) (*.f64 (*.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (cbrt.f64 x))) (cbrt.f64 (neg.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) x)) (neg.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 1/2 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 1/2) (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 0) (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (*.f64 1/2 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (*.f64 0 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 -1) (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) (/.f64 1 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 2)) (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (neg.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (*.f64 -1 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) -1) (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) 1) (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (neg.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2))) (/.f64 1 (neg.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (cbrt.f64 (fma.f64 (neg.f64 x) x 1)) (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (+.f64 1 (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (fma.f64 (neg.f64 x) x 1)) (-.f64 1 (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (+.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 0) (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (neg.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2))) (neg.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (+.f64 -1 (neg.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)))) (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 2)) (cbrt.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)))) (cbrt.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (neg.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2))) 1) (neg.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 9)) (/.f64 1 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (-.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3)) (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2))) (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 2))) (cbrt.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) (cbrt.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (pow.f64 (cbrt.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (/.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 -1 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 1 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (/.f64 -1 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (/.f64 1 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (neg.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2))) 1) (*.f64 (neg.f64 (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 9)) 1) (*.f64 (-.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3)) (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) (-.f64 (+.f64 2 (neg.f64 (*.f64 x x))) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 0) (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 1/2 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (cbrt.f64 (fma.f64 (neg.f64 x) x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (neg.f64 x) x 1)) (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 1 1)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) 1/2) (*.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) (*.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) 0) (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x))) (*.f64 1/2 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) (*.f64 0 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x))) (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x))) (cbrt.f64 (pow.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) 2)) (cbrt.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 (/.f64 x (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x))))))"]],"rules":[["egg-rr",22],["egg-rr",90],["egg-rr",100],["egg-rr",41]],"time":46.115966796875,"type":"rewrite"},{"count":[[269,282]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1/8 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/16 (pow.f64 x 6)) (*.f64 -1/8 (pow.f64 x 4)))))","(/.f64 2 x)","(+.f64 (*.f64 -1/2 x) (*.f64 2 (/.f64 1 x)))","(+.f64 (*.f64 -1/8 (pow.f64 x 3)) (+.f64 (*.f64 -1/2 x) (*.f64 2 (/.f64 1 x))))","(+.f64 (*.f64 -1/8 (pow.f64 x 3)) (+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 -1/16 (pow.f64 x 5)))))","2","(+.f64 2 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 2 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1/8 (pow.f64 x 4))))","(+.f64 2 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/16 (pow.f64 x 6)) (*.f64 -1/8 (pow.f64 x 4)))))","(+.f64 (log.f64 2) (*.f64 -1 (log.f64 x)))","(+.f64 (log.f64 2) (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (*.f64 -1 (log.f64 x))))","(+.f64 (log.f64 2) (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (+.f64 (*.f64 -3/32 (pow.f64 x 4)) (*.f64 -1 (log.f64 x)))))","(+.f64 (*.f64 -5/96 (pow.f64 x 6)) (+.f64 (log.f64 2) (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (+.f64 (*.f64 -3/32 (pow.f64 x 4)) (*.f64 -1 (log.f64 x))))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(fma.f64 (*.f64 x x) -1/2 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1/8 (pow.f64 x 4))))","(+.f64 1 (fma.f64 -1/8 (pow.f64 x 4) (*.f64 -1/2 (*.f64 x x))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/16 (pow.f64 x 6)) (*.f64 -1/8 (pow.f64 x 4)))))","(+.f64 (fma.f64 (*.f64 x x) -1/2 1) (fma.f64 -1/16 (pow.f64 x 6) (*.f64 -1/8 (pow.f64 x 4))))","(/.f64 2 x)","(+.f64 (*.f64 -1/2 x) (*.f64 2 (/.f64 1 x)))","(fma.f64 -1/2 x (/.f64 2 x))","(+.f64 (*.f64 -1/8 (pow.f64 x 3)) (+.f64 (*.f64 -1/2 x) (*.f64 2 (/.f64 1 x))))","(fma.f64 -1/8 (pow.f64 x 3) (fma.f64 -1/2 x (/.f64 2 x)))","(+.f64 (*.f64 -1/8 (pow.f64 x 3)) (+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 -1/16 (pow.f64 x 5)))))","(fma.f64 -1/8 (pow.f64 x 3) (fma.f64 -1/2 x (fma.f64 (pow.f64 x 5) -1/16 (/.f64 2 x))))","2","(+.f64 2 (*.f64 -1/2 (pow.f64 x 2)))","(fma.f64 (*.f64 x x) -1/2 2)","(+.f64 2 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1/8 (pow.f64 x 4))))","(+.f64 2 (fma.f64 -1/8 (pow.f64 x 4) (*.f64 -1/2 (*.f64 x x))))","(+.f64 2 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/16 (pow.f64 x 6)) (*.f64 -1/8 (pow.f64 x 4)))))","(+.f64 (fma.f64 (*.f64 x x) -1/2 2) (fma.f64 -1/16 (pow.f64 x 6) (*.f64 -1/8 (pow.f64 x 4))))","(+.f64 (log.f64 2) (*.f64 -1 (log.f64 x)))","(-.f64 (log.f64 2) (log.f64 x))","(+.f64 (log.f64 2) (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (*.f64 -1 (log.f64 x))))","(-.f64 (+.f64 (log.f64 2) (*.f64 -1/4 (*.f64 x x))) (log.f64 x))","(+.f64 (log.f64 2) (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (+.f64 (*.f64 -3/32 (pow.f64 x 4)) (*.f64 -1 (log.f64 x)))))","(+.f64 (log.f64 2) (fma.f64 (*.f64 x x) -1/4 (fma.f64 -3/32 (pow.f64 x 4) (neg.f64 (log.f64 x)))))","(+.f64 (*.f64 -5/96 (pow.f64 x 6)) (+.f64 (log.f64 2) (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (+.f64 (*.f64 -3/32 (pow.f64 x 4)) (*.f64 -1 (log.f64 x))))))","(+.f64 (fma.f64 -5/96 (pow.f64 x 6) (log.f64 2)) (fma.f64 (*.f64 x x) -1/4 (fma.f64 -3/32 (pow.f64 x 4) (neg.f64 (log.f64 x)))))"]],"time":58.85693359375,"type":"simplify"},{"compiler":[[5496,3684]],"time":71.672119140625,"type":"eval"},{"alts":[["(neg.f64 (log.f64 (/.f64 x (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))","next",0]],"compiler":[[13,10],[13,10]],"count":[[283,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[282,1],"picked":[1,0]}],"min-error":[0],"time":147.125,"type":"prune"},{"compiler":[[64,38]],"locations":[["(log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))",0.00390625,true],["(sqrt.f64 (fma.f64 (neg.f64 x) x 1))",0.0078125,false],["(exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))",0.0078125,true]],"time":22.2099609375,"type":"localize"},{"count":[[2,8]],"series":[["(log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))","x","-inf",0.260009765625],["(log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))","x","inf",0.239013671875],["(log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))","x","0",0.197998046875],["(exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))","x","-inf",0.467041015625],["(exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))","x","inf",0.650146484375],["(exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))","x","0",0.364013671875]],"time":2.301025390625,"type":"series"},{"count":[[2,88]],"inputs":[["(exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))","(log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 1/2) (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 0) (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (*.f64 0 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (*.f64 1/2 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 1/2 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (*.f64 -1 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) -1) (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) (/.f64 1 (-.f64 (+.f64 1 (fma.f64 (neg.f64 x) x 1)) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (cbrt.f64 (fma.f64 (neg.f64 x) x 1)) (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (+.f64 1 (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (fma.f64 (neg.f64 x) x 1)) (-.f64 1 (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (+.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 0) (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 2/3) (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) (-.f64 (+.f64 1 (fma.f64 (neg.f64 x) x 1)) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) 1) (-.f64 (+.f64 1 (fma.f64 (neg.f64 x) x 1)) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) (+.f64 (fma.f64 (neg.f64 x) x 1) (-.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2)) 1) (*.f64 (-.f64 (+.f64 1 (fma.f64 (neg.f64 x) x 1)) (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1 (pow.f64 (fma.f64 (neg.f64 x) x 1) 3/2))) (neg.f64 (-.f64 (+.f64 1 (fma.f64 (neg.f64 x) x 1)) (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 0) (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 2/3)) (cbrt.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (neg.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) (pow.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 1/2 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (neg.f64 x) x 1)) (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)) 1 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (cbrt.f64 (fma.f64 (neg.f64 x) x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 1)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (*.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 1/2) (*.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 0) (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) (*.f64 0 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (*.f64 1/2 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (log.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) (pow.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 2/3) (cbrt.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))"]],"rules":[["egg-rr",23],["egg-rr",65]],"time":27.3330078125,"type":"rewrite"},{"count":[[96,102]],"inputs":[["2","(+.f64 2 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 2 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1/8 (pow.f64 x 4))))","(+.f64 2 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/16 (pow.f64 x 6)) (*.f64 -1/8 (pow.f64 x 4)))))","(log.f64 2)","(+.f64 (log.f64 2) (*.f64 -1/4 (pow.f64 x 2)))","(+.f64 (log.f64 2) (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (*.f64 -3/32 (pow.f64 x 4))))","(+.f64 (*.f64 -5/96 (pow.f64 x 6)) (+.f64 (log.f64 2) (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (*.f64 -3/32 (pow.f64 x 4)))))"]],"method":["egg-herbie"],"outputs":[["2","(+.f64 2 (*.f64 -1/2 (pow.f64 x 2)))","(fma.f64 (*.f64 x x) -1/2 2)","(+.f64 2 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1/8 (pow.f64 x 4))))","(+.f64 2 (fma.f64 (pow.f64 x 4) -1/8 (*.f64 (*.f64 -1/2 x) x)))","(+.f64 2 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/16 (pow.f64 x 6)) (*.f64 -1/8 (pow.f64 x 4)))))","(+.f64 (fma.f64 (*.f64 x x) -1/2 2) (fma.f64 -1/16 (pow.f64 x 6) (*.f64 -1/8 (pow.f64 x 4))))","(log.f64 2)","(+.f64 (log.f64 2) (*.f64 -1/4 (pow.f64 x 2)))","(fma.f64 -1/4 (*.f64 x x) (log.f64 2))","(+.f64 (log.f64 2) (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (*.f64 -3/32 (pow.f64 x 4))))","(+.f64 (log.f64 2) (fma.f64 (pow.f64 x 4) -3/32 (*.f64 (*.f64 -1/4 x) x)))","(+.f64 (*.f64 -5/96 (pow.f64 x 6)) (+.f64 (log.f64 2) (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (*.f64 -3/32 (pow.f64 x 4)))))","(+.f64 (fma.f64 (pow.f64 x 6) -5/96 (log.f64 2)) (fma.f64 (pow.f64 x 4) -3/32 (*.f64 (*.f64 -1/4 x) x)))"]],"time":50.406982421875,"type":"simplify"},{"compiler":[[2709,1932]],"time":37.39111328125,"type":"eval"},{"alts":[["(neg.f64 (log.f64 (/.f64 x (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))","done",0]],"compiler":[[13,10]],"count":[[151,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[150,0],"picked":[1,1]}],"min-error":[0],"time":47.367919921875,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))",0,1],["(+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))",0,1]],"compiler":[[2,1],[14,10],[13,9],[37,26]],"count":[[3,1]],"inputs":[["(neg.f64 (log.f64 (/.f64 x (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))","(log.f64 (/.f64 (+.f64 1 (sqrt.f64 (fma.f64 (neg.f64 x) x 1))) x))","(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))"]],"link":["."],"name":["Hyperbolic arc-(co)secant"],"oracle":[0.00390625],"outputs":[["(neg.f64 (log.f64 (/.f64 x (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))"]],"time":9.093017578125,"times":[["x",2.457763671875],["(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))",2.845947265625],["(+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))",2.7978515625]],"type":"regimes"},{"compiler":[[13,10]],"inputs":[["(neg.f64 (log.f64 (/.f64 x (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))"]],"method":["egg-herbie"],"outputs":[["(neg.f64 (log.f64 (/.f64 x (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))))))","(log.f64 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (neg.f64 x) x 1)))) x))"]],"stop":[["done",1]],"time":19.181884765625,"type":"simplify"},{"time":0.01611328125,"type":"soundness"},{"compiler":[[13,10]],"remove-preprocessing":[[]],"time":12.0888671875,"type":"end"}]
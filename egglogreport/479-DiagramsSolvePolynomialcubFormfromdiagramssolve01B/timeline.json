[{"compiler":[[11,8]],"method":["search"],"sampling":[[12,0.5031684664422755,0.41345625924714113,0.08337527431058334],[11,0.44466050522805745,0.499267935694661,0.05607155907728156],[10,0.37445095177099574,0.5694774891517227,0.05607155907728156],[9,0.2496339678473305,0.702095534570617,0.048270497582052485],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":77.994873046875,"type":"analyze"},{"outcomes":[["body",256,"invalid",15.633544921875,382],["body",256,"valid",305.29052734375,8256]],"time":329.3681640625,"type":"sample"},{"compiler":[[10,7]],"inputs":[["0","1","2"],["(-.f64 (*.f64 (*.f64 x 3) y) z)","(-.f64 (*.f64 (*.f64 y 3) x) z)","(-.f64 (*.f64 (*.f64 z 3) y) x)","(-.f64 (*.f64 (*.f64 x 3) z) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(-.f64 (*.f64 (*.f64 x 3) y) z)","(fma.f64 (*.f64 x y) 3 (neg.f64 z))","(-.f64 (*.f64 (*.f64 y 3) x) z)","(fma.f64 (*.f64 x y) 3 (neg.f64 z))","(-.f64 (*.f64 (*.f64 z 3) y) x)","(fma.f64 3 (*.f64 z y) (neg.f64 x))","(-.f64 (*.f64 (*.f64 x 3) z) y)","(fma.f64 (*.f64 x z) 3 (neg.f64 y))"]],"symmetry":[[]],"time":66.453857421875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (*.f64 (*.f64 x 3) y) z)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 (*.f64 x 3) y) z)","(fma.f64 (*.f64 x 3) y (neg.f64 z))"]],"time":20.02001953125,"type":"simplify"},{"compiler":[[17,11]],"time":0.35009765625,"type":"eval"},{"alts":[["(fma.f64 (*.f64 x 3) y (neg.f64 z))","next",0.13671875]],"compiler":[[10,7],[10,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.13671875],"time":0.83203125,"type":"prune"},{"compiler":[[19,10]],"locations":[["(fma.f64 (*.f64 x 3) y (neg.f64 z))",0.13671875,true]],"time":4.64794921875,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 (*.f64 x 3) y (neg.f64 z))","z","-inf",0.18701171875],["(fma.f64 (*.f64 x 3) y (neg.f64 z))","z","inf",0.930908203125],["(fma.f64 (*.f64 x 3) y (neg.f64 z))","z","0",0.266845703125],["(fma.f64 (*.f64 x 3) y (neg.f64 z))","y","-inf",0.344970703125],["(fma.f64 (*.f64 x 3) y (neg.f64 z))","y","inf",0.444091796875],["(fma.f64 (*.f64 x 3) y (neg.f64 z))","y","0",0.302978515625],["(fma.f64 (*.f64 x 3) y (neg.f64 z))","x","-inf",0.38720703125],["(fma.f64 (*.f64 x 3) y (neg.f64 z))","x","inf",0.333984375],["(fma.f64 (*.f64 x 3) y (neg.f64 z))","x","0",0.48583984375]],"time":3.81494140625,"type":"series"},{"count":[[1,49]],"inputs":[["(fma.f64 (*.f64 x 3) y (neg.f64 z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x 3) y (neg.f64 z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (*.f64 x 3) y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 3 (*.f64 x y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (-.f64 9 (fma.f64 (*.f64 x 3) y (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (+.f64 (*.f64 -3 (*.f64 x y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 z) (*.f64 -3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (*.f64 -3 (*.f64 x y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 3 (fma.f64 (*.f64 x 3) y (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 1 (fma.f64 (*.f64 x 3) y (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (*.f64 x 3) y (neg.f64 z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (+.f64 (*.f64 -3 (*.f64 x y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (+.f64 (*.f64 -3 (*.f64 x y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 x 3) y (neg.f64 z))) (pow.f64 (fma.f64 (*.f64 x 3) y (neg.f64 z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 x 3) y (neg.f64 z)) 2/3) (cbrt.f64 (fma.f64 (*.f64 x 3) y (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 3 (*.f64 x y)) 2/3) (-.f64 (pow.f64 z 2/3) (*.f64 (cbrt.f64 (*.f64 3 (*.f64 x y))) (cbrt.f64 (neg.f64 z))))) (+.f64 (cbrt.f64 (*.f64 3 (*.f64 x y))) (cbrt.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 z 2/3) (-.f64 (pow.f64 (*.f64 3 (*.f64 x y)) 2/3) (*.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (*.f64 3 (*.f64 x y)))))) (+.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (*.f64 3 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (fma.f64 (*.f64 x 3) y (neg.f64 z)) 2/3) (*.f64 0 (cbrt.f64 (fma.f64 (*.f64 x 3) y (neg.f64 z)))))) (+.f64 0 (cbrt.f64 (fma.f64 (*.f64 x 3) y (neg.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 3 (*.f64 x y)) 2/3) (+.f64 (pow.f64 z 2/3) (*.f64 (cbrt.f64 (*.f64 3 (*.f64 x y))) (cbrt.f64 z)))) (-.f64 (cbrt.f64 (*.f64 3 (*.f64 x y))) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 -3 (*.f64 x y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -3 (*.f64 x y)) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 x 3) y (neg.f64 z)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 -3 (*.f64 x y)) z)) (neg.f64 (pow.f64 (fma.f64 (*.f64 x 3) y (neg.f64 z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (*.f64 x 3) y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 x 3) y (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -3 (*.f64 x y)) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 x 3) y (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 x 3) y (neg.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 x 3) y (neg.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 x 3) y (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 -3 (*.f64 x y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 x 3) y (neg.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 3) y (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 3 (*.f64 x y))) (pow.f64 (*.f64 3 (*.f64 x y)) 2/3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x 3) (cbrt.f64 y)) (pow.f64 y 2/3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 3 y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x 3)) (*.f64 (pow.f64 (*.f64 x 3) 2/3) y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 x 3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (neg.f64 (pow.f64 z 2/3)) (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 (*.f64 x y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z -1 (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 z (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z 2/3) (cbrt.f64 (neg.f64 z)) (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 z)) (pow.f64 z 2/3) (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 (*.f64 x y)) 1 (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 z) (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) 1 (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 3 (*.f64 x y)) (neg.f64 z))))))"]],"rules":[["egg-rr",49]],"time":36.06591796875,"type":"rewrite"},{"count":[[85,55]],"inputs":[["(*.f64 -1 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 -1 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 -1 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(*.f64 -1 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))"]],"time":107.3701171875,"type":"simplify"},{"compiler":[[627,341]],"time":7.987060546875,"type":"eval"},{"alts":[["(fma.f64 x (*.f64 3 y) (neg.f64 z))","next",0.125],["(-.f64 (*.f64 3 (*.f64 x y)) z)","fresh",0.1640625],["(fma.f64 (*.f64 x 3) y (neg.f64 z))","done",0.13671875],["(fma.f64 3 (*.f64 x y) (neg.f64 z))","fresh",0.15234375]],"compiler":[[10,7],[10,7],[10,7],[10,7],[10,7],[10,7],[10,7]],"count":[[56,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[55,3],"picked":[1,1]}],"min-error":[0.01171875],"time":10.034912109375,"type":"prune"},{"compiler":[[19,10]],"locations":[["(fma.f64 x (*.f64 3 y) (neg.f64 z))",0.125,true]],"time":4.610107421875,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 x (*.f64 3 y) (neg.f64 z))","z","-inf",0.157958984375],["(fma.f64 x (*.f64 3 y) (neg.f64 z))","z","inf",0.17822265625],["(fma.f64 x (*.f64 3 y) (neg.f64 z))","z","0",0.506103515625],["(fma.f64 x (*.f64 3 y) (neg.f64 z))","y","-inf",0.304931640625],["(fma.f64 x (*.f64 3 y) (neg.f64 z))","y","inf",0.27587890625],["(fma.f64 x (*.f64 3 y) (neg.f64 z))","y","0",0.27001953125],["(fma.f64 x (*.f64 3 y) (neg.f64 z))","x","-inf",0.278076171875],["(fma.f64 x (*.f64 3 y) (neg.f64 z))","x","inf",0.27099609375],["(fma.f64 x (*.f64 3 y) (neg.f64 z))","x","0",0.330078125]],"time":2.677001953125,"type":"series"},{"count":[[1,49]],"inputs":[["(fma.f64 x (*.f64 3 y) (neg.f64 z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x y) 3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 3 y) (neg.f64 z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (*.f64 3 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (*.f64 x y) 3) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (-.f64 9 (fma.f64 x (*.f64 3 y) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (+.f64 (*.f64 -3 (*.f64 x y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 z) (*.f64 -3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (*.f64 -3 (*.f64 x y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 1 (fma.f64 x (*.f64 3 y) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 3 (fma.f64 x (*.f64 3 y) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x (*.f64 3 y) (neg.f64 z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (+.f64 (*.f64 -3 (*.f64 x y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (+.f64 (*.f64 -3 (*.f64 x y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (*.f64 3 y) (neg.f64 z))) (pow.f64 (fma.f64 x (*.f64 3 y) (neg.f64 z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (*.f64 3 y) (neg.f64 z)) 2/3) (cbrt.f64 (fma.f64 x (*.f64 3 y) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (fma.f64 x (*.f64 3 y) (neg.f64 z)) 2/3) (*.f64 0 (cbrt.f64 (fma.f64 x (*.f64 3 y) (neg.f64 z)))))) (+.f64 0 (cbrt.f64 (fma.f64 x (*.f64 3 y) (neg.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x y) 3) 2/3) (-.f64 (pow.f64 z 2/3) (*.f64 (cbrt.f64 (*.f64 (*.f64 x y) 3)) (cbrt.f64 (neg.f64 z))))) (+.f64 (cbrt.f64 (*.f64 (*.f64 x y) 3)) (cbrt.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 z 2/3) (-.f64 (pow.f64 (*.f64 (*.f64 x y) 3) 2/3) (*.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (*.f64 (*.f64 x y) 3))))) (+.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (*.f64 (*.f64 x y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x y) 3) 2/3) (+.f64 (pow.f64 z 2/3) (*.f64 (cbrt.f64 (*.f64 (*.f64 x y) 3)) (cbrt.f64 z)))) (-.f64 (cbrt.f64 (*.f64 (*.f64 x y) 3)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 -3 (*.f64 x y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -3 (*.f64 x y)) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x (*.f64 3 y) (neg.f64 z)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 -3 (*.f64 x y)) z)) (neg.f64 (pow.f64 (fma.f64 x (*.f64 3 y) (neg.f64 z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (*.f64 3 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (*.f64 3 y) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -3 (*.f64 x y)) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (*.f64 3 y) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (*.f64 3 y) (neg.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (*.f64 3 y) (neg.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (*.f64 3 y) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 -3 (*.f64 x y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (*.f64 3 y) (neg.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 3 y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 3) y (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x y) 3)) (pow.f64 (*.f64 (*.f64 x y) 3) 2/3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (*.f64 3 y))) (pow.f64 (*.f64 3 y) 2/3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 y) x (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 3 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (neg.f64 (pow.f64 z 2/3)) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 3 (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z -1 (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 z (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z 2/3) (cbrt.f64 (neg.f64 z)) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 z)) (pow.f64 z 2/3) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x y) 3) 1 (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 x y) 3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 z) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) 1 (*.f64 (*.f64 x y) 3))))))"]],"rules":[["egg-rr",49]],"time":36.518798828125,"type":"rewrite"},{"count":[[85,55]],"inputs":[["(*.f64 -1 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 -1 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 -1 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(*.f64 -1 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))"]],"time":107.166015625,"type":"simplify"},{"compiler":[[627,341]],"time":7.926025390625,"type":"eval"},{"alts":[["(fma.f64 x (*.f64 3 y) (neg.f64 z))","done",0.125],["(-.f64 (*.f64 3 (*.f64 x y)) z)","fresh",0.1640625],["(fma.f64 (*.f64 x 3) y (neg.f64 z))","done",0.13671875],["(fma.f64 (*.f64 x y) 3 (neg.f64 z))","next",0.15234375]],"compiler":[[10,7],[10,7],[10,7],[10,7],[10,7],[10,7]],"count":[[59,4]],"kept":[{"done":[1,1],"fresh":[2,1],"new":[55,1],"picked":[1,1]}],"min-error":[0.01171875],"time":10.7099609375,"type":"prune"},{"compiler":[[19,8]],"locations":[["(fma.f64 (*.f64 x y) 3 (neg.f64 z))",0.15234375,true]],"time":4.3251953125,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 (*.f64 x y) 3 (neg.f64 z))","z","-inf",0.1591796875],["(fma.f64 (*.f64 x y) 3 (neg.f64 z))","z","inf",0.162109375],["(fma.f64 (*.f64 x y) 3 (neg.f64 z))","z","0",0.27880859375],["(fma.f64 (*.f64 x y) 3 (neg.f64 z))","y","-inf",0.2880859375],["(fma.f64 (*.f64 x y) 3 (neg.f64 z))","y","inf",0.2841796875],["(fma.f64 (*.f64 x y) 3 (neg.f64 z))","y","0",0.292236328125],["(fma.f64 (*.f64 x y) 3 (neg.f64 z))","x","-inf",0.298095703125],["(fma.f64 (*.f64 x y) 3 (neg.f64 z))","x","inf",0.294921875],["(fma.f64 (*.f64 x y) 3 (neg.f64 z))","x","0",0.341064453125]],"time":2.501953125,"type":"series"},{"count":[[1,50]],"inputs":[["(fma.f64 (*.f64 x y) 3 (neg.f64 z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x y) 3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (*.f64 y 3) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 y 3) (neg.f64 z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (*.f64 x y) 3) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (-.f64 9 (fma.f64 x (*.f64 y 3) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (+.f64 z (*.f64 -3 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 z) (*.f64 -3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 z (*.f64 -3 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 3 (fma.f64 x (*.f64 y 3) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 1 (fma.f64 x (*.f64 y 3) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x (*.f64 y 3) (neg.f64 z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (+.f64 z (*.f64 -3 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (+.f64 z (*.f64 -3 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (*.f64 y 3) (neg.f64 z))) (pow.f64 (fma.f64 x (*.f64 y 3) (neg.f64 z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (*.f64 y 3) (neg.f64 z)) 2/3) (cbrt.f64 (fma.f64 x (*.f64 y 3) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (fma.f64 x (*.f64 y 3) (neg.f64 z)) 2/3) (*.f64 0 (cbrt.f64 (fma.f64 x (*.f64 y 3) (neg.f64 z)))))) (+.f64 0 (cbrt.f64 (fma.f64 x (*.f64 y 3) (neg.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x y) 3) 2/3) (-.f64 (pow.f64 z 2/3) (*.f64 (cbrt.f64 (*.f64 (*.f64 x y) 3)) (cbrt.f64 (neg.f64 z))))) (+.f64 (cbrt.f64 (*.f64 (*.f64 x y) 3)) (cbrt.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 z 2/3) (-.f64 (pow.f64 (*.f64 (*.f64 x y) 3) 2/3) (*.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (*.f64 (*.f64 x y) 3))))) (+.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (*.f64 (*.f64 x y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x y) 3) 2/3) (+.f64 (pow.f64 z 2/3) (*.f64 (cbrt.f64 (*.f64 (*.f64 x y) 3)) (cbrt.f64 z)))) (-.f64 (cbrt.f64 (*.f64 (*.f64 x y) 3)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 z (*.f64 -3 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 z (*.f64 -3 (*.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x (*.f64 y 3) (neg.f64 z)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 z (*.f64 -3 (*.f64 x y)))) (neg.f64 (pow.f64 (fma.f64 x (*.f64 y 3) (neg.f64 z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (*.f64 y 3) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (*.f64 y 3) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 z (*.f64 -3 (*.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (*.f64 y 3) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (*.f64 y 3) (neg.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (*.f64 y 3) (neg.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (*.f64 y 3) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 z (*.f64 -3 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (*.f64 y 3) (neg.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (*.f64 (pow.f64 (*.f64 x y) 2/3) 3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x y) (cbrt.f64 3)) (cbrt.f64 9) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x y) (sqrt.f64 3)) (sqrt.f64 3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x y) 3)) (pow.f64 (*.f64 (*.f64 x y) 3) 2/3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 y 3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 x 3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (neg.f64 (pow.f64 z 2/3)) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 3 (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 (*.f64 x y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 z (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z -1 (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z 2/3) (cbrt.f64 (neg.f64 z)) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 z)) (pow.f64 z 2/3) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 x y) 3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) 1 (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 z) (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x y) 3) 1 (neg.f64 z))))))"]],"rules":[["egg-rr",50]],"time":36.4619140625,"type":"rewrite"},{"count":[[86,56]],"inputs":[["(*.f64 -1 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 -1 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 -1 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(*.f64 -1 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))"]],"time":107.4970703125,"type":"simplify"},{"compiler":[[637,342]],"time":8.10498046875,"type":"eval"},{"alts":[["(fma.f64 x (*.f64 3 y) (neg.f64 z))","done",0.125],["(-.f64 (*.f64 3 (*.f64 x y)) z)","next",0.1640625],["(fma.f64 (*.f64 x 3) y (neg.f64 z))","done",0.13671875],["(fma.f64 (*.f64 (*.f64 x y) (sqrt.f64 3)) (sqrt.f64 3) (neg.f64 z))","fresh",0.2907601074528622]],"compiler":[[10,7],[10,7],[10,7],[14,11],[10,7],[14,11]],"count":[[60,4]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[56,1],"picked":[1,0]}],"min-error":[0.00390625],"time":10.319091796875,"type":"prune"},{"compiler":[[22,10]],"locations":[["(-.f64 (*.f64 3 (*.f64 x y)) z)",0.015625,true],["(*.f64 3 (*.f64 x y))",0.2578125,true]],"time":4.455810546875,"type":"localize"},{"count":[[2,60]],"series":[["(-.f64 (*.f64 3 (*.f64 x y)) z)","z","-inf",0.173095703125],["(-.f64 (*.f64 3 (*.f64 x y)) z)","z","inf",0.1611328125],["(-.f64 (*.f64 3 (*.f64 x y)) z)","z","0",0.253173828125],["(-.f64 (*.f64 3 (*.f64 x y)) z)","y","-inf",0.157958984375],["(-.f64 (*.f64 3 (*.f64 x y)) z)","y","inf",0.157958984375],["(-.f64 (*.f64 3 (*.f64 x y)) z)","y","0",0.169921875],["(-.f64 (*.f64 3 (*.f64 x y)) z)","x","-inf",0.159912109375],["(-.f64 (*.f64 3 (*.f64 x y)) z)","x","inf",0.177978515625],["(-.f64 (*.f64 3 (*.f64 x y)) z)","x","0",0.1630859375],["(*.f64 3 (*.f64 x y))","y","-inf",0.2490234375],["(*.f64 3 (*.f64 x y))","y","inf",0.286865234375],["(*.f64 3 (*.f64 x y))","y","0",0.375],["(*.f64 3 (*.f64 x y))","x","-inf",0.242919921875],["(*.f64 3 (*.f64 x y))","x","inf",0.321044921875],["(*.f64 3 (*.f64 x y))","x","0",0.386962890625]],"time":3.593994140625,"type":"series"},{"count":[[2,89]],"inputs":[["(*.f64 3 (*.f64 x y))","(-.f64 (*.f64 3 (*.f64 x y)) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 x y)) (*.f64 (*.f64 3 (*.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3 (*.f64 x y)) 0) (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 x y)) (*.f64 0 (*.f64 3 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 3 (*.f64 x y))) (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (*.f64 (pow.f64 (*.f64 x y) 2/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 27 (*.f64 x y))) (pow.f64 (*.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (sqrt.f64 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 x) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 3) (*.f64 (*.f64 x y) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 (*.f64 27 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 9) (*.f64 (*.f64 x y) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 3 x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x y) 2/3) 3) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 9) (*.f64 x y)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 (*.f64 x y))) (pow.f64 (*.f64 3 (*.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 3 (*.f64 x y)) 2/3) (cbrt.f64 (*.f64 3 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3 (*.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 3 (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 3 (*.f64 x y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 3 x) y (neg.f64 z)) (*.f64 (fma.f64 (*.f64 3 x) y (neg.f64 z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (*.f64 3 x) y (neg.f64 z)) 0) (fma.f64 (*.f64 3 x) y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 3 x) y (neg.f64 z)) (*.f64 0 (fma.f64 (*.f64 3 x) y (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (*.f64 3 x) y (neg.f64 z))) (fma.f64 (*.f64 3 x) y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (*.f64 3 x) y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 z) (*.f64 -3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 3 (*.f64 x y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 3 (*.f64 x y)) 0) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (*.f64 -3 (*.f64 x y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 (*.f64 -3 (*.f64 x y)) z))) (pow.f64 (fma.f64 (*.f64 3 x) y (neg.f64 z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 3 (*.f64 x y)) 2/3) (+.f64 (pow.f64 z 2/3) (cbrt.f64 (*.f64 3 (*.f64 (*.f64 x y) z))))) (-.f64 (cbrt.f64 (*.f64 3 (*.f64 x y))) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 3 x) y (neg.f64 z))) (pow.f64 (fma.f64 (*.f64 3 x) y (neg.f64 z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 3 x) y (neg.f64 z)) 2/3) (cbrt.f64 (fma.f64 (*.f64 3 x) y (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 -3 (*.f64 x y)) z)) (neg.f64 (pow.f64 (fma.f64 (*.f64 3 x) y (neg.f64 z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 -3 (*.f64 x y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -3 (*.f64 x y)) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 -3 (*.f64 x y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (*.f64 3 x) y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 3 x) y (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 3 x) y (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 3 x) y (neg.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 3 x) y (neg.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 3 x) y (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 -3 (*.f64 x y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 (*.f64 -3 (*.f64 x y)) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 3 x) y (neg.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 x) y (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 z)) (pow.f64 z 2/3) (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (neg.f64 (pow.f64 z 2/3)) (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 27 (*.f64 x y))) (pow.f64 (*.f64 x y) 2/3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x y) (cbrt.f64 3)) (cbrt.f64 9) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 3 x) (cbrt.f64 y)) (pow.f64 y 2/3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 y) x (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 3 y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x y) (sqrt.f64 3)) (sqrt.f64 3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (*.f64 (pow.f64 (*.f64 x y) 2/3) 3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 3) (*.f64 (*.f64 x y) (sqrt.f64 3)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 3 x) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 3 (*.f64 x y))) (pow.f64 (*.f64 3 (*.f64 x y)) 2/3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 3 (*.f64 x y)) 2/3) (cbrt.f64 (*.f64 3 (*.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 (*.f64 x y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 3 (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 -3 (*.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 (*.f64 3 x) y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 (*.f64 3 x) y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 (*.f64 3 x) y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 3 (*.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 z) (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 z (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 (*.f64 x y)) 1 (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 (*.f64 3 x) y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 (*.f64 3 x) y (neg.f64 z)))))))"]],"rules":[["egg-rr",55],["egg-rr",34]],"time":26.635009765625,"type":"rewrite"},{"count":[[149,95]],"inputs":[["(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 -1 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 -1 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(*.f64 -1 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(*.f64 -1 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 3 (*.f64 y x)))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -1 z))","(fma.f64 3 (*.f64 y x) (neg.f64 z))"]],"time":167.488037109375,"type":"simplify"},{"compiler":[[1032,554]],"time":13.971923828125,"type":"eval"},{"alts":[["(fma.f64 x (*.f64 3 y) (neg.f64 z))","done",0.125],["(-.f64 (*.f64 3 (*.f64 x y)) z)","done",0.1640625],["(fma.f64 (*.f64 x 3) y (neg.f64 z))","done",0.13671875],["(-.f64 (*.f64 (*.f64 (*.f64 x y) (sqrt.f64 3)) (sqrt.f64 3)) z)","fresh",0.2930451172213042]],"compiler":[[10,7],[10,7],[10,7],[14,11]],"count":[[99,4]],"kept":[{"done":[2,2],"fresh":[1,0],"new":[95,1],"picked":[1,1]}],"min-error":[0.00390625],"time":19.900146484375,"type":"prune"},{"accuracy":[0.125],"baseline":[0.125],"branch":[["x",0.125,1],["y",0.125,1],["z",0.125,1],["(-.f64 (*.f64 (*.f64 x 3) y) z)",0.125,1],["(*.f64 (*.f64 x 3) y)",0.125,1],["(*.f64 x 3)",0.125,1],["(*.f64 x 3)",0.125,1]],"compiler":[[4,3],[4,3],[4,3],[10,7],[8,6],[6,5],[6,5],[67,35]],"count":[[8,1]],"inputs":[["(-.f64 (*.f64 (*.f64 (*.f64 x y) (sqrt.f64 3)) (sqrt.f64 3)) z)","(fma.f64 (*.f64 (*.f64 x y) (sqrt.f64 3)) (sqrt.f64 3) (neg.f64 z))","(fma.f64 (*.f64 x y) 3 (neg.f64 z))","(fma.f64 x (*.f64 3 y) (neg.f64 z))","(-.f64 (*.f64 3 (*.f64 x y)) z)","(fma.f64 3 (*.f64 x y) (neg.f64 z))","(fma.f64 (*.f64 x 3) y (neg.f64 z))","(-.f64 (*.f64 (*.f64 x 3) y) z)"]],"link":["."],"name":["Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, B"],"oracle":[0.41023261722130433],"outputs":[["(fma.f64 x (*.f64 3 y) (neg.f64 z))"]],"time":29.48193359375,"times":[["x",3.7890625],["y",4.89990234375],["z",3.85400390625],["(-.f64 (*.f64 (*.f64 x 3) y) z)",3.946044921875],["(*.f64 (*.f64 x 3) y)",3.579833984375],["(*.f64 x 3)",3.926025390625],["(*.f64 x 3)",3.873046875]],"type":"regimes"},{"compiler":[[10,7]],"inputs":[["(fma.f64 x (*.f64 3 y) (neg.f64 z))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x (*.f64 3 y) (neg.f64 z))"]],"stop":[["fuel",1]],"time":34.173095703125,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[10,7]],"remove-preprocessing":[[]],"time":8.08203125,"type":"end"}]
[{"compiler":[[14,12]],"method":["search"],"sampling":[[12,0.4987797737121582,0.0009760856628417969,0.500244140625],[11,0.4978036880493164,0.0019521713256835938,0.500244140625],[10,0.4958515167236328,0.0039043426513671875,0.500244140625],[9,0.4919471740722656,0.007808685302734375,0.500244140625],[8,0.48413848876953125,0.01561737060546875,0.500244140625],[7,0.4685211181640625,0.0312347412109375,0.500244140625],[6,0.437286376953125,0.062469482421875,0.500244140625],[5,0.37481689453125,0.12493896484375,0.500244140625],[4,0.2498779296875,0.2498779296875,0.500244140625],[3,0.0,0.499755859375,0.500244140625],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":2.06103515625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.0771484375,2],["body",512,"valid",260.03955078125,2045],["body",1024,"valid",1015.576171875,4227],["body",2048,"valid",154.30712890625,417],["body",256,"valid",90.80615234375,1567]],"time":1529.195068359375,"type":"sample"},{"compiler":[[13,11]],"inputs":[["0"],["(*.f64 (/.f64 1 2) (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 (/.f64 1 2) (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))","(*.f64 1/2 (log.f64 (/.f64 (-.f64 -1 x) (+.f64 -1 x))))"]],"symmetry":[[]],"time":53.0439453125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (/.f64 1 2) (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 1 2) (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))","(*.f64 1/2 (log.f64 (/.f64 (-.f64 -1 x) (+.f64 -1 x))))"]],"time":19.51806640625,"type":"simplify"},{"compiler":[[23,19]],"time":0.45703125,"type":"eval"},{"alts":[["(*.f64 1/2 (log.f64 (/.f64 (-.f64 -1 x) (+.f64 -1 x))))","next",58.91045238156443]],"compiler":[[11,9],[11,9]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[58.91045238156443],"time":1.864990234375,"type":"prune"},{"compiler":[[35,26]],"locations":[["(/.f64 (-.f64 -1 x) (+.f64 -1 x))",0.015625,true],["(log.f64 (/.f64 (-.f64 -1 x) (+.f64 -1 x)))",5.493577053616579,true]],"time":8.531005859375,"type":"localize"},{"count":[[2,24]],"series":[["(/.f64 (-.f64 -1 x) (+.f64 -1 x))","x","-inf",0.18115234375],["(/.f64 (-.f64 -1 x) (+.f64 -1 x))","x","inf",0.2451171875],["(/.f64 (-.f64 -1 x) (+.f64 -1 x))","x","0",0.348876953125],["(log.f64 (/.f64 (-.f64 -1 x) (+.f64 -1 x)))","x","-inf",0.329833984375],["(log.f64 (/.f64 (-.f64 -1 x) (+.f64 -1 x)))","x","inf",0.451171875],["(log.f64 (/.f64 (-.f64 -1 x) (+.f64 -1 x)))","x","0",0.808837890625]],"time":2.4609375,"type":"series"},{"count":[[2,122]],"inputs":[["(log.f64 (/.f64 (-.f64 -1 x) (+.f64 -1 x)))","(/.f64 (-.f64 -1 x) (+.f64 -1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) 0) (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) (*.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))) (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) (*.f64 0 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))) (cbrt.f64 (pow.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) 2)) (cbrt.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (+.f64 -1 x)) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (-.f64 1 x)) (/.f64 -1 (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 0) (/.f64 (+.f64 1 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) (*.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (+.f64 -1 x)) (*.f64 (/.f64 1 (+.f64 -1 x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 -1 x)) (neg.f64 x)) (/.f64 -1 (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 1 x) (-.f64 1 x))) (/.f64 (+.f64 1 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) (*.f64 0 (/.f64 (+.f64 1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (+.f64 -1 x)) (*.f64 (/.f64 x (-.f64 1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (+.f64 -1 x)) (/.f64 x (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (/.f64 1 (+.f64 -1 x)) (/.f64 x (+.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (+.f64 1 x) (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (-.f64 1 x) (pow.f64 (+.f64 -1 x) 2)) (/.f64 (*.f64 (+.f64 -1 x) x) (pow.f64 (+.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 -1 (fma.f64 x x (-.f64 1 x))) (+.f64 -1 x)) (/.f64 (/.f64 (pow.f64 x 3) (fma.f64 x x (-.f64 1 x))) (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (-.f64 1 x)) (/.f64 1 (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 2)) (cbrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 -1 x)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 x) (/.f64 -1 (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 -1 x))) (/.f64 (-.f64 -1 x) (cbrt.f64 (pow.f64 (+.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 1 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (+.f64 1 x) (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 1 x) (+.f64 -1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 -1 x)) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) (+.f64 -1 x)) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 -1 x) (cbrt.f64 (pow.f64 (+.f64 -1 x) 2))) (cbrt.f64 (/.f64 1 (+.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 -1 x) (cbrt.f64 (+.f64 -1 x))) (pow.f64 (cbrt.f64 (+.f64 -1 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (pow.f64 x 3)) (/.f64 1 (*.f64 (fma.f64 x x (-.f64 1 x)) (+.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (-.f64 1 x) (*.f64 (-.f64 1 x) x)) (pow.f64 (/.f64 -1 (+.f64 -1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 -1 (pow.f64 x 3)) (+.f64 -1 x)) (/.f64 1 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 x) (/.f64 1 (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 -1 x)) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 -1 (+.f64 -1 x))) (+.f64 -1 x)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 x) 2)) x)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 x) 2)) (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 -1 (+.f64 -1 x))) (-.f64 1 x)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 x) 2)) (neg.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 x) 2)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 -1 (+.f64 -1 x))) (cbrt.f64 (pow.f64 (+.f64 -1 x) 2))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 x) 2)) (/.f64 x (cbrt.f64 (+.f64 -1 x))))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 x) 2)) (cbrt.f64 (pow.f64 (+.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 -1 x) (*.f64 (+.f64 -1 x) (neg.f64 x))) (*.f64 (+.f64 -1 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 -1 x) 2))) (*.f64 (+.f64 -1 x) (/.f64 x (cbrt.f64 (+.f64 -1 x))))) (*.f64 (+.f64 -1 x) (cbrt.f64 (pow.f64 (+.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 (+.f64 -1 x) 2)) (*.f64 (-.f64 1 x) (/.f64 x (cbrt.f64 (+.f64 -1 x))))) (*.f64 (-.f64 1 x) (cbrt.f64 (pow.f64 (+.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 -1 x) (*.f64 (-.f64 1 x) x)) (*.f64 (-.f64 1 x) (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (-.f64 1 x) (*.f64 (-.f64 1 x) (neg.f64 x))) (*.f64 (-.f64 1 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) -1) (*.f64 (fma.f64 x x (-.f64 1 x)) (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) (cbrt.f64 (/.f64 -1 (+.f64 -1 x)))) (*.f64 (fma.f64 x x (-.f64 1 x)) (cbrt.f64 (pow.f64 (+.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) 1) (*.f64 (fma.f64 x x (-.f64 1 x)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 -1 x))) (-.f64 -1 (pow.f64 x 3))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 x) 2)) (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 -1 x))) (+.f64 1 (pow.f64 x 3))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -1 x) 2)) (neg.f64 (fma.f64 x x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (pow.f64 x 3)) (cbrt.f64 (/.f64 1 (+.f64 -1 x)))) (*.f64 (fma.f64 x x (-.f64 1 x)) (cbrt.f64 (pow.f64 (+.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (pow.f64 x 3)) -1) (*.f64 (fma.f64 x x (-.f64 1 x)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) 1) (*.f64 (neg.f64 (fma.f64 x x (-.f64 1 x))) (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) (cbrt.f64 (/.f64 1 (+.f64 -1 x)))) (*.f64 (neg.f64 (fma.f64 x x (-.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) -1) (*.f64 (neg.f64 (fma.f64 x x (-.f64 1 x))) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 x 3)) (neg.f64 (*.f64 (fma.f64 x x (-.f64 1 x)) (+.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (-.f64 1 x) (*.f64 (-.f64 1 x) x))) (neg.f64 (pow.f64 (+.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 -1 (pow.f64 x 3)) (+.f64 -1 x)) (fma.f64 x x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 -1 x) (cbrt.f64 (+.f64 -1 x))) (cbrt.f64 (pow.f64 (+.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 x) (+.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (-.f64 1 x) (*.f64 (-.f64 1 x) x)) (pow.f64 (+.f64 -1 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (pow.f64 x 3)) (*.f64 (fma.f64 x x (-.f64 1 x)) (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))) (cbrt.f64 (pow.f64 (+.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 2)) (cbrt.f64 (-.f64 -1 x))) (cbrt.f64 (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 2)) (cbrt.f64 (+.f64 1 x))) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (+.f64 -1 x)) (+.f64 1 (pow.f64 x 3))) (neg.f64 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 -1 x))) (-.f64 -1 x)) (cbrt.f64 (pow.f64 (+.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 x) (cbrt.f64 (/.f64 -1 (+.f64 -1 x)))) (cbrt.f64 (pow.f64 (+.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 -1 x)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 2))) (cbrt.f64 (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 2))) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 -1 (pow.f64 x 3))) (/.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) (+.f64 -1 x))) (cbrt.f64 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) (/.f64 1 (+.f64 -1 x))) (neg.f64 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) (/.f64 -1 (+.f64 -1 x))) (fma.f64 x x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 -1 x) (cbrt.f64 (pow.f64 (+.f64 -1 x) 2))) (cbrt.f64 (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 -1 (pow.f64 x 3)) (+.f64 -1 x)) 1) (fma.f64 x x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 -1 x) (cbrt.f64 (+.f64 -1 x))) 1) (cbrt.f64 (pow.f64 (+.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (-.f64 1 x) (*.f64 (-.f64 1 x) x)) 1) (pow.f64 (+.f64 -1 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 -1 (pow.f64 x 3)) (+.f64 -1 x)) (cbrt.f64 (fma.f64 x x (-.f64 1 x)))) (pow.f64 (cbrt.f64 (fma.f64 x x (-.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 -1 (pow.f64 x 3)) (+.f64 -1 x)) 1) (fma.f64 x x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 x) (cbrt.f64 (+.f64 -1 x))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (-.f64 1 x) (*.f64 (-.f64 1 x) x)) (+.f64 -1 x)) (+.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 -1 x) -1) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 -1 x) (+.f64 -1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 -1 x) (cbrt.f64 (+.f64 -1 x))) 1) (cbrt.f64 (pow.f64 (+.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 -1 x) (cbrt.f64 (+.f64 -1 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 -1 x))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 -1 x))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (pow.f64 x 3)) (/.f64 (*.f64 (fma.f64 x x (-.f64 1 x)) (+.f64 -1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 x 3)) (*.f64 (+.f64 -1 x) (neg.f64 (fma.f64 x x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 x 3)) (*.f64 (-.f64 1 x) (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (pow.f64 x 3)) (*.f64 (-.f64 1 x) (neg.f64 (fma.f64 x x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (pow.f64 x 3)) (*.f64 (*.f64 (fma.f64 x x (-.f64 1 x)) (+.f64 -1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 -1 x) (cbrt.f64 (+.f64 -1 x)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 -1 (pow.f64 x 3)) (+.f64 -1 x))) (neg.f64 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 1 x) (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (+.f64 1 x) (+.f64 -1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 1 (+.f64 -1 x)) (/.f64 x (+.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1 (+.f64 -1 x))) (pow.f64 (cbrt.f64 (+.f64 -1 x)) -2) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (+.f64 -1 x)) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (+.f64 -1 x))) (neg.f64 (pow.f64 (cbrt.f64 (+.f64 -1 x)) -2)) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 -1 (+.f64 -1 x)) (/.f64 x (-.f64 1 x)))))))"]],"rules":[["egg-rr",103],["egg-rr",19]],"time":28.347900390625,"type":"rewrite"},{"count":[[146,150]],"inputs":[["(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 2/3 (pow.f64 x 3)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5))))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2 x) (+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))))","(log.f64 -1)","(+.f64 (log.f64 -1) (*.f64 2 (/.f64 1 x)))","(+.f64 (*.f64 2/3 (/.f64 1 (pow.f64 x 3))) (+.f64 (log.f64 -1) (*.f64 2 (/.f64 1 x))))","(+.f64 (*.f64 2/3 (/.f64 1 (pow.f64 x 3))) (+.f64 (log.f64 -1) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2/5 (/.f64 1 (pow.f64 x 5))))))","(log.f64 -1)","(+.f64 (log.f64 -1) (*.f64 2 (/.f64 1 x)))","(+.f64 (*.f64 2/3 (/.f64 1 (pow.f64 x 3))) (+.f64 (log.f64 -1) (*.f64 2 (/.f64 1 x))))","(+.f64 (*.f64 2/3 (/.f64 1 (pow.f64 x 3))) (+.f64 (log.f64 -1) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2/5 (/.f64 1 (pow.f64 x 5))))))","1","(+.f64 (*.f64 2 x) 1)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 x) 1))","(+.f64 (*.f64 2 (pow.f64 x 3)) (+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 x) 1)))","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))))","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 2/3 (pow.f64 x 3)))","(fma.f64 (pow.f64 x 3) 2/3 (*.f64 2 x))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5))))","(fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2 x) (+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))))","(fma.f64 (pow.f64 x 7) 2/7 (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))","(log.f64 -1)","(+.f64 (log.f64 -1) (*.f64 2 (/.f64 1 x)))","(+.f64 (log.f64 -1) (/.f64 2 x))","(+.f64 (*.f64 2/3 (/.f64 1 (pow.f64 x 3))) (+.f64 (log.f64 -1) (*.f64 2 (/.f64 1 x))))","(+.f64 (fma.f64 2/3 (pow.f64 x -3) (log.f64 -1)) (/.f64 2 x))","(+.f64 (*.f64 2/3 (/.f64 1 (pow.f64 x 3))) (+.f64 (log.f64 -1) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2/5 (/.f64 1 (pow.f64 x 5))))))","(+.f64 (fma.f64 2/3 (pow.f64 x -3) (log.f64 -1)) (fma.f64 2/5 (pow.f64 x -5) (/.f64 2 x)))","(log.f64 -1)","(+.f64 (log.f64 -1) (*.f64 2 (/.f64 1 x)))","(+.f64 (log.f64 -1) (/.f64 2 x))","(+.f64 (*.f64 2/3 (/.f64 1 (pow.f64 x 3))) (+.f64 (log.f64 -1) (*.f64 2 (/.f64 1 x))))","(+.f64 (fma.f64 2/3 (pow.f64 x -3) (log.f64 -1)) (/.f64 2 x))","(+.f64 (*.f64 2/3 (/.f64 1 (pow.f64 x 3))) (+.f64 (log.f64 -1) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2/5 (/.f64 1 (pow.f64 x 5))))))","(+.f64 (fma.f64 2/3 (pow.f64 x -3) (log.f64 -1)) (fma.f64 2/5 (pow.f64 x -5) (/.f64 2 x)))","1","(+.f64 (*.f64 2 x) 1)","(fma.f64 2 x 1)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 x) 1))","(+.f64 (*.f64 2 (+.f64 (*.f64 x x) x)) 1)","(+.f64 (*.f64 2 (pow.f64 x 3)) (+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 x) 1)))","(+.f64 (*.f64 2 (+.f64 (pow.f64 x 3) (*.f64 x x))) (fma.f64 2 x 1))","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(+.f64 -1 (/.f64 -2 x))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(-.f64 -1 (fma.f64 2 (pow.f64 x -2) (/.f64 2 x)))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))))","(-.f64 -1 (fma.f64 2 (+.f64 (pow.f64 x -2) (pow.f64 x -3)) (/.f64 2 x)))","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(+.f64 -1 (/.f64 -2 x))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(-.f64 -1 (fma.f64 2 (pow.f64 x -2) (/.f64 2 x)))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))))","(-.f64 -1 (fma.f64 2 (+.f64 (pow.f64 x -2) (pow.f64 x -3)) (/.f64 2 x)))"]],"time":79.05908203125,"type":"simplify"},{"compiler":[[2713,2196]],"time":37.60595703125,"type":"eval"},{"alts":[["(*.f64 1/2 (fma.f64 (pow.f64 x 7) 2/7 (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))))","next",0.06896549734522824],["(*.f64 1/2 (log.f64 (/.f64 (-.f64 -1 x) (+.f64 -1 x))))","done",58.91045238156443]],"compiler":[[21,17],[11,9],[21,17]],"count":[[151,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[150,1],"picked":[1,1]}],"min-error":[0.01171875],"time":17.18603515625,"type":"prune"},{"compiler":[[85,67]],"locations":[["(fma.f64 (pow.f64 x 7) 2/7 (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))",0.00390625,true],["(fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))",0.08203125,true],["(*.f64 2/5 (pow.f64 x 5))",0.0859375,true]],"time":20.9560546875,"type":"localize"},{"count":[[3,24]],"series":[["(fma.f64 (pow.f64 x 7) 2/7 (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))","x","-inf",0.263916015625],["(fma.f64 (pow.f64 x 7) 2/7 (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))","x","inf",0.302001953125],["(fma.f64 (pow.f64 x 7) 2/7 (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))","x","0",0.2119140625],["(fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))","x","-inf",0.4140625],["(fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))","x","inf",0.35107421875],["(fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))","x","0",0.324951171875],["(*.f64 2/5 (pow.f64 x 5))","x","-inf",0.3310546875],["(*.f64 2/5 (pow.f64 x 5))","x","inf",0.334228515625],["(*.f64 2/5 (pow.f64 x 5))","x","0",0.55078125]],"time":3.218017578125,"type":"series"},{"count":[[3,114]],"inputs":[["(*.f64 2/5 (pow.f64 x 5))","(fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 (pow.f64 x 7) 2/7 (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 (*.f64 2/5 (pow.f64 x 5)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 2/5 (pow.f64 x 5)) 0) (*.f64 2/5 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 0 (*.f64 2/5 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 2/5 (pow.f64 x 5))) (*.f64 2/5 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2/5) (*.f64 (cbrt.f64 4/25) (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 5)) (*.f64 (cbrt.f64 (pow.f64 x (*.f64 2 5))) 2/5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 2/5 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 2/5 (pow.f64 x 5))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 4/25) (pow.f64 x 5)) (cbrt.f64 2/5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 x (*.f64 2 5))) 2/5) (cbrt.f64 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2/5 (pow.f64 x 5))) (cbrt.f64 (*.f64 4/25 (pow.f64 x (*.f64 2 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2/5 (pow.f64 x 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 5) 2/5)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 4/25 (pow.f64 x (*.f64 2 5)))) (cbrt.f64 (*.f64 2/5 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 5) (sqrt.f64 2/5)) (sqrt.f64 2/5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 5) (cbrt.f64 2/5)) (cbrt.f64 4/25))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2/5 (cbrt.f64 (pow.f64 x 5))) (cbrt.f64 (pow.f64 x (*.f64 2 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2/5) (*.f64 (pow.f64 x 5) (sqrt.f64 2/5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 2/5 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2/5 (pow.f64 x 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 4/25) (*.f64 (pow.f64 x 5) (cbrt.f64 2/5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x (*.f64 2 5))) (*.f64 2/5 (cbrt.f64 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2/5 (pow.f64 x 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 8/125 (pow.f64 (pow.f64 x 5) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2/5 (pow.f64 x 5))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2/5 (pow.f64 x 5))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2/5 (pow.f64 x 5))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2/5 (pow.f64 x 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 2/5 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 8/125 (pow.f64 (pow.f64 x 5) 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))) (*.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))) 0) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))) (*.f64 0 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))) (cbrt.f64 (pow.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))) 2)) (cbrt.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2/5 (pow.f64 x 5) (*.f64 2/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 2/5) (*.f64 (pow.f64 x 5) (sqrt.f64 2/5)) (*.f64 2/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 5) 2/5 (*.f64 2/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 4/25 (pow.f64 x (*.f64 2 5)))) (cbrt.f64 (*.f64 2/5 (pow.f64 x 5))) (*.f64 2/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 2/5 (pow.f64 x 5))) (cbrt.f64 (*.f64 4/25 (pow.f64 x (*.f64 2 5)))) (*.f64 2/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 2/5 (pow.f64 x 5))) (*.f64 2/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 5) (cbrt.f64 2/5)) (cbrt.f64 4/25) (*.f64 2/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 2/5) (*.f64 (cbrt.f64 4/25) (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 5) (sqrt.f64 2/5)) (sqrt.f64 2/5) (*.f64 2/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 5)) (*.f64 (cbrt.f64 (pow.f64 x (*.f64 2 5))) 2/5) (*.f64 2/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2/5 (cbrt.f64 (pow.f64 x 5))) (cbrt.f64 (pow.f64 x (*.f64 2 5))) (*.f64 2/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2/3 (*.f64 x x)) x (*.f64 2/5 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 2/3) (*.f64 (sqrt.f64 2/3) (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2/3 x) (*.f64 x x) (*.f64 2/5 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 2/3)) (pow.f64 (*.f64 x (cbrt.f64 2/3)) 2) (*.f64 2/5 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 2/3) (*.f64 (cbrt.f64 4/9) (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3) 2/3 (*.f64 2/5 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2/5 (pow.f64 x 5)) 1 (*.f64 2/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2/3 (pow.f64 x 3)) 1 (*.f64 2/5 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (pow.f64 x 7) 2/7 (+.f64 x x)) (*.f64 2/3 (pow.f64 x 3))) (*.f64 2/5 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 7) 2/7 (+.f64 x x)) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (pow.f64 x 7) 2/7) (fma.f64 2 x (*.f64 2/3 (pow.f64 x 3)))) (*.f64 2/5 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))) (*.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))) 0) (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))) (*.f64 0 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))) (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (pow.f64 x 7) 2/7 (+.f64 x x)) 1) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x 7) 2/7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))) (*.f64 (pow.f64 x 7) 2/7))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))) (fma.f64 (pow.f64 x 7) 2/7 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (pow.f64 x 7) 2/7 (+.f64 x x)) (*.f64 2/5 (pow.f64 x 5))) (*.f64 2/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (pow.f64 x 7) 2/7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x x) (+.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))) (*.f64 (pow.f64 x 7) 2/7)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2 x (*.f64 2/3 (pow.f64 x 3))) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 (pow.f64 x 7) 2/7)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))) (cbrt.f64 (pow.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))) 2)) (cbrt.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 7) 2/7 (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))) 2)) (cbrt.f64 (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))) (*.f64 (pow.f64 x 7) 2/7))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))) (cbrt.f64 (pow.f64 (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))) 2)) (*.f64 (pow.f64 x 7) 2/7))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))) (*.f64 (pow.f64 x 7) 2/7))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 7) (cbrt.f64 2/7)) (cbrt.f64 4/49) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 7)) (*.f64 (cbrt.f64 (pow.f64 x (*.f64 2 7))) 2/7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 7) (sqrt.f64 2/7)) (sqrt.f64 2/7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 x 7) 2/7)) (cbrt.f64 (*.f64 (pow.f64 x (*.f64 2 7)) 4/49)) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2/7 (pow.f64 x 7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))) 1 (*.f64 (pow.f64 x 7) 2/7))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))) (*.f64 (pow.f64 x 7) 2/7))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (pow.f64 x 7) 2/7) (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 7) 2/7) 1 (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))))))"]],"rules":[["egg-rr",42],["egg-rr",42],["egg-rr",30]],"time":31.23193359375,"type":"rewrite"},{"count":[[138,128]],"inputs":[["(*.f64 2/3 (pow.f64 x 3))","(+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3)))","(+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3)))","(+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3)))","(*.f64 2/5 (pow.f64 x 5))","(+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))","(*.f64 2/5 (pow.f64 x 5))","(+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 2/3 (pow.f64 x 3)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5))))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2 x) (+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))))","(*.f64 2/7 (pow.f64 x 7))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3)))))","(*.f64 2/7 (pow.f64 x 7))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2/3 (pow.f64 x 3))","(+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3)))","(fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3)))","(fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3)))","(fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))","(*.f64 2/5 (pow.f64 x 5))","(+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))","(*.f64 2/5 (pow.f64 x 5))","(+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 2/3 (pow.f64 x 3)))","(fma.f64 (pow.f64 x 3) 2/3 (*.f64 2 x))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5))))","(fma.f64 2 x (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2 x) (+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))))","(fma.f64 2 x (fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))","(*.f64 2/7 (pow.f64 x 7))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/7 (pow.f64 x 7) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3))))","(fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3)))))","(fma.f64 2 x (fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))","(*.f64 2/7 (pow.f64 x 7))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/7 (pow.f64 x 7) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3))))","(fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3)))))","(fma.f64 2 x (fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))"]],"time":96.904052734375,"type":"simplify"},{"compiler":[[3086,2517]],"time":47.890869140625,"type":"eval"},{"alts":[["(*.f64 1/2 (fma.f64 2 x (fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))))","next",0.06505924734522824],["(*.f64 1/2 (log.f64 (/.f64 (-.f64 -1 x) (+.f64 -1 x))))","done",58.91045238156443]],"compiler":[[21,17],[11,9],[21,17]],"count":[[130,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[128,1],"picked":[1,0]}],"min-error":[0.0078125],"time":36.633056640625,"type":"prune"},{"compiler":[[87,69]],"locations":[["(fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))",0.08203125,false],["(*.f64 2/5 (pow.f64 x 5))",0.0859375,false]],"time":21.403076171875,"type":"localize"},{"compiler":[[1796,1474]],"time":27.19482421875,"type":"eval"},{"alts":[["(*.f64 1/2 (fma.f64 2 x (fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))))","done",0.06505924734522824],["(*.f64 1/2 (log.f64 (/.f64 (-.f64 -1 x) (+.f64 -1 x))))","done",58.91045238156443]],"compiler":[[21,17],[11,9]],"count":[[75,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[73,0],"picked":[1,1]}],"min-error":[0.0078125],"time":15.924072265625,"type":"prune"},{"accuracy":[0.06505924734522824],"baseline":[0.06505924734522824],"branch":[["x",0.06505924734522824,1],["(*.f64 (/.f64 1 2) (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))",0.06505924734522824,1],["(log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))",0.06505924734522824,1],["(/.f64 (+.f64 1 x) (-.f64 1 x))",0.06505924734522824,1]],"compiler":[[2,1],[13,11],[9,7],[8,6],[63,51]],"count":[[4,1]],"inputs":[["(*.f64 1/2 (fma.f64 2 x (fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))))","(*.f64 1/2 (fma.f64 (pow.f64 x 7) 2/7 (fma.f64 x 2 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))))","(*.f64 1/2 (log.f64 (/.f64 (-.f64 -1 x) (+.f64 -1 x))))","(*.f64 (/.f64 1 2) (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))"]],"link":["."],"name":["Hyperbolic arc-(co)tangent"],"oracle":[58.96769912890966],"outputs":[["(*.f64 1/2 (fma.f64 2 x (fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))))"]],"time":9.594970703125,"times":[["x",2.610107421875],["(*.f64 (/.f64 1 2) (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))",1.81591796875],["(log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))",1.7978515625],["(/.f64 (+.f64 1 x) (-.f64 1 x))",1.764892578125]],"type":"regimes"},{"compiler":[[21,17]],"inputs":[["(*.f64 1/2 (fma.f64 2 x (fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (fma.f64 2 x (fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))))"]],"stop":[["done",1]],"time":20.175048828125,"type":"simplify"},{"time":0.02197265625,"type":"soundness"},{"compiler":[[21,17]],"remove-preprocessing":[[]],"time":13.3359375,"type":"end"}]
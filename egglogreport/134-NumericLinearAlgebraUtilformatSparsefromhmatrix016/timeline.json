[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.7658531109336764,0.15024379501119256,0.08390309405513108],[11,0.7512189750559628,0.1775608486495912,0.07122017629444599],[10,0.6595117235556245,0.28878028132021427,0.05170799512416124],[9,0.6321946699172258,0.33560951612889767,0.032195813953876495],[8,0.45268260315060616,0.5307313278317451,0.016586069017648697],[7,0.40585336834192276,0.5931703075766563,0.0009763240814208984],[6,0.0,0.9990236759185791,0.0009763240814208984],[5,0.0,0.9990236759185791,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":34.173095703125,"type":"analyze"},{"outcomes":[["body",256,"invalid",14.866455078125,433],["body",256,"valid",278.052490234375,8256]],"time":300.743896484375,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 x))","(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 x))"]],"symmetry":[[]],"time":56.555908203125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))"]],"time":18.877197265625,"type":"simplify"},{"compiler":[[16,9]],"time":0.322021484375,"type":"eval"},{"alts":[["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","next",0.0078125]],"compiler":[[9,6],[9,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[0.0078125],"time":1.89599609375,"type":"prune"},{"compiler":[[20,6]],"locations":[["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))",0.0078125,true]],"time":4.160888671875,"type":"localize"},{"count":[[1,8]],"series":[["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","y","-inf",0.679931640625],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","y","inf",0.413818359375],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","y","0",0.278076171875],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","x","-inf",0.510986328125],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","x","inf",0.43603515625],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","x","0",0.44091796875]],"time":2.8369140625,"type":"series"},{"count":[[1,70]],"inputs":[["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 0) (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) (*.f64 0 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (fabs.f64 y))) (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fabs.f64 (-.f64 y x))) (cbrt.f64 (neg.f64 (fabs.f64 y)))) (/.f64 (neg.f64 (pow.f64 (-.f64 x y) 2/3)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fabs.f64 (-.f64 y x))) -1) (/.f64 (neg.f64 (pow.f64 (-.f64 x y) 2/3)) (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 y 2/3)) (/.f64 (pow.f64 (-.f64 x y) 2/3) (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) 1) (/.f64 (pow.f64 (-.f64 x y) 2/3) (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fabs.f64 (cbrt.f64 y))) (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fabs.f64 (cbrt.f64 y))) (/.f64 (neg.f64 (fabs.f64 (-.f64 y x))) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fabs.f64 (-.f64 y x))) (fabs.f64 (cbrt.f64 y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 (cbrt.f64 y))) (pow.f64 (cbrt.f64 (fabs.f64 y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (fabs.f64 (cbrt.f64 y))) (/.f64 (cbrt.f64 (fabs.f64 (-.f64 y x))) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fabs.f64 (-.f64 y x))) (/.f64 -1 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (-.f64 y x)) (/.f64 1 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fabs.f64 y)) (fabs.f64 (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fabs.f64 y)) (neg.f64 (fabs.f64 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fabs.f64 y) -1/3)) (/.f64 (fabs.f64 (-.f64 y x)) (neg.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (fabs.f64 (-.f64 y x)))) (cbrt.f64 (fabs.f64 y))) (/.f64 (pow.f64 (-.f64 x y) 2/3) (neg.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (fabs.f64 (-.f64 y x)))) 1) (/.f64 (pow.f64 (-.f64 x y) 2/3) (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (fabs.f64 y)) (pow.f64 (-.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fabs.f64 (-.f64 y x))) -1) (/.f64 (pow.f64 (-.f64 x y) 2/3) (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fabs.f64 (-.f64 y x))) (fabs.f64 y)) (pow.f64 (-.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 (-.f64 y x)) -1) (/.f64 -1 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 x y) 2/3) (/.f64 (cbrt.f64 (fabs.f64 (-.f64 y x))) (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fabs.f64 y) -1/3) (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) -1) (/.f64 (pow.f64 (-.f64 x y) 2/3) (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (fabs.f64 (cbrt.f64 y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) -1) (/.f64 (cbrt.f64 (fabs.f64 (-.f64 y x))) (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fabs.f64 (-.f64 y x))) (/.f64 (pow.f64 (-.f64 x y) 2/3) (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (pow.f64 (fabs.f64 y) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (fabs.f64 y)) (cbrt.f64 (fabs.f64 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) (pow.f64 (cbrt.f64 (fabs.f64 y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fabs.f64 y) -1/3)) (/.f64 (neg.f64 (fabs.f64 (-.f64 y x))) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fabs.f64 y)) -2) (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (pow.f64 y 2/3)) (/.f64 (neg.f64 (fabs.f64 (-.f64 y x))) (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fabs.f64 (-.f64 y x))) (pow.f64 y 2/3)) (/.f64 (pow.f64 (-.f64 x y) 2/3) (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (cbrt.f64 (fabs.f64 y))) (/.f64 (cbrt.f64 (fabs.f64 (-.f64 y x))) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fabs.f64 (-.f64 y x))) (neg.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (neg.f64 (fabs.f64 (-.f64 y x))))) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (fabs.f64 (-.f64 y x)))) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fabs.f64 y) -1/3) (fabs.f64 (-.f64 y x))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (pow.f64 (-.f64 x y) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (fabs.f64 (-.f64 y x)))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (fabs.f64 (-.f64 y x))) (cbrt.f64 (fabs.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (pow.f64 y 2/3))) (cbrt.f64 (pow.f64 y 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fabs.f64 (-.f64 y x)) -1) (neg.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 3))))))"]],"rules":[["egg-rr",70]],"time":23.01513671875,"type":"rewrite"},{"count":[[78,73]],"inputs":[["(/.f64 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))) (fabs.f64 y))","(/.f64 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))) (fabs.f64 y))","(/.f64 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))) (fabs.f64 y))","(/.f64 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 (*.f64 -1 y) x)) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 (*.f64 -1 y) x)) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 (*.f64 -1 y) x)) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 (*.f64 -1 y) x)) (fabs.f64 y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","(/.f64 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","(/.f64 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","(/.f64 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 (*.f64 -1 y) x)) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 (*.f64 -1 y) x)) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 (*.f64 -1 y) x)) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 (*.f64 -1 y) x)) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))"]],"time":36.911865234375,"type":"simplify"},{"compiler":[[1029,330]],"time":8.947998046875,"type":"eval"},{"alts":[["(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))","next",2.435457836182486],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","done",0.0078125]],"compiler":[[21,14],[9,6],[21,14]],"count":[[74,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[73,1],"picked":[1,1]}],"min-error":[0.00390625],"time":10.239013671875,"type":"prune"},{"compiler":[[73,17]],"locations":[["(cbrt.f64 (fabs.f64 y))",0.09375,true],["(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))",0.14453125,true],["(/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y)))",0.1640625,true],["(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)",2.4210787708309396,true]],"time":14.98095703125,"type":"localize"},{"count":[[4,84]],"series":[["(cbrt.f64 (fabs.f64 y))","y","-inf",0.949951171875],["(cbrt.f64 (fabs.f64 y))","y","inf",0.93603515625],["(cbrt.f64 (fabs.f64 y))","y","0",0.951171875],["(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))","y","-inf",1.961181640625],["(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))","y","inf",1.7900390625],["(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))","y","0",1.199951171875],["(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))","x","-inf",1.80908203125],["(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))","x","inf",1.76611328125],["(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))","x","0",4.632080078125],["(/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y)))","y","-inf",1.52099609375],["(/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y)))","y","inf",1.533935546875],["(/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y)))","y","0",1.052978515625],["(/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y)))","x","-inf",0.43896484375],["(/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y)))","x","inf",0.369140625],["(/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y)))","x","0",1.677001953125],["(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","x","-inf",8.618896484375],["(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","x","inf",18.6240234375],["(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","x","0",6.72021484375],["(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","y","-inf",9.27587890625],["(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","y","inf",13.20703125],["(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","y","0",17.583984375]],"time":97.01708984375,"type":"series"},{"count":[[4,210]],"inputs":[["(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y)))","(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))","(cbrt.f64 (fabs.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) 0) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (*.f64 0 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 x y) 2/3) (pow.f64 (fabs.f64 y) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) 2/3) (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fabs.f64 y) -2/3) (pow.f64 (-.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fabs.f64 y) -2/3)) (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2/3)) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (fabs.f64 y))) (cbrt.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 x y) 2/3) (*.f64 (neg.f64 (pow.f64 (fabs.f64 y) -1/3)) (neg.f64 (pow.f64 (fabs.f64 y) -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 x y) 2/3) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (fabs.f64 (cbrt.f64 (-.f64 x y)))) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (neg.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))))) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (cbrt.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (fabs.f64 (cbrt.f64 (-.f64 x y)))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (cbrt.f64 (cbrt.f64 (pow.f64 y 4)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (*.f64 (pow.f64 y 2/3) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (cbrt.f64 (pow.f64 y 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))))) (cbrt.f64 (cbrt.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (neg.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))))) (*.f64 (cbrt.f64 (pow.f64 y 2/3)) (cbrt.f64 (neg.f64 (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (fabs.f64 (cbrt.f64 (-.f64 x y)))) (cbrt.f64 (*.f64 (pow.f64 y 2/3) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))))) (*.f64 (cbrt.f64 (fabs.f64 y)) (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (-.f64 x y) 2/3)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (fabs.f64 (cbrt.f64 (-.f64 x y)))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))))) (*.f64 (cbrt.f64 (neg.f64 (fabs.f64 y))) (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))) 2) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) 0) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (*.f64 0 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (cbrt.f64 (neg.f64 (fabs.f64 y)))) (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (fabs.f64 y) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fabs.f64 y) -1/3) (fabs.f64 (cbrt.f64 (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))) (cbrt.f64 (pow.f64 (fabs.f64 y) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))) (cbrt.f64 (*.f64 (pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) 2/3) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (pow.f64 y 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (cbrt.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fabs.f64 (cbrt.f64 (-.f64 x y)))) (cbrt.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fabs.f64 (cbrt.f64 (-.f64 x y)))) (neg.f64 (pow.f64 (fabs.f64 y) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fabs.f64 y) -1/3)) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (pow.f64 (fabs.f64 y) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))) (cbrt.f64 (pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) 1) (*.f64 (cbrt.f64 (pow.f64 y 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (cbrt.f64 (neg.f64 (fabs.f64 (cbrt.f64 (-.f64 x y)))))) (neg.f64 (cbrt.f64 (cbrt.f64 (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (cbrt.f64 (pow.f64 (-.f64 x y) 2/3))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (fabs.f64 y) -1/3)) (fabs.f64 (cbrt.f64 (-.f64 x y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))))) (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) 1) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) 1) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) -1) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))) 1) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))) (neg.f64 (cbrt.f64 (cbrt.f64 (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (fabs.f64 (cbrt.f64 (-.f64 x y))))) (neg.f64 (cbrt.f64 (cbrt.f64 (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (cbrt.f64 (pow.f64 y 2/3)))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 y 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fabs.f64 (cbrt.f64 (-.f64 x y)))) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (fabs.f64 (cbrt.f64 (-.f64 x y)))) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (neg.f64 (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (fabs.f64 y))))) (cbrt.f64 (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))))) (neg.f64 (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 (fabs.f64 (-.f64 y x)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)) (cbrt.f64 (fabs.f64 y))))) (cbrt.f64 (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 0) (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) (*.f64 0 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (fabs.f64 y))) (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fabs.f64 (-.f64 y x))) (/.f64 -1 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fabs.f64 y) -1/3) (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (fabs.f64 (-.f64 y x)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)) (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (pow.f64 (fabs.f64 y) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) (pow.f64 (fabs.f64 y) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fabs.f64 (-.f64 y x))) (pow.f64 (neg.f64 (pow.f64 (fabs.f64 y) -1/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fabs.f64 y) -1/3) (pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (fabs.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))) (pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))) (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (*.f64 (pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) 2/3) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (/.f64 (pow.f64 (-.f64 x y) 2/3) (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (/.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (-.f64 y x)) (/.f64 1 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fabs.f64 y)) (fabs.f64 (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (pow.f64 (fabs.f64 y) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (fabs.f64 (cbrt.f64 (-.f64 x y)))) (neg.f64 (pow.f64 (fabs.f64 y) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (fabs.f64 (-.f64 y x)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)) (cbrt.f64 (fabs.f64 y)))) 1) (*.f64 (cbrt.f64 (pow.f64 y 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fabs.f64 (-.f64 y x))) (neg.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (fabs.f64 (cbrt.f64 (-.f64 x y)))) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 (fabs.f64 (-.f64 y x)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)) (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fabs.f64 y) -1/3) (fabs.f64 (-.f64 y x))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) -1) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (pow.f64 (-.f64 x y) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (/.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (pow.f64 y 2/3)))) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (fabs.f64 y) -1/3)) (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fabs.f64 (cbrt.f64 (-.f64 x y)))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (fabs.f64 (cbrt.f64 (-.f64 x y)))) 1) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (fabs.f64 (-.f64 y x)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)) (cbrt.f64 (fabs.f64 y)))) 1) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 (fabs.f64 (-.f64 y x)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)) (cbrt.f64 (fabs.f64 y)))) 1) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 (fabs.f64 (-.f64 y x)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)) (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) -1) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (cbrt.f64 (pow.f64 y 2/3))) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (fabs.f64 (-.f64 y x))) (cbrt.f64 (fabs.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (fabs.f64 (cbrt.f64 (-.f64 x y)))) 1) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (*.f64 (cbrt.f64 (pow.f64 y 2/3)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fabs.f64 (-.f64 y x)) -1) (neg.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (cbrt.f64 (pow.f64 y 4)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (*.f64 (pow.f64 y 2/3) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (pow.f64 y 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) 3) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (fabs.f64 y) -1/3)) (fabs.f64 (-.f64 y x))) (*.f64 (cbrt.f64 (pow.f64 y 2/3)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 (fabs.f64 (-.f64 y x)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)) (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (cbrt.f64 (pow.f64 y 2/3)))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 y 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (fabs.f64 (cbrt.f64 (-.f64 x y)))) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (neg.f64 (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 (*.f64 (fabs.f64 (-.f64 y x)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)) (cbrt.f64 (fabs.f64 y))))) (neg.f64 (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (cbrt.f64 (neg.f64 (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (fabs.f64 y)) 0) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fabs.f64 y)) (*.f64 (cbrt.f64 (fabs.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fabs.f64 y)) (*.f64 0 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fabs.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 y 2/3)) (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (neg.f64 (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fabs.f64 (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (fabs.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (fabs.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fabs.f64 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fabs.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fabs.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fabs.f64 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fabs.f64 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (fabs.f64 y))))))"]],"rules":[["egg-rr",22],["egg-rr",83],["egg-rr",54],["egg-rr",51]],"time":48.97802734375,"type":"rewrite"},{"count":[[294,220]],"inputs":[["(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(*.f64 (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3) (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))))","(*.f64 (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3) (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))))","(*.f64 (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3) (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))))","(*.f64 (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3) (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(*.f64 (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3) (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)))","(*.f64 (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3) (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)))","(*.f64 (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3) (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)))","(*.f64 (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3) (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) 1) 1/3) (/.f64 (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) 1) 1/3) (/.f64 (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) 1) 1/3) (/.f64 (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) 1) 1/3) (/.f64 (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) 1) 1/3) (/.f64 (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) 1) 1/3) (/.f64 (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) 1) 1/3) (/.f64 (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) 1) 1/3) (/.f64 (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)) (fabs.f64 y)))","(pow.f64 (fabs.f64 y) 1/3)","(pow.f64 (fabs.f64 y) 1/3)","(pow.f64 (fabs.f64 y) 1/3)","(pow.f64 (fabs.f64 y) 1/3)","(pow.f64 (fabs.f64 y) 1/3)","(pow.f64 (fabs.f64 y) 1/3)","(pow.f64 (fabs.f64 y) 1/3)","(pow.f64 (fabs.f64 y) 1/3)","(pow.f64 (fabs.f64 y) 1/3)","(pow.f64 (fabs.f64 y) 1/3)","(pow.f64 (fabs.f64 y) 1/3)","(pow.f64 (fabs.f64 y) 1/3)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3) (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3) (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3) (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3) (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3) (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3) (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3) (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (pow.f64 (/.f64 1 (fabs.f64 y)) 1/3) (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)))","(cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) 1) 1/3) (/.f64 (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) 1) 1/3) (/.f64 (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) 1) 1/3) (/.f64 (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) 1) 1/3) (/.f64 (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) 1) 1/3) (/.f64 (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) 1) 1/3) (/.f64 (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) 1) 1/3) (/.f64 (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) 1) 1/3) (/.f64 (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(pow.f64 (fabs.f64 y) 1/3)","(cbrt.f64 (fabs.f64 y))","(pow.f64 (fabs.f64 y) 1/3)","(cbrt.f64 (fabs.f64 y))","(pow.f64 (fabs.f64 y) 1/3)","(cbrt.f64 (fabs.f64 y))","(pow.f64 (fabs.f64 y) 1/3)","(cbrt.f64 (fabs.f64 y))","(pow.f64 (fabs.f64 y) 1/3)","(cbrt.f64 (fabs.f64 y))","(pow.f64 (fabs.f64 y) 1/3)","(cbrt.f64 (fabs.f64 y))","(pow.f64 (fabs.f64 y) 1/3)","(cbrt.f64 (fabs.f64 y))","(pow.f64 (fabs.f64 y) 1/3)","(cbrt.f64 (fabs.f64 y))","(pow.f64 (fabs.f64 y) 1/3)","(cbrt.f64 (fabs.f64 y))","(pow.f64 (fabs.f64 y) 1/3)","(cbrt.f64 (fabs.f64 y))","(pow.f64 (fabs.f64 y) 1/3)","(cbrt.f64 (fabs.f64 y))","(pow.f64 (fabs.f64 y) 1/3)","(cbrt.f64 (fabs.f64 y))"]],"time":254.6240234375,"type":"simplify"},{"compiler":[[5131,1552]],"time":35.097900390625,"type":"eval"},{"alts":[["(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)))","next",9.617851269536883],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","done",0.0078125]],"compiler":[[22,15],[9,6],[22,15]],"count":[[222,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[220,1],"picked":[1,0]}],"min-error":[0],"time":48.26416015625,"type":"prune"},{"compiler":[[84,21]],"locations":[["(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)",0.13119125976844204,true],["(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)))",0.14453125,true],["(/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y)))",0.1640625,false],["(cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2))",9.076612798538877,true]],"time":14.2587890625,"type":"localize"},{"count":[[3,72]],"series":[["(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","x","-inf",0.366943359375],["(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","x","inf",0.3720703125],["(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","x","0",0.27099609375],["(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","y","-inf",0.363037109375],["(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","y","inf",0.365966796875],["(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","y","0",0.362060546875],["(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)))","y","-inf",1.212890625],["(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)))","y","inf",1.1630859375],["(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)))","y","0",1.1689453125],["(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)))","x","-inf",1.205078125],["(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)))","x","inf",1.302001953125],["(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)))","x","0",1.3349609375],["(cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2))","x","-inf",1.34912109375],["(cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2))","x","inf",1.3310546875],["(cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2))","x","0",1.02197265625],["(cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2))","y","-inf",1.949951171875],["(cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2))","y","inf",1.60693359375],["(cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2))","y","0",1.552001953125]],"time":18.623046875,"type":"series"},{"count":[[3,237]],"inputs":[["(cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2))","(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) 0) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (*.f64 0 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2/3)) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (fabs.f64 y))) (cbrt.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 x y) 2/3) (pow.f64 (fabs.f64 y) (neg.f64 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fabs.f64 y) (neg.f64 2/3)) (pow.f64 (-.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) -1) (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))) (cbrt.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 4)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (-.f64 x y) 2) (fabs.f64 y))) (pow.f64 (fabs.f64 y) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 x y) 2/3) (*.f64 (neg.f64 (pow.f64 (fabs.f64 y) -1/3)) (neg.f64 (pow.f64 (fabs.f64 y) -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (+.f64 2 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 4))) (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fabs.f64 y) (neg.f64 2/3))) (pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 x y) 2/3) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)))) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (fabs.f64 (cbrt.f64 (-.f64 x y)))) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (neg.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))))) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (fabs.f64 (cbrt.f64 (-.f64 x y)))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (*.f64 (pow.f64 y 2/3) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (cbrt.f64 (pow.f64 y 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (cbrt.f64 (cbrt.f64 (pow.f64 y 4)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) 2) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (-.f64 x y) 2/3)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))))) (*.f64 (cbrt.f64 (fabs.f64 y)) (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (fabs.f64 (cbrt.f64 (-.f64 x y)))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))))) (*.f64 (cbrt.f64 (neg.f64 (fabs.f64 y))) (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (neg.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))))) (*.f64 (cbrt.f64 (pow.f64 y 2/3)) (cbrt.f64 (neg.f64 (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (fabs.f64 (cbrt.f64 (-.f64 x y)))) (cbrt.f64 (*.f64 (pow.f64 y 2/3) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))))) (cbrt.f64 (cbrt.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (pow.f64 (-.f64 x y) 2) (fabs.f64 y))) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (pow.f64 (-.f64 x y) 2))) (cbrt.f64 (neg.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 x y) 2)) (fabs.f64 y))) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 0) (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) (*.f64 0 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (fabs.f64 y))) (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fabs.f64 (-.f64 y x))) (/.f64 -1 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) (pow.f64 (fabs.f64 y) (neg.f64 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (pow.f64 (fabs.f64 y) (neg.f64 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (fabs.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fabs.f64 (-.f64 y x))) (pow.f64 (neg.f64 (pow.f64 (fabs.f64 y) -1/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))) (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 4)) (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (/.f64 (pow.f64 (-.f64 x y) 2/3) (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (/.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (-.f64 y x)) (/.f64 1 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fabs.f64 y)) (fabs.f64 (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (pow.f64 (fabs.f64 y) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fabs.f64 y) -1/3) (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (neg.f64 (pow.f64 (fabs.f64 y) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (*.f64 (pow.f64 y 2/3) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (pow.f64 y 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (*.f64 (cbrt.f64 (pow.f64 y 2/3)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (fabs.f64 y) -1/3)) (fabs.f64 (-.f64 y x))) (*.f64 (cbrt.f64 (pow.f64 y 2/3)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fabs.f64 (-.f64 y x))) (neg.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)))) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fabs.f64 y) -1/3) (fabs.f64 (-.f64 y x))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) -1) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (pow.f64 (-.f64 x y) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (fabs.f64 y) -1/3)) (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (/.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (pow.f64 y 2/3)))) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fabs.f64 (cbrt.f64 (-.f64 x y)))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) 1) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) 1) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (cbrt.f64 (pow.f64 y 4)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fabs.f64 (-.f64 y x)) -1) (neg.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (fabs.f64 (-.f64 y x))) (cbrt.f64 (fabs.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) 1) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) -1) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (pow.f64 y 2/3))) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) 1) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) 3) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) 1) (*.f64 (cbrt.f64 (pow.f64 y 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (neg.f64 (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (cbrt.f64 (pow.f64 y 2/3)))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 y 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))) (neg.f64 (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (neg.f64 (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2) (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2) 0) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2) (*.f64 0 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))))) (*.f64 (/.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (pow.f64 y 2/3))) (/.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (pow.f64 y 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))) (cbrt.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)))) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (-.f64 x y) 2) (fabs.f64 y)) (/.f64 1 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (-.f64 y x)) (/.f64 (fabs.f64 (-.f64 y x)) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 x y) 2) (pow.f64 (fabs.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 4)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 x y) 2/3) (*.f64 (/.f64 (pow.f64 (-.f64 x y) 2/3) (fabs.f64 y)) (/.f64 (pow.f64 (-.f64 x y) 2/3) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fabs.f64 y) -2) (pow.f64 (-.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 x y) 2) (*.f64 (/.f64 -1 (fabs.f64 y)) (/.f64 -1 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fabs.f64 y) (neg.f64 2/3)) (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) -1) (*.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) 1) (*.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (-.f64 x y) 2)) (/.f64 1 (neg.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 x y) 2)) (fabs.f64 y)) (/.f64 -1 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (neg.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 4)) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (pow.f64 (fabs.f64 y) (neg.f64 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))) (cbrt.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2) (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 4))) (*.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 4)) (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 4)) (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) -1) (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))) (*.f64 (cbrt.f64 (neg.f64 (fabs.f64 y))) (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))) (*.f64 (cbrt.f64 (fabs.f64 y)) (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))) (cbrt.f64 (cbrt.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)))) (*.f64 (cbrt.f64 (pow.f64 y 2/3)) (cbrt.f64 (neg.f64 (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (cbrt.f64 (*.f64 (pow.f64 y 2/3) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (-.f64 x y) 2) (fabs.f64 y)) (fabs.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 x y) 2)) (fabs.f64 y)) (neg.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (-.f64 x y) 2)) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 x y) 2) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)))) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y))))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (pow.f64 (-.f64 x y) 2) (fabs.f64 y))) (fabs.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (neg.f64 (pow.f64 (-.f64 x y) 2))) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (neg.f64 (pow.f64 (-.f64 x y) 2)) (fabs.f64 y))) (neg.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (-.f64 x y) 2) (fabs.f64 y)) -1) (neg.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (-.f64 x y) 2) (fabs.f64 y)) (pow.f64 (fabs.f64 y) -1/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (-.f64 x y) 2) (fabs.f64 y)) 1) (fabs.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (+.f64 2 3))) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (fabs.f64 (cbrt.f64 (-.f64 x y)))) (pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (+.f64 2 3))) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (cbrt.f64 (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (-.f64 x y) 2)) 1) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 x y) 2)) (fabs.f64 y)) 1) (neg.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (-.f64 x y) 2) (fabs.f64 y)) 1) (fabs.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (-.f64 x y) 2) (fabs.f64 y)) (pow.f64 y 2/3)) (cbrt.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (-.f64 x y) 2) (fabs.f64 y)) (cbrt.f64 (fabs.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (-.f64 x y) 2) (fabs.f64 y)) -1) (neg.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (-.f64 x y) 2) (fabs.f64 y)) (fabs.f64 (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (-.f64 x y) 2) (fabs.f64 y)) (cbrt.f64 (cbrt.f64 (fabs.f64 y)))) (*.f64 (cbrt.f64 (pow.f64 y 2/3)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 x y) 2)) (fabs.f64 y)) (cbrt.f64 (neg.f64 (fabs.f64 y)))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 x y) 2)) (fabs.f64 y)) (cbrt.f64 (fabs.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 x y) 2)) (fabs.f64 y)) 1) (neg.f64 (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 x y) 2)) (fabs.f64 y)) -1) (fabs.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (-.f64 x y) 2)) 1) (*.f64 (neg.f64 (*.f64 y y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fabs.f64 (-.f64 y x)) (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (*.f64 (fabs.f64 y) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (cbrt.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) (neg.f64 (fabs.f64 (-.f64 y x)))) (*.f64 (pow.f64 y 2/3) (neg.f64 (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y))) (fabs.f64 (-.f64 y x))) (*.f64 (pow.f64 y 2/3) (fabs.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (fabs.f64 (-.f64 y x))) (/.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (fabs.f64 y)))) (*.f64 (neg.f64 (fabs.f64 y)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (neg.f64 (pow.f64 (-.f64 x y) 2))) (*.f64 1 (neg.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3)) (/.f64 (fabs.f64 (-.f64 y x)) (pow.f64 y 2/3))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 x y) 2)) (fabs.f64 y))) (fabs.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))) (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) (neg.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 6))))))"]],"rules":[["egg-rr",98],["egg-rr",80],["egg-rr",59]],"time":44.1259765625,"type":"rewrite"},{"count":[[309,247]],"inputs":[["(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) 1) 1/3) (/.f64 (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) 1) 1/3) (/.f64 (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) 1) 1/3) (/.f64 (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) 1) 1/3) (/.f64 (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) 1) 1/3) (/.f64 (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) 1) 1/3) (/.f64 (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) 1) 1/3) (/.f64 (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)) (fabs.f64 y)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) 1) 1/3) (/.f64 (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)) (fabs.f64 y)))","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2))","(/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(pow.f64 (/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2)) 1/3)","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) 1) 1/3) (/.f64 (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) 1) 1/3) (/.f64 (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) 1) 1/3) (/.f64 (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) 1) 1/3) (/.f64 (fabs.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 y (*.f64 -1 x))) 1/3) (cbrt.f64 -1))) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (/.f64 (fabs.f64 (pow.f64 (-.f64 x y) 1/3)) (fabs.f64 y)) (pow.f64 (*.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) 1) 1/3) (/.f64 (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) 1) 1/3) (/.f64 (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) 1) 1/3) (/.f64 (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) 1) 1/3) (/.f64 (fabs.f64 (pow.f64 (+.f64 (*.f64 -1 y) x) 1/3)) (fabs.f64 y)))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)","(/.f64 (pow.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) 2) (pow.f64 (fabs.f64 y) 2))","(pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)"]],"time":221.35400390625,"type":"simplify"},{"compiler":[[7677,2378]],"time":58.423095703125,"type":"eval"},{"alts":[["(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)))","done",9.617851269536883],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","done",0.0078125]],"compiler":[[22,15],[9,6]],"count":[[306,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[304,0],"picked":[1,1]}],"min-error":[0],"time":74.1650390625,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["y",0.0078125,1],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))",0.0078125,1]],"compiler":[[3,2],[3,2],[9,6],[48,20]],"count":[[3,1]],"inputs":[["(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (cbrt.f64 (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2)))","(*.f64 (/.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (cbrt.f64 (fabs.f64 y))) (pow.f64 (/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y)) 2/3))","(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))"]],"link":["."],"name":["Numeric.LinearAlgebra.Util:formatSparse from hmatrix-0.16.1.5"],"oracle":[10.90272411117394],"outputs":[["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))"]],"time":9.02197265625,"times":[["x",2.924072265625],["y",3.050048828125],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))",2.048828125]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))"]],"stop":[["done",1]],"time":19.237060546875,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.698974609375,"type":"end"}]
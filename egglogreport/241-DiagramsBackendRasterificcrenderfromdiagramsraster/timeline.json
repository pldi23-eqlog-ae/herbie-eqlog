[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.4680636897137447,0.4407599744804429,0.09117633580581241],[11,0.41345625924714113,0.5148700586851191,0.07167368206773972],[10,0.34324670579007943,0.600681735132639,0.05607155907728156],[9,0.2496339678473305,0.7176976575610752,0.03266837459159433],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":86.449951171875,"type":"analyze"},{"outcomes":[["body",256,"invalid",52.687255859375,1292],["body",256,"valid",334.124755859375,8256]],"time":396.14892578125,"type":"sample"},{"compiler":[[12,8]],"inputs":[["0","1","2"],["(+.f64 (*.f64 x y) (*.f64 (-.f64 1 x) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 y) z))","(+.f64 (*.f64 z y) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 x z) (*.f64 (-.f64 1 x) y))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (*.f64 x y) (*.f64 (-.f64 1 x) z))","(fma.f64 x y (*.f64 (-.f64 1 x) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 y) z))","(fma.f64 y x (*.f64 (-.f64 1 y) z))","(+.f64 (*.f64 z y) (*.f64 (-.f64 1 z) x))","(fma.f64 z y (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 x z) (*.f64 (-.f64 1 x) y))","(fma.f64 x z (*.f64 (-.f64 1 x) y))"]],"symmetry":[[]],"time":71.345947265625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (*.f64 x y) (*.f64 (-.f64 1 x) z))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 x y) (*.f64 (-.f64 1 x) z))","(fma.f64 z (-.f64 1 x) (*.f64 x y))"]],"time":18.032958984375,"type":"simplify"},{"compiler":[[20,11]],"time":0.337158203125,"type":"eval"},{"alts":[["(fma.f64 z (-.f64 1 x) (*.f64 x y))","next",0.01953125]],"compiler":[[11,7],[11,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.01953125],"time":0.85595703125,"type":"prune"},{"compiler":[[21,10]],"locations":[["(fma.f64 z (-.f64 1 x) (*.f64 x y))",0.01953125,true]],"time":5.822021484375,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 z (-.f64 1 x) (*.f64 x y))","y","-inf",0.2578125],["(fma.f64 z (-.f64 1 x) (*.f64 x y))","y","inf",0.26513671875],["(fma.f64 z (-.f64 1 x) (*.f64 x y))","y","0",0.314208984375],["(fma.f64 z (-.f64 1 x) (*.f64 x y))","x","-inf",0.360107421875],["(fma.f64 z (-.f64 1 x) (*.f64 x y))","x","inf",0.515869140625],["(fma.f64 z (-.f64 1 x) (*.f64 x y))","x","0",0.34716796875],["(fma.f64 z (-.f64 1 x) (*.f64 x y))","z","-inf",0.373046875],["(fma.f64 z (-.f64 1 x) (*.f64 x y))","z","inf",0.338134765625],["(fma.f64 z (-.f64 1 x) (*.f64 x y))","z","0",0.452880859375]],"time":3.341064453125,"type":"series"},{"count":[[1,39]],"inputs":[["(fma.f64 z (-.f64 1 x) (*.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 z (+.f64 (neg.f64 (*.f64 x z)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) 0) (fma.f64 z (-.f64 1 x) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) (*.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (-.f64 1 x)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 z (-.f64 1 x) (*.f64 x y))) (fma.f64 z (-.f64 1 x) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) (*.f64 0 (fma.f64 z (-.f64 1 x) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x y) z) (neg.f64 (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x y) (*.f64 z (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y))) (pow.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) 2/3) (cbrt.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (-.f64 1 x) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (-.f64 1 x) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 (-.f64 1 x))) (pow.f64 (-.f64 1 x) 2/3) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) (-.f64 1 x)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z (-.f64 1 x))) (cbrt.f64 (pow.f64 (*.f64 z (-.f64 1 x)) 2)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 x) z (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) x) (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (*.f64 x y) 2/3) (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 y)) (pow.f64 y 2/3) (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) y) (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 (*.f64 x y)) (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x y)) (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z (-.f64 1 x)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (-.f64 1 x)) 1 (*.f64 x y))))))"]],"rules":[["egg-rr",39]],"time":21.9990234375,"type":"rewrite"},{"count":[[75,49]],"inputs":[["(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(*.f64 z (-.f64 1 x))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(*.f64 z (-.f64 1 x))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","z","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(*.f64 (+.f64 (*.f64 -1 z) y) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(*.f64 -1 (*.f64 x (+.f64 z (*.f64 -1 y))))","(+.f64 (*.f64 -1 (*.f64 x (+.f64 z (*.f64 -1 y)))) z)","(+.f64 (*.f64 -1 (*.f64 x (+.f64 z (*.f64 -1 y)))) z)","(+.f64 (*.f64 -1 (*.f64 x (+.f64 z (*.f64 -1 y)))) z)","(*.f64 z (-.f64 1 x))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(*.f64 z (-.f64 1 x))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(*.f64 z (-.f64 1 x))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","z","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(fma.f64 (-.f64 y z) x z)","(*.f64 (+.f64 (*.f64 -1 z) y) x)","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(fma.f64 (-.f64 y z) x z)","(*.f64 -1 (*.f64 x (+.f64 z (*.f64 -1 y))))","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 -1 (*.f64 x (+.f64 z (*.f64 -1 y)))) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 -1 (*.f64 x (+.f64 z (*.f64 -1 y)))) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 -1 (*.f64 x (+.f64 z (*.f64 -1 y)))) z)","(fma.f64 (-.f64 y z) x z)","(*.f64 z (-.f64 1 x))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)"]],"time":119.23291015625,"type":"simplify"},{"compiler":[[548,277]],"time":6.94287109375,"type":"eval"},{"alts":[["(fma.f64 z (-.f64 1 x) (*.f64 x y))","done",0.01953125],["(fma.f64 x y (*.f64 z (-.f64 1 x)))","next",0.00390625]],"compiler":[[11,7],[11,7],[11,7]],"count":[[50,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[49,1],"picked":[1,1]}],"min-error":[0],"time":9.09619140625,"type":"prune"},{"compiler":[[23,13]],"locations":[["(fma.f64 x y (*.f64 z (-.f64 1 x)))",0.00390625,true],["(*.f64 z (-.f64 1 x))",0.00390625,true]],"time":5.637939453125,"type":"localize"},{"count":[[2,48]],"series":[["(fma.f64 x y (*.f64 z (-.f64 1 x)))","z","-inf",0.19091796875],["(fma.f64 x y (*.f64 z (-.f64 1 x)))","z","inf",0.1611328125],["(fma.f64 x y (*.f64 z (-.f64 1 x)))","z","0",0.22900390625],["(fma.f64 x y (*.f64 z (-.f64 1 x)))","y","-inf",0.27197265625],["(fma.f64 x y (*.f64 z (-.f64 1 x)))","y","inf",0.2919921875],["(fma.f64 x y (*.f64 z (-.f64 1 x)))","y","0",0.2138671875],["(fma.f64 x y (*.f64 z (-.f64 1 x)))","x","-inf",0.27294921875],["(fma.f64 x y (*.f64 z (-.f64 1 x)))","x","inf",0.22509765625],["(fma.f64 x y (*.f64 z (-.f64 1 x)))","x","0",0.22314453125],["(*.f64 z (-.f64 1 x))","x","-inf",0.156005859375],["(*.f64 z (-.f64 1 x))","x","inf",0.255126953125],["(*.f64 z (-.f64 1 x))","x","0",0.1611328125],["(*.f64 z (-.f64 1 x))","z","-inf",0.557861328125],["(*.f64 z (-.f64 1 x))","z","inf",0.31591796875],["(*.f64 z (-.f64 1 x))","z","0",0.284912109375]],"time":3.97802734375,"type":"series"},{"count":[[2,89]],"inputs":[["(*.f64 z (-.f64 1 x))","(fma.f64 x y (*.f64 z (-.f64 1 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z (-.f64 1 x)) 0) (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (-.f64 1 x)) (*.f64 (*.f64 z (-.f64 1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 z (*.f64 (neg.f64 (*.f64 x z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 z (neg.f64 (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 z (-.f64 1 x))) (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (-.f64 1 x)) (*.f64 0 (*.f64 z (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 x)) (*.f64 (pow.f64 (-.f64 1 x) 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z 2/3) (-.f64 1 x)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 1 x) 2/3) z) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (/.f64 z (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) 1) (/.f64 z (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (/.f64 (-.f64 1 (pow.f64 x 3)) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (-.f64 1 x))) (pow.f64 (*.f64 z (-.f64 1 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (-.f64 1 x)) 2/3) (cbrt.f64 (*.f64 z (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (-.f64 1 x))) (pow.f64 (-.f64 1 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (*.f64 (-.f64 1 x) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 x) 2/3) (*.f64 z (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 z) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (-.f64 1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z (-.f64 1 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (-.f64 1 (pow.f64 x 3))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (-.f64 1 (pow.f64 x 3))) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z (-.f64 1 (pow.f64 x 3))) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (+.f64 -1 (pow.f64 x 3))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 x 3))) (*.f64 (pow.f64 (-.f64 1 x) 2/3) z)) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) z) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 z (-.f64 1 (pow.f64 x 3)))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (-.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (-.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 x -1) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (-.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (pow.f64 z 2/3) (neg.f64 (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z 2/3) (cbrt.f64 z) (neg.f64 (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 z) (neg.f64 (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z 1 (neg.f64 (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 z (neg.f64 (*.f64 x z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 z (+.f64 (neg.f64 (*.f64 x z)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) 0) (fma.f64 z (-.f64 1 x) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) (*.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 z (-.f64 1 x) (*.f64 x y))) (fma.f64 z (-.f64 1 x) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) (*.f64 0 (fma.f64 z (-.f64 1 x) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (-.f64 1 x)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x y) z) (neg.f64 (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x y) (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y))) (pow.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) 2/3) (cbrt.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (-.f64 1 x) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (-.f64 1 x) (*.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) y) (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 y)) (pow.f64 y 2/3) (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (-.f64 1 x) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) (-.f64 1 x)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 z (-.f64 1 x)) 2/3) (cbrt.f64 (*.f64 z (-.f64 1 x))) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 x) (cbrt.f64 z)) (pow.f64 z 2/3) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 x)) (*.f64 (pow.f64 (-.f64 1 x) 2/3) z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 (-.f64 1 x))) (pow.f64 (-.f64 1 x) 2/3) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 x) z (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z (-.f64 1 x))) (pow.f64 (*.f64 z (-.f64 1 x)) 2/3) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (+.f64 x -1) z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (*.f64 z (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (-.f64 1 x)) 1 (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z (-.f64 1 x)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (*.f64 z (-.f64 1 x)))))))"]],"rules":[["egg-rr",39],["egg-rr",50]],"time":26.93994140625,"type":"rewrite"},{"count":[[137,102]],"inputs":[["z","(+.f64 (*.f64 -1 (*.f64 z x)) z)","(+.f64 (*.f64 -1 (*.f64 z x)) z)","(+.f64 (*.f64 -1 (*.f64 z x)) z)","(*.f64 -1 (*.f64 z x))","(+.f64 z (*.f64 -1 (*.f64 z x)))","(+.f64 z (*.f64 -1 (*.f64 z x)))","(+.f64 z (*.f64 -1 (*.f64 z x)))","(*.f64 -1 (*.f64 z x))","(+.f64 z (*.f64 -1 (*.f64 z x)))","(+.f64 z (*.f64 -1 (*.f64 z x)))","(+.f64 z (*.f64 -1 (*.f64 z x)))","z","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(*.f64 (+.f64 (*.f64 -1 z) y) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(*.f64 -1 (*.f64 x (+.f64 z (*.f64 -1 y))))","(+.f64 (*.f64 -1 (*.f64 x (+.f64 z (*.f64 -1 y)))) z)","(+.f64 (*.f64 -1 (*.f64 x (+.f64 z (*.f64 -1 y)))) z)","(+.f64 (*.f64 -1 (*.f64 x (+.f64 z (*.f64 -1 y)))) z)","(*.f64 z (-.f64 1 x))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(*.f64 z (-.f64 1 x))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(*.f64 z (-.f64 1 x))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["z","(+.f64 (*.f64 -1 (*.f64 z x)) z)","(*.f64 z (-.f64 1 x))","(+.f64 (*.f64 -1 (*.f64 z x)) z)","(*.f64 z (-.f64 1 x))","(+.f64 (*.f64 -1 (*.f64 z x)) z)","(*.f64 z (-.f64 1 x))","(*.f64 -1 (*.f64 z x))","(neg.f64 (*.f64 z x))","(+.f64 z (*.f64 -1 (*.f64 z x)))","(*.f64 z (-.f64 1 x))","(+.f64 z (*.f64 -1 (*.f64 z x)))","(*.f64 z (-.f64 1 x))","(+.f64 z (*.f64 -1 (*.f64 z x)))","(*.f64 z (-.f64 1 x))","(*.f64 -1 (*.f64 z x))","(neg.f64 (*.f64 z x))","(+.f64 z (*.f64 -1 (*.f64 z x)))","(*.f64 z (-.f64 1 x))","(+.f64 z (*.f64 -1 (*.f64 z x)))","(*.f64 z (-.f64 1 x))","(+.f64 z (*.f64 -1 (*.f64 z x)))","(*.f64 z (-.f64 1 x))","z","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(fma.f64 (-.f64 y z) x z)","(*.f64 (+.f64 (*.f64 -1 z) y) x)","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) y) x) z)","(fma.f64 (-.f64 y z) x z)","(*.f64 -1 (*.f64 x (+.f64 z (*.f64 -1 y))))","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 -1 (*.f64 x (+.f64 z (*.f64 -1 y)))) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 -1 (*.f64 x (+.f64 z (*.f64 -1 y)))) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 -1 (*.f64 x (+.f64 z (*.f64 -1 y)))) z)","(fma.f64 (-.f64 y z) x z)","(*.f64 z (-.f64 1 x))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(*.f64 z (-.f64 1 x))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(*.f64 z (-.f64 1 x))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 y z) x z)"]],"time":156.001953125,"type":"simplify"},{"compiler":[[1295,704]],"time":17.318115234375,"type":"eval"},{"alts":[["(fma.f64 z (-.f64 1 x) (*.f64 x y))","done",0.01953125],["(fma.f64 x y (*.f64 z (-.f64 1 x)))","done",0.00390625]],"compiler":[[11,7],[11,7]],"count":[[104,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[102,0],"picked":[1,1]}],"min-error":[0],"time":23.828857421875,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["z",0.00390625,1],["(+.f64 (*.f64 x y) (*.f64 (-.f64 1 x) z))",0.00390625,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[28,15]],"count":[[3,1]],"inputs":[["(fma.f64 x y (*.f64 z (-.f64 1 x)))","(fma.f64 z (-.f64 1 x) (*.f64 x y))","(+.f64 (*.f64 x y) (*.f64 (-.f64 1 x) z))"]],"link":["."],"name":["Diagrams.Backend.Rasterific:$crender from diagrams-rasterific-1.3.1.3"],"oracle":[0.0234375],"outputs":[["(fma.f64 x y (*.f64 z (-.f64 1 x)))"]],"time":11.68505859375,"times":[["x",2.609130859375],["y",2.69091796875],["z",2.735107421875],["(+.f64 (*.f64 x y) (*.f64 (-.f64 1 x) z))",2.9111328125]],"type":"regimes"},{"compiler":[[11,7]],"inputs":[["(fma.f64 x y (*.f64 z (-.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x y (*.f64 z (-.f64 1 x)))","(fma.f64 (-.f64 1 x) z (*.f64 x y))"]],"stop":[["done",1]],"time":20.528076171875,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[11,7]],"remove-preprocessing":[[]],"time":8.381103515625,"type":"end"}]
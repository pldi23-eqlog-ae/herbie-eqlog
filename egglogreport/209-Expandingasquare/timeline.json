[{"compiler":[[11,9]],"method":["search"],"sampling":[[12,0.7486577033996582,0.0009760856628417969,0.2503662109375],[11,0.7476816177368164,0.0019521713256835938,0.2503662109375],[10,0.7457294464111328,0.0039043426513671875,0.2503662109375],[9,0.7418251037597656,0.007808685302734375,0.2503662109375],[8,0.7340164184570313,0.01561737060546875,0.2503662109375],[7,0.7183990478515625,0.0312347412109375,0.2503662109375],[6,0.687164306640625,0.062469482421875,0.2503662109375],[5,0.62469482421875,0.12493896484375,0.2503662109375],[4,0.499755859375,0.2498779296875,0.2503662109375],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.47607421875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.061767578125,2],["body",512,"valid",76.318603515625,1375],["body",1024,"valid",218.7529296875,2773],["body",2048,"valid",29.34521484375,282],["body",256,"valid",118.88134765625,3826]],"time":452.322021484375,"type":"sample"},{"compiler":[[10,8]],"inputs":[["0"],["(-.f64 (*.f64 (+.f64 x 1) (+.f64 x 1)) 1)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (*.f64 (+.f64 x 1) (+.f64 x 1)) 1)","(*.f64 (+.f64 x 2) x)"]],"symmetry":[[]],"time":54.0419921875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (*.f64 (+.f64 x 1) (+.f64 x 1)) 1)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 (+.f64 x 1) (+.f64 x 1)) 1)","(*.f64 (+.f64 x 2) x)"]],"time":20.35791015625,"type":"simplify"},{"compiler":[[15,11]],"time":0.403076171875,"type":"eval"},{"alts":[["(*.f64 (+.f64 x 2) x)","next",0.0078125]],"compiler":[[6,4],[6,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.765869140625,"type":"prune"},{"compiler":[[11,7]],"locations":[["(*.f64 (+.f64 x 2) x)",0.0078125,true]],"time":2.7021484375,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 (+.f64 x 2) x)","x","-inf",0.408203125],["(*.f64 (+.f64 x 2) x)","x","inf",0.409912109375],["(*.f64 (+.f64 x 2) x)","x","0",0.55908203125]],"time":1.421875,"type":"series"},{"count":[[1,63]],"inputs":[["(*.f64 (+.f64 x 2) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 x x) -1)) (neg.f64 (*.f64 (+.f64 x x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (+.f64 x x) -1)) (neg.f64 (*.f64 (*.f64 x x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (+.f64 x 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x 2) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x x) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x x) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (+.f64 x 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (+.f64 x 2))) (pow.f64 (+.f64 x 2) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x 2)) (*.f64 (pow.f64 (+.f64 x 2) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (+.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 x 2) 2/3) x) (cbrt.f64 (+.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x 2) 2/3) (*.f64 x (cbrt.f64 (+.f64 x 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (+.f64 x 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 x 3) 8) (cbrt.f64 (+.f64 4 (*.f64 x (+.f64 x -2))))) (/.f64 x (pow.f64 (+.f64 4 (*.f64 x (+.f64 x -2))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (+.f64 4 (*.f64 x (+.f64 x -2))))) (/.f64 (+.f64 (pow.f64 x 3) 8) (pow.f64 (+.f64 4 (*.f64 x (+.f64 x -2))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x 2) x)) (pow.f64 (*.f64 (+.f64 x 2) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 x 2) x) 2/3) (cbrt.f64 (*.f64 (+.f64 x 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x 2) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (+.f64 x 2) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (*.f64 8 x) (pow.f64 x 4)) (cbrt.f64 (+.f64 4 (*.f64 x (+.f64 x -2))))) (pow.f64 (cbrt.f64 (+.f64 4 (*.f64 x (+.f64 x -2)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 8)) (*.f64 (pow.f64 (+.f64 x 2) 2/3) x)) (pow.f64 (+.f64 4 (*.f64 x (+.f64 x -2))) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 4/3) (-.f64 (pow.f64 (+.f64 x x) 2/3) (*.f64 (pow.f64 x 2/3) (cbrt.f64 (+.f64 x x))))) (+.f64 (pow.f64 x 2/3) (cbrt.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 x x) 2/3) (-.f64 (pow.f64 x 4/3) (*.f64 (cbrt.f64 (+.f64 x x)) (pow.f64 x 2/3)))) (+.f64 (pow.f64 x 2/3) (cbrt.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 x 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) 8) (/.f64 x (+.f64 4 (*.f64 x (+.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 8 x) (pow.f64 x 4)) (/.f64 1 (+.f64 4 (*.f64 x (+.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 x 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 x 2) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 x 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 -8 (pow.f64 x 3))) (/.f64 -1 (+.f64 4 (*.f64 x (+.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x 2) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 (*.f64 8 x) (pow.f64 x 4)) (cbrt.f64 (+.f64 4 (*.f64 x (+.f64 x -2)))))) (neg.f64 (pow.f64 (+.f64 4 (*.f64 x (+.f64 x -2))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 8)) (*.f64 (pow.f64 (+.f64 x 2) 2/3) x))) (neg.f64 (cbrt.f64 (+.f64 4 (*.f64 x (+.f64 x -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (*.f64 8 x) (pow.f64 x 4)) (cbrt.f64 (+.f64 4 (*.f64 x (+.f64 x -2))))) (pow.f64 (+.f64 4 (*.f64 x (+.f64 x -2))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 8)) (*.f64 (pow.f64 (+.f64 x 2) 2/3) x)) (cbrt.f64 (+.f64 4 (*.f64 x (+.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 8 x) (pow.f64 x 4)) (+.f64 4 (*.f64 x (+.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 -8 (pow.f64 x 3))) (+.f64 -4 (*.f64 x (-.f64 2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x 2) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (-.f64 -8 (pow.f64 x 3)))) (+.f64 4 (*.f64 x (+.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (+.f64 (*.f64 8 x) (pow.f64 x 4)) (pow.f64 (*.f64 (+.f64 x 2) x) 2))) (cbrt.f64 (+.f64 4 (*.f64 x (+.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x 2) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x 2) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 x 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 (*.f64 8 x) (pow.f64 x 4)) (+.f64 -4 (*.f64 x (-.f64 2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x 2) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) 2) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x x)) (pow.f64 (+.f64 x x) 2/3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 4/3) (pow.f64 x 2/3) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 5) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (pow.f64 x 4/3) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 2)) (sqrt.f64 2) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 4) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 2 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 x (*.f64 x x))))))"]],"rules":[["egg-rr",63]],"time":44.925048828125,"type":"rewrite"},{"count":[[75,69]],"inputs":[["(*.f64 2 x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 x)","(+.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))"]],"time":77.117919921875,"type":"simplify"},{"compiler":[[824,539]],"time":12.950927734375,"type":"eval"},{"alts":[["(fma.f64 x x (+.f64 x x))","next",0]],"compiler":[[7,3],[7,3]],"count":[[70,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[69,1],"picked":[1,0]}],"min-error":[0],"time":12.84521484375,"type":"prune"},{"compiler":[[11,3]],"time":2.661865234375,"type":"localize"},{"compiler":[[1,1]],"time":0.091064453125,"type":"eval"},{"alts":[["(fma.f64 x x (+.f64 x x))","done",0]],"compiler":[[7,3]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.44091796875,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["(-.f64 (*.f64 (+.f64 x 1) (+.f64 x 1)) 1)",0,1],["(*.f64 (+.f64 x 1) (+.f64 x 1))",0,1],["(+.f64 x 1)",0,1]],"compiler":[[2,1],[10,8],[8,6],[4,3],[21,13]],"count":[[3,1]],"inputs":[["(fma.f64 x x (+.f64 x x))","(*.f64 (+.f64 x 2) x)","(-.f64 (*.f64 (+.f64 x 1) (+.f64 x 1)) 1)"]],"link":["."],"name":["Expanding a square"],"oracle":[40.35326525728827],"outputs":[["(fma.f64 x x (+.f64 x x))"]],"time":10.238037109375,"times":[["x",2.766845703125],["(-.f64 (*.f64 (+.f64 x 1) (+.f64 x 1)) 1)",2.086181640625],["(*.f64 (+.f64 x 1) (+.f64 x 1))",2.2578125],["(+.f64 x 1)",2.2080078125]],"type":"regimes"},{"compiler":[[7,3]],"inputs":[["(fma.f64 x x (+.f64 x x))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x x (+.f64 x x))","(*.f64 x (+.f64 x 2))"]],"stop":[["done",1]],"time":37.093994140625,"type":"simplify"},{"time":0.02099609375,"type":"soundness"},{"compiler":[[7,3]],"remove-preprocessing":[[]],"time":8.52099609375,"type":"end"}]
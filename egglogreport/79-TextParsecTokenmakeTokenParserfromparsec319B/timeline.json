[{"compiler":[[9,6]],"method":["search"],"sampling":[[12,0.4797652819565883,0.41930705536856294,0.10092766267484876],[11,0.40565519775191206,0.499267935694661,0.09507686655342695],[10,0.34324670579007943,0.5694774891517227,0.08727580505819788],[9,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":69.717041015625,"type":"analyze"},{"outcomes":[["body",256,"invalid",40.098388671875,1165],["body",256,"valid",287.12451171875,8256]],"time":335.738037109375,"type":"sample"},{"compiler":[[8,5]],"inputs":[["0","1","2"],["(*.f64 (+.f64 x y) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 z y) x)","(*.f64 (+.f64 x z) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(*.f64 (+.f64 x y) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 x y) z)","(*.f64 (+.f64 z y) x)","(*.f64 (+.f64 x z) y)"]],"symmetry":[[]],"time":64.993896484375,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(*.f64 (+.f64 x y) z)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 x y) z)"]],"time":35.381103515625,"type":"simplify"},{"compiler":[[8,5]],"time":0.2138671875,"type":"eval"},{"alts":[["(*.f64 (+.f64 x y) z)","next",0.01171875]],"compiler":[[8,5],[8,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.01171875],"time":0.64208984375,"type":"prune"},{"compiler":[[14,5]],"locations":[["(*.f64 (+.f64 x y) z)",0.01171875,true]],"time":3.01611328125,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 (+.f64 x y) z)","z","-inf",0.278076171875],["(*.f64 (+.f64 x y) z)","z","inf",0.318115234375],["(*.f64 (+.f64 x y) z)","z","0",0.416015625],["(*.f64 (+.f64 x y) z)","y","-inf",0.26513671875],["(*.f64 (+.f64 x y) z)","y","inf",0.280029296875],["(*.f64 (+.f64 x y) z)","y","0",0.237060546875],["(*.f64 (+.f64 x y) z)","x","-inf",0.2822265625],["(*.f64 (+.f64 x y) z)","x","inf",0.345947265625],["(*.f64 (+.f64 x y) z)","x","0",0.3271484375]],"time":2.869873046875,"type":"series"},{"count":[[1,44]],"inputs":[["(*.f64 (+.f64 x y) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z y) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z x) (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 0 (*.f64 z y)) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 0 (*.f64 z x)) (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z x) (+.f64 (*.f64 z y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z y) (+.f64 (*.f64 z x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (*.f64 z y))) (neg.f64 (neg.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (*.f64 z x))) (neg.f64 (neg.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 z x) -1)) (neg.f64 (*.f64 (*.f64 z y) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 z y) -1)) (neg.f64 (*.f64 (*.f64 z x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x y) z) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (+.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x y) z)) (pow.f64 (*.f64 (+.f64 x y) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 x y) z) 2/3) (cbrt.f64 (*.f64 (+.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z 2/3) (+.f64 x y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (+.f64 x y))) (pow.f64 (+.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (*.f64 (+.f64 x y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x y) 2/3) (*.f64 z (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (+.f64 x y) z))) (neg.f64 (pow.f64 (*.f64 (+.f64 x y) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (-.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 z y))))) (+.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (-.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 (*.f64 z x))))) (+.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (*.f64 (pow.f64 (+.f64 x y) 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 x y) 2/3) z) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x y) z) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x z (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z x (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (*.f64 z x))))))"]],"rules":[["egg-rr",44]],"time":37.446044921875,"type":"rewrite"},{"count":[[80,48]],"inputs":[["(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)"]],"method":["egg-herbie"],"outputs":[["(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)"]],"time":103.907958984375,"type":"simplify"},{"compiler":[[466,149]],"time":5.35205078125,"type":"eval"},{"alts":[["(fma.f64 y z (*.f64 z x))","next",0.01171875],["(*.f64 (+.f64 x y) z)","done",0.01171875]],"compiler":[[9,5],[8,5],[9,5]],"count":[[49,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[48,1],"picked":[1,1]}],"min-error":[0],"time":7.93896484375,"type":"prune"},{"compiler":[[15,5]],"locations":[["(fma.f64 y z (*.f64 z x))",0.01171875,true]],"time":3.509033203125,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 y z (*.f64 z x))","x","-inf",0.196044921875],["(fma.f64 y z (*.f64 z x))","x","inf",0.259033203125],["(fma.f64 y z (*.f64 z x))","x","0",0.2509765625],["(fma.f64 y z (*.f64 z x))","z","-inf",0.52294921875],["(fma.f64 y z (*.f64 z x))","z","inf",0.830078125],["(fma.f64 y z (*.f64 z x))","z","0",0.4169921875],["(fma.f64 y z (*.f64 z x))","y","-inf",0.302978515625],["(fma.f64 y z (*.f64 z x))","y","inf",0.221923828125],["(fma.f64 y z (*.f64 z x))","y","0",0.303955078125]],"time":3.407958984375,"type":"series"},{"count":[[1,45]],"inputs":[["(fma.f64 y z (*.f64 z x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y z) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 z (+.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (+.f64 y x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y z) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 z x) (neg.f64 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (+.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y x) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (+.f64 y x))) (pow.f64 (*.f64 z (+.f64 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (+.f64 y x)) 2/3) (cbrt.f64 (*.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (+.f64 (*.f64 y (cbrt.f64 z)) (*.f64 x (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 z (+.f64 y x)))) (neg.f64 (pow.f64 (*.f64 z (+.f64 y x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 y z) 2/3) (-.f64 (pow.f64 (*.f64 z x) 2/3) (*.f64 (cbrt.f64 (*.f64 y z)) (cbrt.f64 (*.f64 z x))))) (+.f64 (cbrt.f64 (*.f64 y z)) (cbrt.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 z x) 2/3) (-.f64 (pow.f64 (*.f64 y z) 2/3) (*.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y z))))) (+.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 z (+.f64 y x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 z (+.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (+.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 z (+.f64 y x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (+.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 z (+.f64 y x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (+.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (+.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (+.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (+.f64 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x z (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z x)) (pow.f64 (*.f64 z x) 2/3) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 z x) 2/3) (cbrt.f64 (*.f64 z x)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z x (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) z) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 z)) (pow.f64 z 2/3) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 z)) (pow.f64 z 2/3) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y z)) (pow.f64 (*.f64 y z) 2/3) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) z) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 z x)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) 1 (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z x) 1 (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y z) (*.f64 z x))))))"]],"rules":[["egg-rr",45]],"time":34.64990234375,"type":"rewrite"},{"count":[[81,48]],"inputs":[["(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 (+.f64 y x) z)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 (+.f64 y x) z)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 (+.f64 y x) z)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 (+.f64 y x) z)","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)"]],"time":107.589111328125,"type":"simplify"},{"compiler":[[464,143]],"time":4.89501953125,"type":"eval"},{"alts":[["(fma.f64 y z (*.f64 z x))","done",0.01171875],["(*.f64 (+.f64 x y) z)","done",0.01171875]],"compiler":[[9,5],[8,5]],"count":[[50,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[48,0],"picked":[1,1]}],"min-error":[0],"time":8.10693359375,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1],["y",0.01171875,1],["z",0.01171875,1],["(*.f64 (+.f64 x y) z)",0.01171875,1],["(+.f64 x y)",0.01171875,1]],"compiler":[[4,3],[4,3],[4,3],[8,5],[6,4],[14,7]],"count":[[2,1]],"inputs":[["(fma.f64 y z (*.f64 z x))","(*.f64 (+.f64 x y) z)"]],"link":["."],"name":["Text.Parsec.Token:makeTokenParser from parsec-3.1.9, B"],"oracle":[0.0234375],"outputs":[["(fma.f64 y z (*.f64 z x))"]],"time":13.58203125,"times":[["x",3.126220703125],["y",2.464111328125],["z",2.445068359375],["(*.f64 (+.f64 x y) z)",2.4951171875],["(+.f64 x y)",2.516845703125]],"type":"regimes"},{"compiler":[[9,5]],"inputs":[["(fma.f64 y z (*.f64 z x))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))"]],"stop":[["done",1]],"time":32.722900390625,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[9,5]],"remove-preprocessing":[[]],"time":7.77001953125,"type":"end"}]
[{"compiler":[[7,6]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.27490234375,"type":"analyze"},{"outcomes":[["body",256,"valid",220.2890625,8256]],"time":227.68310546875,"type":"sample"},{"compiler":[[6,5]],"inputs":[["0"],["(+.f64 x (/.f64 1 3))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(+.f64 x (/.f64 1 3))","(+.f64 x 1/3)"]],"symmetry":[[]],"time":53.23583984375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 x (/.f64 1 3))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 1 3))","(+.f64 x 1/3)"]],"time":19.777099609375,"type":"simplify"},{"compiler":[[9,7]],"time":0.322998046875,"type":"eval"},{"alts":[["(+.f64 x 1/3)","next",0.01953125]],"compiler":[[4,3],[4,3]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.01953125],"time":1.89697265625,"type":"prune"},{"compiler":[[6,4]],"locations":[["(+.f64 x 1/3)",0.01953125,true]],"time":1.52197265625,"type":"localize"},{"count":[[1,12]],"series":[["(+.f64 x 1/3)","x","-inf",0.16796875],["(+.f64 x 1/3)","x","inf",0.27685546875],["(+.f64 x 1/3)","x","0",0.194091796875]],"time":0.679931640625,"type":"series"},{"count":[[1,65]],"inputs":[["(+.f64 x 1/3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x 1/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/3 x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x 0) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x 1/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1/3 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 1/9 (*.f64 x (+.f64 x -1/3))) (cbrt.f64 (+.f64 1/9 (*.f64 x (+.f64 x -1/3))))) (/.f64 (+.f64 x 1/3) (cbrt.f64 (pow.f64 (+.f64 -1/9 (*.f64 x (-.f64 1/3 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 1/9 (*.f64 x (+.f64 x -1/3))) -1/3) (/.f64 (+.f64 (pow.f64 x 3) 1/27) (cbrt.f64 (pow.f64 (+.f64 -1/9 (*.f64 x (-.f64 1/3 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x 1/3)) (pow.f64 (+.f64 x 1/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 (pow.f64 x 2/3) (cbrt.f64 1/9)) (cbrt.f64 (*.f64 x 1/3))) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 1/9) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x 1/3) 2/3) (cbrt.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 x 1/3) 2/3) (cbrt.f64 (+.f64 (pow.f64 x 3) 1/27))) (pow.f64 (+.f64 1/9 (*.f64 x (+.f64 x -1/3))) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (pow.f64 x 3) 3) 1/19683) (/.f64 1 (*.f64 (+.f64 (pow.f64 x 6) (+.f64 1/729 (pow.f64 (*.f64 -1/3 x) 3))) (+.f64 1/9 (*.f64 x (+.f64 x -1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 x 3) 1/27) (cbrt.f64 (+.f64 1/9 (*.f64 x (+.f64 x -1/3))))) (pow.f64 (cbrt.f64 (+.f64 1/9 (*.f64 x (+.f64 x -1/3)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (+.f64 (cbrt.f64 1/9) (*.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1/27 (pow.f64 x 3)) (/.f64 -1 (+.f64 1/9 (*.f64 x (+.f64 x -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1/9 (*.f64 x (+.f64 x -1/3))) (/.f64 (+.f64 x 1/3) (+.f64 1/9 (*.f64 x (+.f64 x -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 1/27)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 -1/27 (pow.f64 x 3)) 2)) (+.f64 1/9 (*.f64 x (+.f64 x -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) 1/27) (/.f64 1 (+.f64 1/9 (*.f64 x (+.f64 x -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1/9 (*.f64 x (+.f64 x -1/3)))) (+.f64 (pow.f64 x 3) 1/27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1/3 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x 1/3) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 (pow.f64 x 3) 3) 1/19683) (+.f64 1/9 (*.f64 x (+.f64 x -1/3)))) (/.f64 1 (+.f64 (pow.f64 x 6) (+.f64 1/729 (pow.f64 (*.f64 -1/3 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (pow.f64 (pow.f64 x 3) 3) 1/19683) (+.f64 1/9 (*.f64 x (+.f64 x -1/3)))) (+.f64 (pow.f64 x 6) (+.f64 1/729 (pow.f64 (*.f64 -1/3 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (pow.f64 x 3) 3) 1/19683) (*.f64 (+.f64 (pow.f64 x 6) (+.f64 1/729 (pow.f64 (*.f64 -1/3 x) 3))) (+.f64 1/9 (*.f64 x (+.f64 x -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (pow.f64 x 3) 3) 1/19683) (*.f64 1 (*.f64 (+.f64 (pow.f64 x 6) (+.f64 1/729 (pow.f64 (*.f64 -1/3 x) 3))) (+.f64 1/9 (*.f64 x (+.f64 x -1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (neg.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 1/27))) 3) (pow.f64 (neg.f64 (cbrt.f64 (+.f64 1/9 (*.f64 x (+.f64 x -1/3))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (+.f64 x 1/3) 2/3) (cbrt.f64 (+.f64 (pow.f64 x 3) 1/27)))) (neg.f64 (cbrt.f64 (+.f64 1/9 (*.f64 x (+.f64 x -1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 (pow.f64 x 3) 1/27) (cbrt.f64 (+.f64 1/9 (*.f64 x (+.f64 x -1/3)))))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 -1/9 (*.f64 x (-.f64 1/3 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1/27 (pow.f64 x 3)) (+.f64 -1/9 (*.f64 x (-.f64 1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (pow.f64 x 3) 1/27) (cbrt.f64 (+.f64 1/9 (*.f64 x (+.f64 x -1/3))))) (cbrt.f64 (pow.f64 (+.f64 -1/9 (*.f64 x (-.f64 1/3 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) 1/27) (+.f64 1/9 (*.f64 x (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 x 1/3) 2/3) (cbrt.f64 (+.f64 (pow.f64 x 3) 1/27))) (cbrt.f64 (+.f64 1/9 (*.f64 x (+.f64 x -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1/3 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x -3) 1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x 3) -1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 (pow.f64 (pow.f64 x 3) 3) 1/19683) (+.f64 1/9 (*.f64 x (+.f64 x -1/3))))) (neg.f64 (+.f64 (pow.f64 x 6) (+.f64 1/729 (pow.f64 (*.f64 -1/3 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (pow.f64 x 3) 3) 1/19683)) (neg.f64 (*.f64 (+.f64 (pow.f64 x 6) (+.f64 1/729 (pow.f64 (*.f64 -1/3 x) 3))) (+.f64 1/9 (*.f64 x (+.f64 x -1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 x 1/3) 2) (+.f64 (pow.f64 x 3) 1/27))) (cbrt.f64 (+.f64 1/9 (*.f64 x (+.f64 x -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 x 1/3) 2) (-.f64 -1/27 (pow.f64 x 3)))) (cbrt.f64 (+.f64 -1/9 (*.f64 x (-.f64 1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x 1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/3) (cbrt.f64 1/9) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/9) (cbrt.f64 1/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/3) (sqrt.f64 1/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 1/3)) (neg.f64 (sqrt.f64 1/3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1/3 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1/3 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) 1/3)))))"]],"rules":[["egg-rr",65]],"time":40.5380859375,"type":"rewrite"},{"count":[[77,67]],"inputs":[["1/3","(+.f64 1/3 x)","(+.f64 1/3 x)","(+.f64 1/3 x)","x","(+.f64 1/3 x)","(+.f64 1/3 x)","(+.f64 1/3 x)","x","(+.f64 1/3 x)","(+.f64 1/3 x)","(+.f64 1/3 x)"]],"method":["egg-herbie"],"outputs":[["1/3","(+.f64 1/3 x)","(+.f64 1/3 x)","(+.f64 1/3 x)","x","(+.f64 1/3 x)","(+.f64 1/3 x)","(+.f64 1/3 x)","x","(+.f64 1/3 x)","(+.f64 1/3 x)","(+.f64 1/3 x)"]],"time":70.56298828125,"type":"simplify"},{"compiler":[[832,664]],"time":13.9189453125,"type":"eval"},{"alts":[["(+.f64 x 1/3)","done",0.01953125],["(*.f64 (+.f64 (cbrt.f64 1/9) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))","next",0.4363251953688405],["(/.f64 (-.f64 -1/27 (pow.f64 x 3)) (+.f64 -1/9 (*.f64 x (-.f64 1/3 x))))","fresh",18.82421875]],"compiler":[[4,3],[18,13],[14,11],[18,13],[14,11]],"count":[[68,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[67,2],"picked":[1,1]}],"min-error":[0],"time":11.8291015625,"type":"prune"},{"compiler":[[59,39]],"locations":[["(+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))",0.046875,true],["(cbrt.f64 x)",0.09765625,true],["(*.f64 (+.f64 (cbrt.f64 1/9) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))",0.1640625,true],["(*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))",0.46388627930532605,true]],"time":14.81396484375,"type":"localize"},{"count":[[4,6]],"series":[["(+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))","x","-inf",0.19287109375],["(+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))","x","inf",0.173095703125],["(+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))","x","0",0.39306640625],["(cbrt.f64 x)","x","-inf",0.27783203125],["(cbrt.f64 x)","x","inf",0.240966796875],["(cbrt.f64 x)","x","0",0.220947265625],["(*.f64 (+.f64 (cbrt.f64 1/9) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))","x","-inf",0.7939453125],["(*.f64 (+.f64 (cbrt.f64 1/9) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))","x","inf",0.632080078125],["(*.f64 (+.f64 (cbrt.f64 1/9) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))","x","0",0.64697265625],["(*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))","x","-inf",0.907958984375],["(*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))","x","inf",0.525146484375],["(*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))","x","0",0.783935546875]],"time":5.955078125,"type":"series"},{"count":[[4,176]],"inputs":[["(*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))","(*.f64 (+.f64 (cbrt.f64 1/9) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))","(cbrt.f64 x)","(+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 x -1/3)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) 0) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (*.f64 0 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (*.f64 (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) 2/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 (cbrt.f64 1/3) (cbrt.f64 x)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (-.f64 (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 x)) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (+.f64 (*.f64 (cbrt.f64 -1/3) (cbrt.f64 (cbrt.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (+.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 4) (*.f64 (cbrt.f64 -1/3) (cbrt.f64 (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) 3) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 (cbrt.f64 1/3) (cbrt.f64 x)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (cbrt.f64 (*.f64 x 1/3)) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (*.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 2/3)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 4) (cbrt.f64 (*.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 x 2/3) (cbrt.f64 (*.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 x)) (cbrt.f64 (*.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 4) (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (*.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (*.f64 x -1/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x -1/3))) 2) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (*.f64 x -1/3)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/3) (cbrt.f64 x) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (cbrt.f64 -1/3))) (cbrt.f64 (cbrt.f64 1/9)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 -1/3)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 -1/3) (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 -1/3)) (*.f64 (cbrt.f64 (cbrt.f64 1/9)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) 1 (cbrt.f64 (*.f64 x -1/3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (cbrt.f64 1/9)) (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))) (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))) (+.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 x)) 1/3) (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3) (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 x))) (*.f64 (cbrt.f64 1/9) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3) (+.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x -1/3))) x)) (*.f64 (cbrt.f64 x) (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3) (*.f64 (cbrt.f64 x) (cbrt.f64 1/9))) (+.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x -1/3))) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3) (*.f64 (cbrt.f64 1/9) (cbrt.f64 x))) (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))) 1/3) (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3)) (+.f64 1/3 (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 x)) (+.f64 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 x)) (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 1/9)) (+.f64 (+.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x -1/3))) x) (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x -1/3))) x) (+.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 1/9)) (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 x)) (+.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 x)) (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))) (*.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))) 0) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))) (*.f64 1 (+.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 x)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (+.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 x)) 1/3)) (*.f64 1 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))))) (*.f64 1 (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (cbrt.f64 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (cbrt.f64 1/9))) (*.f64 1 (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))) (*.f64 0 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))) 1) (*.f64 (+.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 x)) 1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 x)) 1/3) 1) (*.f64 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) 1) (*.f64 (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (cbrt.f64 1/9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (cbrt.f64 1/9)) 1) (*.f64 (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (pow.f64 x 2/3)) (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (+.f64 (pow.f64 x 2/3) (cbrt.f64 1/9))) (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (cbrt.f64 (*.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x 2/3) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (pow.f64 x 2/3) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))) (*.f64 (cbrt.f64 (*.f64 x -1/3)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))) (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/3 (+.f64 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3)) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))) (pow.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))) 2/3) (cbrt.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)))) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))) (*.f64 (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) 2/3) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (+.f64 (*.f64 (cbrt.f64 1/3) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)))) (*.f64 (cbrt.f64 x) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (+.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)))) (*.f64 (cbrt.f64 1/3) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/9) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)))) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))) (pow.f64 (cbrt.f64 (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))) 2) (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))) (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)) (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))) 1 (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 1/3) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)))) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3)) (pow.f64 (cbrt.f64 (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3)) 2) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 1/3)) (*.f64 (cbrt.f64 (cbrt.f64 1/9)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (cbrt.f64 1/9) (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 x)) (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (+.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 (cbrt.f64 1/3))) (cbrt.f64 (cbrt.f64 1/9)) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)) (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 x) (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 x) 0) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 x) (*.f64 0 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) 0) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (*.f64 0 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 x) (cbrt.f64 -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 -1/3) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (cbrt.f64 1/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 x) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (cbrt.f64 1/9)) (-.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 x -1/3))))) (+.f64 (cbrt.f64 (cbrt.f64 -1/3)) (cbrt.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 x 2/3)) (-.f64 (cbrt.f64 (cbrt.f64 1/9)) (cbrt.f64 (cbrt.f64 (*.f64 x -1/3))))) (+.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (cbrt.f64 -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 x 2/3)) (+.f64 (cbrt.f64 (cbrt.f64 1/9)) (cbrt.f64 (cbrt.f64 (*.f64 x 1/3))))) (-.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) 2/3) (cbrt.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (cbrt.f64 1/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (cbrt.f64 1/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 -1/3)) (cbrt.f64 (cbrt.f64 1/9)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 x) (cbrt.f64 -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 -1/3) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 1/3) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 1/9)) (cbrt.f64 (cbrt.f64 -1/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/3) 1 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (cbrt.f64 x)) (cbrt.f64 -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) 1 (cbrt.f64 -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 -1/3))))))"]],"rules":[["egg-rr",35],["egg-rr",19],["egg-rr",78],["egg-rr",44]],"time":42.083984375,"type":"rewrite"},{"count":[[182,179]],"inputs":[["(*.f64 (cbrt.f64 1/9) (cbrt.f64 1/3))","(*.f64 (cbrt.f64 1/9) (cbrt.f64 1/3))","(*.f64 (cbrt.f64 1/9) (cbrt.f64 1/3))","(cbrt.f64 -1/3)","(cbrt.f64 -1/3)","(cbrt.f64 -1/3)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cbrt.f64 1/9) (cbrt.f64 1/3))","1/3","(*.f64 (cbrt.f64 1/9) (cbrt.f64 1/3))","1/3","(*.f64 (cbrt.f64 1/9) (cbrt.f64 1/3))","1/3","(cbrt.f64 -1/3)","(cbrt.f64 -1/3)","(cbrt.f64 -1/3)"]],"time":59.492919921875,"type":"simplify"},{"compiler":[[5018,3374]],"time":58.795166015625,"type":"eval"},{"alts":[["(+.f64 x 1/3)","done",0.01953125],["(+.f64 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3)) (+.f64 1/3 (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))","next",0.01171875],["(fma.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))","fresh",0.06707001953688403]],"compiler":[[4,3],[27,19],[40,28],[27,19],[40,28]],"count":[[220,3]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[217,2],"picked":[1,0]}],"min-error":[0],"time":62.767822265625,"type":"prune"},{"compiler":[[106,69]],"locations":[["(fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))",0.20931625976844204,true],["(*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))",0.31087875976844204,true],["(*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3))",0.405292529305326,true],["(*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))",0.46388627930532605,false]],"time":25.53515625,"type":"localize"},{"count":[[3,3]],"series":[["(fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))","x","-inf",0.27001953125],["(fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))","x","inf",0.220947265625],["(fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))","x","0",0.239990234375],["(*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))","x","-inf",0.718017578125],["(*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))","x","inf",0.473876953125],["(*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))","x","0",0.4150390625],["(*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3))","x","-inf",1.035888671875],["(*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3))","x","inf",0.551025390625],["(*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3))","x","0",0.54296875]],"time":4.5859375,"type":"series"},{"count":[[3,120]],"inputs":[["(*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3))","(*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))","(fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 x)) (*.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/3)) (*.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9))) (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9))) 0) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x 1/3))) (*.f64 (cbrt.f64 -1/3) (cbrt.f64 (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 -1/3) (cbrt.f64 (*.f64 x 1/3))) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9))) (*.f64 0 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9)))) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/3)) (cbrt.f64 (*.f64 1/3 (*.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/3)) 1) (*.f64 (cbrt.f64 (*.f64 1/3 (*.f64 -1/3 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 1/3 (*.f64 -1/3 x))) (cbrt.f64 (*.f64 (*.f64 x x) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) (*.f64 (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) 2/3) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) 2/3) (cbrt.f64 1/3)) (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9)))) (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9))) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 1/3)) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/3 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))))) (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/3)) (*.f64 (cbrt.f64 (cbrt.f64 1/9)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) 2/3) (cbrt.f64 (*.f64 1/3 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/9)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) (cbrt.f64 (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 (cbrt.f64 1/3))) (cbrt.f64 (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/9)) (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9)) 3) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9)) 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/3) (pow.f64 x 2/3) (cbrt.f64 (*.f64 1/3 (*.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 1/3) (cbrt.f64 (*.f64 1/3 (*.f64 -1/3 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))) (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))) 0) (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))) (*.f64 0 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))) (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 x (*.f64 -1/3 x))) (cbrt.f64 (*.f64 x 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 x (*.f64 -1/3 x))) 1) (*.f64 (cbrt.f64 (*.f64 x 1/9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 x 1/9)) (cbrt.f64 (*.f64 x (*.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))) (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) 2/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) 2/3) (cbrt.f64 x)) (cbrt.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))) (pow.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) (cbrt.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) 2/3) (cbrt.f64 (*.f64 x (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (pow.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 x (pow.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -1/3 x)) (cbrt.f64 x) (cbrt.f64 (*.f64 x 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 -1/3 x)) (cbrt.f64 (*.f64 x 1/9)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) 0) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) (*.f64 0 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 1/9) (cbrt.f64 (*.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 -1/3 x)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))) (pow.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) 2/3) (cbrt.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/3) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 -1/3)) (+.f64 (cbrt.f64 (*.f64 (cbrt.f64 1/9) -1/3)) (cbrt.f64 (*.f64 (cbrt.f64 1/9) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 -1/3)) (+.f64 (cbrt.f64 (*.f64 (cbrt.f64 1/9) x)) (cbrt.f64 (*.f64 (cbrt.f64 1/9) -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/9)) (+.f64 (cbrt.f64 (cbrt.f64 1/81)) (cbrt.f64 (*.f64 x (cbrt.f64 -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/9)) (+.f64 (cbrt.f64 (*.f64 x (cbrt.f64 -1/3))) (cbrt.f64 (cbrt.f64 1/81))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 -1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 -1/3)) (cbrt.f64 (*.f64 (cbrt.f64 1/9) x)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -1/3 (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/3) (cbrt.f64 x) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (*.f64 -1/3 x))) (cbrt.f64 (pow.f64 (*.f64 -1/3 x) 2/3)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 (pow.f64 x 2/3) -1/3)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/3) (cbrt.f64 -1/3) (cbrt.f64 (*.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 1/3)) (cbrt.f64 (*.f64 (cbrt.f64 1/9) 1/3)) (cbrt.f64 (*.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 -1/3)) (cbrt.f64 (*.f64 (cbrt.f64 1/9) -1/3)) (cbrt.f64 (*.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (*.f64 -1/3 x)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (cbrt.f64 -1/3))) (cbrt.f64 (cbrt.f64 1/9)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 -1/9) (cbrt.f64 (*.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 1/9)) (cbrt.f64 (cbrt.f64 1/81)) (cbrt.f64 (*.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/9) 1 (cbrt.f64 (*.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 1/9) (cbrt.f64 (*.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 1/81)) (cbrt.f64 (cbrt.f64 1/9)) (cbrt.f64 (*.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/3) (cbrt.f64 1/3) (cbrt.f64 (*.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -1/3 x)) 1 (cbrt.f64 1/9))))))"]],"rules":[["egg-rr",43],["egg-rr",33],["egg-rr",44]],"time":31.953857421875,"type":"rewrite"},{"count":[[123,121]],"inputs":[["(cbrt.f64 1/9)","(cbrt.f64 1/9)","(cbrt.f64 1/9)"]],"method":["egg-herbie"],"outputs":[["(cbrt.f64 1/9)","(cbrt.f64 1/9)","(cbrt.f64 1/9)"]],"time":49.126220703125,"type":"simplify"},{"compiler":[[5059,3517]],"time":58.2548828125,"type":"eval"},{"alts":[["(+.f64 x 1/3)","done",0.01953125],["(+.f64 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3)) (+.f64 1/3 (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))","done",0.01171875],["(fma.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))","next",0.06707001953688403]],"compiler":[[4,3],[27,19],[40,28],[40,28]],"count":[[168,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[165,0],"picked":[1,1]}],"min-error":[0],"time":60.001953125,"type":"prune"},{"compiler":[[135,91]],"locations":[["(*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))",0.31087875976844204,false],["(fma.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))",0.45703125,true],["(*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3))",0.667011279305326,true],["(pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3)",2.7418240633185453,true]],"time":43.953125,"type":"localize"},{"count":[[3,12]],"series":[["(fma.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))","x","-inf",1.708984375],["(fma.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))","x","inf",1.528076171875],["(fma.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))","x","0",0.80517578125],["(*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3))","x","-inf",2.364990234375],["(*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3))","x","inf",1.862060546875],["(*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3))","x","0",1.14990234375],["(pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3)","x","-inf",3.047119140625],["(pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3)","x","inf",2.06591796875],["(pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3)","x","0",1.73095703125]],"time":16.673828125,"type":"series"},{"count":[[3,98]],"inputs":[["(pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3)","(*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3))","(fma.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) 0) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3)) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (*.f64 0 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)))) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)))) (neg.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) -1) (*.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)))) 4) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) 0) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) (*.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3))) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) (*.f64 0 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)))) (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (cbrt.f64 (sqrt.f64 1/3))) (*.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (cbrt.f64 (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3))) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) 4) (cbrt.f64 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/3)) (*.f64 (cbrt.f64 (cbrt.f64 1/9)) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) 4) (cbrt.f64 1/9))) (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)))) 4) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 (cbrt.f64 1/3))) (cbrt.f64 (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/3) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2) 1/3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2) 1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3)) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) x) (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))) (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) x) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x -1/3)))) (*.f64 (cbrt.f64 x) (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) x) (*.f64 (cbrt.f64 (*.f64 x -1/3)) (cbrt.f64 x))) (*.f64 (cbrt.f64 1/9) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)) 0) (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)) (*.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) x) 1) (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))) (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)) (*.f64 0 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))) (pow.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)) 2/3) (cbrt.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)) (pow.f64 (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x) 2/3) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x) 2/3) (cbrt.f64 (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x) 1 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x)) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x) (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)))) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) 4) (cbrt.f64 1/9))) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3)) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3))) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3))) (pow.f64 (cbrt.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3))) 2) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3)) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3)) 1 (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) (cbrt.f64 1/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (cbrt.f64 1/3)) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (fma.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) x))))))"]],"rules":[["egg-rr",44],["egg-rr",28],["egg-rr",26]],"time":41.783203125,"type":"rewrite"},{"count":[[110,108]],"inputs":[["(pow.f64 (pow.f64 (cbrt.f64 1/9) 2) 1/3)","(pow.f64 (pow.f64 (cbrt.f64 1/9) 2) 1/3)","(pow.f64 (pow.f64 (cbrt.f64 1/9) 2) 1/3)","(*.f64 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 1/9) 2) 1) 1/3) (cbrt.f64 1/3))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 1/9) 2) 1) 1/3) (cbrt.f64 1/3))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 1/9) 2) 1) 1/3) (cbrt.f64 1/3))","(*.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/3)) (pow.f64 1 1/3))","(+.f64 x (*.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/3)) (pow.f64 1 1/3)))","x","(+.f64 (*.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/3)) (pow.f64 1 1/3)) x)","x","(+.f64 (*.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/3)) (pow.f64 1 1/3)) x)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (pow.f64 (cbrt.f64 1/9) 2) 1/3)","(cbrt.f64 (cbrt.f64 1/81))","(pow.f64 (pow.f64 (cbrt.f64 1/9) 2) 1/3)","(cbrt.f64 (cbrt.f64 1/81))","(pow.f64 (pow.f64 (cbrt.f64 1/9) 2) 1/3)","(cbrt.f64 (cbrt.f64 1/81))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 1/9) 2) 1) 1/3) (cbrt.f64 1/3))","(cbrt.f64 (cbrt.f64 (*.f64 1/81 1/27)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 1/9) 2) 1) 1/3) (cbrt.f64 1/3))","(cbrt.f64 (cbrt.f64 (*.f64 1/81 1/27)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 1/9) 2) 1) 1/3) (cbrt.f64 1/3))","(cbrt.f64 (cbrt.f64 (*.f64 1/81 1/27)))","(*.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/3)) (pow.f64 1 1/3))","1/3","(+.f64 x (*.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/3)) (pow.f64 1 1/3)))","(+.f64 x 1/3)","x","(+.f64 (*.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/3)) (pow.f64 1 1/3)) x)","(+.f64 x 1/3)","x","(+.f64 (*.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/3)) (pow.f64 1 1/3)) x)","(+.f64 x 1/3)"]],"time":54.18701171875,"type":"simplify"},{"compiler":[[5596,3819]],"time":71.69287109375,"type":"eval"},{"alts":[["(+.f64 x 1/3)","done",0.01953125],["(+.f64 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3)) (+.f64 1/3 (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))","done",0.01171875],["(fma.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))","done",0.06707001953688403]],"compiler":[[4,3],[27,19],[40,28]],"count":[[144,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[141,0],"picked":[1,1]}],"min-error":[0],"time":42.508056640625,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1],["(+.f64 x (/.f64 1 3))",0.01171875,1]],"compiler":[[2,1],[6,5],[104,72]],"count":[[6,1]],"inputs":[["(+.f64 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3)) (+.f64 1/3 (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))","(fma.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))) (*.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9)) 2/3) (cbrt.f64 1/3)) (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)))))","(*.f64 (+.f64 (cbrt.f64 1/9) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))","(/.f64 (-.f64 -1/27 (pow.f64 x 3)) (+.f64 -1/9 (*.f64 x (-.f64 1/3 x))))","(+.f64 x 1/3)","(+.f64 x (/.f64 1 3))"]],"link":["."],"name":["Data.Colour.RGBSpace.HSL:hsl from colour-2.3.3, F"],"oracle":[18.999412597684422],"outputs":[["(+.f64 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3)) (+.f64 1/3 (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))"]],"time":8.488037109375,"times":[["x",3.65087890625],["(+.f64 x (/.f64 1 3))",2.8271484375]],"type":"regimes"},{"compiler":[[27,19]],"inputs":[["(+.f64 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3)) (+.f64 1/3 (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3))) (cbrt.f64 1/3)) (+.f64 1/3 (+.f64 x (*.f64 (cbrt.f64 x) (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9))))))","(+.f64 (+.f64 1/3 x) (*.f64 (cbrt.f64 x) (+.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 -1/3) (cbrt.f64 1/9)) (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)) (cbrt.f64 1/3)))))"]],"stop":[["done",1]],"time":25.072021484375,"type":"simplify"},{"time":0.019775390625,"type":"soundness"},{"compiler":[[27,19]],"remove-preprocessing":[[]],"time":14.695068359375,"type":"end"}]
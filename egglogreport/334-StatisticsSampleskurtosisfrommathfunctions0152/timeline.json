[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.7024385221302509,0.11804869608022273,0.17951278178952634],[11,0.6868287771940231,0.1463413587771356,0.16682986402884126],[10,0.6556092873215675,0.22243886534124613,0.12195184733718634],[9,0.6243897974491119,0.2731705363839865,0.10243966616690159],[8,0.5619508177042007,0.39024362340569496,0.047805558890104294],[7,0.49951183795928955,0.46829234808683395,0.032195813953876495],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":27.35986328125,"type":"analyze"},{"outcomes":[["body",256,"invalid",27.34716796875,803],["body",256,"valid",283.31591796875,8256]],"time":318.89404296875,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(-.f64 (/.f64 x (*.f64 y y)) 3)","(-.f64 (/.f64 y (*.f64 x x)) 3)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (/.f64 x (*.f64 y y)) 3)","(fma.f64 x (pow.f64 y -2) -3)","(-.f64 (/.f64 y (*.f64 x x)) 3)","(fma.f64 y (pow.f64 x -2) -3)"]],"symmetry":[[]],"time":59.9150390625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (/.f64 x (*.f64 y y)) 3)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 x (*.f64 y y)) 3)","(fma.f64 x (pow.f64 y -2) -3)"]],"time":18.31298828125,"type":"simplify"},{"compiler":[[15,10]],"time":0.364013671875,"type":"eval"},{"alts":[["(fma.f64 x (pow.f64 y -2) -3)","fresh",3.83203125],["(-.f64 (/.f64 x (*.f64 y y)) 3)","next",3.620993806991428]],"compiler":[[8,6],[9,6],[8,6],[9,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[3.554587556991428],"time":1.22900390625,"type":"prune"},{"compiler":[[20,7]],"locations":[["(/.f64 x (*.f64 y y))",8.629744002945102,true]],"time":3.7919921875,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 x (*.f64 y y))","y","-inf",0.192138671875],["(/.f64 x (*.f64 y y))","y","inf",0.296142578125],["(/.f64 x (*.f64 y y))","y","0",0.679931640625],["(/.f64 x (*.f64 y y))","x","-inf",0.386962890625],["(/.f64 x (*.f64 y y))","x","inf",0.61083984375],["(/.f64 x (*.f64 y y))","x","0",0.655029296875]],"time":2.89599609375,"type":"series"},{"count":[[1,112]],"inputs":[["(/.f64 x (*.f64 y y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 x y) y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (/.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (/.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 x y) y)) (pow.f64 (/.f64 (/.f64 x y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (/.f64 x y) y) 2/3) (cbrt.f64 (/.f64 (/.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) y) (/.f64 (pow.f64 x 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (pow.f64 (/.f64 (cbrt.f64 x) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (cbrt.f64 x) y) 2) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 x 2/3) y) (/.f64 (cbrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (pow.f64 y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -2/3) (/.f64 x (pow.f64 y 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (pow.f64 y 4/3)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 y -2)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 y -2/3)) (cbrt.f64 (pow.f64 y -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (/.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (/.f64 x y) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 x 2/3)) (/.f64 1 (*.f64 (cbrt.f64 y) (pow.f64 y 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y -2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 y -4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) (/.f64 1 (pow.f64 (cbrt.f64 y) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (cbrt.f64 x) y) (pow.f64 x 2/3)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 x y) y)) (pow.f64 x 2/3)) (cbrt.f64 (pow.f64 y -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y -2/3) x) (cbrt.f64 (pow.f64 y -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 (/.f64 (/.f64 x y) y) 2/3)) (neg.f64 (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (/.f64 x y) y) 2/3) (cbrt.f64 (neg.f64 x))) (neg.f64 (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (/.f64 x y)) (cbrt.f64 y)) (neg.f64 (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (neg.f64 (pow.f64 y -2/3))) (cbrt.f64 (neg.f64 (pow.f64 y -4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (/.f64 x y) y) 2/3) (cbrt.f64 (/.f64 x y))) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (/.f64 (/.f64 x y) y) 2/3)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x y) (pow.f64 y -2/3)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (cbrt.f64 y)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 y) (neg.f64 x)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 y) (/.f64 x (cbrt.f64 y))) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (/.f64 x y) y) 2/3) (cbrt.f64 x)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (pow.f64 (/.f64 (/.f64 x y) y) 2/3)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (cbrt.f64 y)) y) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (pow.f64 y -2/3)) (cbrt.f64 (pow.f64 y 4/3))) (/.f64 1 (cbrt.f64 (pow.f64 (cbrt.f64 y) 8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 (/.f64 x y) y) 2/3) (*.f64 0 (cbrt.f64 (neg.f64 (/.f64 (/.f64 x y) y)))))) (cbrt.f64 (/.f64 (/.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (pow.f64 y -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -2) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 x 2/3))) (neg.f64 (*.f64 (cbrt.f64 y) (pow.f64 y 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y -2/3)))) (neg.f64 (cbrt.f64 (pow.f64 y 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 x y) y)) (pow.f64 x 2/3))) (neg.f64 (pow.f64 y 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (neg.f64 (pow.f64 y -2/3))) (neg.f64 (pow.f64 y 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 y -2/3) x)) (neg.f64 (pow.f64 y 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x (pow.f64 y 4/3))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 1 y) (/.f64 x (cbrt.f64 y)))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 x y)) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (/.f64 x y) y) 2/3) (cbrt.f64 x))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 x) (pow.f64 (/.f64 (/.f64 x y) y) 2/3))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 x (cbrt.f64 y)) y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 y -2/3)) (cbrt.f64 (pow.f64 y 4/3)))) (neg.f64 (cbrt.f64 (pow.f64 (cbrt.f64 y) 8))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (/.f64 x y) y) 2) (*.f64 x (pow.f64 y -2/3)))) (cbrt.f64 (pow.f64 y 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (/.f64 x y) y) 2) (/.f64 (/.f64 x y) (cbrt.f64 y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (/.f64 x y) y) 2) (neg.f64 x))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 x (pow.f64 y -2/3)) (pow.f64 (/.f64 (/.f64 x y) y) 2))) (cbrt.f64 (pow.f64 y 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (pow.f64 (/.f64 (/.f64 x y) y) 2))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 x) (pow.f64 (/.f64 (/.f64 x y) y) 2))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (/.f64 x y) y) 2/3) (cbrt.f64 (/.f64 x y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (/.f64 (/.f64 x y) y) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 x 2/3)) (*.f64 (cbrt.f64 y) (pow.f64 y 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -2/3) x) (pow.f64 y 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 x y) y)) (pow.f64 x 2/3)) (pow.f64 y 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (neg.f64 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 x) y) (pow.f64 x 2/3)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x y) (pow.f64 y -2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) 5))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (pow.f64 y -2/3)) (cbrt.f64 (pow.f64 y 4/3))) (cbrt.f64 (pow.f64 (cbrt.f64 y) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (pow.f64 y -2/3)) (pow.f64 y 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (/.f64 x (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (/.f64 x y) y) 2/3) (cbrt.f64 x)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (/.f64 x y) y) 2/3) (cbrt.f64 (neg.f64 x))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (cbrt.f64 y)) y) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (pow.f64 y 4/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (pow.f64 (/.f64 (/.f64 x y) y) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 (/.f64 (/.f64 x y) y) 2/3)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y -2/3))) (cbrt.f64 (pow.f64 y 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 x 2/3)) (*.f64 1 (*.f64 (cbrt.f64 y) (pow.f64 y 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 x y) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (neg.f64 y))) (neg.f64 (pow.f64 (cbrt.f64 y) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) y) (pow.f64 x 2/3))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 (/.f64 (/.f64 x y) y) 2/3))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (/.f64 x y) y) 2/3) (cbrt.f64 (neg.f64 x)))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (/.f64 x y) y) 2/3) (cbrt.f64 (/.f64 x y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (/.f64 (/.f64 x y) y) 2/3))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 x y) (pow.f64 y -2/3))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (cbrt.f64 y))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 1 y) (neg.f64 x))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 x (pow.f64 (/.f64 (/.f64 x y) y) 2))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 x y) (pow.f64 (/.f64 (/.f64 x y) y) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (/.f64 x y)) (pow.f64 (/.f64 (/.f64 x y) y) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (/.f64 x y) y) 2) x)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (/.f64 x y) y) 2) (neg.f64 (/.f64 x y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (/.f64 x y) y) 2) (/.f64 x y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 x y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 x y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (/.f64 (/.f64 x y) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (/.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 x y) y) 3))))))"]],"rules":[["egg-rr",112]],"time":42.35107421875,"type":"rewrite"},{"count":[[136,113]],"inputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)"]],"time":102.385009765625,"type":"simplify"},{"compiler":[[1595,844]],"time":17.5068359375,"type":"eval"},{"alts":[["(-.f64 (/.f64 (/.f64 x y) y) 3)","next",0.09375],["(-.f64 (/.f64 x (*.f64 y y)) 3)","done",3.620993806991428],["(-.f64 (pow.f64 (cbrt.f64 (/.f64 (/.f64 x y) y)) 3) 3)","fresh",0.29437265629507237],["(-.f64 (/.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) 3)","fresh",0.27609893791572604],["(-.f64 (/.f64 (*.f64 (/.f64 1 y) (neg.f64 x)) (neg.f64 y)) 3)","fresh",0.125]],"compiler":[[9,6],[9,6],[12,9],[16,9],[13,10],[9,6],[12,9],[16,9],[13,10]],"count":[[115,5]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[113,4],"picked":[1,1]}],"min-error":[0.01171875],"time":23.4169921875,"type":"prune"},{"compiler":[[20,7]],"locations":[["(/.f64 (/.f64 x y) y)",0.17578125,true]],"time":4.31396484375,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (/.f64 x y) y)","y","-inf",0.172119140625],["(/.f64 (/.f64 x y) y)","y","inf",0.150146484375],["(/.f64 (/.f64 x y) y)","y","0",0.14306640625],["(/.f64 (/.f64 x y) y)","x","-inf",0.1689453125],["(/.f64 (/.f64 x y) y)","x","inf",0.157958984375],["(/.f64 (/.f64 x y) y)","x","0",0.199951171875]],"time":1.05615234375,"type":"series"},{"count":[[1,119]],"inputs":[["(/.f64 (/.f64 x y) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (*.f64 y y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) (pow.f64 (/.f64 x (*.f64 y y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (cbrt.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) (/.f64 (pow.f64 (/.f64 x y) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (/.f64 x y) 2/3) y) (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 y) -4) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (pow.f64 y -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (*.f64 (/.f64 x y) (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) -4) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x y) (pow.f64 y -2/3)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (pow.f64 y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 x) (cbrt.f64 y)) (/.f64 1 (*.f64 (neg.f64 y) (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) (pow.f64 (/.f64 x (*.f64 y y)) 2/3)) (neg.f64 (pow.f64 y -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (cbrt.f64 (neg.f64 (/.f64 x y)))) (neg.f64 (pow.f64 y -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (pow.f64 (/.f64 x y) 2/3) y)) (neg.f64 (pow.f64 y -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) (/.f64 1 (pow.f64 y (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y -1/3) x) (/.f64 1 (pow.f64 y (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (/.f64 x (*.f64 y y)) 2/3)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (/.f64 (pow.f64 (/.f64 x y) 2/3) y)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (/.f64 (pow.f64 (cbrt.f64 y) -4) (cbrt.f64 y))) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (cbrt.f64 (/.f64 x y))) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) (/.f64 1 (*.f64 y (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y -1/3) (/.f64 x y)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (cbrt.f64 y)) y) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 y) (/.f64 x (cbrt.f64 y))) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) (pow.f64 (/.f64 x y) 2/3)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y -1/3) (neg.f64 x)) (/.f64 1 (*.f64 (pow.f64 y 2/3) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (cbrt.f64 y)) -1) (/.f64 1 (*.f64 (pow.f64 y 2/3) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y -1/3) (/.f64 x (cbrt.f64 y))) (/.f64 1 (pow.f64 (cbrt.f64 y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 y -2/3)) (/.f64 1 (pow.f64 (cbrt.f64 y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (*.f64 0 (cbrt.f64 (neg.f64 (/.f64 x (*.f64 y y))))))) (cbrt.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) (cbrt.f64 (neg.f64 y))) (neg.f64 (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 y -1/3) x)) (neg.f64 (pow.f64 y (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (/.f64 x (*.f64 y y)) 2/3))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 (pow.f64 (/.f64 x y) 2/3) y))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (/.f64 (pow.f64 (cbrt.f64 y) -4) (cbrt.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (cbrt.f64 (/.f64 x y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3)))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 y -1/3) (neg.f64 x))) (neg.f64 (*.f64 (pow.f64 y 2/3) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 x (cbrt.f64 y)) -1)) (neg.f64 (*.f64 (pow.f64 y 2/3) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 y -1/3) (/.f64 x (cbrt.f64 y)))) (neg.f64 (pow.f64 (cbrt.f64 y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (pow.f64 y -2/3)) (neg.f64 (pow.f64 (cbrt.f64 y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2) (/.f64 (/.f64 x y) (cbrt.f64 y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (/.f64 x y)) (pow.f64 (/.f64 x (*.f64 y y)) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2) (neg.f64 (/.f64 x y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (pow.f64 (/.f64 x (*.f64 y y)) 2))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (cbrt.f64 y)) -1) (*.f64 (pow.f64 y 2/3) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) x) (pow.f64 y (+.f64 2/3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (neg.f64 x)) (*.f64 (pow.f64 y 2/3) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) (pow.f64 (/.f64 x y) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (/.f64 x (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (/.f64 x y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (cbrt.f64 y)) y) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (cbrt.f64 (/.f64 x y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (/.f64 (pow.f64 (/.f64 x y) 2/3) y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (pow.f64 (cbrt.f64 y) -4) (cbrt.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (/.f64 x (*.f64 y y)) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x y) (pow.f64 y -2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (cbrt.f64 y)) (*.f64 (neg.f64 y) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (pow.f64 y -2/3)) (pow.f64 (cbrt.f64 y) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 y)) (pow.f64 y (+.f64 2/3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (/.f64 x (cbrt.f64 y))) (pow.f64 (cbrt.f64 y) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (cbrt.f64 (neg.f64 (/.f64 x y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (pow.f64 (/.f64 x y) 2/3) y)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) (pow.f64 (/.f64 x (*.f64 y y)) 2/3)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (cbrt.f64 (neg.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 y)) (*.f64 y (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (cbrt.f64 y)) (*.f64 1 (*.f64 (neg.f64 y) (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 y)) (*.f64 1 (pow.f64 y (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) x) (*.f64 1 (pow.f64 y (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 y)) (*.f64 1 (*.f64 y (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (neg.f64 x)) (*.f64 1 (*.f64 (pow.f64 y 2/3) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (cbrt.f64 y)) -1) (*.f64 1 (*.f64 (pow.f64 y 2/3) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (/.f64 x (cbrt.f64 y))) (*.f64 1 (pow.f64 (cbrt.f64 y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (pow.f64 y -2/3)) (*.f64 1 (pow.f64 (cbrt.f64 y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (neg.f64 y) (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) (pow.f64 (/.f64 x (*.f64 y y)) 2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (cbrt.f64 (neg.f64 (/.f64 x y))))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (pow.f64 (/.f64 x y) 2/3) y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (cbrt.f64 y)) (neg.f64 (pow.f64 y (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 x y)) (pow.f64 y -2/3)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 y (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 y -1/3) (/.f64 x y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 x (cbrt.f64 y)) y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 1 y) (/.f64 x (cbrt.f64 y)))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) (pow.f64 (/.f64 x y) 2/3))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2) x)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 x y) (pow.f64 (/.f64 x (*.f64 y y)) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2) (/.f64 x y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2) (neg.f64 x))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 x) (pow.f64 (/.f64 x (*.f64 y y)) 2))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 x (pow.f64 (/.f64 x (*.f64 y y)) 2))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (*.f64 y y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (/.f64 x (*.f64 y y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (*.f64 y y)) 3))))))"]],"rules":[["egg-rr",119]],"time":42.135986328125,"type":"rewrite"},{"count":[[143,120]],"inputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)"]],"time":102.39794921875,"type":"simplify"},{"compiler":[[1738,896]],"time":18.31201171875,"type":"eval"},{"alts":[["(-.f64 (/.f64 (/.f64 x y) y) 3)","done",0.09375],["(-.f64 (/.f64 x (*.f64 y y)) 3)","done",3.620993806991428],["(-.f64 (pow.f64 (cbrt.f64 (/.f64 (/.f64 x y) y)) 3) 3)","fresh",0.29437265629507237],["(-.f64 (/.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) 3)","fresh",0.27609893791572604],["(-.f64 (/.f64 (*.f64 (/.f64 1 y) (neg.f64 x)) (neg.f64 y)) 3)","next",0.125]],"compiler":[[9,6],[9,6],[12,9],[16,9],[13,10],[12,9],[16,9],[13,10]],"count":[[125,5]],"kept":[{"done":[1,1],"fresh":[3,3],"new":[120,0],"picked":[1,1]}],"min-error":[0.01171875],"time":26.547119140625,"type":"prune"},{"compiler":[[39,21]],"locations":[["(/.f64 (*.f64 (/.f64 1 y) (neg.f64 x)) (neg.f64 y))",0.17578125,true],["(*.f64 (/.f64 1 y) (neg.f64 x))",0.2109375,true]],"time":8.702880859375,"type":"localize"},{"count":[[2,48]],"series":[["(/.f64 (*.f64 (/.f64 1 y) (neg.f64 x)) (neg.f64 y))","x","-inf",0.14794921875],["(/.f64 (*.f64 (/.f64 1 y) (neg.f64 x)) (neg.f64 y))","x","inf",0.150146484375],["(/.f64 (*.f64 (/.f64 1 y) (neg.f64 x)) (neg.f64 y))","x","0",0.158935546875],["(/.f64 (*.f64 (/.f64 1 y) (neg.f64 x)) (neg.f64 y))","y","-inf",0.588134765625],["(/.f64 (*.f64 (/.f64 1 y) (neg.f64 x)) (neg.f64 y))","y","inf",0.169189453125],["(/.f64 (*.f64 (/.f64 1 y) (neg.f64 x)) (neg.f64 y))","y","0",0.151123046875],["(*.f64 (/.f64 1 y) (neg.f64 x))","x","-inf",0.30810546875],["(*.f64 (/.f64 1 y) (neg.f64 x))","x","inf",0.81591796875],["(*.f64 (/.f64 1 y) (neg.f64 x))","x","0",0.454833984375],["(*.f64 (/.f64 1 y) (neg.f64 x))","y","-inf",0.175048828125],["(*.f64 (/.f64 1 y) (neg.f64 x))","y","inf",0.404052734375],["(*.f64 (/.f64 1 y) (neg.f64 x))","y","0",0.4140625]],"time":4.072998046875,"type":"series"},{"count":[[2,147]],"inputs":[["(*.f64 (/.f64 1 y) (neg.f64 x))","(/.f64 (*.f64 (/.f64 1 y) (neg.f64 x)) (neg.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 x y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (/.f64 x y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (cbrt.f64 (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 x) (cbrt.f64 y)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (pow.f64 x 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (*.f64 (pow.f64 y -2/3) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 y -1/3)) (*.f64 (pow.f64 y -2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y -2/3) x) (neg.f64 (pow.f64 y -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y -2/3) (neg.f64 x)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 x 2/3) y) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -2/3) (/.f64 (neg.f64 x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) (cbrt.f64 (neg.f64 (pow.f64 (/.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) y) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) 0)) (+.f64 0 (cbrt.f64 (neg.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (+.f64 0 (*.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) 0))) (-.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (*.f64 0 (cbrt.f64 (/.f64 x y))))) (cbrt.f64 (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) (neg.f64 y)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (/.f64 (cbrt.f64 x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (cbrt.f64 (neg.f64 x))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (pow.f64 (/.f64 x y) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -2/3) x) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -2/3) (neg.f64 x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 x) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (cbrt.f64 (pow.f64 (pow.f64 y 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 y (neg.f64 x))) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (neg.f64 (pow.f64 (/.f64 x y) 2))))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (neg.f64 (pow.f64 (/.f64 x y) 2))))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 y -2/3) x) 0) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 x (cbrt.f64 y)) 0) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 y -2/3) (neg.f64 x)) 0) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (cbrt.f64 (neg.f64 x))) 0) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (pow.f64 (/.f64 x y) 2))) 0) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (cbrt.f64 (neg.f64 x)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (pow.f64 (/.f64 x y) 2)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 x) (pow.f64 (/.f64 x y) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 x (pow.f64 (/.f64 x y) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x y) 2) x)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x y) 2) (neg.f64 x))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 y -1/3)) x) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) (pow.f64 x 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y x)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 y -1/3) x)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 (pow.f64 y -1/3) x)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 y -1/3)) x) 0) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 (neg.f64 x) (cbrt.f64 y)) 0) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) (pow.f64 x 2/3)) 0) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (neg.f64 (pow.f64 y -1/3)) x)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (*.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) (pow.f64 x 2/3))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x y) 2) (/.f64 (neg.f64 x) (cbrt.f64 y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (neg.f64 x) (cbrt.f64 y)) (pow.f64 (/.f64 x y) 2))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (/.f64 x y) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 (pow.f64 (/.f64 x y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (neg.f64 (/.f64 x y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (*.f64 y y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (pow.f64 y -1/3) 4)) (*.f64 (pow.f64 y -2/3) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) (*.f64 (/.f64 1 y) (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (pow.f64 y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) (pow.f64 (/.f64 x (*.f64 y y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 y -1/3)) (*.f64 (neg.f64 (/.f64 x y)) (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) y) (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 y -2)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (/.f64 x y)) (pow.f64 y -2/3)) (neg.f64 (pow.f64 y -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (cbrt.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (neg.f64 y)) (cbrt.f64 (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 y) (pow.f64 y -2/3)) (/.f64 x (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y -2/3) (neg.f64 x)) (neg.f64 (pow.f64 (pow.f64 y -1/3) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (*.f64 0 (cbrt.f64 (neg.f64 (/.f64 x (*.f64 y y))))))) (cbrt.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (pow.f64 y -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (cbrt.f64 (pow.f64 (pow.f64 y 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (cbrt.f64 (neg.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (cbrt.f64 (neg.f64 (/.f64 x y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (cbrt.f64 (/.f64 x y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (neg.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (*.f64 (/.f64 1 y) (pow.f64 y -2/3))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) (pow.f64 (/.f64 x (*.f64 y y)) 2/3)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (/.f64 x (*.f64 y y)) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 x y)) (pow.f64 y -2/3)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (*.f64 (pow.f64 y -2/3) (neg.f64 x))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (pow.f64 y -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 (neg.f64 (/.f64 x y)) (pow.f64 y -2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2) (neg.f64 (/.f64 x y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2) (neg.f64 x))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2) (/.f64 x y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 x) (pow.f64 (/.f64 x (*.f64 y y)) 2))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (/.f64 x y)) (pow.f64 (/.f64 x (*.f64 y y)) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 x y) (pow.f64 (/.f64 x (*.f64 y y)) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (pow.f64 (/.f64 x y) 3) (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 y) (/.f64 (neg.f64 x) (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (cbrt.f64 y)) y) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 y -1/3)) (neg.f64 (/.f64 x y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) (cbrt.f64 (pow.f64 (/.f64 x y) 2))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (pow.f64 y -1/3) 4)) (neg.f64 x)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 x) (cbrt.f64 y)) (neg.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (/.f64 x y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2) (/.f64 (/.f64 x y) (cbrt.f64 y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (pow.f64 (/.f64 x (*.f64 y y)) 2))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (*.f64 y y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (*.f64 y y)) 3))))))"]],"rules":[["egg-rr",71],["egg-rr",76]],"time":50.011962890625,"type":"rewrite"},{"count":[[195,148]],"inputs":[["(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)"]],"time":176.698974609375,"type":"simplify"},{"compiler":[[2124,1078]],"time":23.2041015625,"type":"eval"},{"alts":[["(-.f64 (/.f64 (/.f64 x y) y) 3)","done",0.09375],["(-.f64 (/.f64 x (*.f64 y y)) 3)","done",3.620993806991428],["(-.f64 (*.f64 (pow.f64 y -2) x) 3)","fresh",3.83203125],["(-.f64 (/.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) 3) (neg.f64 y)) 3)","fresh",0.31007402351637653],["(-.f64 (*.f64 (/.f64 1 y) (/.f64 x y)) 3)","next",0.146816259768442],["(-.f64 (/.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (neg.f64 y))) (cbrt.f64 y)) 3)","fresh",7.360702539073768]],"compiler":[[9,6],[9,6],[9,7],[14,11],[11,8],[20,15],[9,7],[14,11],[11,8],[20,15]],"count":[[153,6]],"kept":[{"done":[2,2],"fresh":[2,0],"new":[148,4],"picked":[1,0]}],"min-error":[0.00390625],"time":39.531982421875,"type":"prune"},{"compiler":[[28,15]],"locations":[["(*.f64 (/.f64 1 y) (/.f64 x y))",0.25619125976844204,true]],"time":5.884033203125,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (/.f64 1 y) (/.f64 x y))","x","-inf",0.14794921875],["(*.f64 (/.f64 1 y) (/.f64 x y))","x","inf",0.1669921875],["(*.f64 (/.f64 1 y) (/.f64 x y))","x","0",0.14208984375],["(*.f64 (/.f64 1 y) (/.f64 x y))","y","-inf",0.172119140625],["(*.f64 (/.f64 1 y) (/.f64 x y))","y","inf",0.1591796875],["(*.f64 (/.f64 1 y) (/.f64 x y))","y","0",0.184814453125]],"time":1.0419921875,"type":"series"},{"count":[[1,103]],"inputs":[["(*.f64 (/.f64 1 y) (/.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (*.f64 y y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) (pow.f64 (/.f64 x (*.f64 y y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (cbrt.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) y) (/.f64 (pow.f64 x 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 x y)) y) (pow.f64 (/.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 x 2/3) y) (/.f64 (cbrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x y) 2/3) (/.f64 (cbrt.f64 (/.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) (/.f64 (pow.f64 (/.f64 x y) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (pow.f64 y -4/3) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (*.f64 (pow.f64 y -2/3) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (/.f64 x y) 2/3) y) (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 y -4/3) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -2/3) (/.f64 (/.f64 x y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y -2/3) (/.f64 x y)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (pow.f64 y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 y -4/3)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y -4/3) x) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 y) (/.f64 x (cbrt.f64 y))) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) (pow.f64 (/.f64 x y) 2/3)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (pow.f64 (/.f64 x (*.f64 y y)) 2/3)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (cbrt.f64 x)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (/.f64 (pow.f64 (/.f64 x y) 2/3) y)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 y) (*.f64 (pow.f64 y -2/3) x)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (cbrt.f64 (/.f64 x y))) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (/.f64 (pow.f64 y -4/3) (cbrt.f64 y))) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (/.f64 x (*.f64 y y)) 2/3)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (/.f64 1 (cbrt.f64 (pow.f64 y 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) (/.f64 1 (pow.f64 (cbrt.f64 y) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y -2/3) x) (pow.f64 y -4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (/.f64 x y)) (pow.f64 y -2/3)) (neg.f64 (pow.f64 y -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (pow.f64 (/.f64 x y) 2/3) y)) (neg.f64 (pow.f64 y -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -4/3) (*.f64 (pow.f64 y -2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (pow.f64 y -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (/.f64 x y)) (cbrt.f64 y)) (neg.f64 (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 x y)) (pow.f64 y -2/3)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 (pow.f64 (/.f64 x y) 2/3) y))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 1 y) (*.f64 (pow.f64 y -2/3) x))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (cbrt.f64 (/.f64 x y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (/.f64 (pow.f64 y -4/3) (cbrt.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (/.f64 x (*.f64 y y)) 2/3))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3)))) (neg.f64 (cbrt.f64 (pow.f64 y 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2) (/.f64 (/.f64 x y) (cbrt.f64 y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2) (neg.f64 (/.f64 x y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (pow.f64 (/.f64 x (*.f64 y y)) 2))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (/.f64 x y)) (pow.f64 (/.f64 x (*.f64 y y)) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (cbrt.f64 x)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -4/3) x) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (/.f64 x (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) (pow.f64 (/.f64 x y) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (pow.f64 (/.f64 x (*.f64 y y)) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (cbrt.f64 (pow.f64 y 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (cbrt.f64 (/.f64 x y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (*.f64 (pow.f64 y -2/3) x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (/.f64 x (*.f64 y y)) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -2/3) (/.f64 x y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (pow.f64 y -4/3) (cbrt.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (/.f64 (pow.f64 (/.f64 x y) 2/3) y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (pow.f64 (/.f64 x y) 2/3) y)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) 5))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (pow.f64 y -4/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -2/3) x) (pow.f64 y 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 x y)) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (pow.f64 y -1/3) (cbrt.f64 (neg.f64 x))) 3) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (pow.f64 y -4/3))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 y -4/3) x)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 1 y) (/.f64 x (cbrt.f64 y)))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) (pow.f64 (/.f64 x y) 2/3))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 x) (pow.f64 (/.f64 x (*.f64 y y)) 2/3))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2/3) (cbrt.f64 x))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (neg.f64 y))) (neg.f64 (pow.f64 (cbrt.f64 y) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (pow.f64 y 2/3)) (neg.f64 (pow.f64 y 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (pow.f64 (/.f64 x y) 2/3) y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2) (neg.f64 x))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 x) (pow.f64 (/.f64 x (*.f64 y y)) 2))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2) x)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 x y) (pow.f64 (/.f64 x (*.f64 y y)) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2) (/.f64 x y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 x (pow.f64 (/.f64 x (*.f64 y y)) 2))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (*.f64 y y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (pow.f64 y -2/3) (neg.f64 (/.f64 x y))) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (/.f64 x (*.f64 y y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (*.f64 y y)) 3))))))"]],"rules":[["egg-rr",103]],"time":42.760986328125,"type":"rewrite"},{"count":[[127,104]],"inputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)","(/.f64 x (pow.f64 y 2))","(/.f64 (/.f64 x y) y)"]],"time":101.8359375,"type":"simplify"},{"compiler":[[1424,739]],"time":15.692138671875,"type":"eval"},{"alts":[["(-.f64 (/.f64 (/.f64 x y) y) 3)","done",0.09375],["(-.f64 (/.f64 x (*.f64 y y)) 3)","done",3.620993806991428],["(-.f64 (*.f64 (pow.f64 y -2) x) 3)","fresh",3.83203125],["(-.f64 (/.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) 3) (neg.f64 y)) 3)","fresh",0.31007402351637653],["(-.f64 (*.f64 (/.f64 1 y) (/.f64 x y)) 3)","done",0.146816259768442],["(-.f64 (/.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (neg.f64 y))) (cbrt.f64 y)) 3)","fresh",7.360702539073768]],"compiler":[[9,6],[9,6],[9,7],[14,11],[11,8],[20,15]],"count":[[110,6]],"kept":[{"done":[2,2],"fresh":[3,3],"new":[104,0],"picked":[1,1]}],"min-error":[0.00390625],"time":20.64892578125,"type":"prune"},{"accuracy":[0.09375],"baseline":[0.09375],"branch":[["x",0.09375,1],["y",0.09375,1],["(-.f64 (/.f64 x (*.f64 y y)) 3)",0.09375,1],["(/.f64 x (*.f64 y y))",0.09375,1],["(*.f64 y y)",0.09375,1]],"compiler":[[3,2],[3,2],[9,6],[7,4],[5,3],[103,59]],"count":[[10,1]],"inputs":[["(-.f64 (*.f64 (pow.f64 y -2) x) 3)","(-.f64 (/.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x y))) 3) (neg.f64 y)) 3)","(-.f64 (*.f64 (/.f64 1 y) (/.f64 x y)) 3)","(-.f64 (/.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (neg.f64 y))) (cbrt.f64 y)) 3)","(-.f64 (/.f64 (/.f64 x y) y) 3)","(-.f64 (pow.f64 (cbrt.f64 (/.f64 (/.f64 x y) y)) 3) 3)","(-.f64 (/.f64 (/.f64 (/.f64 (/.f64 x y) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) 3)","(-.f64 (/.f64 (*.f64 (/.f64 1 y) (neg.f64 x)) (neg.f64 y)) 3)","(fma.f64 x (pow.f64 y -2) -3)","(-.f64 (/.f64 x (*.f64 y y)) 3)"]],"link":["."],"name":["Statistics.Sample:$skurtosis from math-functions-0.1.5.2"],"oracle":[11.249488964905723],"outputs":[["(-.f64 (/.f64 (/.f64 x y) y) 3)"]],"time":20.48388671875,"times":[["x",4.234130859375],["y",4.306884765625],["(-.f64 (/.f64 x (*.f64 y y)) 3)",2.6220703125],["(/.f64 x (*.f64 y y))",3.1318359375],["(*.f64 y y)",4.0478515625]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(-.f64 (/.f64 (/.f64 x y) y) 3)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 (/.f64 x y) y) 3)","(fma.f64 x (pow.f64 y -2) -3)"]],"stop":[["fuel",1]],"time":18.323974609375,"type":"simplify"},{"time":0.01513671875,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.73486328125,"type":"end"}]
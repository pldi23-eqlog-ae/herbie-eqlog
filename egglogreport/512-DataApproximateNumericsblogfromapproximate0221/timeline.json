[{"compiler":[[16,13]],"method":["search"],"sampling":[[12,0.4992678165435791,0.0009760856628417969,0.4997560977935791],[11,0.4987797737121582,0.0019521713256835938,0.4992680549621582],[10,0.4978036880493164,0.0039043426513671875,0.4982919692993164],[9,0.4958515167236328,0.007808685302734375,0.4963397979736328],[8,0.4919471740722656,0.01561737060546875,0.4924354553222656],[7,0.48413848876953125,0.0312347412109375,0.48462677001953125],[6,0.4685211181640625,0.062469482421875,0.4690093994140625],[5,0.437286376953125,0.12493896484375,0.437774658203125],[4,0.37481689453125,0.2498779296875,0.37530517578125],[3,0.2498779296875,0.499755859375,0.2503662109375],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.871826171875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.19775390625,5],["body",256,"valid",357.429443359375,8256]],"time":365.5361328125,"type":"sample"},{"compiler":[[15,12]],"inputs":[["0"],["(/.f64 (*.f64 6 (-.f64 x 1)) (+.f64 (+.f64 x 1) (*.f64 4 (sqrt.f64 x))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (*.f64 6 (-.f64 x 1)) (+.f64 (+.f64 x 1) (*.f64 4 (sqrt.f64 x))))","(/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))"]],"symmetry":[[]],"time":56.23681640625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (*.f64 6 (-.f64 x 1)) (+.f64 (+.f64 x 1) (*.f64 4 (sqrt.f64 x))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 6 (-.f64 x 1)) (+.f64 (+.f64 x 1) (*.f64 4 (sqrt.f64 x))))","(/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))"]],"time":22.7890625,"type":"simplify"},{"compiler":[[27,20]],"time":0.4970703125,"type":"eval"},{"alts":[["(/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))","fresh",2.777911021746793],["(/.f64 (*.f64 6 (-.f64 x 1)) (+.f64 (+.f64 x 1) (*.f64 4 (sqrt.f64 x))))","next",0.12337875976844201]],"compiler":[[13,10],[15,12],[13,10],[15,12]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.11947250976844201],"time":1.541015625,"type":"prune"},{"compiler":[[44,30]],"locations":[["(+.f64 (+.f64 x 1) (*.f64 4 (sqrt.f64 x)))",0.00390625,true],["(*.f64 6 (-.f64 x 1))",0.015625,true],["(/.f64 (*.f64 6 (-.f64 x 1)) (+.f64 (+.f64 x 1) (*.f64 4 (sqrt.f64 x))))",0.125,true]],"time":10.932861328125,"type":"localize"},{"count":[[3,18]],"series":[["(+.f64 (+.f64 x 1) (*.f64 4 (sqrt.f64 x)))","x","-inf",0.241943359375],["(+.f64 (+.f64 x 1) (*.f64 4 (sqrt.f64 x)))","x","inf",0.348876953125],["(+.f64 (+.f64 x 1) (*.f64 4 (sqrt.f64 x)))","x","0",0.248046875],["(*.f64 6 (-.f64 x 1))","x","-inf",0.215087890625],["(*.f64 6 (-.f64 x 1))","x","inf",0.304931640625],["(*.f64 6 (-.f64 x 1))","x","0",0.2138671875],["(/.f64 (*.f64 6 (-.f64 x 1)) (+.f64 (+.f64 x 1) (*.f64 4 (sqrt.f64 x))))","x","-inf",0.94189453125],["(/.f64 (*.f64 6 (-.f64 x 1)) (+.f64 (+.f64 x 1) (*.f64 4 (sqrt.f64 x))))","x","inf",0.72607421875],["(/.f64 (*.f64 6 (-.f64 x 1)) (+.f64 (+.f64 x 1) (*.f64 4 (sqrt.f64 x))))","x","0",0.89794921875]],"time":4.260986328125,"type":"series"},{"count":[[3,276]],"inputs":[["(/.f64 (*.f64 6 (-.f64 x 1)) (+.f64 (+.f64 x 1) (*.f64 4 (sqrt.f64 x))))","(*.f64 6 (-.f64 x 1))","(+.f64 (+.f64 x 1) (*.f64 4 (sqrt.f64 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) 0) (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) 1/2) (*.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) (*.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) (*.f64 6 x)) (*.f64 (/.f64 1 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) -6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) (*.f64 x 6)) (*.f64 (/.f64 1 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) -6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (*.f64 1/2 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) (*.f64 0 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 6 x) (/.f64 1 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (*.f64 -6 (/.f64 1 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 6) (/.f64 1 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (*.f64 -6 (/.f64 1 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 6 x -6) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (/.f64 (fma.f64 6 x -6) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (/.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 6)) (/.f64 6 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 (*.f64 x x) (exp.f64 (log1p.f64 x))) (/.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 6)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 (pow.f64 x 3) (fma.f64 x x (exp.f64 (log1p.f64 x)))) (/.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 6)) (/.f64 (/.f64 1 (fma.f64 x x (exp.f64 (log1p.f64 x)))) (/.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (/.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 6)) (/.f64 (fma.f64 6 x -6) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 6 x -6)) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 6 x -6) 2)) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) (/.f64 6 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 6 x -6) (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) 2)) (cbrt.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 216 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (/.f64 (+.f64 x -1) (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 6 (/.f64 (+.f64 x -1) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x -1) (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (/.f64 6 (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 6 x -6) (/.f64 1 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) (fma.f64 6 x -6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -6 (+.f64 x -1)) (/.f64 -1 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) (neg.f64 1/3)) (/.f64 (fma.f64 6 x -6) (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 6 x -6) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x -1) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 6 x -6) (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x -1) (/.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 6 (fma.f64 x x -1)) 1) (*.f64 (exp.f64 (log1p.f64 x)) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 6 (fma.f64 x x -1)) -1) (*.f64 (exp.f64 (log1p.f64 x)) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 6 (fma.f64 x x -1)) (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) (neg.f64 1/3))) (*.f64 (exp.f64 (log1p.f64 x)) (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 6 (fma.f64 x x -1))) (*.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 6 (+.f64 -1 (pow.f64 x 3)))) (*.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) (fma.f64 x x (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 6 (fma.f64 x x -1))) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 6 (+.f64 -1 (pow.f64 x 3)))) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) (fma.f64 x x (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) (neg.f64 1/3)) (*.f64 6 (fma.f64 x x -1))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2)) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) (neg.f64 1/3)) (*.f64 6 (+.f64 -1 (pow.f64 x 3)))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2)) (fma.f64 x x (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 6 x -6) (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) 1) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -6 (+.f64 x -1)) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 6 x -6) (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) (neg.f64 1/3)) (fma.f64 6 x -6)) (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) 2)) (cbrt.f64 (*.f64 -6 (+.f64 x -1)))) (cbrt.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) 2)) (cbrt.f64 (fma.f64 6 x -6))) (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (cbrt.f64 (pow.f64 (fma.f64 6 x -6) 2))) (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) (*.f64 6 (fma.f64 x x -1))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 216 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (+.f64 x -1)) (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x -1) (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) 6) (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 6 (/.f64 (+.f64 x -1) (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2)))) (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x -1) (/.f64 6 (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2)))) (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 6 x -6) (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) 1) (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 x x)) (/.f64 6 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (neg.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 6 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (neg.f64 (fma.f64 x x (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 x x -1) (cbrt.f64 (exp.f64 (log1p.f64 x)))) (/.f64 6 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -1) (/.f64 6 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 x x -1) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (/.f64 6 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -6 (+.f64 x -1))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) 2))) (cbrt.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 6 x -6)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) 2))) (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 6 (fma.f64 x x -1)) (/.f64 1 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 6 x -6) (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2))) (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 6 x -6) (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) 1) (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3)))) (/.f64 1 (fma.f64 x 16 (*.f64 (exp.f64 (log1p.f64 x)) (+.f64 (exp.f64 (log1p.f64 x)) (*.f64 -4 (sqrt.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 6 x -6) -1) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -6 (+.f64 x -1)) (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 x) (/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 6 (+.f64 -1 (pow.f64 x 3))) 1) (*.f64 (fma.f64 x x (exp.f64 (log1p.f64 x))) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 6 (+.f64 -1 (pow.f64 x 3))) -1) (*.f64 (fma.f64 x x (exp.f64 (log1p.f64 x))) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 6 (+.f64 -1 (pow.f64 x 3))) (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) (neg.f64 1/3))) (*.f64 (fma.f64 x x (exp.f64 (log1p.f64 x))) (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 x) (neg.f64 (/.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 6 x -6) (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (/.f64 6 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (fma.f64 x x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) (*.f64 6 (+.f64 -1 (pow.f64 x 3)))) (fma.f64 x x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 6 (+.f64 -1 (pow.f64 x 3))) (/.f64 1 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (fma.f64 x x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 6 x -6) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fma.f64 6 x -6) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 1 x) (/.f64 6 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 -6 (+.f64 x -1)) (/.f64 1 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) (*.f64 -6 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 6 x) -6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 6) -6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -6 (*.f64 6 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -6 (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 6 x -6) 0) (fma.f64 6 x -6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 6 x -6) 1/2) (*.f64 (fma.f64 6 x -6) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 6 x -6) (*.f64 (fma.f64 6 x -6) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1) 3) (*.f64 (+.f64 x -1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 6 x)) -6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 x 6)) -6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 6 x -6)) (fma.f64 6 x -6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 6 x -6)) (*.f64 1/2 (fma.f64 6 x -6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 6 x -6) (*.f64 0 (fma.f64 6 x -6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (+.f64 x -1)) (*.f64 3 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 6 x) 1) -6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 6) 1) -6)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -6 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 6 x) 6)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x 6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 6 x -6)) (cbrt.f64 (pow.f64 (fma.f64 6 x -6) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 6 x -6) 2)) (cbrt.f64 (fma.f64 6 x -6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) (sqrt.f64 6)) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) (cbrt.f64 6)) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 216 (+.f64 x -1))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 6) (*.f64 (sqrt.f64 6) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 6) (*.f64 (cbrt.f64 36) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 6 (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) 6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 6 x -6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 6 x -6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -6 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -6 (+.f64 x -1))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 6 x -6) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) -6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -6 (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 6 (fma.f64 x x -1)) (exp.f64 (neg.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 6 (+.f64 -1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x x (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 6 (fma.f64 x x -1)) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 6 x -6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 6 (-.f64 1 (*.f64 x x))) (neg.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 6 (-.f64 1 (pow.f64 x 3))) (neg.f64 (fma.f64 x x (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 6 (/.f64 (fma.f64 x x -1) (cbrt.f64 (exp.f64 (log1p.f64 x))))) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 6 (/.f64 (fma.f64 x x -1) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 6 (fma.f64 x x -1))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -1 (pow.f64 x 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) 6)) (cbrt.f64 (fma.f64 x x (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 x x -1)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) 6)) (cbrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 x x)) 6) (neg.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) 6) (neg.f64 (fma.f64 x x (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 x x -1) (cbrt.f64 (exp.f64 (log1p.f64 x)))) 6) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 x x -1) (sqrt.f64 (exp.f64 (log1p.f64 x)))) 6) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 6 (fma.f64 x x -1)) 1) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 6 x -6) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 6 x -6) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 6 (fma.f64 x x -1)) (cbrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 6 (fma.f64 x x -1)) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 2)))) (cbrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 6 (fma.f64 x x -1)) -1) (neg.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 6 (fma.f64 x x -1)) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 6 (fma.f64 x x -1)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 6 (fma.f64 x x -1)) (+.f64 1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -6 (+.f64 x -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x -1) (/.f64 1 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 x 3)) (/.f64 (fma.f64 x x (exp.f64 (log1p.f64 x))) 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x -1) (/.f64 (exp.f64 (log1p.f64 x)) 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 6 x) 3) (pow.f64 -6 3)) (+.f64 (*.f64 (*.f64 6 x) (*.f64 6 x)) (-.f64 36 (*.f64 (*.f64 6 x) -6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x 6) 3) (pow.f64 -6 3)) (+.f64 (*.f64 (*.f64 x 6) (*.f64 x 6)) (-.f64 36 (*.f64 (*.f64 x 6) -6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 6 (+.f64 -1 (pow.f64 x 3))) 1) (*.f64 (fma.f64 x x (exp.f64 (log1p.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 6 (+.f64 -1 (pow.f64 x 3))) (*.f64 (fma.f64 x x (exp.f64 (log1p.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) 6) (*.f64 (neg.f64 (fma.f64 x x (exp.f64 (log1p.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 x x -1) (cbrt.f64 (exp.f64 (log1p.f64 x)))) 6) (*.f64 (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 6 (fma.f64 x x -1))) (neg.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 6 (+.f64 -1 (pow.f64 x 3)))) (neg.f64 (fma.f64 x x (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 6 (+.f64 -1 (pow.f64 x 3))) (fma.f64 x x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 6 (+.f64 -1 (pow.f64 x 3)))) (fma.f64 x x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 6 (+.f64 -1 (pow.f64 x 3))) 1) (fma.f64 x x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 6 (+.f64 -1 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x x (exp.f64 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (fma.f64 x x (exp.f64 (log1p.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 6 x -6)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 6 x -6)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 6 x -6)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 6 x -6) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 6 x -6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -6 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 6 x -6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 6 x -6)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 6 -6)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 x)) (sqrt.f64 (*.f64 16 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 16 x)) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (fma.f64 (sqrt.f64 x) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) 4 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) 4 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (fma.f64 (sqrt.f64 x) 4 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (sqrt.f64 x) 4 x) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 1/2 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 0) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 1/2) (*.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) (*.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) (*.f64 1/2 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) (*.f64 0 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (exp.f64 (log1p.f64 x))) -1) (*.f64 (*.f64 -4 (sqrt.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -4 (sqrt.f64 x)) -1) (*.f64 (neg.f64 (exp.f64 (log1p.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (neg.f64 (fma.f64 (sqrt.f64 x) 4 1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 (sqrt.f64 x) 4 x) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (sqrt.f64 x) 4 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3))) (/.f64 1 (fma.f64 x 16 (*.f64 (exp.f64 (log1p.f64 x)) (+.f64 (exp.f64 (log1p.f64 x)) (*.f64 -4 (sqrt.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3)))) (/.f64 1 (neg.f64 (fma.f64 x 16 (*.f64 (exp.f64 (log1p.f64 x)) (+.f64 (exp.f64 (log1p.f64 x)) (*.f64 -4 (sqrt.f64 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 16 x)) (-.f64 (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 2))) (cbrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) (sqrt.f64 (*.f64 16 x)))))) (+.f64 (cbrt.f64 (sqrt.f64 (*.f64 16 x))) (cbrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 2))) (-.f64 (cbrt.f64 (*.f64 16 x)) (cbrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) (sqrt.f64 (*.f64 16 x)))))) (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (sqrt.f64 (*.f64 16 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2)) (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3))) (fma.f64 x 16 (*.f64 (exp.f64 (log1p.f64 x)) (+.f64 (exp.f64 (log1p.f64 x)) (*.f64 -4 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3)))) (neg.f64 (fma.f64 x 16 (*.f64 (exp.f64 (log1p.f64 x)) (+.f64 (exp.f64 (log1p.f64 x)) (*.f64 -4 (sqrt.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2)) (cbrt.f64 (fma.f64 64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3))))) (cbrt.f64 (fma.f64 x 16 (*.f64 (exp.f64 (log1p.f64 x)) (+.f64 (exp.f64 (log1p.f64 x)) (*.f64 -4 (sqrt.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (fma.f64 64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3))))) (fma.f64 x 16 (*.f64 (exp.f64 (log1p.f64 x)) (+.f64 (exp.f64 (log1p.f64 x)) (*.f64 -4 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3))) 1) (fma.f64 x 16 (*.f64 (exp.f64 (log1p.f64 x)) (+.f64 (exp.f64 (log1p.f64 x)) (*.f64 -4 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (fma.f64 64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3)))) 1) (neg.f64 (fma.f64 x 16 (*.f64 (exp.f64 (log1p.f64 x)) (+.f64 (exp.f64 (log1p.f64 x)) (*.f64 -4 (sqrt.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3)))) (cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2))) (cbrt.f64 (fma.f64 x 16 (*.f64 (exp.f64 (log1p.f64 x)) (+.f64 (exp.f64 (log1p.f64 x)) (*.f64 -4 (sqrt.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3))) (cbrt.f64 (fma.f64 x 16 (*.f64 (exp.f64 (log1p.f64 x)) (+.f64 (exp.f64 (log1p.f64 x)) (*.f64 -4 (sqrt.f64 x))))))) (pow.f64 (cbrt.f64 (fma.f64 x 16 (*.f64 (exp.f64 (log1p.f64 x)) (+.f64 (exp.f64 (log1p.f64 x)) (*.f64 -4 (sqrt.f64 x)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) (+.f64 1 (-.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) (fma.f64 (sqrt.f64 x) 4 x)) (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3) 1) (+.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) (fma.f64 (sqrt.f64 x) 4 x)) (-.f64 1 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (fma.f64 64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3)))) 1) (*.f64 (neg.f64 (fma.f64 x 16 (*.f64 (exp.f64 (log1p.f64 x)) (+.f64 (exp.f64 (log1p.f64 x)) (*.f64 -4 (sqrt.f64 x)))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3))) 1) (*.f64 (fma.f64 x 16 (*.f64 (exp.f64 (log1p.f64 x)) (+.f64 (exp.f64 (log1p.f64 x)) (*.f64 -4 (sqrt.f64 x))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (fma.f64 (sqrt.f64 x) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (fma.f64 (sqrt.f64 x) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 16 x))) (cbrt.f64 (*.f64 16 x)) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (*.f64 16 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (fma.f64 (sqrt.f64 x) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (*.f64 16 x)) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (exp.f64 (log1p.f64 x)) (sqrt.f64 (*.f64 16 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 1)) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 1) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (sqrt.f64 x) 4 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (*.f64 16 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (log1p.f64 x)) 1 (sqrt.f64 (*.f64 16 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (*.f64 16 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (pow.f64 x 3)) (/.f64 1 (fma.f64 x x (-.f64 1 x))) (sqrt.f64 (*.f64 16 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 4 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (sqrt.f64 (sqrt.f64 x))) (*.f64 2 (sqrt.f64 (sqrt.f64 x))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 x) (cbrt.f64 4)) (cbrt.f64 16) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 16 x)) (cbrt.f64 (sqrt.f64 (*.f64 16 x))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (sqrt.f64 (*.f64 4 x)) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 x)) (cbrt.f64 (*.f64 x 64)) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 4 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 4)) 2 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 4) (*.f64 (cbrt.f64 16) (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 16 x)) 1 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (sqrt.f64 x)) 4) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (fma.f64 (sqrt.f64 x) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 x 3/2)) (sqrt.f64 (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (pow.f64 x 3/2)) (fma.f64 (sqrt.f64 x) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 (cbrt.f64 x) (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (fma.f64 (sqrt.f64 x) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) -1 (fma.f64 (sqrt.f64 x) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (fma.f64 (sqrt.f64 x) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (fma.f64 (sqrt.f64 x) 4 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (fma.f64 (sqrt.f64 x) 4 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 1/2 (fma.f64 (sqrt.f64 x) 4 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 2))) (sqrt.f64 (*.f64 16 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 2))) (cbrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (*.f64 16 x)))))))"]],"rules":[["egg-rr",100],["egg-rr",84],["egg-rr",92]],"time":47.06201171875,"type":"rewrite"},{"count":[[294,281]],"inputs":[["-6","6","6","-6","(-.f64 (*.f64 6 x) 6)","(-.f64 (*.f64 6 x) 6)","(-.f64 (*.f64 6 x) 6)","(*.f64 6 x)","(-.f64 (*.f64 6 x) 6)","(-.f64 (*.f64 6 x) 6)","(-.f64 (*.f64 6 x) 6)","(*.f64 6 x)","(-.f64 (*.f64 6 x) 6)","(-.f64 (*.f64 6 x) 6)","(-.f64 (*.f64 6 x) 6)","1","x","x"]],"method":["egg-herbie"],"outputs":[["-6","6","6","-6","(-.f64 (*.f64 6 x) 6)","(fma.f64 6 x -6)","(-.f64 (*.f64 6 x) 6)","(fma.f64 6 x -6)","(-.f64 (*.f64 6 x) 6)","(fma.f64 6 x -6)","(*.f64 6 x)","(-.f64 (*.f64 6 x) 6)","(fma.f64 6 x -6)","(-.f64 (*.f64 6 x) 6)","(fma.f64 6 x -6)","(-.f64 (*.f64 6 x) 6)","(fma.f64 6 x -6)","(*.f64 6 x)","(-.f64 (*.f64 6 x) 6)","(fma.f64 6 x -6)","(-.f64 (*.f64 6 x) 6)","(fma.f64 6 x -6)","(-.f64 (*.f64 6 x) 6)","(fma.f64 6 x -6)","1","x","x"]],"time":63.593994140625,"type":"simplify"},{"compiler":[[5850,3622]],"time":67.757080078125,"type":"eval"},{"alts":[["(*.f64 6 (/.f64 (+.f64 x -1) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))","fresh",2.7682764988029063],["(/.f64 (*.f64 6 (-.f64 x 1)) (+.f64 1/2 (+.f64 1/2 (fma.f64 (sqrt.f64 x) 4 x))))","fresh",0.12337875976844201],["(/.f64 (-.f64 1 x) (/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 6))","next",0.0390625],["(/.f64 (*.f64 6 (-.f64 x 1)) (fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (pow.f64 x 3/2)) (fma.f64 (sqrt.f64 x) 4 1)))","fresh",9.12663275676812],["(/.f64 (*.f64 (*.f64 6 (+.f64 -1 (pow.f64 x 3))) -1) (*.f64 (fma.f64 x x (exp.f64 (log1p.f64 x))) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))","fresh",18.871757519536885]],"compiler":[[14,11],[16,13],[14,11],[20,15],[25,19],[14,11],[16,13],[14,11],[20,15],[25,19]],"count":[[283,5]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[281,5],"picked":[1,0]}],"min-error":[0],"time":109.655029296875,"type":"prune"},{"compiler":[[45,29]],"locations":[["(-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))",0.00390625,true],["(fma.f64 (sqrt.f64 x) 4 x)",0.0078125,true],["(/.f64 (-.f64 1 x) (/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 6))",0.03125,true],["(/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 6)",0.03515625,true]],"time":10.49609375,"type":"localize"},{"count":[[4,11]],"series":[["(-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))","x","-inf",0.27197265625],["(-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))","x","inf",0.222900390625],["(-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))","x","0",0.2490234375],["(fma.f64 (sqrt.f64 x) 4 x)","x","-inf",0.2021484375],["(fma.f64 (sqrt.f64 x) 4 x)","x","inf",0.18603515625],["(fma.f64 (sqrt.f64 x) 4 x)","x","0",0.364013671875],["(/.f64 (-.f64 1 x) (/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 6))","x","-inf",0.31201171875],["(/.f64 (-.f64 1 x) (/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 6))","x","inf",0.4609375],["(/.f64 (-.f64 1 x) (/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 6))","x","0",0.429931640625],["(/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 6)","x","-inf",0.363037109375],["(/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 6)","x","inf",0.49609375],["(/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 6)","x","0",0.39794921875]],"time":4.10595703125,"type":"series"},{"count":[[4,373]],"inputs":[["(/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 6)","(/.f64 (-.f64 1 x) (/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 6))","(fma.f64 (sqrt.f64 x) 4 x)","(-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/6 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) -1/6) -1/6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) (*.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 1/2) (*.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 0) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/6 (*.f64 1/6 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/6 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x))) -1/6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/6 (*.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) -1/6) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) (*.f64 0 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) (*.f64 1/2 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1/6 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1/216 (+.f64 1/36 (*.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6) (*.f64 1/6 (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (/.f64 (pow.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6) 3) (+.f64 1/36 (*.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6) (*.f64 1/6 (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 -1 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)) 6) (/.f64 (/.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)) 6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6) (/.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -6 36) (/.f64 (*.f64 6 (fma.f64 (sqrt.f64 x) 4 x)) 36))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) -1/6) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (*.f64 6 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1))) (/.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3) (*.f64 6 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 6 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1))) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2) (cbrt.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 2)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)) -1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/6) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/6) (/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) (sqrt.f64 216))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 2)) (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) (cbrt.f64 (/.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 2) 36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 -1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) 1/6) (/.f64 1 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1/216 (pow.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6) 3)) (/.f64 1 (+.f64 1/36 (*.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6) (*.f64 1/6 (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) (cbrt.f64 1/6)) (cbrt.f64 (/.f64 1 36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) (sqrt.f64 1/6)) (sqrt.f64 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -6 (*.f64 -6 (fma.f64 (sqrt.f64 x) 4 x))) (/.f64 1 36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) (/.f64 1 (*.f64 6 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) (sqrt.f64 1/6)) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) (cbrt.f64 1/6)) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) (*.f64 6 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1/216 (pow.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6) 3)) (+.f64 1/36 (*.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6) (*.f64 1/6 (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -6 (*.f64 -6 (fma.f64 (sqrt.f64 x) 4 x))) 36)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)) -6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/6 (+.f64 1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3))) (neg.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) (sqrt.f64 216))) (cbrt.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 2))) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) (cbrt.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 2))) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/6) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2) (cbrt.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))) (cbrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))) (cbrt.f64 -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)) (cbrt.f64 -1/6)) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)) (neg.f64 (sqrt.f64 1/6))) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/6) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) 1/6) (neg.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) (cbrt.f64 36)) (cbrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) (sqrt.f64 1/6)) 1) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) (cbrt.f64 1/6)) 1) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -6 (*.f64 -6 (fma.f64 (sqrt.f64 x) 4 x))) 1) 36)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1/216 (pow.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6) 3)) 1) (+.f64 1/36 (*.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6) (*.f64 1/6 (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 -1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 2)) 1/6)) (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (cbrt.f64 (/.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 2) 36))) (cbrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2)) (cbrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) (cbrt.f64 (/.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 2) 36))) (cbrt.f64 -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2)) (cbrt.f64 -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 2)) (sqrt.f64 1/6))) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) (*.f64 -6 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) (*.f64 6 (neg.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) (*.f64 1 (*.f64 6 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1/216 (pow.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) -1/6) 3)) (+.f64 1/36 (-.f64 (*.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) -1/6) (*.f64 (fma.f64 (sqrt.f64 x) 4 x) -1/6)) (*.f64 -1/6 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) -1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 -1/6) (sqrt.f64 6)) (*.f64 (cbrt.f64 36) (*.f64 (fma.f64 (sqrt.f64 x) 4 x) (sqrt.f64 1/6)))) (*.f64 (cbrt.f64 36) (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 -1/6) (cbrt.f64 36)) (*.f64 (cbrt.f64 36) (*.f64 (fma.f64 (sqrt.f64 x) 4 x) (cbrt.f64 1/6)))) (*.f64 (cbrt.f64 36) (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 -1/6) 6) (*.f64 (cbrt.f64 36) (fma.f64 (sqrt.f64 x) 4 x))) (*.f64 (cbrt.f64 36) 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 -1/6) -6) (*.f64 (cbrt.f64 36) (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)))) (*.f64 (cbrt.f64 36) -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 1/6)) (sqrt.f64 6)) (*.f64 (sqrt.f64 6) (*.f64 (fma.f64 (sqrt.f64 x) 4 x) (sqrt.f64 1/6)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 1/6)) (cbrt.f64 36)) (*.f64 (sqrt.f64 6) (*.f64 (fma.f64 (sqrt.f64 x) 4 x) (cbrt.f64 1/6)))) (*.f64 (sqrt.f64 6) (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 1/6)) 6) (*.f64 (sqrt.f64 6) (fma.f64 (sqrt.f64 x) 4 x))) (sqrt.f64 216))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 1/6)) -6) (*.f64 (sqrt.f64 6) (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)))) (*.f64 (sqrt.f64 6) -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (sqrt.f64 6)) (*.f64 6 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) (sqrt.f64 1/6)))) (sqrt.f64 216))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (cbrt.f64 36)) (*.f64 6 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) (cbrt.f64 1/6)))) (*.f64 6 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 6 (*.f64 6 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)))) (*.f64 6 -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 6) (*.f64 -6 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) (sqrt.f64 1/6)))) (*.f64 -6 (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 36) (*.f64 -6 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) (cbrt.f64 1/6)))) (*.f64 -6 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 6 (*.f64 -6 (fma.f64 (sqrt.f64 x) 4 x))) (*.f64 -6 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -6 (*.f64 -6 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)))) 36)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 -1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) 1/6)) (neg.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 -1/216 (pow.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6) 3))) (neg.f64 (+.f64 1/36 (*.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6) (*.f64 1/6 (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) (cbrt.f64 1/6))) (neg.f64 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) (sqrt.f64 1/6))) (neg.f64 (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 -6 (*.f64 -6 (fma.f64 (sqrt.f64 x) 4 x)))) (neg.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) (neg.f64 (*.f64 6 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) 1/6) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/6 (-.f64 -1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3))) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (-.f64 -1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) 1/6)) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 -1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) 1/6) 1) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) -1/6) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/6) (cbrt.f64 (/.f64 1 36)) (*.f64 (fma.f64 (sqrt.f64 x) 4 x) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 1/6)) (sqrt.f64 1/6) (*.f64 (fma.f64 (sqrt.f64 x) 4 x) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/6) (cbrt.f64 (/.f64 -1 36)) (*.f64 (fma.f64 (sqrt.f64 x) 4 x) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 1/6 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/6) (cbrt.f64 1/36) (*.f64 (fma.f64 (sqrt.f64 x) 4 x) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/6) (neg.f64 (sqrt.f64 1/6)) (*.f64 (fma.f64 (sqrt.f64 x) 4 x) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -1/6 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) -1/6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (/.f64 x (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) (*.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 1/2) (*.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 0) (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (*.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (neg.f64 x)) (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 -1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) 3) (*.f64 (/.f64 (+.f64 -1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (*.f64 (/.f64 x (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) (*.f64 0 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))) (*.f64 1/2 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))) (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (/.f64 (+.f64 -1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))) (*.f64 3 (/.f64 (+.f64 -1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (/.f64 x (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) (pow.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 2)) (/.f64 (/.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)) x) -6) (pow.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) (/.f64 (-.f64 1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 1 (fma.f64 (+.f64 1 x) x 1)) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) (/.f64 (/.f64 (pow.f64 x 3) (fma.f64 (+.f64 1 x) x 1)) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) (/.f64 (-.f64 1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) (neg.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 x)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))) (/.f64 (-.f64 1 x) (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 x) (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))) (pow.f64 (cbrt.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2)) (cbrt.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 1 x) (sqrt.f64 6)) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 1 x) (cbrt.f64 6)) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 1 x)) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))) (cbrt.f64 (/.f64 (pow.f64 (-.f64 1 x) 2) (pow.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (*.f64 (-.f64 1 x) 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) -6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 6 (/.f64 (+.f64 -1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (+.f64 -1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) -1) -6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (+.f64 -6 (*.f64 -6 (fma.f64 (sqrt.f64 x) 4 x)))) 36)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -6 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) (-.f64 1 x)) (/.f64 1 (pow.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 (fma.f64 (+.f64 1 x) x 1) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) 6) (/.f64 1 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 x) (neg.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) (/.f64 1 (fma.f64 (+.f64 1 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 x) (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))) (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2))) (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (-.f64 1 (*.f64 x x))) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))) (-.f64 1 x)) (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 -1 x) (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))) 1) (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 x x)) (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))) (*.f64 1/6 (cbrt.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) (*.f64 (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2) (neg.f64 x))) (*.f64 (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))) (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2)) (*.f64 (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2) (*.f64 x (cbrt.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (*.f64 (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2) (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))) 1/6) (*.f64 (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2) (/.f64 x (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))) (*.f64 (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) (*.f64 (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2) x)) (*.f64 (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 1 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) (*.f64 1/6 (neg.f64 x))) (*.f64 1/6 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 1 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2)) (*.f64 1/6 (*.f64 x (cbrt.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (*.f64 1/6 (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 1 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) 1/6) (*.f64 1/6 (/.f64 x (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))) 1/36)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 1 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) (*.f64 1/6 x)) (*.f64 1/6 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2) (*.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) (*.f64 x (cbrt.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (*.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6) (*.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) (neg.f64 x))) (*.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/6 (*.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) (/.f64 x (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))) (*.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1/6 (*.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6) (/.f64 x (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))) (*.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2)) (*.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6) (*.f64 x (cbrt.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (*.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6) (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6) (*.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6) x)) (*.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) (-.f64 1 x))) (neg.f64 (pow.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 x 3)) (neg.f64 (*.f64 (fma.f64 (+.f64 1 x) x 1) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) (fma.f64 (+.f64 1 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) (-.f64 1 x)) (pow.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (fma.f64 (+.f64 1 x) x 1) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 x) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) 6) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2)) (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2)) (cbrt.f64 (+.f64 -1 x))) (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) -1) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6))) (fma.f64 (+.f64 1 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (-.f64 1 x)) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (-.f64 1 (pow.f64 x 3))) (fma.f64 (+.f64 1 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (-.f64 1 x)) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2))) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 6 (-.f64 1 x)) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 6 (/.f64 (-.f64 1 x) (cbrt.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))) (cbrt.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 6 (+.f64 -1 x)) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 x)) (cbrt.f64 (/.f64 (pow.f64 (-.f64 1 x) 2) (pow.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 2)))) (cbrt.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 x)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2))) (cbrt.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -1 x)) (cbrt.f64 (/.f64 (pow.f64 (-.f64 1 x) 2) (pow.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 2)))) (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -1 x)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2))) (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) (-.f64 1 x)) 1) (pow.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 x) 6) 1) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) 1) (fma.f64 (+.f64 1 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) 6)) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (neg.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))) (fma.f64 (+.f64 1 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 x) (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2)) (cbrt.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))) 6) (cbrt.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 x) 6) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 (*.f64 (fma.f64 (+.f64 1 x) x 1) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) (*.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6) (neg.f64 x))) (pow.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 -1 x) (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))) (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 1 x) 6)) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) -1/6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (+.f64 -1 (pow.f64 x 3))) (neg.f64 (fma.f64 (+.f64 1 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))) (neg.f64 (fma.f64 (+.f64 1 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 x 3))) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6))) (cbrt.f64 (fma.f64 (+.f64 1 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6))) (neg.f64 (fma.f64 (+.f64 1 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) -2)) (/.f64 x (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (/.f64 x (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))) (cbrt.f64 (pow.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6) -2)) (/.f64 x (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) 6 (/.f64 x (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) -6 (/.f64 x (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))) (pow.f64 (cbrt.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/6)) -2) (/.f64 x (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (/.f64 6 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))) (/.f64 x (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 x 16)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) 4 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 x 16)) (-.f64 x 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (-.f64 (sqrt.f64 (*.f64 x 16)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) 4 x) (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/2) (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 0) (fma.f64 (sqrt.f64 x) 4 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (*.f64 -4 (sqrt.f64 x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) 4 x) (*.f64 0 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 (sqrt.f64 x) 4 x)) (*.f64 1/2 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (sqrt.f64 x) 4 x)) (fma.f64 (sqrt.f64 x) 4 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -4 (sqrt.f64 x)) -1) (*.f64 (neg.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (sqrt.f64 x) 4 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 x)) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 2)) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (+.f64 4 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (sqrt.f64 x) 4 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sqrt.f64 x) 4 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 (pow.f64 x 3/2)) (*.f64 (sqrt.f64 (sqrt.f64 x)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 x)) (+.f64 (*.f64 (cbrt.f64 x) (sqrt.f64 x)) (cbrt.f64 (*.f64 x 64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 x)) (+.f64 (*.f64 (sqrt.f64 (sqrt.f64 x)) 4) (sqrt.f64 (pow.f64 x 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 x)) (+.f64 (cbrt.f64 (*.f64 x 64)) (*.f64 (cbrt.f64 x) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 2)) (+.f64 0 (*.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 x)) 0))) (-.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sqrt.f64 x) 4 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 x) (/.f64 1 (+.f64 4 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) 4 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 x)) (cbrt.f64 (*.f64 x 64)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (sqrt.f64 x)) 4) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 4 (sqrt.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 x) (cbrt.f64 4)) (cbrt.f64 16) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 4)) 2 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (sqrt.f64 x)) 2) (*.f64 (sqrt.f64 (sqrt.f64 x)) 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 16))) (cbrt.f64 (*.f64 x 16)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (*.f64 x 16)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)) (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 x 3/2)) (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 (cbrt.f64 x) (sqrt.f64 x)) (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (pow.f64 x 3/2)) (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 16)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 2)) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 x)) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (+.f64 4 (sqrt.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (sqrt.f64 x) 4 x) 0)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -4 (sqrt.f64 x)) (+.f64 (neg.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/2) (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 0) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -4 (sqrt.f64 x)) (*.f64 -1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) (*.f64 0 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (*.f64 1/2 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -4 (sqrt.f64 x)) (*.f64 (+.f64 1 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -4 (sqrt.f64 x)) (neg.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)) (neg.f64 (/.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)) (/.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 -1 x) (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -4 (sqrt.f64 x)) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 -1 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)) 1) (/.f64 (/.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (cbrt.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 2)) (cbrt.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) (/.f64 1 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) (/.f64 -1 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 2)) (cbrt.f64 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x))))) (-.f64 -1 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) (neg.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 2)) (cbrt.f64 (-.f64 -1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)))) (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (pow.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3) 3)) (/.f64 1 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1))) (+.f64 (+.f64 1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 6)) (neg.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) 1) (neg.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 -1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3))) (cbrt.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 2))) (cbrt.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)) (*.f64 6 (+.f64 1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)))) (*.f64 6 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)) (*.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1) (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3))) (*.f64 (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3)) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) (+.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 x (-.f64 -1 (sqrt.f64 (*.f64 x 16)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 1 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -1 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 x)) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x))) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (fma.f64 (sqrt.f64 x) 4 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (fma.f64 (sqrt.f64 x) 4 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (sqrt.f64 x) 4 x) -1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)))))))"]],"rules":[["egg-rr",67],["egg-rr",65],["egg-rr",126],["egg-rr",115]],"time":58.708984375,"type":"rewrite"},{"count":[[384,381]],"inputs":[["-1/6","(*.f64 -1/6 x)","(*.f64 -1/6 x)","-6","6","6","x","x","-1","(*.f64 -1 x)","(*.f64 -1 x)"]],"method":["egg-herbie"],"outputs":[["-1/6","(*.f64 -1/6 x)","(*.f64 -1/6 x)","-6","6","6","x","x","-1","(*.f64 -1 x)","(neg.f64 x)","(*.f64 -1 x)","(neg.f64 x)"]],"time":66.81103515625,"type":"simplify"},{"compiler":[[8427,6071]],"time":111.77587890625,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))) 3)","fresh",0.09117128907376808],["(/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))","fresh",0.12337875976844201],["(*.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) -6)","next",0.0234375],["(/.f64 (-.f64 1 x) (/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 6))","done",0.0390625],["(/.f64 (-.f64 1 x) (-.f64 (/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6) (/.f64 x 6)))","fresh",0.033535009768442016]],"compiler":[[16,13],[14,11],[14,11],[14,11],[17,14],[16,13],[14,11],[14,11],[17,14]],"count":[[386,5]],"kept":[{"done":[0,0],"fresh":[4,0],"new":[381,4],"picked":[1,1]}],"min-error":[0],"time":214.4521484375,"type":"prune"},{"compiler":[[44,29]],"locations":[["(fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))",0.00390625,true],["(*.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) -6)",0.01953125,true],["(/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))",0.03515625,true]],"time":10.23681640625,"type":"localize"},{"count":[[3,9]],"series":[["(fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))","x","-inf",0.174072265625],["(fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))","x","inf",0.18017578125],["(fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))","x","0",0.18994140625],["(*.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) -6)","x","-inf",0.293212890625],["(*.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) -6)","x","inf",0.251220703125],["(*.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) -6)","x","0",0.259033203125],["(/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))","x","-inf",0.448974609375],["(/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))","x","inf",0.618896484375],["(/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))","x","0",0.43115234375]],"time":2.9599609375,"type":"series"},{"count":[[3,270]],"inputs":[["(/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))","(*.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) -6)","(fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (/.f64 x (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))) (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 1/2) (*.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (*.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 0) (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (*.f64 (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (neg.f64 x)) (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (*.f64 1/2 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (*.f64 0 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (*.f64 (/.f64 x (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (/.f64 x (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (+.f64 -1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))) (/.f64 (+.f64 -1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))) (/.f64 -1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)) (/.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) x) (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (/.f64 (/.f64 (*.f64 x x) (exp.f64 (log1p.f64 x))) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (/.f64 (+.f64 -1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 1 (fma.f64 x x (exp.f64 (log1p.f64 x)))) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (/.f64 (/.f64 (pow.f64 x 3) (fma.f64 x x (exp.f64 (log1p.f64 x)))) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 x)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (neg.f64 1/3)) (/.f64 (-.f64 1 x) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (+.f64 -1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 2)) (cbrt.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 x) (/.f64 -1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (cbrt.f64 (/.f64 (pow.f64 (-.f64 1 x) 2) (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (+.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))) (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (-.f64 1 x) 2) (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))) (cbrt.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (*.f64 x x)) (/.f64 1 (*.f64 (exp.f64 (log1p.f64 x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (-.f64 1 x)) (/.f64 1 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (*.f64 x x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (exp.f64 (neg.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 (fma.f64 x x (exp.f64 (log1p.f64 x))) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (/.f64 1 (fma.f64 x x (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (fma.f64 x x -1)) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -1) (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (*.f64 x x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (*.f64 x x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) -1) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (fma.f64 x x (exp.f64 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (fma.f64 x x (exp.f64 (log1p.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)) (*.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (/.f64 x (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))) (*.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))) (*.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (neg.f64 x))) (*.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))) (*.f64 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))) (/.f64 x (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))) (*.f64 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (*.f64 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))) (neg.f64 x))) (*.f64 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))) (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))) (*.f64 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))) x)) (*.f64 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)) (/.f64 x (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (neg.f64 1/3)) (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)) (neg.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)) (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (neg.f64 1/3)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)) x)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x -1) (neg.f64 (*.f64 (exp.f64 (log1p.f64 x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (-.f64 1 x))) (neg.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 (*.f64 x x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 x 3)) (neg.f64 (*.f64 (fma.f64 x x (exp.f64 (log1p.f64 x))) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 x) (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (*.f64 x x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (-.f64 1 x)) (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (fma.f64 x x (exp.f64 (log1p.f64 x))) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (*.f64 x x)) (*.f64 (exp.f64 (log1p.f64 x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (/.f64 (-.f64 1 (*.f64 x x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (/.f64 (-.f64 1 (*.f64 x x)) (cbrt.f64 (exp.f64 (log1p.f64 x))))) (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 2)) (cbrt.f64 (+.f64 -1 x))) (cbrt.f64 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 2)) (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (neg.f64 1/3)) (-.f64 1 x)) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2))) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -1) (/.f64 -1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) 1) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (-.f64 1 x)) 1) (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (*.f64 x x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 1) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (*.f64 x x))) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (cbrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (*.f64 x x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (*.f64 x x)) (cbrt.f64 (exp.f64 (log1p.f64 x)))) (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -1 x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 2))) (cbrt.f64 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -1 x)) (cbrt.f64 (/.f64 (pow.f64 (-.f64 1 x) 2) (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)))) (cbrt.f64 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 2))) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 x)) (cbrt.f64 (/.f64 (pow.f64 (-.f64 1 x) 2) (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)))) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 x) -1) (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 x) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) 1) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (-.f64 1 x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (*.f64 x x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (*.f64 x x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (*.f64 x x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (+.f64 1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (*.f64 x x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2))) (cbrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (*.f64 x x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 1) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (*.f64 x x)) (/.f64 (*.f64 (exp.f64 (log1p.f64 x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 (*.f64 (fma.f64 x x (exp.f64 (log1p.f64 x))) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (fma.f64 x x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (+.f64 -1 (pow.f64 x 3))) (neg.f64 (fma.f64 x x (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (/.f64 -1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (fma.f64 x x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 1) (fma.f64 x x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 x 3))) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (cbrt.f64 (fma.f64 x x (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (neg.f64 (fma.f64 x x (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 1) (fma.f64 x x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (neg.f64 (fma.f64 x x (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 -1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (+.f64 -1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) -2)) (/.f64 x (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 -1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (/.f64 x (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (neg.f64 1/3)) (pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) -2) (/.f64 x (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) -2)) (/.f64 x (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (/.f64 x (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 1/2) (*.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (*.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 0) (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -6 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (*.f64 -6 (/.f64 x (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (*.f64 0 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -6 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (*.f64 (/.f64 x (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))) -6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) -6)) (/.f64 (/.f64 (*.f64 x x) (exp.f64 (log1p.f64 x))) (/.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) -6)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -6 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (/.f64 x (/.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) -6)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (/.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) -6)) (/.f64 (*.f64 -6 (+.f64 -1 x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 1 (fma.f64 x x (exp.f64 (log1p.f64 x)))) (/.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) -6)) (/.f64 (/.f64 (pow.f64 x 3) (fma.f64 x x (exp.f64 (log1p.f64 x)))) (/.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) -6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) -6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -6 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 2)) (cbrt.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 2)) -6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -6) (/.f64 (*.f64 (cbrt.f64 36) (-.f64 1 x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (/.f64 -6 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (/.f64 -6 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) -6) (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -6 (cbrt.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 1 x) (cbrt.f64 -6)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 -6 (+.f64 -1 x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -6 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 36) (-.f64 1 x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (cbrt.f64 -6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 36) (/.f64 (*.f64 (-.f64 1 x) (cbrt.f64 -6)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 2)) -6) (cbrt.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (*.f64 (-.f64 1 x) -6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 2)) (*.f64 -6 (cbrt.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -6 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))) (/.f64 (-.f64 1 x) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -6 (+.f64 -1 x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -6 (+.f64 -1 x)) (/.f64 -1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 x x)) -6) (*.f64 (exp.f64 (log1p.f64 x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) -6) (*.f64 (fma.f64 x x (exp.f64 (log1p.f64 x))) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -1) (/.f64 -6 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -6 (+.f64 -1 x)) (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 x) (/.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 x) -6) -1) (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -6 (/.f64 (-.f64 1 x) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -6 (*.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (-.f64 1 x))) (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -6 (/.f64 (-.f64 1 (*.f64 x x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) -6) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 2)) (cbrt.f64 (*.f64 (-.f64 1 x) -6))) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (/.f64 -6 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)))) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -6 (+.f64 -1 x)) 1) (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) 1) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 (*.f64 x x)) -6) (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (-.f64 1 x)) -6) (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (*.f64 x x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) -6) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (*.f64 x x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (/.f64 -6 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 x x)) (/.f64 -6 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (*.f64 x x)) (cbrt.f64 (exp.f64 (log1p.f64 x)))) (/.f64 -6 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -1 x)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 2)) -6)) (cbrt.f64 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 x)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 2)) -6)) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (-.f64 1 x) -6)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 2))) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) -6) -1) (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -6 (+.f64 -1 x)) 1) (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -6 (+.f64 -1 x)) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) 1) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 x) (/.f64 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))) -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 x) (neg.f64 (/.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) -6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -6 (/.f64 (-.f64 1 (pow.f64 x 3)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (fma.f64 x x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) -6) (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (fma.f64 x x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) -6) (fma.f64 x x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 -6 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (fma.f64 x x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (/.f64 -6 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (neg.f64 (fma.f64 x x (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 -6 (+.f64 -1 x)) (/.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (+.f64 -1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) -6))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 -6 (+.f64 -1 x)) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 -1 x) (/.f64 -6 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -6 (/.f64 (+.f64 -1 x) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 x 16)) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 x)) (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) 4 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (fma.f64 (sqrt.f64 x) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (*.f64 -4 (sqrt.f64 x))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 1/2) (*.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (*.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 0) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -4 (sqrt.f64 x)) -1) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (*.f64 1/2 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) (*.f64 0 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 1) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) 4 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (fma.f64 (sqrt.f64 x) 4 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (sqrt.f64 x) 4 x) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 (sqrt.f64 x) 4 x) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (sqrt.f64 x) 4 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (pow.f64 x 3/2) 64) (exp.f64 (*.f64 (log1p.f64 x) 3))) (/.f64 1 (+.f64 (*.f64 x 16) (*.f64 (exp.f64 (log1p.f64 x)) (-.f64 (exp.f64 (log1p.f64 x)) (sqrt.f64 (*.f64 x 16)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2)) (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 x 3/2) 64) (exp.f64 (*.f64 (log1p.f64 x) 3))) (+.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2) (-.f64 (*.f64 x 16) (*.f64 (sqrt.f64 (*.f64 x 16)) (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 x) 3) 1) (+.f64 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) (fma.f64 (sqrt.f64 x) 4 x)) (-.f64 1 (*.f64 (fma.f64 (sqrt.f64 x) 4 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 x 3/2) 64) (exp.f64 (*.f64 (log1p.f64 x) 3))) (+.f64 (*.f64 x 16) (*.f64 (exp.f64 (log1p.f64 x)) (-.f64 (exp.f64 (log1p.f64 x)) (sqrt.f64 (*.f64 x 16))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (pow.f64 x 3/2) 64) (exp.f64 (*.f64 (log1p.f64 x) 3)))) (neg.f64 (+.f64 (*.f64 x 16) (*.f64 (exp.f64 (log1p.f64 x)) (-.f64 (exp.f64 (log1p.f64 x)) (sqrt.f64 (*.f64 x 16)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 (pow.f64 x 3/2) 64) (exp.f64 (*.f64 (log1p.f64 x) 3))) 1) (+.f64 (*.f64 x 16) (*.f64 (exp.f64 (log1p.f64 x)) (-.f64 (exp.f64 (log1p.f64 x)) (sqrt.f64 (*.f64 x 16))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 -4 (sqrt.f64 x)) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 16))) (cbrt.f64 (*.f64 x 16)) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 x) (cbrt.f64 4)) (cbrt.f64 16) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (sqrt.f64 x)) 4) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 4)) 2 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 16))) (sqrt.f64 (sqrt.f64 (*.f64 x 16))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 x)) (cbrt.f64 (*.f64 x 64)) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (-.f64 -1 x) (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2)) (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (pow.f64 x 3)) (/.f64 1 (fma.f64 x x (-.f64 1 x))) (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2)) (cbrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 16)) 1 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (*.f64 x 16)) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (log1p.f64 x)) 1 (sqrt.f64 (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (exp.f64 (log1p.f64 x)) (sqrt.f64 (*.f64 x 16)))))))"]],"rules":[["egg-rr",64],["egg-rr",88],["egg-rr",118]],"time":50.191162109375,"type":"rewrite"},{"count":[[279,275]],"inputs":[["1","-1","-1","-6","6","6","1","x","x"]],"method":["egg-herbie"],"outputs":[["1","-1","-1","-6","6","6","1","x","x"]],"time":58.39306640625,"type":"simplify"},{"compiler":[[6184,3460]],"time":67.1337890625,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))) 3)","fresh",0.09117128907376808],["(/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))","fresh",0.12337875976844201],["(*.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) -6)","done",0.0234375],["(/.f64 (-.f64 1 x) (/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 6))","done",0.0390625],["(/.f64 (-.f64 1 x) (-.f64 (/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6) (/.f64 x 6)))","next",0.033535009768442016]],"compiler":[[16,13],[14,11],[14,11],[14,11],[17,14],[16,13],[14,11],[17,14]],"count":[[280,5]],"kept":[{"done":[1,1],"fresh":[3,3],"new":[275,0],"picked":[1,1]}],"min-error":[0],"time":88.114990234375,"type":"prune"},{"compiler":[[61,49]],"locations":[["(-.f64 (/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6) (/.f64 x 6))",0.01953125,true],["(/.f64 (-.f64 1 x) (-.f64 (/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6) (/.f64 x 6)))",0.03125,true],["(/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6)",0.17578125,true]],"time":14.8271484375,"type":"localize"},{"count":[[3,7]],"series":[["(-.f64 (/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6) (/.f64 x 6))","x","-inf",0.200927734375],["(-.f64 (/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6) (/.f64 x 6))","x","inf",0.18994140625],["(-.f64 (/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6) (/.f64 x 6))","x","0",0.2041015625],["(/.f64 (-.f64 1 x) (-.f64 (/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6) (/.f64 x 6)))","x","-inf",1.1630859375],["(/.f64 (-.f64 1 x) (-.f64 (/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6) (/.f64 x 6)))","x","inf",0.56591796875],["(/.f64 (-.f64 1 x) (-.f64 (/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6) (/.f64 x 6)))","x","0",0.613037109375],["(/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6)","x","-inf",0.47119140625],["(/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6)","x","inf",0.308837890625],["(/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6)","x","0",0.343017578125]],"time":4.200927734375,"type":"series"},{"count":[[3,307]],"inputs":[["(/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6)","(/.f64 (-.f64 1 x) (-.f64 (/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6) (/.f64 x 6)))","(-.f64 (/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6) (/.f64 x 6))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/6 (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6) -1/6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) (*.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) 1/2) (*.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) 0) (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/6 (*.f64 1/6 (neg.f64 (sqrt.f64 (*.f64 x 16)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/6 (neg.f64 (sqrt.f64 (*.f64 x 16)))) -1/6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) (*.f64 0 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))) (*.f64 1/2 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))) (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/6 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1/216 (+.f64 1/36 (+.f64 (*.f64 (*.f64 x 16) 1/36) (*.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))))) (/.f64 (*.f64 (pow.f64 (*.f64 x 16) 3/2) 1/216) (+.f64 1/36 (+.f64 (*.f64 (*.f64 x 16) 1/36) (*.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -6 36) (/.f64 (*.f64 6 (sqrt.f64 (*.f64 x 16))) 36))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 -1 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16)))) 6) (/.f64 (/.f64 (pow.f64 (*.f64 x 16) 3/2) (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16)))) 6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (*.f64 6 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))))) (/.f64 (pow.f64 (*.f64 x 16) 3/2) (*.f64 6 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 (sqrt.f64 (*.f64 x 16)) 1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 6 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))))) (fma.f64 (sqrt.f64 (*.f64 x 16)) 1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))) (cbrt.f64 (pow.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) 2)) (cbrt.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16)))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 (sqrt.f64 (*.f64 x 16))) 2)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (sqrt.f64 216))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 (sqrt.f64 (*.f64 x 16))) 2)) (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/6 (-.f64 -1 (sqrt.f64 (*.f64 x 16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (sqrt.f64 (*.f64 x 16))) -1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/6) (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/6) (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 (sqrt.f64 (*.f64 x 16)) 1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sqrt.f64 (*.f64 x 16)) 1/6 1/6) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 1 (sqrt.f64 (*.f64 x 16))) -6) 1/36)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) 1/6) (/.f64 1 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1/216 (*.f64 (pow.f64 (*.f64 x 16) 3/2) 1/216)) (/.f64 1 (+.f64 1/36 (+.f64 (*.f64 (*.f64 x 16) 1/36) (*.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (cbrt.f64 1/6)) (cbrt.f64 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) (/.f64 1 (*.f64 6 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) (/.f64 1 (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (sqrt.f64 1/6)) (sqrt.f64 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))))) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (sqrt.f64 (*.f64 x 16))) -6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (sqrt.f64 (*.f64 x 16))) -6) 36)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (sqrt.f64 (*.f64 x 16))) 6) -36)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1/216 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6) 3)) (+.f64 1/36 (-.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6) (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6)) (*.f64 -1/6 (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (cbrt.f64 36)) (*.f64 6 (*.f64 (sqrt.f64 (*.f64 x 16)) (cbrt.f64 1/6)))) (*.f64 6 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 6 (*.f64 6 (neg.f64 (sqrt.f64 (*.f64 x 16))))) -36)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (sqrt.f64 6)) (*.f64 6 (sqrt.f64 (/.f64 (*.f64 x 16) 6)))) (sqrt.f64 216))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 -1/6) (cbrt.f64 36)) (*.f64 (cbrt.f64 36) (*.f64 (sqrt.f64 (*.f64 x 16)) (cbrt.f64 1/6)))) (*.f64 6 (cbrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 -1/6) -6) (*.f64 (cbrt.f64 36) (neg.f64 (sqrt.f64 (*.f64 x 16))))) (*.f64 (cbrt.f64 36) -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 -1/6) 6) (*.f64 (cbrt.f64 36) (sqrt.f64 (*.f64 x 16)))) (*.f64 (cbrt.f64 36) 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 -1/6) (sqrt.f64 6)) (*.f64 (cbrt.f64 36) (sqrt.f64 (/.f64 (*.f64 x 16) 6)))) (*.f64 (cbrt.f64 36) (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 1/6)) (cbrt.f64 36)) (*.f64 (sqrt.f64 6) (*.f64 (sqrt.f64 (*.f64 x 16)) (cbrt.f64 1/6)))) (*.f64 (sqrt.f64 6) (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 1/6)) -6) (*.f64 (sqrt.f64 6) (neg.f64 (sqrt.f64 (*.f64 x 16))))) (*.f64 (sqrt.f64 6) -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 1/6)) 6) (*.f64 (sqrt.f64 6) (sqrt.f64 (*.f64 x 16)))) (sqrt.f64 216))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 1/6)) (sqrt.f64 6)) (*.f64 (sqrt.f64 6) (sqrt.f64 (/.f64 (*.f64 x 16) 6)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 36) (*.f64 -6 (*.f64 (sqrt.f64 (*.f64 x 16)) (cbrt.f64 1/6)))) (*.f64 -6 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -6 (*.f64 -6 (neg.f64 (sqrt.f64 (*.f64 x 16))))) 36)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 6 (*.f64 -6 (sqrt.f64 (*.f64 x 16)))) -36)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 6) (*.f64 -6 (sqrt.f64 (/.f64 (*.f64 x 16) 6)))) (*.f64 -6 (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) 1/6)) (neg.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 -1/216 (*.f64 (pow.f64 (*.f64 x 16) 3/2) 1/216))) (neg.f64 (+.f64 1/36 (+.f64 (*.f64 (*.f64 x 16) 1/36) (*.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (cbrt.f64 1/6))) (neg.f64 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (*.f64 x 16) 3/2)) (neg.f64 (*.f64 6 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (*.f64 x 16) 3/2)) (neg.f64 (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (sqrt.f64 1/6))) (neg.f64 (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) 1/6) (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (sqrt.f64 1/6)) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (cbrt.f64 1/6)) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) (*.f64 6 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1/216 (*.f64 (pow.f64 (*.f64 x 16) 3/2) 1/216)) (+.f64 1/36 (+.f64 (*.f64 (*.f64 x 16) 1/36) (*.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) (/.f64 (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) 6) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (/.f64 36 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) (/.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 -6 (+.f64 1 (sqrt.f64 (*.f64 x 16)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 6 (+.f64 1 (sqrt.f64 (*.f64 x 16)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (*.f64 x 16) 3/2)) (*.f64 6 (neg.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) 6) (*.f64 36 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (*.f64 x 16) 3/2)) (*.f64 -6 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 (sqrt.f64 (*.f64 x 16)) 1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 1/6 (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/6) (neg.f64 (cbrt.f64 1/36)) (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/6) (pow.f64 (cbrt.f64 -1/6) 2) (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/6) (cbrt.f64 1/36) (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -1/6 (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 1/6)) (sqrt.f64 1/6) (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/6) (neg.f64 (sqrt.f64 1/6)) (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 1 x) (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 3) (*.f64 (/.f64 (-.f64 1 x) (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (*.f64 (/.f64 1 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) (*.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) 1/2) (*.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) 0) (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (/.f64 (-.f64 1 x) (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (*.f64 3 (/.f64 (-.f64 1 x) (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (/.f64 x (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (*.f64 (/.f64 x (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) (*.f64 0 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))))) (*.f64 1/2 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))))) (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) (/.f64 1 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (neg.f64 x)) (/.f64 1 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 1 (+.f64 1 (fma.f64 x x x))) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (/.f64 (/.f64 (pow.f64 x 3) (+.f64 1 (fma.f64 x x x))) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2)) (/.f64 (*.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) x) (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (/.f64 x (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (+.f64 -1 x) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) (/.f64 (+.f64 -1 x) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) (/.f64 1 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (/.f64 (+.f64 -1 x) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) 2)) (cbrt.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 x)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))))) (cbrt.f64 (/.f64 (pow.f64 (-.f64 1 x) 2) (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (neg.f64 1/3)) (/.f64 (-.f64 1 x) (cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 x) (*.f64 6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) -36)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (*.f64 6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) -36)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))) (pow.f64 (cbrt.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))))) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 x) (/.f64 1 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (/.f64 1 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (*.f64 6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) 36)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (+.f64 -1 x) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))) -6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) -6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 36 (/.f64 (-.f64 1 x) (*.f64 6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 6 (/.f64 (-.f64 1 x) (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (-.f64 1 x)) (/.f64 1 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 (+.f64 1 (fma.f64 x x x)) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (/.f64 1 (+.f64 1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))) (cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2)) (*.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (/.f64 x (cbrt.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (*.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))) (*.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (neg.f64 x))) (*.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (-.f64 1 x)) (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2))) (*.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))) (/.f64 x (cbrt.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (*.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))) (cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (*.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))) (neg.f64 x))) (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))) (*.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))) x)) (*.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (neg.f64 1/3)) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2)) (neg.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2)) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (neg.f64 1/3)) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2)) x)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2)) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2)) (/.f64 x (cbrt.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2)) (cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (-.f64 1 x))) (neg.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 x 3)) (neg.f64 (*.f64 (+.f64 1 (fma.f64 x x x)) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (+.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (+.f64 1 (fma.f64 x x x)) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 x) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 (*.f64 (+.f64 1 (fma.f64 x x x)) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))) (neg.f64 (+.f64 1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) (/.f64 x (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (*.f64 6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) 36 (/.f64 x (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (/.f64 x (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (neg.f64 1/3)) (pow.f64 (cbrt.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) -2) (/.f64 x (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) -2)) (/.f64 x (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (neg.f64 1/3)) (pow.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (neg.f64 1/3)) 2) (/.f64 x (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 6 (/.f64 x (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x -1/6) -1/6) (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/6 (+.f64 (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6) (*.f64 x -1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/6 (-.f64 (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6) (*.f64 x 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (*.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 1/2) (*.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 0) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/6 (*.f64 1/6 (-.f64 (neg.f64 (sqrt.f64 (*.f64 x 16))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (fma.f64 1/6 x 1/6)) (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (*.f64 0 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (*.f64 1/2 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/6 (*.f64 (-.f64 (neg.f64 (sqrt.f64 (*.f64 x 16))) x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 1/6 x 1/6) -1) (*.f64 (sqrt.f64 (/.f64 (*.f64 x 16) 36)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (fma.f64 1/6 x 1/6)) (*.f64 (sqrt.f64 (*.f64 x 16)) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/6 (neg.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) (*.f64 x -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x -1/6) (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) (neg.f64 (*.f64 (*.f64 6 x) 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1/6 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) 0) (*.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 x -1/6) -1/6) (sqrt.f64 (/.f64 (*.f64 x 16) 36)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (fma.f64 1/6 x 1/6)) (sqrt.f64 (/.f64 (*.f64 x 16) 36)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1/6 1) (/.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) (/.f64 (*.f64 (*.f64 6 x) 1/36) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) (*.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) (*.f64 (*.f64 6 x) 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x -1/6) (fma.f64 (sqrt.f64 (*.f64 x 16)) 1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2)) (cbrt.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 1/36)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/6) (-.f64 (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (cbrt.f64 1/36)) (*.f64 x (cbrt.f64 1/36))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/6) (*.f64 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)) (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))))) (pow.f64 (cbrt.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))) (/.f64 1 -36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)) (cbrt.f64 1/6)) (cbrt.f64 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)) -1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)) (sqrt.f64 1/6)) (sqrt.f64 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) 2)) (+.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/36)) (*.f64 (cbrt.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))) (cbrt.f64 (*.f64 x 1/6))))) (-.f64 (cbrt.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))) (cbrt.f64 (*.f64 x 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)) (sqrt.f64 1/6)) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)) (cbrt.f64 1/6)) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 36)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))) -36)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)) -6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1/216 (pow.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) x)) 3)) (+.f64 1/36 (+.f64 (*.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) x)) (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) (*.f64 -1/6 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (+.f64 1 (sqrt.f64 (*.f64 x 16))) -6) 36) (*.f64 36 (*.f64 6 x))) (*.f64 36 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) (cbrt.f64 36)) (*.f64 (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) 6) (*.f64 x (cbrt.f64 1/6)))) (*.f64 (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) 6) (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) -6) (*.f64 (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) 6) (neg.f64 x))) (*.f64 (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) 6) -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) 6) (*.f64 (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) 6) x)) (*.f64 (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) 6) 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) (sqrt.f64 6)) (*.f64 (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) 6) (*.f64 x (sqrt.f64 1/6)))) (*.f64 (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) 6) (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (cbrt.f64 36)) (*.f64 6 (*.f64 x (cbrt.f64 1/6)))) (*.f64 6 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (sqrt.f64 6)) (*.f64 6 (*.f64 x (sqrt.f64 1/6)))) (sqrt.f64 216))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (+.f64 1 (sqrt.f64 (*.f64 x 16))) -6) (cbrt.f64 36)) (*.f64 36 (*.f64 x (cbrt.f64 1/6)))) (*.f64 36 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (+.f64 1 (sqrt.f64 (*.f64 x 16))) -6) -6) (*.f64 36 (neg.f64 x))) -216)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (+.f64 1 (sqrt.f64 (*.f64 x 16))) -6) 6) (*.f64 36 x)) 216)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (+.f64 1 (sqrt.f64 (*.f64 x 16))) -6) (sqrt.f64 6)) (*.f64 36 (*.f64 x (sqrt.f64 1/6)))) (*.f64 36 (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) (cbrt.f64 36)) (*.f64 (*.f64 6 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16)))) (*.f64 x (cbrt.f64 1/6)))) (*.f64 (*.f64 6 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16)))) (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) -6) (*.f64 (*.f64 6 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16)))) (neg.f64 x))) (*.f64 (*.f64 6 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16)))) -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) 6) (*.f64 (*.f64 6 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16)))) x)) (*.f64 (*.f64 6 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16)))) 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) (sqrt.f64 6)) (*.f64 (*.f64 6 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16)))) (*.f64 x (sqrt.f64 1/6)))) (*.f64 (*.f64 6 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16)))) (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (sqrt.f64 1/6)) (cbrt.f64 36)) (*.f64 (sqrt.f64 6) (*.f64 x (cbrt.f64 1/6)))) (*.f64 (sqrt.f64 6) (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (sqrt.f64 1/6)) -6) (*.f64 (sqrt.f64 6) (neg.f64 x))) (*.f64 (sqrt.f64 6) -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (sqrt.f64 1/6)) 6) (*.f64 (sqrt.f64 6) x)) (sqrt.f64 216))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (sqrt.f64 1/6)) (sqrt.f64 6)) (*.f64 (sqrt.f64 6) (*.f64 x (sqrt.f64 1/6)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) 1/6) (cbrt.f64 36)) (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) (*.f64 x (cbrt.f64 1/6)))) (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) 1/6) -6) (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) (neg.f64 x))) (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) 1/6) 6) (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) x)) (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (-.f64 -1 (pow.f64 (*.f64 x 16) 3/2)) 1/6) (sqrt.f64 6)) (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) (*.f64 x (sqrt.f64 1/6)))) (*.f64 (-.f64 (+.f64 1 (*.f64 x 16)) (sqrt.f64 (*.f64 x 16))) (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (cbrt.f64 1/6)) (cbrt.f64 36)) (*.f64 (cbrt.f64 36) (*.f64 x (cbrt.f64 1/6)))) (*.f64 6 (cbrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (cbrt.f64 1/6)) -6) (*.f64 (cbrt.f64 36) (neg.f64 x))) (*.f64 (cbrt.f64 36) -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (cbrt.f64 1/6)) 6) (*.f64 (cbrt.f64 36) x)) (*.f64 (cbrt.f64 36) 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (cbrt.f64 1/6)) (sqrt.f64 6)) (*.f64 (cbrt.f64 36) (*.f64 x (sqrt.f64 1/6)))) (*.f64 (cbrt.f64 36) (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 -1/216 (*.f64 (pow.f64 (*.f64 x 16) 3/2) 1/216)) (cbrt.f64 36)) (*.f64 (+.f64 1/36 (+.f64 (*.f64 (*.f64 x 16) 1/36) (*.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))))) (*.f64 x (cbrt.f64 1/6)))) (*.f64 (+.f64 1/36 (+.f64 (*.f64 (*.f64 x 16) 1/36) (*.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))))) (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 -1/216 (*.f64 (pow.f64 (*.f64 x 16) 3/2) 1/216)) -6) (*.f64 (+.f64 1/36 (+.f64 (*.f64 (*.f64 x 16) 1/36) (*.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))))) (neg.f64 x))) (*.f64 (+.f64 1/36 (+.f64 (*.f64 (*.f64 x 16) 1/36) (*.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))))) -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 -1/216 (*.f64 (pow.f64 (*.f64 x 16) 3/2) 1/216)) 6) (*.f64 (+.f64 1/36 (+.f64 (*.f64 (*.f64 x 16) 1/36) (*.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))))) x)) (*.f64 (+.f64 1/36 (+.f64 (*.f64 (*.f64 x 16) 1/36) (*.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))))) 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 -1/216 (*.f64 (pow.f64 (*.f64 x 16) 3/2) 1/216)) (sqrt.f64 6)) (*.f64 (+.f64 1/36 (+.f64 (*.f64 (*.f64 x 16) 1/36) (*.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))))) (*.f64 x (sqrt.f64 1/6)))) (*.f64 (+.f64 1/36 (+.f64 (*.f64 (*.f64 x 16) 1/36) (*.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))))) (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 1 (sqrt.f64 (*.f64 x 16))) (cbrt.f64 36)) (*.f64 -6 (*.f64 x (cbrt.f64 1/6)))) (*.f64 -6 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 1 (sqrt.f64 (*.f64 x 16))) (sqrt.f64 6)) (*.f64 -6 (*.f64 x (sqrt.f64 1/6)))) (*.f64 -6 (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 -36) (*.f64 6 (*.f64 6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))) (*.f64 6 -36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 -6) (*.f64 6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) -36)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 36) (*.f64 6 (*.f64 6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))))) 216)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 6) (*.f64 6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x)))) 36)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)) (cbrt.f64 1/6))) (neg.f64 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)) (sqrt.f64 1/6))) (neg.f64 (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) x)) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) (+.f64 1 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))) 3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 1/6 (*.f64 x -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 1/6 (neg.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/6) (neg.f64 (cbrt.f64 1/36)) (neg.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/6) (pow.f64 (cbrt.f64 -1/6) 2) (neg.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/6) (cbrt.f64 1/36) (neg.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -1/6 (neg.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 1/6)) (sqrt.f64 1/6) (neg.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/6) (neg.f64 (sqrt.f64 1/6)) (neg.f64 (*.f64 1/6 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (sqrt.f64 216))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 (sqrt.f64 (*.f64 x 16))) 2)) (sqrt.f64 1/6)) (*.f64 x -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (sqrt.f64 (*.f64 x 16))) -1/6 (*.f64 x -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/6) (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (sqrt.f64 1/6)) (*.f64 x -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/6) (*.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (cbrt.f64 1/36)) (*.f64 x -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16)))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 (sqrt.f64 (*.f64 x 16))) 2)) 1/6) (*.f64 x -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/6 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) (*.f64 x -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))) (cbrt.f64 (pow.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) 2)) (*.f64 x -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) (*.f64 x -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 1/6 (-.f64 -1 (+.f64 (sqrt.f64 (*.f64 x 16)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) 1 (*.f64 x -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36))) 2)) (cbrt.f64 (-.f64 -1/6 (sqrt.f64 (/.f64 (*.f64 x 16) 36)))) (*.f64 x -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (fma.f64 (sqrt.f64 (*.f64 x 16)) 1/6 1/6) (*.f64 x -1/6))))))"]],"rules":[["egg-rr",132],["egg-rr",80],["egg-rr",95]],"time":56.448974609375,"type":"rewrite"},{"count":[[314,311]],"inputs":[["-1/6","-6","6","6","-1/6","(*.f64 -1/6 x)","(*.f64 -1/6 x)"]],"method":["egg-herbie"],"outputs":[["-1/6","-6","6","6","-1/6","(*.f64 -1/6 x)","(*.f64 -1/6 x)"]],"time":53.43603515625,"type":"simplify"},{"compiler":[[7649,6358]],"time":98.276123046875,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))) 3)","fresh",0.09117128907376808],["(/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))","fresh",0.12337875976844201],["(*.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) -6)","done",0.0234375],["(/.f64 (-.f64 1 x) (/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 6))","done",0.0390625],["(/.f64 (-.f64 1 x) (-.f64 (/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6) (/.f64 x 6)))","done",0.033535009768442016]],"compiler":[[16,13],[14,11],[14,11],[14,11],[17,14]],"count":[[316,5]],"kept":[{"done":[2,2],"fresh":[2,2],"new":[311,0],"picked":[1,1]}],"min-error":[0],"time":148.013916015625,"type":"prune"},{"accuracy":[0.0234375],"baseline":[0.0234375],"branch":[["x",0.0234375,1],["(/.f64 (*.f64 6 (-.f64 x 1)) (+.f64 (+.f64 x 1) (*.f64 4 (sqrt.f64 x))))",0.0234375,1]],"compiler":[[2,1],[15,12],[168,117]],"count":[[11,1]],"inputs":[["(pow.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (fma.f64 (fma.f64 (sqrt.f64 x) 4 x) 1/6 1/6))) 3)","(/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x)))","(*.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) -6)","(/.f64 (-.f64 1 x) (-.f64 (/.f64 (-.f64 -1 (sqrt.f64 (*.f64 x 16))) 6) (/.f64 x 6)))","(*.f64 6 (/.f64 (+.f64 x -1) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))","(/.f64 (*.f64 6 (-.f64 x 1)) (+.f64 1/2 (+.f64 1/2 (fma.f64 (sqrt.f64 x) 4 x))))","(/.f64 (-.f64 1 x) (/.f64 (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x)) 6))","(/.f64 (*.f64 6 (-.f64 x 1)) (fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (pow.f64 x 3/2)) (fma.f64 (sqrt.f64 x) 4 1)))","(/.f64 (*.f64 (*.f64 6 (+.f64 -1 (pow.f64 x 3))) -1) (*.f64 (fma.f64 x x (exp.f64 (log1p.f64 x))) (-.f64 -1 (fma.f64 (sqrt.f64 x) 4 x))))","(/.f64 (fma.f64 6 x -6) (fma.f64 4 (sqrt.f64 x) (exp.f64 (log1p.f64 x))))","(/.f64 (*.f64 6 (-.f64 x 1)) (+.f64 (+.f64 x 1) (*.f64 4 (sqrt.f64 x))))"]],"link":["."],"name":["Data.Approximate.Numerics:blog from approximate-0.2.2.1"],"oracle":[19.70404863161243],"outputs":[["(*.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) -6)"]],"time":10.04296875,"times":[["x",4.365966796875],["(/.f64 (*.f64 6 (-.f64 x 1)) (+.f64 (+.f64 x 1) (*.f64 4 (sqrt.f64 x))))",2.39697265625]],"type":"regimes"},{"compiler":[[14,11]],"inputs":[["(*.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) -6)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 (-.f64 1 x) (fma.f64 (sqrt.f64 x) 4 (+.f64 1 x))) -6)","(/.f64 (*.f64 (-.f64 1 x) -6) (fma.f64 (sqrt.f64 x) 4 (exp.f64 (log1p.f64 x))))"]],"stop":[["fuel",1]],"time":22.125,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[14,11]],"remove-preprocessing":[[]],"time":10.1650390625,"type":"end"}]
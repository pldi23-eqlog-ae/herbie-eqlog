[{"compiler":[[22,14]],"method":["search"],"sampling":[[12,0.0,0.9970738864512326,0.002926113548767373],[11,0.0,0.9970738864512326,0.002926113548767373],[10,0.0,0.9970738864512326,0.002926113548767373],[9,0.0,0.9970738864512326,0.002926113548767373],[8,0.0,0.9970738864512326,0.002926113548767373],[7,0.0,0.9970738864512326,0.002926113548767373],[6,0.0,0.9970738864512326,0.002926113548767373],[5,0.0,0.9970738864512326,0.002926113548767373],[4,0.0,0.9970738864512326,0.002926113548767373],[3,0.0,0.9970738864512326,0.002926113548767373],[2,0.0,0.9970738864512326,0.002926113548767373],[1,0.0,0.9970738864512326,0.002926113548767373],[0,0.0,0.9970738864512326,0.002926113548767373]],"time":209.682861328125,"type":"analyze"},{"outcomes":[["body",256,"invalid",252.052001953125,4098],["body",256,"valid",504.559814453125,8256]],"time":768.68310546875,"type":"sample"},{"compiler":[[21,13]],"inputs":[["0","1","2","3","4","5"],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 a z) b))","(+.f64 (+.f64 (+.f64 y (*.f64 x z)) (*.f64 t a)) (*.f64 (*.f64 a z) b))","(+.f64 (+.f64 (+.f64 z (*.f64 y x)) (*.f64 t a)) (*.f64 (*.f64 a x) b))","(+.f64 (+.f64 (+.f64 t (*.f64 y z)) (*.f64 x a)) (*.f64 (*.f64 a z) b))","(+.f64 (+.f64 (+.f64 a (*.f64 y z)) (*.f64 t x)) (*.f64 (*.f64 x z) b))","(+.f64 (+.f64 (+.f64 b (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 a z) x))","(+.f64 (+.f64 (+.f64 x (*.f64 z y)) (*.f64 t a)) (*.f64 (*.f64 a y) b))","(+.f64 (+.f64 (+.f64 x (*.f64 t z)) (*.f64 y a)) (*.f64 (*.f64 a z) b))","(+.f64 (+.f64 (+.f64 x (*.f64 a z)) (*.f64 t y)) (*.f64 (*.f64 y z) b))","(+.f64 (+.f64 (+.f64 x (*.f64 b z)) (*.f64 t a)) (*.f64 (*.f64 a z) y))","(+.f64 (+.f64 (+.f64 x (*.f64 y t)) (*.f64 z a)) (*.f64 (*.f64 a t) b))","(+.f64 (+.f64 (+.f64 x (*.f64 y a)) (*.f64 t z)) (*.f64 (*.f64 z a) b))","(+.f64 (+.f64 (+.f64 x (*.f64 y b)) (*.f64 t a)) (*.f64 (*.f64 a b) z))","(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 a t)) (*.f64 (*.f64 t z) b))","(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 b a)) (*.f64 (*.f64 a z) t))","(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t b)) (*.f64 (*.f64 b z) a))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3","4","5"],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 a z) b))","(+.f64 (fma.f64 y z x) (*.f64 a (+.f64 t (*.f64 b z))))","(+.f64 (+.f64 (+.f64 y (*.f64 x z)) (*.f64 t a)) (*.f64 (*.f64 a z) b))","(+.f64 (fma.f64 x z y) (*.f64 a (+.f64 t (*.f64 b z))))","(+.f64 (+.f64 (+.f64 z (*.f64 y x)) (*.f64 t a)) (*.f64 (*.f64 a x) b))","(+.f64 (fma.f64 x y z) (*.f64 a (+.f64 t (*.f64 x b))))","(+.f64 (+.f64 (+.f64 t (*.f64 y z)) (*.f64 x a)) (*.f64 (*.f64 a z) b))","(+.f64 (fma.f64 y z t) (*.f64 a (fma.f64 b z x)))","(+.f64 (+.f64 (+.f64 a (*.f64 y z)) (*.f64 t x)) (*.f64 (*.f64 x z) b))","(+.f64 (fma.f64 y z a) (*.f64 x (+.f64 t (*.f64 b z))))","(+.f64 (+.f64 (+.f64 b (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 a z) x))","(+.f64 (fma.f64 y z b) (*.f64 a (+.f64 t (*.f64 x z))))","(+.f64 (+.f64 (+.f64 x (*.f64 z y)) (*.f64 t a)) (*.f64 (*.f64 a y) b))","(+.f64 (fma.f64 y z x) (*.f64 a (+.f64 t (*.f64 y b))))","(+.f64 (+.f64 (+.f64 x (*.f64 t z)) (*.f64 y a)) (*.f64 (*.f64 a z) b))","(+.f64 (fma.f64 t z x) (*.f64 a (+.f64 y (*.f64 b z))))","(+.f64 (+.f64 (+.f64 x (*.f64 a z)) (*.f64 t y)) (*.f64 (*.f64 y z) b))","(+.f64 (fma.f64 a z x) (*.f64 y (+.f64 t (*.f64 b z))))","(+.f64 (+.f64 (+.f64 x (*.f64 b z)) (*.f64 t a)) (*.f64 (*.f64 a z) y))","(+.f64 (fma.f64 b z x) (*.f64 a (fma.f64 y z t)))","(+.f64 (+.f64 (+.f64 x (*.f64 y t)) (*.f64 z a)) (*.f64 (*.f64 a t) b))","(+.f64 (fma.f64 t y x) (*.f64 a (+.f64 z (*.f64 t b))))","(+.f64 (+.f64 (+.f64 x (*.f64 y a)) (*.f64 t z)) (*.f64 (*.f64 z a) b))","(+.f64 (fma.f64 t z x) (*.f64 a (+.f64 y (*.f64 b z))))","(+.f64 (+.f64 (+.f64 x (*.f64 y b)) (*.f64 t a)) (*.f64 (*.f64 a b) z))","(+.f64 (fma.f64 y b x) (*.f64 a (+.f64 t (*.f64 b z))))","(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 a t)) (*.f64 (*.f64 t z) b))","(+.f64 (fma.f64 y z x) (*.f64 t (+.f64 a (*.f64 b z))))","(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 b a)) (*.f64 (*.f64 a z) t))","(+.f64 (fma.f64 y z x) (*.f64 a (+.f64 b (*.f64 t z))))","(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t b)) (*.f64 (*.f64 b z) a))","(+.f64 (fma.f64 y z x) (*.f64 b (+.f64 t (*.f64 a z))))"]],"symmetry":[[]],"time":106.0458984375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 a z) b))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 a z) b))","(+.f64 (fma.f64 y z x) (*.f64 a (+.f64 t (*.f64 z b))))"]],"time":19.93505859375,"type":"simplify"},{"compiler":[[33,18]],"time":0.38916015625,"type":"eval"},{"alts":[["(+.f64 (fma.f64 y z x) (*.f64 a (+.f64 t (*.f64 z b))))","fresh",3.54296875],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 a z) b))","next",2.287480354339564]],"compiler":[[18,11],[21,13],[18,11],[21,13]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.03125],"time":2.5849609375,"type":"prune"},{"compiler":[[55,13]],"locations":[["(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))",0.0078125,true],["(*.f64 (*.f64 a z) b)",6.199706603781233,true]],"time":9.367919921875,"type":"localize"},{"count":[[2,96]],"series":[["(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))","a","-inf",0.22802734375],["(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))","a","inf",0.28515625],["(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))","a","0",0.260009765625],["(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))","t","-inf",0.256103515625],["(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))","t","inf",0.2900390625],["(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))","t","0",0.261962890625],["(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))","z","-inf",0.27099609375],["(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))","z","inf",0.29296875],["(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))","z","0",0.237060546875],["(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))","y","-inf",0.260009765625],["(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))","y","inf",0.261962890625],["(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))","y","0",0.26220703125],["(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))","x","-inf",0.194091796875],["(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))","x","inf",0.286865234375],["(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))","x","0",0.337890625],["(*.f64 (*.f64 a z) b)","b","-inf",0.286865234375],["(*.f64 (*.f64 a z) b)","b","inf",0.777099609375],["(*.f64 (*.f64 a z) b)","b","0",0.43408203125],["(*.f64 (*.f64 a z) b)","z","-inf",0.325927734375],["(*.f64 (*.f64 a z) b)","z","inf",0.44482421875],["(*.f64 (*.f64 a z) b)","z","0",0.613037109375],["(*.f64 (*.f64 a z) b)","a","-inf",0.29296875],["(*.f64 (*.f64 a z) b)","a","inf",0.421875],["(*.f64 (*.f64 a z) b)","a","0",0.56298828125]],"time":8.427978515625,"type":"series"},{"count":[[2,93]],"inputs":[["(*.f64 (*.f64 a z) b)","(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 a z) b) (*.f64 (*.f64 (*.f64 a z) b) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 a z) b) 0) (*.f64 (*.f64 a z) b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 a z) b) (*.f64 0 (*.f64 (*.f64 a z) b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 a z) b)) (*.f64 (*.f64 a z) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a z) b)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 b (*.f64 a z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 a (*.f64 z b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) (cbrt.f64 (pow.f64 (*.f64 (*.f64 a z) b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z b) a)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 a z) b) 2)) (cbrt.f64 (*.f64 (*.f64 a z) b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 b (cbrt.f64 (*.f64 a z))) (cbrt.f64 (pow.f64 (*.f64 a z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 b a) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 (*.f64 a a)) (*.f64 z b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 b) (*.f64 (cbrt.f64 (*.f64 b b)) (*.f64 a z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (*.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a z)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 a z) 2)) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 a z) b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 a z) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a z) b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a z) (cbrt.f64 b)) (cbrt.f64 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 a z) b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 a z) b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 a z) b) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (*.f64 a z) b))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 a z) b)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (*.f64 a z) b) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 a z) b) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y z x) (*.f64 t a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 t a) (fma.f64 y z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 t a x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y z) (fma.f64 t a x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 t a (fma.f64 y z x)) (*.f64 (fma.f64 t a (fma.f64 y z x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 t a (fma.f64 y z x)) 0) (fma.f64 t a (fma.f64 y z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (fma.f64 y z (*.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 t a x) 1) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 t a (fma.f64 y z x)) (*.f64 0 (fma.f64 t a (fma.f64 y z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 t a (fma.f64 y z x))) (fma.f64 t a (fma.f64 y z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y z (*.f64 t a)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y z) (*.f64 (fma.f64 t a x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 t a (fma.f64 y z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 t a (fma.f64 y z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 t a (fma.f64 y z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 t a (fma.f64 y z x))) (cbrt.f64 (pow.f64 (fma.f64 t a (fma.f64 y z x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 t a) 2)) (-.f64 (cbrt.f64 (pow.f64 (fma.f64 y z x) 2)) (cbrt.f64 (*.f64 (fma.f64 y z x) (*.f64 t a))))) (+.f64 (cbrt.f64 (*.f64 t a)) (cbrt.f64 (fma.f64 y z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 y z x) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 t a) 2)) (cbrt.f64 (*.f64 (fma.f64 y z x) (*.f64 t a))))) (+.f64 (cbrt.f64 (fma.f64 y z x)) (cbrt.f64 (*.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 t a (fma.f64 y z x)) 2)) (cbrt.f64 (fma.f64 t a (fma.f64 y z x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 t a (fma.f64 y z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 t a (fma.f64 y z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 t a (fma.f64 y z x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 t a (fma.f64 y z x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 t a (fma.f64 y z x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 t a (fma.f64 y z x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 t a (fma.f64 y z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 t a (fma.f64 y z x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 t a (fma.f64 y z x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 t a (fma.f64 y z x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t a (fma.f64 y z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a t (fma.f64 y z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 y z x) (*.f64 t a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 t a) (fma.f64 y z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 y z x)) (cbrt.f64 (pow.f64 (fma.f64 y z x) 2)) (*.f64 t a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 t a)) (cbrt.f64 (pow.f64 (*.f64 t a) 2)) (fma.f64 y z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (fma.f64 y z (*.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (fma.f64 y z (*.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 y z x)) (*.f64 t a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 y z x) 2)) (cbrt.f64 (fma.f64 y z x)) (*.f64 t a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 y z x) 1 (*.f64 t a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 t a)) (fma.f64 y z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 t a) 2)) (cbrt.f64 (*.f64 t a)) (fma.f64 y z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 t (cbrt.f64 a)) (cbrt.f64 (*.f64 a a)) (fma.f64 y z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 t) (*.f64 (cbrt.f64 (*.f64 t t)) a) (fma.f64 y z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 t a) 1 (fma.f64 y z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (cbrt.f64 t)) (cbrt.f64 (*.f64 t t)) (fma.f64 y z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 (*.f64 a a)) t) (fma.f64 y z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (fma.f64 t a x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y z) (fma.f64 t a x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) (fma.f64 t a x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) 1 (fma.f64 t a x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) z) (fma.f64 t a x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (cbrt.f64 (*.f64 y z)) (fma.f64 t a x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (fma.f64 t a x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) y) (fma.f64 t a x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (fma.f64 t a x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y z)) (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (fma.f64 t a x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 y z)) (fma.f64 t a x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 y z (*.f64 t a)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 y z (*.f64 t a))) (cbrt.f64 (pow.f64 (fma.f64 y z (*.f64 t a)) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (fma.f64 y z (*.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (fma.f64 y z (*.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (fma.f64 y z (*.f64 t a)))))))"]],"rules":[["egg-rr",63],["egg-rr",30]],"time":25.76904296875,"type":"rewrite"},{"count":[[189,105]],"inputs":[["(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(+.f64 (*.f64 y z) (*.f64 a t))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","x","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","x","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 a t) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 a t) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(*.f64 a t)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(*.f64 a t)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(*.f64 a t)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(*.f64 a t)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(+.f64 (*.f64 y z) (*.f64 a t))","(fma.f64 y z (*.f64 a t))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","x","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","x","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 a t) x)","(fma.f64 a t x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 a t) x)","(fma.f64 a t x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(*.f64 a t)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(*.f64 a t)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(*.f64 a t)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(*.f64 a t)","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 a t) x))","(fma.f64 z y (fma.f64 a t x))"]],"time":274.072998046875,"type":"simplify"},{"compiler":[[1859,403]],"time":12.69091796875,"type":"eval"},{"alts":[["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3))","next",2.343495393413332],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 z b) a))","fresh",3.5390625],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 (*.f64 a z) (cbrt.f64 b)) (cbrt.f64 (*.f64 b b))))","fresh",14.28526952351208],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 a z) b))","done",2.287480354339564],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 b a) z))","fresh",2.81640625],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 b (cbrt.f64 (*.f64 a z))) (cbrt.f64 (pow.f64 (*.f64 a z) 2))))","fresh",8.949672778266653]],"compiler":[[24,16],[21,13],[27,17],[21,13],[21,13],[29,18],[24,16],[21,13],[27,17],[21,13],[29,18]],"count":[[107,6]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[105,5],"picked":[1,1]}],"min-error":[0.0078125],"time":30.60107421875,"type":"prune"},{"compiler":[[73,19]],"locations":[["(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))",0.0078125,false],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3)",0.5121651856003986,true],["(*.f64 (*.f64 a z) b)",6.199706603781233,false],["(cbrt.f64 (*.f64 (*.f64 a z) b))",13.95483334658663,true]],"time":13.092041015625,"type":"localize"},{"count":[[2,0]],"series":[["(pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3)","b","-inf",0.510986328125],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3)","b","inf",0.468994140625],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3)","b","0",0.3828125],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3)","z","-inf",0.511962890625],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3)","z","inf",0.468994140625],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3)","z","0",0.39013671875],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3)","a","-inf",0.920166015625],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3)","a","inf",0.476806640625],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3)","a","0",0.583984375],["(cbrt.f64 (*.f64 (*.f64 a z) b))","b","-inf",0.3369140625],["(cbrt.f64 (*.f64 (*.f64 a z) b))","b","inf",0.2978515625],["(cbrt.f64 (*.f64 (*.f64 a z) b))","b","0",0.31103515625],["(cbrt.f64 (*.f64 (*.f64 a z) b))","z","-inf",0.3388671875],["(cbrt.f64 (*.f64 (*.f64 a z) b))","z","inf",0.299072265625],["(cbrt.f64 (*.f64 (*.f64 a z) b))","z","0",0.30322265625],["(cbrt.f64 (*.f64 (*.f64 a z) b))","a","-inf",0.489013671875],["(cbrt.f64 (*.f64 (*.f64 a z) b))","a","inf",0.341064453125],["(cbrt.f64 (*.f64 (*.f64 a z) b))","a","0",1.126953125]],"time":8.7548828125,"type":"series"},{"count":[[2,75]],"inputs":[["(cbrt.f64 (*.f64 (*.f64 a z) b))","(pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (*.f64 (*.f64 a z) b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (*.f64 (*.f64 a z) b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a z)) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 b) (cbrt.f64 (*.f64 a z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 a) (cbrt.f64 (*.f64 z b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z b)) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 a z) b) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 a z) b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 a z) b))) (cbrt.f64 (pow.f64 (*.f64 (*.f64 a z) b) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 a z) (cbrt.f64 b))) (cbrt.f64 (pow.f64 b 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 b)) (cbrt.f64 (*.f64 (pow.f64 b 2/3) (*.f64 a z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 a z))) (cbrt.f64 (*.f64 (cbrt.f64 b) (pow.f64 (*.f64 (*.f64 a z) b) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 a z))) (cbrt.f64 (*.f64 (pow.f64 (*.f64 a z) 2/3) b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 b (cbrt.f64 (*.f64 a z)))) (cbrt.f64 (pow.f64 (*.f64 a z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (*.f64 a z) b) 2/3) (cbrt.f64 (*.f64 a z)))) (cbrt.f64 (cbrt.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 a z) b) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (cbrt.f64 (*.f64 b a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)))) (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (*.f64 a z) b) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 a)) (cbrt.f64 (*.f64 (pow.f64 a 2/3) (*.f64 z b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 b a)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 a z) b)))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 a z) b) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (*.f64 (*.f64 a z) b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 a z) b))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (*.f64 a z) b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 a z) b))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 a z) b) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 a z) b))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 a z) b))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 a z) b))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 a z) b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 a z) b) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (*.f64 a z) b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a z) b)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 b (*.f64 a z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 a (*.f64 z b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z b) a)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 a) (*.f64 (pow.f64 a 2/3) (*.f64 z b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 a z) b))) (pow.f64 (pow.f64 (*.f64 (*.f64 a z) b) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a z)) (*.f64 (cbrt.f64 b) (pow.f64 (*.f64 (*.f64 a z) b) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 b a) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (*.f64 a z) b) 2/3) (cbrt.f64 (*.f64 a z))) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 b) (*.f64 (pow.f64 b 2/3) (*.f64 a z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a z)) (*.f64 (pow.f64 (*.f64 a z) 2/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (*.f64 b a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 b) (*.f64 (pow.f64 (*.f64 (*.f64 a z) b) 2/3) (cbrt.f64 (*.f64 a z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 b 2/3) (*.f64 a z)) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (*.f64 a z) b) 2/3) 4/3) (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 a z) b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 a z) 2/3) b) (cbrt.f64 (*.f64 a z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 a 2/3) (*.f64 z b)) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 b) (pow.f64 (*.f64 (*.f64 a z) b) 2/3)) (cbrt.f64 (*.f64 a z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) (pow.f64 (*.f64 (*.f64 a z) b) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 a z) b) 2/3) (cbrt.f64 (*.f64 (*.f64 a z) b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a z) (cbrt.f64 b)) (pow.f64 b 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 b (cbrt.f64 (*.f64 a z))) (pow.f64 (*.f64 a z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 7/3) (cbrt.f64 (pow.f64 (*.f64 (*.f64 a z) b) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 b 2/3) (*.f64 (*.f64 a z) (cbrt.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 a z) b) 2/3)) (pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a z) 2/3) (*.f64 b (cbrt.f64 (*.f64 a z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 a z) b))) (neg.f64 (pow.f64 (*.f64 (*.f64 a z) b) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 a z) b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 a z) b)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 a z) b) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 a z) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a z) b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 a z) b)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 a z) b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 a z) b) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 a z) b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 a z) b)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 a z) b) 3))))))"]],"rules":[["egg-rr",42],["egg-rr",33]],"time":43.818115234375,"type":"rewrite"},{"count":[[75,75]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"time":27.380859375,"type":"simplify"},{"compiler":[[3767,1008]],"time":25.31103515625,"type":"eval"},{"alts":[["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3))","done",2.343495393413332],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 z b) a))","fresh",3.5390625],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 (*.f64 a z) (cbrt.f64 b)) (cbrt.f64 (*.f64 b b))))","fresh",14.28526952351208],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 a z) b))","done",2.287480354339564],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 b a) z))","next",2.81640625],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 b (cbrt.f64 (*.f64 a z))) (cbrt.f64 (pow.f64 (*.f64 a z) 2))))","fresh",8.949672778266653]],"compiler":[[24,16],[21,13],[27,17],[21,13],[21,13],[29,18],[21,13],[27,17],[21,13],[29,18]],"count":[[186,6]],"kept":[{"done":[1,1],"fresh":[4,4],"new":[180,0],"picked":[1,1]}],"min-error":[0.0078125],"time":69.615966796875,"type":"prune"},{"compiler":[[55,13]],"locations":[["(+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a))",0.0078125,false],["(*.f64 (*.f64 b a) z)",4.669782580004719,true]],"time":9.2041015625,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 (*.f64 b a) z)","z","-inf",0.342041015625],["(*.f64 (*.f64 b a) z)","z","inf",0.15087890625],["(*.f64 (*.f64 b a) z)","z","0",0.3349609375],["(*.f64 (*.f64 b a) z)","a","-inf",0.2548828125],["(*.f64 (*.f64 b a) z)","a","inf",0.300048828125],["(*.f64 (*.f64 b a) z)","a","0",0.398193359375],["(*.f64 (*.f64 b a) z)","b","-inf",0.1591796875],["(*.f64 (*.f64 b a) z)","b","inf",0.18798828125],["(*.f64 (*.f64 b a) z)","b","0",0.373046875]],"time":2.60009765625,"type":"series"},{"count":[[1,34]],"inputs":[["(*.f64 (*.f64 b a) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 b a) z) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 b a) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (*.f64 b a) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 b a) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (*.f64 b a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 b (*.f64 a z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a z) b)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z b) a)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 b) (*.f64 (pow.f64 b 2/3) (*.f64 a z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 a (*.f64 z b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 b a)) (*.f64 (pow.f64 (*.f64 b a) 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) (*.f64 b a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 b 2/3) (*.f64 a z)) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 b a) 2/3) z) (cbrt.f64 (*.f64 b a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z 2/3) (*.f64 b a)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 b a) z)) (pow.f64 (*.f64 (*.f64 b a) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 b a) z) 2/3) (cbrt.f64 (*.f64 (*.f64 b a) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (*.f64 b a))) (pow.f64 (*.f64 b a) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 b a) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 b a) 2/3) (*.f64 z (cbrt.f64 (*.f64 b a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (*.f64 (*.f64 b a) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 b a) z))) (neg.f64 (pow.f64 (*.f64 (*.f64 b a) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 b a) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 b a) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 b a) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 b a) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 b a) z) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 b a) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 b a) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 b a) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 b a) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 b a) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 b a) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 b a) z) 3))))))"]],"rules":[["egg-rr",34]],"time":33.4619140625,"type":"rewrite"},{"count":[[70,35]],"inputs":[["(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 z b))"]],"method":["egg-herbie"],"outputs":[["(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))","(*.f64 a (*.f64 z b))","(*.f64 a (*.f64 b z))"]],"time":129.258056640625,"type":"simplify"},{"compiler":[[1920,417]],"time":12.781982421875,"type":"eval"},{"alts":[["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3))","done",2.343495393413332],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 z b) a))","fresh",3.5390625],["(+.f64 (fma.f64 z y (fma.f64 t a x)) (*.f64 (*.f64 b a) z))","next",2.8125],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 (*.f64 a z) (cbrt.f64 b)) (cbrt.f64 (*.f64 b b))))","fresh",14.28526952351208],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 a z) b))","done",2.287480354339564],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 b (cbrt.f64 (*.f64 a z))) (cbrt.f64 (pow.f64 (*.f64 a z) 2))))","fresh",8.949672778266653]],"compiler":[[24,16],[21,13],[19,11],[27,17],[21,13],[29,18],[21,13],[19,11],[27,17],[29,18]],"count":[[115,6]],"kept":[{"done":[2,2],"fresh":[3,3],"new":[109,1],"picked":[1,0]}],"min-error":[0.00390625],"time":33.7919921875,"type":"prune"},{"compiler":[[44,11]],"locations":[["(*.f64 (*.f64 b a) z)",4.669782580004719,false]],"time":8.174072265625,"type":"localize"},{"compiler":[[588,142]],"time":3.828857421875,"type":"eval"},{"alts":[["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3))","done",2.343495393413332],["(+.f64 (fma.f64 z y (fma.f64 t a x)) (*.f64 (*.f64 b a) z))","done",2.8125],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 (*.f64 a z) (cbrt.f64 b)) (cbrt.f64 (*.f64 b b))))","fresh",14.28526952351208],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 a z) b))","done",2.287480354339564],["(+.f64 (fma.f64 z y (fma.f64 t a x)) (*.f64 (*.f64 z b) a))","fresh",3.53515625],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 b (cbrt.f64 (*.f64 a z))) (cbrt.f64 (pow.f64 (*.f64 a z) 2))))","fresh",8.949672778266653]],"compiler":[[24,16],[19,11],[27,17],[21,13],[19,11],[29,18]],"count":[[41,6]],"kept":[{"done":[2,2],"fresh":[3,2],"new":[35,1],"picked":[1,1]}],"min-error":[0.00390625],"time":7.969970703125,"type":"prune"},{"accuracy":[0.27576160433956376],"baseline":[2.287480354339564],"branch":[["x",2.287480354339564,1],["y",2.287480354339564,1],["z",0.5413866043395638,2],["t",2.287480354339564,1],["a",0.80078125,2],["b",0.27576160433956376,3],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 a z) b))",0.7874803543395638,2]],"compiler":[[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[21,13],[151,44]],"count":[[9,3]],"inputs":[["(+.f64 (fma.f64 z y (fma.f64 t a x)) (*.f64 (*.f64 z b) a))","(+.f64 (fma.f64 z y (fma.f64 t a x)) (*.f64 (*.f64 b a) z))","(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3))","(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 z b) a))","(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 (*.f64 a z) (cbrt.f64 b)) (cbrt.f64 (*.f64 b b))))","(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 b a) z))","(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 b (cbrt.f64 (*.f64 a z))) (cbrt.f64 (pow.f64 (*.f64 a z) 2))))","(+.f64 (fma.f64 y z x) (*.f64 a (+.f64 t (*.f64 z b))))","(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 a z) b))"]],"link":["."],"name":["Graphics.Rasterific.CubicBezier:cachedBezierAt from Rasterific-0.6.1"],"oracle":[22.179333973153298],"outputs":[["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 a z) b))","(+.f64 (fma.f64 z y (fma.f64 t a x)) (*.f64 (*.f64 z b) a))","(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3))"]],"time":52.174072265625,"times":[["x",4.155029296875],["y",4.06689453125],["z",10.8740234375],["t",4.10693359375],["a",7.489990234375],["b",11.06005859375],["(+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 a z) b))",7.72900390625]],"type":"regimes"},{"bstep":[[2.646728315384553e+58,2.5806692656641204e+70,12.194091796875],[-1.0178059652661675e-13,-7.314467919616598e-17,12.3759765625]],"compiler":[[23,15],[7,6]],"method":["binary-search","binary-search"],"time":24.717041015625,"type":"bsearch"},{"compiler":[[60,28]],"inputs":[["(if (<=.f64 b -1007986205301195/9903520314283042199192993792) (+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 a z) b)) (if (<=.f64 b 26467283153845531055016501417928894284759168814145893040128) (+.f64 (fma.f64 z y (fma.f64 t a x)) (*.f64 (*.f64 z b) a)) (+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b -1007986205301195/9903520314283042199192993792) (+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 a z) b)) (if (<=.f64 b 26467283153845531055016501417928894284759168814145893040128) (+.f64 (fma.f64 z y (fma.f64 t a x)) (*.f64 (*.f64 z b) a)) (+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (pow.f64 (cbrt.f64 (*.f64 (*.f64 a z) b)) 3))))","(if (<=.f64 b -1007986205301195/9903520314283042199192993792) (+.f64 (fma.f64 y z x) (*.f64 a (+.f64 t (*.f64 z b)))) (if (<=.f64 b 26467283153845531055016501417928894284759168814145893040128) (+.f64 (fma.f64 y z x) (*.f64 a (+.f64 t (*.f64 z b)))) (+.f64 (fma.f64 y z x) (*.f64 a (+.f64 t (*.f64 z b))))))"]],"stop":[["fuel",1]],"time":23.537841796875,"type":"simplify"},{"time":0.006103515625,"type":"soundness"},{"compiler":[[60,28]],"remove-preprocessing":[[]],"time":15.2041015625,"type":"end"}]
[{"compiler":[[9,6]],"method":["search"],"sampling":[[12,0.9102432515937835,0.0887804243247956,0.0009763240814208984],[11,0.8819505888968706,0.11707308702170849,0.0009763240814208984],[10,0.8312189178541303,0.16780475806444883,0.0009763240814208984],[9,0.7804872468113899,0.21853642910718918,0.0009763240814208984],[8,0.7024385221302509,0.29658515378832817,0.0009763240814208984],[7,0.6243897974491119,0.37463387846946716,0.0009763240814208984],[6,0.43707285821437836,0.5619508177042007,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":32.276123046875,"type":"analyze"},{"outcomes":[["body",512,"valid",92.1591796875,897],["body",1024,"valid",244.180419921875,1369],["body",2048,"valid",0.331787109375,1],["body",256,"valid",308.946533203125,5989]],"time":655.02099609375,"type":"sample"},{"compiler":[[8,5]],"inputs":[["0","1"],["(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 y (/.f64 (sin.f64 x) x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 y (/.f64 (sin.f64 x) x))","(*.f64 (sin.f64 x) (/.f64 y x))"]],"symmetry":[[]],"time":56.05078125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 x (/.f64 (sin.f64 y) y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))"]],"time":38.2822265625,"type":"simplify"},{"compiler":[[14,7]],"time":0.326904296875,"type":"eval"},{"alts":[["(*.f64 (sin.f64 y) (/.f64 x y))","fresh",7.15234375],["(*.f64 x (/.f64 (sin.f64 y) y))","next",0.140625]],"compiler":[[8,5],[8,5],[8,5],[8,5]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0546875],"time":1.1669921875,"type":"prune"},{"compiler":[[16,5]],"locations":[["(sin.f64 y)",0.015625,true],["(*.f64 x (/.f64 (sin.f64 y) y))",0.10546875,true],["(/.f64 (sin.f64 y) y)",0.14453125,true]],"time":4.240966796875,"type":"localize"},{"count":[[3,32]],"series":[["(sin.f64 y)","y","-inf",0.136962890625],["(sin.f64 y)","y","inf",0.182861328125],["(sin.f64 y)","y","0",0.22998046875],["(*.f64 x (/.f64 (sin.f64 y) y))","y","-inf",0.650146484375],["(*.f64 x (/.f64 (sin.f64 y) y))","y","inf",1.349853515625],["(*.f64 x (/.f64 (sin.f64 y) y))","y","0",0.366943359375],["(*.f64 x (/.f64 (sin.f64 y) y))","x","-inf",0.347900390625],["(*.f64 x (/.f64 (sin.f64 y) y))","x","inf",0.3759765625],["(*.f64 x (/.f64 (sin.f64 y) y))","x","0",0.901123046875],["(/.f64 (sin.f64 y) y)","y","-inf",0.569091796875],["(/.f64 (sin.f64 y) y)","y","inf",0.323974609375],["(/.f64 (sin.f64 y) y)","y","0",0.5009765625]],"time":6.083984375,"type":"series"},{"count":[[3,169]],"inputs":[["(/.f64 (sin.f64 y) y)","(*.f64 x (/.f64 (sin.f64 y) y))","(sin.f64 y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 y) y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (/.f64 (pow.f64 (sin.f64 y) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (pow.f64 (/.f64 (sin.f64 y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 y) 2/3) y) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (/.f64 (neg.f64 (pow.f64 (sin.f64 y) 2/3)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 y -1/3)) (/.f64 (sin.f64 y) (neg.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) -1) (/.f64 (cbrt.f64 (sin.f64 y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) (neg.f64 y))) (neg.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (*.f64 (sin.f64 y) (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (pow.f64 y -2/3)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 y 2/3)) (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 y -2/3)) (/.f64 (sin.f64 y) (cbrt.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y)) (/.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -2/3) (/.f64 (sin.f64 y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (*.f64 0 (cbrt.f64 (/.f64 (sin.f64 y) (neg.f64 y)))))) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (sin.f64 y)) y) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2/3) (/.f64 (cbrt.f64 (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2) (/.f64 (sin.f64 y) (cbrt.f64 y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (pow.f64 (/.f64 (sin.f64 y) y) 2))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (sin.f64 y)) (pow.f64 (/.f64 (sin.f64 y) y) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2) (neg.f64 (sin.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cbrt.f64 (sin.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (sin.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (pow.f64 (sin.f64 y) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (pow.f64 y -2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cbrt.f64 (neg.f64 (sin.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (cbrt.f64 (neg.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (sin.f64 y) (pow.f64 (/.f64 (sin.f64 y) y) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2) (sin.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (sin.f64 y) (neg.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sin.f64 y) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 x)) y) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) (pow.f64 y 2/3)) (/.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) -1) (/.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) y) (pow.f64 (*.f64 x (sin.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) (pow.f64 y 2/3)) (/.f64 (*.f64 (pow.f64 x 2/3) (sin.f64 y)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) y) (*.f64 (pow.f64 x 2/3) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))) (pow.f64 (/.f64 (sin.f64 y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (/.f64 (*.f64 (pow.f64 x 2/3) (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 x 2/3) (sin.f64 y)) y) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) x) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (sin.f64 y))) (/.f64 (pow.f64 (sin.f64 y) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cbrt.f64 (sin.f64 y))) -1) (/.f64 (neg.f64 (pow.f64 (sin.f64 y) 2/3)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) (/.f64 (*.f64 (pow.f64 x 2/3) (sin.f64 y)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cbrt.f64 (sin.f64 y))) (pow.f64 y 2/3)) (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (/.f64 (*.f64 x (sin.f64 y)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) (/.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (*.f64 (pow.f64 x 2/3) (sin.f64 y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) (*.f64 (sin.f64 y) (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (pow.f64 y -2/3)) (/.f64 x (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (neg.f64 y))) (/.f64 (sin.f64 y) (neg.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (cbrt.f64 (neg.f64 y))) (/.f64 x (neg.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sin.f64 y)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -2/3) (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (/.f64 x (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (pow.f64 y 2/3)) (/.f64 (sin.f64 y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 y) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cbrt.f64 (sin.f64 y))) y) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) x)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2) (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2) (*.f64 (neg.f64 x) (sin.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (sin.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3) (cbrt.f64 (*.f64 x (sin.f64 y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 (sin.f64 y) (pow.f64 y -2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) x) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (sin.f64 y)) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (sin.f64 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (neg.f64 (sin.f64 y)))) 3) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (neg.f64 (cbrt.f64 (*.f64 x (sin.f64 y)))) 3) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (cbrt.f64 x)) 3) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2) (*.f64 x (sin.f64 y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 x (sin.f64 y)) (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 x (sin.f64 y)) 3) (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 y) 9) 9)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 y) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 y) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 y) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 y) 1/3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 y) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 y) 3/2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 y) 6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 0) (cos.f64 y)) (*.f64 (cos.f64 0) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (cos.f64 0)) (*.f64 (cos.f64 y) (sin.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 y) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sin.f64 y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sin.f64 0) (cos.f64 y)) (*.f64 (cos.f64 0) (sin.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (sin.f64 y) 2/3) 0)) (+.f64 0 (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (sin.f64 y) 2/3) (+.f64 0 (*.f64 (cbrt.f64 (sin.f64 y)) 0))) (-.f64 (cbrt.f64 (sin.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (neg.f64 (pow.f64 (sin.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (*.f64 (pow.f64 (sin.f64 y) 2/3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) -1) (cbrt.f64 (neg.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (sin.f64 y) 2/3) (*.f64 0 (cbrt.f64 (neg.f64 (sin.f64 y)))))) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (sin.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 y)))))"]],"rules":[["egg-rr",37],["egg-rr",78],["egg-rr",54]],"time":51.8330078125,"type":"rewrite"},{"count":[[201,191]],"inputs":[["1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(fma.f64 -1/6 (*.f64 y y) 1)","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 1 (fma.f64 1/120 (pow.f64 y 4) (*.f64 -1/6 (*.f64 y y))))","(+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","(+.f64 (fma.f64 -1/5040 (pow.f64 y 6) 1) (fma.f64 1/120 (pow.f64 y 4) (*.f64 -1/6 (*.f64 y y))))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/6 (*.f64 (*.f64 y y) x) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(+.f64 (*.f64 x (fma.f64 1/120 (pow.f64 y 4) (*.f64 -1/6 (*.f64 y y)))) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(+.f64 (*.f64 x (fma.f64 1/120 (pow.f64 y 4) (*.f64 -1/6 (*.f64 y y)))) (*.f64 x (fma.f64 -1/5040 (pow.f64 y 6) 1)))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(fma.f64 -1/6 (pow.f64 y 3) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 (pow.f64 y 5) 1/120 (fma.f64 -1/5040 (pow.f64 y 7) y)))"]],"time":96.739013671875,"type":"simplify"},{"compiler":[[2305,1000]],"time":25.403076171875,"type":"eval"},{"alts":[["(*.f64 x (/.f64 (sin.f64 y) y))","done",0.140625],["(/.f64 (*.f64 x (sin.f64 y)) y)","next",5.53640737565707],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) 3)","fresh",7.544742724674163],["(*.f64 x (/.f64 (cbrt.f64 (*.f64 (sin.f64 y) (pow.f64 (/.f64 (sin.f64 y) y) 2))) (cbrt.f64 y)))","fresh",11.621283285311533],["(*.f64 (sin.f64 y) (/.f64 x y))","fresh",7.15234375],["(/.f64 (pow.f64 (neg.f64 (cbrt.f64 (*.f64 x (sin.f64 y)))) 3) (neg.f64 y))","fresh",5.9323488917203315]],"compiler":[[8,5],[8,5],[11,8],[17,11],[8,5],[13,10],[8,5],[11,8],[17,11],[8,5],[13,10]],"count":[[193,6]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[191,5],"picked":[1,1]}],"min-error":[0.01171875],"time":49.912841796875,"type":"prune"},{"compiler":[[16,5]],"locations":[["(sin.f64 y)",0.015625,false],["(*.f64 x (sin.f64 y))",0.125,true],["(/.f64 (*.f64 x (sin.f64 y)) y)",5.50515737565707,true]],"time":4.18798828125,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 x (sin.f64 y))","y","-inf",0.16796875],["(*.f64 x (sin.f64 y))","y","inf",0.242919921875],["(*.f64 x (sin.f64 y))","y","0",0.257080078125],["(*.f64 x (sin.f64 y))","x","-inf",0.27001953125],["(*.f64 x (sin.f64 y))","x","inf",0.31396484375],["(*.f64 x (sin.f64 y))","x","0",0.14404296875],["(/.f64 (*.f64 x (sin.f64 y)) y)","y","-inf",0.677978515625],["(/.f64 (*.f64 x (sin.f64 y)) y)","y","inf",0.179931640625],["(/.f64 (*.f64 x (sin.f64 y)) y)","y","0",0.194091796875],["(/.f64 (*.f64 x (sin.f64 y)) y)","x","-inf",0.1650390625],["(/.f64 (*.f64 x (sin.f64 y)) y)","x","inf",0.172119140625],["(/.f64 (*.f64 x (sin.f64 y)) y)","x","0",0.211181640625]],"time":3.13818359375,"type":"series"},{"count":[[2,94]],"inputs":[["(/.f64 (*.f64 x (sin.f64 y)) y)","(*.f64 x (sin.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sin.f64 y) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) (/.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) (*.f64 (sin.f64 y) (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (*.f64 x (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (pow.f64 y -2/3)) (/.f64 x (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 y -2/3)) (/.f64 (sin.f64 y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3) y) (cbrt.f64 (*.f64 x (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sin.f64 y)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (*.f64 (*.f64 x (sin.f64 y)) (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (sin.f64 y)) (pow.f64 y -2/3)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (*.f64 (neg.f64 x) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 y) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3) (cbrt.f64 (*.f64 (neg.f64 x) (sin.f64 y)))) (neg.f64 (pow.f64 y -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (cbrt.f64 y)) (neg.f64 (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3) (*.f64 0 (cbrt.f64 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)))))) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (sin.f64 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3)))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 x (sin.f64 y)) (pow.f64 y -2/3))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2) (*.f64 (neg.f64 x) (sin.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2) (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (sin.f64 y)) (pow.f64 y -2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3) (cbrt.f64 (*.f64 (neg.f64 x) (sin.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3) (cbrt.f64 (*.f64 (neg.f64 x) (sin.f64 y))))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (sin.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 1/3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 9) 9)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 3/2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (sin.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (pow.f64 (sin.f64 y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (sin.f64 y))) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) x) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (sin.f64 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2/3) (*.f64 x (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (sin.f64 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (sin.f64 y))) (neg.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3) 0)) (+.f64 0 (cbrt.f64 (*.f64 x (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3) (+.f64 0 (*.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) 0))) (-.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (sin.f64 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3) (*.f64 0 (cbrt.f64 (*.f64 (neg.f64 x) (sin.f64 y)))))) (cbrt.f64 (*.f64 x (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) (pow.f64 (*.f64 x (sin.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3) (cbrt.f64 (*.f64 x (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (sin.f64 y)) 3))))))"]],"rules":[["egg-rr",43],["egg-rr",51]],"time":43.364013671875,"type":"rewrite"},{"count":[[142,109]],"inputs":[["(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1/6 (*.f64 (pow.f64 y 3) x)))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 5) x)) (+.f64 (*.f64 y x) (*.f64 -1/6 (*.f64 (pow.f64 y 3) x))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 5) x)) (+.f64 (*.f64 y x) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 7) x)) (*.f64 -1/6 (*.f64 (pow.f64 y 3) x)))))","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/6 (*.f64 (*.f64 y y) x) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(+.f64 (*.f64 x (+.f64 (*.f64 -1/6 (*.f64 y y)) (*.f64 1/120 (pow.f64 y 4)))) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(+.f64 (*.f64 x (+.f64 (*.f64 -1/6 (*.f64 y y)) (*.f64 1/120 (pow.f64 y 4)))) (fma.f64 -1/5040 (*.f64 (pow.f64 y 6) x) x))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1/6 (*.f64 (pow.f64 y 3) x)))","(*.f64 x (+.f64 (*.f64 -1/6 (pow.f64 y 3)) y))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 5) x)) (+.f64 (*.f64 y x) (*.f64 -1/6 (*.f64 (pow.f64 y 3) x))))","(fma.f64 1/120 (*.f64 (pow.f64 y 5) x) (*.f64 x (+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 5) x)) (+.f64 (*.f64 y x) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 7) x)) (*.f64 -1/6 (*.f64 (pow.f64 y 3) x)))))","(+.f64 (*.f64 x (+.f64 (*.f64 1/120 (pow.f64 y 5)) y)) (*.f64 x (+.f64 (*.f64 -1/5040 (pow.f64 y 7)) (*.f64 -1/6 (pow.f64 y 3)))))","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)"]],"time":136.69384765625,"type":"simplify"},{"compiler":[[1796,811]],"time":20.623046875,"type":"eval"},{"alts":[["(/.f64 (*.f64 x (+.f64 (-.f64 (sin.f64 y) 1/2) 1/2)) y)","fresh",27.31670469684138],["(*.f64 x (/.f64 (sin.f64 y) y))","done",0.140625],["(*.f64 x (/.f64 (cbrt.f64 (*.f64 (sin.f64 y) (pow.f64 (/.f64 (sin.f64 y) y) 2))) (cbrt.f64 y)))","fresh",11.621283285311533],["(/.f64 (*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3)) y)","next",5.908981399173445],["(/.f64 (*.f64 x (sin.f64 y)) y)","done",5.53640737565707],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) 3)","fresh",7.544742724674163],["(*.f64 (sin.f64 y) (/.f64 x y))","fresh",7.15234375]],"compiler":[[12,9],[8,5],[17,11],[11,8],[8,5],[11,8],[8,5],[12,9],[17,11],[11,8],[11,8],[8,5]],"count":[[159,7]],"kept":[{"done":[1,1],"fresh":[4,3],"new":[153,2],"picked":[1,1]}],"min-error":[0.00390625],"time":35.5791015625,"type":"prune"},{"compiler":[[31,14]],"locations":[["(cbrt.f64 (sin.f64 y))",0.10546875,true],["(*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3))",0.125,true],["(pow.f64 (cbrt.f64 (sin.f64 y)) 3)",0.6945077637479348,true],["(/.f64 (*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3)) y)",5.50515737565707,true]],"time":7.5478515625,"type":"localize"},{"count":[[4,64]],"series":[["(cbrt.f64 (sin.f64 y))","y","-inf",0.14208984375],["(cbrt.f64 (sin.f64 y))","y","inf",0.18896484375],["(cbrt.f64 (sin.f64 y))","y","0",0.259033203125],["(*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3))","y","-inf",0.238037109375],["(*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3))","y","inf",0.27392578125],["(*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3))","y","0",0.266845703125],["(*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3))","x","-inf",0.20703125],["(*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3))","x","inf",0.365966796875],["(*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3))","x","0",0.328857421875],["(pow.f64 (cbrt.f64 (sin.f64 y)) 3)","y","-inf",1.9580078125],["(pow.f64 (cbrt.f64 (sin.f64 y)) 3)","y","inf",1.534912109375],["(pow.f64 (cbrt.f64 (sin.f64 y)) 3)","y","0",1.5029296875],["(/.f64 (*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3)) y)","y","-inf",0.2060546875],["(/.f64 (*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3)) y)","y","inf",0.18408203125],["(/.f64 (*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3)) y)","y","0",0.197021484375],["(/.f64 (*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3)) y)","x","-inf",0.164794921875],["(/.f64 (*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3)) y)","x","inf",0.1669921875],["(/.f64 (*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3)) y)","x","0",0.27294921875]],"time":8.68505859375,"type":"series"},{"count":[[4,167]],"inputs":[["(/.f64 (*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3)) y)","(pow.f64 (cbrt.f64 (sin.f64 y)) 3)","(*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3))","(cbrt.f64 (sin.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sin.f64 y) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) (*.f64 (sin.f64 y) (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (*.f64 x (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) (/.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (pow.f64 y -2/3)) (/.f64 x (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3) y) (cbrt.f64 (*.f64 x (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 y -2/3)) (/.f64 (sin.f64 y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sin.f64 y)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (*.f64 (*.f64 x (sin.f64 y)) (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (sin.f64 y)) (pow.f64 y -2/3)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (*.f64 (neg.f64 x) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (/.f64 1 (cbrt.f64 (pow.f64 (pow.f64 y 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 (neg.f64 y))) (neg.f64 (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) x) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y -1/3) (*.f64 x (sin.f64 y))) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) (pow.f64 (*.f64 x (sin.f64 y)) 2/3)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (sin.f64 y)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (*.f64 (sin.f64 y) (pow.f64 y -2/3))) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (*.f64 x (pow.f64 y -2/3))) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3) (cbrt.f64 (*.f64 x (sin.f64 y)))) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3) (cbrt.f64 (*.f64 (neg.f64 x) (sin.f64 y)))) (neg.f64 (pow.f64 y -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 x) (sin.f64 y))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3)) (neg.f64 (pow.f64 y -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3) (*.f64 0 (cbrt.f64 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)))))) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 y) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (sin.f64 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3)))) (neg.f64 (cbrt.f64 (pow.f64 (pow.f64 y 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) x)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 y -1/3) (*.f64 x (sin.f64 y)))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 (neg.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) (pow.f64 (*.f64 x (sin.f64 y)) 2/3))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (sin.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (*.f64 (sin.f64 y) (pow.f64 y -2/3)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 y) (*.f64 x (pow.f64 y -2/3)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 x (sin.f64 y)) (pow.f64 y -2/3))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3) (cbrt.f64 (*.f64 x (sin.f64 y))))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2) (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2) (*.f64 (neg.f64 x) (sin.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) (pow.f64 (*.f64 x (sin.f64 y)) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (*.f64 x (sin.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (sin.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3) (cbrt.f64 (*.f64 x (sin.f64 y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) x) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 (sin.f64 y) (pow.f64 y -2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (sin.f64 y)) (pow.f64 y -2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (*.f64 x (pow.f64 y -2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (cbrt.f64 (pow.f64 (pow.f64 y 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3) (cbrt.f64 (*.f64 (neg.f64 x) (sin.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 x) (sin.f64 y))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3) (cbrt.f64 (*.f64 (neg.f64 x) (sin.f64 y))))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 x) (sin.f64 y))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2) (*.f64 x (sin.f64 y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 x (sin.f64 y)) (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 x (sin.f64 y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (cos.f64 0)) (*.f64 (cos.f64 y) (sin.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 0) (cos.f64 y)) (*.f64 (cos.f64 0) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sin.f64 0) (cos.f64 y)) (*.f64 (cos.f64 0) (sin.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) (pow.f64 (pow.f64 (sin.f64 y) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (sin.f64 y) 2/3) 4/3) (cbrt.f64 (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 7/3) (cbrt.f64 (pow.f64 (sin.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2/3)) (pow.f64 (cbrt.f64 (sin.f64 y)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (sin.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 y)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (sin.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 3/2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 9) 9)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 1/9) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 1/3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (sin.f64 y)) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (sin.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 (sin.f64 y) 2/3)) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (*.f64 x (pow.f64 (sin.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (sin.f64 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (sin.f64 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (sin.f64 y))) (neg.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3) 0)) (+.f64 0 (cbrt.f64 (*.f64 x (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3) (+.f64 0 (*.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) 0))) (-.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (sin.f64 y))) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2/3) (*.f64 x (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3) (*.f64 0 (cbrt.f64 (*.f64 (neg.f64 x) (sin.f64 y)))))) (cbrt.f64 (*.f64 x (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) (pow.f64 (*.f64 x (sin.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3) (cbrt.f64 (*.f64 x (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (sin.f64 y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (sin.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) (cbrt.f64 (pow.f64 (sin.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2/3)) (cbrt.f64 (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y)))) (cbrt.f64 (pow.f64 (pow.f64 (sin.f64 y) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (sin.f64 y))))))"]],"rules":[["egg-rr",18],["egg-rr",43],["egg-rr",25],["egg-rr",81]],"time":56.833984375,"type":"rewrite"},{"count":[[231,183]],"inputs":[["(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1/6 (*.f64 (pow.f64 y 3) x)))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 5) x)) (+.f64 (*.f64 y x) (*.f64 -1/6 (*.f64 (pow.f64 y 3) x))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 5) x)) (+.f64 (*.f64 y x) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 7) x)) (*.f64 -1/6 (*.f64 (pow.f64 y 3) x)))))","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/6 (*.f64 (*.f64 y y) x) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(+.f64 (*.f64 x (+.f64 (*.f64 -1/6 (*.f64 y y)) (*.f64 1/120 (pow.f64 y 4)))) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(+.f64 (*.f64 x (+.f64 (*.f64 -1/6 (*.f64 y y)) (*.f64 1/120 (pow.f64 y 4)))) (fma.f64 -1/5040 (*.f64 (pow.f64 y 6) x) x))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1/6 (*.f64 (pow.f64 y 3) x)))","(*.f64 x (+.f64 y (*.f64 -1/6 (pow.f64 y 3))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 5) x)) (+.f64 (*.f64 y x) (*.f64 -1/6 (*.f64 (pow.f64 y 3) x))))","(fma.f64 1/120 (*.f64 (pow.f64 y 5) x) (*.f64 x (+.f64 y (*.f64 -1/6 (pow.f64 y 3)))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 5) x)) (+.f64 (*.f64 y x) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 7) x)) (*.f64 -1/6 (*.f64 (pow.f64 y 3) x)))))","(+.f64 (*.f64 x (+.f64 (*.f64 1/120 (pow.f64 y 5)) y)) (*.f64 x (+.f64 (*.f64 -1/5040 (pow.f64 y 7)) (*.f64 -1/6 (pow.f64 y 3)))))","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(*.f64 (sin.f64 y) x)","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))"]],"time":178.93505859375,"type":"simplify"},{"compiler":[[2258,962]],"time":23.8369140625,"type":"eval"},{"alts":[["(/.f64 (*.f64 x (+.f64 (-.f64 (sin.f64 y) 1/2) 1/2)) y)","fresh",27.31670469684138],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) 3)","fresh",7.544742724674163],["(*.f64 x (/.f64 (sin.f64 y) y))","done",0.140625],["(*.f64 x (/.f64 (cbrt.f64 (*.f64 (sin.f64 y) (pow.f64 (/.f64 (sin.f64 y) y) 2))) (cbrt.f64 y)))","fresh",11.621283285311533],["(/.f64 (*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3)) y)","done",5.908981399173445],["(*.f64 (/.f64 x y) (sin.f64 y))","next",7.15234375],["(/.f64 (*.f64 x (sin.f64 y)) y)","done",5.53640737565707]],"compiler":[[12,9],[11,8],[8,5],[17,11],[11,8],[8,5],[8,5],[12,9],[11,8],[17,11],[8,5]],"count":[[190,7]],"kept":[{"done":[2,2],"fresh":[4,2],"new":[183,2],"picked":[1,1]}],"min-error":[0.00390625],"time":48.376953125,"type":"prune"},{"compiler":[[15,5]],"locations":[["(sin.f64 y)",0.015625,false],["(*.f64 (/.f64 x y) (sin.f64 y))",6.635609866620813,true]],"time":4.18017578125,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (/.f64 x y) (sin.f64 y))","y","-inf",0.18603515625],["(*.f64 (/.f64 x y) (sin.f64 y))","y","inf",0.157958984375],["(*.f64 (/.f64 x y) (sin.f64 y))","y","0",0.198974609375],["(*.f64 (/.f64 x y) (sin.f64 y))","x","-inf",0.161865234375],["(*.f64 (/.f64 x y) (sin.f64 y))","x","inf",0.1650390625],["(*.f64 (/.f64 x y) (sin.f64 y))","x","0",0.224853515625]],"time":1.1708984375,"type":"series"},{"count":[[1,78]],"inputs":[["(*.f64 (/.f64 x y) (sin.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (/.f64 x y) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x y) (sin.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 (/.f64 x y)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 x y) (sin.f64 y))) (pow.f64 (*.f64 (/.f64 x y) (sin.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) y) (*.f64 (pow.f64 x 2/3) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (sin.f64 y))) (/.f64 (pow.f64 (sin.f64 y) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cbrt.f64 (sin.f64 y))) -1) (/.f64 (pow.f64 (sin.f64 y) 2/3) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cbrt.f64 (sin.f64 y))) (cbrt.f64 y)) (/.f64 (pow.f64 (sin.f64 y) 2/3) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cbrt.f64 (sin.f64 y))) (pow.f64 y 2/3)) (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) -1) (/.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) (pow.f64 y 2/3)) (/.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (/.f64 x y) (sin.f64 y)) 2/3) (cbrt.f64 (*.f64 (/.f64 x y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x y) (cbrt.f64 (sin.f64 y))) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (cbrt.f64 (/.f64 x y))) (pow.f64 (/.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (pow.f64 (sin.f64 y) 2/3) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) (*.f64 (pow.f64 (/.f64 x y) 2/3) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 x y) 2/3) (sin.f64 y)) (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2/3) (*.f64 (/.f64 x y) (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x y) 2/3) (*.f64 (sin.f64 y) (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) (/.f64 x y)) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) (/.f64 (*.f64 (pow.f64 x 2/3) (sin.f64 y)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) (pow.f64 y 2/3)) (/.f64 (*.f64 (pow.f64 x 2/3) (sin.f64 y)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) (/.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) y) (pow.f64 (*.f64 x (sin.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (/.f64 (*.f64 (pow.f64 x 2/3) (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 y -2/3)) (/.f64 (sin.f64 y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (*.f64 x (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (cbrt.f64 (neg.f64 y))) (/.f64 x (neg.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (*.f64 (pow.f64 x 2/3) (sin.f64 y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (neg.f64 y))) (/.f64 (sin.f64 y) (neg.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) (*.f64 (sin.f64 y) (pow.f64 y -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sin.f64 y)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (pow.f64 y -2/3)) (/.f64 x (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (pow.f64 y -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (neg.f64 x)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (/.f64 (*.f64 x (sin.f64 y)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -2/3) (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (/.f64 x y)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 x y) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x y) (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (/.f64 x y)) (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (*.f64 (pow.f64 (/.f64 x y) 2/3) (sin.f64 y))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (/.f64 x y) (sin.f64 y)) 2) (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (/.f64 x y) (sin.f64 y)) 2) (*.f64 (sin.f64 y) (neg.f64 x)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (pow.f64 (*.f64 (/.f64 x y) (sin.f64 y)) 2))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 (sin.f64 y) (neg.f64 x)) (pow.f64 (*.f64 (/.f64 x y) (sin.f64 y)) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (sin.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (/.f64 x y) (sin.f64 y)) 2/3) (cbrt.f64 (*.f64 x (sin.f64 y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (*.f64 (pow.f64 (/.f64 x y) 2/3) (sin.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 (sin.f64 y) (pow.f64 y -2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) (pow.f64 (*.f64 (/.f64 x y) (sin.f64 y)) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (sin.f64 y)) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (sin.f64 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (neg.f64 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (neg.f64 x)) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x y) (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 x y)) (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (sin.f64 y))) 3) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (neg.f64 (cbrt.f64 (*.f64 x (sin.f64 y)))) 3) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 (neg.f64 x))) 3) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 x (sin.f64 y)) 3) (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (/.f64 x y) (sin.f64 y)) 2) (*.f64 x (sin.f64 y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 x (sin.f64 y)) (pow.f64 (*.f64 (/.f64 x y) (sin.f64 y)) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 x y) (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 x y) (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 x y)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) (sin.f64 y)) 3))))))"]],"rules":[["egg-rr",78]],"time":42.501953125,"type":"rewrite"},{"count":[[102,86]],"inputs":[["(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/6 (*.f64 (*.f64 x y) y) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(*.f64 x (+.f64 (*.f64 -1/6 (*.f64 y y)) (+.f64 (*.f64 1/120 (pow.f64 y 4)) 1)))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(*.f64 x (+.f64 (+.f64 1 (*.f64 -1/5040 (pow.f64 y 6))) (+.f64 (*.f64 -1/6 (*.f64 y y)) (*.f64 1/120 (pow.f64 y 4)))))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (sin.f64 y) (/.f64 x y))"]],"time":92.68017578125,"type":"simplify"},{"compiler":[[1555,630]],"time":15.972900390625,"type":"eval"},{"alts":[["(/.f64 (*.f64 x (+.f64 (-.f64 (sin.f64 y) 1/2) 1/2)) y)","fresh",27.31670469684138],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) 3)","fresh",7.544742724674163],["(*.f64 x (/.f64 (sin.f64 y) y))","done",0.140625],["(*.f64 x (/.f64 (cbrt.f64 (*.f64 (sin.f64 y) (pow.f64 (/.f64 (sin.f64 y) y) 2))) (cbrt.f64 y)))","fresh",11.621283285311533],["(/.f64 (*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3)) y)","done",5.908981399173445],["(*.f64 (/.f64 x y) (sin.f64 y))","done",7.15234375],["(/.f64 (*.f64 x (sin.f64 y)) y)","done",5.53640737565707]],"compiler":[[12,9],[11,8],[8,5],[17,11],[11,8],[8,5],[8,5]],"count":[[137,7]],"kept":[{"done":[3,3],"fresh":[3,3],"new":[130,0],"picked":[1,1]}],"min-error":[0.00390625],"time":27.702880859375,"type":"prune"},{"accuracy":[0.140625],"baseline":[0.140625],"branch":[["x",0.140625,1],["y",0.140625,1],["(*.f64 x (/.f64 (sin.f64 y) y))",0.140625,1],["(/.f64 (sin.f64 y) y)",0.140625,1]],"compiler":[[3,2],[3,2],[8,5],[6,4],[95,39]],"count":[[11,1]],"inputs":[["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) 3)","(*.f64 (/.f64 x y) (sin.f64 y))","(/.f64 (*.f64 x (+.f64 (-.f64 (sin.f64 y) 1/2) 1/2)) y)","(/.f64 (*.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3)) y)","(/.f64 (*.f64 x (sin.f64 y)) y)","(pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) 3)","(*.f64 x (/.f64 (cbrt.f64 (*.f64 (sin.f64 y) (pow.f64 (/.f64 (sin.f64 y) y) 2))) (cbrt.f64 y)))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (pow.f64 (neg.f64 (cbrt.f64 (*.f64 x (sin.f64 y)))) 3) (neg.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))"]],"link":["."],"name":["Linear.Quaternion:$cexp from linear-1.19.1.3"],"oracle":[39.029414260781856],"outputs":[["(*.f64 x (/.f64 (sin.f64 y) y))"]],"time":19.95703125,"times":[["x",4.5400390625],["y",4.799072265625],["(*.f64 x (/.f64 (sin.f64 y) y))",4.35400390625],["(/.f64 (sin.f64 y) y)",4.341064453125]],"type":"regimes"},{"compiler":[[8,5]],"inputs":[["(*.f64 x (/.f64 (sin.f64 y) y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))"]],"stop":[["fuel",1]],"time":38.656982421875,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[8,5]],"remove-preprocessing":[[]],"time":7.742919921875,"type":"end"}]
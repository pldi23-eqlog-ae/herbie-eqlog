[{"compiler":[[26,19]],"method":["search"],"sampling":[[1,0.25679552221004087,0.0,0.7432044777899591],[0,0.0,0.25679552221004087,0.7432044777899591]],"time":0.300048828125,"type":"analyze"},{"outcomes":[["body",512,"valid",109.06005859375,1052],["body",1024,"valid",151.284423828125,998],["body",2048,"valid",5.86865234375,27],["body",256,"valid",343.374755859375,6179]],"time":618.60791015625,"type":"sample"},{"compiler":[[11,8]],"inputs":[["0","1"],["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))","(-.f64 (pow.f64 (+.f64 eps x) 2) (pow.f64 eps 2))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))","(-.f64 (pow.f64 (+.f64 x eps) 2) (*.f64 x x))","(-.f64 (pow.f64 (+.f64 eps x) 2) (pow.f64 eps 2))","(-.f64 (pow.f64 (+.f64 x eps) 2) (*.f64 eps eps))"]],"symmetry":[[]],"time":57.453857421875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))","(fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2))"]],"time":17.34619140625,"type":"simplify"},{"compiler":[[20,12]],"time":0.40185546875,"type":"eval"},{"alts":[["(fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2))","fresh",22.190394620683122],["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))","next",14.354868393754275]],"compiler":[[11,7],[11,8],[11,7],[11,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[14.243589204569531],"time":1.33203125,"type":"prune"},{"compiler":[[25,13]],"locations":[["(pow.f64 (+.f64 x eps) 2)",0.02734375,true],["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))",3.2196957569346436,true]],"time":5.580078125,"type":"localize"},{"count":[[2,48]],"series":[["(pow.f64 (+.f64 x eps) 2)","eps","-inf",0.16796875],["(pow.f64 (+.f64 x eps) 2)","eps","inf",0.151123046875],["(pow.f64 (+.f64 x eps) 2)","eps","0",0.15576171875],["(pow.f64 (+.f64 x eps) 2)","x","-inf",0.18701171875],["(pow.f64 (+.f64 x eps) 2)","x","inf",0.178955078125],["(pow.f64 (+.f64 x eps) 2)","x","0",0.182861328125],["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))","eps","-inf",0.3359375],["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))","eps","inf",0.919921875],["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))","eps","0",0.39404296875],["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))","x","-inf",0.636962890625],["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))","x","inf",0.546875],["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))","x","0",0.530029296875]],"time":4.5390625,"type":"series"},{"count":[[2,96]],"inputs":[["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))","(pow.f64 (+.f64 x eps) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (*.f64 x x)) (*.f64 (+.f64 x eps) x)) (*.f64 (+.f64 x eps) eps))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (*.f64 x x)) (*.f64 (+.f64 x eps) eps)) (*.f64 (+.f64 x eps) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x eps) eps) (+.f64 (*.f64 (+.f64 x eps) x) (neg.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x eps) x) (+.f64 (*.f64 (+.f64 x eps) eps) (neg.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x eps) eps) (-.f64 (*.f64 (+.f64 x eps) x) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x eps) x) (-.f64 (*.f64 (+.f64 x eps) eps) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)) 0) (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)) (*.f64 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2))) (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)) (*.f64 0 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (+.f64 x eps) 2) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x x)) (pow.f64 (+.f64 x eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 x x (neg.f64 (pow.f64 (+.f64 x eps) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 x x)) (neg.f64 (pow.f64 (+.f64 x eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (+.f64 x eps) 2) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (pow.f64 (+.f64 x eps) 2) 0) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (+.f64 x eps) x) (-.f64 (+.f64 x eps) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 x x (neg.f64 (pow.f64 (+.f64 x eps) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 x eps) x) (+.f64 (+.f64 x eps) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x (neg.f64 (pow.f64 (+.f64 x eps) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (pow.f64 (+.f64 x eps) 2)) (neg.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (+.f64 x eps) x)) (-.f64 x (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (fma.f64 x x (neg.f64 (pow.f64 (+.f64 x eps) 2))))) (cbrt.f64 (pow.f64 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (+.f64 x eps)) x) (-.f64 (neg.f64 (+.f64 x eps)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 x eps) x) (-.f64 (+.f64 x eps) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (+.f64 x eps)) (neg.f64 x)) (-.f64 (neg.f64 (+.f64 x eps)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 x eps) 4)) (+.f64 (cbrt.f64 (pow.f64 x 4)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x eps) x) 2)))) (-.f64 (cbrt.f64 (pow.f64 (+.f64 x eps) 2)) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2))) (cbrt.f64 (pow.f64 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)) 2)) (cbrt.f64 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x (neg.f64 (pow.f64 (+.f64 x eps) 2)))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 x x (neg.f64 (pow.f64 (+.f64 x eps) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (fma.f64 x x (neg.f64 (pow.f64 (+.f64 x eps) 2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x eps) 2)) (cbrt.f64 (pow.f64 (+.f64 x eps) 4)) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x eps) (+.f64 x eps) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x eps) 4)) (cbrt.f64 (pow.f64 (+.f64 x eps) 2)) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (pow.f64 (+.f64 x eps) 2)) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x eps)) (pow.f64 (cbrt.f64 (+.f64 x eps)) (+.f64 2 3)) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (+.f64 x eps)) (neg.f64 (+.f64 x eps)) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 (cbrt.f64 (pow.f64 x 4))) (pow.f64 (+.f64 x eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 x 4)) (pow.f64 (+.f64 x eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 x) (pow.f64 (+.f64 x eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (+.f64 x eps) 2) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x eps) 2) 1 (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 x x) (pow.f64 (+.f64 x eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 x x)) (pow.f64 (+.f64 x eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x eps) x) (*.f64 (+.f64 x eps) eps))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x eps) eps) (*.f64 (+.f64 x eps) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (+.f64 x eps) 2) 0) (pow.f64 (+.f64 x eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (+.f64 x eps) 2) (*.f64 (pow.f64 (+.f64 x eps) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (+.f64 x eps) 2)) (pow.f64 (+.f64 x eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (+.f64 x eps) 2) (*.f64 0 (pow.f64 (+.f64 x eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 x eps) eps) 1) (*.f64 (*.f64 (+.f64 x eps) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 x eps) x) 1) (*.f64 (*.f64 (+.f64 x eps) eps) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x eps) (+.f64 x eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x eps) 2)) (cbrt.f64 (pow.f64 (+.f64 x eps) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x eps)) (neg.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x eps) 4)) (cbrt.f64 (pow.f64 (+.f64 x eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x eps)) (pow.f64 (cbrt.f64 (+.f64 x eps)) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (+.f64 x eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (+.f64 x eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x eps) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (+.f64 x eps) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x eps)) (+.f64 2 3)) (cbrt.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 x eps) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (+.f64 x eps) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x eps) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x eps) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x eps) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x eps) 3) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x eps)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (+.f64 x eps) 2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x eps) 3) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (+.f64 x eps) 2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (+.f64 x eps)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (+.f64 x eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x eps) 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x eps) eps (*.f64 (+.f64 x eps) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 eps (+.f64 x eps) (*.f64 (+.f64 x eps) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x eps) x (*.f64 (+.f64 x eps) eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 x eps) (*.f64 (+.f64 x eps) eps))))))"]],"rules":[["egg-rr",35],["egg-rr",61]],"time":24.35986328125,"type":"rewrite"},{"count":[[144,108]],"inputs":[["(pow.f64 eps 2)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 2 (*.f64 eps x))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 2 (*.f64 eps x))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 2 (*.f64 eps x))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(pow.f64 eps 2)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(pow.f64 eps 2)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(pow.f64 eps 2)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(pow.f64 eps 2)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(pow.f64 eps 2)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 eps 2)","(*.f64 eps eps)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(*.f64 2 (*.f64 eps x))","(*.f64 (+.f64 eps eps) x)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(*.f64 2 (*.f64 eps x))","(*.f64 (+.f64 eps eps) x)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(*.f64 2 (*.f64 eps x))","(*.f64 (+.f64 eps eps) x)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(pow.f64 eps 2)","(*.f64 eps eps)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(pow.f64 eps 2)","(*.f64 eps eps)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(pow.f64 eps 2)","(*.f64 eps eps)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(fma.f64 eps eps (*.f64 x (+.f64 (+.f64 eps eps) x)))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(fma.f64 eps eps (*.f64 x (+.f64 (+.f64 eps eps) x)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 eps eps) x))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(fma.f64 eps eps (*.f64 x (+.f64 (+.f64 eps eps) x)))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(fma.f64 eps eps (*.f64 x (+.f64 (+.f64 eps eps) x)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 eps eps) x))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(fma.f64 eps eps (*.f64 x (+.f64 (+.f64 eps eps) x)))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(fma.f64 eps eps (*.f64 x (+.f64 (+.f64 eps eps) x)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 eps eps) x))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(fma.f64 eps eps (*.f64 x (+.f64 (+.f64 eps eps) x)))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(fma.f64 eps eps (*.f64 x (+.f64 (+.f64 eps eps) x)))","(pow.f64 eps 2)","(*.f64 eps eps)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(fma.f64 eps eps (*.f64 x (+.f64 (+.f64 eps eps) x)))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(fma.f64 eps eps (*.f64 x (+.f64 (+.f64 eps eps) x)))","(pow.f64 eps 2)","(*.f64 eps eps)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(fma.f64 eps eps (*.f64 x (+.f64 (+.f64 eps eps) x)))","(+.f64 (pow.f64 eps 2) (+.f64 (*.f64 2 (*.f64 eps x)) (pow.f64 x 2)))","(fma.f64 eps eps (*.f64 x (+.f64 (+.f64 eps eps) x)))"]],"time":146.4951171875,"type":"simplify"},{"compiler":[[1437,645]],"time":16.333984375,"type":"eval"},{"alts":[["(*.f64 eps (+.f64 (+.f64 x x) eps))","next",0.01171875],["(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","fresh",0.046875]],"compiler":[[9,5],[11,8],[9,5],[11,8]],"count":[[110,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[108,2],"picked":[1,0]}],"min-error":[0],"time":22.68994140625,"type":"prune"},{"compiler":[[19,5]],"locations":[["(*.f64 eps (+.f64 (+.f64 x x) eps))",0.01171875,true]],"time":3.721923828125,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 eps (+.f64 (+.f64 x x) eps))","x","-inf",0.258056640625],["(*.f64 eps (+.f64 (+.f64 x x) eps))","x","inf",0.272216796875],["(*.f64 eps (+.f64 (+.f64 x x) eps))","x","0",0.295166015625],["(*.f64 eps (+.f64 (+.f64 x x) eps))","eps","-inf",0.340087890625],["(*.f64 eps (+.f64 (+.f64 x x) eps))","eps","inf",0.265869140625],["(*.f64 eps (+.f64 (+.f64 x x) eps))","eps","0",0.60400390625]],"time":2.128173828125,"type":"series"},{"count":[[1,51]],"inputs":[["(*.f64 eps (+.f64 (+.f64 x x) eps))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 eps (fma.f64 2 x eps)) (*.f64 (*.f64 eps (fma.f64 2 x eps)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 eps (fma.f64 2 x eps)) 0) (*.f64 eps (fma.f64 2 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x eps) (*.f64 eps (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 eps (fma.f64 2 x eps)) (*.f64 0 (*.f64 eps (fma.f64 2 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 eps (fma.f64 2 x eps))) (*.f64 eps (fma.f64 2 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x eps) 1) (*.f64 (*.f64 eps (+.f64 x eps)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 eps (+.f64 x x)) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 eps eps) (*.f64 eps (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 eps (+.f64 x eps)) (*.f64 x eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 eps (fma.f64 2 x eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 2 x eps) eps)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 2 x eps)) (*.f64 (pow.f64 (fma.f64 2 x eps) 2/3) eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 eps) (*.f64 (pow.f64 eps 2/3) (fma.f64 2 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 eps (cbrt.f64 (fma.f64 2 x eps))) (pow.f64 (fma.f64 2 x eps) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 2 x eps) 2/3) (*.f64 eps (cbrt.f64 (fma.f64 2 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 2 x eps) 2/3) eps) (cbrt.f64 (fma.f64 2 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 eps 2/3) (fma.f64 2 x eps)) (cbrt.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 eps (fma.f64 2 x eps))) (pow.f64 (*.f64 eps (fma.f64 2 x eps)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 eps (fma.f64 2 x eps)) 2/3) (cbrt.f64 (*.f64 eps (fma.f64 2 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 2 x eps) (cbrt.f64 eps)) (pow.f64 eps 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 eps 2/3) (*.f64 (fma.f64 2 x eps) (cbrt.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 eps 2/3) (+.f64 (pow.f64 eps 4/3) (*.f64 (+.f64 x x) (cbrt.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 eps 2/3) (+.f64 (*.f64 (+.f64 x x) (cbrt.f64 eps)) (pow.f64 eps 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 eps (fma.f64 2 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 eps (fma.f64 2 x eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 eps (fma.f64 2 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 eps (fma.f64 2 x eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 eps (fma.f64 2 x eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 eps (fma.f64 2 x eps)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 eps (fma.f64 2 x eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 eps (fma.f64 2 x eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 eps (fma.f64 2 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 eps (fma.f64 2 x eps)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 eps (+.f64 x x) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x x) eps (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 eps) (*.f64 (pow.f64 eps 2/3) (+.f64 x x)) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 eps (+.f64 x x))) (cbrt.f64 (pow.f64 (*.f64 eps (+.f64 x x)) 2)) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x x) (cbrt.f64 eps)) (pow.f64 eps 2/3) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x x)) (*.f64 (pow.f64 (+.f64 x x) 2/3) eps) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 eps eps) x (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 eps (cbrt.f64 (+.f64 x x))) (pow.f64 (+.f64 x x) 2/3) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x eps (*.f64 eps (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 eps 2/3) (pow.f64 eps 4/3) (*.f64 eps (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 eps 4/3) (pow.f64 eps 2/3) (*.f64 eps (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 eps) (pow.f64 (cbrt.f64 eps) 5) (*.f64 eps (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 eps eps (*.f64 eps (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 eps x (*.f64 eps (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (*.f64 x eps) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 eps (+.f64 x x)) 1 (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 eps (+.f64 x x)) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 eps eps) (*.f64 eps (+.f64 x x)))))))"]],"rules":[["egg-rr",51]],"time":21.224853515625,"type":"rewrite"},{"count":[[75,57]],"inputs":[["(*.f64 2 (*.f64 eps x))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(pow.f64 eps 2)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(pow.f64 eps 2)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(pow.f64 eps 2)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 2 (*.f64 eps x))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 2 (*.f64 eps x))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (*.f64 eps x))","(*.f64 (+.f64 eps eps) x)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(pow.f64 eps 2)","(*.f64 eps eps)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(pow.f64 eps 2)","(*.f64 eps eps)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(pow.f64 eps 2)","(*.f64 eps eps)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(*.f64 2 (*.f64 eps x))","(*.f64 (+.f64 eps eps) x)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(*.f64 2 (*.f64 eps x))","(*.f64 (+.f64 eps eps) x)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))"]],"time":77.486083984375,"type":"simplify"},{"compiler":[[597,271]],"time":7.64599609375,"type":"eval"},{"alts":[["(*.f64 eps (+.f64 (+.f64 x x) eps))","done",0.01171875],["(fma.f64 eps eps (*.f64 eps (+.f64 x x)))","next",0.01171875]],"compiler":[[9,5],[10,5],[10,5]],"count":[[59,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[57,1],"picked":[1,1]}],"min-error":[0],"time":9.7080078125,"type":"prune"},{"compiler":[[20,5]],"locations":[["(fma.f64 eps eps (*.f64 eps (+.f64 x x)))",0.01171875,true]],"time":3.989990234375,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 eps eps (*.f64 eps (+.f64 x x)))","x","-inf",0.23291015625],["(fma.f64 eps eps (*.f64 eps (+.f64 x x)))","x","inf",0.317138671875],["(fma.f64 eps eps (*.f64 eps (+.f64 x x)))","x","0",0.330078125],["(fma.f64 eps eps (*.f64 eps (+.f64 x x)))","eps","-inf",0.31787109375],["(fma.f64 eps eps (*.f64 eps (+.f64 x x)))","eps","inf",0.3291015625],["(fma.f64 eps eps (*.f64 eps (+.f64 x x)))","eps","0",0.44384765625]],"time":2.049072265625,"type":"series"},{"count":[[1,52]],"inputs":[["(fma.f64 eps eps (*.f64 eps (+.f64 x x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 eps eps) (*.f64 eps (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 eps (+.f64 x x)) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 eps (+.f64 eps x)) (*.f64 eps x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 eps x) (*.f64 eps (+.f64 eps x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (*.f64 eps (+.f64 eps x)))) (*.f64 eps x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 eps (+.f64 eps x)) -1)) (*.f64 eps x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 eps (+.f64 (+.f64 eps x) x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 eps (+.f64 (+.f64 eps x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 eps eps) (neg.f64 (*.f64 eps (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 eps (+.f64 (+.f64 eps x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 eps (+.f64 eps x)) (neg.f64 (*.f64 eps x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 eps (+.f64 x x)) (neg.f64 (*.f64 eps eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 eps (+.f64 (+.f64 eps x) x))) (pow.f64 (*.f64 eps (+.f64 (+.f64 eps x) x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 eps (+.f64 (+.f64 eps x) x)) 2/3) (cbrt.f64 (*.f64 eps (+.f64 (+.f64 eps x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 eps (+.f64 (+.f64 eps x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (+.f64 eps x) x) eps)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 eps) (+.f64 (*.f64 (pow.f64 eps 2/3) (+.f64 x x)) (pow.f64 (cbrt.f64 eps) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 eps 2/3) (+.f64 (*.f64 (+.f64 x x) (cbrt.f64 eps)) (pow.f64 eps 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 eps (+.f64 (+.f64 eps x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 eps (+.f64 (+.f64 eps x) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 eps (+.f64 (+.f64 eps x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 eps (+.f64 (+.f64 eps x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 eps (+.f64 (+.f64 eps x) x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 eps (+.f64 x x)) 2/3) (-.f64 (pow.f64 eps 4/3) (*.f64 (cbrt.f64 (*.f64 eps (+.f64 x x))) (pow.f64 eps 2/3)))) (+.f64 (cbrt.f64 (*.f64 eps (+.f64 x x))) (pow.f64 eps 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 eps 4/3) (-.f64 (pow.f64 (*.f64 eps (+.f64 x x)) 2/3) (*.f64 (pow.f64 eps 2/3) (cbrt.f64 (*.f64 eps (+.f64 x x)))))) (+.f64 (pow.f64 eps 2/3) (cbrt.f64 (*.f64 eps (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 eps (+.f64 (+.f64 eps x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 eps (+.f64 (+.f64 eps x) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 eps (+.f64 (+.f64 eps x) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 eps (+.f64 (+.f64 eps x) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 eps (+.f64 (+.f64 eps x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 eps (+.f64 (+.f64 eps x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 eps (+.f64 (+.f64 eps x) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 eps eps (*.f64 eps (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 eps (+.f64 x x) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 eps eps) x (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x x) (cbrt.f64 eps)) (pow.f64 eps 2/3) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 eps (+.f64 x x)) 2/3) (cbrt.f64 (*.f64 eps (+.f64 x x))) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 eps eps) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x x) eps (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 eps (+.f64 x x))) (pow.f64 (*.f64 eps (+.f64 x x)) 2/3) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x x)) (*.f64 (pow.f64 (+.f64 x x) 2/3) eps) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 eps (cbrt.f64 (+.f64 x x))) (pow.f64 (+.f64 x x) 2/3) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 eps) (*.f64 (pow.f64 eps 2/3) (+.f64 x x)) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 eps 2/3) (pow.f64 eps 4/3) (*.f64 eps (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 eps 4/3) (pow.f64 eps 2/3) (*.f64 eps (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 eps) (pow.f64 (cbrt.f64 eps) 5) (*.f64 eps (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 eps (+.f64 x x))) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (*.f64 eps x) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 eps (+.f64 x x)) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 eps (+.f64 x x)) 1 (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 eps eps) 1 (*.f64 eps (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 eps eps) (*.f64 eps (+.f64 x x)))))))"]],"rules":[["egg-rr",52]],"time":40.3818359375,"type":"rewrite"},{"count":[[76,58]],"inputs":[["(*.f64 2 (*.f64 eps x))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(pow.f64 eps 2)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(pow.f64 eps 2)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(pow.f64 eps 2)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 2 (*.f64 eps x))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 2 (*.f64 eps x))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (*.f64 eps x))","(*.f64 (+.f64 eps eps) x)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(pow.f64 eps 2)","(*.f64 eps eps)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(pow.f64 eps 2)","(*.f64 eps eps)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(pow.f64 eps 2)","(*.f64 eps eps)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(*.f64 2 (*.f64 eps x))","(*.f64 (+.f64 eps eps) x)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(*.f64 2 (*.f64 eps x))","(*.f64 (+.f64 eps eps) x)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))"]],"time":77.630126953125,"type":"simplify"},{"compiler":[[638,177]],"time":5.807861328125,"type":"eval"},{"alts":[["(*.f64 eps (+.f64 (+.f64 x x) eps))","done",0.01171875],["(fma.f64 eps eps (*.f64 eps (+.f64 x x)))","done",0.01171875]],"compiler":[[9,5],[10,5]],"count":[[60,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[58,0],"picked":[1,1]}],"min-error":[0],"time":10.7880859375,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1],["eps",0.01171875,1],["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))",0.01171875,1]],"compiler":[[3,2],[3,2],[11,8],[44,23]],"count":[[5,1]],"inputs":[["(fma.f64 eps eps (*.f64 eps (+.f64 x x)))","(*.f64 eps (+.f64 (+.f64 x x) eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(fma.f64 (neg.f64 x) x (pow.f64 (+.f64 x eps) 2))","(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))"]],"link":["."],"name":["ENA, Section 1.4, Exercise 4b, n=2"],"oracle":[22.317298809867864],"outputs":[["(fma.f64 eps eps (*.f64 eps (+.f64 x x)))"]],"time":9.529052734375,"times":[["x",3.255126953125],["eps",3.110107421875],["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))",2.1259765625]],"type":"regimes"},{"compiler":[[10,5]],"inputs":[["(fma.f64 eps eps (*.f64 eps (+.f64 x x)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 eps eps (*.f64 eps (+.f64 x x)))","(*.f64 eps (+.f64 (+.f64 eps x) x))"]],"stop":[["done",1]],"time":37.910888671875,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[10,5]],"remove-preprocessing":[[]],"time":7.593017578125,"type":"end"}]
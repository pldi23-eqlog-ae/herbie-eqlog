[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.7492677569389343,0.13999989989679307,0.1107323431642726],[11,0.7492677569389343,0.14731696783564985,0.10341527522541583],[10,0.7492677569389343,0.1541462312452495,0.09658601181581616],[9,0.7492677569389343,0.16780475806444883,0.08292748499661684],[8,0.7492677569389343,0.17951206676661968,0.07122017629444599],[7,0.7492677569389343,0.20292668417096138,0.047805558890104294],[6,0.7492677569389343,0.21853642910718918,0.032195813953876495],[5,0.7492677569389343,0.24975591897964478,0.0009763240814208984],[4,0.7492677569389343,0.24975591897964478,0.0009763240814208984],[3,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[2,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":28.468994140625,"type":"analyze"},{"outcomes":[["body",512,"invalid",33.23095703125,327],["body",256,"invalid",28.104248046875,515],["body",512,"valid",74.818115234375,672],["body",1024,"valid",283.4853515625,1334],["body",1024,"invalid",119.084228515625,706],["body",2048,"valid",1.057861328125,2],["body",256,"valid",320.11328125,6248]],"time":870.85498046875,"type":"sample"},{"compiler":[[7,5]],"inputs":[["0","1"],["(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (exp.f64 im) (sin.f64 re))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (exp.f64 im) (sin.f64 re))"]],"symmetry":[[]],"time":74.77392578125,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(*.f64 (exp.f64 re) (sin.f64 im))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (exp.f64 re) (sin.f64 im))"]],"time":32.4521484375,"type":"simplify"},{"compiler":[[7,5]],"time":0.23583984375,"type":"eval"},{"alts":[["(*.f64 (exp.f64 re) (sin.f64 im))","next",0.01953125]],"compiler":[[7,5],[7,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.01953125],"time":0.669189453125,"type":"prune"},{"compiler":[[13,5]],"locations":[["(*.f64 (exp.f64 re) (sin.f64 im))",0.01171875,true],["(sin.f64 im)",0.01171875,true]],"time":3.923828125,"type":"localize"},{"count":[[2,28]],"series":[["(*.f64 (exp.f64 re) (sin.f64 im))","im","-inf",0.2529296875],["(*.f64 (exp.f64 re) (sin.f64 im))","im","inf",0.322998046875],["(*.f64 (exp.f64 re) (sin.f64 im))","im","0",0.338134765625],["(*.f64 (exp.f64 re) (sin.f64 im))","re","-inf",0.4140625],["(*.f64 (exp.f64 re) (sin.f64 im))","re","inf",0.6279296875],["(*.f64 (exp.f64 re) (sin.f64 im))","re","0",0.3388671875],["(sin.f64 im)","im","-inf",0.18994140625],["(sin.f64 im)","im","inf",0.1708984375],["(sin.f64 im)","im","0",0.424072265625]],"time":3.2021484375,"type":"series"},{"count":[[2,50]],"inputs":[["(sin.f64 im)","(*.f64 (exp.f64 re) (sin.f64 im))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 0) (cos.f64 im)) (*.f64 (cos.f64 0) (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 im) (cos.f64 0)) (*.f64 (cos.f64 im) (sin.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sin.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 im) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 im)) (pow.f64 (sin.f64 im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 im) 2/3) (cbrt.f64 (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 im))) (neg.f64 (pow.f64 (sin.f64 im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 im)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 im) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 im)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 im) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 im)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (sin.f64 (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 im) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 im)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (exp.f64 re) (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (exp.f64 re) (sin.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 re) (sin.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 im) (exp.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 im)) (*.f64 (pow.f64 (sin.f64 im) 2/3) (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (pow.f64 (exp.f64 re) 2/3) (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 re) (cbrt.f64 (sin.f64 im))) (pow.f64 (sin.f64 im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 im) 2/3) (exp.f64 re)) (cbrt.f64 (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (exp.f64 re) 2/3) (sin.f64 im)) (cbrt.f64 (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 im) 2/3) (*.f64 (exp.f64 re) (cbrt.f64 (sin.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (exp.f64 re) (sin.f64 im))) (pow.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 2/3) (cbrt.f64 (*.f64 (exp.f64 re) (sin.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))) (pow.f64 (exp.f64 re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 re) 2/3) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (exp.f64 re) (sin.f64 im)))) (neg.f64 (pow.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (exp.f64 re) (sin.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (exp.f64 re) (sin.f64 im))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (exp.f64 re) (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (exp.f64 re) (sin.f64 im))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (exp.f64 re) (sin.f64 im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (exp.f64 re) (sin.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 3))))))"]],"rules":[["egg-rr",28],["egg-rr",22]],"time":37.677978515625,"type":"rewrite"},{"count":[[78,70]],"inputs":[["im","(+.f64 (*.f64 -1/6 (pow.f64 im 3)) im)","(+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 1/120 (pow.f64 im 5)) im))","(+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (+.f64 (*.f64 1/120 (pow.f64 im 5)) im)))","(sin.f64 im)","(+.f64 (sin.f64 im) (*.f64 (sin.f64 im) re))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2)))))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) im)","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (*.f64 (exp.f64 re) im))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (*.f64 (exp.f64 re) im)))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (+.f64 (*.f64 -1/5040 (*.f64 (exp.f64 re) (pow.f64 im 7))) (*.f64 (exp.f64 re) im))))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))"]],"method":["egg-herbie"],"outputs":[["im","(+.f64 (*.f64 -1/6 (pow.f64 im 3)) im)","(fma.f64 -1/6 (pow.f64 im 3) im)","(+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 1/120 (pow.f64 im 5)) im))","(fma.f64 -1/6 (pow.f64 im 3) (fma.f64 1/120 (pow.f64 im 5) im))","(+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (+.f64 (*.f64 1/120 (pow.f64 im 5)) im)))","(fma.f64 (pow.f64 im 3) -1/6 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 1/120 (pow.f64 im 5) im)))","(sin.f64 im)","(+.f64 (sin.f64 im) (*.f64 (sin.f64 im) re))","(*.f64 (sin.f64 im) (+.f64 1 re))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2)))))","(+.f64 (sin.f64 im) (fma.f64 (sin.f64 im) re (*.f64 (*.f64 1/2 (sin.f64 im)) (*.f64 re re))))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))))","(+.f64 (sin.f64 im) (fma.f64 re (sin.f64 im) (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (*.f64 1/2 (sin.f64 im)) (*.f64 re re)))))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) im)","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (*.f64 (exp.f64 re) im))","(fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (*.f64 (exp.f64 re) im))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (*.f64 (exp.f64 re) im)))","(fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (fma.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5)) (*.f64 (exp.f64 re) im)))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (+.f64 (*.f64 -1/5040 (*.f64 (exp.f64 re) (pow.f64 im 7))) (*.f64 (exp.f64 re) im))))","(fma.f64 (*.f64 (exp.f64 re) (pow.f64 im 3)) -1/6 (fma.f64 (*.f64 1/120 (exp.f64 re)) (pow.f64 im 5) (fma.f64 -1/5040 (*.f64 (exp.f64 re) (pow.f64 im 7)) (*.f64 (exp.f64 re) im))))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))"]],"time":86.280029296875,"type":"simplify"},{"compiler":[[762,338]],"time":8.9619140625,"type":"eval"},{"alts":[["(*.f64 (pow.f64 (exp.f64 re) 2/3) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))","next",0.015625],["(*.f64 (exp.f64 re) (sin.f64 im))","done",0.01953125]],"compiler":[[13,9],[7,5],[13,9]],"count":[[71,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[70,1],"picked":[1,1]}],"min-error":[0.0078125],"time":13.6279296875,"type":"prune"},{"compiler":[[33,12]],"locations":[["(sin.f64 im)",0.01171875,false],["(*.f64 (pow.f64 (exp.f64 re) 2/3) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))",0.015625,true],["(*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))",0.015625,true]],"time":8.43798828125,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (pow.f64 (exp.f64 re) 2/3) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))","im","-inf",0.31201171875],["(*.f64 (pow.f64 (exp.f64 re) 2/3) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))","im","inf",0.217041015625],["(*.f64 (pow.f64 (exp.f64 re) 2/3) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))","im","0",0.2001953125],["(*.f64 (pow.f64 (exp.f64 re) 2/3) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))","re","-inf",0.235107421875],["(*.f64 (pow.f64 (exp.f64 re) 2/3) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))","re","inf",0.261962890625],["(*.f64 (pow.f64 (exp.f64 re) 2/3) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))","re","0",0.199951171875],["(*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))","re","-inf",1.200927734375],["(*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))","re","inf",1.22900390625],["(*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))","re","0",0.31201171875],["(*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))","im","-inf",0.31298828125],["(*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))","im","inf",2.0888671875],["(*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))","im","0",0.673095703125]],"time":7.442138671875,"type":"series"},{"count":[[2,58]],"inputs":[["(*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))","(*.f64 (pow.f64 (exp.f64 re) 2/3) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))) 0) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))) (*.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))) (*.f64 0 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (exp.f64 re) (sin.f64 im))) (pow.f64 (sin.f64 im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (exp.f64 re))) (*.f64 (cbrt.f64 (exp.f64 (*.f64 re 2/3))) (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 im)) (*.f64 (pow.f64 (sin.f64 im) 2/3) (cbrt.f64 (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 im) 2/3) (cbrt.f64 (*.f64 (exp.f64 re) (sin.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 re 2/3))) (sin.f64 im)) (cbrt.f64 (cbrt.f64 (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 im) 2/3) (cbrt.f64 (exp.f64 re))) (cbrt.f64 (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))) (pow.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))) 2/3) (cbrt.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 im) (cbrt.f64 (cbrt.f64 (exp.f64 re)))) (cbrt.f64 (exp.f64 (*.f64 re 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 re 2/3))) (*.f64 (sin.f64 im) (cbrt.f64 (cbrt.f64 (exp.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (exp.f64 re) (pow.f64 (sin.f64 im) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (exp.f64 re) (pow.f64 (sin.f64 im) 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 0) (*.f64 (exp.f64 re) (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 re) (sin.f64 im)) (*.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (exp.f64 re) (sin.f64 im))) (*.f64 (exp.f64 re) (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 re) (sin.f64 im)) (*.f64 0 (*.f64 (exp.f64 re) (sin.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 re 2/3)) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))) (exp.f64 (*.f64 re 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (exp.f64 re) (sin.f64 im))) (pow.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 2/3) (cbrt.f64 (*.f64 (exp.f64 re) (sin.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 re) (sin.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 im) (exp.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 (*.f64 re 2/3)) (sin.f64 im)) (cbrt.f64 (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 re)) (*.f64 (exp.f64 (*.f64 re 2/3)) (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (exp.f64 (*.f64 re 2/3)) (sin.f64 im)) (cbrt.f64 (cbrt.f64 (exp.f64 re)))) (cbrt.f64 (exp.f64 (*.f64 re 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))) (cbrt.f64 (exp.f64 (*.f64 re 2/3)))) (cbrt.f64 (pow.f64 (exp.f64 re) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (exp.f64 (+.f64 re re)) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))) (pow.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))) (*.f64 (pow.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))) 2/3) (exp.f64 (*.f64 re 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 re 2/3))) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 re) 4/3)) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 re) 4/3)) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))) (cbrt.f64 (exp.f64 (*.f64 re 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))) 2/3) (cbrt.f64 (*.f64 (exp.f64 (+.f64 re re)) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 re 2/3))) (*.f64 (*.f64 (exp.f64 (*.f64 re 2/3)) (sin.f64 im)) (cbrt.f64 (cbrt.f64 (exp.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 re) 4/3)) (*.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))) (cbrt.f64 (exp.f64 (*.f64 re 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))) 2/3) (exp.f64 (*.f64 re 2/3))) (cbrt.f64 (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (exp.f64 re) (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (exp.f64 re) (sin.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (exp.f64 re) (sin.f64 im))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (exp.f64 re) (sin.f64 im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (exp.f64 re) (sin.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (exp.f64 re) (sin.f64 im)) 3))))))"]],"rules":[["egg-rr",32],["egg-rr",26]],"time":27.35888671875,"type":"rewrite"},{"count":[[106,88]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) im)","(+.f64 (*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) im) (*.f64 -1/6 (*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (pow.f64 im 3))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (pow.f64 im 5))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) im) (*.f64 -1/6 (*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (pow.f64 im 3)))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (pow.f64 im 5))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) im) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (pow.f64 im 7))) (*.f64 -1/6 (*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (pow.f64 im 3))))))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (sin.f64 im))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (sin.f64 im))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (sin.f64 im))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (sin.f64 im))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(sin.f64 im)","(+.f64 (sin.f64 im) (*.f64 1/3 (*.f64 (sin.f64 im) re)))","(+.f64 (sin.f64 im) (+.f64 (*.f64 1/3 (*.f64 (sin.f64 im) re)) (*.f64 1/18 (*.f64 (sin.f64 im) (pow.f64 re 2)))))","(+.f64 (sin.f64 im) (+.f64 (*.f64 1/3 (*.f64 (sin.f64 im) re)) (+.f64 (*.f64 1/162 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/18 (*.f64 (sin.f64 im) (pow.f64 re 2))))))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(sin.f64 im)","(+.f64 (sin.f64 im) (*.f64 (sin.f64 im) re))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2)))))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) im)","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (*.f64 (exp.f64 re) im))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (*.f64 (exp.f64 re) im)))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (+.f64 (*.f64 -1/5040 (*.f64 (exp.f64 re) (pow.f64 im 7))) (*.f64 (exp.f64 re) im))))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) im)","(*.f64 (cbrt.f64 (exp.f64 re)) im)","(+.f64 (*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) im) (*.f64 -1/6 (*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (pow.f64 im 3))))","(fma.f64 (cbrt.f64 (exp.f64 re)) im (*.f64 (cbrt.f64 (*.f64 -1/216 (exp.f64 re))) (pow.f64 im 3)))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (pow.f64 im 5))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) im) (*.f64 -1/6 (*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (pow.f64 im 3)))))","(fma.f64 1/120 (*.f64 (cbrt.f64 (exp.f64 re)) (pow.f64 im 5)) (fma.f64 (cbrt.f64 (exp.f64 re)) im (*.f64 (cbrt.f64 (*.f64 -1/216 (exp.f64 re))) (pow.f64 im 3))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (pow.f64 im 5))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) im) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (pow.f64 im 7))) (*.f64 -1/6 (*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (pow.f64 im 3))))))","(fma.f64 1/120 (*.f64 (cbrt.f64 (exp.f64 re)) (pow.f64 im 5)) (fma.f64 (cbrt.f64 (exp.f64 re)) im (fma.f64 -1/5040 (*.f64 (cbrt.f64 (exp.f64 re)) (pow.f64 im 7)) (*.f64 (cbrt.f64 (*.f64 -1/216 (exp.f64 re))) (pow.f64 im 3)))))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (sin.f64 im))","(*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (sin.f64 im))","(*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (sin.f64 im))","(*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 re)) 1/3) (sin.f64 im))","(*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im))","(sin.f64 im)","(+.f64 (sin.f64 im) (*.f64 1/3 (*.f64 (sin.f64 im) re)))","(fma.f64 (*.f64 1/3 (sin.f64 im)) re (sin.f64 im))","(+.f64 (sin.f64 im) (+.f64 (*.f64 1/3 (*.f64 (sin.f64 im) re)) (*.f64 1/18 (*.f64 (sin.f64 im) (pow.f64 re 2)))))","(+.f64 (sin.f64 im) (fma.f64 1/3 (*.f64 (sin.f64 im) re) (*.f64 (*.f64 1/18 (sin.f64 im)) (*.f64 re re))))","(+.f64 (sin.f64 im) (+.f64 (*.f64 1/3 (*.f64 (sin.f64 im) re)) (+.f64 (*.f64 1/162 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/18 (*.f64 (sin.f64 im) (pow.f64 re 2))))))","(+.f64 (sin.f64 im) (fma.f64 (*.f64 1/3 (sin.f64 im)) re (fma.f64 1/162 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (*.f64 1/18 (sin.f64 im)) (*.f64 re re)))))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im))","(*.f64 (sin.f64 im) (pow.f64 (*.f64 1 (exp.f64 re)) 1/3))","(*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im))","(sin.f64 im)","(+.f64 (sin.f64 im) (*.f64 (sin.f64 im) re))","(*.f64 (sin.f64 im) (+.f64 1 re))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2)))))","(+.f64 (sin.f64 im) (fma.f64 (sin.f64 im) re (*.f64 (*.f64 1/2 (sin.f64 im)) (*.f64 re re))))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))))","(+.f64 (sin.f64 im) (fma.f64 (sin.f64 im) re (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (*.f64 1/2 (sin.f64 im)) (*.f64 re re)))))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) im)","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (*.f64 (exp.f64 re) im))","(fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (*.f64 (exp.f64 re) im))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (*.f64 (exp.f64 re) im)))","(fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (fma.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5)) (*.f64 (exp.f64 re) im)))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (+.f64 (*.f64 -1/5040 (*.f64 (exp.f64 re) (pow.f64 im 7))) (*.f64 (exp.f64 re) im))))","(fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (fma.f64 (*.f64 (exp.f64 re) (pow.f64 im 5)) 1/120 (fma.f64 -1/5040 (*.f64 (exp.f64 re) (pow.f64 im 7)) (*.f64 (exp.f64 re) im))))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))"]],"time":144.551025390625,"type":"simplify"},{"compiler":[[1882,874]],"time":19.89501953125,"type":"eval"},{"alts":[["(*.f64 (pow.f64 (exp.f64 re) 2/3) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))","done",0.015625],["(*.f64 (exp.f64 re) (sin.f64 im))","done",0.01953125]],"compiler":[[13,9],[7,5]],"count":[[118,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[116,0],"picked":[1,1]}],"min-error":[0.0078125],"time":28.302001953125,"type":"prune"},{"accuracy":[0.015625],"baseline":[0.015625],"branch":[["re",0.015625,1],["im",0.015625,1],["(*.f64 (exp.f64 re) (sin.f64 im))",0.015625,1],["(exp.f64 re)",0.015625,1],["(sin.f64 im)",0.015625,1]],"compiler":[[3,2],[3,2],[7,5],[4,3],[4,3],[18,10]],"count":[[2,1]],"inputs":[["(*.f64 (pow.f64 (exp.f64 re) 2/3) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))","(*.f64 (exp.f64 re) (sin.f64 im))"]],"link":["."],"name":["math.exp on complex, imaginary part"],"oracle":[0.02734375],"outputs":[["(*.f64 (pow.f64 (exp.f64 re) 2/3) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))"]],"time":12.998046875,"times":[["re",2.53515625],["im",2.533203125],["(*.f64 (exp.f64 re) (sin.f64 im))",3.0029296875],["(exp.f64 re)",1.669189453125],["(sin.f64 im)",2.614013671875]],"type":"regimes"},{"compiler":[[13,9]],"inputs":[["(*.f64 (pow.f64 (exp.f64 re) 2/3) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (exp.f64 re) 2/3) (*.f64 (sin.f64 im) (cbrt.f64 (exp.f64 re))))","(*.f64 (exp.f64 re) (sin.f64 im))"]],"stop":[["done",1]],"time":21.98486328125,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[13,9]],"remove-preprocessing":[[]],"time":9.472900390625,"type":"end"}]
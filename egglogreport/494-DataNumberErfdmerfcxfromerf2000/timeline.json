[{"compiler":[[9,6]],"method":["search"],"sampling":[[12,0.48390209302306175,0.08487798809073865,0.4312199188861996],[11,0.46829234808683395,0.10731699643656611,0.42439065547659993],[10,0.46829234808683395,0.16780475806444883,0.3639028938487172],[9,0.43707285821437836,0.21073155663907528,0.35219558514654636],[8,0.43707285821437836,0.32780464366078377,0.23512249812483788],[7,0.37463387846946716,0.40585336834192276,0.21951275318861008],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":25.02001953125,"type":"analyze"},{"outcomes":[["body",256,"invalid",40.3564453125,1103],["body",256,"valid",307.741455078125,8256]],"time":359.462158203125,"type":"sample"},{"compiler":[[8,5]],"inputs":[["0","1"],["(*.f64 x (exp.f64 (*.f64 y y)))","(*.f64 y (exp.f64 (*.f64 x x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 x (exp.f64 (*.f64 y y)))","(*.f64 y (exp.f64 (*.f64 x x)))"]],"symmetry":[[]],"time":80.02001953125,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(*.f64 x (exp.f64 (*.f64 y y)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (exp.f64 (*.f64 y y)))"]],"time":34.333984375,"type":"simplify"},{"compiler":[[8,5]],"time":0.264892578125,"type":"eval"},{"alts":[["(*.f64 x (exp.f64 (*.f64 y y)))","next",0.03668873993272954]],"compiler":[[8,5],[8,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.03668873993272954],"time":0.678955078125,"type":"prune"},{"compiler":[[17,5]],"locations":[["(*.f64 x (exp.f64 (*.f64 y y)))",0.0078125,true],["(exp.f64 (*.f64 y y))",0.026173592648988643,true]],"time":3.89892578125,"type":"localize"},{"count":[[2,36]],"series":[["(*.f64 x (exp.f64 (*.f64 y y)))","y","-inf",0.18603515625],["(*.f64 x (exp.f64 (*.f64 y y)))","y","inf",0.301025390625],["(*.f64 x (exp.f64 (*.f64 y y)))","y","0",0.48291015625],["(*.f64 x (exp.f64 (*.f64 y y)))","x","-inf",0.35302734375],["(*.f64 x (exp.f64 (*.f64 y y)))","x","inf",0.390869140625],["(*.f64 x (exp.f64 (*.f64 y y)))","x","0",0.608154296875],["(exp.f64 (*.f64 y y))","y","-inf",0.211181640625],["(exp.f64 (*.f64 y y))","y","inf",0.279052734375],["(exp.f64 (*.f64 y y))","y","0",0.64599609375]],"time":3.626220703125,"type":"series"},{"count":[[2,59]],"inputs":[["(exp.f64 (*.f64 y y))","(*.f64 x (exp.f64 (*.f64 y y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 y y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (exp.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 y y))) (pow.f64 (exp.f64 (*.f64 y y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (*.f64 y y)) 2/3) (cbrt.f64 (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (exp.f64 (*.f64 y y)))) (neg.f64 (pow.f64 (exp.f64 (*.f64 y y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 (*.f64 y y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (exp.f64 (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (exp.f64 (neg.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) 5))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 y) y)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (neg.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 y 4/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 y 2/3)) (pow.f64 y 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 y y) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 y) 5)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (neg.f64 (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (*.f64 y y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (/.f64 (*.f64 (*.f64 y y) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (/.f64 (*.f64 (*.f64 y y) 3) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 y y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (exp.f64 (*.f64 y y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (exp.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 y y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 y y))) (*.f64 (pow.f64 (exp.f64 (*.f64 y y)) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (exp.f64 (*.f64 y y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 y y)) 2/3) x) (cbrt.f64 (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (exp.f64 (*.f64 y y)))) (pow.f64 (*.f64 x (exp.f64 (*.f64 y y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (exp.f64 (*.f64 y y))) 2/3) (cbrt.f64 (*.f64 x (exp.f64 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 (*.f64 y y)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (exp.f64 (*.f64 y y)))) (pow.f64 (exp.f64 (*.f64 y y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (*.f64 y y)) 2/3) (*.f64 x (cbrt.f64 (exp.f64 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (exp.f64 (*.f64 y y)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (exp.f64 (*.f64 y y)))) (neg.f64 (pow.f64 (*.f64 x (exp.f64 (*.f64 y y))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (exp.f64 (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (exp.f64 (*.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (exp.f64 (*.f64 y y))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (exp.f64 (*.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (exp.f64 (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (exp.f64 (*.f64 y y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (exp.f64 (*.f64 y y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (exp.f64 (*.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (exp.f64 (*.f64 y y))) 3))))))"]],"rules":[["egg-rr",28],["egg-rr",31]],"time":40.639892578125,"type":"rewrite"},{"count":[[95,75]],"inputs":[["1","(+.f64 1 (pow.f64 y 2))","(+.f64 1 (+.f64 (pow.f64 y 2) (*.f64 1/2 (pow.f64 y 4))))","(+.f64 (*.f64 1/6 (pow.f64 y 6)) (+.f64 1 (+.f64 (pow.f64 y 2) (*.f64 1/2 (pow.f64 y 4)))))","(exp.f64 (pow.f64 y 2))","(exp.f64 (pow.f64 y 2))","(exp.f64 (pow.f64 y 2))","(exp.f64 (pow.f64 y 2))","(exp.f64 (pow.f64 y 2))","(exp.f64 (pow.f64 y 2))","(exp.f64 (pow.f64 y 2))","(exp.f64 (pow.f64 y 2))","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","x","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 (pow.f64 y 2) x) x))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 (pow.f64 y 2) x) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 6) x)) x)))","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (pow.f64 y 2))","(fma.f64 y y 1)","(+.f64 1 (+.f64 (pow.f64 y 2) (*.f64 1/2 (pow.f64 y 4))))","(+.f64 1 (fma.f64 (pow.f64 y 4) 1/2 (*.f64 y y)))","(+.f64 (*.f64 1/6 (pow.f64 y 6)) (+.f64 1 (+.f64 (pow.f64 y 2) (*.f64 1/2 (pow.f64 y 4)))))","(+.f64 (fma.f64 (pow.f64 y 6) 1/6 1) (fma.f64 (pow.f64 y 4) 1/2 (*.f64 y y)))","(exp.f64 (pow.f64 y 2))","(exp.f64 (*.f64 y y))","(exp.f64 (pow.f64 y 2))","(exp.f64 (*.f64 y y))","(exp.f64 (pow.f64 y 2))","(exp.f64 (*.f64 y y))","(exp.f64 (pow.f64 y 2))","(exp.f64 (*.f64 y y))","(exp.f64 (pow.f64 y 2))","(exp.f64 (*.f64 y y))","(exp.f64 (pow.f64 y 2))","(exp.f64 (*.f64 y y))","(exp.f64 (pow.f64 y 2))","(exp.f64 (*.f64 y y))","(exp.f64 (pow.f64 y 2))","(exp.f64 (*.f64 y y))","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","x","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 (pow.f64 y 2) x) x))","(*.f64 x (+.f64 1 (fma.f64 (pow.f64 y 4) 1/2 (*.f64 y y))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 (pow.f64 y 2) x) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 6) x)) x)))","(*.f64 x (+.f64 (fma.f64 (pow.f64 y 6) 1/6 1) (fma.f64 (pow.f64 y 4) 1/2 (*.f64 y y))))","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)"]],"time":144.9130859375,"type":"simplify"},{"compiler":[[754,323]],"time":9.557861328125,"type":"eval"},{"alts":[["(*.f64 x (pow.f64 (exp.f64 y) y))","next",0.016882531620653757],["(fma.f64 (*.f64 y y) x x)","fresh",0.6446882194206358]],"compiler":[[8,5],[8,4],[8,5],[8,4]],"count":[[76,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[75,2],"picked":[1,0]}],"min-error":[0.009070031620653759],"time":16.31005859375,"type":"prune"},{"compiler":[[16,5]],"locations":[["(*.f64 x (pow.f64 (exp.f64 y) y))",0.0078125,true],["(pow.f64 (exp.f64 y) y)",0.009070031620653759,true]],"time":4.27392578125,"type":"localize"},{"count":[[2,36]],"series":[["(*.f64 x (pow.f64 (exp.f64 y) y))","y","-inf",0.22705078125],["(*.f64 x (pow.f64 (exp.f64 y) y))","y","inf",0.2138671875],["(*.f64 x (pow.f64 (exp.f64 y) y))","y","0",0.198974609375],["(*.f64 x (pow.f64 (exp.f64 y) y))","x","-inf",0.222900390625],["(*.f64 x (pow.f64 (exp.f64 y) y))","x","inf",0.284912109375],["(*.f64 x (pow.f64 (exp.f64 y) y))","x","0",21.5029296875],["(pow.f64 (exp.f64 y) y)","y","-inf",0.196044921875],["(pow.f64 (exp.f64 y) y)","y","inf",0.2041015625],["(pow.f64 (exp.f64 y) y)","y","0",0.5009765625]],"time":23.68212890625,"type":"series"},{"count":[[2,57]],"inputs":[["(pow.f64 (exp.f64 y) y)","(*.f64 x (pow.f64 (exp.f64 y) y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 y y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (exp.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 y y))) (pow.f64 (exp.f64 (*.f64 y y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (*.f64 y y)) 2/3) (cbrt.f64 (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (exp.f64 (*.f64 y y)))) (neg.f64 (pow.f64 (exp.f64 (*.f64 y y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 (*.f64 y y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (exp.f64 (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (exp.f64 (neg.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) 5))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 y) y)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 y 2/3)) (pow.f64 y 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (neg.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 y y) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 y 4/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 y) 5)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (*.f64 y y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (/.f64 (*.f64 (*.f64 y y) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (/.f64 (*.f64 (*.f64 y y) 3) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 y y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (exp.f64 (*.f64 y y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (exp.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 y y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (exp.f64 (*.f64 y y)))) (pow.f64 (*.f64 x (exp.f64 (*.f64 y y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (exp.f64 (*.f64 y y))) 2/3) (cbrt.f64 (*.f64 x (exp.f64 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 y y))) (*.f64 (pow.f64 (exp.f64 (*.f64 y y)) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (exp.f64 (*.f64 y y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 y y)) 2/3) x) (cbrt.f64 (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (exp.f64 (*.f64 y y)))) (pow.f64 (exp.f64 (*.f64 y y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 (*.f64 y y)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (exp.f64 (*.f64 y y)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (*.f64 y y)) 2/3) (*.f64 x (cbrt.f64 (exp.f64 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (exp.f64 (*.f64 y y)))) (neg.f64 (pow.f64 (*.f64 x (exp.f64 (*.f64 y y))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (exp.f64 (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (exp.f64 (*.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (exp.f64 (*.f64 y y))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (exp.f64 (*.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (exp.f64 (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (exp.f64 (*.f64 y y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (exp.f64 (*.f64 y y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (exp.f64 (*.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (exp.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (exp.f64 (*.f64 y y))) 3))))))"]],"rules":[["egg-rr",28],["egg-rr",29]],"time":38.9599609375,"type":"rewrite"},{"count":[[93,73]],"inputs":[["1","(+.f64 1 (pow.f64 y 2))","(+.f64 1 (+.f64 (pow.f64 y 2) (*.f64 1/2 (pow.f64 y 4))))","(+.f64 (*.f64 1/6 (pow.f64 y 6)) (+.f64 1 (+.f64 (pow.f64 y 2) (*.f64 1/2 (pow.f64 y 4)))))","(exp.f64 (pow.f64 y 2))","(exp.f64 (pow.f64 y 2))","(exp.f64 (pow.f64 y 2))","(exp.f64 (pow.f64 y 2))","(exp.f64 (pow.f64 y 2))","(exp.f64 (pow.f64 y 2))","(exp.f64 (pow.f64 y 2))","(exp.f64 (pow.f64 y 2))","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","x","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 (pow.f64 y 2) x) x))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 (pow.f64 y 2) x) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 6) x)) x)))","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (pow.f64 y 2))","(fma.f64 y y 1)","(+.f64 1 (+.f64 (pow.f64 y 2) (*.f64 1/2 (pow.f64 y 4))))","(+.f64 1 (fma.f64 (pow.f64 y 4) 1/2 (*.f64 y y)))","(+.f64 (*.f64 1/6 (pow.f64 y 6)) (+.f64 1 (+.f64 (pow.f64 y 2) (*.f64 1/2 (pow.f64 y 4)))))","(+.f64 (fma.f64 (pow.f64 y 6) 1/6 1) (fma.f64 (pow.f64 y 4) 1/2 (*.f64 y y)))","(exp.f64 (pow.f64 y 2))","(exp.f64 (*.f64 y y))","(exp.f64 (pow.f64 y 2))","(exp.f64 (*.f64 y y))","(exp.f64 (pow.f64 y 2))","(exp.f64 (*.f64 y y))","(exp.f64 (pow.f64 y 2))","(exp.f64 (*.f64 y y))","(exp.f64 (pow.f64 y 2))","(exp.f64 (*.f64 y y))","(exp.f64 (pow.f64 y 2))","(exp.f64 (*.f64 y y))","(exp.f64 (pow.f64 y 2))","(exp.f64 (*.f64 y y))","(exp.f64 (pow.f64 y 2))","(exp.f64 (*.f64 y y))","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","x","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 (pow.f64 y 2) x) x))","(*.f64 x (+.f64 1 (fma.f64 (pow.f64 y 4) 1/2 (*.f64 y y))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 (pow.f64 y 2) x) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 6) x)) x)))","(*.f64 x (+.f64 (fma.f64 (pow.f64 y 6) 1/6 1) (fma.f64 (pow.f64 y 4) 1/2 (*.f64 y y))))","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)","(*.f64 (exp.f64 (pow.f64 y 2)) x)","(*.f64 (exp.f64 (*.f64 y y)) x)"]],"time":143.8720703125,"type":"simplify"},{"compiler":[[736,316]],"time":9.760986328125,"type":"eval"},{"alts":[["(*.f64 x (pow.f64 (exp.f64 y) y))","done",0.016882531620653757],["(fma.f64 (*.f64 y y) x x)","next",0.6446882194206358]],"compiler":[[8,5],[8,4],[8,4]],"count":[[75,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[73,0],"picked":[1,1]}],"min-error":[0.009070031620653759],"time":18.39501953125,"type":"prune"},{"compiler":[[13,4]],"locations":[["(fma.f64 (*.f64 y y) x x)",0.00390625,true]],"time":3.60498046875,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 (*.f64 y y) x x)","x","-inf",0.47900390625],["(fma.f64 (*.f64 y y) x x)","x","inf",0.4580078125],["(fma.f64 (*.f64 y y) x x)","x","0",0.298095703125],["(fma.f64 (*.f64 y y) x x)","y","-inf",0.20703125],["(fma.f64 (*.f64 y y) x x)","y","inf",0.4658203125],["(fma.f64 (*.f64 y y) x x)","y","0",0.383056640625]],"time":2.389892578125,"type":"series"},{"count":[[1,44]],"inputs":[["(fma.f64 (*.f64 y y) x x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (*.f64 y x) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (*.f64 y x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y (*.f64 y x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (neg.f64 (*.f64 y (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (fma.f64 y y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 y y 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y y 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (fma.f64 y y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x))) (pow.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 4)) (cbrt.f64 (fma.f64 y (*.f64 y x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3) (cbrt.f64 (fma.f64 y (*.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 x) (fma.f64 y y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (fma.f64 y y 1) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (fma.f64 y y 1))) (neg.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 y (*.f64 y x)) 2/3) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (*.f64 y (*.f64 y x))) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (*.f64 y (*.f64 y x))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (pow.f64 (*.f64 y (*.f64 y x)) 2/3) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (*.f64 y x)))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (fma.f64 y y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (fma.f64 y y 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (*.f64 y x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (*.f64 y x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 y (*.f64 y x) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (*.f64 y x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (fma.f64 y y 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (*.f64 y x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (*.f64 y x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (fma.f64 y y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (*.f64 y x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (*.f64 y (cbrt.f64 x))) (pow.f64 x 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (*.f64 y x))) (pow.f64 (*.f64 y (*.f64 y x)) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 2/3) (*.f64 (pow.f64 y 4/3) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 y x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (*.f64 y x)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (*.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 y y) x)))))"]],"rules":[["egg-rr",44]],"time":38.7109375,"type":"rewrite"},{"count":[[68,50]],"inputs":[["x","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(*.f64 (pow.f64 y 2) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(*.f64 (pow.f64 y 2) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(+.f64 (*.f64 (pow.f64 y 2) x) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 (+.f64 1 (pow.f64 y 2)) x)","(fma.f64 (*.f64 y y) x x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(fma.f64 (*.f64 y y) x x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(fma.f64 (*.f64 y y) x x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(fma.f64 (*.f64 y y) x x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 y 2)) 1) x))","(fma.f64 (*.f64 y y) x x)"]],"time":88.623046875,"type":"simplify"},{"compiler":[[519,189]],"time":6.52294921875,"type":"eval"},{"alts":[["(*.f64 x (pow.f64 (exp.f64 y) y))","done",0.016882531620653757],["(fma.f64 (*.f64 y y) x x)","done",0.6446882194206358]],"compiler":[[8,5],[8,4]],"count":[[52,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[50,0],"picked":[1,1]}],"min-error":[0.009070031620653759],"time":8.861083984375,"type":"prune"},{"accuracy":[0.016882531620653757],"baseline":[0.016882531620653757],"branch":[["x",0.016882531620653757,1],["y",0.016882531620653757,1],["(*.f64 x (exp.f64 (*.f64 y y)))",0.016882531620653757,1],["(exp.f64 (*.f64 y y))",0.016882531620653757,1],["(*.f64 y y)",0.016882531620653757,1],["(*.f64 y y)",0.016882531620653757,1]],"compiler":[[3,2],[3,2],[8,5],[6,4],[5,3],[5,3],[20,9]],"count":[[3,1]],"inputs":[["(*.f64 x (pow.f64 (exp.f64 y) y))","(fma.f64 (*.f64 y y) x x)","(*.f64 x (exp.f64 (*.f64 y y)))"]],"link":["."],"name":["Data.Number.Erf:$dmerfcx from erf-2.0.0.0"],"oracle":[0.6525007194206358],"outputs":[["(*.f64 x (pow.f64 (exp.f64 y) y))"]],"time":16.925048828125,"times":[["x",2.972900390625],["y",4.31201171875],["(*.f64 x (exp.f64 (*.f64 y y)))",2.781982421875],["(exp.f64 (*.f64 y y))",1.66796875],["(*.f64 y y)",2.009033203125],["(*.f64 y y)",2.18798828125]],"type":"regimes"},{"compiler":[[8,5]],"inputs":[["(*.f64 x (pow.f64 (exp.f64 y) y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (pow.f64 (exp.f64 y) y))","(*.f64 x (exp.f64 (*.f64 y y)))"]],"stop":[["done",1]],"time":34.802978515625,"type":"simplify"},{"time":0.009033203125,"type":"soundness"},{"compiler":[[8,5]],"remove-preprocessing":[[]],"time":8.7060546875,"type":"end"}]
[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.48390209302306175,0.29560954472981393,0.22048836224712431],[11,0.48390209302306175,0.3102436806075275,0.20585422636941075],[10,0.46829234808683395,0.3395119523629546,0.19219569955021143],[9,0.46829234808683395,0.36682900600135326,0.16487864591181278],[8,0.43707285821437836,0.42146311327815056,0.14146402850747108],[7,0.43707285821437836,0.46829234808683395,0.09463479369878769],[6,0.24975591897964478,0.6868287771940231,0.06341530382633209],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":67.69091796875,"type":"analyze"},{"outcomes":[["body",512,"invalid",114.504638671875,1025],["body",256,"invalid",88.155029296875,1474],["body",1024,"invalid",378.809814453125,2067],["body",1024,"valid",414.36328125,2089],["body",512,"valid",120.1513671875,1035],["body",2048,"valid",1.818115234375,4],["body",256,"valid",289.700927734375,5128]],"time":1420.801025390625,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))","(*.f64 (cosh.f64 y) (/.f64 (sin.f64 x) x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))","(*.f64 (cosh.f64 y) (/.f64 (sin.f64 x) x))","(*.f64 (sin.f64 x) (/.f64 (cosh.f64 y) x))"]],"symmetry":[[]],"time":58.37890625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))"]],"time":19.06201171875,"type":"simplify"},{"compiler":[[16,8]],"time":0.2880859375,"type":"eval"},{"alts":[["(*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))","fresh",0.16796875],["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))","next",0.1171875]],"compiler":[[9,6],[9,6],[9,6],[9,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.05859375],"time":1.195068359375,"type":"prune"},{"compiler":[[19,6]],"locations":[["(sin.f64 y)",0.0078125,true],["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))",0.01171875,true],["(/.f64 (sin.f64 y) y)",0.1171875,true]],"time":4.9189453125,"type":"localize"},{"count":[[3,32]],"series":[["(sin.f64 y)","y","-inf",0.14013671875],["(sin.f64 y)","y","inf",0.156005859375],["(sin.f64 y)","y","0",0.22998046875],["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))","y","-inf",1.8271484375],["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))","y","inf",0.659912109375],["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))","y","0",0.52587890625],["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))","x","-inf",0.946044921875],["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))","x","inf",1.3740234375],["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))","x","0",0.761962890625],["(/.f64 (sin.f64 y) y)","y","-inf",0.541015625],["(/.f64 (sin.f64 y) y)","y","inf",0.340087890625],["(/.f64 (sin.f64 y) y)","y","0",0.474853515625]],"time":8.14306640625,"type":"series"},{"count":[[3,173]],"inputs":[["(/.f64 (sin.f64 y) y)","(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))","(sin.f64 y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 y) y) (*.f64 (/.f64 (sin.f64 y) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (sin.f64 y) y) 0) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 y) y) (*.f64 0 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (sin.f64 y) y)) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (pow.f64 (/.f64 (sin.f64 y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (/.f64 (pow.f64 (sin.f64 y) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (/.f64 (sin.f64 y) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 y) 2/3) y) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (pow.f64 (cbrt.f64 (pow.f64 y 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (pow.f64 (sin.f64 y) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (sin.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cbrt.f64 (sin.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cbrt.f64 (neg.f64 (sin.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (sin.f64 y)) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 y) (cbrt.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 y) (neg.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) (*.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 0) (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) (*.f64 0 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))) (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cosh.f64 x) (cbrt.f64 y)) (/.f64 (sin.f64 y) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cosh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) (/.f64 (cosh.f64 x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cosh.f64 x)) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 2/3) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cosh.f64 x)) (/.f64 (*.f64 (pow.f64 (cosh.f64 x) 2/3) (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) (cosh.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cosh.f64 x) (cbrt.f64 (/.f64 (sin.f64 y) y))) (pow.f64 (/.f64 (sin.f64 y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 (cosh.f64 x))) y) (pow.f64 (cosh.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 (cosh.f64 x) 2/3) (sin.f64 y)) y) (cbrt.f64 (cosh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (*.f64 (cosh.f64 x) (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 (cosh.f64 x) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cosh.f64 x) 2/3) (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 (cosh.f64 x))) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cosh.f64 x) y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) (/.f64 1 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y))) (/.f64 1 (neg.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (cosh.f64 x)) (sin.f64 y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (neg.f64 (cosh.f64 x)) (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (neg.f64 (cosh.f64 x)) (sin.f64 y)) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y))) (neg.f64 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) 1) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y))) 1) (neg.f64 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 (*.f64 (pow.f64 (cosh.f64 x) 2/3) (sin.f64 y)) y)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (pow.f64 (cbrt.f64 (pow.f64 y 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (*.f64 y -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2))) (*.f64 y (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2))) (*.f64 y (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (*.f64 (neg.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2))) (*.f64 (neg.f64 y) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2))) (*.f64 (neg.f64 y) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (*.f64 (pow.f64 y 2/3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (*.f64 (pow.f64 y 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2))) (*.f64 (pow.f64 y 2/3) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2))) (*.f64 (pow.f64 y 2/3) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) -1) (neg.f64 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) (pow.f64 y -1/3)) (*.f64 2 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) (sin.f64 y)) (*.f64 (cbrt.f64 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) (neg.f64 (sin.f64 y))) (*.f64 (cbrt.f64 4) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) (/.f64 (sin.f64 y) (cbrt.f64 y))) (*.f64 (cbrt.f64 4) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (/.f64 (sin.f64 y) (cbrt.f64 y))) (*.f64 2 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (sin.f64 y)) (*.f64 -2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (neg.f64 (sin.f64 y))) (*.f64 -2 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 (sin.f64 y) (cbrt.f64 y))) (*.f64 -2 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) (sin.f64 y)) (*.f64 (sqrt.f64 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) (neg.f64 (sin.f64 y))) (*.f64 (sqrt.f64 2) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) (/.f64 (sin.f64 y) (cbrt.f64 y))) (*.f64 (sqrt.f64 2) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) 1) (*.f64 (+.f64 y y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y))) 1) (*.f64 (neg.f64 (+.f64 y y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)))) (neg.f64 (neg.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (cosh.f64 x)) (sin.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cosh.f64 x) (cbrt.f64 y)) (sin.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 2/3) (cbrt.f64 (*.f64 (cosh.f64 x) (sin.f64 y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) y) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2))) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) y) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (cosh.f64 x) (sin.f64 y))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (cosh.f64 x)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 (cosh.f64 x)) (sin.f64 y)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cosh.f64 x))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cosh.f64 x))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) (/.f64 (sin.f64 y) y)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) (/.f64 (sin.f64 y) y)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) (pow.f64 y 2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 (cosh.f64 x)) (sin.f64 y)) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 (cosh.f64 x)) (sin.f64 y)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (cbrt.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) y) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 (sin.f64 y) y)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) (/.f64 1 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (neg.f64 (cosh.f64 x)) (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 y) (neg.f64 y)) (cosh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) (*.f64 (sin.f64 y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) 0) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) (*.f64 0 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sin.f64 y)) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (neg.f64 (pow.f64 (sin.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 y)))))"]],"rules":[["egg-rr",21],["egg-rr",108],["egg-rr",44]],"time":32.77587890625,"type":"rewrite"},{"count":[[205,203]],"inputs":[["1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","(/.f64 (sin.f64 y) y)","(+.f64 (/.f64 (sin.f64 y) y) (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)))","(+.f64 (/.f64 (sin.f64 y) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)) (*.f64 1/24 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 4)) y))))","(+.f64 (/.f64 (sin.f64 y) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)) (+.f64 (*.f64 1/24 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 4)) y)) (*.f64 1/720 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 6)) y)))))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x))))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (+.f64 (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 4))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (+.f64 (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 4))) (+.f64 (*.f64 -1/10080 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 6))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x))))))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(fma.f64 -1/6 (*.f64 y y) 1)","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 1 (fma.f64 (pow.f64 y 4) 1/120 (*.f64 -1/6 (*.f64 y y))))","(+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","(+.f64 (fma.f64 -1/5040 (pow.f64 y 6) 1) (fma.f64 (pow.f64 y 4) 1/120 (*.f64 -1/6 (*.f64 y y))))","(/.f64 (sin.f64 y) y)","(+.f64 (/.f64 (sin.f64 y) y) (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (sin.f64 y) (*.f64 1/2 (*.f64 (sin.f64 y) (*.f64 x x)))) y)","(+.f64 (/.f64 (sin.f64 y) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)) (*.f64 1/24 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 4)) y))))","(+.f64 (/.f64 (sin.f64 y) y) (/.f64 (+.f64 (*.f64 1/24 (*.f64 (sin.f64 y) (pow.f64 x 4))) (*.f64 1/2 (*.f64 (sin.f64 y) (*.f64 x x)))) y))","(+.f64 (/.f64 (sin.f64 y) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)) (+.f64 (*.f64 1/24 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 4)) y)) (*.f64 1/720 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 6)) y)))))","(+.f64 (/.f64 (+.f64 (sin.f64 y) (*.f64 1/2 (*.f64 (sin.f64 y) (*.f64 x x)))) y) (/.f64 (+.f64 (*.f64 1/720 (*.f64 (sin.f64 y) (pow.f64 x 6))) (*.f64 1/24 (*.f64 (sin.f64 y) (pow.f64 x 4)))) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x))))","(fma.f64 -1/12 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (*.f64 y y)) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (+.f64 (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 4))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))))","(fma.f64 -1/12 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (*.f64 y y)) (fma.f64 1/240 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 y 4)) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (+.f64 (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 4))) (+.f64 (*.f64 -1/10080 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 6))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x))))))","(fma.f64 (*.f64 -1/12 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) (*.f64 y y) (fma.f64 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 y 4)) 1/240 (fma.f64 -1/10080 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 y 6)) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))))))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(fma.f64 -1/6 (pow.f64 y 3) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(fma.f64 (pow.f64 y 3) -1/6 (fma.f64 1/120 (pow.f64 y 5) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(fma.f64 (pow.f64 y 3) -1/6 (fma.f64 1/120 (pow.f64 y 5) (fma.f64 (pow.f64 y 7) -1/5040 y)))"]],"time":107.1240234375,"type":"simplify"},{"compiler":[[2924,1112]],"time":28.302001953125,"type":"eval"},{"alts":[["(*.f64 (cosh.f64 x) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","fresh",0.47251528328481873],["(*.f64 (cosh.f64 x) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 3) y))","fresh",0.7449953125901448],["(/.f64 (/.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))","fresh",0.8624892332843148],["(/.f64 (/.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) (cbrt.f64 2)) (cbrt.f64 4))","fresh",0.7712288574528624],["(*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))","next",0.16796875],["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))","done",0.1171875]],"compiler":[[12,9],[12,9],[16,9],[19,15],[9,6],[9,6],[12,9],[12,9],[16,9],[19,15],[9,6]],"count":[[205,6]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[203,4],"picked":[1,1]}],"min-error":[0.015625],"time":51.906005859375,"type":"prune"},{"compiler":[[19,6]],"locations":[["(sin.f64 y)",0.0078125,false],["(/.f64 (cosh.f64 x) y)",0.0078125,true],["(*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))",0.15625,true]],"time":4.94189453125,"type":"localize"},{"count":[[2,48]],"series":[["(/.f64 (cosh.f64 x) y)","y","-inf",0.333984375],["(/.f64 (cosh.f64 x) y)","y","inf",0.282958984375],["(/.f64 (cosh.f64 x) y)","y","0",0.3251953125],["(/.f64 (cosh.f64 x) y)","x","-inf",0.412109375],["(/.f64 (cosh.f64 x) y)","x","inf",0.370849609375],["(/.f64 (cosh.f64 x) y)","x","0",0.317138671875],["(*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))","x","-inf",0.177978515625],["(*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))","x","inf",0.18115234375],["(*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))","x","0",0.20703125],["(*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))","y","-inf",0.18310546875],["(*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))","y","inf",0.20703125],["(*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))","y","0",0.26806640625]],"time":3.43115234375,"type":"series"},{"count":[[2,161]],"inputs":[["(*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))","(/.f64 (cosh.f64 x) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 0) (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) (*.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))) (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) (*.f64 0 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (cosh.f64 x) y)) (*.f64 (pow.f64 (/.f64 (cosh.f64 x) y) 2/3) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (/.f64 (cosh.f64 x) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cosh.f64 x) (pow.f64 y 2/3)) (/.f64 (sin.f64 y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (cosh.f64 x) y) 2/3) (sin.f64 y)) (cbrt.f64 (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (cosh.f64 x)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 2/3) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cosh.f64 x) y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (cosh.f64 x) y) (cbrt.f64 (sin.f64 y))) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (cbrt.f64 (/.f64 (cosh.f64 x) y))) (pow.f64 (/.f64 (cosh.f64 x) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (cosh.f64 x)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (pow.f64 (sin.f64 y) 2/3) (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (cosh.f64 x) y) 2/3) (*.f64 (sin.f64 y) (cbrt.f64 (/.f64 (cosh.f64 x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 (sin.f64 y) (cosh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) (cosh.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2/3) (*.f64 (/.f64 (cosh.f64 x) y) (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) (/.f64 (cosh.f64 x) y)) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (neg.f64 (cosh.f64 x))) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (cosh.f64 x))) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (cosh.f64 x))) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (*.f64 2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (cosh.f64 x)) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (pow.f64 (cbrt.f64 (pow.f64 y 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 1) (*.f64 2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) -1) (*.f64 2 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (pow.f64 y -1/3)) (*.f64 2 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (cosh.f64 x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (neg.f64 (cosh.f64 x))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (cosh.f64 x)) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (cosh.f64 x)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) (cosh.f64 x)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 2/3) (cbrt.f64 (*.f64 (sin.f64 y) (cosh.f64 x)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 y) (cosh.f64 x))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) (neg.f64 (cosh.f64 x))) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 y) (cosh.f64 x)) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cosh.f64 x)) (*.f64 (pow.f64 (/.f64 (cosh.f64 x) y) 2/3) (sin.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (cosh.f64 x))) (*.f64 (pow.f64 (/.f64 (cosh.f64 x) y) 2/3) (sin.f64 y))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cosh.f64 x) (cbrt.f64 y)) (sin.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) (/.f64 (sin.f64 y) y)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) (/.f64 (sin.f64 y) y)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) (pow.f64 y 2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (cosh.f64 x))) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (cosh.f64 x))) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (cosh.f64 x)) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (cosh.f64 x)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (cosh.f64 x)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (cosh.f64 x)) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 y) (cosh.f64 x)) (cbrt.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 (sin.f64 y) y)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 1 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) y) (sin.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (/.f64 (sin.f64 y) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (cosh.f64 x))) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (cosh.f64 x) y)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 (cosh.f64 x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 y) (cosh.f64 x)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (cosh.f64 x) y) 0) (/.f64 (cosh.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (cosh.f64 x) y) (*.f64 (/.f64 (cosh.f64 x) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (cosh.f64 x) y)) (/.f64 (cosh.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (cosh.f64 x) y) (*.f64 0 (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (neg.f64 (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cosh.f64 x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (cosh.f64 x) y)) (pow.f64 (/.f64 (cosh.f64 x) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (cosh.f64 x) y) 2/3) (cbrt.f64 (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cosh.f64 x)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cosh.f64 x)) (/.f64 (pow.f64 (cosh.f64 x) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cosh.f64 x) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (cosh.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (/.f64 (cosh.f64 x) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cosh.f64 x) 2/3) y) (cbrt.f64 (cosh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cosh.f64 x) (pow.f64 y 2/3)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (neg.f64 (cosh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (/.f64 1 (*.f64 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (cosh.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cosh.f64 x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (cosh.f64 x) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) y) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (cosh.f64 x) 2/3) y)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) y) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) y) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (cosh.f64 x) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (pow.f64 (cbrt.f64 (pow.f64 y 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 1) (*.f64 -2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) -1) (*.f64 -2 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (pow.f64 y -1/3)) (*.f64 -2 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) -1) (*.f64 2 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (pow.f64 y -1/3)) (*.f64 2 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) 1) (*.f64 (cbrt.f64 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) -1) (*.f64 (cbrt.f64 4) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) (pow.f64 y -1/3)) (*.f64 (cbrt.f64 4) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) 1) (*.f64 (sqrt.f64 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) -1) (*.f64 (sqrt.f64 2) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) (pow.f64 y -1/3)) (*.f64 (sqrt.f64 2) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (*.f64 (neg.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2))) (*.f64 (neg.f64 y) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2))) (*.f64 (neg.f64 y) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) (*.f64 y (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) (*.f64 y (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (*.f64 (pow.f64 y 2/3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2))) (*.f64 (pow.f64 y 2/3) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (*.f64 (pow.f64 y 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2))) (*.f64 (pow.f64 y 2/3) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 1) (*.f64 2 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (neg.f64 (*.f64 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cosh.f64 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cosh.f64 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cosh.f64 x) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (*.f64 2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (cosh.f64 x) y)) (pow.f64 (cosh.f64 x) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (cosh.f64 x)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2))) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (cosh.f64 x) y) 2/3) (cbrt.f64 (cosh.f64 x))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (cosh.f64 x) y) 2/3) (cbrt.f64 (neg.f64 (cosh.f64 x)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cosh.f64 x) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cosh.f64 x)) (pow.f64 (/.f64 (cosh.f64 x) y) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (cosh.f64 x))) (pow.f64 (/.f64 (cosh.f64 x) y) 2/3)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cosh.f64 x) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) (/.f64 1 y)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) (/.f64 1 y)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (cosh.f64 x)) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cosh.f64 x) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) y) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) y) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (cosh.f64 x) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (/.f64 y 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (/.f64 (*.f64 2 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (*.f64 (*.f64 2 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (*.f64 (neg.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (*.f64 y -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (cosh.f64 x) (cbrt.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 1 y)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) y) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) y)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cosh.f64 x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) y) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 -1 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) y) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (cosh.f64 x) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (cosh.f64 x) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cosh.f64 x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (cosh.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (cosh.f64 x) y) 3))))))"]],"rules":[["egg-rr",91],["egg-rr",70]],"time":30.4169921875,"type":"rewrite"},{"count":[[209,187]],"inputs":[["(*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x))))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (+.f64 (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 4))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (+.f64 (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 4))) (+.f64 (*.f64 -1/10080 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 6))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x))))))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (sin.f64 y) y)","(+.f64 (/.f64 (sin.f64 y) y) (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)))","(+.f64 (/.f64 (sin.f64 y) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)) (*.f64 1/24 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 4)) y))))","(+.f64 (/.f64 (sin.f64 y) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)) (+.f64 (*.f64 1/24 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 4)) y)) (*.f64 1/720 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 6)) y)))))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/24 (/.f64 (pow.f64 x 4) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/720 (/.f64 (pow.f64 x 6) y)) (+.f64 (*.f64 1/24 (/.f64 (pow.f64 x 4) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x))))","(fma.f64 -1/12 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (*.f64 y y)) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (+.f64 (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 4))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))))","(fma.f64 -1/12 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (*.f64 y y)) (fma.f64 1/240 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 y 4)) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (+.f64 (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 4))) (+.f64 (*.f64 -1/10080 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 6))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x))))))","(fma.f64 -1/12 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (*.f64 y y)) (fma.f64 1/240 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 y 4)) (fma.f64 -1/10080 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 y 6)) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))))))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(/.f64 (sin.f64 y) y)","(+.f64 (/.f64 (sin.f64 y) y) (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 1/2 (*.f64 (sin.f64 y) (*.f64 x x))) (sin.f64 y)) y)","(+.f64 (/.f64 (sin.f64 y) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)) (*.f64 1/24 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 4)) y))))","(+.f64 (/.f64 (sin.f64 y) y) (/.f64 (+.f64 (*.f64 1/2 (*.f64 (sin.f64 y) (*.f64 x x))) (*.f64 1/24 (*.f64 (sin.f64 y) (pow.f64 x 4)))) y))","(+.f64 (/.f64 (sin.f64 y) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)) (+.f64 (*.f64 1/24 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 4)) y)) (*.f64 1/720 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 6)) y)))))","(+.f64 (/.f64 (+.f64 (*.f64 1/2 (*.f64 (sin.f64 y) (*.f64 x x))) (sin.f64 y)) y) (/.f64 (+.f64 (*.f64 1/720 (*.f64 (sin.f64 y) (pow.f64 x 6))) (*.f64 1/24 (*.f64 (sin.f64 y) (pow.f64 x 4)))) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(/.f64 (+.f64 1 (*.f64 1/2 (*.f64 x x))) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/24 (/.f64 (pow.f64 x 4) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (/.f64 (+.f64 1 (*.f64 1/2 (*.f64 x x))) y) (/.f64 (*.f64 1/24 (pow.f64 x 4)) y))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/720 (/.f64 (pow.f64 x 6) y)) (+.f64 (*.f64 1/24 (/.f64 (pow.f64 x 4) y)) (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))))","(+.f64 (/.f64 (+.f64 1 (*.f64 1/720 (pow.f64 x 6))) y) (/.f64 (+.f64 (*.f64 1/2 (*.f64 x x)) (*.f64 1/24 (pow.f64 x 4))) y))","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)","(*.f64 1/2 (/.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) y))","(/.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) y)"]],"time":150.31494140625,"type":"simplify"},{"compiler":[[3144,1241]],"time":29.35498046875,"type":"eval"},{"alts":[["(*.f64 (cosh.f64 x) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","next",0.47251528328481873],["(*.f64 (cosh.f64 x) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 3) y))","fresh",0.7449953125901448],["(/.f64 (/.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))","fresh",0.8624892332843148],["(/.f64 (/.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) (cbrt.f64 2)) (cbrt.f64 4))","fresh",0.7712288574528624],["(*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))","done",0.16796875],["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))","done",0.1171875]],"compiler":[[12,9],[12,9],[16,9],[19,15],[9,6],[9,6],[12,9],[12,9],[16,9],[19,15]],"count":[[221,6]],"kept":[{"done":[1,1],"fresh":[4,4],"new":[215,0],"picked":[1,1]}],"min-error":[0.015625],"time":54.196044921875,"type":"prune"},{"compiler":[[35,12]],"locations":[["(*.f64 (cosh.f64 x) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))",0.01171875,true],["(cbrt.f64 (/.f64 (sin.f64 y) y))",0.06640625,true],["(/.f64 (sin.f64 y) y)",0.1171875,false],["(pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)",0.44708647467416657,true]],"time":7.736083984375,"type":"localize"},{"count":[[3,32]],"series":[["(*.f64 (cosh.f64 x) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","y","-inf",3.552978515625],["(*.f64 (cosh.f64 x) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","y","inf",0.44580078125],["(*.f64 (cosh.f64 x) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","y","0",0.282958984375],["(*.f64 (cosh.f64 x) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","x","-inf",0.691162109375],["(*.f64 (cosh.f64 x) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","x","inf",0.463134765625],["(*.f64 (cosh.f64 x) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","x","0",0.262939453125],["(cbrt.f64 (/.f64 (sin.f64 y) y))","y","-inf",0.328125],["(cbrt.f64 (/.f64 (sin.f64 y) y))","y","inf",0.289794921875],["(cbrt.f64 (/.f64 (sin.f64 y) y))","y","0",0.18896484375],["(pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)","y","-inf",0.96484375],["(pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)","y","inf",0.803955078125],["(pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)","y","0",0.4169921875]],"time":8.868896484375,"type":"series"},{"count":[[3,212]],"inputs":[["(pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)","(cbrt.f64 (/.f64 (sin.f64 y) y))","(*.f64 (cosh.f64 x) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 y) y) (*.f64 (/.f64 (sin.f64 y) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (sin.f64 y) y) 0) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 y) y) (*.f64 0 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (sin.f64 y) y)) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (/.f64 (pow.f64 (sin.f64 y) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (pow.f64 (/.f64 (sin.f64 y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (/.f64 (sin.f64 y) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 y) 2/3) y) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 4) 2) (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 4) 2)) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (pow.f64 (cbrt.f64 (pow.f64 y 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cbrt.f64 (neg.f64 (sin.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (pow.f64 (sin.f64 y) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (sin.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) 1) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y)) (cbrt.f64 (/.f64 (sin.f64 y) y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 (/.f64 (sin.f64 y) y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) 1) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (sin.f64 y)) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y)) (cbrt.f64 (sin.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y)) (cbrt.f64 (neg.f64 (sin.f64 y)))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 y) (cbrt.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 y) y) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 y) y) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 y) (neg.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 0) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (*.f64 0 (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (/.f64 (sin.f64 y) y))) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) (cbrt.f64 (/.f64 (pow.f64 (sin.f64 y) 2/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (+.f64 2 1/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (neg.f64 (pow.f64 y -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (/.f64 (sin.f64 y) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) (neg.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y -1/3)) (cbrt.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (cbrt.f64 (cbrt.f64 (sin.f64 y)))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) 1) (*.f64 (cbrt.f64 (neg.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) 1) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (sin.f64 y) (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 y) y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (/.f64 (sin.f64 y) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (sin.f64 y) y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) (*.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 0) (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) (*.f64 0 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))) (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 2/3) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cosh.f64 x) (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (*.f64 (cosh.f64 x) (pow.f64 (/.f64 (sin.f64 y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cosh.f64 x)) (/.f64 (*.f64 (pow.f64 (cosh.f64 x) 2/3) (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 (cosh.f64 x) 2/3) (sin.f64 y)) y) (cbrt.f64 (cosh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cosh.f64 x) (sin.f64 y))) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) (cosh.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cosh.f64 x) (cbrt.f64 (/.f64 (sin.f64 y) y))) (pow.f64 (/.f64 (sin.f64 y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 (cosh.f64 x))) y) (pow.f64 (cosh.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (*.f64 (cosh.f64 x) (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cosh.f64 x) y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 (cosh.f64 x) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cosh.f64 x) 2/3) (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 (cosh.f64 x))) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 1 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (/.f64 1 (neg.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) y) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (neg.f64 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) y) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) 1) (neg.f64 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 1) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 (*.f64 (pow.f64 (cosh.f64 x) 2/3) (sin.f64 y)) y)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 (sin.f64 y) y)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) y) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) y) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) y) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (/.f64 (sin.f64 y) (pow.f64 y 2/3))) (*.f64 2 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (/.f64 (sin.f64 y) (cbrt.f64 y))) (*.f64 2 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) (sin.f64 y)) (*.f64 (sqrt.f64 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) (/.f64 (sin.f64 y) (pow.f64 y 2/3))) (*.f64 (sqrt.f64 2) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) (/.f64 (sin.f64 y) (cbrt.f64 y))) (*.f64 (sqrt.f64 2) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) (neg.f64 (sin.f64 y))) (*.f64 (sqrt.f64 2) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) (sin.f64 y)) (*.f64 (cbrt.f64 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) (/.f64 (sin.f64 y) (pow.f64 y 2/3))) (*.f64 (cbrt.f64 4) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) (/.f64 (sin.f64 y) (cbrt.f64 y))) (*.f64 (cbrt.f64 4) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) (neg.f64 (sin.f64 y))) (*.f64 (cbrt.f64 4) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (sin.f64 y)) (*.f64 -2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 (sin.f64 y) (pow.f64 y 2/3))) (*.f64 -2 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 (sin.f64 y) (cbrt.f64 y))) (*.f64 -2 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (neg.f64 (sin.f64 y))) (*.f64 -2 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) 1) (*.f64 (neg.f64 (+.f64 y y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 1) (*.f64 (+.f64 y y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2))) (*.f64 y (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2))) (*.f64 y (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (*.f64 y -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2))) (*.f64 (pow.f64 y 2/3) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2))) (*.f64 (pow.f64 y 2/3) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (*.f64 (pow.f64 y 2/3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (*.f64 (pow.f64 y 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2))) (*.f64 (neg.f64 y) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2))) (*.f64 (neg.f64 y) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (*.f64 (neg.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2))) (*.f64 (cbrt.f64 y) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2))) (*.f64 (cbrt.f64 y) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (*.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (*.f64 (cbrt.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) y)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))) (neg.f64 (neg.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cosh.f64 x) (sin.f64 y))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cosh.f64 x) (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (cbrt.f64 (neg.f64 (sin.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cosh.f64 x) (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (cbrt.f64 (sin.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) (pow.f64 y 2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cosh.f64 x) (cbrt.f64 (/.f64 (sin.f64 y) y))) (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cosh.f64 x) (cbrt.f64 (/.f64 (sin.f64 y) y))) (pow.f64 (sin.f64 y) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) y) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) y) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2))) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (pow.f64 y -1/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (*.f64 (cosh.f64 x) (pow.f64 (/.f64 (sin.f64 y) y) 2/3))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (cosh.f64 x) (pow.f64 (/.f64 (sin.f64 y) y) 2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) y) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (cosh.f64 x) (sin.f64 y))) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (cosh.f64 x)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) (cosh.f64 x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y)) (*.f64 (cosh.f64 x) (cbrt.f64 (/.f64 (sin.f64 y) y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) (*.f64 (cosh.f64 x) (cbrt.f64 (/.f64 (sin.f64 y) y)))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) (/.f64 (sin.f64 y) y)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) (/.f64 (sin.f64 y) y)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) y) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) y) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) y) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 (cosh.f64 x) (sin.f64 y))) -1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 (cosh.f64 x) (sin.f64 y))) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 (cosh.f64 x) (sin.f64 y))) (cbrt.f64 (neg.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 (cosh.f64 x) (sin.f64 y))) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (*.f64 (cosh.f64 x) (sin.f64 y)))) y)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 y) (neg.f64 y)) (cosh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 3))))))"]],"rules":[["egg-rr",116],["egg-rr",34],["egg-rr",62]],"time":35.1689453125,"type":"rewrite"},{"count":[[244,241]],"inputs":[["1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","1","(+.f64 1 (*.f64 -1/18 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/3240 (pow.f64 y 4)) (*.f64 -1/18 (pow.f64 y 2))))","(+.f64 1 (+.f64 (*.f64 -1/3240 (pow.f64 y 4)) (+.f64 (*.f64 -53/1224720 (pow.f64 y 6)) (*.f64 -1/18 (pow.f64 y 2)))))","(/.f64 (sin.f64 y) y)","(+.f64 (/.f64 (sin.f64 y) y) (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)))","(+.f64 (/.f64 (sin.f64 y) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)) (*.f64 1/24 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 4)) y))))","(+.f64 (/.f64 (sin.f64 y) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)) (+.f64 (*.f64 1/24 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 4)) y)) (*.f64 1/720 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 6)) y)))))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x))))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (+.f64 (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 4))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (+.f64 (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 4))) (+.f64 (*.f64 -1/10080 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 6))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x))))))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(fma.f64 (*.f64 y y) -1/6 1)","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 (fma.f64 (*.f64 y y) -1/6 1) (*.f64 1/120 (pow.f64 y 4)))","(+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","(+.f64 (fma.f64 (pow.f64 y 6) -1/5040 1) (fma.f64 -1/6 (*.f64 y y) (*.f64 1/120 (pow.f64 y 4))))","1","(+.f64 1 (*.f64 -1/18 (pow.f64 y 2)))","(fma.f64 -1/18 (*.f64 y y) 1)","(+.f64 1 (+.f64 (*.f64 -1/3240 (pow.f64 y 4)) (*.f64 -1/18 (pow.f64 y 2))))","(+.f64 (fma.f64 -1/18 (*.f64 y y) 1) (*.f64 -1/3240 (pow.f64 y 4)))","(+.f64 1 (+.f64 (*.f64 -1/3240 (pow.f64 y 4)) (+.f64 (*.f64 -53/1224720 (pow.f64 y 6)) (*.f64 -1/18 (pow.f64 y 2)))))","(+.f64 (fma.f64 (pow.f64 y 4) -1/3240 (*.f64 -53/1224720 (pow.f64 y 6))) (fma.f64 -1/18 (*.f64 y y) 1))","(/.f64 (sin.f64 y) y)","(+.f64 (/.f64 (sin.f64 y) y) (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (sin.f64 y) (*.f64 1/2 (*.f64 (sin.f64 y) (*.f64 x x)))) y)","(+.f64 (/.f64 (sin.f64 y) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)) (*.f64 1/24 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 4)) y))))","(+.f64 (/.f64 (sin.f64 y) y) (/.f64 (+.f64 (*.f64 1/24 (*.f64 (sin.f64 y) (pow.f64 x 4))) (*.f64 1/2 (*.f64 (sin.f64 y) (*.f64 x x)))) y))","(+.f64 (/.f64 (sin.f64 y) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)) (+.f64 (*.f64 1/24 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 4)) y)) (*.f64 1/720 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 6)) y)))))","(+.f64 (/.f64 (+.f64 (sin.f64 y) (*.f64 1/2 (*.f64 (sin.f64 y) (*.f64 x x)))) y) (/.f64 (+.f64 (*.f64 1/720 (*.f64 (sin.f64 y) (pow.f64 x 6))) (*.f64 1/24 (*.f64 (sin.f64 y) (pow.f64 x 4)))) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x))))","(fma.f64 -1/12 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (*.f64 y y)) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (+.f64 (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 4))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))))","(fma.f64 -1/12 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (*.f64 y y)) (fma.f64 1/240 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 y 4)) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (+.f64 (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 4))) (+.f64 (*.f64 -1/10080 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 6))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x))))))","(fma.f64 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (*.f64 y y)) -1/12 (fma.f64 (*.f64 1/240 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) (pow.f64 y 4) (fma.f64 -1/10080 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 y 6)) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))))))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)"]],"time":107.886962890625,"type":"simplify"},{"compiler":[[4459,1852]],"time":42.132080078125,"type":"eval"},{"alts":[["(*.f64 (cosh.f64 x) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","done",0.47251528328481873],["(*.f64 (cosh.f64 x) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 3) y))","next",0.7449953125901448],["(*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))","done",0.16796875],["(*.f64 (cosh.f64 x) (/.f64 (*.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 4) 2)) (cbrt.f64 (cbrt.f64 y))))","fresh",0.8892447107306348],["(/.f64 (/.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) (cbrt.f64 2)) (cbrt.f64 4))","fresh",0.7712288574528624],["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))","done",0.1171875]],"compiler":[[12,9],[12,9],[9,6],[24,18],[19,15],[9,6],[12,9],[24,18],[19,15]],"count":[[297,6]],"kept":[{"done":[2,2],"fresh":[3,2],"new":[291,1],"picked":[1,1]}],"min-error":[0.015625],"time":89.0361328125,"type":"prune"},{"compiler":[[34,15]],"locations":[["(*.f64 (cosh.f64 x) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 3) y))",0.01171875,true],["(cbrt.f64 (sin.f64 y))",0.09375,true],["(/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 3) y)",0.1171875,true],["(pow.f64 (cbrt.f64 (sin.f64 y)) 3)",0.7029076660635145,true]],"time":8.324951171875,"type":"localize"},{"count":[[4,52]],"series":[["(*.f64 (cosh.f64 x) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 3) y))","y","-inf",0.174072265625],["(*.f64 (cosh.f64 x) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 3) y))","y","inf",0.173095703125],["(*.f64 (cosh.f64 x) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 3) y))","y","0",0.212158203125],["(*.f64 (cosh.f64 x) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 3) y))","x","-inf",0.193115234375],["(*.f64 (cosh.f64 x) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 3) y))","x","inf",0.179931640625],["(*.f64 (cosh.f64 x) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 3) y))","x","0",0.218994140625],["(cbrt.f64 (sin.f64 y))","y","-inf",0.430908203125],["(cbrt.f64 (sin.f64 y))","y","inf",0.1630859375],["(cbrt.f64 (sin.f64 y))","y","0",0.26318359375],["(/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 3) y)","y","-inf",0.364013671875],["(/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 3) y)","y","inf",0.155029296875],["(/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 3) y)","y","0",0.18798828125],["(pow.f64 (cbrt.f64 (sin.f64 y)) 3)","y","-inf",1.322998046875],["(pow.f64 (cbrt.f64 (sin.f64 y)) 3)","y","inf",1.346923828125],["(pow.f64 (cbrt.f64 (sin.f64 y)) 3)","y","0",0.6669921875]],"time":6.285888671875,"type":"series"},{"count":[[4,214]],"inputs":[["(pow.f64 (cbrt.f64 (sin.f64 y)) 3)","(/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 3) y)","(cbrt.f64 (sin.f64 y))","(*.f64 (cosh.f64 x) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 3) y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) 0) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) (*.f64 (sin.f64 y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sin.f64 y)) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) (*.f64 0 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (sin.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2/3)) (pow.f64 (cbrt.f64 (sin.f64 y)) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) 4) 2) (cbrt.f64 (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (sin.f64 y) 2/3)) (cbrt.f64 (neg.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (neg.f64 (pow.f64 (sin.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 y)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (sin.f64 y) y) 0) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 y) y) (*.f64 (/.f64 (sin.f64 y) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (sin.f64 y) y)) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 y) y) (*.f64 0 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (pow.f64 (/.f64 (sin.f64 y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) 2/3) (/.f64 (cbrt.f64 (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y)) (cbrt.f64 (/.f64 (sin.f64 y) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (/.f64 (pow.f64 (sin.f64 y) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (/.f64 (sin.f64 y) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (sin.f64 y)) y) (pow.f64 (sin.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 y) 2/3) y) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) (*.f64 y y))) (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (pow.f64 (cbrt.f64 (pow.f64 y 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cbrt.f64 (neg.f64 (sin.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cbrt.f64 (sin.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (pow.f64 (sin.f64 y) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (sin.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y)) (cbrt.f64 (sin.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 (/.f64 (sin.f64 y) (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (sin.f64 y)) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 y) (cbrt.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 y) (neg.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (sin.f64 y)) 0) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (cbrt.f64 (sin.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (sin.f64 y))) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (sin.f64 y)) (*.f64 0 (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) (cbrt.f64 (pow.f64 (sin.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2/3)) (cbrt.f64 (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) (+.f64 2 1/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) 4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (sin.f64 y)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (sin.f64 y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 0) (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) (*.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))) (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) (*.f64 0 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 2/3) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cosh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cosh.f64 x) (cbrt.f64 y)) (/.f64 (sin.f64 y) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 (cosh.f64 x))) y) (pow.f64 (cosh.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cosh.f64 x) 2/3) (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 (cosh.f64 x))) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cosh.f64 x)) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) (/.f64 (cosh.f64 x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cosh.f64 x)) (/.f64 (*.f64 (pow.f64 (cosh.f64 x) 2/3) (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) (cosh.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cosh.f64 x) (cbrt.f64 (/.f64 (sin.f64 y) y))) (pow.f64 (/.f64 (sin.f64 y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (neg.f64 (cosh.f64 x)) (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cosh.f64 x) y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (neg.f64 (cosh.f64 x)) (sin.f64 y)) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 (cosh.f64 x) 2/3) (sin.f64 y)) y) (cbrt.f64 (cosh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (*.f64 (cosh.f64 x) (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 (cosh.f64 x) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y))) (/.f64 1 (neg.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (cosh.f64 x)) (sin.f64 y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) (/.f64 1 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y))) (neg.f64 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) y) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) y) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2))) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) 1) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y))) 1) (neg.f64 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 (*.f64 (pow.f64 (cosh.f64 x) 2/3) (sin.f64 y)) y)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 (sin.f64 y) y)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) (/.f64 (sin.f64 y) y)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (pow.f64 (cbrt.f64 (pow.f64 y 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2))) (*.f64 y (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (*.f64 y -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2))) (*.f64 y (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2))) (*.f64 (neg.f64 y) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (*.f64 (neg.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2))) (*.f64 (neg.f64 y) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2))) (*.f64 (pow.f64 y 2/3) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (*.f64 (pow.f64 y 2/3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (*.f64 (pow.f64 y 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2))) (*.f64 (pow.f64 y 2/3) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) -1) (neg.f64 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) (pow.f64 y -1/3)) (*.f64 2 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) (sin.f64 y)) (*.f64 (sqrt.f64 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) (/.f64 (sin.f64 y) (cbrt.f64 y))) (*.f64 (sqrt.f64 2) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) (neg.f64 (sin.f64 y))) (*.f64 (sqrt.f64 2) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (sin.f64 y)) (*.f64 -2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 (sin.f64 y) (cbrt.f64 y))) (*.f64 -2 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (neg.f64 (sin.f64 y))) (*.f64 -2 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) (sin.f64 y)) (*.f64 (cbrt.f64 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) (/.f64 (sin.f64 y) (cbrt.f64 y))) (*.f64 (cbrt.f64 4) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (cbrt.f64 2)) (neg.f64 (sin.f64 y))) (*.f64 (cbrt.f64 4) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (/.f64 (sin.f64 y) (cbrt.f64 y))) (*.f64 2 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) 1) (*.f64 (+.f64 y y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y))) 1) (*.f64 (neg.f64 (+.f64 y y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)))) (neg.f64 (neg.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (cosh.f64 x)) (sin.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 2/3) (cbrt.f64 (*.f64 (cosh.f64 x) (sin.f64 y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) y) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cosh.f64 x) (cbrt.f64 y)) (sin.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 (cosh.f64 x)) (sin.f64 y)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cosh.f64 x))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cosh.f64 x))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (cosh.f64 x) (sin.f64 y))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) (/.f64 1 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sqrt.f64 2)) (/.f64 (sin.f64 y) y)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (cosh.f64 x)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) (pow.f64 y 2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 (cosh.f64 x)) (sin.f64 y)) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 (cosh.f64 x)) (sin.f64 y)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (cbrt.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (neg.f64 (cosh.f64 x)) (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 y) (neg.f64 y)) (cosh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)) 3))))))"]],"rules":[["egg-rr",110],["egg-rr",22],["egg-rr",52],["egg-rr",30]],"time":36.4111328125,"type":"rewrite"},{"count":[[266,238]],"inputs":[["(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","(/.f64 (sin.f64 y) y)","(/.f64 (sin.f64 y) y)","(/.f64 (sin.f64 y) y)","(/.f64 (sin.f64 y) y)","(/.f64 (sin.f64 y) y)","(/.f64 (sin.f64 y) y)","(/.f64 (sin.f64 y) y)","(/.f64 (sin.f64 y) y)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(pow.f64 (sin.f64 y) 1/3)","(/.f64 (sin.f64 y) y)","(+.f64 (/.f64 (sin.f64 y) y) (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)))","(+.f64 (/.f64 (sin.f64 y) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)) (*.f64 1/24 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 4)) y))))","(+.f64 (/.f64 (sin.f64 y) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)) (+.f64 (*.f64 1/24 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 4)) y)) (*.f64 1/720 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 6)) y)))))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x))))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (+.f64 (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 4))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (+.f64 (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 4))) (+.f64 (*.f64 -1/10080 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 6))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x))))))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","(*.f64 (pow.f64 1 1/3) (sin.f64 y))","(sin.f64 y)","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(fma.f64 (*.f64 y y) -1/6 1)","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 (fma.f64 (*.f64 y y) -1/6 1) (*.f64 1/120 (pow.f64 y 4)))","(+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","(+.f64 (fma.f64 (pow.f64 y 6) -1/5040 1) (fma.f64 -1/6 (*.f64 y y) (*.f64 1/120 (pow.f64 y 4))))","(/.f64 (sin.f64 y) y)","(/.f64 (sin.f64 y) y)","(/.f64 (sin.f64 y) y)","(/.f64 (sin.f64 y) y)","(/.f64 (sin.f64 y) y)","(/.f64 (sin.f64 y) y)","(/.f64 (sin.f64 y) y)","(/.f64 (sin.f64 y) y)","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(pow.f64 (sin.f64 y) 1/3)","(cbrt.f64 (sin.f64 y))","(/.f64 (sin.f64 y) y)","(+.f64 (/.f64 (sin.f64 y) y) (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)))","(/.f64 (+.f64 (*.f64 1/2 (*.f64 (sin.f64 y) (*.f64 x x))) (sin.f64 y)) y)","(+.f64 (/.f64 (sin.f64 y) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)) (*.f64 1/24 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 4)) y))))","(+.f64 (/.f64 (sin.f64 y) y) (/.f64 (+.f64 (*.f64 1/2 (*.f64 (sin.f64 y) (*.f64 x x))) (*.f64 1/24 (*.f64 (sin.f64 y) (pow.f64 x 4)))) y))","(+.f64 (/.f64 (sin.f64 y) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 2)) y)) (+.f64 (*.f64 1/24 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 4)) y)) (*.f64 1/720 (/.f64 (*.f64 (sin.f64 y) (pow.f64 x 6)) y)))))","(+.f64 (/.f64 (+.f64 (*.f64 1/2 (*.f64 (sin.f64 y) (*.f64 x x))) (sin.f64 y)) y) (/.f64 (+.f64 (*.f64 1/720 (*.f64 (sin.f64 y) (pow.f64 x 6))) (*.f64 1/24 (*.f64 (sin.f64 y) (pow.f64 x 4)))) y))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x))))","(fma.f64 -1/12 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (*.f64 y y)) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (+.f64 (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 4))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))))","(fma.f64 -1/12 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (*.f64 y y)) (fma.f64 1/240 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 y 4)) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))","(+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 2))) (+.f64 (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 4))) (+.f64 (*.f64 -1/10080 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (pow.f64 y 6))) (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x))))))","(fma.f64 -1/12 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (*.f64 y y)) (fma.f64 1/240 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 y 4)) (fma.f64 -1/10080 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 y 6)) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))))))","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)","(*.f64 1/2 (/.f64 (*.f64 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)) (sin.f64 y)) y))","(/.f64 (*.f64 1/2 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (sin.f64 y))) y)"]],"time":158.663818359375,"type":"simplify"},{"compiler":[[3428,1322]],"time":31.68798828125,"type":"eval"},{"alts":[["(*.f64 (cosh.f64 x) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","done",0.47251528328481873],["(*.f64 (cosh.f64 x) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 3) y))","done",0.7449953125901448],["(*.f64 (cosh.f64 x) (/.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) 4) 2) (cbrt.f64 (cbrt.f64 (sin.f64 y)))) y))","fresh",1.4224625414540453],["(/.f64 (/.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) (cbrt.f64 2)) (cbrt.f64 4))","fresh",0.7712288574528624],["(*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))","done",0.16796875],["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))","done",0.1171875]],"compiler":[[12,9],[12,9],[20,13],[19,15],[9,6],[9,6]],"count":[[244,6]],"kept":[{"done":[3,3],"fresh":[2,1],"new":[238,1],"picked":[1,1]}],"min-error":[0.00390625],"time":69.189208984375,"type":"prune"},{"accuracy":[0.1171875],"baseline":[0.1171875],"branch":[["x",0.1171875,1],["y",0.1171875,1],["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))",0.1171875,1],["(cosh.f64 x)",0.1171875,1],["(/.f64 (sin.f64 y) y)",0.1171875,1]],"compiler":[[3,2],[3,2],[9,6],[4,3],[6,4],[107,51]],"count":[[8,1]],"inputs":[["(*.f64 (cosh.f64 x) (/.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) 4) 2) (cbrt.f64 (cbrt.f64 (sin.f64 y)))) y))","(*.f64 (cosh.f64 x) (/.f64 (*.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 4) 2)) (cbrt.f64 (cbrt.f64 y))))","(*.f64 (cosh.f64 x) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","(*.f64 (cosh.f64 x) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 3) y))","(/.f64 (/.f64 (/.f64 (*.f64 (cosh.f64 x) (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))","(/.f64 (/.f64 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (sin.f64 y)) y) (cbrt.f64 2)) (cbrt.f64 4))","(*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))","(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))"]],"link":["."],"name":["Linear.Quaternion:$csinh from linear-1.19.1.3"],"oracle":[1.8966032662327008],"outputs":[["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))"]],"time":18.560791015625,"times":[["x",3.7529296875],["y",3.908935546875],["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))",3.526123046875],["(cosh.f64 x)",1.67919921875],["(/.f64 (sin.f64 y) y)",3.6669921875]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y))"]],"stop":[["fuel",1]],"time":19.44921875,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.97705078125,"type":"end"}]
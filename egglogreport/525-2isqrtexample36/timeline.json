[{"compiler":[[13,11]],"method":["search"],"sampling":[[2,0.499755859375,0.0,0.500244140625],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":0.259033203125,"type":"analyze"},{"outcomes":[["body",1024,"valid",287.891357421875,2318],["body",512,"valid",89.143798828125,1033],["body",256,"valid",225.843994140625,4905]],"time":610.992919921875,"type":"sample"},{"compiler":[[12,10]],"inputs":[["0"],["(-.f64 (/.f64 1 (sqrt.f64 x)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (/.f64 1 (sqrt.f64 x)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","(-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))"]],"symmetry":[[]],"time":57.22509765625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (/.f64 1 (sqrt.f64 x)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 1 (sqrt.f64 x)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","(-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))"]],"time":22.925048828125,"type":"simplify"},{"compiler":[[21,17]],"time":0.498046875,"type":"eval"},{"alts":[["(-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","fresh",28.862387654505415],["(-.f64 (/.f64 1 (sqrt.f64 x)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","next",19.043520886594113]],"compiler":[[10,8],[12,10],[10,8],[12,10]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[18.740776026747326],"time":1.4619140625,"type":"prune"},{"compiler":[[33,23]],"locations":[["(sqrt.f64 (+.f64 x 1))",0.00390625,true],["(/.f64 1 (sqrt.f64 (+.f64 x 1)))",0.11328125,true],["(/.f64 1 (sqrt.f64 x))",0.23046875,true],["(-.f64 (/.f64 1 (sqrt.f64 x)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))",2.051618840490516,true]],"time":8.408935546875,"type":"localize"},{"count":[[4,8]],"series":[["(sqrt.f64 (+.f64 x 1))","x","-inf",0.348876953125],["(sqrt.f64 (+.f64 x 1))","x","inf",0.44384765625],["(sqrt.f64 (+.f64 x 1))","x","0",0.232177734375],["(/.f64 1 (sqrt.f64 (+.f64 x 1)))","x","-inf",0.35986328125],["(/.f64 1 (sqrt.f64 (+.f64 x 1)))","x","inf",0.307861328125],["(/.f64 1 (sqrt.f64 (+.f64 x 1)))","x","0",0.218994140625],["(/.f64 1 (sqrt.f64 x))","x","-inf",0.424072265625],["(/.f64 1 (sqrt.f64 x))","x","inf",0.279052734375],["(/.f64 1 (sqrt.f64 x))","x","0",0.2421875],["(-.f64 (/.f64 1 (sqrt.f64 x)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","x","-inf",1.075927734375],["(-.f64 (/.f64 1 (sqrt.f64 x)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","x","inf",1.324951171875],["(-.f64 (/.f64 1 (sqrt.f64 x)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","x","0",0.623046875]],"time":6.05908203125,"type":"series"},{"count":[[4,294]],"inputs":[["(-.f64 (/.f64 1 (sqrt.f64 x)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","(/.f64 1 (sqrt.f64 x))","(/.f64 1 (sqrt.f64 (+.f64 x 1)))","(sqrt.f64 (+.f64 x 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) 1/2) (*.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) 0) (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) (*.f64 1/2 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 0 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (fma.f64 x x x))) (neg.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 (fma.f64 x x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x -1/2) (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (fma.f64 x x x))) (/.f64 (sqrt.f64 x) (sqrt.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (pow.f64 x -1/2) 0) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (neg.f64 (pow.f64 x -1/2)) (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 x -1/2)))) (cbrt.f64 (pow.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (sqrt.f64 x) -1/2) (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))) (-.f64 (pow.f64 (sqrt.f64 x) -1/2) (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 -1 (sqrt.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))) (-.f64 (/.f64 -1 (sqrt.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (sqrt.f64 x) -1/2) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) (-.f64 (pow.f64 (sqrt.f64 x) -1/2) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 -1 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) (-.f64 (/.f64 -1 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (/.f64 1 x)) (+.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (cbrt.f64 (pow.f64 (fma.f64 x x x) -1/2)))) (-.f64 (cbrt.f64 (pow.f64 x -1/2)) (cbrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) (cbrt.f64 (pow.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) 2)) (cbrt.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 x -1/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x x) -1/2) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (pow.f64 x -1/2)) (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (/.f64 1 (neg.f64 (sqrt.f64 (fma.f64 x x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (sqrt.f64 x)) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 x -1/2))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))) (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (cbrt.f64 (sqrt.f64 x))) (*.f64 (cbrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 (fma.f64 x x x)))) (sqrt.f64 (sqrt.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (pow.f64 x -1/2)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (*.f64 (cbrt.f64 x) -1)) (*.f64 (cbrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (pow.f64 x -1/2)) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 (sqrt.f64 x) -1/2) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 (sqrt.f64 x)))) (sqrt.f64 (*.f64 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 (sqrt.f64 x) -1/2) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (sqrt.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (sqrt.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (pow.f64 (sqrt.f64 x) -1/2))) (sqrt.f64 (*.f64 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (cbrt.f64 x)) (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (pow.f64 x -1/2)))) (*.f64 (cbrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (sqrt.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (pow.f64 (sqrt.f64 x) -1/2))) (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 x) (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (pow.f64 x -1/2)))) (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 x -1/2)) (cbrt.f64 (exp.f64 (log1p.f64 x)))) (*.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))) (*.f64 (cbrt.f64 x) (cbrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 x -1/2)) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (*.f64 (cbrt.f64 x) -1)) (*.f64 (cbrt.f64 x) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 x -1/2)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 x -1/2)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (*.f64 (cbrt.f64 x) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))) (*.f64 (cbrt.f64 x) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (*.f64 (sqrt.f64 x) (cbrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))) (*.f64 (sqrt.f64 x) (cbrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (*.f64 (sqrt.f64 x) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))) (sqrt.f64 (*.f64 x (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (sqrt.f64 x) -1/2) (cbrt.f64 (exp.f64 (log1p.f64 x)))) (*.f64 (sqrt.f64 (sqrt.f64 x)) (cbrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))) (*.f64 (sqrt.f64 (sqrt.f64 x)) (cbrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (sqrt.f64 x) -1/2) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (*.f64 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (sqrt.f64 x) -1/2) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 x)))) (*.f64 (sqrt.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (sqrt.f64 x) -1/2) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))) (sqrt.f64 (sqrt.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (cbrt.f64 (exp.f64 (log1p.f64 x)))) (*.f64 (neg.f64 (sqrt.f64 x)) (cbrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))) (*.f64 (neg.f64 (sqrt.f64 x)) (cbrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (fma.f64 x x x))) (*.f64 (sqrt.f64 (fma.f64 x x x)) (sqrt.f64 x))) (fma.f64 x x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (sqrt.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 (pow.f64 x -1/2))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1) (neg.f64 (sqrt.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) 2)) (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (cbrt.f64 (sqrt.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) 1) (neg.f64 (sqrt.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (sqrt.f64 x)) 1) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (cbrt.f64 (pow.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) 2))) (cbrt.f64 (sqrt.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (sqrt.f64 x)) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (cbrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (sqrt.f64 x)) -1) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (sqrt.f64 x)) (cbrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))) (cbrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (cbrt.f64 (sqrt.f64 (fma.f64 x x x)))) (cbrt.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (*.f64 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (sqrt.f64 (*.f64 x (sqrt.f64 (exp.f64 (log1p.f64 x)))))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (sqrt.f64 x))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 x -1/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x -1/2)) (cbrt.f64 (/.f64 1 x)) (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (pow.f64 x -1/2)) (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1 (sqrt.f64 (sqrt.f64 x))) (/.f64 -1 (sqrt.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (sqrt.f64 x) -1/2) (pow.f64 (sqrt.f64 x) -1/2) (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (pow.f64 x -1/2)) (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (pow.f64 x -1/2))) (cbrt.f64 (/.f64 -1 x)) (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 x -1/2) (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -1/2) 1 (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x -1/2) 1/2) (*.f64 (pow.f64 x -1/2) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x -1/2) 0) (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x -1/2) (*.f64 (pow.f64 x -1/2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (pow.f64 x -1/2)) (*.f64 1/2 (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 x -1/2)) (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x -1/2) (*.f64 0 (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 x -1/2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x -1/2)) (cbrt.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 x -1/2))) (cbrt.f64 (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (sqrt.f64 (sqrt.f64 x))) (/.f64 -1 (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 x) -1/2) (pow.f64 (sqrt.f64 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x -1/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 x)) (cbrt.f64 (neg.f64 (pow.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 x) 0) (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 x -1/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (sqrt.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (pow.f64 x -1/2))) (neg.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (/.f64 (sqrt.f64 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 x -1/2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sqrt.f64 x) -1/2) (sqrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 x -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 (sqrt.f64 (sqrt.f64 x))) -1) (sqrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) -1) (neg.f64 (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (pow.f64 x -1/2))) -1) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sqrt.f64 x) -1/2) 1) (sqrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 -1 (sqrt.f64 (sqrt.f64 x)))) (sqrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1 x)) (neg.f64 (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (cbrt.f64 (/.f64 -1 x))) (cbrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (sqrt.f64 x) -1/2) 1) (sqrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (sqrt.f64 x) -1/2) (pow.f64 x 1/8)) (pow.f64 x 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (sqrt.f64 x) -1/2) (cbrt.f64 (sqrt.f64 (sqrt.f64 x)))) (cbrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (pow.f64 x -1/2)) (cbrt.f64 (cbrt.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 x -1/2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sqrt.f64 x) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 x)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 x -1/2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x x) (/.f64 -1/2 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 x -1/2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 x) (*.f64 -3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x x) (*.f64 1/2 -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 x)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 3/2) (neg.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sqrt.f64 x) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1 (sqrt.f64 (sqrt.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sqrt.f64 x) -3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) 1/2) (*.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) 0) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 1/2 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 0 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) (neg.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (pow.f64 (exp.f64 (log1p.f64 x)) 1/8)) (pow.f64 (exp.f64 (log1p.f64 x)) 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (cbrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) -1) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) -1) (cbrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) -1) (neg.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) (neg.f64 (cbrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) 1) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (cbrt.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (log1p.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (/.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (log1p.f64 x)) (neg.f64 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2) (/.f64 -1/2 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (*.f64 -3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2) (*.f64 1/2 -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (neg.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 x)) (neg.f64 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (*.f64 (log1p.f64 x) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (neg.f64 (*.f64 (log1p.f64 x) 1/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 0 (neg.f64 (*.f64 (log1p.f64 x) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 0 (*.f64 (log1p.f64 x) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (*.f64 (log1p.f64 x) 1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 x) -1/2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1/2) (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 0) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (*.f64 1/2 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (*.f64 0 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 -1) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (cbrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (exp.f64 (log1p.f64 x)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (fabs.f64 (cbrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (+.f64 (pow.f64 x 3) 1))) (cbrt.f64 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 1)) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (cbrt.f64 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (neg.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (neg.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (*.f64 (log1p.f64 x) 1/2)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log1p.f64 x) 1/2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 -1 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 (sqrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 -1 (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 1 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 1 (neg.f64 (sqrt.f64 x)))))))"]],"rules":[["egg-rr",63],["egg-rr",64],["egg-rr",59],["egg-rr",108]],"time":48.822998046875,"type":"rewrite"},{"count":[[302,307]],"inputs":[["1","(+.f64 (*.f64 -1/2 x) 1)","(+.f64 (*.f64 -1/2 x) (+.f64 1 (*.f64 3/8 (pow.f64 x 2))))","(+.f64 (*.f64 -1/2 x) (+.f64 1 (+.f64 (*.f64 3/8 (pow.f64 x 2)) (*.f64 -5/16 (pow.f64 x 3)))))","1","(+.f64 (*.f64 1/2 x) 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) 1))","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (+.f64 1 (*.f64 1/16 (pow.f64 x 3)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 (*.f64 -1/2 x) 1)","(fma.f64 -1/2 x 1)","(+.f64 (*.f64 -1/2 x) (+.f64 1 (*.f64 3/8 (pow.f64 x 2))))","(+.f64 1 (*.f64 x (+.f64 (*.f64 x 3/8) -1/2)))","(+.f64 (*.f64 -1/2 x) (+.f64 1 (+.f64 (*.f64 3/8 (pow.f64 x 2)) (*.f64 -5/16 (pow.f64 x 3)))))","(+.f64 (fma.f64 -1/2 x 1) (*.f64 (*.f64 x x) (+.f64 (*.f64 x -5/16) 3/8)))","1","(+.f64 (*.f64 1/2 x) 1)","(fma.f64 1/2 x 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) 1))","(+.f64 (*.f64 x (+.f64 1/2 (*.f64 x -1/8))) 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (+.f64 1 (*.f64 1/16 (pow.f64 x 3)))))","(+.f64 (fma.f64 1/2 x 1) (*.f64 (*.f64 x x) (+.f64 (*.f64 x 1/16) -1/8)))"]],"time":56.01708984375,"type":"simplify"},{"compiler":[[4989,2285]],"time":51.873779296875,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (pow.f64 (sqrt.f64 x) -3)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","fresh",40.64840461518563],["(-.f64 (pow.f64 (cbrt.f64 (pow.f64 x -1/2)) 3) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","fresh",25.476953343997344],["(-.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 x))) x) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","fresh",22.422091782166586],["(/.f64 (-.f64 (*.f64 (pow.f64 (sqrt.f64 x) -1/2) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))) (sqrt.f64 (sqrt.f64 (fma.f64 x x x))))","fresh",19.19241847061315],["(*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))","next",18.93609606014989],["(-.f64 (/.f64 (/.f64 (pow.f64 (sqrt.f64 x) -1/2) (cbrt.f64 (sqrt.f64 (sqrt.f64 x)))) (cbrt.f64 (sqrt.f64 x))) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","fresh",24.82987174448764],["(/.f64 (-.f64 (*.f64 (pow.f64 (sqrt.f64 x) -1/2) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (*.f64 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))","fresh",19.42774030366876],["(*.f64 (+.f64 (/.f64 -1 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) (-.f64 (/.f64 -1 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))","fresh",29.192042918773666],["(-.f64 (pow.f64 (pow.f64 (sqrt.f64 x) -1/2) 2) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","fresh",24.32366319861537],["(-.f64 (/.f64 (/.f64 (pow.f64 (sqrt.f64 x) -1/2) (pow.f64 x 1/8)) (pow.f64 x 1/8)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","fresh",24.22031713495165],["(/.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 x -1/2)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))","fresh",28.993301722943443],["(-.f64 (pow.f64 (sqrt.f64 (sqrt.f64 x)) -2) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","fresh",22.78745390380282],["(-.f64 (pow.f64 (pow.f64 (sqrt.f64 x) -3) 1/3) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","fresh",42.164253595858234],["(-.f64 (*.f64 (cbrt.f64 (pow.f64 x -1/2)) (cbrt.f64 (/.f64 1 x))) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","fresh",22.93622502234571],["(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x)))))","fresh",29.1146245426564]],"compiler":[[13,11],[14,12],[19,13],[29,20],[15,10],[21,15],[22,13],[26,15],[14,12],[20,16],[21,12],[13,11],[14,12],[17,14],[29,17],[13,11],[14,12],[19,13],[29,20],[15,10],[21,15],[22,13],[26,15],[14,12],[20,16],[21,12],[13,11],[14,12],[17,14],[29,17]],"count":[[309,15]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[307,15],"picked":[1,0]}],"min-error":[18.479546443856048],"time":108.835205078125,"type":"prune"},{"compiler":[[45,13]],"locations":[["(*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))",0.15625,true],["(exp.f64 (log1p.f64 x))",2.8182097951822778,true],["(pow.f64 (fma.f64 x x x) -1/2)",14.88908797020226,true],["(-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))",29.269002719984428,true]],"time":15.7138671875,"type":"localize"},{"count":[[4,25]],"series":[["(*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))","x","-inf",1.202880859375],["(*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))","x","inf",0.842041015625],["(*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))","x","0",2.35400390625],["(exp.f64 (log1p.f64 x))","x","-inf",3.405029296875],["(exp.f64 (log1p.f64 x))","x","inf",1.762939453125],["(exp.f64 (log1p.f64 x))","x","0",4.341064453125],["(pow.f64 (fma.f64 x x x) -1/2)","x","-inf",0.327880859375],["(pow.f64 (fma.f64 x x x) -1/2)","x","inf",0.366943359375],["(pow.f64 (fma.f64 x x x) -1/2)","x","0",0.382080078125],["(-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))","x","-inf",0.984130859375],["(-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))","x","inf",0.583984375],["(-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))","x","0",0.625]],"time":17.385009765625,"type":"series"},{"count":[[4,205]],"inputs":[["(-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))","(pow.f64 (fma.f64 x x x) -1/2)","(exp.f64 (log1p.f64 x))","(*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1/2) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 0) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (*.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 1/2 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))) (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))) (+.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 x)))) (-.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))) (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (sqrt.f64 (sqrt.f64 x))) (-.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 (cbrt.f64 x) (cbrt.f64 (hypot.f64 x (sqrt.f64 x))))) (-.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x)))) (-.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (neg.f64 (pow.f64 x 3/2))) (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (hypot.f64 x (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (pow.f64 x 3/2)) (exp.f64 (*.f64 (log1p.f64 x) 3/2))) (+.f64 x (-.f64 (exp.f64 (log1p.f64 x)) (neg.f64 (hypot.f64 x (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (hypot.f64 x (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (exp.f64 (log1p.f64 x))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 x)) (neg.f64 (cbrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (exp.f64 (log1p.f64 x))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1 (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (fma.f64 x x x) -1/2) (*.f64 (pow.f64 (fma.f64 x x x) -1/2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) 1/2) (*.f64 (pow.f64 (fma.f64 x x x) -1/2) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) 0) (pow.f64 (fma.f64 x x x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (fma.f64 x x x) -1/2) (*.f64 0 (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (pow.f64 (fma.f64 x x x) -1/2)) (*.f64 1/2 (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (fma.f64 x x x) -1/2)) (pow.f64 (fma.f64 x x x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 x x x) -1/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) -1/2)) (cbrt.f64 (pow.f64 (fma.f64 x x x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/2) (pow.f64 (exp.f64 (log1p.f64 x)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (log1p.f64 x)) -1/2) (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) -1)) (cbrt.f64 (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (fma.f64 x x x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x x) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 x x x) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x x) (*.f64 -1/2 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) -1/2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x x) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x x) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x x x) (*.f64 -1/2 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 x)) (*.f64 (exp.f64 (log1p.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (log1p.f64 x)) 1/2) (*.f64 (exp.f64 (log1p.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (log1p.f64 x)) 0) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 x)) (*.f64 0 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (exp.f64 (log1p.f64 x))) (*.f64 1/2 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (exp.f64 (log1p.f64 x))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2)) (cbrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (pow.f64 (exp.f64 (log1p.f64 x)) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (log1p.f64 x)) (+.f64 1/3 1/2)) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (log1p.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 x 3)) (/.f64 1 (+.f64 1 (*.f64 x (-.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (-.f64 1 (cbrt.f64 x))) (+.f64 (cbrt.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x))) (+.f64 1 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (log1p.f64 x)) (pow.f64 (exp.f64 (log1p.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 0) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 x 3)) (+.f64 1 (*.f64 x (-.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) 1) (+.f64 1 (*.f64 x (-.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 x 3)) (+.f64 (*.f64 x x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) 1) (*.f64 (+.f64 1 (*.f64 x (-.f64 x 1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1 (pow.f64 x 3))) (neg.f64 (+.f64 1 (*.f64 x (-.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 0) (pow.f64 (exp.f64 (log1p.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (log1p.f64 x)) (pow.f64 (exp.f64 (log1p.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 (exp.f64 (log1p.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log1p.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (pow.f64 (log1p.f64 x) 2))) (cbrt.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (neg.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (log1p.f64 x))) (cbrt.f64 (pow.f64 (log1p.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 x) 1/2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 x) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 1/2 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 x 3/2)) (sqrt.f64 (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (pow.f64 x 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 (cbrt.f64 x) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 1)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) (*.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 1/2) (*.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 0) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (sqrt.f64 (exp.f64 (log1p.f64 x)))) 1) (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (neg.f64 (sqrt.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (neg.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) (*.f64 0 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))) (*.f64 1/2 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (neg.f64 (sqrt.f64 x))) (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x x) -1/2) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))) (cbrt.f64 (pow.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 2)) (cbrt.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) -1/2)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) -1)) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (pow.f64 (fma.f64 x x x) -1/2)) (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (pow.f64 (fma.f64 x x x) -1/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) -1)) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (cbrt.f64 (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 x x x) -1/2)) (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (cbrt.f64 (pow.f64 (fma.f64 x x x) -1/2))) (cbrt.f64 (pow.f64 (fma.f64 x x x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) -1)) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (cbrt.f64 (pow.f64 (fma.f64 x x x) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (pow.f64 (fma.f64 x x x) -1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (pow.f64 (fma.f64 x x x) -1/2) (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (neg.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 x x x) -1/2) (sqrt.f64 (exp.f64 (log1p.f64 x))) (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (neg.f64 (sqrt.f64 x))))))))"]],"rules":[["egg-rr",39],["egg-rr",84],["egg-rr",23],["egg-rr",59]],"time":38.7099609375,"type":"rewrite"},{"count":[[230,233]],"inputs":[["1","(sqrt.f64 (/.f64 1 x))","(+.f64 (*.f64 -1/2 (sqrt.f64 x)) (sqrt.f64 (/.f64 1 x)))","(+.f64 (*.f64 -1/2 (sqrt.f64 x)) (+.f64 (*.f64 3/8 (sqrt.f64 (pow.f64 x 3))) (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 -5/16 (sqrt.f64 (pow.f64 x 5))) (+.f64 (*.f64 -1/2 (sqrt.f64 x)) (+.f64 (*.f64 3/8 (sqrt.f64 (pow.f64 x 3))) (sqrt.f64 (/.f64 1 x)))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 3/8 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 3/8 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (+.f64 (*.f64 5/16 (/.f64 1 (pow.f64 x 4))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))))","(/.f64 -1 x)","(-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (/.f64 1 x))","(-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (+.f64 (*.f64 3/8 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)))","(-.f64 (+.f64 (*.f64 5/16 (/.f64 1 (pow.f64 x 4))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))) (+.f64 (*.f64 3/8 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)))","1","(+.f64 1 x)","(+.f64 1 x)","(+.f64 1 x)","x","(+.f64 1 x)","(+.f64 1 x)","(+.f64 1 x)","(exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x))","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x))","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x))"]],"method":["egg-herbie"],"outputs":[["1","(sqrt.f64 (/.f64 1 x))","(pow.f64 x -1/2)","(+.f64 (*.f64 -1/2 (sqrt.f64 x)) (sqrt.f64 (/.f64 1 x)))","(fma.f64 -1/2 (sqrt.f64 x) (pow.f64 x -1/2))","(+.f64 (*.f64 -1/2 (sqrt.f64 x)) (+.f64 (*.f64 3/8 (sqrt.f64 (pow.f64 x 3))) (sqrt.f64 (/.f64 1 x))))","(fma.f64 (sqrt.f64 x) -1/2 (fma.f64 3/8 (pow.f64 x 3/2) (pow.f64 x -1/2)))","(+.f64 (*.f64 -5/16 (sqrt.f64 (pow.f64 x 5))) (+.f64 (*.f64 -1/2 (sqrt.f64 x)) (+.f64 (*.f64 3/8 (sqrt.f64 (pow.f64 x 3))) (sqrt.f64 (/.f64 1 x)))))","(fma.f64 (pow.f64 x 5/2) -5/16 (fma.f64 (sqrt.f64 x) -1/2 (fma.f64 3/8 (pow.f64 x 3/2) (pow.f64 x -1/2))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 1 x) (/.f64 -1/2 (*.f64 x x)))","(-.f64 (+.f64 (*.f64 3/8 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(+.f64 (fma.f64 3/8 (pow.f64 x -3) (/.f64 1 x)) (/.f64 -1/2 (*.f64 x x)))","(-.f64 (+.f64 (*.f64 3/8 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (+.f64 (*.f64 5/16 (/.f64 1 (pow.f64 x 4))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (fma.f64 3/8 (pow.f64 x -3) (/.f64 1 x)) (fma.f64 5/16 (pow.f64 x -4) (/.f64 1/2 (*.f64 x x))))","(/.f64 -1 x)","(-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (/.f64 1 x))","(fma.f64 1/2 (pow.f64 x -2) (/.f64 -1 x))","(-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (+.f64 (*.f64 3/8 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)))","(-.f64 (/.f64 1/2 (*.f64 x x)) (fma.f64 3/8 (pow.f64 x -3) (/.f64 1 x)))","(-.f64 (+.f64 (*.f64 5/16 (/.f64 1 (pow.f64 x 4))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))) (+.f64 (*.f64 3/8 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)))","(-.f64 (fma.f64 5/16 (pow.f64 x -4) (/.f64 1/2 (*.f64 x x))) (fma.f64 3/8 (pow.f64 x -3) (/.f64 1 x)))","1","(+.f64 1 x)","(+.f64 1 x)","(+.f64 1 x)","x","(+.f64 1 x)","(+.f64 1 x)","(+.f64 1 x)","(exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(exp.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 x)))))","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x))","(+.f64 (exp.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 x))))) (/.f64 (exp.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 x))))) x))","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x))","(+.f64 (exp.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 x))))) (/.f64 (exp.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 x))))) x))","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x))","(+.f64 (exp.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 x))))) (/.f64 (exp.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 x))))) x))"]],"time":84.362060546875,"type":"simplify"},{"compiler":[[4671,1862]],"time":43.365966796875,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (pow.f64 (sqrt.f64 x) -3)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","fresh",40.64840461518563],["(-.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 x))) x) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","fresh",22.422091782166586],["(/.f64 (-.f64 (*.f64 (pow.f64 (sqrt.f64 x) -1/2) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))) (sqrt.f64 (sqrt.f64 (fma.f64 x x x))))","fresh",19.19241847061315],["(/.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 x -1/2)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))","fresh",28.993301722943443],["(-.f64 (pow.f64 (sqrt.f64 (sqrt.f64 x)) -2) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","fresh",22.78745390380282],["(*.f64 1 (pow.f64 (fma.f64 x x x) -1/2))","fresh",20.57678573045506],["(*.f64 (-.f64 (sqrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))","next",18.86198695345634],["(*.f64 (+.f64 (/.f64 -1 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) (-.f64 (/.f64 -1 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))","fresh",29.192042918773666],["(*.f64 (-.f64 (sqrt.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) 1)) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))","fresh",29.422811527758405]],"compiler":[[13,11],[19,13],[29,20],[21,12],[13,11],[9,6],[18,10],[26,15],[20,13],[13,11],[19,13],[29,20],[21,12],[13,11],[9,6],[18,10],[26,15],[20,13]],"count":[[248,9]],"kept":[{"done":[0,0],"fresh":[14,6],"new":[233,3],"picked":[1,0]}],"min-error":[18.356207705040656],"time":86.158935546875,"type":"prune"},{"compiler":[[56,23]],"locations":[["(*.f64 (-.f64 (sqrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))",0.01953125,true],["(fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)",0.23046875,true],["(-.f64 (sqrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)) (sqrt.f64 x))",2.056588714206338,true],["(pow.f64 (fma.f64 x x x) -1/2)",14.88908797020226,false]],"time":17.752197265625,"type":"localize"},{"count":[[3,2]],"series":[["(*.f64 (-.f64 (sqrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))","x","-inf",1.47900390625],["(*.f64 (-.f64 (sqrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))","x","inf",1.126953125],["(*.f64 (-.f64 (sqrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))","x","0",0.718994140625],["(fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)","x","-inf",0.39111328125],["(fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)","x","inf",0.3330078125],["(fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)","x","0",0.77001953125],["(-.f64 (sqrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)) (sqrt.f64 x))","x","-inf",1.434814453125],["(-.f64 (sqrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)) (sqrt.f64 x))","x","inf",0.9921875],["(-.f64 (sqrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)) (sqrt.f64 x))","x","0",0.410888671875]],"time":7.7919921875,"type":"series"},{"count":[[3,193]],"inputs":[["(-.f64 (sqrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1/2) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 0) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 1/2 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (*.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (hypot.f64 x (sqrt.f64 x))))) (/.f64 (pow.f64 x 3/2) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (hypot.f64 x (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))) (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))) (+.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))) (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 x)))) (-.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (sqrt.f64 (sqrt.f64 x))) (-.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (/.f64 1 (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (hypot.f64 x (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 (cbrt.f64 x) (cbrt.f64 (hypot.f64 x (sqrt.f64 x))))) (-.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x)))) (-.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (/.f64 1 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (hypot.f64 x (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (hypot.f64 x (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (hypot.f64 x (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (-.f64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3/2)))) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (hypot.f64 x (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) 1) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (hypot.f64 x (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) 1) (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (hypot.f64 x (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (cbrt.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (hypot.f64 x (sqrt.f64 x)))))) (pow.f64 (cbrt.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (hypot.f64 x (sqrt.f64 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) 1) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (hypot.f64 x (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (+.f64 x (-.f64 (exp.f64 (log1p.f64 x)) (neg.f64 (hypot.f64 x (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) 1) (*.f64 (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (hypot.f64 x (sqrt.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3/2))) (neg.f64 (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (hypot.f64 x (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3/2))) (neg.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (hypot.f64 x (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (exp.f64 (log1p.f64 x))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (exp.f64 (log1p.f64 x))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1 (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 x)) (neg.f64 (cbrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (log1p.f64 x)) 1/2) (*.f64 (exp.f64 (log1p.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (log1p.f64 x)) 0) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 x)) (*.f64 (exp.f64 (log1p.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (exp.f64 (log1p.f64 x))) (*.f64 1/2 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (exp.f64 (log1p.f64 x))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 x)) (*.f64 0 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2)) (cbrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (pow.f64 (exp.f64 (log1p.f64 x)) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (log1p.f64 x)) (+.f64 1/3 1/2)) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (log1p.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) 1) (/.f64 1 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x))) (+.f64 1 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (-.f64 1 (cbrt.f64 x))) (+.f64 (cbrt.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 0) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (log1p.f64 x)) (pow.f64 (exp.f64 (log1p.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) 1) (fma.f64 x x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 3) 1) 1) (fma.f64 x x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) 1) (+.f64 1 (*.f64 x (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 3) 1) 1) (*.f64 (fma.f64 x x (-.f64 1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) 1)) (neg.f64 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 (exp.f64 (log1p.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (log1p.f64 x)) (pow.f64 (exp.f64 (log1p.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 0) (pow.f64 (exp.f64 (log1p.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 x) 1/2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 x) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 1/2 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (pow.f64 x 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 (cbrt.f64 x) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 x 3/2)) (sqrt.f64 (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 1/2) (*.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 0) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) (*.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (sqrt.f64 (exp.f64 (log1p.f64 x)))) 1) (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (neg.f64 (sqrt.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))) (*.f64 1/2 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) (*.f64 0 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (neg.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (neg.f64 (sqrt.f64 x))) (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x x) -1/2) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) -1/2)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) -1)) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (pow.f64 (fma.f64 x x x) -1/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) -1)) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (cbrt.f64 (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (pow.f64 (fma.f64 x x x) -1/2)) (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 x x x) -1/2)) (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))) (cbrt.f64 (pow.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 2)) (cbrt.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (cbrt.f64 (pow.f64 (fma.f64 x x x) -1/2))) (cbrt.f64 (pow.f64 (fma.f64 x x x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) -1)) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (cbrt.f64 (pow.f64 (fma.f64 x x x) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2))) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (hypot.f64 x (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2))) (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (hypot.f64 x (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (hypot.f64 x (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (pow.f64 (fma.f64 x x x) -1/2)) (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (hypot.f64 x (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (pow.f64 (fma.f64 x x x) -1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 x x x) -1/2) (sqrt.f64 (exp.f64 (log1p.f64 x))) (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (neg.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (pow.f64 (fma.f64 x x x) -1/2) (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (neg.f64 (sqrt.f64 x))))))))"]],"rules":[["egg-rr",43],["egg-rr",79],["egg-rr",71]],"time":36.97998046875,"type":"rewrite"},{"count":[[195,194]],"inputs":[["1","1"]],"method":["egg-herbie"],"outputs":[["1","1"]],"time":33.7529296875,"type":"simplify"},{"compiler":[[5065,2096]],"time":46.06591796875,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (pow.f64 (sqrt.f64 x) -3)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","fresh",40.64840461518563],["(-.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 x))) x) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","fresh",22.422091782166586],["(/.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 x -1/2)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))","fresh",28.993301722943443],["(*.f64 (-.f64 (sqrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)) (sqrt.f64 x)) (+.f64 (/.f64 1 x) (/.f64 -1/2 (*.f64 x x))))","fresh",51.756086917609174],["(*.f64 (-.f64 (sqrt.f64 (fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) 1)) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))","fresh",29.422811527758405],["(-.f64 (pow.f64 (sqrt.f64 (sqrt.f64 x)) -2) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","fresh",22.78745390380282],["(*.f64 1 (pow.f64 (fma.f64 x x x) -1/2))","fresh",20.57678573045506],["(*.f64 (+.f64 (/.f64 -1 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) (-.f64 (/.f64 -1 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))","fresh",29.192042918773666],["(*.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2))","next",18.89424756876376]],"compiler":[[13,11],[19,13],[21,12],[21,13],[20,13],[13,11],[9,6],[26,15],[21,12],[13,11],[19,13],[21,12],[21,13],[20,13],[13,11],[9,6],[26,15],[21,12]],"count":[[248,9]],"kept":[{"done":[0,0],"fresh":[8,5],"new":[239,4],"picked":[1,0]}],"min-error":[18.303052039327667],"time":93.72900390625,"type":"prune"},{"compiler":[[69,15]],"locations":[["(*.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2))",0.1875,true],["(exp.f64 (log1p.f64 x))",2.8182097951822778,false],["(pow.f64 (fma.f64 x x x) -1/2)",14.88908797020226,false],["(-.f64 (exp.f64 (log1p.f64 x)) x)",28.57741197409841,true]],"time":17.989990234375,"type":"localize"},{"count":[[2,12]],"series":[["(*.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2))","x","-inf",5.087890625],["(*.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2))","x","inf",2.504150390625],["(*.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2))","x","0",1.339111328125],["(-.f64 (exp.f64 (log1p.f64 x)) x)","x","-inf",0.253173828125],["(-.f64 (exp.f64 (log1p.f64 x)) x)","x","inf",0.2109375],["(-.f64 (exp.f64 (log1p.f64 x)) x)","x","0",16.7900390625]],"time":26.300048828125,"type":"series"},{"count":[[2,146]],"inputs":[["(-.f64 (exp.f64 (log1p.f64 x)) x)","(*.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 x) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 x (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (-.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 0) (-.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 1/2) (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (*.f64 0 (-.f64 (exp.f64 (log1p.f64 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (exp.f64 (log1p.f64 x)) x)) (-.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 (exp.f64 (log1p.f64 x)) x)) (*.f64 1/2 (-.f64 (exp.f64 (log1p.f64 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (*.f64 (neg.f64 (exp.f64 (log1p.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (exp.f64 (log1p.f64 x))) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 x) (neg.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (neg.f64 (exp.f64 (log1p.f64 x)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)) (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 2)) (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x (exp.f64 (log1p.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 x)) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (neg.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (-.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (exp.f64 (*.f64 2 (log1p.f64 x)))) (+.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (fma.f64 x x x)))) (-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (exp.f64 (log1p.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 2 (log1p.f64 x))) (*.f64 x x)) (+.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (exp.f64 (*.f64 (log1p.f64 x) 3)) (neg.f64 (pow.f64 x 3))) (fma.f64 x x (*.f64 (exp.f64 (log1p.f64 x)) (+.f64 (exp.f64 (log1p.f64 x)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (pow.f64 x 3)) (exp.f64 (*.f64 (log1p.f64 x) 3))) (+.f64 (*.f64 x x) (-.f64 (exp.f64 (*.f64 2 (log1p.f64 x))) (*.f64 (neg.f64 x) (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3)) (pow.f64 x 3)) (fma.f64 x x (*.f64 (exp.f64 (log1p.f64 x)) (+.f64 (exp.f64 (log1p.f64 x)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 x (exp.f64 (log1p.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (exp.f64 (*.f64 2 (log1p.f64 x)))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (exp.f64 (log1p.f64 x))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (exp.f64 (log1p.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (*.f64 2 (log1p.f64 x)))) (cbrt.f64 (exp.f64 (log1p.f64 x))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (log1p.f64 x)) 1 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (pow.f64 (exp.f64 (log1p.f64 x)) (+.f64 1/3 1/2)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (exp.f64 (log1p.f64 x))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 x (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 x) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (*.f64 x x)) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (neg.f64 (cbrt.f64 (*.f64 x x))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (exp.f64 (log1p.f64 x)) x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 0) (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1/2) (*.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (/.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (/.f64 x (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 0 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2)) (*.f64 (/.f64 x (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x x) -1/2) (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2)) (cbrt.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (cbrt.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (cbrt.f64 (pow.f64 (fma.f64 x x x) -1/2))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (cbrt.f64 (pow.f64 (fma.f64 x x x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2)) (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) -1/2)) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) -1)) (-.f64 (exp.f64 (log1p.f64 x)) x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (-.f64 x (exp.f64 (log1p.f64 x)))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (/.f64 (pow.f64 (fma.f64 x x x) -1/2) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (/.f64 (pow.f64 (fma.f64 x x x) -1/2) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (/.f64 (pow.f64 (fma.f64 x x x) -1/2) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (-.f64 x (exp.f64 (log1p.f64 x)))) (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (-.f64 x (exp.f64 (log1p.f64 x)))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (sqrt.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (sqrt.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 1) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (-.f64 x (exp.f64 (log1p.f64 x)))) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) -1) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2)) (cbrt.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)))) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (pow.f64 (fma.f64 x x x) -1/2)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (pow.f64 (fma.f64 x x x) -1/2)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (fma.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) x)))) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 1) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (-.f64 x (exp.f64 (log1p.f64 x)))) 1) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 1) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) x))) (pow.f64 (fma.f64 x x x) -1/2)) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x (exp.f64 (log1p.f64 x)))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2)) (pow.f64 (fma.f64 x x x) -1/2))) (cbrt.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2)) (pow.f64 (fma.f64 x x x) -1/2))) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (/.f64 (pow.f64 (fma.f64 x x x) -1/2) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2))) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (/.f64 (pow.f64 (fma.f64 x x x) -1/2) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) -1) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (-.f64 x (exp.f64 (log1p.f64 x)))) 1) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (-.f64 x (exp.f64 (log1p.f64 x)))) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 1) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 1) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (cbrt.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 x (exp.f64 (log1p.f64 x))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (-.f64 x (exp.f64 (log1p.f64 x)))) (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 x (exp.f64 (log1p.f64 x))) (/.f64 (pow.f64 (fma.f64 x x x) -1/2) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (-.f64 x (exp.f64 (log1p.f64 x)))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (-.f64 x (exp.f64 (log1p.f64 x)))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (/.f64 (-.f64 x (exp.f64 (log1p.f64 x))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 3))))))"]],"rules":[["egg-rr",75],["egg-rr",71]],"time":41.108154296875,"type":"rewrite"},{"count":[[158,155]],"inputs":[["1","1","1","1","(*.f64 -1 x)","(+.f64 (*.f64 -1 x) x)","(+.f64 1 (+.f64 (*.f64 -1 x) x))","(+.f64 1 (+.f64 (*.f64 -1 x) x))","(*.f64 -1 x)","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (*.f64 -1 x))","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (+.f64 (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x) (*.f64 -1 x)))","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (+.f64 (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x) (*.f64 -1 x)))"]],"method":["egg-herbie"],"outputs":[["1","1","1","1","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1 x) x)","0","(+.f64 1 (+.f64 (*.f64 -1 x) x))","1","(+.f64 1 (+.f64 (*.f64 -1 x) x))","1","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (*.f64 -1 x))","0","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (+.f64 (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x) (*.f64 -1 x)))","(/.f64 x x)","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (+.f64 (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x) (*.f64 -1 x)))","(/.f64 x x)"]],"time":56.62890625,"type":"simplify"},{"compiler":[[10020,3291]],"time":74.083984375,"type":"eval"},{"alts":[["(*.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2))","fresh",18.893290098069084],["(*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2))","fresh",6.127400222497728],["(*.f64 (/.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 (log1p.f64 x))) (*.f64 x x)) (+.f64 (exp.f64 (log1p.f64 x)) x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2))","fresh",29.551505216479587],["(*.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 6)) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2))","fresh",18.888720078532202],["(*.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (cbrt.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2)))","fresh",18.898153818764097]],"compiler":[[32,16],[17,12],[31,18],[25,16],[39,17]],"count":[[387,5]],"kept":[{"done":[0,0],"fresh":[8,0],"new":[378,5],"picked":[1,0]}],"min-error":[6.093865212729287],"time":184.422119140625,"type":"prune"},{"accuracy":[6.1274002224977275],"baseline":[6.127400222497728],"branch":[["x",6.127400222497732,1],["(-.f64 (/.f64 1 (sqrt.f64 x)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))",6.1274002224977275,1]],"compiler":[[2,1],[12,10],[543,254]],"count":[[29,1]],"inputs":[["(*.f64 (/.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (pow.f64 (fma.f64 x x x) -1/2)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2))","(*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2))","(*.f64 (/.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 (log1p.f64 x))) (*.f64 x x)) (+.f64 (exp.f64 (log1p.f64 x)) x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2))","(*.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 6)) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2))","(*.f64 (*.f64 (pow.f64 (fma.f64 x x x) -1/2) (cbrt.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)) (sqrt.f64 x)) (+.f64 (/.f64 1 x) (/.f64 -1/2 (*.f64 x x))))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) 1)) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))","(*.f64 1 (pow.f64 (fma.f64 x x x) -1/2))","(*.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2))","(*.f64 1 (pow.f64 (fma.f64 x x x) -1/2))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) 1)) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))","(-.f64 (cbrt.f64 (pow.f64 (sqrt.f64 x) -3)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","(-.f64 (pow.f64 (cbrt.f64 (pow.f64 x -1/2)) 3) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","(-.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 x))) x) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","(/.f64 (-.f64 (*.f64 (pow.f64 (sqrt.f64 x) -1/2) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))) (sqrt.f64 (sqrt.f64 (fma.f64 x x x))))","(*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) -1/2))","(-.f64 (/.f64 (/.f64 (pow.f64 (sqrt.f64 x) -1/2) (cbrt.f64 (sqrt.f64 (sqrt.f64 x)))) (cbrt.f64 (sqrt.f64 x))) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","(/.f64 (-.f64 (*.f64 (pow.f64 (sqrt.f64 x) -1/2) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (*.f64 (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))","(*.f64 (+.f64 (/.f64 -1 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))) (-.f64 (/.f64 -1 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))))","(-.f64 (pow.f64 (pow.f64 (sqrt.f64 x) -1/2) 2) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","(-.f64 (/.f64 (/.f64 (pow.f64 (sqrt.f64 x) -1/2) (pow.f64 x 1/8)) (pow.f64 x 1/8)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","(/.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 x -1/2)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))","(-.f64 (pow.f64 (sqrt.f64 (sqrt.f64 x)) -2) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","(-.f64 (pow.f64 (pow.f64 (sqrt.f64 x) -3) 1/3) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","(-.f64 (*.f64 (cbrt.f64 (pow.f64 x -1/2)) (cbrt.f64 (/.f64 1 x))) (/.f64 1 (sqrt.f64 (+.f64 x 1))))","(/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (pow.f64 (fma.f64 x x x) -1/2)) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x)))))","(-.f64 (pow.f64 x -1/2) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(-.f64 (/.f64 1 (sqrt.f64 x)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))"]],"link":["."],"name":["2isqrt (example 3.6)"],"oracle":[63.195561047288116],"outputs":[["(*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2))"]],"time":21.076904296875,"times":[["x",8.385009765625],["(-.f64 (/.f64 1 (sqrt.f64 x)) (/.f64 1 (sqrt.f64 (+.f64 x 1))))",4.7041015625]],"type":"regimes"},{"compiler":[[17,12]],"inputs":[["(*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (fma.f64 x x x) -1/2))","(/.f64 (pow.f64 (fma.f64 x x x) -1/2) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))"]],"stop":[["fuel",1]],"time":20.806884765625,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[17,12]],"remove-preprocessing":[[]],"time":11.0390625,"type":"end"}]
[{"compiler":[[14,11]],"method":["search"],"sampling":[[12,0.850731099024415,0.14829257689416409,0.0009763240814208984],[11,0.8234140453860164,0.17560963053256273,0.0009763240814208984],[10,0.7180482670664787,0.2809754088521004,0.0009763240814208984],[9,0.6712190322577953,0.32780464366078377,0.0009763240814208984],[8,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[7,0.43707285821437836,0.5619508177042007,0.0009763240814208984],[6,0.18731693923473358,0.8117067366838455,0.0009763240814208984],[5,0.12487795948982239,0.8741457164287567,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":39.484130859375,"type":"analyze"},{"outcomes":[["body",512,"valid",50.746337890625,722],["body",1024,"valid",66.117431640625,640],["body",2048,"valid",1.18896484375,9],["body",256,"valid",274.146240234375,6885]],"time":401.808837890625,"type":"sample"},{"compiler":[[13,10]],"inputs":[["0","1"],["(-.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1)))","(-.f64 1 (/.f64 (*.f64 (-.f64 1 y) x) (+.f64 x 1)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1)))","(+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)))","(-.f64 1 (/.f64 (*.f64 (-.f64 1 y) x) (+.f64 x 1)))","(+.f64 1 (/.f64 (*.f64 (-.f64 1 y) x) (-.f64 -1 x)))"]],"symmetry":[[]],"time":62.278076171875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1)))","(+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)))"]],"time":20.2900390625,"type":"simplify"},{"compiler":[[24,18]],"time":0.39697265625,"type":"eval"},{"alts":[["(-.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1)))","next",22.05326767883602]],"compiler":[[13,10],[13,10]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[22.05326767883602],"time":0.873046875,"type":"prune"},{"compiler":[[36,24]],"locations":[["(*.f64 (-.f64 1 x) y)",0.0078125,true],["(-.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1)))",3.324270387858313,true],["(/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1))",7.484478617390936,true]],"time":8.35302734375,"type":"localize"},{"count":[[3,72]],"series":[["(*.f64 (-.f64 1 x) y)","y","-inf",0.2421875],["(*.f64 (-.f64 1 x) y)","y","inf",0.571044921875],["(*.f64 (-.f64 1 x) y)","y","0",0.2958984375],["(*.f64 (-.f64 1 x) y)","x","-inf",0.1650390625],["(*.f64 (-.f64 1 x) y)","x","inf",0.14794921875],["(*.f64 (-.f64 1 x) y)","x","0",0.152099609375],["(-.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1)))","y","-inf",0.258056640625],["(-.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1)))","y","inf",0.3349609375],["(-.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1)))","y","0",0.215087890625],["(-.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1)))","x","-inf",0.18994140625],["(-.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1)))","x","inf",0.18603515625],["(-.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1)))","x","0",0.23193359375],["(/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1))","y","-inf",0.85791015625],["(/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1))","y","inf",0.342041015625],["(/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1))","y","0",0.533935546875],["(/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1))","x","-inf",0.407958984375],["(/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1))","x","inf",0.547119140625],["(/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1))","x","0",0.58984375]],"time":6.52392578125,"type":"series"},{"count":[[3,192]],"inputs":[["(/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1))","(-.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1)))","(*.f64 (-.f64 1 x) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 (/.f64 1 (+.f64 y 1)) (neg.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 0) (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (*.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 (neg.f64 (*.f64 x y)) (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y))) (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (*.f64 0 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 y)) (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 1 x) y) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 2)) (cbrt.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (*.f64 (-.f64 1 x) (cbrt.f64 (pow.f64 (+.f64 y 1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (+.f64 y 1))) (*.f64 y (cbrt.f64 (pow.f64 (+.f64 y 1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 x) y)) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) y) 2)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) y) (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y 1)) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) y) (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) (*.f64 (*.f64 (-.f64 1 x) y) (cbrt.f64 (pow.f64 (+.f64 y 1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (+.f64 y 1)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) (cbrt.f64 (pow.f64 (+.f64 y 1) -2))) (/.f64 y (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) y) 2)) (+.f64 y 1)) (cbrt.f64 (*.f64 (-.f64 1 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (-.f64 1 x) y) (cbrt.f64 (pow.f64 (+.f64 y 1) -2))) (cbrt.f64 (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 y)) (*.f64 (+.f64 x -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (pow.f64 (+.f64 y 1) -2))) (/.f64 (-.f64 1 x) (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 1 x) y) (cbrt.f64 (+.f64 y 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) (*.f64 (+.f64 y 1) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) (*.f64 y (-.f64 1 (pow.f64 x 3)))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 y) 2)) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 y (-.f64 1 (pow.f64 x 3)))) (*.f64 (-.f64 -1 y) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) y) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (-.f64 -1 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) (*.f64 (-.f64 1 x) y)) (cbrt.f64 (pow.f64 (-.f64 -1 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (-.f64 1 x)) (cbrt.f64 (pow.f64 (-.f64 -1 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (+.f64 y 1))) y) (cbrt.f64 (pow.f64 (-.f64 -1 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 2)) (cbrt.f64 (*.f64 (-.f64 1 x) y))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 2)) (cbrt.f64 (*.f64 (+.f64 x -1) y))) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) y) 2))) (cbrt.f64 (pow.f64 (-.f64 -1 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (+.f64 y 1)) (*.f64 y (-.f64 1 (pow.f64 x 3)))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 x) y) (cbrt.f64 (pow.f64 (+.f64 y 1) -2))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (-.f64 1 x) y) (cbrt.f64 (+.f64 y 1))) 1) (cbrt.f64 (pow.f64 (-.f64 -1 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (-.f64 1 x) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 2))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 x -1) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 2))) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (*.f64 y (cbrt.f64 (pow.f64 (+.f64 y 1) -2)))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) (/.f64 1 (+.f64 y 1))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (*.f64 (-.f64 1 x) (cbrt.f64 (pow.f64 (+.f64 y 1) -2)))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 y (+.f64 y 1))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) y) -1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) y) (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x -1) y) (cbrt.f64 (+.f64 y 1))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 -1 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 1 x) y) (cbrt.f64 (+.f64 y 1))) 1) (cbrt.f64 (pow.f64 (-.f64 -1 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) -1) (*.f64 (fma.f64 x x (+.f64 1 x)) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) (cbrt.f64 (/.f64 1 (+.f64 y 1)))) (*.f64 (fma.f64 x x (+.f64 1 x)) (cbrt.f64 (pow.f64 (-.f64 -1 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) 1) (*.f64 (fma.f64 x x (+.f64 1 x)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (-.f64 1 x) y) (cbrt.f64 (+.f64 y 1)))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 -1 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (/.f64 y (+.f64 y 1))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))) 0) (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))) (*.f64 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)))) (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))) (*.f64 0 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1)) (neg.f64 (/.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 3) (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1)) (/.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 3) (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) -1))) (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 2)) (cbrt.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y))))) (-.f64 1 (cbrt.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)))) (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) -1)) 2) (cbrt.f64 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)) 3)) (/.f64 1 (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1)) (+.f64 1 (pow.f64 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 3)) (/.f64 1 (neg.f64 (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) -1)) (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 3) 3)) (/.f64 1 (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1))) (+.f64 1 (+.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 6) (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)) 3)) (cbrt.f64 (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1))) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1) (*.f64 (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1) (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 3))) (*.f64 (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1) (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 3)) 1) (*.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 3) 3)) 1) (*.f64 (+.f64 1 (+.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 6) (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 3))) (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 3)) (neg.f64 (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)) 3)) (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) -1)) 2) (cbrt.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)) 3)))) (cbrt.f64 (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 3)) 1) (neg.f64 (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)) 3))) (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) -1)) 2)) (cbrt.f64 (fma.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 x -1) y) (+.f64 y 1)) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (-.f64 -1 y) (*.f64 (-.f64 1 x) y)) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (+.f64 y 1) (*.f64 (+.f64 x -1) y)) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (-.f64 -1 y) (*.f64 (+.f64 x -1) y)) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 (-.f64 -1 y) 2)) (/.f64 (*.f64 (-.f64 1 x) y) (cbrt.f64 (+.f64 y 1)))) (cbrt.f64 (pow.f64 (-.f64 -1 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 y 1) (*.f64 (-.f64 1 x) y)) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) y) (/.f64 1 (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 x) y) (/.f64 1 (-.f64 -1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 (+.f64 x -1) y) (-.f64 -1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (+.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (-.f64 -1 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 y (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 x) y) 0) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 x) y) (*.f64 (*.f64 (-.f64 1 x) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 (neg.f64 (*.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (-.f64 1 x) y)) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 x) y) (*.f64 0 (*.f64 (-.f64 1 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 x -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 x) y)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) y) 2)) (cbrt.f64 (*.f64 (-.f64 1 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 x -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (-.f64 1 x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (-.f64 1 x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) y) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (*.f64 y (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x -1) y)) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) y) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x -1) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (+.f64 -1 (pow.f64 x 3))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 x 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) y)) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) y) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y (-.f64 1 (pow.f64 x 3)))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 x) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 x) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 x) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 x) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 x -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y y)) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 y) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) -1 (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 y) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1 (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 y (neg.f64 (*.f64 x y)))))))"]],"rules":[["egg-rr",52],["egg-rr",69],["egg-rr",71]],"time":38.10595703125,"type":"rewrite"},{"count":[[264,242]],"inputs":[["(/.f64 y (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 y (-.f64 1 x)) (*.f64 (pow.f64 y 2) (-.f64 x 1)))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 1 x)) (+.f64 (*.f64 y (-.f64 1 x)) (*.f64 (pow.f64 y 2) (-.f64 x 1))))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 1 x)) (+.f64 (*.f64 y (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 4) (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 x 1)))))","(-.f64 1 x)","(-.f64 (+.f64 1 (/.f64 x y)) (+.f64 (/.f64 1 y) x))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) x)))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (/.f64 1 (pow.f64 y 3)) x))))","(-.f64 1 x)","(-.f64 (+.f64 1 (/.f64 x y)) (+.f64 (/.f64 1 y) x))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 2))) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) x))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 2))) (+.f64 1 (/.f64 x y)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 3)) x)))","(-.f64 1 (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","1","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (+.f64 (*.f64 y (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 1 x))))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 x 1)) (+.f64 1 (+.f64 (*.f64 y (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 1 x)))))","x","(-.f64 (+.f64 (/.f64 1 y) x) (/.f64 x y))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) (pow.f64 y 2))) x)) (/.f64 x y))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) (pow.f64 y 2))) x))) (+.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x y)))","x","(+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) x)","(-.f64 (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) x)) (/.f64 1 (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 3))) x))) (/.f64 1 (pow.f64 y 2)))","y","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 y (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y)))","(neg.f64 (/.f64 (*.f64 y x) (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y)))","(neg.f64 (/.f64 (*.f64 y x) (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 y (-.f64 1 x)) (*.f64 (pow.f64 y 2) (-.f64 x 1)))","(fma.f64 y (-.f64 1 x) (*.f64 (*.f64 y y) (+.f64 x -1)))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 1 x)) (+.f64 (*.f64 y (-.f64 1 x)) (*.f64 (pow.f64 y 2) (-.f64 x 1))))","(+.f64 (*.f64 (-.f64 1 x) (+.f64 (pow.f64 y 3) y)) (*.f64 (*.f64 y y) (+.f64 x -1)))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 1 x)) (+.f64 (*.f64 y (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 4) (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 x 1)))))","(+.f64 (*.f64 (-.f64 1 x) (+.f64 (pow.f64 y 3) y)) (*.f64 (+.f64 x -1) (+.f64 (pow.f64 y 4) (*.f64 y y))))","(-.f64 1 x)","(-.f64 (+.f64 1 (/.f64 x y)) (+.f64 (/.f64 1 y) x))","(-.f64 (+.f64 1 (/.f64 (+.f64 x -1) y)) x)","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) x)))","(-.f64 (+.f64 (pow.f64 y -2) (+.f64 1 (/.f64 (+.f64 x -1) y))) (fma.f64 x (pow.f64 y -2) x))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (/.f64 1 (pow.f64 y 3)) x))))","(-.f64 (+.f64 (fma.f64 x (pow.f64 y -3) (pow.f64 y -2)) (+.f64 1 (/.f64 (+.f64 x -1) y))) (+.f64 (fma.f64 x (pow.f64 y -2) (pow.f64 y -3)) x))","(-.f64 1 x)","(-.f64 (+.f64 1 (/.f64 x y)) (+.f64 (/.f64 1 y) x))","(-.f64 (+.f64 1 (/.f64 (+.f64 x -1) y)) x)","(-.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 2))) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) x))","(-.f64 (+.f64 (+.f64 (/.f64 (/.f64 (-.f64 1 x) y) y) 1) (/.f64 (+.f64 x -1) y)) x)","(-.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 2))) (+.f64 1 (/.f64 x y)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 3)) x)))","(fma.f64 x (pow.f64 y -3) (-.f64 (+.f64 (+.f64 (/.f64 (/.f64 (-.f64 1 x) y) y) 1) (/.f64 (+.f64 x -1) y)) (+.f64 (pow.f64 y -3) x)))","(-.f64 1 (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","1","(+.f64 1 (*.f64 y (-.f64 x 1)))","(fma.f64 (+.f64 x -1) y 1)","(+.f64 1 (+.f64 (*.f64 y (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 1 x))))","(+.f64 (fma.f64 (+.f64 x -1) y 1) (*.f64 (*.f64 y y) (-.f64 1 x)))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 x 1)) (+.f64 1 (+.f64 (*.f64 y (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 1 x)))))","(+.f64 (fma.f64 (pow.f64 y 3) (+.f64 x -1) 1) (fma.f64 y (+.f64 x -1) (*.f64 (*.f64 y y) (-.f64 1 x))))","x","(-.f64 (+.f64 (/.f64 1 y) x) (/.f64 x y))","(neg.f64 (-.f64 (/.f64 (+.f64 x -1) y) x))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) (pow.f64 y 2))) x)) (/.f64 x y))","(neg.f64 (-.f64 (/.f64 (+.f64 x -1) y) (+.f64 (/.f64 (/.f64 (+.f64 x -1) y) y) x)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) (pow.f64 y 2))) x))) (+.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x y)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (pow.f64 y -3) (+.f64 (/.f64 (/.f64 (+.f64 x -1) y) y) x))) (fma.f64 x (pow.f64 y -3) (/.f64 x y)))","x","(+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) x)","(+.f64 (/.f64 (-.f64 1 x) y) x)","(-.f64 (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) x)) (/.f64 1 (pow.f64 y 2)))","(+.f64 (+.f64 (/.f64 (-.f64 1 x) y) x) (/.f64 (/.f64 (+.f64 x -1) y) y))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 3))) x))) (/.f64 1 (pow.f64 y 2)))","(+.f64 (+.f64 (+.f64 (/.f64 (-.f64 1 x) y) x) (*.f64 (-.f64 1 x) (pow.f64 y -3))) (/.f64 (/.f64 (+.f64 x -1) y) y))","y","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))"]],"time":225.775146484375,"type":"simplify"},{"compiler":[[4651,3412]],"time":56.447998046875,"type":"eval"},{"alts":[["(-.f64 (+.f64 (/.f64 1 y) (+.f64 (pow.f64 y -3) (+.f64 (/.f64 (/.f64 (+.f64 x -1) y) y) x))) (fma.f64 x (pow.f64 y -3) (/.f64 x y)))","fresh",32.67176631137252],["(/.f64 (-.f64 (-.f64 -1 y) (*.f64 (+.f64 x -1) y)) (-.f64 -1 y))","fresh",21.654026759201518],["(-.f64 1 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x)))","next",14.045455178836026],["(fma.f64 (*.f64 (-.f64 1 x) y) (/.f64 1 (-.f64 -1 y)) 1)","fresh",22.14654493077573]],"compiler":[[28,18],[15,11],[13,10],[14,11],[28,18],[15,11],[13,10],[14,11]],"count":[[243,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[242,4],"picked":[1,0]}],"min-error":[0.00390625],"time":76.553955078125,"type":"prune"},{"compiler":[[36,24]],"locations":[["(*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x))",0.00390625,true],["(/.f64 y (+.f64 y 1))",0.00390625,true],["(-.f64 1 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x)))",3.3242703878583133,true]],"time":8.47998046875,"type":"localize"},{"count":[[3,60]],"series":[["(*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x))","x","-inf",0.176025390625],["(*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x))","x","inf",0.16015625],["(*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x))","x","0",0.177001953125],["(*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x))","y","-inf",0.1708984375],["(*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x))","y","inf",0.172119140625],["(*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x))","y","0",0.191162109375],["(/.f64 y (+.f64 y 1))","y","-inf",0.176025390625],["(/.f64 y (+.f64 y 1))","y","inf",0.214111328125],["(/.f64 y (+.f64 y 1))","y","0",0.198974609375],["(-.f64 1 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x)))","x","-inf",0.18994140625],["(-.f64 1 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x)))","x","inf",0.1728515625],["(-.f64 1 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x)))","x","0",0.1669921875],["(-.f64 1 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x)))","y","-inf",0.2080078125],["(-.f64 1 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x)))","y","inf",0.19482421875],["(-.f64 1 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x)))","y","0",0.236083984375]],"time":3.0,"type":"series"},{"count":[[3,227]],"inputs":[["(-.f64 1 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x)))","(/.f64 y (+.f64 y 1))","(*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1) 0) (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1) (*.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1)) (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1) (*.f64 0 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (/.f64 y (-.f64 -1 y))) (*.f64 (/.f64 y (-.f64 -1 y)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (-.f64 -1 y)) (+.f64 (*.f64 (/.f64 y (-.f64 -1 y)) (neg.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)) (neg.f64 (/.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3) (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)) (/.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3) (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 (/.f64 y (+.f64 y 1))) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x) -1))) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 2)) (cbrt.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))))) (-.f64 1 (cbrt.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1)) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1) 2)) (cbrt.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1)) 3)) (/.f64 1 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)) (+.f64 1 (pow.f64 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3)) (/.f64 1 (neg.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x) -1)) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3) 3)) (/.f64 1 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1))) (+.f64 1 (+.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 6) (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1)) 3)) (cbrt.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1))) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 y 1) (fma.f64 x x (+.f64 1 x))) (*.f64 y (-.f64 1 (pow.f64 x 3)))) (*.f64 (+.f64 y 1) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 -1 y) (fma.f64 x x (+.f64 1 x))) (*.f64 (neg.f64 y) (-.f64 1 (pow.f64 x 3)))) (*.f64 (-.f64 -1 y) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1) (*.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1) (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3))) (*.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1) (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1)) 3)) (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3)) (neg.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1) 2)) (cbrt.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1)) 3)))) (cbrt.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1)) 3))) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1) 2))) (cbrt.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3)) 1) (neg.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (fma.f64 x x (+.f64 1 x)) (*.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 (pow.f64 x 3)))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1))) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y (+.f64 x -1)) 1) (+.f64 y 1)) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 (pow.f64 x 3))) 1) (fma.f64 x x (+.f64 1 x))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (-.f64 -1 y) (*.f64 y (+.f64 x -1))) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 x x (+.f64 1 x)) (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 (pow.f64 x 3)))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 y 1) (*.f64 y (-.f64 1 x))) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2)) (/.f64 (*.f64 y (-.f64 1 x)) (cbrt.f64 (+.f64 y 1)))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x -1) (/.f64 y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 y (-.f64 -1 y)) (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 x) (/.f64 y (-.f64 -1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y (+.f64 y 1)) 0) (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 (/.f64 y (+.f64 y 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 y (+.f64 y 1))) (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 0 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 y (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 y)) (/.f64 y (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (cbrt.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (cbrt.f64 (/.f64 (*.f64 y y) (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (/.f64 (cbrt.f64 (*.f64 y y)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y 1)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) (/.f64 y (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 y (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 y y) (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (-.f64 -1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (+.f64 y 1)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (pow.f64 (cbrt.f64 (+.f64 y 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 y) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (cbrt.f64 (neg.f64 y))) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (cbrt.f64 y)) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) 1) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (cbrt.f64 (/.f64 (*.f64 y y) (pow.f64 (+.f64 y 1) 2)))) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2))) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (/.f64 (*.f64 y y) (pow.f64 (+.f64 y 1) 2)))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 y) (cbrt.f64 (+.f64 y 1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y -1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) 1) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 y (cbrt.f64 (+.f64 y 1)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 y (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)) (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 0) (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (*.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y (-.f64 -1 y)) x) (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 -1 (*.f64 (/.f64 y (-.f64 -1 y)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))) (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (*.f64 0 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (/.f64 y (-.f64 -1 y))) (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 (*.f64 (/.f64 y (-.f64 -1 y)) (neg.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (-.f64 -1 y)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (/.f64 (-.f64 1 x) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 2)) (cbrt.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) (cbrt.f64 (/.f64 y (+.f64 y 1)))) (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 1 x)) (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y (+.f64 y 1)) (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) (/.f64 y (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y 1)) (*.f64 y (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (/.f64 y (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (*.f64 (/.f64 y (+.f64 y 1)) (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (-.f64 1 x)) (cbrt.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (*.f64 (-.f64 1 x) (cbrt.f64 (/.f64 y (+.f64 y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (/.f64 y (+.f64 y 1))) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (+.f64 y 1)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y (-.f64 -1 y)) (cbrt.f64 (-.f64 1 x))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (+.f64 x -1)) (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) (/.f64 1 (*.f64 (+.f64 y 1) (fma.f64 x x (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 y) (-.f64 1 (pow.f64 x 3))) (/.f64 1 (*.f64 (-.f64 -1 y) (fma.f64 x x (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (-.f64 1 x)) (cbrt.f64 (+.f64 y 1))) (pow.f64 (cbrt.f64 (+.f64 y 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) (*.f64 (+.f64 y 1) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (-.f64 1 (pow.f64 x 3))) (*.f64 (-.f64 -1 y) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 y) (-.f64 1 (pow.f64 x 3))) 1) (*.f64 (-.f64 -1 y) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) 1) (*.f64 (+.f64 y 1) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y (-.f64 1 x)) (cbrt.f64 (+.f64 y 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (neg.f64 y) (-.f64 1 (pow.f64 x 3)))) (neg.f64 (*.f64 (-.f64 -1 y) (fma.f64 x x (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (+.f64 x -1)) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 (pow.f64 x 3))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 1 x)) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (-.f64 1 x)) -1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 (pow.f64 x 3)))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (-.f64 1 x)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (/.f64 y (cbrt.f64 (+.f64 y 1)))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (-.f64 -1 y)) (+.f64 -1 (pow.f64 x 3))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 2)) (cbrt.f64 (*.f64 y (-.f64 1 x)))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (/.f64 (-.f64 1 x) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (-.f64 1 x))) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (-.f64 1 x))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 y (-.f64 1 x))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 2))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (+.f64 x -1)) 1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 (pow.f64 x 3))) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y (-.f64 1 x)) (cbrt.f64 (+.f64 y 1))) 1) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) (/.f64 1 (+.f64 y 1))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 (pow.f64 x 3))) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (+.f64 x -1)) (cbrt.f64 (+.f64 y 1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (+.f64 x -1)) 1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 1 x)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 1 x)) -1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y (-.f64 1 x)) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y (-.f64 1 x)) (cbrt.f64 (+.f64 y 1))) 1) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 y (-.f64 1 x)) (cbrt.f64 (+.f64 y 1)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (+.f64 y 1)) (+.f64 -1 (pow.f64 x 3))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 x 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (/.f64 y (+.f64 y 1)))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (/.f64 y (+.f64 y 1))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 (pow.f64 x 3))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 y (-.f64 -1 y)) 3) (pow.f64 (+.f64 x -1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (cbrt.f64 (/.f64 (*.f64 y y) (pow.f64 (+.f64 y 1) 2))) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 (+.f64 y 1)) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (/.f64 1 (-.f64 -1 y)) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 y (-.f64 -1 y)) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (/.f64 (cbrt.f64 (*.f64 y y)) (+.f64 y 1)) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (cbrt.f64 (/.f64 y (+.f64 y 1))) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) (/.f64 y (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 y 1)) y (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (+.f64 y 1)) 1 (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y (+.f64 y 1)) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))))"]],"rules":[["egg-rr",101],["egg-rr",50],["egg-rr",76]],"time":41.06396484375,"type":"rewrite"},{"count":[[287,287]],"inputs":[["1","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (+.f64 (*.f64 y (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 1 x))))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 x 1)) (+.f64 1 (+.f64 (*.f64 y (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 1 x)))))","x","(-.f64 (+.f64 (/.f64 1 y) x) (/.f64 x y))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) (pow.f64 y 2))) x)) (/.f64 x y))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) (pow.f64 y 2))) x))) (+.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x y)))","x","(+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) x)","(-.f64 (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) x)) (/.f64 1 (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 3))) x))) (/.f64 1 (pow.f64 y 2)))","(-.f64 1 (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","y","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) (+.f64 y (*.f64 -1 (pow.f64 y 4)))))","1","(-.f64 1 (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","1","(-.f64 1 (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 y (-.f64 1 x)) (*.f64 (pow.f64 y 2) (-.f64 x 1)))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 1 x)) (+.f64 (*.f64 y (-.f64 1 x)) (*.f64 (pow.f64 y 2) (-.f64 x 1))))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 1 x)) (+.f64 (*.f64 y (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 4) (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 x 1)))))","(-.f64 1 x)","(-.f64 (+.f64 1 (/.f64 x y)) (+.f64 (/.f64 1 y) x))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) x)))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (/.f64 1 (pow.f64 y 3)) x))))","(-.f64 1 x)","(-.f64 (+.f64 1 (/.f64 x y)) (+.f64 (/.f64 1 y) x))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 2))) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) x))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 2))) (+.f64 1 (/.f64 x y)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 3)) x)))","(/.f64 y (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (*.f64 y (+.f64 x -1)))","(+.f64 1 (+.f64 (*.f64 y (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 1 x))))","(+.f64 1 (fma.f64 y (+.f64 x -1) (*.f64 (*.f64 y y) (-.f64 1 x))))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 x 1)) (+.f64 1 (+.f64 (*.f64 y (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 1 x)))))","(fma.f64 (pow.f64 y 3) (+.f64 x -1) (+.f64 1 (fma.f64 y (+.f64 x -1) (*.f64 (*.f64 y y) (-.f64 1 x)))))","x","(-.f64 (+.f64 (/.f64 1 y) x) (/.f64 x y))","(neg.f64 (-.f64 (/.f64 (+.f64 x -1) y) x))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) (pow.f64 y 2))) x)) (/.f64 x y))","(neg.f64 (-.f64 (/.f64 (+.f64 x -1) y) (+.f64 (/.f64 (+.f64 x -1) (*.f64 y y)) x)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) (pow.f64 y 2))) x))) (+.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x y)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (pow.f64 y -3) (+.f64 (/.f64 (+.f64 x -1) (*.f64 y y)) x))) (*.f64 x (+.f64 (/.f64 1 y) (pow.f64 y -3))))","x","(+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) x)","(+.f64 (/.f64 (-.f64 1 x) y) x)","(-.f64 (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) x)) (/.f64 1 (pow.f64 y 2)))","(+.f64 (+.f64 (/.f64 (-.f64 1 x) y) x) (/.f64 (+.f64 x -1) (*.f64 y y)))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 3))) x))) (/.f64 1 (pow.f64 y 2)))","(+.f64 (+.f64 (+.f64 (/.f64 (-.f64 1 x) y) x) (*.f64 (-.f64 1 x) (pow.f64 y -3))) (/.f64 (+.f64 x -1) (*.f64 y y)))","(-.f64 1 (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","y","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(-.f64 y (*.f64 y y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) y))","(-.f64 (+.f64 (pow.f64 y 3) y) (*.f64 y y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) (+.f64 y (*.f64 -1 (pow.f64 y 4)))))","(+.f64 (*.f64 (*.f64 y y) (+.f64 -1 y)) (-.f64 y (pow.f64 y 4)))","1","(-.f64 1 (/.f64 1 y))","(+.f64 1 (/.f64 -1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(+.f64 (pow.f64 y -2) (+.f64 1 (/.f64 -1 y)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(-.f64 (+.f64 (pow.f64 y -2) 1) (+.f64 (/.f64 1 y) (pow.f64 y -3)))","1","(-.f64 1 (/.f64 1 y))","(+.f64 1 (/.f64 -1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(+.f64 (pow.f64 y -2) (+.f64 1 (/.f64 -1 y)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(-.f64 (+.f64 (pow.f64 y -2) 1) (+.f64 (/.f64 1 y) (pow.f64 y -3)))","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 y (-.f64 1 x)) (*.f64 (pow.f64 y 2) (-.f64 x 1)))","(fma.f64 y (-.f64 1 x) (*.f64 (*.f64 y y) (+.f64 x -1)))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 1 x)) (+.f64 (*.f64 y (-.f64 1 x)) (*.f64 (pow.f64 y 2) (-.f64 x 1))))","(+.f64 (*.f64 (-.f64 1 x) (+.f64 (pow.f64 y 3) y)) (*.f64 (*.f64 y y) (+.f64 x -1)))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 1 x)) (+.f64 (*.f64 y (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 4) (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 x 1)))))","(+.f64 (*.f64 (-.f64 1 x) (+.f64 (pow.f64 y 3) y)) (*.f64 (+.f64 x -1) (+.f64 (pow.f64 y 4) (*.f64 y y))))","(-.f64 1 x)","(-.f64 (+.f64 1 (/.f64 x y)) (+.f64 (/.f64 1 y) x))","(-.f64 (+.f64 1 (/.f64 (+.f64 x -1) y)) x)","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) x)))","(-.f64 (+.f64 (+.f64 (pow.f64 y -2) 1) (/.f64 (+.f64 x -1) y)) (+.f64 (/.f64 x (*.f64 y y)) x))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (/.f64 1 (pow.f64 y 3)) x))))","(+.f64 (*.f64 x (pow.f64 y -3)) (-.f64 (+.f64 (+.f64 (pow.f64 y -2) 1) (/.f64 (+.f64 x -1) y)) (+.f64 (+.f64 (/.f64 x (*.f64 y y)) (pow.f64 y -3)) x)))","(-.f64 1 x)","(-.f64 (+.f64 1 (/.f64 x y)) (+.f64 (/.f64 1 y) x))","(-.f64 (+.f64 1 (/.f64 (+.f64 x -1) y)) x)","(-.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 2))) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) x))","(-.f64 (+.f64 (+.f64 (/.f64 (-.f64 1 x) (*.f64 y y)) 1) (/.f64 (+.f64 x -1) y)) x)","(-.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 2))) (+.f64 1 (/.f64 x y)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 3)) x)))","(+.f64 (*.f64 x (pow.f64 y -3)) (-.f64 (+.f64 (+.f64 (/.f64 (-.f64 1 x) (*.f64 y y)) 1) (/.f64 (+.f64 x -1) y)) (+.f64 (pow.f64 y -3) x)))","(/.f64 y (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y)))","(neg.f64 (/.f64 (*.f64 y x) (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y)))","(neg.f64 (/.f64 (*.f64 y x) (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))"]],"time":195.927001953125,"type":"simplify"},{"compiler":[[5474,3996]],"time":67.055908203125,"type":"eval"},{"alts":[["(-.f64 1 (*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x)))","next",14.137544847367954],["(/.f64 (+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1))) (+.f64 y 1))","fresh",21.654026759201518],["(-.f64 (+.f64 (/.f64 1 y) (+.f64 (pow.f64 y -3) (+.f64 (/.f64 (/.f64 (+.f64 x -1) y) y) x))) (fma.f64 x (pow.f64 y -3) (/.f64 x y)))","fresh",32.67176631137252]],"compiler":[[15,12],[15,11],[28,18],[15,12],[15,11],[28,18]],"count":[[291,3]],"kept":[{"done":[0,0],"fresh":[3,1],"new":[287,2],"picked":[1,0]}],"min-error":[0.00390625],"time":101.3291015625,"type":"prune"},{"compiler":[[47,34]],"locations":[["(*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x))",0.00390625,true],["(/.f64 1 (+.f64 y 1))",0.0078125,true],["(*.f64 (/.f64 1 (+.f64 y 1)) y)",0.0703125,true],["(-.f64 1 (*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x)))",5.014271221229305,true]],"time":10.97998046875,"type":"localize"},{"count":[[4,72]],"series":[["(*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x))","x","-inf",0.178955078125],["(*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x))","x","inf",0.162109375],["(*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x))","x","0",0.176025390625],["(*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x))","y","-inf",0.1728515625],["(*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x))","y","inf",0.174072265625],["(*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x))","y","0",0.19384765625],["(/.f64 1 (+.f64 y 1))","y","-inf",0.19921875],["(/.f64 1 (+.f64 y 1))","y","inf",0.26318359375],["(/.f64 1 (+.f64 y 1))","y","0",0.239990234375],["(*.f64 (/.f64 1 (+.f64 y 1)) y)","y","-inf",0.1630859375],["(*.f64 (/.f64 1 (+.f64 y 1)) y)","y","inf",0.150146484375],["(*.f64 (/.f64 1 (+.f64 y 1)) y)","y","0",0.152099609375],["(-.f64 1 (*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x)))","x","-inf",0.18701171875],["(-.f64 1 (*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x)))","x","inf",0.1728515625],["(-.f64 1 (*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x)))","x","0",0.18701171875],["(-.f64 1 (*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x)))","y","-inf",0.19189453125],["(-.f64 1 (*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x)))","y","inf",0.217041015625],["(-.f64 1 (*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x)))","y","0",0.22705078125]],"time":3.639892578125,"type":"series"},{"count":[[4,255]],"inputs":[["(-.f64 1 (*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x)))","(*.f64 (/.f64 1 (+.f64 y 1)) y)","(/.f64 1 (+.f64 y 1))","(*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1) (*.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1) 0) (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1) (*.f64 0 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1)) (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (/.f64 y (-.f64 -1 y))) (*.f64 (/.f64 y (-.f64 -1 y)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (-.f64 -1 y)) (+.f64 (*.f64 (/.f64 y (-.f64 -1 y)) (neg.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)) (neg.f64 (/.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3) (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)) (/.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3) (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 (/.f64 y (+.f64 y 1))) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x) -1))) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 2)) (cbrt.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))))) (-.f64 1 (cbrt.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1)) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1) 2)) (cbrt.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y)) 3)) (/.f64 1 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)) (+.f64 1 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3)) (/.f64 1 (neg.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x) -1)) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3) 3)) (/.f64 1 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1))) (+.f64 1 (+.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 6) (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y)) 3)) (cbrt.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1))) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 y 1) (fma.f64 x (+.f64 1 x) 1)) (*.f64 y (-.f64 1 (pow.f64 x 3)))) (*.f64 (+.f64 y 1) (fma.f64 x (+.f64 1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1) (*.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1) (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3))) (*.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1) (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3)) (neg.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y)) 3)) (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1) 2)) (cbrt.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y)) 3)))) (cbrt.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3)) 1) (neg.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y)) 3))) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1) 2))) (cbrt.f64 (fma.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (fma.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (fma.f64 x (+.f64 1 x) 1) (*.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 (pow.f64 x 3)))) (fma.f64 x (+.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 (pow.f64 x 3))) 1) (fma.f64 x (+.f64 1 x) 1)) (fma.f64 x (+.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 x (+.f64 1 x) 1) (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 (pow.f64 x 3)))) (fma.f64 x (+.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 y 1) (*.f64 y (-.f64 1 x))) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (-.f64 -1 y) (*.f64 y (+.f64 x -1))) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x -1) (/.f64 y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (+.f64 y 1)) (+.f64 x -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 x) (/.f64 y (-.f64 -1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 y (-.f64 -1 y)) (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 y 1)) (*.f64 y (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 -1 y)) (*.f64 y (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 x) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 (/.f64 y (+.f64 y 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y (+.f64 y 1)) 0) (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 0 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 y (+.f64 y 1))) (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (cbrt.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (/.f64 (cbrt.f64 (*.f64 y y)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y 1)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 y) (+.f64 y 1)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 y (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (+.f64 y 1)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (/.f64 (cbrt.f64 y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) y) (cbrt.f64 (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (-.f64 -1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) (/.f64 y (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 y) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (cbrt.f64 y)) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) y) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) y)) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) 1) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) 1) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 y) (cbrt.f64 (+.f64 y 1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y -1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 y (cbrt.f64 (+.f64 y 1)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 y (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 y 1)) (*.f64 (/.f64 1 (+.f64 y 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 y 1)) 0) (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 y 1)) (*.f64 0 (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 1 (+.f64 y 1))) (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 y 1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) (cbrt.f64 (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 y))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2))) (cbrt.f64 (/.f64 1 (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 y))) -1) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) -1) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2))) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 y))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (-.f64 -1 y)) (-.f64 -1 y)) (*.f64 (-.f64 -1 y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 y 1) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 y 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 y 1) 3) (neg.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 y 1)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 y 1) -3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)) (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y (-.f64 -1 y)) x) (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (*.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 0) (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 -1 (*.f64 (/.f64 y (-.f64 -1 y)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 (/.f64 1 (+.f64 y 1)) (neg.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (/.f64 y (-.f64 -1 y))) (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) (*.f64 0 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))) (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 (*.f64 (/.f64 y (-.f64 -1 y)) (neg.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 (neg.f64 (*.f64 x y)) (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (neg.f64 (*.f64 (/.f64 y (-.f64 -1 y)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (-.f64 -1 y)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y 1)) (*.f64 y (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 2)) (cbrt.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 1 x)) (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (+.f64 y 1)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) (cbrt.f64 (/.f64 y (+.f64 y 1)))) (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y (+.f64 y 1)) (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 (-.f64 1 x) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) (*.f64 y (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) (/.f64 y (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (-.f64 1 x)) (cbrt.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (/.f64 y (+.f64 y 1))) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (*.f64 (/.f64 y (+.f64 y 1)) (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (*.f64 (-.f64 1 x) (cbrt.f64 (/.f64 y (+.f64 y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) (*.f64 y (-.f64 1 x))) (cbrt.f64 (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (/.f64 y (-.f64 -1 y)) (cbrt.f64 (-.f64 1 x)))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 y)) (*.f64 y (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y (-.f64 -1 y)) (cbrt.f64 (-.f64 1 x))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) (/.f64 1 (*.f64 (+.f64 y 1) (fma.f64 x (+.f64 1 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (+.f64 x -1)) (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x (+.f64 1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) (*.f64 (+.f64 y 1) (fma.f64 x (+.f64 1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) 1) (*.f64 (+.f64 y 1) (fma.f64 x (+.f64 1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x (+.f64 1 x) 1))) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 1 x) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y (-.f64 1 (pow.f64 x 3)))) (neg.f64 (*.f64 (+.f64 y 1) (fma.f64 x (+.f64 1 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 (pow.f64 x 3))) (fma.f64 x (+.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (+.f64 x -1)) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 (pow.f64 x 3)))) (fma.f64 x (+.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (/.f64 y (cbrt.f64 (+.f64 y 1)))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (+.f64 y 1)) (*.f64 y (-.f64 1 (pow.f64 x 3)))) (fma.f64 x (+.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (-.f64 -1 y)) (+.f64 -1 (pow.f64 x 3))) (fma.f64 x (+.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (-.f64 1 x)) (cbrt.f64 (/.f64 1 (+.f64 y 1)))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (-.f64 1 x))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 (pow.f64 x 3))) 1) (fma.f64 x (+.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (+.f64 x -1)) 1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) (*.f64 y (-.f64 1 x))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) (*.f64 y (-.f64 1 x)))) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (-.f64 1 x)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) (/.f64 1 (+.f64 y 1))) (fma.f64 x (+.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) (*.f64 y (-.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 (pow.f64 x 3))) 1) (fma.f64 x (+.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (+.f64 x -1)) -1) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (+.f64 x -1)) (cbrt.f64 (+.f64 y 1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (+.f64 x -1)) (cbrt.f64 (-.f64 -1 y))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 1 x)) -1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 1 x)) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 1 x)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 (pow.f64 x 3)))) (fma.f64 x (+.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (+.f64 y 1)) (+.f64 -1 (pow.f64 x 3))) (neg.f64 (fma.f64 x (+.f64 1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (/.f64 y (+.f64 y 1))) (neg.f64 (fma.f64 x (+.f64 1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 x 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (/.f64 y (+.f64 y 1)))) (cbrt.f64 (fma.f64 x (+.f64 1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (-.f64 -1 y)) (-.f64 1 (pow.f64 x 3))) (neg.f64 (fma.f64 x (+.f64 1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 y (-.f64 1 x)) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 1 x)) (+.f64 y 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 y (-.f64 -1 y)) 3) (pow.f64 (+.f64 x -1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (/.f64 (cbrt.f64 (*.f64 y y)) (+.f64 y 1)) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 y) (+.f64 y 1)) (cbrt.f64 (*.f64 y y)) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) y) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 y (-.f64 -1 y)) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 (+.f64 y 1)) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 y 1)) y (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (cbrt.f64 (/.f64 y (+.f64 y 1))) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y (+.f64 y 1)) (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (+.f64 y 1)) 1 (*.f64 (/.f64 y (+.f64 y 1)) (neg.f64 x)))))))"]],"rules":[["egg-rr",99],["egg-rr",38],["egg-rr",44],["egg-rr",74]],"time":44.384033203125,"type":"rewrite"},{"count":[[327,328]],"inputs":[["1","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (+.f64 (*.f64 y (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 1 x))))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 x 1)) (+.f64 1 (+.f64 (*.f64 y (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 1 x)))))","x","(-.f64 (+.f64 (/.f64 1 y) x) (/.f64 x y))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) (pow.f64 y 2))) x)) (/.f64 x y))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) (pow.f64 y 2))) x))) (+.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x y)))","x","(+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) x)","(-.f64 (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) x)) (/.f64 1 (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 3))) x))) (/.f64 1 (pow.f64 y 2)))","(-.f64 1 (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","y","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) (+.f64 y (*.f64 -1 (pow.f64 y 4)))))","1","(-.f64 1 (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","1","(-.f64 1 (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","1","(+.f64 1 (*.f64 -1 y))","(+.f64 1 (+.f64 (pow.f64 y 2) (*.f64 -1 y)))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 y 3)) (+.f64 (pow.f64 y 2) (*.f64 -1 y))))","(/.f64 1 y)","(-.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))) (/.f64 1 (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 1 (pow.f64 y 4))))","(/.f64 1 y)","(-.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))) (/.f64 1 (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 1 (pow.f64 y 4))))","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 y (-.f64 1 x)) (*.f64 (pow.f64 y 2) (-.f64 x 1)))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 1 x)) (+.f64 (*.f64 y (-.f64 1 x)) (*.f64 (pow.f64 y 2) (-.f64 x 1))))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 1 x)) (+.f64 (*.f64 y (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 4) (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 x 1)))))","(-.f64 1 x)","(-.f64 (+.f64 1 (/.f64 x y)) (+.f64 (/.f64 1 y) x))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) x)))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (/.f64 1 (pow.f64 y 3)) x))))","(-.f64 1 x)","(-.f64 (+.f64 1 (/.f64 x y)) (+.f64 (/.f64 1 y) x))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 2))) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) x))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 2))) (+.f64 1 (/.f64 x y)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 3)) x)))","(/.f64 y (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (*.f64 y (+.f64 x -1)))","(+.f64 1 (+.f64 (*.f64 y (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 1 x))))","(+.f64 1 (fma.f64 y (+.f64 x -1) (*.f64 (*.f64 y y) (-.f64 1 x))))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 x 1)) (+.f64 1 (+.f64 (*.f64 y (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 1 x)))))","(fma.f64 (pow.f64 y 3) (+.f64 x -1) (+.f64 1 (fma.f64 y (+.f64 x -1) (*.f64 (*.f64 y y) (-.f64 1 x)))))","x","(-.f64 (+.f64 (/.f64 1 y) x) (/.f64 x y))","(neg.f64 (-.f64 (/.f64 (+.f64 x -1) y) x))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) (pow.f64 y 2))) x)) (/.f64 x y))","(neg.f64 (-.f64 (/.f64 (+.f64 x -1) y) (+.f64 (/.f64 (+.f64 x -1) (*.f64 y y)) x)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) (pow.f64 y 2))) x))) (+.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x y)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (pow.f64 y -3) (+.f64 (/.f64 (+.f64 x -1) (*.f64 y y)) x))) (*.f64 x (+.f64 (/.f64 1 y) (pow.f64 y -3))))","x","(+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) x)","(+.f64 (/.f64 (-.f64 1 x) y) x)","(-.f64 (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) x)) (/.f64 1 (pow.f64 y 2)))","(+.f64 (+.f64 (/.f64 (-.f64 1 x) y) x) (/.f64 (+.f64 x -1) (*.f64 y y)))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 3))) x))) (/.f64 1 (pow.f64 y 2)))","(+.f64 (+.f64 (+.f64 (/.f64 (-.f64 1 x) y) x) (*.f64 (-.f64 1 x) (pow.f64 y -3))) (/.f64 (+.f64 x -1) (*.f64 y y)))","(-.f64 1 (/.f64 y (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","(-.f64 (+.f64 1 (/.f64 (*.f64 y x) (+.f64 1 y))) (/.f64 y (+.f64 1 y)))","(+.f64 1 (/.f64 (-.f64 (*.f64 y x) y) (+.f64 1 y)))","y","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(-.f64 y (*.f64 y y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) y))","(+.f64 (*.f64 (*.f64 y y) (+.f64 -1 y)) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) (+.f64 y (*.f64 -1 (pow.f64 y 4)))))","(+.f64 (*.f64 (*.f64 y y) (+.f64 -1 y)) (-.f64 y (pow.f64 y 4)))","1","(-.f64 1 (/.f64 1 y))","(+.f64 1 (/.f64 -1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(+.f64 1 (+.f64 (pow.f64 y -2) (/.f64 -1 y)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(-.f64 (+.f64 (pow.f64 y -2) 1) (+.f64 (/.f64 1 y) (pow.f64 y -3)))","1","(-.f64 1 (/.f64 1 y))","(+.f64 1 (/.f64 -1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(+.f64 1 (+.f64 (pow.f64 y -2) (/.f64 -1 y)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(-.f64 (+.f64 (pow.f64 y -2) 1) (+.f64 (/.f64 1 y) (pow.f64 y -3)))","1","(+.f64 1 (*.f64 -1 y))","(-.f64 1 y)","(+.f64 1 (+.f64 (pow.f64 y 2) (*.f64 -1 y)))","(+.f64 1 (*.f64 y (+.f64 -1 y)))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 y 3)) (+.f64 (pow.f64 y 2) (*.f64 -1 y))))","(+.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 y (+.f64 -1 y)))","(/.f64 1 y)","(-.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 2)))","(-.f64 (/.f64 1 y) (pow.f64 y -2))","(-.f64 (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))) (/.f64 1 (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 1 y) (pow.f64 y -3)) (pow.f64 y -2))","(-.f64 (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 1 (pow.f64 y 4))))","(-.f64 (+.f64 (/.f64 1 y) (pow.f64 y -3)) (+.f64 (pow.f64 y -4) (pow.f64 y -2)))","(/.f64 1 y)","(-.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 2)))","(-.f64 (/.f64 1 y) (pow.f64 y -2))","(-.f64 (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))) (/.f64 1 (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 1 y) (pow.f64 y -3)) (pow.f64 y -2))","(-.f64 (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 1 (pow.f64 y 4))))","(-.f64 (+.f64 (/.f64 1 y) (pow.f64 y -3)) (+.f64 (pow.f64 y -4) (pow.f64 y -2)))","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 y (-.f64 1 x)) (*.f64 (pow.f64 y 2) (-.f64 x 1)))","(fma.f64 y (-.f64 1 x) (*.f64 (*.f64 y y) (+.f64 x -1)))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 1 x)) (+.f64 (*.f64 y (-.f64 1 x)) (*.f64 (pow.f64 y 2) (-.f64 x 1))))","(+.f64 (*.f64 (-.f64 1 x) (+.f64 (pow.f64 y 3) y)) (*.f64 (*.f64 y y) (+.f64 x -1)))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 1 x)) (+.f64 (*.f64 y (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 4) (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 x 1)))))","(+.f64 (*.f64 (-.f64 1 x) (+.f64 (pow.f64 y 3) y)) (*.f64 (+.f64 x -1) (+.f64 (pow.f64 y 4) (*.f64 y y))))","(-.f64 1 x)","(-.f64 (+.f64 1 (/.f64 x y)) (+.f64 (/.f64 1 y) x))","(-.f64 (+.f64 1 (/.f64 (+.f64 x -1) y)) x)","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) x)))","(-.f64 (+.f64 (+.f64 (pow.f64 y -2) 1) (/.f64 (+.f64 x -1) y)) (+.f64 (/.f64 x (*.f64 y y)) x))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (/.f64 1 (pow.f64 y 3)) x))))","(+.f64 (*.f64 x (pow.f64 y -3)) (-.f64 (+.f64 (+.f64 (pow.f64 y -2) 1) (/.f64 (+.f64 x -1) y)) (+.f64 (+.f64 (/.f64 x (*.f64 y y)) (pow.f64 y -3)) x)))","(-.f64 1 x)","(-.f64 (+.f64 1 (/.f64 x y)) (+.f64 (/.f64 1 y) x))","(-.f64 (+.f64 1 (/.f64 (+.f64 x -1) y)) x)","(-.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 2))) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) x))","(-.f64 (+.f64 (+.f64 (/.f64 (-.f64 1 x) (*.f64 y y)) 1) (/.f64 (+.f64 x -1) y)) x)","(-.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 2))) (+.f64 1 (/.f64 x y)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 3)) x)))","(+.f64 (*.f64 x (pow.f64 y -3)) (-.f64 (+.f64 (+.f64 (/.f64 (-.f64 1 x) (*.f64 y y)) 1) (/.f64 (+.f64 x -1) y)) (+.f64 (pow.f64 y -3) x)))","(/.f64 y (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y)))","(neg.f64 (/.f64 (*.f64 y x) (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y)))","(neg.f64 (/.f64 (*.f64 y x) (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 y))))","(/.f64 (*.f64 y (-.f64 1 x)) (+.f64 1 y))"]],"time":240.190185546875,"type":"simplify"},{"compiler":[[6141,4565]],"time":77.615966796875,"type":"eval"},{"alts":[["(-.f64 1 (*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x)))","done",14.137544847367954],["(/.f64 (+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1))) (+.f64 y 1))","next",21.654026759201518],["(-.f64 (+.f64 (/.f64 1 y) (+.f64 (pow.f64 y -3) (+.f64 (/.f64 (/.f64 (+.f64 x -1) y) y) x))) (fma.f64 x (pow.f64 y -3) (/.f64 x y)))","fresh",32.67176631137252]],"compiler":[[15,12],[15,11],[28,18],[15,11],[28,18]],"count":[[331,3]],"kept":[{"done":[0,0],"fresh":[2,2],"new":[328,0],"picked":[1,1]}],"min-error":[0.00390625],"time":130.343994140625,"type":"prune"},{"compiler":[[39,26]],"locations":[["(*.f64 y (+.f64 x -1))",0.0078125,true],["(+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1)))",2.9395133039757595,true],["(/.f64 (+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1))) (+.f64 y 1))",7.496197367390936,true]],"time":8.94091796875,"type":"localize"},{"count":[[3,72]],"series":[["(*.f64 y (+.f64 x -1))","x","-inf",0.1650390625],["(*.f64 y (+.f64 x -1))","x","inf",0.14599609375],["(*.f64 y (+.f64 x -1))","x","0",0.15087890625],["(*.f64 y (+.f64 x -1))","y","-inf",0.20703125],["(*.f64 y (+.f64 x -1))","y","inf",0.2041015625],["(*.f64 y (+.f64 x -1))","y","0",0.23486328125],["(+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1)))","x","-inf",0.1611328125],["(+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1)))","x","inf",0.175048828125],["(+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1)))","x","0",0.1650390625],["(+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1)))","y","-inf",0.35400390625],["(+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1)))","y","inf",0.218994140625],["(+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1)))","y","0",0.241943359375],["(/.f64 (+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1))) (+.f64 y 1))","x","-inf",0.43701171875],["(/.f64 (+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1))) (+.f64 y 1))","x","inf",0.43603515625],["(/.f64 (+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1))) (+.f64 y 1))","x","0",0.427978515625],["(/.f64 (+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1))) (+.f64 y 1))","y","-inf",0.30810546875],["(/.f64 (+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1))) (+.f64 y 1))","y","inf",0.2900390625],["(/.f64 (+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1))) (+.f64 y 1))","y","0",0.277099609375]],"time":4.822998046875,"type":"series"},{"count":[[3,236]],"inputs":[["(/.f64 (+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1))) (+.f64 y 1))","(+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1)))","(*.f64 y (+.f64 x -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1)) (*.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1)) 0) (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (*.f64 (/.f64 1 (+.f64 y 1)) (fma.f64 y (+.f64 x -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 y 1)) (fma.f64 y (+.f64 x -1) y)) (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 y 1)) (fma.f64 y (+.f64 x -1) 1)) (*.f64 (/.f64 1 (+.f64 y 1)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 y 1)) (*.f64 (/.f64 1 (+.f64 y 1)) (fma.f64 y (+.f64 x -1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 y 1)) (*.f64 y x)) (*.f64 (/.f64 1 (+.f64 y 1)) (+.f64 (-.f64 1 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 y 1)) (+.f64 (+.f64 y 1) (*.f64 y x))) (*.f64 (/.f64 1 (+.f64 y 1)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 y 1)) (+.f64 y 1)) (*.f64 (/.f64 1 (+.f64 y 1)) (*.f64 y (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 y 1)) (*.f64 y (+.f64 x -1))) (*.f64 (/.f64 1 (+.f64 y 1)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1)) (*.f64 0 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1))) (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (/.f64 1 (+.f64 y 1))) (*.f64 (fma.f64 y (+.f64 x -1) 1) (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (+.f64 x -1) y) (/.f64 1 (+.f64 y 1))) (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (+.f64 x -1) 1) (/.f64 1 (+.f64 y 1))) (*.f64 y (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 y 1)) (*.f64 (fma.f64 y (+.f64 x -1) y) (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y x) (/.f64 1 (+.f64 y 1))) (*.f64 (+.f64 (-.f64 1 y) y) (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (+.f64 y 1) (*.f64 y x)) (/.f64 1 (+.f64 y 1))) (*.f64 (neg.f64 y) (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 y 1) (/.f64 1 (+.f64 y 1))) (*.f64 (*.f64 y (+.f64 x -1)) (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (+.f64 x -1)) (/.f64 1 (+.f64 y 1))) (*.f64 (+.f64 y 1) (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 y)) (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))) (cbrt.f64 (-.f64 -1 y))) (/.f64 (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))) -1) (/.f64 (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2))) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 -1 (fma.f64 y (+.f64 x -1) y))) 1) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2)) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 -1 (fma.f64 y (+.f64 x -1) y))) (cbrt.f64 (+.f64 y 1))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))) (+.f64 (pow.f64 y 3) 1)) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2)) (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2)) (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (pow.f64 y 3) 1)) (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2)) (+.f64 (pow.f64 y 3) 1)) (/.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))) (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2)) -1) (/.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2)) (cbrt.f64 (+.f64 y 1))) (/.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 (pow.f64 y 3) 1)) (/.f64 (-.f64 -1 (fma.f64 y (+.f64 x -1) y)) (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (fma.f64 y (+.f64 x -1) y)) (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y 1)) (fma.f64 (+.f64 x -1) y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1)) 2)) (cbrt.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (-.f64 -1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2)) (+.f64 y 1)) (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 y)) (-.f64 -1 (fma.f64 y (+.f64 x -1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (cbrt.f64 (+.f64 y 1))) (pow.f64 (cbrt.f64 (+.f64 y 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 y))) (/.f64 (-.f64 -1 (fma.f64 y (+.f64 x -1) y)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 y))) (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))) -1) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2)) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))) (+.f64 y 1)) (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 y 1)) -2) (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2)) (/.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) -1) (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (+.f64 y 1)) -2)) (/.f64 (-.f64 -1 (fma.f64 y (+.f64 x -1) y)) (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (fma.f64 y (+.f64 x -1) y)) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1)) 2)) (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1)) 2)) (cbrt.f64 (-.f64 -1 (fma.f64 y (+.f64 x -1) y)))) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) (fma.f64 (+.f64 x -1) y (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1))) (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 -1 (fma.f64 y (+.f64 x -1) y))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1)) 2))) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (cbrt.f64 (+.f64 y 1))) 1) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 -1 (fma.f64 y (+.f64 x -1) y)) (cbrt.f64 (+.f64 y 1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) -1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (cbrt.f64 (+.f64 y 1))) 1) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (cbrt.f64 (+.f64 y 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (cbrt.f64 (+.f64 y 1)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (-.f64 -1 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (+.f64 y 1)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 y 1) (*.f64 y x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (+.f64 (-.f64 1 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (-.f64 1 y) y) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 y) (+.f64 (+.f64 y 1) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (+.f64 x -1) y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (*.f64 y x)) (+.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (*.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 0) (fma.f64 (+.f64 x -1) y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) (*.f64 0 (fma.f64 (+.f64 x -1) y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (+.f64 x -1) y (+.f64 y 1))) (fma.f64 (+.f64 x -1) y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 (+.f64 (-.f64 1 y) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (+.f64 y 1) (*.f64 y x)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (fma.f64 y (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (+.f64 x -1) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (+.f64 x -1) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (fma.f64 y (+.f64 x -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 y (+.f64 x -1) y) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (fma.f64 y (+.f64 x -1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 (+.f64 (*.f64 (-.f64 1 x) y) -1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (+.f64 x -1) y) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (fma.f64 y (+.f64 x -1) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 y (+.f64 x -1) y) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (fma.f64 y (+.f64 x -1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (fma.f64 y (+.f64 x -1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 y (+.f64 x -1) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (+.f64 y 1) (*.f64 y x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))) (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2)) (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (+.f64 x -1) y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (fma.f64 y (+.f64 x -1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (fma.f64 y (+.f64 x -1) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 -1 (fma.f64 y (+.f64 x -1) y))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))) -1) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 2)) -1) (/.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 y (+.f64 x -1)) 2)) (cbrt.f64 (*.f64 (fma.f64 y y y) (+.f64 x -1))))) (+.f64 (cbrt.f64 (+.f64 y 1)) (cbrt.f64 (*.f64 y (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 y (+.f64 x -1)) 2)) (-.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2)) (cbrt.f64 (*.f64 (fma.f64 y y y) (+.f64 x -1))))) (+.f64 (cbrt.f64 (*.f64 y (+.f64 x -1))) (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (fma.f64 y (+.f64 x -1) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (fma.f64 y (+.f64 x -1) y) 3)) (+.f64 1 (-.f64 (*.f64 (fma.f64 y (+.f64 x -1) y) (fma.f64 y (+.f64 x -1) y)) (fma.f64 y (+.f64 x -1) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 y (+.f64 x -1) y) 3) 1) (+.f64 (*.f64 (fma.f64 y (+.f64 x -1) y) (fma.f64 y (+.f64 x -1) y)) (-.f64 1 (*.f64 (fma.f64 y (+.f64 x -1) y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 -1 (neg.f64 (pow.f64 y 3))) (fma.f64 x x (+.f64 1 x))) (*.f64 (neg.f64 (fma.f64 y y (-.f64 1 y))) (*.f64 y (+.f64 (pow.f64 x 3) -1)))) (*.f64 (neg.f64 (fma.f64 y y (-.f64 1 y))) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (pow.f64 y 3) 1) (fma.f64 x x (+.f64 1 x))) (*.f64 (fma.f64 y y (-.f64 1 y)) (*.f64 y (+.f64 (pow.f64 x 3) -1)))) (*.f64 (fma.f64 y y (-.f64 1 y)) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y (+.f64 (pow.f64 x 3) -1)) (fma.f64 y y (-.f64 1 y))) (*.f64 (fma.f64 x x (+.f64 1 x)) (+.f64 (pow.f64 y 3) 1))) (*.f64 (fma.f64 x x (+.f64 1 x)) (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y (+.f64 (pow.f64 x 3) -1)) (neg.f64 (fma.f64 y y (-.f64 1 y)))) (*.f64 (fma.f64 x x (+.f64 1 x)) (+.f64 -1 (neg.f64 (pow.f64 y 3))))) (*.f64 (fma.f64 x x (+.f64 1 x)) (neg.f64 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 -1 (fma.f64 y (+.f64 x -1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (+.f64 x -1) y (+.f64 y 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y y)) (fma.f64 y (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (+.f64 x -1))) (cbrt.f64 (pow.f64 (*.f64 y (+.f64 x -1)) 2)) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (+.f64 x -1)) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) y) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 y (+.f64 x -1)) 2)) (cbrt.f64 (*.f64 y (+.f64 x -1))) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (-.f64 1 x) y) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (+.f64 x -1))) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) -1 (fma.f64 y (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 y) (fma.f64 y (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 y) (fma.f64 y (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 y 3) 1) (/.f64 1 (fma.f64 y y (-.f64 1 y))) (*.f64 y (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (-.f64 -1 y) (*.f64 y (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (fma.f64 y (+.f64 x -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y x)) (cbrt.f64 (pow.f64 (*.f64 y x) 2)) (+.f64 (-.f64 1 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) y) (+.f64 (-.f64 1 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (+.f64 (-.f64 1 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) x) (+.f64 (-.f64 1 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 y 1)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)) (*.f64 y (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x -1) y (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (+.f64 x -1) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 y 1) (*.f64 y (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 y (fma.f64 y (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (+.f64 x -1)) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (+.f64 x -1)) 1 (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1 (fma.f64 y (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y 1) 1 (*.f64 y (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2)) (cbrt.f64 (+.f64 y 1)) (*.f64 y (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (fma.f64 y (+.f64 x -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (+.f64 (-.f64 1 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (+.f64 (-.f64 1 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y x) (+.f64 (-.f64 1 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (+.f64 (-.f64 1 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 y (+.f64 x -1) 1)) (cbrt.f64 (pow.f64 (fma.f64 y (+.f64 x -1) 1) 2)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 y (+.f64 x -1) 1) y)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 y) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 x -1)) (*.f64 (*.f64 y (+.f64 x -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (+.f64 x -1)) 0) (*.f64 y (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 x -1)) (*.f64 0 (*.f64 y (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y (+.f64 x -1))) (*.f64 y (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (+.f64 x -1))) (cbrt.f64 (pow.f64 (*.f64 y (+.f64 x -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 y (+.f64 x -1)) 2)) (cbrt.f64 (*.f64 y (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (+.f64 x -1))) (cbrt.f64 (pow.f64 (+.f64 x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (+.f64 x -1)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (+.f64 x -1) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) y) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (*.f64 y (cbrt.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (+.f64 (cbrt.f64 (neg.f64 y)) (*.f64 x (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (+.f64 (*.f64 x (cbrt.f64 y)) (cbrt.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (+.f64 (pow.f64 x 3) -1)) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (/.f64 (+.f64 (pow.f64 x 3) -1) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) -1) (/.f64 y (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 x 3) -1) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (/.f64 y (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (+.f64 (neg.f64 (pow.f64 x 3)) 1)) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) y)) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (neg.f64 (pow.f64 x 3)) 1) y) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (+.f64 (pow.f64 x 3) -1)) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y (+.f64 (pow.f64 x 3) -1))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (+.f64 (pow.f64 x 3) -1)) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (+.f64 (pow.f64 x 3) -1)) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (+.f64 (pow.f64 x 3) -1)) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (+.f64 x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (+.f64 x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (+.f64 x -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (+.f64 x -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (+.f64 x -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y x)) (cbrt.f64 (pow.f64 (*.f64 y x) 2)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) y) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 y)) (cbrt.f64 (*.f64 y y)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (neg.f64 (cbrt.f64 (*.f64 y y))) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) 1 (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 y (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 y) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) 1 (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y -1 (*.f64 y x))))))"]],"rules":[["egg-rr",60],["egg-rr",94],["egg-rr",82]],"time":40.427001953125,"type":"rewrite"},{"count":[[308,277]],"inputs":[["1","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (+.f64 (*.f64 y (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 1 x))))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 x 1)) (+.f64 1 (+.f64 (*.f64 y (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 1 x)))))","x","(-.f64 (+.f64 (/.f64 1 y) x) (/.f64 x y))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) x)) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 x y)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (/.f64 1 (pow.f64 y 3)) x))) (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 x y))))","(*.f64 -1 (-.f64 (*.f64 -1 (-.f64 x 1)) 1))","(+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) (*.f64 -1 (-.f64 (*.f64 -1 (-.f64 x 1)) 1)))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) (*.f64 -1 (-.f64 (*.f64 -1 (-.f64 x 1)) 1)))) (/.f64 1 (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 3))) (*.f64 -1 (-.f64 (*.f64 -1 (-.f64 x 1)) 1))))) (/.f64 1 (pow.f64 y 2)))","(/.f64 (+.f64 1 (+.f64 y (*.f64 -1 y))) (+.f64 1 y))","(+.f64 (/.f64 1 (+.f64 1 y)) (+.f64 (/.f64 y (+.f64 1 y)) (+.f64 (/.f64 (*.f64 y x) (+.f64 1 y)) (*.f64 -1 (/.f64 y (+.f64 1 y))))))","(+.f64 (/.f64 1 (+.f64 1 y)) (+.f64 (/.f64 y (+.f64 1 y)) (+.f64 (/.f64 (*.f64 y x) (+.f64 1 y)) (*.f64 -1 (/.f64 y (+.f64 1 y))))))","(+.f64 (/.f64 1 (+.f64 1 y)) (+.f64 (/.f64 y (+.f64 1 y)) (+.f64 (/.f64 (*.f64 y x) (+.f64 1 y)) (*.f64 -1 (/.f64 y (+.f64 1 y))))))","(/.f64 (*.f64 y x) (+.f64 1 y))","(+.f64 (/.f64 1 (+.f64 1 y)) (+.f64 (/.f64 y (+.f64 1 y)) (+.f64 (/.f64 (*.f64 y x) (+.f64 1 y)) (*.f64 -1 (/.f64 y (+.f64 1 y))))))","(+.f64 (/.f64 1 (+.f64 1 y)) (+.f64 (/.f64 y (+.f64 1 y)) (+.f64 (/.f64 (*.f64 y x) (+.f64 1 y)) (*.f64 -1 (/.f64 y (+.f64 1 y))))))","(+.f64 (/.f64 1 (+.f64 1 y)) (+.f64 (/.f64 y (+.f64 1 y)) (+.f64 (/.f64 (*.f64 y x) (+.f64 1 y)) (*.f64 -1 (/.f64 y (+.f64 1 y))))))","(/.f64 (*.f64 y x) (+.f64 1 y))","(+.f64 (/.f64 1 (+.f64 1 y)) (+.f64 (/.f64 y (+.f64 1 y)) (+.f64 (/.f64 (*.f64 y x) (+.f64 1 y)) (*.f64 -1 (/.f64 y (+.f64 1 y))))))","(+.f64 (/.f64 1 (+.f64 1 y)) (+.f64 (/.f64 y (+.f64 1 y)) (+.f64 (/.f64 (*.f64 y x) (+.f64 1 y)) (*.f64 -1 (/.f64 y (+.f64 1 y))))))","(+.f64 (/.f64 1 (+.f64 1 y)) (+.f64 (/.f64 y (+.f64 1 y)) (+.f64 (/.f64 (*.f64 y x) (+.f64 1 y)) (*.f64 -1 (/.f64 y (+.f64 1 y))))))","1","(+.f64 1 (*.f64 y x))","(+.f64 1 (*.f64 y x))","(+.f64 1 (*.f64 y x))","(*.f64 y x)","(+.f64 1 (*.f64 y x))","(+.f64 1 (*.f64 y x))","(+.f64 1 (*.f64 y x))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 x 1)) 1)))","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 x 1)) 1))))","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 x 1)) 1))))","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 x 1)) 1))))","(+.f64 1 (+.f64 y (*.f64 -1 y)))","(+.f64 1 (+.f64 (*.f64 y x) (+.f64 y (*.f64 -1 y))))","(+.f64 1 (+.f64 (*.f64 y x) (+.f64 y (*.f64 -1 y))))","(+.f64 1 (+.f64 (*.f64 y x) (+.f64 y (*.f64 -1 y))))","(*.f64 y x)","(+.f64 1 (+.f64 y (+.f64 (*.f64 y x) (*.f64 -1 y))))","(+.f64 1 (+.f64 y (+.f64 (*.f64 y x) (*.f64 -1 y))))","(+.f64 1 (+.f64 y (+.f64 (*.f64 y x) (*.f64 -1 y))))","(*.f64 y x)","(+.f64 1 (+.f64 y (+.f64 (*.f64 y x) (*.f64 -1 y))))","(+.f64 1 (+.f64 y (+.f64 (*.f64 y x) (*.f64 -1 y))))","(+.f64 1 (+.f64 y (+.f64 (*.f64 y x) (*.f64 -1 y))))","(*.f64 y (-.f64 x 1))","(*.f64 y (-.f64 x 1))","(*.f64 y (-.f64 x 1))","(*.f64 y (-.f64 x 1))","(*.f64 y (-.f64 x 1))","(*.f64 y (-.f64 x 1))","(*.f64 y (-.f64 x 1))","(*.f64 y (-.f64 x 1))","(*.f64 y (-.f64 x 1))","(*.f64 y (-.f64 x 1))","(*.f64 y (-.f64 x 1))","(*.f64 y (-.f64 x 1))","(*.f64 -1 y)","(+.f64 (*.f64 y x) (*.f64 -1 y))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 y))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 y))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(+.f64 (*.f64 y x) (*.f64 -1 y))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 y (-.f64 x 1)))","(fma.f64 y (+.f64 x -1) 1)","(+.f64 1 (+.f64 (*.f64 y (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 1 x))))","(+.f64 (fma.f64 y (+.f64 x -1) 1) (*.f64 (*.f64 y y) (-.f64 1 x)))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 x 1)) (+.f64 1 (+.f64 (*.f64 y (-.f64 x 1)) (*.f64 (pow.f64 y 2) (-.f64 1 x)))))","(+.f64 (fma.f64 (pow.f64 y 3) (+.f64 x -1) 1) (fma.f64 y (+.f64 x -1) (*.f64 (*.f64 y y) (-.f64 1 x))))","x","(-.f64 (+.f64 (/.f64 1 y) x) (/.f64 x y))","(+.f64 x (/.f64 (-.f64 1 x) y))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) x)) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 x y)))","(-.f64 (+.f64 (/.f64 1 y) (fma.f64 x (pow.f64 y -2) x)) (+.f64 (pow.f64 y -2) (/.f64 x y)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (/.f64 1 (pow.f64 y 3)) x))) (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 x y))))","(-.f64 (+.f64 (+.f64 (/.f64 1 y) (fma.f64 x (pow.f64 y -2) x)) (pow.f64 y -3)) (+.f64 (fma.f64 x (pow.f64 y -3) (pow.f64 y -2)) (/.f64 x y)))","(*.f64 -1 (-.f64 (*.f64 -1 (-.f64 x 1)) 1))","(+.f64 (+.f64 x -1) 1)","(+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) (*.f64 -1 (-.f64 (*.f64 -1 (-.f64 x 1)) 1)))","(+.f64 (/.f64 (-.f64 1 x) y) (+.f64 (+.f64 x -1) 1))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) (*.f64 -1 (-.f64 (*.f64 -1 (-.f64 x 1)) 1)))) (/.f64 1 (pow.f64 y 2)))","(-.f64 (+.f64 (fma.f64 x (pow.f64 y -2) (/.f64 (-.f64 1 x) y)) (+.f64 (+.f64 x -1) 1)) (pow.f64 y -2))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 3))) (*.f64 -1 (-.f64 (*.f64 -1 (-.f64 x 1)) 1))))) (/.f64 1 (pow.f64 y 2)))","(-.f64 (+.f64 (fma.f64 x (pow.f64 y -2) (/.f64 (-.f64 1 x) y)) (neg.f64 (fma.f64 (+.f64 x -1) (pow.f64 y -3) (-.f64 (-.f64 1 x) 1)))) (pow.f64 y -2))","(/.f64 (+.f64 1 (+.f64 y (*.f64 -1 y))) (+.f64 1 y))","(/.f64 1 (+.f64 1 y))","(+.f64 (/.f64 1 (+.f64 1 y)) (+.f64 (/.f64 y (+.f64 1 y)) (+.f64 (/.f64 (*.f64 y x) (+.f64 1 y)) (*.f64 -1 (/.f64 y (+.f64 1 y))))))","(+.f64 (/.f64 (+.f64 1 y) (+.f64 1 y)) (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 1 y)))","(+.f64 (/.f64 1 (+.f64 1 y)) (+.f64 (/.f64 y (+.f64 1 y)) (+.f64 (/.f64 (*.f64 y x) (+.f64 1 y)) (*.f64 -1 (/.f64 y (+.f64 1 y))))))","(+.f64 (/.f64 (+.f64 1 y) (+.f64 1 y)) (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 1 y)))","(+.f64 (/.f64 1 (+.f64 1 y)) (+.f64 (/.f64 y (+.f64 1 y)) (+.f64 (/.f64 (*.f64 y x) (+.f64 1 y)) (*.f64 -1 (/.f64 y (+.f64 1 y))))))","(+.f64 (/.f64 (+.f64 1 y) (+.f64 1 y)) (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 1 y)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(+.f64 (/.f64 1 (+.f64 1 y)) (+.f64 (/.f64 y (+.f64 1 y)) (+.f64 (/.f64 (*.f64 y x) (+.f64 1 y)) (*.f64 -1 (/.f64 y (+.f64 1 y))))))","(+.f64 (/.f64 (+.f64 1 y) (+.f64 1 y)) (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 1 y)))","(+.f64 (/.f64 1 (+.f64 1 y)) (+.f64 (/.f64 y (+.f64 1 y)) (+.f64 (/.f64 (*.f64 y x) (+.f64 1 y)) (*.f64 -1 (/.f64 y (+.f64 1 y))))))","(+.f64 (/.f64 (+.f64 1 y) (+.f64 1 y)) (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 1 y)))","(+.f64 (/.f64 1 (+.f64 1 y)) (+.f64 (/.f64 y (+.f64 1 y)) (+.f64 (/.f64 (*.f64 y x) (+.f64 1 y)) (*.f64 -1 (/.f64 y (+.f64 1 y))))))","(+.f64 (/.f64 (+.f64 1 y) (+.f64 1 y)) (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 1 y)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(+.f64 (/.f64 1 (+.f64 1 y)) (+.f64 (/.f64 y (+.f64 1 y)) (+.f64 (/.f64 (*.f64 y x) (+.f64 1 y)) (*.f64 -1 (/.f64 y (+.f64 1 y))))))","(+.f64 (/.f64 (+.f64 1 y) (+.f64 1 y)) (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 1 y)))","(+.f64 (/.f64 1 (+.f64 1 y)) (+.f64 (/.f64 y (+.f64 1 y)) (+.f64 (/.f64 (*.f64 y x) (+.f64 1 y)) (*.f64 -1 (/.f64 y (+.f64 1 y))))))","(+.f64 (/.f64 (+.f64 1 y) (+.f64 1 y)) (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 1 y)))","(+.f64 (/.f64 1 (+.f64 1 y)) (+.f64 (/.f64 y (+.f64 1 y)) (+.f64 (/.f64 (*.f64 y x) (+.f64 1 y)) (*.f64 -1 (/.f64 y (+.f64 1 y))))))","(+.f64 (/.f64 (+.f64 1 y) (+.f64 1 y)) (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 1 y)))","1","(+.f64 1 (*.f64 y x))","(fma.f64 y x 1)","(+.f64 1 (*.f64 y x))","(fma.f64 y x 1)","(+.f64 1 (*.f64 y x))","(fma.f64 y x 1)","(*.f64 y x)","(+.f64 1 (*.f64 y x))","(fma.f64 y x 1)","(+.f64 1 (*.f64 y x))","(fma.f64 y x 1)","(+.f64 1 (*.f64 y x))","(fma.f64 y x 1)","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 x 1)) 1)))","(*.f64 (+.f64 (+.f64 x -1) 1) y)","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 x 1)) 1))))","(fma.f64 (neg.f64 y) (-.f64 (-.f64 1 x) 1) 1)","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 x 1)) 1))))","(fma.f64 (neg.f64 y) (-.f64 (-.f64 1 x) 1) 1)","(+.f64 1 (*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 x 1)) 1))))","(fma.f64 (neg.f64 y) (-.f64 (-.f64 1 x) 1) 1)","(+.f64 1 (+.f64 y (*.f64 -1 y)))","1","(+.f64 1 (+.f64 (*.f64 y x) (+.f64 y (*.f64 -1 y))))","(fma.f64 y x 1)","(+.f64 1 (+.f64 (*.f64 y x) (+.f64 y (*.f64 -1 y))))","(fma.f64 y x 1)","(+.f64 1 (+.f64 (*.f64 y x) (+.f64 y (*.f64 -1 y))))","(fma.f64 y x 1)","(*.f64 y x)","(+.f64 1 (+.f64 y (+.f64 (*.f64 y x) (*.f64 -1 y))))","(fma.f64 y x 1)","(+.f64 1 (+.f64 y (+.f64 (*.f64 y x) (*.f64 -1 y))))","(fma.f64 y x 1)","(+.f64 1 (+.f64 y (+.f64 (*.f64 y x) (*.f64 -1 y))))","(fma.f64 y x 1)","(*.f64 y x)","(+.f64 1 (+.f64 y (+.f64 (*.f64 y x) (*.f64 -1 y))))","(fma.f64 y x 1)","(+.f64 1 (+.f64 y (+.f64 (*.f64 y x) (*.f64 -1 y))))","(fma.f64 y x 1)","(+.f64 1 (+.f64 y (+.f64 (*.f64 y x) (*.f64 -1 y))))","(fma.f64 y x 1)","(*.f64 y (-.f64 x 1))","(*.f64 y (+.f64 x -1))","(*.f64 y (-.f64 x 1))","(*.f64 y (+.f64 x -1))","(*.f64 y (-.f64 x 1))","(*.f64 y (+.f64 x -1))","(*.f64 y (-.f64 x 1))","(*.f64 y (+.f64 x -1))","(*.f64 y (-.f64 x 1))","(*.f64 y (+.f64 x -1))","(*.f64 y (-.f64 x 1))","(*.f64 y (+.f64 x -1))","(*.f64 y (-.f64 x 1))","(*.f64 y (+.f64 x -1))","(*.f64 y (-.f64 x 1))","(*.f64 y (+.f64 x -1))","(*.f64 y (-.f64 x 1))","(*.f64 y (+.f64 x -1))","(*.f64 y (-.f64 x 1))","(*.f64 y (+.f64 x -1))","(*.f64 y (-.f64 x 1))","(*.f64 y (+.f64 x -1))","(*.f64 y (-.f64 x 1))","(*.f64 y (+.f64 x -1))","(*.f64 -1 y)","(neg.f64 y)","(+.f64 (*.f64 y x) (*.f64 -1 y))","(*.f64 y (+.f64 x -1))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(*.f64 y (+.f64 x -1))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(*.f64 y (+.f64 x -1))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 y))","(*.f64 y (+.f64 x -1))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(*.f64 y (+.f64 x -1))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(*.f64 y (+.f64 x -1))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 y))","(*.f64 y (+.f64 x -1))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(*.f64 y (+.f64 x -1))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(*.f64 y (+.f64 x -1))"]],"time":214.281005859375,"type":"simplify"},{"compiler":[[5272,3624]],"time":63.55908203125,"type":"eval"},{"alts":[["(-.f64 (+.f64 (/.f64 1 y) (+.f64 (pow.f64 y -3) (+.f64 (/.f64 (/.f64 (+.f64 x -1) y) y) x))) (fma.f64 x (pow.f64 y -3) (/.f64 x y)))","fresh",32.67176631137252],["(/.f64 (fma.f64 y x 1) (+.f64 y 1))","fresh",8.0546875],["(-.f64 1 (*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x)))","done",14.137544847367954]],"compiler":[[28,18],[10,7],[15,12]],"count":[[280,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[277,1],"picked":[1,0]}],"min-error":[0],"time":91.72998046875,"type":"prune"},{"accuracy":[0.01171875],"baseline":[8.0546875],"branch":[["x",0.046875,3],["y",0.01171875,3],["(-.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1)))",0.015625,3],["(/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1))",0.015625,3],["(-.f64 1 x)",0.046875,3],["(-.f64 1 x)",0.046875,3]],"compiler":[[3,2],[3,2],[13,10],[11,8],[5,4],[5,4],[109,76]],"count":[[8,3]],"inputs":[["(/.f64 (fma.f64 y x 1) (+.f64 y 1))","(-.f64 1 (*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x)))","(/.f64 (+.f64 (+.f64 y 1) (*.f64 y (+.f64 x -1))) (+.f64 y 1))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (pow.f64 y -3) (+.f64 (/.f64 (/.f64 (+.f64 x -1) y) y) x))) (fma.f64 x (pow.f64 y -3) (/.f64 x y)))","(/.f64 (-.f64 (-.f64 -1 y) (*.f64 (+.f64 x -1) y)) (-.f64 -1 y))","(-.f64 1 (*.f64 (/.f64 y (+.f64 y 1)) (-.f64 1 x)))","(fma.f64 (*.f64 (-.f64 1 x) y) (/.f64 1 (-.f64 -1 y)) 1)","(-.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1)))"]],"link":["."],"name":["Diagrams.Trail:splitAtParam  from diagrams-lib-1.3.0.3, D"],"oracle":[55.00583228788138],"outputs":[["(-.f64 (+.f64 (/.f64 1 y) (+.f64 (pow.f64 y -3) (+.f64 (/.f64 (/.f64 (+.f64 x -1) y) y) x))) (fma.f64 x (pow.f64 y -3) (/.f64 x y)))","(-.f64 1 (*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (pow.f64 y -3) (+.f64 (/.f64 (/.f64 (+.f64 x -1) y) y) x))) (fma.f64 x (pow.f64 y -3) (/.f64 x y)))"]],"time":58.212890625,"times":[["x",11.68896484375],["y",11.126953125],["(-.f64 1 (/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1)))",7.095947265625],["(/.f64 (*.f64 (-.f64 1 x) y) (+.f64 y 1))",9.318115234375],["(-.f64 1 x)",8.404052734375],["(-.f64 1 x)",8.1162109375]],"type":"regimes"},{"bstep":[[3441.068712305571,13630.642759286447,9.14013671875],[-17044193038341.664,-1.5957169926086505,10.050048828125]],"compiler":[[15,12],[3,2]],"method":["binary-search","binary-search"],"time":19.373046875,"type":"bsearch"},{"compiler":[[75,49]],"inputs":[["(if (<=.f64 y -2181656708907733/128) (-.f64 (+.f64 (/.f64 1 y) (+.f64 (pow.f64 y -3) (+.f64 (/.f64 (/.f64 (+.f64 x -1) y) y) x))) (fma.f64 x (pow.f64 y -3) (/.f64 x y))) (if (<=.f64 y 7566990122312325/2199023255552) (-.f64 1 (*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x))) (-.f64 (+.f64 (/.f64 1 y) (+.f64 (pow.f64 y -3) (+.f64 (/.f64 (/.f64 (+.f64 x -1) y) y) x))) (fma.f64 x (pow.f64 y -3) (/.f64 x y)))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 y -2181656708907733/128) (-.f64 (+.f64 (/.f64 1 y) (+.f64 (pow.f64 y -3) (+.f64 (/.f64 (/.f64 (+.f64 x -1) y) y) x))) (fma.f64 x (pow.f64 y -3) (/.f64 x y))) (if (<=.f64 y 7566990122312325/2199023255552) (-.f64 1 (*.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (-.f64 1 x))) (-.f64 (+.f64 (/.f64 1 y) (+.f64 (pow.f64 y -3) (+.f64 (/.f64 (/.f64 (+.f64 x -1) y) y) x))) (fma.f64 x (pow.f64 y -3) (/.f64 x y)))))","(if (<=.f64 y -2181656708907733/128) (neg.f64 (-.f64 (*.f64 (+.f64 (/.f64 1 y) (pow.f64 y -3)) (+.f64 x -1)) (+.f64 (/.f64 (+.f64 x -1) (*.f64 y y)) x))) (if (<=.f64 y 7566990122312325/2199023255552) (+.f64 1 (/.f64 (*.f64 y (+.f64 x -1)) (+.f64 y 1))) (neg.f64 (-.f64 (*.f64 (+.f64 (/.f64 1 y) (pow.f64 y -3)) (+.f64 x -1)) (+.f64 (/.f64 (+.f64 x -1) (*.f64 y y)) x)))))"]],"stop":[["fuel",1]],"time":32.35107421875,"type":"simplify"},{"time":0.02294921875,"type":"soundness"},{"compiler":[[75,49]],"remove-preprocessing":[[]],"time":26.593994140625,"type":"end"}]
[{"compiler":[[14,9]],"method":["search"],"sampling":[[12,0.1910326833876861,0.7914211168918424,0.017546199720471556],[11,0.1403505428970755,0.8518498228614165,0.00779963424150798],[10,0.09356702859805033,0.9044812764478198,0.0019516949541298345],[9,0.062378019065366885,0.9356702859805033,0.0019516949541298345],[8,0.0,0.9980483050458702,0.0019516949541298345],[7,0.0,0.9980483050458702,0.0019516949541298345],[6,0.0,0.9980483050458702,0.0019516949541298345],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":147.89501953125,"type":"analyze"},{"outcomes":[["body",256,"invalid",132.143798828125,2620],["body",256,"valid",410.216064453125,8256]],"time":555.552978515625,"type":"sample"},{"compiler":[[13,8]],"inputs":[["0","1","2","3"],["(+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t))","(+.f64 y (/.f64 (*.f64 x (-.f64 z y)) t))","(+.f64 z (/.f64 (*.f64 y (-.f64 x z)) t))","(+.f64 t (/.f64 (*.f64 y (-.f64 z t)) x))","(+.f64 x (/.f64 (*.f64 z (-.f64 y x)) t))","(+.f64 x (/.f64 (*.f64 t (-.f64 z x)) y))","(+.f64 x (/.f64 (*.f64 y (-.f64 t x)) z))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t))","(+.f64 y (/.f64 (*.f64 x (-.f64 z y)) t))","(+.f64 z (/.f64 (*.f64 y (-.f64 x z)) t))","(+.f64 t (/.f64 (*.f64 y (-.f64 z t)) x))","(+.f64 x (/.f64 (*.f64 z (-.f64 y x)) t))","(+.f64 x (/.f64 (*.f64 t (-.f64 z x)) y))","(+.f64 x (/.f64 (*.f64 y (-.f64 t x)) z))"]],"symmetry":[[]],"time":93.7158203125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t))","(fma.f64 (-.f64 z x) (/.f64 y t) x)"]],"time":19.033203125,"type":"simplify"},{"compiler":[[21,10]],"time":0.3369140625,"type":"eval"},{"alts":[["(fma.f64 (-.f64 z x) (/.f64 y t) x)","next",1.8595610167760341],["(+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t))","fresh",7.848311775813497]],"compiler":[[12,7],[13,8],[12,7],[13,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.08984375],"time":1.23486328125,"type":"prune"},{"compiler":[[22,7]],"locations":[["(fma.f64 (-.f64 z x) (/.f64 y t) x)",1.7752215817223396,true]],"time":4.8701171875,"type":"localize"},{"count":[[1,48]],"series":[["(fma.f64 (-.f64 z x) (/.f64 y t) x)","t","-inf",0.3291015625],["(fma.f64 (-.f64 z x) (/.f64 y t) x)","t","inf",0.31982421875],["(fma.f64 (-.f64 z x) (/.f64 y t) x)","t","0",0.59814453125],["(fma.f64 (-.f64 z x) (/.f64 y t) x)","y","-inf",0.398193359375],["(fma.f64 (-.f64 z x) (/.f64 y t) x)","y","inf",0.406005859375],["(fma.f64 (-.f64 z x) (/.f64 y t) x)","y","0",0.3720703125],["(fma.f64 (-.f64 z x) (/.f64 y t) x)","x","-inf",0.495849609375],["(fma.f64 (-.f64 z x) (/.f64 y t) x)","x","inf",0.345947265625],["(fma.f64 (-.f64 z x) (/.f64 y t) x)","x","0",0.326904296875],["(fma.f64 (-.f64 z x) (/.f64 y t) x)","z","-inf",0.31005859375],["(fma.f64 (-.f64 z x) (/.f64 y t) x)","z","inf",1.132080078125],["(fma.f64 (-.f64 z x) (/.f64 y t) x)","z","0",0.66796875]],"time":5.861083984375,"type":"series"},{"count":[[1,34]],"inputs":[["(fma.f64 (-.f64 z x) (/.f64 y t) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x) 0) (fma.f64 (-.f64 z x) (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x) (*.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (-.f64 z x) (/.f64 y t) x)) (fma.f64 (-.f64 z x) (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x) (*.f64 0 (fma.f64 (-.f64 z x) (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 z x) y) t) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 (*.f64 (-.f64 z x) y) t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (/.f64 (*.f64 (-.f64 x z) y) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x)) (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x) 2)) (cbrt.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (-.f64 z x) (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) (/.f64 y t) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (/.f64 (*.f64 (-.f64 z x) y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (/.f64 (*.f64 (-.f64 z x) y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (/.f64 (*.f64 (-.f64 z x) y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 z x) (/.f64 y t) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (*.f64 (-.f64 z x) y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 (*.f64 (-.f64 z x) y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (-.f64 z x) y) t) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y t) (-.f64 z x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 (-.f64 z x) y) t) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 z x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 z x) 2)) (/.f64 y t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 z x) y) (/.f64 1 t) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 z x) y) t)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 z x) y) t) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 z x) (cbrt.f64 (/.f64 y t))) (cbrt.f64 (pow.f64 (/.f64 y t) 2)) x)))))"]],"rules":[["egg-rr",34]],"time":19.390869140625,"type":"rewrite"},{"count":[[82,48]],"inputs":[["(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(/.f64 (*.f64 y z) t)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","x","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(*.f64 y (-.f64 (/.f64 z t) (/.f64 x t)))","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","x","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","x","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(-.f64 x (/.f64 (*.f64 y x) t))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y z) t)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(-.f64 x (/.f64 (*.f64 y x) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(-.f64 x (/.f64 (*.f64 y x) t))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","x","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 y (-.f64 (/.f64 z t) (/.f64 x t)))","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","x","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","x","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)"]],"time":164.39111328125,"type":"simplify"},{"compiler":[[567,148]],"time":5.14794921875,"type":"eval"},{"alts":[["(fma.f64 (*.f64 (-.f64 z x) y) (/.f64 1 t) x)","fresh",7.875655525813497],["(fma.f64 (-.f64 z x) (/.f64 y t) x)","done",1.8595610167760341],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","next",5.814553448639899],["(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","fresh",7.848311775813497],["(fma.f64 (*.f64 (-.f64 z x) (cbrt.f64 (/.f64 y t))) (cbrt.f64 (pow.f64 (/.f64 y t) 2)) x)","fresh",8.76092645701087]],"compiler":[[14,9],[12,7],[12,7],[19,12],[20,12],[14,9],[12,7],[19,12],[20,12]],"count":[[50,5]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[48,4],"picked":[1,1]}],"min-error":[0],"time":10.5458984375,"type":"prune"},{"compiler":[[24,7]],"locations":[["(/.f64 (-.f64 z x) t)",0.0078125,true],["(fma.f64 y (/.f64 (-.f64 z x) t) x)",5.506110983451574,true]],"time":4.944091796875,"type":"localize"},{"count":[[2,72]],"series":[["(/.f64 (-.f64 z x) t)","t","-inf",0.211181640625],["(/.f64 (-.f64 z x) t)","t","inf",0.2431640625],["(/.f64 (-.f64 z x) t)","t","0",0.211181640625],["(/.f64 (-.f64 z x) t)","x","-inf",0.153076171875],["(/.f64 (-.f64 z x) t)","x","inf",0.153076171875],["(/.f64 (-.f64 z x) t)","x","0",0.18212890625],["(/.f64 (-.f64 z x) t)","z","-inf",0.15283203125],["(/.f64 (-.f64 z x) t)","z","inf",0.155029296875],["(/.f64 (-.f64 z x) t)","z","0",0.191162109375],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","t","-inf",0.295166015625],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","t","inf",0.31494140625],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","t","0",0.6328125],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","x","-inf",0.364990234375],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","x","inf",0.969970703125],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","x","0",0.3798828125],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","z","-inf",0.455078125],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","z","inf",0.344970703125],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","z","0",0.38720703125],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","y","-inf",0.31005859375],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","y","inf",0.27001953125],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","y","0",0.4619140625]],"time":7.093994140625,"type":"series"},{"count":[[2,106]],"inputs":[["(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (-.f64 z x) t)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 0) (fma.f64 y (/.f64 (-.f64 z x) t) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) (*.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 y (/.f64 (-.f64 z x) t) x)) (fma.f64 y (/.f64 (-.f64 z x) t) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) (*.f64 0 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 (*.f64 y (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) (cbrt.f64 (pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 2)) (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (/.f64 (-.f64 z x) t) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 (-.f64 z x) t) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (/.f64 (-.f64 z x) t))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) t) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 (-.f64 z x) t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 y (-.f64 z x)) t)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 z x)) t) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 z x) t) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (/.f64 (*.f64 y (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (/.f64 (*.f64 y (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (/.f64 (*.f64 y (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 y (-.f64 z x)) t) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 y (-.f64 z x)) t) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (*.f64 y (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 (*.f64 y (-.f64 z x)) t))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 z t) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 x t)) (/.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 z x) t) 0) (/.f64 (-.f64 z x) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 z x) t) (*.f64 (/.f64 (-.f64 z x) t) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 t) (neg.f64 x)) (/.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 z t) (*.f64 (/.f64 1 t) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 z t) (*.f64 (neg.f64 (/.f64 x t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 z x) t)) (/.f64 (-.f64 z x) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 z x) t) (*.f64 0 (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 z t) (/.f64 x t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 x z) t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 z t) (*.f64 t t)) (/.f64 (*.f64 t x) (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 t)) (/.f64 (-.f64 x z) t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (/.f64 x t)) (/.f64 z (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 t) (/.f64 (-.f64 x z) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 z x)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 z x) 2)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 t)) (/.f64 (-.f64 z x) (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 x z) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 z x) t)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) t) 2)) (cbrt.f64 (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x z) (/.f64 -1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z x) (/.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 z x) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 z x) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 t) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 z x) 2)) t) (cbrt.f64 (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 z x) (cbrt.f64 (*.f64 t t))) (cbrt.f64 (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x z) t) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 z x) (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z t (neg.f64 (*.f64 t x))) (/.f64 1 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 z x) (cbrt.f64 t)) (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 z (cbrt.f64 t)) (cbrt.f64 (*.f64 t t))) (*.f64 (cbrt.f64 (*.f64 t t)) (/.f64 x (cbrt.f64 t)))) (*.f64 (cbrt.f64 (*.f64 t t)) (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 z (cbrt.f64 t)) (neg.f64 t)) (*.f64 (cbrt.f64 (*.f64 t t)) (neg.f64 x))) (*.f64 (cbrt.f64 (*.f64 t t)) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 z (cbrt.f64 t)) t) (*.f64 (cbrt.f64 (*.f64 t t)) x)) (*.f64 (cbrt.f64 (*.f64 t t)) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 z (cbrt.f64 (*.f64 t t))) (*.f64 t (/.f64 x (cbrt.f64 t)))) (*.f64 t (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 z (neg.f64 t)) (*.f64 t (neg.f64 x))) (*.f64 t (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 z) (cbrt.f64 (*.f64 t t))) (*.f64 (neg.f64 t) (/.f64 x (cbrt.f64 t)))) (*.f64 (neg.f64 t) (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 z) (neg.f64 t)) (*.f64 (neg.f64 t) (neg.f64 x))) (*.f64 (neg.f64 t) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 z) t) (*.f64 (neg.f64 t) x)) (*.f64 (neg.f64 t) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 z t (neg.f64 (*.f64 t x)))) (neg.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x z) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 z x) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 z x) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 z t (neg.f64 (*.f64 t x))) (*.f64 t t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 t)) (-.f64 z x)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 z x) t)) (cbrt.f64 (pow.f64 (-.f64 z x) 2))) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) t) 2)) (cbrt.f64 (-.f64 z x))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) t) 2)) (cbrt.f64 (-.f64 x z))) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 z x) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 z t (neg.f64 (*.f64 t x))) 1) (*.f64 t t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 z x) (cbrt.f64 t)) 1) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 z x) (cbrt.f64 (*.f64 t t))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 z x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) t) 2))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x z)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) t) 2))) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 z x) (cbrt.f64 t)) 1) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 z t (neg.f64 (*.f64 t x))) t) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x z) (cbrt.f64 t)) (neg.f64 (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 z x) -1) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 z x) (cbrt.f64 t))) (neg.f64 (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 z x) t) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 z x) t)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 z x) t)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 z x) t)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 z x) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 x z) t))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 x z) t) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) t) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 z t)) (cbrt.f64 (pow.f64 (/.f64 z t) 2)) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (/.f64 (cbrt.f64 (*.f64 z z)) t) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 t)) (/.f64 z (cbrt.f64 (*.f64 t t))) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 z t) (neg.f64 (/.f64 x t)))))))"]],"rules":[["egg-rr",73],["egg-rr",33]],"time":25.511962890625,"type":"rewrite"},{"count":[[178,123]],"inputs":[["x","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(*.f64 y (-.f64 (/.f64 z t) (/.f64 x t)))","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(/.f64 (*.f64 y z) t)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","x","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","x","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(*.f64 -1 (/.f64 x t))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(*.f64 -1 (/.f64 x t))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(*.f64 -1 (/.f64 x t))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 y (-.f64 (/.f64 z t) (/.f64 x t)))","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(-.f64 x (/.f64 (*.f64 y x) t))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y z) t)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(-.f64 x (/.f64 (*.f64 y x) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(-.f64 x (/.f64 (*.f64 y x) t))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","x","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","x","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 -1 (/.f64 x t))","(neg.f64 (/.f64 x t))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 (-.f64 z x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 (-.f64 z x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 (-.f64 z x) t)","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(*.f64 -1 (/.f64 x t))","(neg.f64 (/.f64 x t))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 (-.f64 z x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 (-.f64 z x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 (-.f64 z x) t)","(*.f64 -1 (/.f64 x t))","(neg.f64 (/.f64 x t))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 (-.f64 z x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 (-.f64 z x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 (-.f64 z x) t)"]],"time":253.866943359375,"type":"simplify"},{"compiler":[[1673,483]],"time":17.400146484375,"type":"eval"},{"alts":[["(fma.f64 (-.f64 z x) (/.f64 y t) x)","done",1.8595610167760341],["(fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)","fresh",7.875655525813497],["(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)","next",5.84027595840834],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","done",5.814553448639899],["(fma.f64 (*.f64 (-.f64 z x) (cbrt.f64 (/.f64 y t))) (cbrt.f64 (pow.f64 (/.f64 y t) 2)) x)","fresh",8.76092645701087]],"compiler":[[12,7],[14,9],[16,10],[12,7],[20,12],[14,9],[16,10],[20,12]],"count":[[128,5]],"kept":[{"done":[1,1],"fresh":[3,1],"new":[123,2],"picked":[1,1]}],"min-error":[0],"time":35.56201171875,"type":"prune"},{"compiler":[[40,16]],"locations":[["(fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t)))",0.08984375,true],["(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)",5.506110983451574,true]],"time":9.447021484375,"type":"localize"},{"count":[[2,84]],"series":[["(fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t)))","x","-inf",0.162109375],["(fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t)))","x","inf",0.180908203125],["(fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t)))","x","0",0.161865234375],["(fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t)))","t","-inf",0.388916015625],["(fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t)))","t","inf",0.317138671875],["(fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t)))","t","0",0.322021484375],["(fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t)))","z","-inf",0.22900390625],["(fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t)))","z","inf",0.155029296875],["(fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t)))","z","0",0.197021484375],["(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)","x","-inf",0.242919921875],["(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)","x","inf",0.718017578125],["(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)","x","0",0.3720703125],["(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)","t","-inf",0.5009765625],["(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)","t","inf",0.373046875],["(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)","t","0",0.444091796875],["(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)","z","-inf",0.39501953125],["(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)","z","inf",0.31298828125],["(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)","z","0",0.464111328125],["(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)","y","-inf",0.27294921875],["(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)","y","inf",0.225830078125],["(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)","y","0",0.637939453125]],"time":7.35791015625,"type":"series"},{"count":[[2,102]],"inputs":[["(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)","(fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (/.f64 (*.f64 y z) t)) (*.f64 y (neg.f64 (/.f64 x t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 0) (fma.f64 y (/.f64 (-.f64 z x) t) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) (*.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 y (/.f64 (-.f64 z x) t) x)) (fma.f64 y (/.f64 (-.f64 z x) t) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) (*.f64 0 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (/.f64 (-.f64 z x) t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 y (neg.f64 (/.f64 x t))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) (cbrt.f64 (pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 2)) (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (/.f64 (-.f64 z x) t) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 (-.f64 z x) t) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (/.f64 (-.f64 z x) t))) (cbrt.f64 (pow.f64 (*.f64 y (/.f64 (-.f64 z x) t)) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 z x) t) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (/.f64 (-.f64 z x) t))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) t) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 (-.f64 z x) t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 y (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (*.f64 y (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (*.f64 y (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (/.f64 (-.f64 z x) t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (/.f64 (-.f64 z x) t)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 y (/.f64 (-.f64 z x) t)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 z x) t) 0) (/.f64 (-.f64 z x) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 z x) t) (*.f64 (/.f64 (-.f64 z x) t) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 z x) t)) (/.f64 (-.f64 z x) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 z x) t) (*.f64 0 (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 z t) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 x t)) (/.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 z x) t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 z t) (/.f64 x t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 x t) (/.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 z x) t)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) t) 2)) (cbrt.f64 (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (-.f64 z x) t)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 z x) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 z x) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (+.f64 (neg.f64 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (+.f64 z (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 t -2)) (-.f64 (/.f64 z (cbrt.f64 t)) (/.f64 x (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (neg.f64 t)) (*.f64 (neg.f64 t) (neg.f64 z))) (*.f64 (neg.f64 t) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x t) (*.f64 (neg.f64 t) z)) (*.f64 (neg.f64 t) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) (neg.f64 t)) (*.f64 t (neg.f64 z))) (*.f64 t (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (neg.f64 x) (cbrt.f64 t)) (neg.f64 t)) (*.f64 (cbrt.f64 (*.f64 t t)) (neg.f64 z))) (*.f64 (cbrt.f64 (*.f64 t t)) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (neg.f64 x) (cbrt.f64 t)) t) (*.f64 (cbrt.f64 (*.f64 t t)) z)) (*.f64 (cbrt.f64 (*.f64 t t)) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 z) (neg.f64 t)) (*.f64 (neg.f64 t) x)) (*.f64 (neg.f64 t) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 z) (cbrt.f64 (*.f64 t t))) (*.f64 (neg.f64 t) (/.f64 (neg.f64 x) (cbrt.f64 t)))) (*.f64 (neg.f64 t) (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 z) t) (*.f64 (neg.f64 t) (neg.f64 x))) (*.f64 (neg.f64 t) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 z (neg.f64 t)) (*.f64 t x)) (*.f64 t (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 z (cbrt.f64 (*.f64 t t))) (*.f64 t (/.f64 (neg.f64 x) (cbrt.f64 t)))) (*.f64 t (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 z) (neg.f64 t)) (*.f64 (neg.f64 t) (neg.f64 x))) (*.f64 (neg.f64 t) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 z) (cbrt.f64 (*.f64 t t))) (*.f64 (neg.f64 t) (/.f64 x (cbrt.f64 t)))) (*.f64 (neg.f64 t) (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 z) t) (*.f64 (neg.f64 t) x)) (*.f64 (neg.f64 t) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 z (neg.f64 t)) (*.f64 t (neg.f64 x))) (*.f64 t (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 z (cbrt.f64 (*.f64 t t))) (*.f64 t (/.f64 x (cbrt.f64 t)))) (*.f64 t (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 z x) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 z) (neg.f64 x)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 z x) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 z) x) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 z (neg.f64 x)) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (neg.f64 z)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 x) z) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) t) (*.f64 t z)) (*.f64 t t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 z t) (*.f64 t (neg.f64 x))) (*.f64 t t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 z t) (*.f64 t x)) (*.f64 t t))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 z x) t) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 z x) t)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 z x) t)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 z x) t)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 z x) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 x t) (/.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) t) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (/.f64 (cbrt.f64 (*.f64 z z)) t) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 z t)) (cbrt.f64 (pow.f64 (/.f64 z t) 2)) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z (cbrt.f64 t)) (cbrt.f64 (pow.f64 t -2)) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 t) z (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 x t) (/.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (/.f64 x t))) (cbrt.f64 (pow.f64 (/.f64 x t) 2)) (/.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 1 t) (/.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x t) -1 (/.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 x t) 2))) (/.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x t) 2)) (cbrt.f64 (neg.f64 (/.f64 x t))) (/.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 -1 t) (/.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z t) 1 (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 z t) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (/.f64 x t)) (/.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (/.f64 x t)) 1 (/.f64 z t))))))"]],"rules":[["egg-rr",68],["egg-rr",34]],"time":28.05810546875,"type":"rewrite"},{"count":[[186,122]],"inputs":[["x","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(*.f64 y (-.f64 (/.f64 z t) (/.f64 x t)))","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(*.f64 y (-.f64 (/.f64 z t) (/.f64 x t)))","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","x","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (-.f64 (*.f64 -1 z) (*.f64 -1 x))) t)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (-.f64 (*.f64 -1 z) (*.f64 -1 x))) t)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (-.f64 (*.f64 -1 z) (*.f64 -1 x))) t)) x)","(/.f64 (*.f64 y z) t)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(*.f64 -1 (/.f64 x t))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(/.f64 (-.f64 z x) t)","(/.f64 (-.f64 z x) t)","(/.f64 (-.f64 z x) t)","(/.f64 (-.f64 z x) t)","(/.f64 (-.f64 z x) t)","(/.f64 (-.f64 z x) t)","(/.f64 (-.f64 z x) t)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 z) (*.f64 -1 x)) t))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 z) (*.f64 -1 x)) t))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 z) (*.f64 -1 x)) t))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 z) (*.f64 -1 x)) t))","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(*.f64 -1 (/.f64 x t))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(*.f64 -1 (/.f64 x t))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 y (-.f64 (/.f64 z t) (/.f64 x t)))","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 y (-.f64 (/.f64 z t) (/.f64 x t)))","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(-.f64 x (/.f64 (*.f64 y x) t))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","x","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (-.f64 (*.f64 -1 z) (*.f64 -1 x))) t)) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (-.f64 (*.f64 -1 z) (*.f64 -1 x))) t)) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (-.f64 (*.f64 -1 z) (*.f64 -1 x))) t)) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y z) t)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(-.f64 x (/.f64 (*.f64 y x) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(-.f64 x (/.f64 (*.f64 y x) t))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 -1 (/.f64 x t))","(neg.f64 (/.f64 x t))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 (-.f64 z x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 (-.f64 z x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 (-.f64 z x) t)","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(/.f64 (-.f64 z x) t)","(/.f64 (-.f64 z x) t)","(/.f64 (-.f64 z x) t)","(/.f64 (-.f64 z x) t)","(/.f64 (-.f64 z x) t)","(/.f64 (-.f64 z x) t)","(/.f64 (-.f64 z x) t)","(/.f64 (-.f64 z x) t)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 z) (*.f64 -1 x)) t))","(/.f64 (-.f64 z x) t)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 z) (*.f64 -1 x)) t))","(/.f64 (-.f64 z x) t)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 z) (*.f64 -1 x)) t))","(/.f64 (-.f64 z x) t)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 z) (*.f64 -1 x)) t))","(/.f64 (-.f64 z x) t)","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 (-.f64 z x) t)","(*.f64 -1 (/.f64 x t))","(neg.f64 (/.f64 x t))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 (-.f64 z x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 (-.f64 z x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 (-.f64 z x) t)","(*.f64 -1 (/.f64 x t))","(neg.f64 (/.f64 x t))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 (-.f64 z x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 (-.f64 z x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 (-.f64 z x) t)"]],"time":298.701904296875,"type":"simplify"},{"compiler":[[1621,456]],"time":16.097900390625,"type":"eval"},{"alts":[["(fma.f64 (-.f64 z x) (/.f64 y t) x)","done",1.8595610167760341],["(fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)","next",7.875655525813497],["(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)","done",5.84027595840834],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","done",5.814553448639899],["(fma.f64 (*.f64 (-.f64 z x) (cbrt.f64 (/.f64 y t))) (cbrt.f64 (pow.f64 (/.f64 y t) 2)) x)","fresh",8.76092645701087]],"compiler":[[12,7],[14,9],[16,10],[12,7],[20,12],[14,9],[20,12]],"count":[[127,5]],"kept":[{"done":[2,2],"fresh":[2,2],"new":[122,0],"picked":[1,1]}],"min-error":[0],"time":36.774169921875,"type":"prune"},{"compiler":[[30,12]],"locations":[["(*.f64 y (-.f64 z x))",0.0078125,true],["(fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)",7.498024935107888,true]],"time":6.6259765625,"type":"localize"},{"count":[[2,72]],"series":[["(*.f64 y (-.f64 z x))","x","-inf",0.180908203125],["(*.f64 y (-.f64 z x))","x","inf",0.14892578125],["(*.f64 y (-.f64 z x))","x","0",0.154052734375],["(*.f64 y (-.f64 z x))","z","-inf",0.178955078125],["(*.f64 y (-.f64 z x))","z","inf",0.152099609375],["(*.f64 y (-.f64 z x))","z","0",0.156005859375],["(*.f64 y (-.f64 z x))","y","-inf",0.2158203125],["(*.f64 y (-.f64 z x))","y","inf",0.18896484375],["(*.f64 y (-.f64 z x))","y","0",0.2119140625],["(fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)","t","-inf",0.216796875],["(fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)","t","inf",0.251953125],["(fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)","t","0",0.281005859375],["(fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)","x","-inf",0.304931640625],["(fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)","x","inf",0.35400390625],["(fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)","x","0",0.344970703125],["(fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)","z","-inf",1.7529296875],["(fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)","z","inf",0.366943359375],["(fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)","z","0",0.363037109375],["(fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)","y","-inf",0.329833984375],["(fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)","y","inf",0.34912109375],["(fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)","y","0",0.447021484375]],"time":7.201904296875,"type":"series"},{"count":[[2,71]],"inputs":[["(fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)","(*.f64 y (-.f64 z x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 0) (fma.f64 y (/.f64 (-.f64 z x) t) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) (*.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 y (/.f64 (-.f64 z x) t) x)) (fma.f64 y (/.f64 (-.f64 z x) t) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) (*.f64 0 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 (*.f64 y (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) (cbrt.f64 (pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 2)) (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (/.f64 (-.f64 z x) t) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (/.f64 (*.f64 y (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (/.f64 (*.f64 y (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (/.f64 (*.f64 y (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 y (-.f64 z x)) t) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 t) (*.f64 y (-.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2)) t) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 y (-.f64 z x)) t)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y (-.f64 z x)) t) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 y (-.f64 z x)) t) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 (-.f64 z x) t) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 y (-.f64 z x)) (cbrt.f64 t)) (cbrt.f64 (pow.f64 t -2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 z x) (/.f64 y t) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 (*.f64 y (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (*.f64 y (-.f64 z x)) t))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y z) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x y)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (-.f64 z x)) 0) (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 z x)) (*.f64 (*.f64 y (-.f64 z x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y z) 1) (*.f64 (neg.f64 (*.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y (-.f64 z x))) (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 z x)) (*.f64 0 (*.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 x z) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) (cbrt.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2)) (cbrt.f64 (*.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (-.f64 z x))) (cbrt.f64 (pow.f64 (-.f64 z x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 z x) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 z x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 z x) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (-.f64 z x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (-.f64 z x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 z x) 2)) (*.f64 y (cbrt.f64 (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 z x) 2)) y) (cbrt.f64 (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x z) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (-.f64 z x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (-.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (-.f64 x z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (-.f64 z x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (neg.f64 (*.f64 x y)))))))"]],"rules":[["egg-rr",37],["egg-rr",34]],"time":24.10302734375,"type":"rewrite"},{"count":[[143,87]],"inputs":[["x","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(*.f64 y (-.f64 (/.f64 z t) (/.f64 x t)))","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(/.f64 (*.f64 y z) t)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","x","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","x","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 y (-.f64 (/.f64 z t) (/.f64 x t)))","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(-.f64 x (/.f64 (*.f64 y x) t))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y z) t)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(-.f64 x (/.f64 (*.f64 y x) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(-.f64 x (/.f64 (*.f64 y x) t))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","x","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","x","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))"]],"time":234.492919921875,"type":"simplify"},{"compiler":[[1127,373]],"time":11.653076171875,"type":"eval"},{"alts":[["(fma.f64 (-.f64 z x) (/.f64 y t) x)","done",1.8595610167760341],["(fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)","done",7.875655525813497],["(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)","done",5.84027595840834],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","done",5.814553448639899],["(fma.f64 (*.f64 (-.f64 z x) (cbrt.f64 (/.f64 y t))) (cbrt.f64 (pow.f64 (/.f64 y t) 2)) x)","fresh",8.76092645701087]],"compiler":[[12,7],[14,9],[16,10],[12,7],[20,12]],"count":[[92,5]],"kept":[{"done":[3,3],"fresh":[1,1],"new":[87,0],"picked":[1,1]}],"min-error":[0],"time":19.25,"type":"prune"},{"accuracy":[0.6100305258134963],"baseline":[1.8595610167760341],"branch":[["x",1.8595610167760341,1],["y",1.8595610167760341,1],["z",1.8595610167760341,1],["t",0.8462802446284996,3],["(+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t))",0.6100305258134963,3]],"compiler":[[5,4],[5,4],[5,4],[5,4],[13,8],[92,39]],"count":[[8,3]],"inputs":[["(fma.f64 (*.f64 y (-.f64 z x)) (/.f64 1 t) x)","(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)","(fma.f64 (*.f64 (-.f64 z x) y) (/.f64 1 t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (*.f64 (-.f64 z x) (cbrt.f64 (/.f64 y t))) (cbrt.f64 (pow.f64 (/.f64 y t) 2)) x)","(fma.f64 (-.f64 z x) (/.f64 y t) x)","(+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t))"]],"link":["."],"name":["Optimisation.CirclePacking:place from circle-packing-0.1.0.4, D"],"oracle":[21.240197931464262],"outputs":[["(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)"]],"time":35.989013671875,"times":[["x",4.037841796875],["y",3.880859375],["z",5.43896484375],["t",10.942138671875],["(+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t))",9.8330078125]],"type":"regimes"},{"bstep":[[6.551052550498923e+299,3.791811002855182e+303,0.031982421875],[-1.4362120301307458e+301,-2.6564176188581826e+300,0.10302734375]],"compiler":[[7,6],[13,8]],"method":["left-value","left-value"],"time":0.23193359375,"type":"bsearch"},{"compiler":[[63,30]],"inputs":[["(if (<=.f64 (+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t)) -10000000000000000525047602552044202487044685811081591549158541155118024579889081957863713750804478640437044438328838781769425232353604305756447921847867069828483872009265758037378302337947880900593689532349707999450811190389676408800746527427801424945792587888200568428381156694721963868654594005401600) (fma.f64 y (/.f64 (-.f64 z x) t) x) (if (<=.f64 (+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t)) 1000000000000000052504760255204420248704468581108159154915854115511802457988908195786371375080447864043704443832883878176942523235360430575644792184786706982848387200926575803737830233794788090059368953234970799945081119038967640880074652742780142494579258788820056842838115669472196386865459400540160) (+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t)))) (fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t)) -10000000000000000525047602552044202487044685811081591549158541155118024579889081957863713750804478640437044438328838781769425232353604305756447921847867069828483872009265758037378302337947880900593689532349707999450811190389676408800746527427801424945792587888200568428381156694721963868654594005401600) (fma.f64 y (/.f64 (-.f64 z x) t) x) (if (<=.f64 (+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t)) 1000000000000000052504760255204420248704468581108159154915854115511802457988908195786371375080447864043704443832883878176942523235360430575644792184786706982848387200926575803737830233794788090059368953234970799945081119038967640880074652742780142494579258788820056842838115669472196386865459400540160) (+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t)))) (fma.f64 y (fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t))) x)))","(if (<=.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) -10000000000000000525047602552044202487044685811081591549158541155118024579889081957863713750804478640437044438328838781769425232353604305756447921847867069828483872009265758037378302337947880900593689532349707999450811190389676408800746527427801424945792587888200568428381156694721963868654594005401600) (fma.f64 y (/.f64 (-.f64 z x) t) x) (if (<=.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 1000000000000000052504760255204420248704468581108159154915854115511802457988908195786371375080447864043704443832883878176942523235360430575644792184786706982848387200926575803737830233794788090059368953234970799945081119038967640880074652742780142494579258788820056842838115669472196386865459400540160) (fma.f64 y (/.f64 (-.f64 z x) t) x) (fma.f64 y (/.f64 (-.f64 z x) t) x)))"]],"stop":[["fuel",1]],"time":26.119140625,"type":"simplify"},{"time":0.02587890625,"type":"soundness"},{"compiler":[[63,30]],"remove-preprocessing":[[]],"time":16.567138671875,"type":"end"}]
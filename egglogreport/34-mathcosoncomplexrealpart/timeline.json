[{"compiler":[[14,11]],"method":["search"],"sampling":[[12,0.49951183795928955,0.2809754088521004,0.21951275318861008],[11,0.49951183795928955,0.2809754088521004,0.21951275318861008],[10,0.49951183795928955,0.31219489872455597,0.18829326331615448],[9,0.49951183795928955,0.31219489872455597,0.18829326331615448],[8,0.49951183795928955,0.37463387846946716,0.1258542835712433],[7,0.49951183795928955,0.37463387846946716,0.1258542835712433],[6,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[5,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":67.44091796875,"type":"analyze"},{"outcomes":[["body",512,"invalid",124.01708984375,1062],["body",256,"invalid",95.416015625,1528],["body",1024,"invalid",382.900634765625,1991],["body",512,"valid",132.064208984375,990],["body",1024,"valid",582.912109375,2097],["body",2048,"valid",2.09912109375,3],["body",256,"valid",319.454833984375,5166]],"time":1652.740966796875,"type":"sample"},{"compiler":[[13,10]],"inputs":[["0","1"],["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (*.f64 1/2 (cos.f64 im)) (+.f64 (exp.f64 (neg.f64 re)) (exp.f64 re)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 im)) (+.f64 (exp.f64 (neg.f64 re)) (exp.f64 re)))","(*.f64 1/2 (*.f64 (cos.f64 im) (+.f64 (exp.f64 (neg.f64 re)) (exp.f64 re))))"]],"symmetry":[[]],"time":62.238037109375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))"]],"time":19.427978515625,"type":"simplify"},{"compiler":[[24,13]],"time":0.39404296875,"type":"eval"},{"alts":[["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","next",0.03125]],"compiler":[[13,10],[13,10]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[0.03125],"time":0.927001953125,"type":"prune"},{"compiler":[[35,13]],"locations":[["(+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))",0.00390625,true],["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))",0.0078125,true],["(cos.f64 re)",0.0234375,true]],"time":9.5,"type":"localize"},{"count":[[3,40]],"series":[["(+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))","im","-inf",0.177001953125],["(+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))","im","inf",0.155029296875],["(+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))","im","0",0.208984375],["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","im","-inf",0.510009765625],["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","im","inf",0.986083984375],["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","im","0",0.509033203125],["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","re","-inf",0.5830078125],["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","re","inf",0.5419921875],["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","re","0",0.528076171875],["(cos.f64 re)","re","-inf",0.18994140625],["(cos.f64 re)","re","inf",0.1640625],["(cos.f64 re)","re","0",0.351806640625]],"time":5.087890625,"type":"series"},{"count":[[3,123]],"inputs":[["(cos.f64 re)","(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 re) (*.f64 (cos.f64 re) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 re) 0) (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 re) (*.f64 0 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 re)) (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 re)) (cbrt.f64 (pow.f64 (cos.f64 re) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 re) 2)) (cbrt.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 im) (cos.f64 re)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 re) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 re)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 re)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 re)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 re) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 re)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (*.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 0) (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)) (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (*.f64 0 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 1/2 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 1/2) (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/2 (cos.f64 re))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 1/2 (cos.f64 re)) 2)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 re) (*.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2)) (*.f64 1/2 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2)) (*.f64 1/2 (cos.f64 re))) (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 1/2 (cos.f64 re)) 2)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (*.f64 1/2 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (cbrt.f64 (pow.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 2)) (cbrt.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (cbrt.f64 (*.f64 1/2 (cos.f64 re)))) (cbrt.f64 (pow.f64 (*.f64 1/2 (cos.f64 re)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/2) (*.f64 (sqrt.f64 1/2) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 1/2) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (sqrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 1/2 (cos.f64 re)) 2)) (*.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (cbrt.f64 (*.f64 1/2 (cos.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2)) (*.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 1/2 (cos.f64 re)) 2)) (+.f64 (*.f64 (exp.f64 im) (cbrt.f64 (*.f64 1/2 (cos.f64 re)))) (/.f64 (cbrt.f64 (*.f64 1/2 (cos.f64 re))) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 1/2 (cos.f64 re)) 2)) (+.f64 (/.f64 (cbrt.f64 (*.f64 1/2 (cos.f64 re))) (exp.f64 im)) (*.f64 (exp.f64 im) (cbrt.f64 (*.f64 1/2 (cos.f64 re))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 im)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 im) (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (neg.f64 im)) (*.f64 1/2 (cos.f64 re)) (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 (neg.f64 im)) (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im)) (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/2 (cos.f64 re))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 1/2 (cos.f64 re)) 2)) (exp.f64 im)) (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 (cbrt.f64 (exp.f64 (*.f64 im -2))) (*.f64 1/2 (cos.f64 re))) (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re) (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 1/2 (cos.f64 re))) (exp.f64 im)) (cbrt.f64 (pow.f64 (*.f64 1/2 (cos.f64 re)) 2)) (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (exp.f64 (*.f64 im -2))) (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))) (pow.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))) 2) (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cos.f64 re) (exp.f64 im)) 1/2 (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (exp.f64 (+.f64 im im))) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/2 (cos.f64 re))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 1/2 (cos.f64 re)) 2)) (exp.f64 im)) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 im)) (*.f64 (cbrt.f64 (exp.f64 (+.f64 im im))) (*.f64 1/2 (cos.f64 re))) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 im) (*.f64 1/2 (cos.f64 re)) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))) (pow.f64 (cbrt.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))) 2) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 im) (cbrt.f64 (*.f64 1/2 (cos.f64 re)))) (cbrt.f64 (pow.f64 (*.f64 1/2 (cos.f64 re)) 2)) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 im) (cos.f64 re)) 1/2 (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 re) (*.f64 (exp.f64 im) 1/2) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)) 1 (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)) (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 0) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 0 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (exp.f64 (+.f64 im im))) (-.f64 (cbrt.f64 (exp.f64 (*.f64 im -2))) 1)) (+.f64 (cbrt.f64 (exp.f64 im)) (cbrt.f64 (exp.f64 (neg.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (exp.f64 (*.f64 im -2))) (-.f64 (cbrt.f64 (exp.f64 (+.f64 im im))) 1)) (+.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2)) (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (exp.f64 im)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (exp.f64 im) (exp.f64 im) 1) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (cbrt.f64 (exp.f64 (*.f64 im -2))) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 im)) (cbrt.f64 (exp.f64 (+.f64 im im))) (exp.f64 (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (*.f64 im -2))) (cbrt.f64 (exp.f64 (neg.f64 im))) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (exp.f64 (neg.f64 im)))) (neg.f64 (cbrt.f64 (exp.f64 (*.f64 im -2)))) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (exp.f64 (neg.f64 im))) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (+.f64 im im))) (cbrt.f64 (exp.f64 im)) (exp.f64 (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (exp.f64 im)) (exp.f64 (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (exp.f64 im) (exp.f64 (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (neg.f64 im)) 1 (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 im) 1 (exp.f64 (neg.f64 im)))))))"]],"rules":[["egg-rr",35],["egg-rr",68],["egg-rr",20]],"time":32.5830078125,"type":"rewrite"},{"count":[[163,153]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 re 2)))","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (*.f64 -1/2 (pow.f64 re 2))))","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 re 2)) (*.f64 -1/720 (pow.f64 re 6)))))","(*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(+.f64 (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (*.f64 -1/4 (*.f64 (pow.f64 re 2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(+.f64 (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (+.f64 (*.f64 -1/4 (*.f64 (pow.f64 re 2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 1/48 (*.f64 (pow.f64 re 4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))))","(+.f64 (*.f64 -1/1440 (*.f64 (pow.f64 re 6) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (+.f64 (*.f64 -1/4 (*.f64 (pow.f64 re 2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 1/48 (*.f64 (pow.f64 re 4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(cos.f64 re)","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (pow.f64 im 2))) (cos.f64 re))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (pow.f64 im 2))) (+.f64 (cos.f64 re) (*.f64 1/24 (*.f64 (cos.f64 re) (pow.f64 im 4)))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (pow.f64 im 2))) (+.f64 (cos.f64 re) (+.f64 (*.f64 1/24 (*.f64 (cos.f64 re) (pow.f64 im 4))) (*.f64 1/720 (*.f64 (cos.f64 re) (pow.f64 im 6))))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","2","(+.f64 2 (pow.f64 im 2))","(+.f64 2 (+.f64 (pow.f64 im 2) (*.f64 1/12 (pow.f64 im 4))))","(+.f64 2 (+.f64 (pow.f64 im 2) (+.f64 (*.f64 1/12 (pow.f64 im 4)) (*.f64 1/360 (pow.f64 im 6)))))","(+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))","(+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))","(+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))","(+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))","(+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))","(+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))","(+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))","(+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 re 2)))","(fma.f64 (*.f64 re re) -1/2 1)","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (*.f64 -1/2 (pow.f64 re 2))))","(fma.f64 1/24 (pow.f64 re 4) (fma.f64 (*.f64 re re) -1/2 1))","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 re 2)) (*.f64 -1/720 (pow.f64 re 6)))))","(+.f64 (fma.f64 1/24 (pow.f64 re 4) 1) (fma.f64 -1/2 (*.f64 re re) (*.f64 -1/720 (pow.f64 re 6))))","(*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(+.f64 (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (*.f64 -1/4 (*.f64 (pow.f64 re 2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 1/2 (*.f64 -1/4 (*.f64 re re))))","(+.f64 (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (+.f64 (*.f64 -1/4 (*.f64 (pow.f64 re 2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 1/48 (*.f64 (pow.f64 re 4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))))","(fma.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 1/48 (pow.f64 re 4)) (*.f64 -1/4 (*.f64 re re)))))","(+.f64 (*.f64 -1/1440 (*.f64 (pow.f64 re 6) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (+.f64 (*.f64 -1/4 (*.f64 (pow.f64 re 2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 1/48 (*.f64 (pow.f64 re 4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))))","(+.f64 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 -1/1440 (pow.f64 re 6)) 1/2)) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 1/48 (pow.f64 re 4)) (*.f64 -1/4 (*.f64 re re)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(cos.f64 re)","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (pow.f64 im 2))) (cos.f64 re))","(fma.f64 1/2 (*.f64 (cos.f64 re) (*.f64 im im)) (cos.f64 re))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (pow.f64 im 2))) (+.f64 (cos.f64 re) (*.f64 1/24 (*.f64 (cos.f64 re) (pow.f64 im 4)))))","(fma.f64 (*.f64 (cos.f64 re) (*.f64 im im)) 1/2 (fma.f64 1/24 (*.f64 (cos.f64 re) (pow.f64 im 4)) (cos.f64 re)))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (pow.f64 im 2))) (+.f64 (cos.f64 re) (+.f64 (*.f64 1/24 (*.f64 (cos.f64 re) (pow.f64 im 4))) (*.f64 1/720 (*.f64 (cos.f64 re) (pow.f64 im 6))))))","(+.f64 (fma.f64 1/2 (*.f64 (cos.f64 re) (*.f64 im im)) (cos.f64 re)) (fma.f64 1/24 (*.f64 (cos.f64 re) (pow.f64 im 4)) (*.f64 1/720 (*.f64 (cos.f64 re) (pow.f64 im 6)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","2","(+.f64 2 (pow.f64 im 2))","(fma.f64 im im 2)","(+.f64 2 (+.f64 (pow.f64 im 2) (*.f64 1/12 (pow.f64 im 4))))","(+.f64 2 (fma.f64 (pow.f64 im 4) 1/12 (*.f64 im im)))","(+.f64 2 (+.f64 (pow.f64 im 2) (+.f64 (*.f64 1/12 (pow.f64 im 4)) (*.f64 1/360 (pow.f64 im 6)))))","(+.f64 (fma.f64 im im 2) (fma.f64 1/12 (pow.f64 im 4) (*.f64 1/360 (pow.f64 im 6))))","(+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))","(+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))","(+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))","(+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))","(+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))","(+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))","(+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))","(+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))","(+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))","(+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))","(+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))","(+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))"]],"time":125.93212890625,"type":"simplify"},{"compiler":[[2605,1113]],"time":25.556884765625,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))","fresh",0.33240131837909415],["(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))","next",0.01953125]],"compiler":[[17,14],[16,10],[17,14],[16,10]],"count":[[154,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[153,2],"picked":[1,0]}],"min-error":[0.0078125],"time":46.284912109375,"type":"prune"},{"compiler":[[38,18]],"locations":[["(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))",0.00390625,true],["(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))",0.015625,true],["(cos.f64 re)",0.0234375,false]],"time":9.25,"type":"localize"},{"count":[[2,48]],"series":[["(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))","re","-inf",0.31201171875],["(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))","re","inf",0.472900390625],["(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))","re","0",0.41796875],["(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))","im","-inf",0.45703125],["(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))","im","inf",0.47802734375],["(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))","im","0",0.385009765625],["(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","im","-inf",0.518798828125],["(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","im","inf",1.14013671875],["(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","im","0",0.52490234375],["(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","re","-inf",0.53515625],["(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","re","inf",0.56201171875],["(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","re","0",0.51318359375]],"time":6.551025390625,"type":"series"},{"count":[[2,113]],"inputs":[["(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 0) (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) (*.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))) (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) (*.f64 0 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 -1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (exp.f64 im))) (/.f64 (*.f64 -1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (exp.f64 im))) (pow.f64 (cbrt.f64 (exp.f64 im)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))) (cbrt.f64 (pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 2)) (cbrt.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/2 (cos.f64 re)) (neg.f64 (exp.f64 (neg.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 re) (cbrt.f64 (exp.f64 im))) (/.f64 1/2 (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/2 (cos.f64 re))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 1/2 (cos.f64 re)) 2)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/8 (exp.f64 im))) (/.f64 (cos.f64 re) (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (neg.f64 im)) (*.f64 1/2 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (/.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 -1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (neg.f64 im))) (*.f64 -1/2 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 re) (exp.f64 im)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im))) (/.f64 (cos.f64 re) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -1/2 (cos.f64 re)) (exp.f64 im)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im))) (cbrt.f64 (exp.f64 (neg.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 1/2 (cos.f64 re)) 2)) (exp.f64 im)) (cbrt.f64 (*.f64 1/2 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 re) (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im))) (cbrt.f64 (/.f64 1/8 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im)))) (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 re) (*.f64 2 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (cos.f64 re)) (neg.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 1/2 (cos.f64 re))) (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 2)) (cbrt.f64 (*.f64 1/2 (cos.f64 re)))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 2)) (cbrt.f64 (*.f64 -1/2 (cos.f64 re)))) (cbrt.f64 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))) (cbrt.f64 (pow.f64 (*.f64 1/2 (cos.f64 re)) 2))) (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/8 (exp.f64 im))) (cos.f64 re)) (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cos.f64 re) (cbrt.f64 (exp.f64 im))) 1/2) (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 re) (/.f64 1/2 (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im)))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im)))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 1/2 (cos.f64 re))) (cbrt.f64 (pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 2))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -1/2 (cos.f64 re))) (cbrt.f64 (pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 2))) (cbrt.f64 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cos.f64 re) (exp.f64 im)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (exp.f64 im))) 1) (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) -1) (neg.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (exp.f64 im))) 1) (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -1/2 (cos.f64 re)) (cbrt.f64 (exp.f64 im))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 re)) (/.f64 (neg.f64 (exp.f64 im)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 re)) (neg.f64 (*.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (exp.f64 im)))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 -1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 -1/2 (cos.f64 re)) (exp.f64 im)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) 0) (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (*.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (*.f64 0 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))) (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))) (/.f64 (*.f64 -1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 re) (+.f64 (*.f64 (exp.f64 im) 1/2) (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 re) (+.f64 (/.f64 1/2 (exp.f64 im)) (*.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (cbrt.f64 (pow.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) 2)) (cbrt.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (+.f64 (*.f64 (exp.f64 im) (cos.f64 re)) (/.f64 (cos.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (+.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (exp.f64 im) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/2 (cos.f64 re)) (neg.f64 (exp.f64 (neg.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im)) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cos.f64 re) (cbrt.f64 (exp.f64 im))) (/.f64 1/2 (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 -1/2 (cos.f64 re)) (exp.f64 im)) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))) (cbrt.f64 (pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 2)) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (/.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 (neg.f64 im)) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (neg.f64 im)) (*.f64 1/2 (cos.f64 re)) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/2 (cos.f64 re))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 1/2 (cos.f64 re)) 2)) (exp.f64 im)) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/8 (exp.f64 im))) (/.f64 (cos.f64 re) (cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 2)) (cbrt.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (exp.f64 im) 1/2)) (*.f64 (cbrt.f64 (*.f64 1/4 (pow.f64 (*.f64 (E.f64) (E.f64)) im))) (cos.f64 re)) (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 im) (*.f64 1/2 (cos.f64 re)) (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)) (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 re) (*.f64 (exp.f64 im) 1/2) (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (exp.f64 im) 1/2) (cbrt.f64 (cos.f64 re))) (cbrt.f64 (pow.f64 (cos.f64 re) 2)) (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))) (cbrt.f64 (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))) 2)) (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 1 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))) (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))) 1 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)))))))"]],"rules":[["egg-rr",50],["egg-rr",63]],"time":28.988037109375,"type":"rewrite"},{"count":[[161,145]],"inputs":[["(/.f64 1/2 (exp.f64 im))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im)))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im))))))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (cos.f64 re))","(+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im))))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re)))) (+.f64 (*.f64 -1/2 (cos.f64 re)) (*.f64 1/6 (cos.f64 re)))) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(cos.f64 re)","(+.f64 (cos.f64 re) (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (cos.f64 re))) im))","(+.f64 (cos.f64 re) (+.f64 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (cos.f64 re))) im) (*.f64 (+.f64 (*.f64 1/4 (cos.f64 re)) (*.f64 -1/2 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))))) (pow.f64 im 2))))","(+.f64 (cos.f64 re) (+.f64 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (cos.f64 re))) im) (+.f64 (*.f64 (+.f64 (*.f64 1/4 (cos.f64 re)) (*.f64 -1/2 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))))) (pow.f64 im 2)) (*.f64 (+.f64 (*.f64 1/12 (cos.f64 re)) (*.f64 -1/2 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re)))) (+.f64 (*.f64 -1/2 (cos.f64 re)) (*.f64 1/6 (cos.f64 re)))))) (pow.f64 im 3)))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 1/2 (exp.f64 im)) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 (-.f64 (*.f64 -1/4 (exp.f64 im)) (*.f64 1/4 (/.f64 1 (exp.f64 im)))) (pow.f64 re 2))))","(+.f64 (*.f64 (+.f64 (*.f64 1/48 (/.f64 1 (exp.f64 im))) (*.f64 1/48 (exp.f64 im))) (pow.f64 re 4)) (+.f64 (*.f64 1/2 (exp.f64 im)) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 (-.f64 (*.f64 -1/4 (exp.f64 im)) (*.f64 1/4 (/.f64 1 (exp.f64 im)))) (pow.f64 re 2)))))","(+.f64 (*.f64 (+.f64 (*.f64 1/48 (/.f64 1 (exp.f64 im))) (*.f64 1/48 (exp.f64 im))) (pow.f64 re 4)) (+.f64 (*.f64 1/2 (exp.f64 im)) (+.f64 (*.f64 (-.f64 (*.f64 -1/1440 (exp.f64 im)) (*.f64 1/1440 (/.f64 1 (exp.f64 im)))) (pow.f64 re 6)) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 (-.f64 (*.f64 -1/4 (exp.f64 im)) (*.f64 1/4 (/.f64 1 (exp.f64 im)))) (pow.f64 re 2))))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1/2 (exp.f64 im))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im))))","(/.f64 (+.f64 (*.f64 -1/4 (*.f64 re re)) 1/2) (exp.f64 im))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im)))))","(fma.f64 -1/4 (/.f64 (*.f64 re re) (exp.f64 im)) (/.f64 (+.f64 1/2 (*.f64 1/48 (pow.f64 re 4))) (exp.f64 im)))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im))))))","(+.f64 (/.f64 (+.f64 (*.f64 -1/4 (*.f64 re re)) (*.f64 1/48 (pow.f64 re 4))) (exp.f64 im)) (/.f64 (+.f64 (*.f64 -1/1440 (pow.f64 re 6)) 1/2) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (cos.f64 re))","(+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))","(fma.f64 1/2 (cos.f64 re) (*.f64 (*.f64 (cos.f64 re) -1/2) im))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im))))","(fma.f64 -1/2 (*.f64 (*.f64 (cos.f64 re) -1/2) (*.f64 im im)) (fma.f64 1/2 (cos.f64 re) (*.f64 (*.f64 (cos.f64 re) -1/2) im)))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re)))) (+.f64 (*.f64 -1/2 (cos.f64 re)) (*.f64 1/6 (cos.f64 re)))) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))))","(+.f64 (*.f64 -1/2 (+.f64 (*.f64 (fma.f64 (cos.f64 re) -1/3 (*.f64 (neg.f64 -1/2) (cos.f64 re))) (pow.f64 im 3)) (*.f64 (*.f64 (cos.f64 re) -1/2) (*.f64 im im)))) (fma.f64 1/2 (cos.f64 re) (*.f64 (*.f64 (cos.f64 re) -1/2) im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(cos.f64 re)","(+.f64 (cos.f64 re) (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (cos.f64 re))) im))","(fma.f64 0 im (cos.f64 re))","(+.f64 (cos.f64 re) (+.f64 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (cos.f64 re))) im) (*.f64 (+.f64 (*.f64 1/4 (cos.f64 re)) (*.f64 -1/2 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))))) (pow.f64 im 2))))","(+.f64 (fma.f64 0 im (cos.f64 re)) (*.f64 (fma.f64 -1/2 (*.f64 (cos.f64 re) -1/2) (*.f64 1/4 (cos.f64 re))) (*.f64 im im)))","(+.f64 (cos.f64 re) (+.f64 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (cos.f64 re))) im) (+.f64 (*.f64 (+.f64 (*.f64 1/4 (cos.f64 re)) (*.f64 -1/2 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))))) (pow.f64 im 2)) (*.f64 (+.f64 (*.f64 1/12 (cos.f64 re)) (*.f64 -1/2 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re)))) (+.f64 (*.f64 -1/2 (cos.f64 re)) (*.f64 1/6 (cos.f64 re)))))) (pow.f64 im 3)))))","(+.f64 (fma.f64 0 im (cos.f64 re)) (fma.f64 (fma.f64 -1/2 (*.f64 (cos.f64 re) -1/2) (*.f64 1/4 (cos.f64 re))) (*.f64 im im) (*.f64 (fma.f64 -1/2 (fma.f64 (cos.f64 re) -1/3 (*.f64 (neg.f64 -1/2) (cos.f64 re))) (*.f64 1/12 (cos.f64 re))) (pow.f64 im 3))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(+.f64 (*.f64 1/2 (exp.f64 im)) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 (-.f64 (*.f64 -1/4 (exp.f64 im)) (*.f64 1/4 (/.f64 1 (exp.f64 im)))) (pow.f64 re 2))))","(fma.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 (*.f64 -1/4 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 re re)))","(+.f64 (*.f64 (+.f64 (*.f64 1/48 (/.f64 1 (exp.f64 im))) (*.f64 1/48 (exp.f64 im))) (pow.f64 re 4)) (+.f64 (*.f64 1/2 (exp.f64 im)) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 (-.f64 (*.f64 -1/4 (exp.f64 im)) (*.f64 1/4 (/.f64 1 (exp.f64 im)))) (pow.f64 re 2)))))","(fma.f64 (pow.f64 re 4) (*.f64 1/48 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (fma.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 (*.f64 -1/4 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 re re))))","(+.f64 (*.f64 (+.f64 (*.f64 1/48 (/.f64 1 (exp.f64 im))) (*.f64 1/48 (exp.f64 im))) (pow.f64 re 4)) (+.f64 (*.f64 1/2 (exp.f64 im)) (+.f64 (*.f64 (-.f64 (*.f64 -1/1440 (exp.f64 im)) (*.f64 1/1440 (/.f64 1 (exp.f64 im)))) (pow.f64 re 6)) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 (-.f64 (*.f64 -1/4 (exp.f64 im)) (*.f64 1/4 (/.f64 1 (exp.f64 im)))) (pow.f64 re 2))))))","(fma.f64 (*.f64 1/48 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (pow.f64 re 4) (fma.f64 1/2 (exp.f64 im) (fma.f64 (*.f64 -1/1440 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (pow.f64 re 6) (fma.f64 (*.f64 -1/4 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 re re) (/.f64 1/2 (exp.f64 im))))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))"]],"time":157.60107421875,"type":"simplify"},{"compiler":[[3985,1896]],"time":39.695068359375,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))","fresh",0.33240131837909415],["(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (pow.f64 (cbrt.f64 (cos.f64 re)) 3)) (exp.f64 im)))","next",0.22265625],["(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))","done",0.01953125]],"compiler":[[17,14],[19,13],[16,10],[17,14],[19,13]],"count":[[199,3]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[197,1],"picked":[1,1]}],"min-error":[0.00390625],"time":72.02197265625,"type":"prune"},{"compiler":[[56,28]],"locations":[["(/.f64 (*.f64 1/2 (pow.f64 (cbrt.f64 (cos.f64 re)) 3)) (exp.f64 im))",0.015625,true],["(cos.f64 re)",0.0234375,false],["(cbrt.f64 (cos.f64 re))",0.08984375,true],["(pow.f64 (cbrt.f64 (cos.f64 re)) 3)",0.38517387698974637,true]],"time":12.4169921875,"type":"localize"},{"count":[[3,48]],"series":[["(/.f64 (*.f64 1/2 (pow.f64 (cbrt.f64 (cos.f64 re)) 3)) (exp.f64 im))","im","-inf",0.18505859375],["(/.f64 (*.f64 1/2 (pow.f64 (cbrt.f64 (cos.f64 re)) 3)) (exp.f64 im))","im","inf",0.156982421875],["(/.f64 (*.f64 1/2 (pow.f64 (cbrt.f64 (cos.f64 re)) 3)) (exp.f64 im))","im","0",0.235107421875],["(/.f64 (*.f64 1/2 (pow.f64 (cbrt.f64 (cos.f64 re)) 3)) (exp.f64 im))","re","-inf",0.163818359375],["(/.f64 (*.f64 1/2 (pow.f64 (cbrt.f64 (cos.f64 re)) 3)) (exp.f64 im))","re","inf",0.1640625],["(/.f64 (*.f64 1/2 (pow.f64 (cbrt.f64 (cos.f64 re)) 3)) (exp.f64 im))","re","0",0.225830078125],["(cbrt.f64 (cos.f64 re))","re","-inf",0.141845703125],["(cbrt.f64 (cos.f64 re))","re","inf",0.18896484375],["(cbrt.f64 (cos.f64 re))","re","0",0.197998046875],["(pow.f64 (cbrt.f64 (cos.f64 re)) 3)","re","-inf",1.34912109375],["(pow.f64 (cbrt.f64 (cos.f64 re)) 3)","re","inf",1.56591796875],["(pow.f64 (cbrt.f64 (cos.f64 re)) 3)","re","0",0.451904296875]],"time":5.19189453125,"type":"series"},{"count":[[3,102]],"inputs":[["(pow.f64 (cbrt.f64 (cos.f64 re)) 3)","(cbrt.f64 (cos.f64 re))","(/.f64 (*.f64 1/2 (pow.f64 (cbrt.f64 (cos.f64 re)) 3)) (exp.f64 im))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 re) 0) (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 re) (*.f64 (cos.f64 re) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 re)) (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 re) (*.f64 0 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 re))) (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 4/3) 2) (cbrt.f64 (cbrt.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 re) 2/3)) (pow.f64 (cbrt.f64 (cos.f64 re)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 re)) (pow.f64 (cos.f64 re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 re) 2/3) (cbrt.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cos.f64 re) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 re) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 re)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 re) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 re)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (cos.f64 re)) 0) (cbrt.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (cos.f64 re)) (*.f64 (cbrt.f64 (cos.f64 re)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (cos.f64 re))) (cbrt.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (cos.f64 re)) (*.f64 0 (cbrt.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 re))) (cbrt.f64 (pow.f64 (cos.f64 re) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 re) 2/3)) (cbrt.f64 (cbrt.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 re) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (cos.f64 re)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 4/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 re))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (cos.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 re) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 re))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (cos.f64 re))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 0) (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) (*.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))) (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) (*.f64 0 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (exp.f64 im))) (/.f64 (*.f64 -1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 -1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))) (pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (exp.f64 im))) (pow.f64 (cbrt.f64 (exp.f64 im)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 2/3) (cbrt.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/2 (cos.f64 re))) (/.f64 (pow.f64 (*.f64 1/2 (cos.f64 re)) 2/3) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/2 (cos.f64 re)) (neg.f64 (exp.f64 (neg.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/8 (exp.f64 im))) (/.f64 (cos.f64 re) (pow.f64 (exp.f64 im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 re) (cbrt.f64 (exp.f64 im))) (/.f64 1/2 (pow.f64 (exp.f64 im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (neg.f64 im)) (*.f64 1/2 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (/.f64 (*.f64 1/2 (cos.f64 re)) (pow.f64 (exp.f64 im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (neg.f64 im))) (*.f64 -1/2 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 (pow.f64 (exp.f64 im) 2/3)) (/.f64 (cos.f64 re) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (pow.f64 (exp.f64 im) 2/3)) (cbrt.f64 (exp.f64 (neg.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 1/2 (cos.f64 re)) 2/3) (exp.f64 im)) (cbrt.f64 (*.f64 1/2 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 re) (pow.f64 (exp.f64 im) 2/3)) (cbrt.f64 (/.f64 1/8 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 -1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 re) (exp.f64 im)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -1/2 (cos.f64 re)) (exp.f64 im)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (pow.f64 (exp.f64 im) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 im) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 re)) (/.f64 (neg.f64 (exp.f64 im)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 re) (*.f64 2 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 re)) (neg.f64 (*.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (cos.f64 re)) (neg.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (exp.f64 im))) (pow.f64 (exp.f64 im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 2/3) (cbrt.f64 (*.f64 -1/2 (cos.f64 re)))) (cbrt.f64 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 2/3) (cbrt.f64 (*.f64 1/2 (cos.f64 re)))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 1/2 (cos.f64 re))) (pow.f64 (exp.f64 im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))) (pow.f64 (*.f64 1/2 (cos.f64 re)) 2/3)) (pow.f64 (exp.f64 im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cos.f64 re) (cbrt.f64 (exp.f64 im))) 1/2) (pow.f64 (exp.f64 im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/8 (exp.f64 im))) (cos.f64 re)) (pow.f64 (exp.f64 im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 re) (/.f64 1/2 (pow.f64 (exp.f64 im) 2/3))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (pow.f64 (exp.f64 im) 2/3)) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -1/2 (cos.f64 re))) (pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 2/3)) (cbrt.f64 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 1/2 (cos.f64 re))) (pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 2/3)) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (exp.f64 im))) 1) (pow.f64 (exp.f64 im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (pow.f64 (exp.f64 im) 2/3))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -1/2 (cos.f64 re)) (cbrt.f64 (exp.f64 im))) (neg.f64 (pow.f64 (exp.f64 im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (exp.f64 im))) 1) (pow.f64 (exp.f64 im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) -1) (neg.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 1/2 (cos.f64 re)) (cbrt.f64 (exp.f64 im)))) (neg.f64 (pow.f64 (exp.f64 im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cos.f64 re) (exp.f64 im)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 -1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 -1/2 (cos.f64 re)) (exp.f64 im)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 3))))))"]],"rules":[["egg-rr",61],["egg-rr",18],["egg-rr",23]],"time":30.843017578125,"type":"rewrite"},{"count":[[150,130]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 re 2)))","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (*.f64 -1/2 (pow.f64 re 2))))","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 re 2)) (*.f64 -1/720 (pow.f64 re 6)))))","(*.f64 (cos.f64 re) (pow.f64 1 1/3))","(*.f64 (cos.f64 re) (pow.f64 1 1/3))","(*.f64 (cos.f64 re) (pow.f64 1 1/3))","(*.f64 (cos.f64 re) (pow.f64 1 1/3))","(*.f64 (cos.f64 re) (pow.f64 1 1/3))","(*.f64 (cos.f64 re) (pow.f64 1 1/3))","(*.f64 (cos.f64 re) (pow.f64 1 1/3))","(*.f64 (cos.f64 re) (pow.f64 1 1/3))","1","(+.f64 1 (*.f64 -1/6 (pow.f64 re 2)))","(+.f64 (*.f64 -1/72 (pow.f64 re 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 re 2))))","(+.f64 (*.f64 -23/6480 (pow.f64 re 6)) (+.f64 (*.f64 -1/72 (pow.f64 re 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 re 2)))))","(pow.f64 (cos.f64 re) 1/3)","(pow.f64 (cos.f64 re) 1/3)","(pow.f64 (cos.f64 re) 1/3)","(pow.f64 (cos.f64 re) 1/3)","(pow.f64 (cos.f64 re) 1/3)","(pow.f64 (cos.f64 re) 1/3)","(pow.f64 (cos.f64 re) 1/3)","(pow.f64 (cos.f64 re) 1/3)","(/.f64 1/2 (exp.f64 im))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im)))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im))))))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (cos.f64 re))","(+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im))))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re)))) (+.f64 (*.f64 -1/2 (cos.f64 re)) (*.f64 1/6 (cos.f64 re)))) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 re 2)))","(fma.f64 -1/2 (*.f64 re re) 1)","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (*.f64 -1/2 (pow.f64 re 2))))","(fma.f64 (pow.f64 re 4) 1/24 (fma.f64 -1/2 (*.f64 re re) 1))","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 re 2)) (*.f64 -1/720 (pow.f64 re 6)))))","(+.f64 (fma.f64 1/24 (pow.f64 re 4) 1) (fma.f64 -1/720 (pow.f64 re 6) (*.f64 -1/2 (*.f64 re re))))","(*.f64 (cos.f64 re) (pow.f64 1 1/3))","(cos.f64 re)","(*.f64 (cos.f64 re) (pow.f64 1 1/3))","(cos.f64 re)","(*.f64 (cos.f64 re) (pow.f64 1 1/3))","(cos.f64 re)","(*.f64 (cos.f64 re) (pow.f64 1 1/3))","(cos.f64 re)","(*.f64 (cos.f64 re) (pow.f64 1 1/3))","(cos.f64 re)","(*.f64 (cos.f64 re) (pow.f64 1 1/3))","(cos.f64 re)","(*.f64 (cos.f64 re) (pow.f64 1 1/3))","(cos.f64 re)","(*.f64 (cos.f64 re) (pow.f64 1 1/3))","(cos.f64 re)","1","(+.f64 1 (*.f64 -1/6 (pow.f64 re 2)))","(fma.f64 -1/6 (*.f64 re re) 1)","(+.f64 (*.f64 -1/72 (pow.f64 re 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 re 2))))","(fma.f64 -1/72 (pow.f64 re 4) (fma.f64 -1/6 (*.f64 re re) 1))","(+.f64 (*.f64 -23/6480 (pow.f64 re 6)) (+.f64 (*.f64 -1/72 (pow.f64 re 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 re 2)))))","(fma.f64 -23/6480 (pow.f64 re 6) (fma.f64 -1/72 (pow.f64 re 4) (fma.f64 -1/6 (*.f64 re re) 1)))","(pow.f64 (cos.f64 re) 1/3)","(cbrt.f64 (cos.f64 re))","(pow.f64 (cos.f64 re) 1/3)","(cbrt.f64 (cos.f64 re))","(pow.f64 (cos.f64 re) 1/3)","(cbrt.f64 (cos.f64 re))","(pow.f64 (cos.f64 re) 1/3)","(cbrt.f64 (cos.f64 re))","(pow.f64 (cos.f64 re) 1/3)","(cbrt.f64 (cos.f64 re))","(pow.f64 (cos.f64 re) 1/3)","(cbrt.f64 (cos.f64 re))","(pow.f64 (cos.f64 re) 1/3)","(cbrt.f64 (cos.f64 re))","(pow.f64 (cos.f64 re) 1/3)","(cbrt.f64 (cos.f64 re))","(/.f64 1/2 (exp.f64 im))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im))))","(/.f64 (+.f64 (*.f64 -1/4 (*.f64 re re)) 1/2) (exp.f64 im))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im)))))","(fma.f64 -1/4 (/.f64 (*.f64 re re) (exp.f64 im)) (/.f64 (+.f64 1/2 (*.f64 1/48 (pow.f64 re 4))) (exp.f64 im)))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im))))))","(+.f64 (/.f64 (+.f64 (*.f64 -1/4 (*.f64 re re)) (*.f64 1/48 (pow.f64 re 4))) (exp.f64 im)) (/.f64 (+.f64 1/2 (*.f64 -1/1440 (pow.f64 re 6))) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (cos.f64 re))","(+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))","(fma.f64 1/2 (cos.f64 re) (*.f64 (*.f64 (cos.f64 re) -1/2) im))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im))))","(fma.f64 (*.f64 -1/2 (*.f64 (cos.f64 re) -1/2)) (*.f64 im im) (fma.f64 1/2 (cos.f64 re) (*.f64 (*.f64 (cos.f64 re) -1/2) im)))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re)))) (+.f64 (*.f64 -1/2 (cos.f64 re)) (*.f64 1/6 (cos.f64 re)))) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))))","(+.f64 (*.f64 -1/2 (+.f64 (*.f64 (fma.f64 (cos.f64 re) -1/3 (*.f64 (neg.f64 -1/2) (cos.f64 re))) (pow.f64 im 3)) (*.f64 (*.f64 (cos.f64 re) -1/2) (*.f64 im im)))) (fma.f64 1/2 (cos.f64 re) (*.f64 (*.f64 (cos.f64 re) -1/2) im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))"]],"time":151.02099609375,"type":"simplify"},{"compiler":[[3866,2057]],"time":41.091064453125,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))","next",0.33240131837909415],["(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (pow.f64 (cbrt.f64 (cos.f64 re)) 3)) (exp.f64 im)))","done",0.22265625],["(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))","done",0.01953125]],"compiler":[[17,14],[19,13],[16,10],[17,14]],"count":[[185,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[182,0],"picked":[1,1]}],"min-error":[0.00390625],"time":61.805908203125,"type":"prune"},{"compiler":[[61,23]],"locations":[["(*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))",0.0078125,true],["(cos.f64 re)",0.0234375,false],["(*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))",0.17578125,true],["(*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))",0.2653312988422101,true]],"time":12.904052734375,"type":"localize"},{"count":[[3,72]],"series":[["(*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","im","-inf",0.18408203125],["(*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","im","inf",0.162109375],["(*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","im","0",0.23388671875],["(*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","re","-inf",0.158935546875],["(*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","re","inf",0.164794921875],["(*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","re","0",0.28515625],["(*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","im","-inf",0.464111328125],["(*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","im","inf",0.48291015625],["(*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","im","0",0.408935546875],["(*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","re","-inf",0.297119140625],["(*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","re","inf",0.4248046875],["(*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","re","0",0.43798828125],["(*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))","im","-inf",0.364013671875],["(*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))","im","inf",1.881103515625],["(*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))","im","0",0.6669921875],["(*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))","re","-inf",0.537841796875],["(*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))","re","inf",3.86181640625],["(*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))","re","0",0.89794921875]],"time":12.24609375,"type":"series"},{"count":[[3,169]],"inputs":[["(*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))","(*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) (/.f64 (*.f64 (cos.f64 re) (exp.f64 im)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (cos.f64 re) (exp.f64 im)) 2) (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 1/2) (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im))) (*.f64 (cbrt.f64 1/2) (*.f64 (*.f64 (cos.f64 re) (exp.f64 im)) (cbrt.f64 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))) (*.f64 1 (/.f64 (*.f64 (cos.f64 re) (exp.f64 im)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (*.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 0) (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (cos.f64 re))) (exp.f64 (neg.f64 im))) (*.f64 (*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (cos.f64 re))) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 (neg.f64 im))) (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (cos.f64 re))) (exp.f64 im)) (*.f64 (*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (cos.f64 re))) (exp.f64 (neg.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)) (*.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 (neg.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) (cbrt.f64 1/2)) (*.f64 (*.f64 (*.f64 (cos.f64 re) (exp.f64 im)) (cbrt.f64 1/4)) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2)) 1) (*.f64 (/.f64 (*.f64 (cos.f64 re) (exp.f64 im)) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (*.f64 0 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (neg.f64 im)) (*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (cos.f64 re)))) (*.f64 (exp.f64 im) (*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (cos.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (neg.f64 im)) (*.f64 1/2 (cos.f64 re))) (*.f64 (exp.f64 im) (*.f64 1/2 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 im) (*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (cos.f64 re)))) (*.f64 (exp.f64 (neg.f64 im)) (*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (cos.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 im) (*.f64 1/2 (cos.f64 re))) (*.f64 (exp.f64 (neg.f64 im)) (*.f64 1/2 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 1/2) (*.f64 (exp.f64 im) (*.f64 (cbrt.f64 1/4) (cos.f64 re)))) (*.f64 (cbrt.f64 1/2) (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 1/2) (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im))) (*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 1/2) (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im))) (*.f64 (cbrt.f64 1/2) (*.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 1/2) (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im))) (*.f64 (cbrt.f64 1/2) (*.f64 (exp.f64 im) (*.f64 (cbrt.f64 1/4) (cos.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 1/2) (*.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im))) (*.f64 (cbrt.f64 1/2) (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (exp.f64 im) (*.f64 (cbrt.f64 1/4) (cos.f64 re))) (cbrt.f64 1/2)) (*.f64 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) (cbrt.f64 1/2)) (*.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (exp.f64 im))) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) (cbrt.f64 1/2)) (*.f64 (*.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) (cbrt.f64 1/2)) (*.f64 (*.f64 (exp.f64 im) (*.f64 (cbrt.f64 1/4) (cos.f64 re))) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) (cbrt.f64 1/2)) (*.f64 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (*.f64 (pow.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 2/3) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (cos.f64 re))) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (*.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (pow.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 2/3) (cbrt.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (cbrt.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (pow.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/2) (cbrt.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))) (pow.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/2)) (*.f64 (cbrt.f64 (cbrt.f64 1/4)) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (cbrt.f64 1/2))) (cbrt.f64 (cbrt.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/2) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/4) (*.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 im)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 im) (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)) (/.f64 (*.f64 (cos.f64 re) (exp.f64 im)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cos.f64 re) (exp.f64 im)) 1/2 (/.f64 (*.f64 (cos.f64 re) (exp.f64 im)) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) (*.f64 (*.f64 (cos.f64 re) (exp.f64 im)) (cbrt.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (exp.f64 im))) (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 re) (exp.f64 im)) (cbrt.f64 1/4)) (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im))) (*.f64 1 (*.f64 (*.f64 (cos.f64 re) (exp.f64 im)) (cbrt.f64 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (*.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 0) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) 1) (*.f64 (*.f64 (*.f64 (cos.f64 re) (exp.f64 im)) (cbrt.f64 1/4)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (*.f64 0 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) (*.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 im) (*.f64 (cbrt.f64 1/4) (cos.f64 re))) (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) (*.f64 (exp.f64 im) (*.f64 (cbrt.f64 1/4) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (exp.f64 im) (*.f64 (cbrt.f64 1/4) (cos.f64 re)))) (*.f64 1 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im))) (*.f64 1 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im))) (*.f64 1 (*.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im))) (*.f64 1 (*.f64 (exp.f64 im) (*.f64 (cbrt.f64 1/4) (cos.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im))) (*.f64 1 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (exp.f64 im) (*.f64 (cbrt.f64 1/4) (cos.f64 re))) 1) (*.f64 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) 1) (*.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (exp.f64 im))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) 1) (*.f64 (*.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) 1) (*.f64 (*.f64 (exp.f64 im) (*.f64 (cbrt.f64 1/4) (cos.f64 re))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) 1) (*.f64 (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 re) (*.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (cbrt.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 (cbrt.f64 1/4) (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (pow.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (pow.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/4) (cbrt.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (pow.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/4)) (*.f64 (cbrt.f64 (cbrt.f64 1/16)) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (cbrt.f64 1/4))) (cbrt.f64 (cbrt.f64 1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 im)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 im) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/4 (pow.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 1/4 (pow.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (neg.f64 im)) (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (*.f64 (exp.f64 im) (*.f64 (cbrt.f64 1/4) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 (neg.f64 im)) (*.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/4) (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (cbrt.f64 1/4) (*.f64 (*.f64 (cos.f64 re) (exp.f64 im)) (cbrt.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 im) (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im) (/.f64 (*.f64 (cbrt.f64 1/4) (cos.f64 re)) (exp.f64 im)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 re) (exp.f64 im)) (/.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 0) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 0 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2/3) (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 re)) (*.f64 (pow.f64 (cos.f64 re) 2/3) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (pow.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2/3) (cbrt.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 re) (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (cbrt.f64 (cos.f64 re))) (pow.f64 (cos.f64 re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 re) 2/3) (+.f64 (*.f64 (exp.f64 im) (cbrt.f64 (cos.f64 re))) (/.f64 (cbrt.f64 (cos.f64 re)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 re) 2/3) (+.f64 (/.f64 (cbrt.f64 (cos.f64 re)) (exp.f64 im)) (*.f64 (exp.f64 im) (cbrt.f64 (cos.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 re) (exp.f64 (neg.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (neg.f64 im)) (cos.f64 re) (*.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (cos.f64 re)) (exp.f64 im)) (pow.f64 (cos.f64 re) 2/3) (*.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 (pow.f64 (exp.f64 (neg.f64 im)) 2/3) (cos.f64 re)) (*.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (cos.f64 re) (exp.f64 im))) (pow.f64 (cbrt.f64 (/.f64 (cos.f64 re) (exp.f64 im))) 2) (*.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cos.f64 re) (cbrt.f64 (exp.f64 im))) (pow.f64 (exp.f64 (neg.f64 im)) 2/3) (*.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 re)) (/.f64 (pow.f64 (cos.f64 re) 2/3) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 re) (exp.f64 im))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) (exp.f64 im))) 2) (/.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 im)) (*.f64 (pow.f64 (exp.f64 im) 2/3) (cos.f64 re)) (/.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 im) (cbrt.f64 (cos.f64 re))) (pow.f64 (cos.f64 re) 2/3) (/.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 re) (exp.f64 im)) (/.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 re) (cbrt.f64 (exp.f64 im))) (pow.f64 (exp.f64 im) 2/3) (/.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 re)) (*.f64 (pow.f64 (cos.f64 re) 2/3) (exp.f64 im)) (/.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 re) (exp.f64 im) (/.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 im) (cos.f64 re) (/.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cos.f64 re) (exp.f64 im)) 1 (*.f64 (cos.f64 re) (exp.f64 im)))))))"]],"rules":[["egg-rr",48],["egg-rr",58],["egg-rr",63]],"time":40.15087890625,"type":"rewrite"},{"count":[[241,220]],"inputs":[["(*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(+.f64 (*.f64 -1/2 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (*.f64 (pow.f64 re 2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(+.f64 (*.f64 1/24 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (*.f64 (pow.f64 re 4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))) (+.f64 (*.f64 -1/2 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (*.f64 (pow.f64 re 2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))))","(+.f64 (*.f64 -1/720 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (*.f64 (pow.f64 re 6) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))) (+.f64 (*.f64 1/24 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (*.f64 (pow.f64 re 4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))) (+.f64 (*.f64 -1/2 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (*.f64 (pow.f64 re 2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 2 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2))))","(+.f64 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (pow.f64 im 2)))) (*.f64 2 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2)))))","(+.f64 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (pow.f64 im 2)))) (+.f64 (*.f64 1/12 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (pow.f64 im 4))))) (*.f64 2 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2))))))","(+.f64 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (pow.f64 im 2)))) (+.f64 (*.f64 1/12 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (pow.f64 im 4))))) (+.f64 (*.f64 1/360 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (pow.f64 im 6))))) (*.f64 2 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2)))))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))) (cbrt.f64 1/2))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))) (cbrt.f64 1/2))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))) (cbrt.f64 1/2))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))) (cbrt.f64 1/2))))","(*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(+.f64 (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (*.f64 -1/2 (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 2)))))","(+.f64 (*.f64 1/24 (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 4)))) (+.f64 (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (*.f64 -1/2 (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 2))))))","(+.f64 (*.f64 1/24 (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 4)))) (+.f64 (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (+.f64 (*.f64 -1/2 (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 2)))) (*.f64 -1/720 (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 6)))))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 2 (*.f64 (cos.f64 re) (cbrt.f64 1/4)))","(+.f64 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (pow.f64 im 2))) (*.f64 2 (*.f64 (cos.f64 re) (cbrt.f64 1/4))))","(+.f64 (*.f64 1/12 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (pow.f64 im 4)))) (+.f64 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (pow.f64 im 2))) (*.f64 2 (*.f64 (cos.f64 re) (cbrt.f64 1/4)))))","(+.f64 (*.f64 1/12 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (pow.f64 im 4)))) (+.f64 (*.f64 1/360 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (pow.f64 im 6)))) (+.f64 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (pow.f64 im 2))) (*.f64 2 (*.f64 (cos.f64 re) (cbrt.f64 1/4))))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))","(+.f64 (exp.f64 im) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 re 2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (exp.f64 (neg.f64 im))))","(+.f64 (exp.f64 im) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 re 4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 re 2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (exp.f64 (neg.f64 im)))))","(+.f64 (exp.f64 im) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 re 4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 re 6) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 re 2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 2 (cos.f64 re))","(+.f64 (*.f64 (cos.f64 re) (pow.f64 im 2)) (*.f64 2 (cos.f64 re)))","(+.f64 (*.f64 1/12 (*.f64 (cos.f64 re) (pow.f64 im 4))) (+.f64 (*.f64 (cos.f64 re) (pow.f64 im 2)) (*.f64 2 (cos.f64 re))))","(+.f64 (*.f64 1/12 (*.f64 (cos.f64 re) (pow.f64 im 4))) (+.f64 (*.f64 1/360 (*.f64 (cos.f64 re) (pow.f64 im 6))) (+.f64 (*.f64 (cos.f64 re) (pow.f64 im 2)) (*.f64 2 (cos.f64 re)))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(+.f64 (*.f64 -1/2 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (*.f64 (pow.f64 re 2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(fma.f64 -1/2 (*.f64 1/2 (*.f64 (*.f64 re re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(+.f64 (*.f64 1/24 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (*.f64 (pow.f64 re 4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))) (+.f64 (*.f64 -1/2 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (*.f64 (pow.f64 re 2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))))","(fma.f64 (*.f64 1/2 (*.f64 (pow.f64 re 4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) 1/24 (fma.f64 -1/2 (*.f64 1/2 (*.f64 (*.f64 re re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(+.f64 (*.f64 -1/720 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (*.f64 (pow.f64 re 6) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))) (+.f64 (*.f64 1/24 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (*.f64 (pow.f64 re 4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))) (+.f64 (*.f64 -1/2 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (*.f64 (pow.f64 re 2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))))","(fma.f64 (*.f64 1/2 (*.f64 (pow.f64 re 6) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) -1/720 (fma.f64 (*.f64 1/2 (*.f64 (pow.f64 re 4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) 1/24 (fma.f64 -1/2 (*.f64 1/2 (*.f64 (*.f64 re re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 2 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2))))","(*.f64 (*.f64 2 (cos.f64 re)) 1/2)","(+.f64 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (pow.f64 im 2)))) (*.f64 2 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2)))))","(fma.f64 (cos.f64 re) (*.f64 1/2 (*.f64 im im)) (*.f64 (*.f64 2 (cos.f64 re)) 1/2))","(+.f64 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (pow.f64 im 2)))) (+.f64 (*.f64 1/12 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (pow.f64 im 4))))) (*.f64 2 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2))))))","(fma.f64 (cos.f64 re) (*.f64 1/2 (*.f64 im im)) (fma.f64 (*.f64 1/12 (cos.f64 re)) (*.f64 1/2 (pow.f64 im 4)) (*.f64 (*.f64 2 (cos.f64 re)) 1/2)))","(+.f64 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (pow.f64 im 2)))) (+.f64 (*.f64 1/12 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (pow.f64 im 4))))) (+.f64 (*.f64 1/360 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (pow.f64 im 6))))) (*.f64 2 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2)))))))","(fma.f64 (cos.f64 re) (*.f64 1/2 (*.f64 im im)) (fma.f64 1/12 (*.f64 (cos.f64 re) (*.f64 1/2 (pow.f64 im 4))) (fma.f64 (*.f64 1/360 (cos.f64 re)) (*.f64 1/2 (pow.f64 im 6)) (*.f64 (*.f64 2 (cos.f64 re)) 1/2))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(*.f64 (cos.f64 re) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))) (cbrt.f64 1/2))))","(*.f64 (cos.f64 re) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))) (cbrt.f64 1/2))))","(*.f64 (cos.f64 re) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))) (cbrt.f64 1/2))))","(*.f64 (cos.f64 re) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))) (cbrt.f64 1/2))))","(*.f64 (cos.f64 re) (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(+.f64 (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (*.f64 -1/2 (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 2)))))","(fma.f64 (*.f64 (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (*.f64 re re)) -1/2 (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(+.f64 (*.f64 1/24 (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 4)))) (+.f64 (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (*.f64 -1/2 (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 2))))))","(fma.f64 1/24 (*.f64 (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 re 4)) (fma.f64 (*.f64 (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (*.f64 re re)) -1/2 (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(+.f64 (*.f64 1/24 (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 4)))) (+.f64 (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (+.f64 (*.f64 -1/2 (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 2)))) (*.f64 -1/720 (*.f64 (cbrt.f64 1/4) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 6)))))))","(fma.f64 1/24 (*.f64 (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 re 4)) (fma.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (cbrt.f64 1/4) (fma.f64 -1/2 (*.f64 (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (*.f64 re re)) (*.f64 -1/720 (*.f64 (cbrt.f64 1/4) (*.f64 (pow.f64 re 6) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 2 (*.f64 (cos.f64 re) (cbrt.f64 1/4)))","(+.f64 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (pow.f64 im 2))) (*.f64 2 (*.f64 (cos.f64 re) (cbrt.f64 1/4))))","(*.f64 (*.f64 (cos.f64 re) (cbrt.f64 1/4)) (+.f64 (*.f64 im im) 2))","(+.f64 (*.f64 1/12 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (pow.f64 im 4)))) (+.f64 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (pow.f64 im 2))) (*.f64 2 (*.f64 (cos.f64 re) (cbrt.f64 1/4)))))","(fma.f64 1/12 (*.f64 (*.f64 (cos.f64 re) (cbrt.f64 1/4)) (pow.f64 im 4)) (*.f64 (*.f64 (cos.f64 re) (cbrt.f64 1/4)) (+.f64 (*.f64 im im) 2)))","(+.f64 (*.f64 1/12 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (pow.f64 im 4)))) (+.f64 (*.f64 1/360 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (pow.f64 im 6)))) (+.f64 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (pow.f64 im 2))) (*.f64 2 (*.f64 (cos.f64 re) (cbrt.f64 1/4))))))","(fma.f64 (*.f64 (*.f64 (cos.f64 re) (cbrt.f64 1/4)) (pow.f64 im 4)) 1/12 (fma.f64 1/360 (*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (pow.f64 im 6))) (*.f64 (*.f64 (cos.f64 re) (cbrt.f64 1/4)) (+.f64 (*.f64 im im) 2))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (cos.f64 re) (*.f64 (cbrt.f64 1/4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))","(+.f64 (exp.f64 im) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 re 2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (exp.f64 (neg.f64 im))))","(+.f64 (exp.f64 im) (fma.f64 -1/2 (*.f64 (*.f64 re re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (exp.f64 (neg.f64 im))))","(+.f64 (exp.f64 im) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 re 4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 re 2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (exp.f64 (neg.f64 im)))))","(+.f64 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 1/24 (pow.f64 re 4)) (*.f64 -1/2 (*.f64 re re)))) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(+.f64 (exp.f64 im) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 re 4) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 re 6) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 re 2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (exp.f64 (neg.f64 im))))))","(+.f64 (+.f64 (exp.f64 im) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 1/24 (pow.f64 re 4)) (*.f64 -1/720 (pow.f64 re 6))))) (fma.f64 -1/2 (*.f64 (*.f64 re re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 2 (cos.f64 re))","(+.f64 (*.f64 (cos.f64 re) (pow.f64 im 2)) (*.f64 2 (cos.f64 re)))","(*.f64 (cos.f64 re) (+.f64 2 (*.f64 im im)))","(+.f64 (*.f64 1/12 (*.f64 (cos.f64 re) (pow.f64 im 4))) (+.f64 (*.f64 (cos.f64 re) (pow.f64 im 2)) (*.f64 2 (cos.f64 re))))","(fma.f64 1/12 (*.f64 (cos.f64 re) (pow.f64 im 4)) (*.f64 (cos.f64 re) (+.f64 2 (*.f64 im im))))","(+.f64 (*.f64 1/12 (*.f64 (cos.f64 re) (pow.f64 im 4))) (+.f64 (*.f64 1/360 (*.f64 (cos.f64 re) (pow.f64 im 6))) (+.f64 (*.f64 (cos.f64 re) (pow.f64 im 2)) (*.f64 2 (cos.f64 re)))))","(fma.f64 1/12 (*.f64 (cos.f64 re) (pow.f64 im 4)) (fma.f64 1/360 (*.f64 (cos.f64 re) (pow.f64 im 6)) (*.f64 (cos.f64 re) (+.f64 2 (*.f64 im im)))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (cos.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))"]],"time":240.945068359375,"type":"simplify"},{"compiler":[[5340,2712]],"time":50.781005859375,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))","done",0.33240131837909415],["(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (pow.f64 (cbrt.f64 (cos.f64 re)) 3)) (exp.f64 im)))","done",0.22265625],["(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))","done",0.01953125],["(*.f64 (cbrt.f64 1/2) (pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) 3))","fresh",0.9707540281470322]],"compiler":[[17,14],[19,13],[16,10],[20,17]],"count":[[249,4]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[246,1],"picked":[1,1]}],"min-error":[0],"time":90.93994140625,"type":"prune"},{"accuracy":[0.01953125],"baseline":[0.01953125],"branch":[["re",0.01953125,1],["im",0.01953125,1],["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))",0.01953125,1],["(*.f64 1/2 (cos.f64 re))",0.01953125,1],["(cos.f64 re)",0.01953125,1],["(+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))",0.01953125,1],["(+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))",0.01953125,1]],"compiler":[[3,2],[3,2],[13,10],[6,5],[4,3],[8,6],[8,6],[77,41]],"count":[[5,1]],"inputs":[["(*.f64 (cbrt.f64 1/2) (pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) 3))","(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (pow.f64 (cbrt.f64 (cos.f64 re)) 3)) (exp.f64 im)))","(*.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))","(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))","(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))"]],"link":["."],"name":["math.cos on complex, real part"],"oracle":[1.0987028074523582],"outputs":[["(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))"]],"time":20.721923828125,"times":[["re",3.30810546875],["im",3.212890625],["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))",3.0810546875],["(*.f64 1/2 (cos.f64 re))",3.14990234375],["(cos.f64 re)",2.9150390625],["(+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))",1.69287109375],["(+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))",1.7099609375]],"type":"regimes"},{"compiler":[[16,10]],"inputs":[["(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im)))","(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))"]],"stop":[["fuel",1]],"time":19.109130859375,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[16,10]],"remove-preprocessing":[[]],"time":9.7041015625,"type":"end"}]
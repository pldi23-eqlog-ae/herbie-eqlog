[{"compiler":[[11,7]],"method":["search"],"sampling":[[12,0.45051130134947925,0.41638165730785204,0.1331070413426687],[11,0.4095557284995266,0.5012182010684683,0.08922607043200514],[10,0.3510477672853085,0.5655769584041082,0.08337527431058334],[9,0.23403184485687234,0.7098965960658461,0.05607155907728156],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":77.8837890625,"type":"analyze"},{"outcomes":[["body",256,"invalid",50.3505859375,1313],["body",256,"valid",321.3642578125,8256]],"time":381.13623046875,"type":"sample"},{"compiler":[[10,6]],"inputs":[["0","1","2"],["(+.f64 x (/.f64 (*.f64 y y) z))","(+.f64 y (/.f64 (*.f64 x x) z))","(+.f64 z (/.f64 (*.f64 y y) x))","(+.f64 x (/.f64 (*.f64 z z) y))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 x (/.f64 (*.f64 y y) z))","(fma.f64 y (/.f64 y z) x)","(+.f64 y (/.f64 (*.f64 x x) z))","(fma.f64 x (/.f64 x z) y)","(+.f64 z (/.f64 (*.f64 y y) x))","(fma.f64 y (/.f64 y x) z)","(+.f64 x (/.f64 (*.f64 z z) y))","(fma.f64 z (/.f64 z y) x)"]],"symmetry":[[]],"time":68.581787109375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 x (/.f64 (*.f64 y y) z))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 (*.f64 y y) z))","(fma.f64 y (/.f64 y z) x)"]],"time":17.38720703125,"type":"simplify"},{"compiler":[[16,8]],"time":0.289794921875,"type":"eval"},{"alts":[["(fma.f64 y (/.f64 y z) x)","next",0.0859375],["(+.f64 x (/.f64 (*.f64 y y) z))","fresh",7.750146742879403]],"compiler":[[9,5],[10,6],[9,5],[10,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0546875],"time":1.18310546875,"type":"prune"},{"compiler":[[15,5]],"locations":[["(fma.f64 y (/.f64 y z) x)",0.0859375,true]],"time":3.546875,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 y (/.f64 y z) x)","x","-inf",0.52001953125],["(fma.f64 y (/.f64 y z) x)","x","inf",0.25],["(fma.f64 y (/.f64 y z) x)","x","0",0.35498046875],["(fma.f64 y (/.f64 y z) x)","z","-inf",0.297119140625],["(fma.f64 y (/.f64 y z) x)","z","inf",0.310791015625],["(fma.f64 y (/.f64 y z) x)","z","0",0.342041015625],["(fma.f64 y (/.f64 y z) x)","y","-inf",0.636962890625],["(fma.f64 y (/.f64 y z) x)","y","inf",0.60595703125],["(fma.f64 y (/.f64 y z) x)","y","0",0.610107421875]],"time":4.05517578125,"type":"series"},{"count":[[1,35]],"inputs":[["(fma.f64 y (/.f64 y z) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 y z) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 y y) z) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (neg.f64 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 y (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) (pow.f64 (fma.f64 y (/.f64 y z) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y (/.f64 y z) x) 2/3) (cbrt.f64 (fma.f64 y (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y (/.f64 y z) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2)) (*.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 (*.f64 y y) z))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 (*.f64 y y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2)) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (/.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 y (/.f64 y z) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (/.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (/.f64 y z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (/.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (/.f64 y z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (/.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (/.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (/.f64 y z))) (pow.f64 (/.f64 y z) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (/.f64 y z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) (/.f64 1 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y z) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (/.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 y y) z) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 y y) z) x)))))"]],"rules":[["egg-rr",35]],"time":39.699951171875,"type":"rewrite"},{"count":[[71,39]],"inputs":[["x","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(/.f64 (pow.f64 y 2) z)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(/.f64 (pow.f64 y 2) z)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(/.f64 (pow.f64 y 2) z)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","x","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","x","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(/.f64 (pow.f64 y 2) z)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","x","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","x","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","x","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","x","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","x","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","x","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(fma.f64 y (/.f64 y z) x)"]],"time":106.240966796875,"type":"simplify"},{"compiler":[[390,114]],"time":4.325927734375,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2)) x)","fresh",15.6909808889413],["(+.f64 (/.f64 (pow.f64 y 2) z) x)","fresh",7.746240492879403],["(pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 3)","next",0.6756402832848188],["(fma.f64 y (/.f64 y z) x)","done",0.0859375]],"compiler":[[19,10],[10,7],[12,8],[9,5],[19,10],[10,7],[12,8]],"count":[[41,4]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[39,3],"picked":[1,1]}],"min-error":[0.03125],"time":7.317138671875,"type":"prune"},{"compiler":[[32,9]],"locations":[["(cbrt.f64 (fma.f64 y (/.f64 y z) x))",0.0625,true],["(fma.f64 y (/.f64 y z) x)",0.0859375,false],["(pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 3)",0.6433564453688406,true]],"time":6.1298828125,"type":"localize"},{"count":[[2,32]],"series":[["(cbrt.f64 (fma.f64 y (/.f64 y z) x))","x","-inf",0.23583984375],["(cbrt.f64 (fma.f64 y (/.f64 y z) x))","x","inf",0.2548828125],["(cbrt.f64 (fma.f64 y (/.f64 y z) x))","x","0",0.39697265625],["(cbrt.f64 (fma.f64 y (/.f64 y z) x))","z","-inf",0.31787109375],["(cbrt.f64 (fma.f64 y (/.f64 y z) x))","z","inf",0.379150390625],["(cbrt.f64 (fma.f64 y (/.f64 y z) x))","z","0",0.22607421875],["(cbrt.f64 (fma.f64 y (/.f64 y z) x))","y","-inf",0.238037109375],["(cbrt.f64 (fma.f64 y (/.f64 y z) x))","y","inf",0.27294921875],["(cbrt.f64 (fma.f64 y (/.f64 y z) x))","y","0",0.325927734375],["(pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 3)","x","-inf",0.464111328125],["(pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 3)","x","inf",0.526123046875],["(pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 3)","x","0",1.85302734375],["(pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 3)","z","-inf",1.468017578125],["(pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 3)","z","inf",2.7568359375],["(pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 3)","z","0",0.402099609375],["(pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 3)","y","-inf",0.4619140625],["(pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 3)","y","inf",0.77001953125],["(pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 3)","y","0",2.328125]],"time":14.01904296875,"type":"series"},{"count":[[2,53]],"inputs":[["(pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 3)","(cbrt.f64 (fma.f64 y (/.f64 y z) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (/.f64 y z) x) 0) (fma.f64 y (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 y z) x) (*.f64 (fma.f64 y (/.f64 y z) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 y (/.f64 y z) x)) (fma.f64 y (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 y z) x) (*.f64 0 (fma.f64 y (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x))) (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 4/3) 2) (cbrt.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) (pow.f64 (fma.f64 y (/.f64 y z) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y (/.f64 y z) x) 2/3) (cbrt.f64 (fma.f64 y (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 7/3) (cbrt.f64 (pow.f64 (fma.f64 y (/.f64 y z) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y (/.f64 y z) x) 2/3)) (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y (/.f64 y z) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (/.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (/.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (/.f64 y z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (/.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (/.f64 y z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (/.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (/.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (/.f64 y z))) (pow.f64 (/.f64 y z) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) (/.f64 1 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y z) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (/.f64 y z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (/.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 y y) z) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 y y) z) x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 0) (cbrt.f64 (fma.f64 y (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) (*.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (fma.f64 y (/.f64 y z) x))) (cbrt.f64 (fma.f64 y (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) (*.f64 0 (cbrt.f64 (fma.f64 y (/.f64 y z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 y (/.f64 y z) x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 4/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y (/.f64 y z) x) 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x))) (cbrt.f64 (pow.f64 (fma.f64 y (/.f64 y z) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (fma.f64 y (/.f64 y z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 y (/.f64 y z) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 y (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (/.f64 y z) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (fma.f64 y (/.f64 y z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (fma.f64 y (/.f64 y z) x))))))"]],"rules":[["egg-rr",18],["egg-rr",35]],"time":27.491943359375,"type":"rewrite"},{"count":[[85,104]],"inputs":[["(*.f64 (pow.f64 1 1/3) x)","(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) (/.f64 1 z))) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (/.f64 1 z))))))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) (/.f64 1 z))) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (/.f64 1 z))))) (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (/.f64 1 (pow.f64 z 2)))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (/.f64 1 (pow.f64 z 2)))))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (*.f64 (pow.f64 z 2) x)))) (*.f64 2/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (*.f64 (pow.f64 z 2) x)))))) (pow.f64 y 4))))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) (/.f64 1 z))) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (/.f64 1 z))))) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (/.f64 1 (pow.f64 z 2)))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (/.f64 1 (pow.f64 z 2)))))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (*.f64 (pow.f64 z 2) x)))) (*.f64 2/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (*.f64 (pow.f64 z 2) x)))))) (pow.f64 y 4)) (*.f64 (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 1 1/3) (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 2))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 10/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/3) (/.f64 1 (pow.f64 z 3)))) (*.f64 -2/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/3) (/.f64 1 (pow.f64 z 3)))))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (/.f64 1 (pow.f64 z 2)))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (/.f64 1 (pow.f64 z 2))))) z))) (*.f64 5/81 (*.f64 (pow.f64 1 1/3) (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 2)))))))) (pow.f64 y 6)))))","(*.f64 (pow.f64 1 1/3) x)","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (/.f64 (pow.f64 y 2) z))) (*.f64 (pow.f64 1 1/3) x)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4)))) (pow.f64 z 2))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))))))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (pow.f64 y 6) x))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 6))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 6) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3)))))))) (pow.f64 z 3))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (/.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 6))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 6) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3))))) (pow.f64 z 3)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4)))) (pow.f64 z 2))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 (pow.f64 y 6) (pow.f64 z 3)) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3)))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) (/.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4))))) (pow.f64 z 3)))))))))))))","(*.f64 (pow.f64 1 1/3) x)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2))) (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2)))) z)) (*.f64 (pow.f64 1 1/3) x))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2))) (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2)))) z)) (+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4)))) (pow.f64 z 2))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2))))))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2))) (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2)))) z)) (+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4))))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 -1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 6))) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 6) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3))))))) (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (pow.f64 y 6) x))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 6))) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 6) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3))))))) (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 6) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3))))))) (pow.f64 z 3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4)))) (pow.f64 z 2))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))))))))","(*.f64 (pow.f64 1 1/3) (/.f64 (pow.f64 y 2) z))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 y 8)) (pow.f64 z 4)) 1/9)) (*.f64 2/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 y 8)) (pow.f64 z 4)) 1/9))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (pow.f64 y 2) z)))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 y 8)) (pow.f64 z 4)) 1/9)) (*.f64 2/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 y 8)) (pow.f64 z 4)) 1/9))) x) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (pow.f64 y 2) z)) (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (/.f64 (*.f64 1 z) (pow.f64 y 2)) 1/9)) (+.f64 (*.f64 -1/9 (pow.f64 (/.f64 (*.f64 1 z) (pow.f64 y 2)) 1/9)) (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 y 2)) z) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 4)) (pow.f64 y 8)) 1/9)) (*.f64 1/9 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 4)) (pow.f64 y 8)) 1/9)))))) (pow.f64 x 2))))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 y 8)) (pow.f64 z 4)) 1/9)) (*.f64 2/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 y 8)) (pow.f64 z 4)) 1/9))) x) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 2)) (pow.f64 y 4)) 1/9) (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 4)) (pow.f64 y 8)) 1/9)) (*.f64 1/9 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 4)) (pow.f64 y 8)) 1/9))))) (+.f64 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 y 2)) z) 1/3) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 z) (pow.f64 y 2)) 1/3) (+.f64 (*.f64 1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 2)) (pow.f64 y 4)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 (pow.f64 z 2) (pow.f64 y 4)) 1/3)))))) (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (/.f64 z (pow.f64 y 2)))))) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 (pow.f64 z 2) (pow.f64 y 4)) 1/3))) (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 2)) (pow.f64 y 4)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 (pow.f64 z 2) (pow.f64 y 4)) 1/3))))))))) (pow.f64 x 3)) (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (/.f64 (*.f64 1 z) (pow.f64 y 2)) 1/9)) (+.f64 (*.f64 -1/9 (pow.f64 (/.f64 (*.f64 1 z) (pow.f64 y 2)) 1/9)) (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 y 2)) z) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 4)) (pow.f64 y 8)) 1/9)) (*.f64 1/9 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 4)) (pow.f64 y 8)) 1/9)))))) (pow.f64 x 2)))))","(pow.f64 x 1/3)","(+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (/.f64 (pow.f64 y 2) z))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/3) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (/.f64 (pow.f64 y 2) z)))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/3) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (*.f64 5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/3) (/.f64 (pow.f64 y 6) (pow.f64 z 3)))))))","(pow.f64 x 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) (/.f64 (pow.f64 y 2) z))) (pow.f64 x 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (pow.f64 x 1/3)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (/.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 6))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 6) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3))))) (pow.f64 z 3)))))))","(pow.f64 x 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) (/.f64 (pow.f64 y 2) z))) (pow.f64 x 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (pow.f64 x 1/3)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (/.f64 (+.f64 (*.f64 -1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 6))) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 6) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3))))) (pow.f64 z 3)))))))","(pow.f64 (/.f64 (pow.f64 y 2) z) 1/3)","(+.f64 (pow.f64 (/.f64 (pow.f64 y 2) z) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 2)) (pow.f64 y 4)) 1/9) x)))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 7)) (pow.f64 y 14)) 1/9) (pow.f64 x 2))) (+.f64 (pow.f64 (/.f64 (pow.f64 y 2) z) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 2)) (pow.f64 y 4)) 1/9) x))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 7)) (pow.f64 y 14)) 1/9) (pow.f64 x 2))) (+.f64 (pow.f64 (/.f64 (pow.f64 y 2) z) 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 2)) (pow.f64 y 4)) 1/9) x)) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 2)) (pow.f64 y 4)) 1/3) (*.f64 (+.f64 (*.f64 1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 2)) (pow.f64 y 4)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 (pow.f64 z 2) (pow.f64 y 4)) 1/3)))) (pow.f64 x 3)))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 1 1/3) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) (/.f64 1 z))) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (/.f64 1 z))))))","(+.f64 x (/.f64 (*.f64 y y) z))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) (/.f64 1 z))) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (/.f64 1 z))))) (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (/.f64 1 (pow.f64 z 2)))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (/.f64 1 (pow.f64 z 2)))))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (*.f64 (pow.f64 z 2) x)))) (*.f64 2/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (*.f64 (pow.f64 z 2) x)))))) (pow.f64 y 4))))","(+.f64 (+.f64 x (/.f64 (*.f64 y y) z)) (*.f64 (fma.f64 (cbrt.f64 x) (/.f64 (*.f64 (cbrt.f64 (pow.f64 x -4)) -1/9) (*.f64 z z)) (/.f64 1/9 (*.f64 (*.f64 z z) x))) (pow.f64 y 4)))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 1 1/3) (/.f64 1 z))) (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (/.f64 1 z))))) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (/.f64 1 (pow.f64 z 2)))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (/.f64 1 (pow.f64 z 2)))))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (*.f64 (pow.f64 z 2) x)))) (*.f64 2/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (*.f64 (pow.f64 z 2) x)))))) (pow.f64 y 4)) (*.f64 (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 1 1/3) (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 2))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 10/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/3) (/.f64 1 (pow.f64 z 3)))) (*.f64 -2/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/3) (/.f64 1 (pow.f64 z 3)))))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (/.f64 1 (pow.f64 z 2)))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (/.f64 1 (pow.f64 z 2))))) z))) (*.f64 5/81 (*.f64 (pow.f64 1 1/3) (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 2)))))))) (pow.f64 y 6)))))","(+.f64 (+.f64 x (/.f64 (*.f64 y y) z)) (fma.f64 (fma.f64 (cbrt.f64 x) (/.f64 (*.f64 (cbrt.f64 (pow.f64 x -4)) -1/9) (*.f64 z z)) (/.f64 1/9 (*.f64 (*.f64 z z) x))) (pow.f64 y 4) (*.f64 (fma.f64 -2/27 (*.f64 (pow.f64 z -3) (pow.f64 x -2)) (fma.f64 (cbrt.f64 x) (/.f64 (*.f64 (cbrt.f64 (pow.f64 x -7)) 4/81) (pow.f64 z 3)) (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 x -2)) (/.f64 (*.f64 (cbrt.f64 (pow.f64 x -4)) (pow.f64 z -2)) (/.f64 z -1/9))) (/.f64 (*.f64 5/81 (pow.f64 z -3)) (*.f64 x x))))) (pow.f64 y 6))))","(*.f64 (pow.f64 1 1/3) x)","x","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (/.f64 (pow.f64 y 2) z))) (*.f64 (pow.f64 1 1/3) x)))","(+.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 x 4) 1/9) (/.f64 (*.f64 y y) z)) 1) x)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4)))) (pow.f64 z 2))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))))))))","(+.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 x 4) 1/9) (/.f64 (*.f64 y y) z)) 1) (+.f64 x (fma.f64 (cbrt.f64 x) (/.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 x -4) 1/9) (pow.f64 y 4)) -1/9) (*.f64 z z)) (/.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (pow.f64 y 4)) 1/9) (*.f64 z z)))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (pow.f64 y 6) x))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 6))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 6) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3)))))))) (pow.f64 z 3))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (/.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 6))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 6) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3))))) (pow.f64 z 3)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4)))) (pow.f64 z 2))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 (pow.f64 y 6) (pow.f64 z 3)) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3)))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) (/.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4))))) (pow.f64 z 3)))))))))))))","(+.f64 (+.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 x 4) 1/9) (/.f64 (*.f64 y y) z)) 1) x) (fma.f64 (cbrt.f64 x) (*.f64 (fma.f64 -2/27 (/.f64 (pow.f64 y 6) x) (*.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 y 6)) (+.f64 -2/9 1/27))))) (pow.f64 z -3)) (fma.f64 -1/3 (/.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 y 6)) (+.f64 -2/9 1/27)) (pow.f64 z 3)) (fma.f64 (cbrt.f64 x) (/.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 x -4) 1/9) (pow.f64 y 4)) -1/9) (*.f64 z z)) (fma.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (pow.f64 (/.f64 (*.f64 y y) z) 2)) (fma.f64 -2/27 (*.f64 (*.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 y 6)) (pow.f64 z -3)) (fma.f64 2/9 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (pow.f64 (/.f64 (*.f64 y y) z) 2)) (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 x -2) 1/9) (/.f64 (*.f64 (*.f64 y y) (*.f64 (*.f64 (pow.f64 (pow.f64 x -4) 1/9) (pow.f64 y 4)) -1/9)) (pow.f64 z 3)))))))))))","(*.f64 (pow.f64 1 1/3) x)","x","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2))) (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2)))) z)) (*.f64 (pow.f64 1 1/3) x))","(+.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 x 4) 1/9) (*.f64 y y)) 1) z) x)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2))) (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2)))) z)) (+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4)))) (pow.f64 z 2))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2))))))))","(+.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 x 4) 1/9) (*.f64 y y)) 1) z) (+.f64 x (fma.f64 (cbrt.f64 x) (/.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 x -4) 1/9) (pow.f64 y 4)) -1/9) (*.f64 z z)) (/.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (pow.f64 y 4)) 1/9) (*.f64 z z)))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2))) (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2)))) z)) (+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4))))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 -1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 6))) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 6) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3))))))) (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (pow.f64 y 6) x))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 6))) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 6) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3))))))) (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 6) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3))))))) (pow.f64 z 3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 4)))) (pow.f64 z 2))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))))))))","(+.f64 (+.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 x 4) 1/9) (*.f64 y y)) 1) z) x) (-.f64 (fma.f64 (cbrt.f64 x) (/.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 x -4) 1/9) (pow.f64 y 4)) -1/9) (*.f64 z z)) (/.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 x) 1/9) (pow.f64 y 4)) 1/9) (*.f64 z z))) (*.f64 (fma.f64 -1/3 (*.f64 (pow.f64 (pow.f64 x -2) 1/9) (*.f64 (*.f64 y y) (*.f64 (*.f64 (pow.f64 (pow.f64 x -4) 1/9) (pow.f64 y 4)) -1/9))) (fma.f64 (cbrt.f64 x) (fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 x)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 y 6)) (+.f64 -1/27 2/9))) (/.f64 (*.f64 2/27 (pow.f64 y 6)) x)) (fma.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 y 6)) (+.f64 -1/27 2/9)) (*.f64 2/27 (*.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 y 6)))))) (pow.f64 z -3))))","(*.f64 (pow.f64 1 1/3) (/.f64 (pow.f64 y 2) z))","(/.f64 (*.f64 y y) z)","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 y 8)) (pow.f64 z 4)) 1/9)) (*.f64 2/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 y 8)) (pow.f64 z 4)) 1/9))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (pow.f64 y 2) z)))","(fma.f64 (pow.f64 (*.f64 (pow.f64 y 8) (pow.f64 z -4)) 1/9) x (/.f64 (*.f64 y y) z))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 y 8)) (pow.f64 z 4)) 1/9)) (*.f64 2/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 y 8)) (pow.f64 z 4)) 1/9))) x) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (pow.f64 y 2) z)) (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (/.f64 (*.f64 1 z) (pow.f64 y 2)) 1/9)) (+.f64 (*.f64 -1/9 (pow.f64 (/.f64 (*.f64 1 z) (pow.f64 y 2)) 1/9)) (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 y 2)) z) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 4)) (pow.f64 y 8)) 1/9)) (*.f64 1/9 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 4)) (pow.f64 y 8)) 1/9)))))) (pow.f64 x 2))))","(+.f64 (fma.f64 (pow.f64 (*.f64 (pow.f64 y 8) (pow.f64 z -4)) 1/9) x (/.f64 (*.f64 y y) z)) (*.f64 (+.f64 (*.f64 (pow.f64 (/.f64 z (*.f64 y y)) 1/9) 1/9) (*.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (*.f64 (pow.f64 (*.f64 (pow.f64 z 4) (pow.f64 y -8)) 1/9) -1/9))) (*.f64 x x)))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 y 8)) (pow.f64 z 4)) 1/9)) (*.f64 2/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 y 8)) (pow.f64 z 4)) 1/9))) x) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 2)) (pow.f64 y 4)) 1/9) (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 4)) (pow.f64 y 8)) 1/9)) (*.f64 1/9 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 4)) (pow.f64 y 8)) 1/9))))) (+.f64 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 y 2)) z) 1/3) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 z) (pow.f64 y 2)) 1/3) (+.f64 (*.f64 1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 2)) (pow.f64 y 4)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 (pow.f64 z 2) (pow.f64 y 4)) 1/3)))))) (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (/.f64 z (pow.f64 y 2)))))) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 (pow.f64 z 2) (pow.f64 y 4)) 1/3))) (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 2)) (pow.f64 y 4)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 (pow.f64 z 2) (pow.f64 y 4)) 1/3))))))))) (pow.f64 x 3)) (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (/.f64 (*.f64 1 z) (pow.f64 y 2)) 1/9)) (+.f64 (*.f64 -1/9 (pow.f64 (/.f64 (*.f64 1 z) (pow.f64 y 2)) 1/9)) (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 y 2)) z) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 4)) (pow.f64 y 8)) 1/9)) (*.f64 1/9 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 4)) (pow.f64 y 8)) 1/9)))))) (pow.f64 x 2)))))","(+.f64 (fma.f64 (pow.f64 (*.f64 (pow.f64 y 8) (pow.f64 z -4)) 1/9) x (/.f64 (*.f64 y y) z)) (fma.f64 (fma.f64 1/3 (*.f64 (pow.f64 (*.f64 (*.f64 z z) (pow.f64 y -4)) 1/9) (*.f64 (pow.f64 (*.f64 (pow.f64 z 4) (pow.f64 y -8)) 1/9) -1/9)) (fma.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 z (*.f64 y y))) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) (pow.f64 y -4))) (+.f64 -2/9 1/27))) (/.f64 (*.f64 -2/27 z) (*.f64 y y))) (fma.f64 -2/27 (cbrt.f64 (*.f64 (*.f64 z z) (pow.f64 y -4))) (*.f64 -1/3 (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) (pow.f64 y -4))) (+.f64 -2/9 1/27)))))) (pow.f64 x 3) (*.f64 (+.f64 (*.f64 (pow.f64 (/.f64 z (*.f64 y y)) 1/9) 1/9) (*.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (*.f64 (pow.f64 (*.f64 (pow.f64 z 4) (pow.f64 y -8)) 1/9) -1/9))) (*.f64 x x))))","(pow.f64 x 1/3)","(cbrt.f64 x)","(+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (/.f64 (pow.f64 y 2) z))))","(+.f64 (cbrt.f64 x) (*.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 x -2)) (/.f64 (*.f64 y y) z))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/3) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (/.f64 (pow.f64 y 2) z)))))","(fma.f64 -1/9 (*.f64 (cbrt.f64 (pow.f64 x -5)) (pow.f64 (/.f64 (*.f64 y y) z) 2)) (+.f64 (cbrt.f64 x) (*.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 x -2)) (/.f64 (*.f64 y y) z)))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 5)) 1/3) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (/.f64 (pow.f64 y 2) z))) (*.f64 5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/3) (/.f64 (pow.f64 y 6) (pow.f64 z 3)))))))","(fma.f64 -1/9 (*.f64 (cbrt.f64 (pow.f64 x -5)) (pow.f64 (/.f64 (*.f64 y y) z) 2)) (+.f64 (cbrt.f64 x) (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 x -2)) (/.f64 (*.f64 y y) z)) (/.f64 (*.f64 (*.f64 5/81 (cbrt.f64 (pow.f64 x -8))) (pow.f64 y 6)) (pow.f64 z 3)))))","(pow.f64 x 1/3)","(cbrt.f64 x)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) (/.f64 (pow.f64 y 2) z))) (pow.f64 x 1/3))","(fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 x -2) 1/9) (/.f64 (*.f64 y y) z)) (cbrt.f64 x))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (pow.f64 x 1/3)))","(fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 x -2) 1/9) (/.f64 (*.f64 y y) z)) (fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x -7) 1/9) (pow.f64 (/.f64 (*.f64 y y) z) 2)) (cbrt.f64 x)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (/.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 6))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 6) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3))))) (pow.f64 z 3)))))))","(+.f64 (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 x -2) 1/9) (/.f64 (*.f64 y y) z)) (fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x -7) 1/9) (pow.f64 (/.f64 (*.f64 y y) z) 2)) (cbrt.f64 x))) (*.f64 (*.f64 -1/3 (cbrt.f64 (pow.f64 x -2))) (/.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 y 6)) (+.f64 -2/9 1/27)) (pow.f64 z 3))))","(pow.f64 x 1/3)","(cbrt.f64 x)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) (/.f64 (pow.f64 y 2) z))) (pow.f64 x 1/3))","(fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 x -2) 1/9) (/.f64 (*.f64 y y) z)) (cbrt.f64 x))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (pow.f64 x 1/3)))","(fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 x -2) 1/9) (/.f64 (*.f64 y y) z)) (fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x -7) 1/9) (pow.f64 (/.f64 (*.f64 y y) z) 2)) (cbrt.f64 x)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) (/.f64 (pow.f64 y 2) z))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/9) (/.f64 (pow.f64 y 4) (pow.f64 z 2)))) (+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (/.f64 (+.f64 (*.f64 -1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 6))) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 y 6) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3))))) (pow.f64 z 3)))))))","(+.f64 (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 x -2) 1/9) (/.f64 (*.f64 y y) z)) (fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x -7) 1/9) (pow.f64 (/.f64 (*.f64 y y) z) 2)) (cbrt.f64 x))) (*.f64 (*.f64 1/3 (cbrt.f64 (pow.f64 x -2))) (/.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 y 6)) (+.f64 -1/27 2/9)) (pow.f64 z 3))))","(pow.f64 (/.f64 (pow.f64 y 2) z) 1/3)","(cbrt.f64 (/.f64 (*.f64 y y) z))","(+.f64 (pow.f64 (/.f64 (pow.f64 y 2) z) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 2)) (pow.f64 y 4)) 1/9) x)))","(+.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (*.f64 z z) (pow.f64 y -4)) 1/9) x)))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 7)) (pow.f64 y 14)) 1/9) (pow.f64 x 2))) (+.f64 (pow.f64 (/.f64 (pow.f64 y 2) z) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 2)) (pow.f64 y 4)) 1/9) x))))","(fma.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 z 7) (pow.f64 y 14)) 1/9) (*.f64 x x)) (+.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (*.f64 z z) (pow.f64 y -4)) 1/9) x))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 7)) (pow.f64 y 14)) 1/9) (pow.f64 x 2))) (+.f64 (pow.f64 (/.f64 (pow.f64 y 2) z) 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 2)) (pow.f64 y 4)) 1/9) x)) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 2)) (pow.f64 y 4)) 1/3) (*.f64 (+.f64 (*.f64 1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 2)) (pow.f64 y 4)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 (pow.f64 z 2) (pow.f64 y 4)) 1/3)))) (pow.f64 x 3)))))))","(fma.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 z 7) (pow.f64 y 14)) 1/9) (*.f64 x x)) (+.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (fma.f64 1/3 (*.f64 (pow.f64 (*.f64 (*.f64 z z) (pow.f64 y -4)) 1/9) x) (*.f64 -1/3 (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) (pow.f64 y -4))) (*.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) (pow.f64 y -4))) (+.f64 -2/9 1/27)) (pow.f64 x 3)))))))"]],"time":156.718994140625,"type":"simplify"},{"compiler":[[4450,2913]],"time":51.9140625,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2)) x)","fresh",15.6909808889413],["(+.f64 (/.f64 (pow.f64 y 2) z) x)","next",7.746240492879403],["(pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 3)","done",0.6756402832848188],["(fma.f64 y (/.f64 y z) x)","done",0.0859375]],"compiler":[[19,10],[10,7],[12,8],[9,5],[19,10],[10,7]],"count":[[147,4]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[143,0],"picked":[1,1]}],"min-error":[0.03125],"time":24.965087890625,"type":"prune"},{"compiler":[[22,13]],"locations":[["(pow.f64 y 2)",0.00390625,true],["(/.f64 (pow.f64 y 2) z)",11.910841241104103,true]],"time":5.89892578125,"type":"localize"},{"count":[[2,0]],"series":[["(pow.f64 y 2)","y","-inf",0.35107421875],["(pow.f64 y 2)","y","inf",0.29296875],["(pow.f64 y 2)","y","0",0.135986328125],["(/.f64 (pow.f64 y 2) z)","z","-inf",0.31494140625],["(/.f64 (pow.f64 y 2) z)","z","inf",0.322021484375],["(/.f64 (pow.f64 y 2) z)","z","0",0.4150390625],["(/.f64 (pow.f64 y 2) z)","y","-inf",0.154052734375],["(/.f64 (pow.f64 y 2) z)","y","inf",0.39404296875],["(/.f64 (pow.f64 y 2) z)","y","0",0.468017578125]],"time":2.930908203125,"type":"series"},{"count":[[2,94]],"inputs":[["(/.f64 (pow.f64 y 2) z)","(pow.f64 y 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y y) z) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (pow.f64 (/.f64 (*.f64 y y) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) (cbrt.f64 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 z)) (*.f64 y (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (pow.f64 z -2/3)) (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 y y)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (*.f64 (*.f64 y y) (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y y) (pow.f64 z -2/3)) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y y) (cbrt.f64 z)) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 y y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 y y) z) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 y y) z))) (neg.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) (neg.f64 (pow.f64 y 2/3))) (neg.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (pow.f64 y 6) z) (pow.f64 z 2/3))) (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (*.f64 y y)) (cbrt.f64 z)) (neg.f64 (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) (*.f64 0 (cbrt.f64 (neg.f64 (/.f64 (*.f64 y y) z)))))) (cbrt.f64 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (/.f64 (pow.f64 y 4/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 y 4/3) z) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y y) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 (pow.f64 y 6) z) (pow.f64 z 2/3)))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 y y) (pow.f64 z -2/3))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 y y)) (cbrt.f64 z)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2) (neg.f64 (*.f64 y y)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2) (/.f64 (*.f64 y y) (cbrt.f64 z)))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y y) (pow.f64 z -2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (pow.f64 y 6) z) (pow.f64 z 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y y) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) (neg.f64 (pow.f64 y 2/3))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 y y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) (neg.f64 (pow.f64 y 2/3)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y y) z)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 y y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 y y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (/.f64 (*.f64 y y) z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 y y) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 y y) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 y y) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 y y) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 y y) 9) 9)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 y y) 3/2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 y y) 6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 y y) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 y y) 1/3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (pow.f64 y 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 4/3) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) 5) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 y 2/3)) (neg.f64 (pow.f64 y 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 y y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y y) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (pow.f64 y 4/3) 0)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 y 4/3)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 y)) (neg.f64 (pow.f64 (cbrt.f64 y) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 y 4/3) 0) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (neg.f64 (neg.f64 (pow.f64 (cbrt.f64 y) 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 y 4/3) 0)) (+.f64 0 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 y 4/3) (+.f64 0 (*.f64 (pow.f64 y 2/3) 0))) (-.f64 (pow.f64 y 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 y 4/3) (*.f64 0 (neg.f64 (pow.f64 y 2/3))))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 y 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 y 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 y 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 y 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 y) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 y)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 y 3)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 y 6))))))"]],"rules":[["egg-rr",46],["egg-rr",48]],"time":40.710205078125,"type":"rewrite"},{"count":[[94,94]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"time":26.3408203125,"type":"simplify"},{"compiler":[[1106,540]],"time":13.003173828125,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2)) x)","next",15.6909808889413],["(+.f64 (/.f64 (pow.f64 y 2) z) x)","done",7.746240492879403],["(pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 3)","done",0.6756402832848188],["(fma.f64 y (/.f64 y z) x)","done",0.0859375]],"compiler":[[19,10],[10,7],[12,8],[9,5],[19,10]],"count":[[98,4]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[94,0],"picked":[1,1]}],"min-error":[0.03125],"time":22.385986328125,"type":"prune"},{"compiler":[[52,16]],"locations":[["(pow.f64 (/.f64 (*.f64 y y) z) 2)",0.1640625,true],["(/.f64 (*.f64 y y) z)",11.910841241104103,true],["(cbrt.f64 (/.f64 (*.f64 y y) z))",17.28126036250632,true],["(cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2))",32.11840738968,true]],"time":9.8759765625,"type":"localize"},{"count":[[4,48]],"series":[["(pow.f64 (/.f64 (*.f64 y y) z) 2)","z","-inf",0.656005859375],["(pow.f64 (/.f64 (*.f64 y y) z) 2)","z","inf",0.27099609375],["(pow.f64 (/.f64 (*.f64 y y) z) 2)","z","0",1.666015625],["(pow.f64 (/.f64 (*.f64 y y) z) 2)","y","-inf",0.1669921875],["(pow.f64 (/.f64 (*.f64 y y) z) 2)","y","inf",0.282958984375],["(pow.f64 (/.f64 (*.f64 y y) z) 2)","y","0",0.324951171875],["(/.f64 (*.f64 y y) z)","z","-inf",0.14111328125],["(/.f64 (*.f64 y y) z)","z","inf",0.14208984375],["(/.f64 (*.f64 y y) z)","z","0",0.1669921875],["(/.f64 (*.f64 y y) z)","y","-inf",0.14111328125],["(/.f64 (*.f64 y y) z)","y","inf",0.14208984375],["(/.f64 (*.f64 y y) z)","y","0",0.170166015625],["(cbrt.f64 (/.f64 (*.f64 y y) z))","z","-inf",0.419921875],["(cbrt.f64 (/.f64 (*.f64 y y) z))","z","inf",0.18994140625],["(cbrt.f64 (/.f64 (*.f64 y y) z))","z","0",0.18603515625],["(cbrt.f64 (/.f64 (*.f64 y y) z))","y","-inf",0.203125],["(cbrt.f64 (/.f64 (*.f64 y y) z))","y","inf",0.190185546875],["(cbrt.f64 (/.f64 (*.f64 y y) z))","y","0",0.255126953125],["(cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2))","z","-inf",0.8701171875],["(cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2))","z","inf",0.343017578125],["(cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2))","z","0",0.2900390625],["(cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2))","y","-inf",0.2109375],["(cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2))","y","inf",0.324951171875],["(cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2))","y","0",0.43505859375]],"time":8.432861328125,"type":"series"},{"count":[[4,219]],"inputs":[["(cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2))","(cbrt.f64 (/.f64 (*.f64 y y) z))","(/.f64 (*.f64 y y) z)","(pow.f64 (/.f64 (*.f64 y y) z) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) 0) (pow.f64 (/.f64 (*.f64 y y) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) (*.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (/.f64 (*.f64 y y) z) 2/3)) (pow.f64 (/.f64 (*.f64 y y) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) (*.f64 0 (pow.f64 (/.f64 (*.f64 y y) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (cbrt.f64 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 y y) z))) (cbrt.f64 (neg.f64 (/.f64 (*.f64 y y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 4/3)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 y y) z))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 5/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 5/3)) (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 y y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 y 4/3) (cbrt.f64 z)) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) 4/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 4/3) (cbrt.f64 (pow.f64 z -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (cbrt.f64 (/.f64 (/.f64 (*.f64 y y) z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (/.f64 (*.f64 y y) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 y 2/3)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 5/3))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 y 4/3) (cbrt.f64 (pow.f64 z 2/3))) (pow.f64 (cbrt.f64 (pow.f64 z 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (pow.f64 y 4))) (cbrt.f64 (neg.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 y 4/3) (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 y 4/3) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (neg.f64 (pow.f64 y 2/3))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 y 2/3)) (cbrt.f64 (/.f64 (*.f64 y y) z))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 y 4/3) (cbrt.f64 z)) 1) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 y 4/3) (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 y 4/3) (cbrt.f64 z)) 1) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 y 4/3)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (pow.f64 y 4/3) (cbrt.f64 z))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (pow.f64 y 4) (neg.f64 z))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 y y) z) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 y y) z))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 y y) z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) 0) (cbrt.f64 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (*.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (/.f64 (*.f64 y y) z))) (cbrt.f64 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (*.f64 0 (cbrt.f64 (/.f64 (*.f64 y y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 y y) z))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3)) (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 y y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 y 2/3)) (neg.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (cbrt.f64 z))) (cbrt.f64 (/.f64 y (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)))) (cbrt.f64 (pow.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y 2/3)) (cbrt.f64 (/.f64 (pow.f64 y 4/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z -1/3)) (cbrt.f64 (/.f64 (*.f64 y y) (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (/.f64 (*.f64 y y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 y y) z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3)) (cbrt.f64 (pow.f64 y 2/3))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 y 2/3)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 y 2/3)) 1) (*.f64 (cbrt.f64 (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 y y) (pow.f64 z 2/3))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 y 2/3) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 y 2/3)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 y 2/3)) 1) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 y 2/3) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 y y) (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 y y) z) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 y y) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 y y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (*.f64 y y) z))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 y y) z) 0) (/.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y y) z) (*.f64 (/.f64 (*.f64 y y) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 y y) z)) (/.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y y) z) (*.f64 0 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 z)) (neg.f64 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (/.f64 (*.f64 y y) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (pow.f64 (/.f64 (*.f64 y y) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) (cbrt.f64 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 y y)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 z)) (/.f64 y (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (/.f64 (pow.f64 y 4/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y y) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 y y) z))) (pow.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) 4/3) (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 y y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (pow.f64 z 2/3)) (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 y 4/3) z) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y y) (pow.f64 z 2/3)) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 y y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 y 2/3)) (pow.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) 4/3)) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))) (pow.f64 (cbrt.f64 (pow.f64 z 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y y) (pow.f64 z 2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y y) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 z)) y) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 z -1/3) (*.f64 y y)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) (neg.f64 (pow.f64 y 2/3))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (pow.f64 y 4/3)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (/.f64 (pow.f64 y 4/3) (cbrt.f64 z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 y 2/3)) (pow.f64 (/.f64 (*.f64 y y) z) 2/3)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y y) (pow.f64 z 2/3)) 1) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y y) (cbrt.f64 z)) 1) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y 4/3) (cbrt.f64 (/.f64 (*.f64 y y) z))) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 y 4/3) (cbrt.f64 z)) (cbrt.f64 (/.f64 (*.f64 y y) z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (/.f64 y (pow.f64 z 2/3))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y y) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y y) (cbrt.f64 z)) 1) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 y y)) (cbrt.f64 z)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y y) (pow.f64 z 2/3)) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y y) (pow.f64 z 2/3)) 1) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 y 2/3)) (/.f64 (pow.f64 y 4/3) (cbrt.f64 z))) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y 2/3) (/.f64 (pow.f64 y 4/3) (cbrt.f64 z))) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 y 4/3) (cbrt.f64 z)) (pow.f64 y 2/3)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 y 4/3) (cbrt.f64 z)) (neg.f64 (pow.f64 y 2/3))) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 y y) (pow.f64 z 2/3))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 y y) (cbrt.f64 z))) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 y y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 y y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (*.f64 y y) z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2) 0) (pow.f64 (/.f64 (*.f64 y y) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2) (*.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (/.f64 (*.f64 y y) z) 2)) (pow.f64 (/.f64 (*.f64 y y) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2) (*.f64 0 (pow.f64 (/.f64 (*.f64 y y) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y y) z) (/.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) (pow.f64 (/.f64 (*.f64 y y) z) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 y y) z) 4/3) (pow.f64 (/.f64 (*.f64 y y) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 y 4) z) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3)) (pow.f64 (pow.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y y) (/.f64 (/.f64 (*.f64 y y) z) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (pow.f64 (/.f64 (*.f64 y y) z) 5/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 4) (pow.f64 z -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 y y) z)) (neg.f64 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (/.f64 (pow.f64 y 4) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 y y) z) 5/3) (cbrt.f64 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 y y) z) z) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) 4/3) 2) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -2) (pow.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (/.f64 y (cbrt.f64 z))) (*.f64 (/.f64 y (pow.f64 z 2/3)) (/.f64 y (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 4/3) (*.f64 (/.f64 (pow.f64 y 4/3) z) (/.f64 (pow.f64 y 4/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 4) (*.f64 (/.f64 -1 z) (/.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y y) (*.f64 (/.f64 y z) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z -2)) (*.f64 (/.f64 (*.f64 y y) (pow.f64 z 2/3)) (/.f64 (*.f64 y y) (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (/.f64 (*.f64 y y) z)) 1) (*.f64 (neg.f64 (/.f64 (*.f64 y y) z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 y 4)) (/.f64 1 (neg.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 y 4) (neg.f64 z)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (/.f64 (*.f64 y y) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 y 4) (neg.f64 z)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 y 4) z) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 y 4) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 y 4)) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y y) z) (/.f64 (*.f64 y y) (pow.f64 z 2/3))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y y) z) (/.f64 (*.f64 y y) (cbrt.f64 z))) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 y y) z) 4/3) (pow.f64 y 4/3)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 y y) z) 4/3) (/.f64 (pow.f64 y 4/3) (cbrt.f64 z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 y 4) z) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 y 4) z) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 y 4) z) (pow.f64 z -1/3)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 y 2/3)) (pow.f64 (/.f64 (*.f64 y y) z) 5/3)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y 2/3) (pow.f64 (/.f64 (*.f64 y y) z) 5/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y y) (pow.f64 z 2/3)) (/.f64 (*.f64 y y) z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y y) (cbrt.f64 z)) (/.f64 (*.f64 y y) z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y 4/3) (pow.f64 (/.f64 (*.f64 y y) z) 4/3)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 y 4/3) (cbrt.f64 z)) (pow.f64 (/.f64 (*.f64 y y) z) 4/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 y 4)) 1) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 y 4) (neg.f64 z)) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 y 4) z) (pow.f64 z 2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 y 4) z) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 y 4) z) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 y 4) z) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 y 4) (neg.f64 z)) (cbrt.f64 z)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 y 4) (neg.f64 z)) -1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 y 4) (neg.f64 z)) (cbrt.f64 (neg.f64 z))) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 y 4) (neg.f64 z)) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 y 4)) 1) (*.f64 (neg.f64 (*.f64 z z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 y y)) (/.f64 (*.f64 y y) (pow.f64 z 2/3))) (*.f64 (neg.f64 z) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 y y)) (/.f64 (*.f64 y y) (cbrt.f64 z))) (*.f64 (neg.f64 z) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y y) (pow.f64 z 2/3)) (/.f64 (*.f64 y y) (pow.f64 z 2/3))) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y y) (pow.f64 z 2/3)) (*.f64 y y)) (*.f64 (cbrt.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y y) (pow.f64 z 2/3)) (neg.f64 (*.f64 y y))) (*.f64 (cbrt.f64 z) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y y) (pow.f64 z 2/3)) (/.f64 (*.f64 y y) (cbrt.f64 z))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y y) (cbrt.f64 z)) (/.f64 (*.f64 y y) (pow.f64 z 2/3))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y y) (cbrt.f64 z)) (*.f64 y y)) (*.f64 (pow.f64 z 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y y) (cbrt.f64 z)) (neg.f64 (*.f64 y y))) (*.f64 (pow.f64 z 2/3) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y y) (cbrt.f64 z)) (/.f64 (*.f64 y y) (cbrt.f64 z))) (*.f64 (pow.f64 z 2/3) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y y) (/.f64 (*.f64 y y) (pow.f64 z 2/3))) (*.f64 z (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y y) (/.f64 (*.f64 y y) (cbrt.f64 z))) (*.f64 z (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (pow.f64 y 4) (neg.f64 z))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 y y) z) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 y y) z) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 y y) z) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 (*.f64 y y) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (*.f64 y y) z)) (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 y y) z) (neg.f64 (/.f64 (*.f64 y y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 6))))))"]],"rules":[["egg-rr",83],["egg-rr",62],["egg-rr",33],["egg-rr",41]],"time":38.406005859375,"type":"rewrite"},{"count":[[267,221]],"inputs":[["(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(/.f64 (pow.f64 y 4) (pow.f64 z 2))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 2) z)","(/.f64 (*.f64 y y) z)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)","(/.f64 (pow.f64 y 4) (pow.f64 z 2))","(pow.f64 (/.f64 (*.f64 y y) z) 2)"]],"time":138.7060546875,"type":"simplify"},{"compiler":[[6130,2279]],"time":52.280029296875,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (/.f64 (cbrt.f64 (/.f64 (pow.f64 y 4) (neg.f64 z))) (cbrt.f64 (neg.f64 z))) x)","fresh",19.37106649433145],["(fma.f64 y (/.f64 y z) x)","done",0.0859375],["(fma.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (pow.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) 2) x)","fresh",7.821423073342267],["(pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 3)","done",0.6756402832848188],["(fma.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2)) x)","done",15.6909808889413]],"compiler":[[22,14],[9,5],[19,9],[12,8],[19,10]],"count":[[288,5]],"kept":[{"done":[3,2],"fresh":[0,0],"new":[284,2],"picked":[1,1]}],"min-error":[0.0234375],"time":102.883056640625,"type":"prune"},{"accuracy":[0.0859375],"baseline":[0.0859375],"branch":[["x",0.0859375,1],["y",0.0859375,1],["z",0.0859375,1],["(+.f64 x (/.f64 (*.f64 y y) z))",0.0859375,1],["(/.f64 (*.f64 y y) z)",0.0859375,1],["(/.f64 (*.f64 y y) z)",0.0859375,1],["(*.f64 y y)",0.0859375,1],["(*.f64 y y)",0.0859375,1]],"compiler":[[4,3],[4,3],[4,3],[10,6],[8,5],[8,5],[6,4],[6,4],[83,31]],"count":[[7,1]],"inputs":[["(fma.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (/.f64 (cbrt.f64 (/.f64 (pow.f64 y 4) (neg.f64 z))) (cbrt.f64 (neg.f64 z))) x)","(fma.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (pow.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) 2) x)","(fma.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 y y) z) 2)) x)","(+.f64 (/.f64 (pow.f64 y 2) z) x)","(pow.f64 (cbrt.f64 (fma.f64 y (/.f64 y z) x)) 3)","(fma.f64 y (/.f64 y z) x)","(+.f64 x (/.f64 (*.f64 y y) z))"]],"link":["."],"name":["Crypto.Random.Test:calculate from crypto-random-0.0.9"],"oracle":[22.56454042016341],"outputs":[["(fma.f64 y (/.f64 y z) x)"]],"time":27.762939453125,"times":[["x",3.94091796875],["y",3.689208984375],["z",3.754150390625],["(+.f64 x (/.f64 (*.f64 y y) z))",3.656005859375],["(/.f64 (*.f64 y y) z)",2.764892578125],["(/.f64 (*.f64 y y) z)",2.77001953125],["(*.f64 y y)",2.81201171875],["(*.f64 y y)",2.672119140625]],"type":"regimes"},{"compiler":[[9,5]],"inputs":[["(fma.f64 y (/.f64 y z) x)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 y (/.f64 y z) x)"]],"stop":[["fuel",1]],"time":37.4560546875,"type":"simplify"},{"time":0.017822265625,"type":"soundness"},{"compiler":[[9,5]],"remove-preprocessing":[[]],"time":7.714111328125,"type":"end"}]
[{"compiler":[[20,14]],"method":["search"],"sampling":[[12,0.15204642147183178,0.8460018835740384,0.0019516949541298345],[11,0.09356702859805033,0.9044812764478198,0.0019516949541298345],[10,0.0,0.9980483050458702,0.0019516949541298345],[9,0.0,0.9980483050458702,0.0019516949541298345],[8,0.0,0.9980483050458702,0.0019516949541298345],[7,0.0,0.9980483050458702,0.0019516949541298345],[6,0.0,0.9980483050458702,0.0019516949541298345],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":184.01806640625,"type":"analyze"},{"outcomes":[["body",256,"invalid",174.116455078125,3137],["body",256,"valid",458.317626953125,8256]],"time":643.131103515625,"type":"sample"},{"compiler":[[19,13]],"inputs":[["0","1","2","3"],["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))","(+.f64 (-.f64 y (/.f64 x (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) x)))","(+.f64 (-.f64 z (/.f64 y (*.f64 x 3))) (/.f64 t (*.f64 (*.f64 x 3) y)))","(+.f64 (-.f64 t (/.f64 y (*.f64 z 3))) (/.f64 x (*.f64 (*.f64 z 3) y)))","(+.f64 (-.f64 x (/.f64 z (*.f64 y 3))) (/.f64 t (*.f64 (*.f64 y 3) z)))","(+.f64 (-.f64 x (/.f64 t (*.f64 z 3))) (/.f64 y (*.f64 (*.f64 z 3) t)))","(+.f64 (-.f64 x (/.f64 y (*.f64 t 3))) (/.f64 z (*.f64 (*.f64 t 3) y)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))","(-.f64 (+.f64 (/.f64 t (*.f64 (*.f64 z 3) y)) x) (/.f64 y (*.f64 z 3)))","(+.f64 (-.f64 y (/.f64 x (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) x)))","(-.f64 y (-.f64 (/.f64 x (*.f64 z 3)) (/.f64 t (*.f64 (*.f64 z 3) x))))","(+.f64 (-.f64 z (/.f64 y (*.f64 x 3))) (/.f64 t (*.f64 (*.f64 x 3) y)))","(-.f64 z (-.f64 (/.f64 y (*.f64 x 3)) (/.f64 t (*.f64 (*.f64 x 3) y))))","(+.f64 (-.f64 t (/.f64 y (*.f64 z 3))) (/.f64 x (*.f64 (*.f64 z 3) y)))","(-.f64 t (-.f64 (/.f64 y (*.f64 z 3)) (/.f64 x (*.f64 (*.f64 z 3) y))))","(+.f64 (-.f64 x (/.f64 z (*.f64 y 3))) (/.f64 t (*.f64 (*.f64 y 3) z)))","(-.f64 x (-.f64 (/.f64 z (*.f64 y 3)) (/.f64 t (*.f64 (*.f64 z 3) y))))","(+.f64 (-.f64 x (/.f64 t (*.f64 z 3))) (/.f64 y (*.f64 (*.f64 z 3) t)))","(-.f64 x (-.f64 (/.f64 t (*.f64 z 3)) (/.f64 y (*.f64 (*.f64 z 3) t))))","(+.f64 (-.f64 x (/.f64 y (*.f64 t 3))) (/.f64 z (*.f64 (*.f64 t 3) y)))","(-.f64 x (-.f64 (/.f64 y (*.f64 t 3)) (/.f64 z (*.f64 (*.f64 t 3) y))))"]],"symmetry":[[]],"time":73.07177734375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))","(+.f64 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))"]],"time":21.876220703125,"type":"simplify"},{"compiler":[[30,19]],"time":0.450927734375,"type":"eval"},{"alts":[["(+.f64 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))","next",2.7646675293053264],["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))","fresh",3.2520985108912908]],"compiler":[[15,10],[19,13],[15,10],[19,13]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.13738251953688405],"time":1.409912109375,"type":"prune"},{"compiler":[[40,16]],"locations":[["(-.f64 (/.f64 t y) y)",0.00390625,true],["(+.f64 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))",0.0078125,true],["(/.f64 1/3 z)",0.390625,true],["(*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))",2.6325338480180136,true]],"time":8.009033203125,"type":"localize"},{"count":[[4,108]],"series":[["(-.f64 (/.f64 t y) y)","y","-inf",0.14990234375],["(-.f64 (/.f64 t y) y)","y","inf",0.14306640625],["(-.f64 (/.f64 t y) y)","y","0",0.172119140625],["(-.f64 (/.f64 t y) y)","t","-inf",0.155029296875],["(-.f64 (/.f64 t y) y)","t","inf",0.176025390625],["(-.f64 (/.f64 t y) y)","t","0",0.156982421875],["(+.f64 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))","y","-inf",0.1708984375],["(+.f64 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))","y","inf",0.202880859375],["(+.f64 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))","y","0",0.177978515625],["(+.f64 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))","t","-inf",0.217041015625],["(+.f64 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))","t","inf",0.17919921875],["(+.f64 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))","t","0",0.211181640625],["(+.f64 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))","z","-inf",0.1640625],["(+.f64 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))","z","inf",0.1640625],["(+.f64 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))","z","0",0.20703125],["(+.f64 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))","x","-inf",0.18603515625],["(+.f64 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))","x","inf",0.73876953125],["(+.f64 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))","x","0",0.440185546875],["(/.f64 1/3 z)","z","-inf",0.23193359375],["(/.f64 1/3 z)","z","inf",0.258056640625],["(/.f64 1/3 z)","z","0",0.299072265625],["(*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))","y","-inf",0.508056640625],["(*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))","y","inf",0.56298828125],["(*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))","y","0",0.864013671875],["(*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))","t","-inf",0.40283203125],["(*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))","t","inf",0.531982421875],["(*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))","t","0",0.68603515625],["(*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))","z","-inf",0.31298828125],["(*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))","z","inf",0.4970703125],["(*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))","z","0",0.864013671875]],"time":10.409912109375,"type":"series"},{"count":[[4,210]],"inputs":[["(*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))","(/.f64 1/3 z)","(+.f64 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))","(-.f64 (/.f64 t y) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/3 z) (/.f64 t y)) (*.f64 (/.f64 1/3 z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/3 z) (neg.f64 y)) (*.f64 (/.f64 1/3 z) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) (*.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) 0) (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (/.f64 1/3 z) (/.f64 t y))) (*.f64 1 (*.f64 (/.f64 1/3 z) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) (*.f64 0 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))) (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 1/3 z) (/.f64 t y)) 1) (*.f64 (*.f64 (/.f64 1/3 z) (neg.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (/.f64 -1/3 z) (-.f64 (/.f64 t y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/3 z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 1/3 z) 2)) (-.f64 (/.f64 t y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (/.f64 t y) y)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 t y) y) 2)) (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) 2)) (cbrt.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 (/.f64 1/3 z))) (cbrt.f64 (pow.f64 (/.f64 1/3 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1/3 z) (cbrt.f64 (-.f64 (/.f64 t y) y))) (cbrt.f64 (pow.f64 (-.f64 (/.f64 t y) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/27 z)) (/.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (/.f64 -1/3 z) (-.f64 (/.f64 t y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (/.f64 t y) y) -1/3) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (/.f64 t y) y) -1/3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 (/.f64 1/27 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 t y) y) (*.f64 z 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) 2)) (cbrt.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/27 z)) (-.f64 (/.f64 t y) y)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (/.f64 t y) y) -1/3) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 (pow.f64 (/.f64 1/3 z) 2)) (-.f64 (/.f64 t y) y))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -1/3) (*.f64 (cbrt.f64 (pow.f64 (/.f64 1/3 z) 2)) (-.f64 (/.f64 t y) y))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) -1/3) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1/3 z) (-.f64 (/.f64 t y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/3 z) (/.f64 t y) (*.f64 (/.f64 1/3 z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 t y) (/.f64 1/3 z) (*.f64 (/.f64 1/3 z) (neg.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/3 z) (*.f64 (/.f64 1/3 z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/3 z) 0) (/.f64 1/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/3 z) (*.f64 0 (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 1/3 z)) (/.f64 1/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -1/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 z 3)) (/.f64 -1/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/3 z) (/.f64 0 (*.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 z)) (/.f64 -1/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/27 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/3 z)) (cbrt.f64 (pow.f64 (/.f64 1/3 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 1/3 z) 2)) (cbrt.f64 (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/3 z)) (cbrt.f64 (/.f64 1/9 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (/.f64 (sqrt.f64 1/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 1/3) (cbrt.f64 z)) (/.f64 (sqrt.f64 1/3) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (cbrt.f64 (/.f64 1/27 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (/.f64 (cbrt.f64 1/9) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1/3 z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 1/27 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (neg.f64 z) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 z 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (*.f64 z 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (*.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1/3 (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1/27 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/3 z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 z -1/3) 1/3) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sqrt.f64 1/3) (cbrt.f64 z)) (sqrt.f64 1/3)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 z) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 1/3 z) 2)) (cbrt.f64 1/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 1/3 z) 2)) (cbrt.f64 -1/3)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/3 z)) (cbrt.f64 1/9)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/27 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1/27 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/3) (cbrt.f64 (/.f64 1/9 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/3) (cbrt.f64 (pow.f64 (/.f64 1/3 z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -1/3) (cbrt.f64 (/.f64 1/9 (*.f64 z z)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -1/3) (cbrt.f64 (pow.f64 (/.f64 1/3 z) 2))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/3) (/.f64 (sqrt.f64 1/3) (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 1/27 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1/3 -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1/3 (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 1/27 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/3 z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z 3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/3 z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/3 z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/3 z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1/3 z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -1/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1/3 z) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (*.f64 (/.f64 1/3 z) (/.f64 t y))) (*.f64 (/.f64 1/3 z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/3 z) (/.f64 t y)) (+.f64 (*.f64 (/.f64 1/3 z) (neg.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) (*.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) 0) (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) (*.f64 0 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)) (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 (/.f64 -1/3 z) (-.f64 (/.f64 t y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)) (cbrt.f64 (pow.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) 2)) (cbrt.f64 (*.f64 (/.f64 (*.f64 x 1/3) z) (-.f64 (/.f64 t y) y))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) 2)) (-.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 (/.f64 (*.f64 x 1/3) z) (-.f64 (/.f64 t y) y))))) (+.f64 (cbrt.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) 2)) (cbrt.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/3 z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 1/3 z) 2)) (-.f64 (/.f64 t y) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/27 z)) (/.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 (*.f64 z z))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) (/.f64 1 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (/.f64 t y) y)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 t y) y) 2)) (/.f64 1/3 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) 2)) (cbrt.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 (/.f64 1/3 z))) (cbrt.f64 (pow.f64 (/.f64 1/3 z) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (/.f64 -1/3 z) (-.f64 (/.f64 t y) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 1/3 z) (cbrt.f64 (-.f64 (/.f64 t y) y))) (cbrt.f64 (pow.f64 (-.f64 (/.f64 t y) y) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 t y) y) (*.f64 (-.f64 (/.f64 t y) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (/.f64 t y) y) 0) (-.f64 (/.f64 t y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 t y) y) (*.f64 0 (-.f64 (/.f64 t y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (/.f64 t y) y)) (-.f64 (/.f64 t y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 t y) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 y) (/.f64 t y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 y) (*.f64 (neg.f64 (/.f64 t y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (/.f64 t y) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 t y) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 y (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 t y) 0) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 y) (neg.f64 (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (/.f64 t y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 t y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 y (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (/.f64 t y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 y (/.f64 t y)))) (cbrt.f64 (pow.f64 (-.f64 (/.f64 t y) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 t y) 2)) (+.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 t))) (-.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (/.f64 t y) y)) (cbrt.f64 (pow.f64 (-.f64 (/.f64 t y) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 t y) y) 2)) (cbrt.f64 (-.f64 (/.f64 t y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 y (/.f64 t y))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 t y) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 t y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (/.f64 t y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 t y) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 t y) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 t y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (/.f64 t y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 y (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 y (/.f64 t y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (/.f64 t y) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 (pow.f64 (/.f64 t y) 2)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 t y) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 y (/.f64 t y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 y) (/.f64 t y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (neg.f64 (cbrt.f64 (*.f64 y y))) (/.f64 t y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 t y) 2)) (cbrt.f64 (/.f64 t y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 t y) 1 (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (/.f64 t y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 t) (/.f64 (cbrt.f64 (*.f64 t t)) y) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y -1/3) (/.f64 t (cbrt.f64 (*.f64 y y))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 t) (/.f64 -1 y) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (/.f64 t y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (/.f64 t y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (/.f64 t y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (/.f64 t y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (/.f64 t y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (/.f64 1 y) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 y)) (cbrt.f64 (*.f64 y y)) (/.f64 t y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) t (neg.f64 y))))))"]],"rules":[["egg-rr",49],["egg-rr",45],["egg-rr",57],["egg-rr",59]],"time":39.0009765625,"type":"rewrite"},{"count":[[318,226]],"inputs":[["(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 -1 y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(+.f64 (/.f64 t y) (*.f64 -1 y))","(+.f64 (/.f64 t y) (*.f64 -1 y))","(/.f64 t y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(+.f64 (/.f64 t y) (*.f64 -1 y))","(+.f64 (/.f64 t y) (*.f64 -1 y))","(/.f64 t y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(+.f64 (/.f64 t y) (*.f64 -1 y))","(+.f64 (/.f64 t y) (*.f64 -1 y))","(/.f64 t y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(+.f64 (/.f64 t y) (*.f64 -1 y))","(+.f64 (/.f64 t y) (*.f64 -1 y))","(*.f64 -1 y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(+.f64 (/.f64 t y) (*.f64 -1 y))","(+.f64 (/.f64 t y) (*.f64 -1 y))","(*.f64 -1 y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(+.f64 (/.f64 t y) (*.f64 -1 y))","(+.f64 (/.f64 t y) (*.f64 -1 y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x)","(fma.f64 1/3 (/.f64 t (*.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 -1 y)","(neg.f64 y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(-.f64 (/.f64 t y) y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(-.f64 (/.f64 t y) y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(-.f64 (/.f64 t y) y)","(/.f64 t y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(-.f64 (/.f64 t y) y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(-.f64 (/.f64 t y) y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(-.f64 (/.f64 t y) y)","(/.f64 t y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(-.f64 (/.f64 t y) y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(-.f64 (/.f64 t y) y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(-.f64 (/.f64 t y) y)","(/.f64 t y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(-.f64 (/.f64 t y) y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(-.f64 (/.f64 t y) y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(-.f64 (/.f64 t y) y)","(*.f64 -1 y)","(neg.f64 y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(-.f64 (/.f64 t y) y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(-.f64 (/.f64 t y) y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(-.f64 (/.f64 t y) y)","(*.f64 -1 y)","(neg.f64 y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(-.f64 (/.f64 t y) y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(-.f64 (/.f64 t y) y)","(+.f64 (/.f64 t y) (*.f64 -1 y))","(-.f64 (/.f64 t y) y)"]],"time":360.908203125,"type":"simplify"},{"compiler":[[3577,1609]],"time":36.327880859375,"type":"eval"},{"alts":[["(+.f64 x (+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z)))))","fresh",3.294816375145254],["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))","fresh",3.2520985108912908],["(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","fresh",2.7311325195368843],["(+.f64 x (/.f64 (*.f64 (cbrt.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) 2))) (cbrt.f64 z)))","fresh",22.12057104355312],["(+.f64 x (/.f64 (*.f64 1/3 t) (*.f64 y z)))","fresh",22.732443535512058],["(+.f64 x (/.f64 (-.f64 (/.f64 t y) y) (*.f64 z 3)))","fresh",2.678066259768442],["(+.f64 x (*.f64 (/.f64 (/.f64 1 z) 3) (-.f64 (/.f64 t y) y)))","fresh",2.688163769536884],["(+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3))","next",2.6640625],["(+.f64 x (*.f64 (/.f64 1/3 z) (pow.f64 (cbrt.f64 (-.f64 (/.f64 t y) y)) 3)))","fresh",2.9190789551372824]],"compiler":[[19,13],[19,13],[14,9],[30,19],[13,9],[15,10],[17,12],[15,10],[18,13],[19,13],[19,13],[14,9],[30,19],[13,9],[15,10],[17,12],[15,10],[18,13]],"count":[[228,9]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[226,8],"picked":[1,0]}],"min-error":[0.01171875],"time":82.68896484375,"type":"prune"},{"compiler":[[44,13]],"locations":[["(-.f64 (/.f64 t y) y)",0.00390625,false],["(+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3))",0.0078125,true],["(/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3)",0.2109375,true],["(/.f64 (-.f64 (/.f64 t y) y) z)",2.4341789772726887,true]],"time":7.303955078125,"type":"localize"},{"count":[[3,108]],"series":[["(+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3))","z","-inf",0.156982421875],["(+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3))","z","inf",0.18701171875],["(+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3))","z","0",0.159912109375],["(+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3))","y","-inf",0.364013671875],["(+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3))","y","inf",0.1591796875],["(+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3))","y","0",0.16015625],["(+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3))","t","-inf",0.190185546875],["(+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3))","t","inf",0.1630859375],["(+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3))","t","0",0.189208984375],["(+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3))","x","-inf",0.154052734375],["(+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3))","x","inf",0.155029296875],["(+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3))","x","0",0.18701171875],["(/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3)","z","-inf",0.156982421875],["(/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3)","z","inf",0.18408203125],["(/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3)","z","0",0.15380859375],["(/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3)","y","-inf",0.1650390625],["(/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3)","y","inf",0.189208984375],["(/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3)","y","0",0.16015625],["(/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3)","t","-inf",0.195068359375],["(/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3)","t","inf",0.1669921875],["(/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3)","t","0",0.166015625],["(/.f64 (-.f64 (/.f64 t y) y) z)","z","-inf",0.296875],["(/.f64 (-.f64 (/.f64 t y) y) z)","z","inf",0.156005859375],["(/.f64 (-.f64 (/.f64 t y) y) z)","z","0",0.177001953125],["(/.f64 (-.f64 (/.f64 t y) y) z)","y","-inf",0.1689453125],["(/.f64 (-.f64 (/.f64 t y) y) z)","y","inf",0.19287109375],["(/.f64 (-.f64 (/.f64 t y) y) z)","y","0",0.16796875],["(/.f64 (-.f64 (/.f64 t y) y) z)","t","-inf",0.265869140625],["(/.f64 (-.f64 (/.f64 t y) y) z)","t","inf",0.89794921875],["(/.f64 (-.f64 (/.f64 t y) y) z)","t","0",0.2451171875]],"time":6.662109375,"type":"series"},{"count":[[3,172]],"inputs":[["(/.f64 (-.f64 (/.f64 t y) y) z)","(/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3)","(+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 t y) z) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 y z)) (/.f64 (/.f64 t y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 z) (/.f64 t y)) (*.f64 (/.f64 1 z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 z) (neg.f64 y)) (*.f64 (/.f64 1 z) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 0) (/.f64 (-.f64 (/.f64 t y) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 (/.f64 t y) y) z) (*.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 t y) z) 1) (*.f64 (neg.f64 (/.f64 y z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 (/.f64 t y) y) z)) (/.f64 (-.f64 (/.f64 t y) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 (/.f64 t y) y) z) (*.f64 0 (/.f64 (-.f64 (/.f64 t y) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 t y) z) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 y (/.f64 t y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 z) (/.f64 (-.f64 y (/.f64 t y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (/.f64 t y) z) (*.f64 z z)) (/.f64 (*.f64 z y) (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 z)) (/.f64 (-.f64 y (/.f64 t y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (/.f64 y z)) (/.f64 (/.f64 t y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 (/.f64 t y) z) 1) (/.f64 (/.f64 y z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 t y) y) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 (/.f64 t y) y) z)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y (/.f64 t y)) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y (/.f64 t y)) z) 2)) (cbrt.f64 (/.f64 (-.f64 (/.f64 t y) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (-.f64 (/.f64 t y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (/.f64 t y) y)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 t y) y) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y (/.f64 t y)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 (/.f64 t y) y) z)) (cbrt.f64 (/.f64 (pow.f64 (-.f64 (/.f64 t y) y) 2) (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (/.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 (/.f64 t y) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 y (/.f64 t y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 y (/.f64 t y)) z)) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y (/.f64 t y)) z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 t y) z (neg.f64 (*.f64 z y))) (/.f64 1 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 t y) y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y (/.f64 t y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 t y) z (neg.f64 (*.f64 z y))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 t y) (cbrt.f64 (*.f64 z z))) (*.f64 z (/.f64 y (cbrt.f64 z)))) (*.f64 z (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 t y) (neg.f64 z)) (*.f64 z (neg.f64 y))) (*.f64 z (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z))) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 y (cbrt.f64 z)))) (*.f64 (cbrt.f64 (*.f64 z z)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (neg.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 y))) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) z) (*.f64 (cbrt.f64 (*.f64 z z)) y)) (*.f64 (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (/.f64 t y)) (cbrt.f64 (*.f64 z z))) (*.f64 (neg.f64 z) (/.f64 y (cbrt.f64 z)))) (*.f64 (neg.f64 z) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (/.f64 t y)) (neg.f64 z)) (*.f64 (neg.f64 z) (neg.f64 y))) (*.f64 (neg.f64 z) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (/.f64 t y)) z) (*.f64 (neg.f64 z) y)) (*.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (/.f64 t y) z (neg.f64 (*.f64 z y)))) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 (/.f64 t y) y) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 (/.f64 t y) y) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 (/.f64 t y) y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (-.f64 y (/.f64 t y)) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 y (/.f64 t y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 t y)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 t y) 2)) z) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 t (cbrt.f64 z)) (/.f64 (/.f64 1 y) (cbrt.f64 (*.f64 z z))) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 t y) z) 2)) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (pow.f64 (/.f64 t y) 2) (*.f64 z z))) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 t y) (/.f64 1 z) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z -1/3) (/.f64 (/.f64 t y) (cbrt.f64 (*.f64 z z))) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (/.f64 t y) z) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (/.f64 (/.f64 1 y) z) (neg.f64 (/.f64 y z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (/.f64 (/.f64 t y) z)) (*.f64 1/3 (neg.f64 (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z) 0) (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z) (*.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 t y) (*.f64 3 z)) (*.f64 (neg.f64 (/.f64 y z)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z)) (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z) (*.f64 0 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 t y) (*.f64 3 z)) (neg.f64 (/.f64 y (*.f64 3 z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 t y) (*.f64 3 z)) (/.f64 y (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 y (/.f64 t y)) (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 3 z)) (/.f64 (-.f64 y (/.f64 t y)) (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 -3) (/.f64 (-.f64 y (/.f64 t y)) (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 -3 z)) (/.f64 (-.f64 y (/.f64 t y)) (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y (*.f64 -3 z)) (/.f64 (/.f64 t y) (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z) 2)) (cbrt.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 (/.f64 t y) y) 27)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 t y) y) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 (/.f64 t y) y) z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y (/.f64 t y)) z) 2)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) (sqrt.f64 27))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y (/.f64 t y)) z) 2)) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 t y) y) (/.f64 -1 (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (/.f64 t y) y) (sqrt.f64 1/3)) (*.f64 (/.f64 1 z) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 1/3)) (/.f64 (/.f64 1 z) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 y (/.f64 t y)) (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y (/.f64 t y)) (*.f64 3 z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) (cbrt.f64 3)) (cbrt.f64 (/.f64 1 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y (/.f64 t y)) (/.f64 1 (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) (sqrt.f64 3)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 y (/.f64 t y)) 1/3) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 t y) (*.f64 3 z)) (*.f64 (*.f64 3 z) y)) (*.f64 9 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) (sqrt.f64 3))) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y (/.f64 t y)) 1/3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) (sqrt.f64 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y (/.f64 t y)) (*.f64 -3 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 t y) y) (/.f64 (*.f64 3 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y (/.f64 t y)) (/.f64 (*.f64 -3 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y (/.f64 t y)) (/.f64 (neg.f64 z) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 t y) y) (/.f64 z 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 t y) y) (*.f64 -3 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 z)) (*.f64 3 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 t y) z (neg.f64 (*.f64 z y))) (*.f64 3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (/.f64 t y) z) 3) (*.f64 3 (/.f64 y z))) 9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) (cbrt.f64 3))) (neg.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 y (/.f64 t y)) (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x) 0) (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x) (*.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x)) (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x) (*.f64 0 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x (/.f64 (/.f64 t y) (*.f64 3 z))) (/.f64 y (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 t y) (*.f64 3 z)) (-.f64 (/.f64 y (*.f64 3 z)) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (/.f64 (-.f64 y (/.f64 t y)) (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x)) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z) 2)) (-.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (/.f64 (*.f64 x (-.f64 (/.f64 t y) y)) (*.f64 3 z))))) (+.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (-.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z) 2)) (cbrt.f64 (/.f64 (*.f64 x (-.f64 (/.f64 t y) y)) (*.f64 3 z))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x) 2)) (cbrt.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 1/3)) (/.f64 (/.f64 1 z) (cbrt.f64 9)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 (/.f64 t y) y) 27)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 t y) y) 2)) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/3) (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) (cbrt.f64 9)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (/.f64 t y) y) (/.f64 -1 (*.f64 -3 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) (sqrt.f64 27))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y (/.f64 t y)) z) 2)) (sqrt.f64 1/3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (-.f64 y (/.f64 t y)) (*.f64 3 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 (/.f64 t y) y) z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y (/.f64 t y)) z) 2)) 1/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z) 2)) (cbrt.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 (/.f64 t y) y) (sqrt.f64 1/3)) (*.f64 (/.f64 1 z) (sqrt.f64 1/3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/3) (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) (sqrt.f64 3)) x)))))"]],"rules":[["egg-rr",47],["egg-rr",62],["egg-rr",63]],"time":36.367919921875,"type":"rewrite"},{"count":[[280,189]],"inputs":[["(*.f64 -1 (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 t (*.f64 y z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 t (*.f64 y z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 t (*.f64 y z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(*.f64 -1 (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(*.f64 -1 (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 y z))","(neg.f64 (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 (/.f64 t y) y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 (/.f64 t y) y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 (/.f64 t y) y) z)","(/.f64 t (*.f64 y z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 (/.f64 t y) y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 (/.f64 t y) y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 (/.f64 t y) y) z)","(/.f64 t (*.f64 y z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 (/.f64 t y) y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 (/.f64 t y) y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 (/.f64 t y) y) z)","(/.f64 t (*.f64 y z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 (/.f64 t y) y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 (/.f64 t y) y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 (/.f64 t y) y) z)","(*.f64 -1 (/.f64 y z))","(neg.f64 (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 (/.f64 t y) y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 (/.f64 t y) y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 (/.f64 t y) y) z)","(*.f64 -1 (/.f64 y z))","(neg.f64 (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 (/.f64 t y) y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 (/.f64 t y) y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 (/.f64 t y) y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x)","(fma.f64 1/3 (/.f64 t (*.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)"]],"time":362.590087890625,"type":"simplify"},{"compiler":[[3841,1591]],"time":37.048095703125,"type":"eval"},{"alts":[["(fma.f64 (sqrt.f64 1/3) (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) (sqrt.f64 3)) x)","fresh",2.6998825195368843],["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))","fresh",3.2520985108912908],["(+.f64 x (/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z)))","next",2.678066259768442],["(+.f64 x (/.f64 (fma.f64 (cbrt.f64 (/.f64 t y)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 t y) 2)) z) (neg.f64 (/.f64 y z))) 3))","fresh",9.885097509768443],["(+.f64 x (*.f64 (/.f64 (/.f64 1 z) 3) (-.f64 (/.f64 t y) y)))","fresh",2.688163769536884],["(+.f64 x (/.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z))) 3))","fresh",3.216691375147539]],"compiler":[[18,13],[19,13],[15,10],[25,16],[17,12],[19,13],[18,13],[19,13],[15,10],[25,16],[17,12],[19,13]],"count":[[251,6]],"kept":[{"done":[0,0],"fresh":[8,2],"new":[242,4],"picked":[1,0]}],"min-error":[0.0078125],"time":99.46484375,"type":"prune"},{"compiler":[[40,16]],"locations":[["(-.f64 (/.f64 t y) y)",0.00390625,false],["(+.f64 x (/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z)))",0.0078125,true],["(/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z))",2.6012838480180136,true]],"time":7.85400390625,"type":"localize"},{"count":[[2,84]],"series":[["(+.f64 x (/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z)))","z","-inf",0.18212890625],["(+.f64 x (/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z)))","z","inf",0.153076171875],["(+.f64 x (/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z)))","z","0",0.161865234375],["(+.f64 x (/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z)))","y","-inf",0.177978515625],["(+.f64 x (/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z)))","y","inf",0.1630859375],["(+.f64 x (/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z)))","y","0",0.18603515625],["(+.f64 x (/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z)))","t","-inf",0.166015625],["(+.f64 x (/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z)))","t","inf",0.174072265625],["(+.f64 x (/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z)))","t","0",0.163818359375],["(+.f64 x (/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z)))","x","-inf",0.155029296875],["(+.f64 x (/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z)))","x","inf",0.182861328125],["(+.f64 x (/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z)))","x","0",0.162841796875],["(/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z))","z","-inf",0.171875],["(/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z))","z","inf",0.18017578125],["(/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z))","z","0",0.157958984375],["(/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z))","y","-inf",0.196044921875],["(/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z))","y","inf",0.1669921875],["(/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z))","y","0",0.16796875],["(/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z))","t","-inf",0.191162109375],["(/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z))","t","inf",0.1748046875],["(/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z))","t","0",0.2451171875]],"time":3.946044921875,"type":"series"},{"count":[[2,174]],"inputs":[["(/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z))","(+.f64 x (/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 t y) (/.f64 1/3 z)) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (*.f64 -3 z)) (*.f64 (/.f64 t y) (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/3 z) (neg.f64 y)) (*.f64 (/.f64 1/3 z) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/3 z) (/.f64 t y)) (*.f64 (/.f64 1/3 z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) (*.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) 0) (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) (*.f64 0 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z))) (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 t y) (/.f64 1/3 z)) 1) (*.f64 (/.f64 y (*.f64 -3 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (/.f64 t y) (/.f64 1/3 z)) (/.f64 y (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y (*.f64 -3 z)) (/.f64 (/.f64 t y) (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 (*.f64 t (*.f64 3 z)) y) (*.f64 (*.f64 z z) 9)) (/.f64 (*.f64 (*.f64 3 z) y) (*.f64 (*.f64 z z) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 y (/.f64 t y)) (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 3 z)) (*.f64 (-.f64 y (/.f64 t y)) (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 -3 z)) (*.f64 (-.f64 y (/.f64 t y)) (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (/.f64 t y) y)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/3 z)) (/.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) (cbrt.f64 z)) (/.f64 1 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 (/.f64 1/3 z))) (pow.f64 (cbrt.f64 (*.f64 3 z)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z))) (cbrt.f64 (pow.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) 2)) (cbrt.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y (/.f64 t y)) (neg.f64 (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (/.f64 t y) y)) z) (*.f64 (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 (/.f64 t y) y) 27)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 (-.f64 (/.f64 t y) y) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 y (/.f64 t y)) 1/3) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 t y) (*.f64 3 z) (neg.f64 (*.f64 (*.f64 3 z) y))) (/.f64 1 (*.f64 (*.f64 z z) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 y (/.f64 t y)) (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 y (/.f64 t y)) 1/3) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y (/.f64 t y)) (/.f64 1 z)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (/.f64 t y) (cbrt.f64 (/.f64 1/3 z))) (*.f64 3 z)) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) y)) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (/.f64 t y) (cbrt.f64 (/.f64 1/3 z))) (*.f64 -3 z)) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (neg.f64 y))) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (/.f64 t y) (cbrt.f64 (/.f64 1/3 z))) z) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (*.f64 y 1/3))) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (/.f64 t y) (cbrt.f64 (/.f64 1/3 z))) 3) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (/.f64 y z))) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 t (*.f64 3 y)) (*.f64 3 z)) (*.f64 z y)) (*.f64 z (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 t (*.f64 3 y)) (*.f64 -3 z)) (*.f64 z (neg.f64 y))) (*.f64 z (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 t (*.f64 3 y)) z) (*.f64 z (*.f64 y 1/3))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 t (*.f64 3 y)) (cbrt.f64 (*.f64 (*.f64 z z) 9))) (*.f64 z (*.f64 y (cbrt.f64 (/.f64 1/3 z))))) (*.f64 z (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 t y) z) (*.f64 (*.f64 3 z) (*.f64 y 1/3))) (*.f64 (*.f64 3 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 t y) 3) (*.f64 (*.f64 3 z) (/.f64 y z))) (*.f64 (*.f64 3 z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 t y) (cbrt.f64 (*.f64 (*.f64 z z) 9))) (*.f64 (*.f64 3 z) (*.f64 y (cbrt.f64 (/.f64 1/3 z))))) (*.f64 (*.f64 3 z) (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (/.f64 t y) z) (*.f64 3 z)) (*.f64 3 y)) (*.f64 3 (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (/.f64 t y) z) (*.f64 -3 z)) (*.f64 3 (neg.f64 y))) (*.f64 3 (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (/.f64 t y) z) 3) (*.f64 3 (/.f64 y z))) 9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (/.f64 t y) z) (cbrt.f64 (*.f64 (*.f64 z z) 9))) (*.f64 3 (*.f64 y (cbrt.f64 (/.f64 1/3 z))))) (*.f64 3 (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (/.f64 t y)) z) (*.f64 (*.f64 -3 z) (*.f64 y 1/3))) (*.f64 (*.f64 -3 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (/.f64 t y)) 3) (*.f64 (*.f64 -3 z) (/.f64 y z))) (*.f64 (*.f64 -3 z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (/.f64 t y)) (cbrt.f64 (*.f64 (*.f64 z z) 9))) (*.f64 (*.f64 -3 z) (*.f64 y (cbrt.f64 (/.f64 1/3 z))))) (*.f64 (*.f64 -3 z) (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 (/.f64 t y) y) z)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y (/.f64 t y)) 1/3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y (/.f64 t y)) (*.f64 -3 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 (/.f64 1/3 z))) (cbrt.f64 (*.f64 (*.f64 z z) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 t y) (*.f64 3 z) (neg.f64 (*.f64 (*.f64 3 z) y))) (*.f64 (*.f64 z z) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 (*.f64 (*.f64 z z) 9))) (cbrt.f64 (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (/.f64 t y) y)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (/.f64 t y) (*.f64 3 z) (neg.f64 (*.f64 (*.f64 3 z) y))) 1) (*.f64 (*.f64 z z) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 (/.f64 1/3 z))) 1) (cbrt.f64 (*.f64 (*.f64 z z) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (/.f64 t y) y)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) 2))) (cbrt.f64 (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 y (/.f64 t y))) (cbrt.f64 (pow.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) 2))) (cbrt.f64 (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (/.f64 t y) y) (sqrt.f64 1/3)) (/.f64 1 z)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 1/3)) (/.f64 1 z)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/3 z)) (-.f64 (/.f64 t y) y)) (cbrt.f64 (*.f64 (*.f64 z z) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 z) (-.f64 (/.f64 t y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (/.f64 t y) (cbrt.f64 (/.f64 1/3 z))) (cbrt.f64 (*.f64 (*.f64 z z) 9))) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (*.f64 y (cbrt.f64 (/.f64 1/3 z))))) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 t (*.f64 3 y)) 3) (*.f64 z (/.f64 y z))) (*.f64 3 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 t y) (*.f64 -3 z)) (*.f64 (*.f64 3 z) (neg.f64 y))) (neg.f64 (*.f64 (*.f64 z z) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (/.f64 t y) z) z) (*.f64 3 (*.f64 y 1/3))) (*.f64 3 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (/.f64 t y)) (*.f64 3 z)) (*.f64 (*.f64 -3 z) y)) (neg.f64 (*.f64 (*.f64 z z) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (/.f64 t y)) (*.f64 -3 z)) (*.f64 (*.f64 -3 z) (neg.f64 y))) (*.f64 (*.f64 z z) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (/.f64 t y) (*.f64 3 z) (neg.f64 (*.f64 (*.f64 3 z) y)))) (neg.f64 (*.f64 (*.f64 z z) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 (/.f64 1/3 z)))) (neg.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 y (/.f64 t y)) (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 t (cbrt.f64 (/.f64 1/3 z))) (/.f64 (/.f64 1 y) (cbrt.f64 (*.f64 (*.f64 z z) 9))) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (*.f64 (cbrt.f64 (pow.f64 (/.f64 t y) 2)) 1/3) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 t y) (/.f64 1/3 z) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (/.f64 t y)) 1/3) (/.f64 (cbrt.f64 (pow.f64 (/.f64 t y) 2)) z) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (/.f64 t y) (/.f64 1/3 z)) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 t y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 t y) 2)) (/.f64 1/3 z)) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 t 1/3) (/.f64 (/.f64 1 y) z) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (/.f64 t y) (/.f64 1/3 z))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 t y) (/.f64 1/3 z)) 2)) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) (/.f64 t (*.f64 3 y)) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/3 z)) (/.f64 (/.f64 t y) (cbrt.f64 (*.f64 (*.f64 z z) 9))) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 (/.f64 (/.f64 t y) z) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (/.f64 t y) (/.f64 1/3 z))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 t y) 2) (*.f64 (*.f64 z z) 9))) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (/.f64 (/.f64 1 y) (*.f64 3 z)) (/.f64 y (*.f64 -3 z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (*.f64 (/.f64 t y) (/.f64 1/3 z))) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 t y) (/.f64 1/3 z)) (+.f64 (/.f64 y (*.f64 -3 z)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) (*.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) 0) (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) (*.f64 0 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)) (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 t y) (/.f64 1/3 z)) (neg.f64 (fma.f64 1/3 (/.f64 y z) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x (*.f64 (/.f64 t y) (/.f64 1/3 z))) (/.f64 y (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (/.f64 t y) (/.f64 1/3 z)) (fma.f64 1/3 (/.f64 y z) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 (-.f64 y (/.f64 t y)) (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)) (cbrt.f64 (pow.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) 2)) (cbrt.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) 2)) (cbrt.f64 (/.f64 (*.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) x) z)))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) 2)) (-.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (/.f64 (*.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) x) z)))) (+.f64 (cbrt.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 y (*.f64 3 z)) (+.f64 x (*.f64 (/.f64 t y) (/.f64 1/3 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (fma.f64 1/3 (/.f64 y z) (neg.f64 x)) (*.f64 (/.f64 t y) (/.f64 1/3 z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z))) (cbrt.f64 (pow.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 (/.f64 t y) y) 27)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (/.f64 t y) y)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) (/.f64 1/3 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (-.f64 (/.f64 t y) y)) z) (*.f64 (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) 1/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) (*.f64 (-.f64 (/.f64 t y) y) 1/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/3 z)) (/.f64 (-.f64 (/.f64 t y) y) (cbrt.f64 (*.f64 (*.f64 z z) 9))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) 2)) (cbrt.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 y (/.f64 t y)) (neg.f64 (/.f64 1/3 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 (/.f64 t y) y) 1/3) (/.f64 1 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (-.f64 (/.f64 t y) y) (/.f64 1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (/.f64 t y) (/.f64 1/3 z))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 t y) 2) (*.f64 (*.f64 z z) 9))) (neg.f64 (fma.f64 1/3 (/.f64 y z) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (neg.f64 (fma.f64 1/3 (/.f64 y z) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (*.f64 (cbrt.f64 (pow.f64 (/.f64 t y) 2)) 1/3) (neg.f64 (fma.f64 1/3 (/.f64 y z) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 t (cbrt.f64 (/.f64 1/3 z))) (/.f64 (/.f64 1 y) (cbrt.f64 (*.f64 (*.f64 z z) 9))) (neg.f64 (fma.f64 1/3 (/.f64 y z) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 t y) (/.f64 1/3 z) (neg.f64 (fma.f64 1/3 (/.f64 y z) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (/.f64 t y) (/.f64 1/3 z)) (neg.f64 (fma.f64 1/3 (/.f64 y z) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (/.f64 t y)) 1/3) (/.f64 (cbrt.f64 (pow.f64 (/.f64 t y) 2)) z) (neg.f64 (fma.f64 1/3 (/.f64 y z) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 t 1/3) (/.f64 (/.f64 1 y) z) (neg.f64 (fma.f64 1/3 (/.f64 y z) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 t y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 t y) 2)) (/.f64 1/3 z)) (neg.f64 (fma.f64 1/3 (/.f64 y z) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/3 z)) (/.f64 (/.f64 t y) (cbrt.f64 (*.f64 (*.f64 z z) 9))) (neg.f64 (fma.f64 1/3 (/.f64 y z) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 (/.f64 (/.f64 t y) z) (neg.f64 (fma.f64 1/3 (/.f64 y z) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) (/.f64 t (*.f64 3 y)) (neg.f64 (fma.f64 1/3 (/.f64 y z) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (/.f64 t y) (/.f64 1/3 z))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 t y) (/.f64 1/3 z)) 2)) (neg.f64 (fma.f64 1/3 (/.f64 y z) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (-.f64 y (/.f64 t y)) (/.f64 1/3 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (/.f64 (/.f64 1 y) (*.f64 3 z)) (neg.f64 (fma.f64 1/3 (/.f64 y z) (neg.f64 x))))))))"]],"rules":[["egg-rr",65],["egg-rr",109]],"time":35.489013671875,"type":"rewrite"},{"count":[[258,186]],"inputs":[["(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x)","(fma.f64 1/3 (/.f64 t (*.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(/.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y)) z)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","x","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z)) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)"]],"time":284.658935546875,"type":"simplify"},{"compiler":[[4130,1973]],"time":40.904052734375,"type":"eval"},{"alts":[["(fma.f64 (sqrt.f64 1/3) (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) (sqrt.f64 3)) x)","fresh",2.6998825195368843],["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))","fresh",3.2520985108912908],["(+.f64 x (fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z))))","next",1.198261279305326],["(+.f64 x (*.f64 (/.f64 (/.f64 1 z) 3) (-.f64 (/.f64 t y) y)))","fresh",2.688163769536884],["(+.f64 x (fma.f64 (*.f64 t 1/3) (/.f64 (/.f64 1 y) z) (/.f64 y (*.f64 -3 z))))","fresh",3.7021675293053264],["(+.f64 x (/.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z))) 3))","fresh",3.216691375147539]],"compiler":[[18,13],[19,13],[20,14],[17,12],[20,14],[19,13],[18,13],[19,13],[20,14],[17,12],[20,14],[19,13]],"count":[[245,6]],"kept":[{"done":[0,0],"fresh":[5,4],"new":[239,2],"picked":[1,0]}],"min-error":[0],"time":91.60791015625,"type":"prune"},{"compiler":[[60,36]],"locations":[["(+.f64 x (fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z))))",0.0078125,true],["(/.f64 y (*.f64 -3 z))",0.22265625,true],["(/.f64 1 (*.f64 3 y))",0.23046875,true],["(fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z)))",3.140423130928641,true]],"time":13.5810546875,"type":"localize"},{"count":[[4,120]],"series":[["(+.f64 x (fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z))))","y","-inf",0.1689453125],["(+.f64 x (fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z))))","y","inf",0.19482421875],["(+.f64 x (fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z))))","y","0",0.16796875],["(+.f64 x (fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z))))","z","-inf",0.20703125],["(+.f64 x (fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z))))","z","inf",0.1748046875],["(+.f64 x (fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z))))","z","0",0.18994140625],["(+.f64 x (fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z))))","t","-inf",0.204833984375],["(+.f64 x (fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z))))","t","inf",0.176025390625],["(+.f64 x (fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z))))","t","0",0.200927734375],["(+.f64 x (fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z))))","x","-inf",0.178955078125],["(+.f64 x (fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z))))","x","inf",0.2109375],["(+.f64 x (fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z))))","x","0",0.4619140625],["(/.f64 y (*.f64 -3 z))","z","-inf",0.142822265625],["(/.f64 y (*.f64 -3 z))","z","inf",0.139892578125],["(/.f64 y (*.f64 -3 z))","z","0",0.171875],["(/.f64 y (*.f64 -3 z))","y","-inf",0.199951171875],["(/.f64 y (*.f64 -3 z))","y","inf",0.27392578125],["(/.f64 y (*.f64 -3 z))","y","0",0.302001953125],["(/.f64 1 (*.f64 3 y))","y","-inf",0.177978515625],["(/.f64 1 (*.f64 3 y))","y","inf",0.17822265625],["(/.f64 1 (*.f64 3 y))","y","0",0.2060546875],["(fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z)))","y","-inf",0.426025390625],["(fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z)))","y","inf",0.4599609375],["(fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z)))","y","0",0.5439453125],["(fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z)))","z","-inf",0.628173828125],["(fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z)))","z","inf",0.69384765625],["(fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z)))","z","0",0.87109375],["(fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z)))","t","-inf",0.330810546875],["(fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z)))","t","inf",0.4228515625],["(fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z)))","t","0",0.701171875]],"time":9.779052734375,"type":"series"},{"count":[[4,379]],"inputs":[["(fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z)))","(/.f64 1 (*.f64 3 y))","(/.f64 y (*.f64 -3 z))","(+.f64 x (fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z) 0) (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z) (*.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z) (*.f64 0 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 t 1/3) (*.f64 z y)) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (*.f64 -3 z)) (/.f64 (*.f64 t 1/3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 t 1/3) (*.f64 z y)) (/.f64 y (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z) 2)) (cbrt.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y z) (*.f64 z (*.f64 3 y))) (*.f64 -3 t)) (*.f64 -3 (*.f64 z (*.f64 3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y z) (neg.f64 (*.f64 z (*.f64 -3 y)))) (*.f64 -3 t)) (*.f64 -3 (neg.f64 (*.f64 z (*.f64 -3 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y z) (*.f64 z (*.f64 -3 y))) (*.f64 -3 (neg.f64 t))) (*.f64 -3 (*.f64 z (*.f64 -3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y z) (*.f64 z y)) (*.f64 -3 (*.f64 t 1/3))) (*.f64 -3 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y z) (*.f64 -3 y)) (*.f64 -3 (neg.f64 (/.f64 t z)))) (*.f64 -3 (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y z) (*.f64 3 y)) (*.f64 -3 (/.f64 t z))) (*.f64 -3 (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y z) (neg.f64 (*.f64 z y))) (*.f64 -3 (/.f64 t -3))) (*.f64 -3 (neg.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y (cbrt.f64 (/.f64 -1/3 z))) y) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (/.f64 (/.f64 t z) 3))) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y (cbrt.f64 (/.f64 -1/3 z))) (*.f64 z (*.f64 3 y))) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) t)) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (*.f64 z (*.f64 3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y (cbrt.f64 (/.f64 -1/3 z))) (neg.f64 (*.f64 z (*.f64 -3 y)))) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) t)) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (neg.f64 (*.f64 z (*.f64 -3 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y (cbrt.f64 (/.f64 -1/3 z))) (*.f64 z (*.f64 -3 y))) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (neg.f64 t))) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (*.f64 z (*.f64 -3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y (cbrt.f64 (/.f64 -1/3 z))) (*.f64 z y)) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (*.f64 t 1/3))) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y (cbrt.f64 (/.f64 -1/3 z))) (*.f64 -3 y)) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (neg.f64 (/.f64 t z)))) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y (cbrt.f64 (/.f64 -1/3 z))) (*.f64 3 y)) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (/.f64 t z))) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y (cbrt.f64 (/.f64 -1/3 z))) (neg.f64 z)) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (/.f64 t (*.f64 -3 y)))) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y (cbrt.f64 (/.f64 -1/3 z))) (neg.f64 (*.f64 z y))) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (/.f64 t -3))) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (neg.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y (cbrt.f64 (/.f64 -1/3 z))) z) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) (/.f64 t (*.f64 3 y)))) (*.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y -1/3) y) (*.f64 z (/.f64 (/.f64 t z) 3))) (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y -1/3) (neg.f64 (*.f64 z (*.f64 -3 y)))) (*.f64 z t)) (*.f64 z (neg.f64 (*.f64 z (*.f64 -3 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y -1/3) (*.f64 z y)) (*.f64 z (*.f64 t 1/3))) (*.f64 z (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y -1/3) (*.f64 -3 y)) (*.f64 z (neg.f64 (/.f64 t z)))) (*.f64 z (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y -1/3) (*.f64 3 y)) (*.f64 z (/.f64 t z))) (*.f64 z (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y -1/3) (neg.f64 z)) (*.f64 z (/.f64 t (*.f64 -3 y)))) (*.f64 z (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y -1/3) (neg.f64 (*.f64 z y))) (*.f64 z (/.f64 t -3))) (*.f64 z (neg.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 y -1/3) (cbrt.f64 z)) y) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 (/.f64 t z) 3))) (*.f64 (cbrt.f64 (*.f64 z z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 y -1/3) (cbrt.f64 z)) (*.f64 z (*.f64 3 y))) (*.f64 (cbrt.f64 (*.f64 z z)) t)) (*.f64 (cbrt.f64 (*.f64 z z)) (*.f64 z (*.f64 3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 y -1/3) (cbrt.f64 z)) (neg.f64 (*.f64 z (*.f64 -3 y)))) (*.f64 (cbrt.f64 (*.f64 z z)) t)) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 (*.f64 z (*.f64 -3 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 y -1/3) (cbrt.f64 z)) (*.f64 z (*.f64 -3 y))) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 t))) (*.f64 (cbrt.f64 (*.f64 z z)) (*.f64 z (*.f64 -3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 y -1/3) (cbrt.f64 z)) (*.f64 z y)) (*.f64 (cbrt.f64 (*.f64 z z)) (*.f64 t 1/3))) (*.f64 (cbrt.f64 (*.f64 z z)) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 y -1/3) (cbrt.f64 z)) (*.f64 -3 y)) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 (/.f64 t z)))) (*.f64 (cbrt.f64 (*.f64 z z)) (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 y -1/3) (cbrt.f64 z)) (*.f64 3 y)) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 t z))) (*.f64 (cbrt.f64 (*.f64 z z)) (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 y -1/3) (cbrt.f64 z)) (neg.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 t (*.f64 -3 y)))) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 y -1/3) (cbrt.f64 z)) (neg.f64 (*.f64 z y))) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 t -3))) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 y -1/3) (cbrt.f64 z)) z) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 t (*.f64 3 y)))) (*.f64 (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y 1/3) y) (*.f64 (neg.f64 z) (/.f64 (/.f64 t z) 3))) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y 1/3) (*.f64 z (*.f64 3 y))) (*.f64 (neg.f64 z) t)) (*.f64 (neg.f64 z) (*.f64 z (*.f64 3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y 1/3) (neg.f64 (*.f64 z (*.f64 -3 y)))) (*.f64 (neg.f64 z) t)) (*.f64 (neg.f64 z) (neg.f64 (*.f64 z (*.f64 -3 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y 1/3) (*.f64 z (*.f64 -3 y))) (*.f64 (neg.f64 z) (neg.f64 t))) (*.f64 (neg.f64 z) (*.f64 z (*.f64 -3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y 1/3) (*.f64 z y)) (*.f64 (neg.f64 z) (*.f64 t 1/3))) (*.f64 (neg.f64 z) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y 1/3) (*.f64 -3 y)) (*.f64 (neg.f64 z) (neg.f64 (/.f64 t z)))) (neg.f64 (*.f64 z (*.f64 -3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y 1/3) (*.f64 3 y)) (*.f64 (neg.f64 z) (/.f64 t z))) (*.f64 z (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y 1/3) (neg.f64 z)) (*.f64 (neg.f64 z) (/.f64 t (*.f64 -3 y)))) (*.f64 (neg.f64 z) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y 1/3) (neg.f64 (*.f64 z y))) (*.f64 (neg.f64 z) (/.f64 t -3))) (*.f64 (neg.f64 z) (neg.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y 1/3) z) (*.f64 (neg.f64 z) (/.f64 t (*.f64 3 y)))) (*.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y -1/3) (*.f64 z (*.f64 3 y))) (*.f64 z t)) (*.f64 z (*.f64 z (*.f64 3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y -1/3) (*.f64 z (*.f64 -3 y))) (*.f64 z (neg.f64 t))) (*.f64 z (*.f64 z (*.f64 -3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) y) (*.f64 (*.f64 3 z) (/.f64 (/.f64 t z) 3))) (*.f64 (*.f64 3 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (*.f64 z (*.f64 3 y))) (*.f64 (*.f64 3 z) t)) (*.f64 (*.f64 3 z) (*.f64 z (*.f64 3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (neg.f64 (*.f64 z (*.f64 -3 y)))) (*.f64 (*.f64 3 z) t)) (*.f64 (*.f64 3 z) (neg.f64 (*.f64 z (*.f64 -3 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (*.f64 z y)) (*.f64 (*.f64 3 z) (*.f64 t 1/3))) (*.f64 (*.f64 3 z) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (*.f64 z (*.f64 -3 y))) (*.f64 (*.f64 3 z) (neg.f64 t))) (*.f64 (*.f64 3 z) (*.f64 z (*.f64 -3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (*.f64 -3 y)) (*.f64 (*.f64 3 z) (neg.f64 (/.f64 t z)))) (*.f64 (*.f64 3 z) (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (*.f64 3 y)) (*.f64 (*.f64 3 z) (/.f64 t z))) (*.f64 (*.f64 3 z) (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (neg.f64 z)) (*.f64 (*.f64 3 z) (/.f64 t (*.f64 -3 y)))) (*.f64 (*.f64 3 z) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (neg.f64 (*.f64 z y))) (*.f64 (*.f64 3 z) (/.f64 t -3))) (*.f64 (*.f64 3 z) (neg.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) z) (*.f64 (*.f64 3 z) (/.f64 t (*.f64 3 y)))) (*.f64 (*.f64 3 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y y) (*.f64 (*.f64 -3 z) (/.f64 (/.f64 t z) 3))) (*.f64 (*.f64 -3 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (*.f64 z (*.f64 3 y))) (*.f64 (*.f64 -3 z) t)) (*.f64 (*.f64 -3 z) (*.f64 z (*.f64 3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (neg.f64 (*.f64 z (*.f64 -3 y)))) (*.f64 (*.f64 -3 z) t)) (*.f64 (*.f64 -3 z) (neg.f64 (*.f64 z (*.f64 -3 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (*.f64 z y)) (*.f64 (*.f64 -3 z) (*.f64 t 1/3))) (*.f64 (*.f64 -3 z) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (*.f64 z (*.f64 -3 y))) (*.f64 (*.f64 -3 z) (neg.f64 t))) (*.f64 (*.f64 -3 z) (*.f64 z (*.f64 -3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (*.f64 -3 y)) (*.f64 (*.f64 -3 z) (neg.f64 (/.f64 t z)))) (*.f64 (*.f64 -3 z) (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (*.f64 3 y)) (*.f64 (*.f64 -3 z) (/.f64 t z))) (*.f64 (*.f64 -3 z) (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (neg.f64 z)) (*.f64 (*.f64 -3 z) (/.f64 t (*.f64 -3 y)))) (*.f64 (*.f64 -3 z) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (neg.f64 (*.f64 z y))) (*.f64 (*.f64 -3 z) (/.f64 t -3))) (*.f64 (*.f64 -3 z) (neg.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y z) (*.f64 (*.f64 -3 z) (/.f64 t (*.f64 3 y)))) (*.f64 (*.f64 -3 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (/.f64 t z) 3) (cbrt.f64 (*.f64 (*.f64 z z) 9))) (*.f64 y (*.f64 y (cbrt.f64 (/.f64 -1/3 z))))) (*.f64 y (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (/.f64 t z) 3) (*.f64 -3 z)) (*.f64 y y)) (*.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (/.f64 t z) 3) (neg.f64 z)) (*.f64 y (*.f64 y 1/3))) (*.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (/.f64 t z) 3) (cbrt.f64 (*.f64 z z))) (*.f64 y (/.f64 (*.f64 y -1/3) (cbrt.f64 z)))) (*.f64 y (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (/.f64 t z) 3) (*.f64 3 z)) (*.f64 y (neg.f64 y))) (*.f64 y (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (/.f64 t z) 3) z) (*.f64 y (*.f64 y -1/3))) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 t (cbrt.f64 (*.f64 (*.f64 z z) 9))) (*.f64 (neg.f64 (*.f64 z (*.f64 -3 y))) (*.f64 y (cbrt.f64 (/.f64 -1/3 z))))) (*.f64 (neg.f64 (*.f64 z (*.f64 -3 y))) (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 t (*.f64 -3 z)) (*.f64 (neg.f64 (*.f64 z (*.f64 -3 y))) y)) (*.f64 (neg.f64 (*.f64 z (*.f64 -3 y))) (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 t -3) (*.f64 (neg.f64 (*.f64 z (*.f64 -3 y))) (/.f64 y z))) (*.f64 (neg.f64 (*.f64 z (*.f64 -3 y))) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 t (neg.f64 z)) (*.f64 (neg.f64 (*.f64 z (*.f64 -3 y))) (*.f64 y 1/3))) (*.f64 (neg.f64 (*.f64 z (*.f64 -3 y))) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 t (cbrt.f64 (*.f64 z z))) (*.f64 (neg.f64 (*.f64 z (*.f64 -3 y))) (/.f64 (*.f64 y -1/3) (cbrt.f64 z)))) (*.f64 (neg.f64 (*.f64 z (*.f64 -3 y))) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 t (*.f64 3 z)) (*.f64 (neg.f64 (*.f64 z (*.f64 -3 y))) (neg.f64 y))) (*.f64 (neg.f64 (*.f64 z (*.f64 -3 y))) (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 t z) (*.f64 (neg.f64 (*.f64 z (*.f64 -3 y))) (*.f64 y -1/3))) (*.f64 (neg.f64 (*.f64 z (*.f64 -3 y))) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t (*.f64 3 y)) (cbrt.f64 (*.f64 (*.f64 z z) 9))) (*.f64 z (*.f64 y (cbrt.f64 (/.f64 -1/3 z))))) (*.f64 z (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t (*.f64 3 y)) (*.f64 -3 z)) (*.f64 z y)) (*.f64 z (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t (*.f64 3 y)) (neg.f64 z)) (*.f64 z (*.f64 y 1/3))) (*.f64 z (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t (*.f64 3 y)) (cbrt.f64 (*.f64 z z))) (*.f64 z (/.f64 (*.f64 y -1/3) (cbrt.f64 z)))) (*.f64 z (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t (*.f64 3 y)) (*.f64 3 z)) (*.f64 z (neg.f64 y))) (*.f64 z (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 t z)) (cbrt.f64 (*.f64 (*.f64 z z) 9))) (*.f64 (*.f64 -3 y) (*.f64 y (cbrt.f64 (/.f64 -1/3 z))))) (*.f64 (*.f64 -3 y) (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 t z)) (*.f64 -3 z)) (*.f64 (*.f64 -3 y) y)) (*.f64 (*.f64 -3 y) (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 t z)) -3) (*.f64 (*.f64 -3 y) (/.f64 y z))) (*.f64 (*.f64 -3 y) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 t z)) (neg.f64 z)) (*.f64 (*.f64 -3 y) (*.f64 y 1/3))) (*.f64 (*.f64 -3 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 t z)) (cbrt.f64 (*.f64 z z))) (*.f64 (*.f64 -3 y) (/.f64 (*.f64 y -1/3) (cbrt.f64 z)))) (*.f64 (*.f64 -3 y) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 t z)) (*.f64 3 z)) (*.f64 (*.f64 -3 y) (neg.f64 y))) (*.f64 (*.f64 -3 y) (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 t z)) z) (*.f64 (*.f64 -3 y) (*.f64 y -1/3))) (*.f64 (*.f64 -3 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 t) (cbrt.f64 (*.f64 (*.f64 z z) 9))) (*.f64 (*.f64 z (*.f64 -3 y)) (*.f64 y (cbrt.f64 (/.f64 -1/3 z))))) (*.f64 (*.f64 z (*.f64 -3 y)) (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 t) -3) (*.f64 (*.f64 z (*.f64 -3 y)) (/.f64 y z))) (*.f64 (*.f64 z (*.f64 -3 y)) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 t) (neg.f64 z)) (*.f64 (*.f64 z (*.f64 -3 y)) (*.f64 y 1/3))) (*.f64 (*.f64 z (*.f64 -3 y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 t) (cbrt.f64 (*.f64 z z))) (*.f64 (*.f64 z (*.f64 -3 y)) (/.f64 (*.f64 y -1/3) (cbrt.f64 z)))) (*.f64 (*.f64 z (*.f64 -3 y)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 t) (*.f64 3 z)) (*.f64 (*.f64 z (*.f64 -3 y)) (neg.f64 y))) (*.f64 (*.f64 z (*.f64 -3 y)) (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 t) (*.f64 -3 z)) (*.f64 (*.f64 z (*.f64 -3 y)) y)) (*.f64 (*.f64 z (*.f64 -3 y)) (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 t) z) (*.f64 (*.f64 z (*.f64 -3 y)) (*.f64 y -1/3))) (*.f64 (*.f64 z (*.f64 -3 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 t 1/3) (cbrt.f64 (*.f64 (*.f64 z z) 9))) (*.f64 (*.f64 z y) (*.f64 y (cbrt.f64 (/.f64 -1/3 z))))) (*.f64 (*.f64 z y) (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 t 1/3) (*.f64 -3 z)) (*.f64 (*.f64 z y) y)) (*.f64 (*.f64 z y) (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 t 1/3) -3) (*.f64 (*.f64 z y) (/.f64 y z))) (*.f64 (*.f64 z y) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 t 1/3) (neg.f64 z)) (*.f64 (*.f64 z y) (*.f64 y 1/3))) (*.f64 (*.f64 z y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 t 1/3) (cbrt.f64 (*.f64 z z))) (*.f64 (*.f64 z y) (/.f64 (*.f64 y -1/3) (cbrt.f64 z)))) (*.f64 (*.f64 z y) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 t 1/3) (*.f64 3 z)) (*.f64 (*.f64 z y) (neg.f64 y))) (*.f64 (*.f64 z y) (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 t 1/3) z) (*.f64 (*.f64 z y) (*.f64 y -1/3))) (*.f64 (*.f64 z y) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t (*.f64 -3 y)) (cbrt.f64 (*.f64 (*.f64 z z) 9))) (*.f64 (neg.f64 z) (*.f64 y (cbrt.f64 (/.f64 -1/3 z))))) (*.f64 (neg.f64 z) (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t (*.f64 -3 y)) (*.f64 -3 z)) (neg.f64 (*.f64 z y))) (*.f64 (neg.f64 z) (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t (*.f64 -3 y)) (neg.f64 z)) (*.f64 (neg.f64 z) (*.f64 y 1/3))) (*.f64 (neg.f64 z) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t (*.f64 -3 y)) (cbrt.f64 (*.f64 z z))) (*.f64 (neg.f64 z) (/.f64 (*.f64 y -1/3) (cbrt.f64 z)))) (*.f64 (neg.f64 z) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t (*.f64 -3 y)) (*.f64 3 z)) (*.f64 (neg.f64 z) (neg.f64 y))) (*.f64 (neg.f64 z) (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t (*.f64 -3 y)) z) (*.f64 (neg.f64 z) (*.f64 y -1/3))) (*.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t z) (cbrt.f64 (*.f64 (*.f64 z z) 9))) (*.f64 (*.f64 3 y) (*.f64 y (cbrt.f64 (/.f64 -1/3 z))))) (*.f64 (*.f64 3 y) (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t z) (*.f64 -3 z)) (*.f64 (*.f64 3 y) y)) (*.f64 (*.f64 3 y) (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t z) -3) (*.f64 (*.f64 3 y) (/.f64 y z))) (*.f64 (*.f64 3 y) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t z) (neg.f64 z)) (*.f64 (*.f64 3 y) (*.f64 y 1/3))) (*.f64 (*.f64 3 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t z) (cbrt.f64 (*.f64 z z))) (*.f64 (*.f64 3 y) (/.f64 (*.f64 y -1/3) (cbrt.f64 z)))) (*.f64 (*.f64 3 y) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t z) (*.f64 3 z)) (*.f64 (*.f64 3 y) (neg.f64 y))) (*.f64 (*.f64 3 y) (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t z) z) (*.f64 (*.f64 3 y) (*.f64 y -1/3))) (*.f64 (*.f64 3 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t -3) (cbrt.f64 (*.f64 (*.f64 z z) 9))) (*.f64 (neg.f64 (*.f64 z y)) (*.f64 y (cbrt.f64 (/.f64 -1/3 z))))) (*.f64 (neg.f64 (*.f64 z y)) (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t -3) (*.f64 -3 z)) (*.f64 (neg.f64 (*.f64 z y)) y)) (*.f64 (neg.f64 (*.f64 z y)) (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t -3) -3) (*.f64 (neg.f64 (*.f64 z y)) (/.f64 y z))) (*.f64 (neg.f64 (*.f64 z y)) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t -3) (neg.f64 z)) (*.f64 (neg.f64 (*.f64 z y)) (*.f64 y 1/3))) (*.f64 (neg.f64 (*.f64 z y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t -3) (cbrt.f64 (*.f64 z z))) (*.f64 (neg.f64 (*.f64 z y)) (/.f64 (*.f64 y -1/3) (cbrt.f64 z)))) (*.f64 (neg.f64 (*.f64 z y)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t -3) (*.f64 3 z)) (*.f64 (neg.f64 (*.f64 z y)) (neg.f64 y))) (*.f64 (neg.f64 (*.f64 z y)) (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t -3) z) (*.f64 (neg.f64 (*.f64 z y)) (*.f64 y -1/3))) (*.f64 (neg.f64 (*.f64 z y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 t (cbrt.f64 (*.f64 (*.f64 z z) 9))) (*.f64 (*.f64 z (*.f64 3 y)) (*.f64 y (cbrt.f64 (/.f64 -1/3 z))))) (*.f64 (*.f64 z (*.f64 3 y)) (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 t (*.f64 -3 z)) (*.f64 (*.f64 z (*.f64 3 y)) y)) (*.f64 (*.f64 z (*.f64 3 y)) (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 t -3) (*.f64 (*.f64 z (*.f64 3 y)) (/.f64 y z))) (*.f64 (*.f64 z (*.f64 3 y)) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 t (neg.f64 z)) (*.f64 (*.f64 z (*.f64 3 y)) (*.f64 y 1/3))) (*.f64 (*.f64 z (*.f64 3 y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 t (cbrt.f64 (*.f64 z z))) (*.f64 (*.f64 z (*.f64 3 y)) (/.f64 (*.f64 y -1/3) (cbrt.f64 z)))) (*.f64 (*.f64 z (*.f64 3 y)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 t (*.f64 3 z)) (*.f64 (*.f64 z (*.f64 3 y)) (neg.f64 y))) (*.f64 (*.f64 z (*.f64 3 y)) (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 t z) (*.f64 (*.f64 z (*.f64 3 y)) (*.f64 y -1/3))) (*.f64 (*.f64 z (*.f64 3 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 t (*.f64 -3 y)) (*.f64 y 1/3)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y 1/3) (/.f64 t (*.f64 -3 y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y -1/3) (/.f64 t (*.f64 3 y))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y z) y) (*.f64 -3 (/.f64 (/.f64 t z) 3))) (*.f64 -3 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y z) (neg.f64 z)) (*.f64 -3 (/.f64 t (*.f64 -3 y)))) (*.f64 3 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y z) z) (*.f64 -3 (/.f64 t (*.f64 3 y)))) (*.f64 -3 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y -1/3) z) (*.f64 z (/.f64 t (*.f64 3 y)))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (/.f64 t z) 3) -3) (*.f64 y (/.f64 y z))) (*.f64 -3 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t (*.f64 3 y)) -3) (*.f64 z (/.f64 y z))) (*.f64 -3 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t (*.f64 3 y)) z) (*.f64 z (*.f64 y -1/3))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 t (*.f64 -3 y)) -3) (*.f64 (neg.f64 z) (/.f64 y z))) (*.f64 3 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 t z) (/.f64 1/3 y) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/3 (/.f64 y z) (/.f64 (*.f64 t 1/3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1/3 z)) (/.f64 y (cbrt.f64 (*.f64 (*.f64 z z) 9))) (/.f64 (*.f64 t 1/3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 y (*.f64 -3 z)) 2)) (cbrt.f64 (/.f64 y (*.f64 -3 z))) (/.f64 (*.f64 t 1/3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 -1/3 z) (/.f64 (*.f64 t 1/3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y -27)) (/.f64 (cbrt.f64 (*.f64 y y)) z) (/.f64 (*.f64 t 1/3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1/3 z) y (/.f64 (*.f64 t 1/3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 y) z) (cbrt.f64 (/.f64 (*.f64 y y) -27)) (/.f64 (*.f64 t 1/3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 -1/3 z)) (/.f64 (*.f64 t 1/3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) (*.f64 y -1/3) (/.f64 (*.f64 t 1/3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (*.f64 -3 z)) 1 (/.f64 (*.f64 t 1/3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y (*.f64 -3 z))) (cbrt.f64 (/.f64 (*.f64 y y) (*.f64 (*.f64 z z) 9))) (/.f64 (*.f64 t 1/3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y -1/3) (/.f64 1 z) (/.f64 (*.f64 t 1/3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y (*.f64 -3 z)) (/.f64 (*.f64 t 1/3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 y (*.f64 3 z)) (/.f64 (*.f64 t 1/3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y (*.f64 -3 z))) (cbrt.f64 (pow.f64 (/.f64 y (*.f64 -3 z)) 2)) (/.f64 (*.f64 t 1/3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (neg.f64 (/.f64 -1/3 z)) (/.f64 (*.f64 t 1/3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 t 1/3) (*.f64 z y)) 1 (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 t 1/3) (*.f64 z y)) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 t z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 t z) 2)) (/.f64 1/3 y)) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 t z) (cbrt.f64 (/.f64 1/3 y))) (cbrt.f64 (pow.f64 (/.f64 1/3 y) 2)) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 t 1/3) (*.f64 z y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 t 1/3) (*.f64 z y)) 2)) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/3 y) (/.f64 t z) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (/.f64 (/.f64 1/3 y) z) (/.f64 y (*.f64 -3 z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/3 y) 0) (/.f64 1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/3 y) (*.f64 (/.f64 1/3 y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 1/3 y)) (/.f64 1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/3 y) (*.f64 0 (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/3 y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/3 y)) (pow.f64 (cbrt.f64 (*.f64 3 y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/27 y)) (/.f64 1 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/3 y)) (cbrt.f64 (pow.f64 (/.f64 1/3 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 1/3 y) 2)) (cbrt.f64 (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1/3 y)) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 3 y)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/3 y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) -1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1/3 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 y) 1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 y) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (*.f64 -3 y)) (*.f64 -3 y)) (*.f64 (*.f64 -3 y) (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 3 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 -3 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1/3 y)) (cbrt.f64 (*.f64 9 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1/3 (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1/27 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/3 y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 y) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1/3 y)) -1) (cbrt.f64 (*.f64 9 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 1/3 y) 2)) 1) (cbrt.f64 (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 1/3 y) 2)) (cbrt.f64 1/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 1/3 y) 2)) -1) (cbrt.f64 (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (sqrt.f64 1/3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (cbrt.f64 1/3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) 1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 y) -1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (*.f64 3 y)) -2) (cbrt.f64 (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (/.f64 1/3 y) 2)) (cbrt.f64 (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/3) (pow.f64 (cbrt.f64 (*.f64 3 y)) -2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/3) (cbrt.f64 (pow.f64 (/.f64 1/3 y) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cbrt.f64 (*.f64 3 y)) -2)) (cbrt.f64 (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (cbrt.f64 (pow.f64 (/.f64 1/3 y) 2))) (cbrt.f64 (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/27 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 -1 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/3) (/.f64 1 y)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/3) (/.f64 1 y)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (pow.f64 (cbrt.f64 (*.f64 3 y)) -2))) (cbrt.f64 (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1/3 y)) (neg.f64 (cbrt.f64 (*.f64 9 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 1/27 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/3 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/3 y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/3 y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/3 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1/3 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 y)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 3 y) 3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1/3 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1/3 (/.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 y) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1/3 y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1/3 y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y (*.f64 -3 z)) 0) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (*.f64 -3 z)) (*.f64 (/.f64 y (*.f64 -3 z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 y (*.f64 -3 z))) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (*.f64 -3 z)) (*.f64 0 (/.f64 y (*.f64 -3 z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 y (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 3 z)) (/.f64 y (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (*.f64 -3 z))) (cbrt.f64 (pow.f64 (/.f64 y (*.f64 -3 z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 y z) 3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (/.f64 -1/3 z))) (pow.f64 (cbrt.f64 (*.f64 -3 z)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y -1/3) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 y (*.f64 -3 z)) 2)) (cbrt.f64 (/.f64 y (*.f64 -3 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (*.f64 -3 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 -1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (neg.f64 (/.f64 -1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 y) z) (cbrt.f64 (/.f64 (*.f64 y y) -27)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (*.f64 -3 z))) (cbrt.f64 (/.f64 (*.f64 y y) (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y -27)) (/.f64 (cbrt.f64 (*.f64 y y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 -1/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/3 z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y -1/3) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1/3 z)) (/.f64 y (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 y (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y 1/3) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y z) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 z) y) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (*.f64 -3 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 y) z) (cbrt.f64 (*.f64 y y))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y z) 1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (/.f64 (cbrt.f64 (*.f64 y y)) z)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 y) (*.f64 3 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y (*.f64 -3 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y -1/3) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (cbrt.f64 (/.f64 -1/3 z))) (cbrt.f64 (*.f64 (*.f64 z z) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y -1/3) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y 1/3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y -1/3) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 z) (*.f64 y (cbrt.f64 -1/3))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 z) (neg.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 y (*.f64 -3 z))) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (*.f64 (*.f64 z z) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (*.f64 -3 z)) 2)) (cbrt.f64 y)) (cbrt.f64 (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (*.f64 -3 z)) 2)) (cbrt.f64 (neg.f64 y))) (cbrt.f64 (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (*.f64 -3 z)) 2)) (cbrt.f64 (*.f64 y -1/3))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 y -27)) (cbrt.f64 (*.f64 y y))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1/3 z)) y) (cbrt.f64 (*.f64 (*.f64 z z) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/3 y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (/.f64 (*.f64 y y) (*.f64 (*.f64 z z) 9)))) (cbrt.f64 (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (pow.f64 (/.f64 y (*.f64 -3 z)) 2))) (cbrt.f64 (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (cbrt.f64 (/.f64 (*.f64 y y) (*.f64 (*.f64 z z) 9)))) (cbrt.f64 (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (cbrt.f64 (pow.f64 (/.f64 y (*.f64 -3 z)) 2))) (cbrt.f64 (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 y -1/3)) (cbrt.f64 (/.f64 (*.f64 y y) (*.f64 (*.f64 z z) 9)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 y -1/3)) (cbrt.f64 (pow.f64 (/.f64 y (*.f64 -3 z)) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (cbrt.f64 (/.f64 -1/3 z))) 1) (cbrt.f64 (*.f64 (*.f64 z z) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y -1/3) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y 1/3) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 z -1/3) (*.f64 y -1/3)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (cbrt.f64 -1/3)) (/.f64 1 z)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (/.f64 1 z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 y z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (cbrt.f64 (*.f64 (*.f64 z z) 9))) (cbrt.f64 (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y (cbrt.f64 (/.f64 -1/3 z)))) (neg.f64 (cbrt.f64 (*.f64 (*.f64 z z) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 y z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 y -1/3) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (*.f64 -3 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (*.f64 -3 z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (*.f64 -3 z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (*.f64 -3 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (*.f64 -3 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 y (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 y (*.f64 3 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1/3 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 y (*.f64 -3 z)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 y -1/3) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (*.f64 -3 z)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 t 1/3) (*.f64 z y)) (fma.f64 -1/3 (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/3 (/.f64 y z) x) (/.f64 (*.f64 t 1/3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) 0) (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) (*.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 t 1/3) (*.f64 z y)) (*.f64 (fma.f64 -1/3 (/.f64 y z) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))) (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) (*.f64 0 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (/.f64 (*.f64 t 1/3) (*.f64 z y))) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (*.f64 -3 z)) (+.f64 x (/.f64 (*.f64 t 1/3) (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x (/.f64 (*.f64 t 1/3) (*.f64 z y))) 1) (/.f64 y (*.f64 -3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x (/.f64 (*.f64 t 1/3) (*.f64 z y))) (/.f64 y (*.f64 3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))) (cbrt.f64 (pow.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) 2)) (cbrt.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (-.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z) 2)) (cbrt.f64 (*.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z) 2)) (-.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))))) (+.f64 (cbrt.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z) 2)) (cbrt.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (/.f64 (+.f64 (/.f64 t (*.f64 3 y)) (*.f64 y -1/3)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 t 1/3) (*.f64 z y)) (fma.f64 -1/3 (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 t z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 t z) 2)) (/.f64 1/3 y)) (fma.f64 -1/3 (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 t z) (/.f64 1/3 y) (fma.f64 -1/3 (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 t z) (cbrt.f64 (/.f64 1/3 y))) (cbrt.f64 (pow.f64 (/.f64 1/3 y) 2)) (fma.f64 -1/3 (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 t 1/3) (*.f64 z y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 t 1/3) (*.f64 z y)) 2)) (fma.f64 -1/3 (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/3 y) (/.f64 t z) (fma.f64 -1/3 (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (/.f64 (/.f64 1/3 y) z) (fma.f64 -1/3 (/.f64 y z) x))))))"]],"rules":[["egg-rr",47],["egg-rr",77],["egg-rr",67],["egg-rr",188]],"time":54.221923828125,"type":"rewrite"},{"count":[[499,393]],"inputs":[["(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (+.f64 (*.f64 -1/3 y) (*.f64 1/3 (/.f64 t y))) z)","(/.f64 (+.f64 (*.f64 -1/3 y) (*.f64 1/3 (/.f64 t y))) z)","(/.f64 (+.f64 (*.f64 -1/3 y) (*.f64 1/3 (/.f64 t y))) z)","(/.f64 (+.f64 (*.f64 -1/3 y) (*.f64 1/3 (/.f64 t y))) z)","(/.f64 (+.f64 (*.f64 -1/3 y) (*.f64 1/3 (/.f64 t y))) z)","(/.f64 (+.f64 (*.f64 -1/3 y) (*.f64 1/3 (/.f64 t y))) z)","(/.f64 (+.f64 (*.f64 -1/3 y) (*.f64 1/3 (/.f64 t y))) z)","(/.f64 (+.f64 (*.f64 -1/3 y) (*.f64 1/3 (/.f64 t y))) z)","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (/.f64 t y)) (*.f64 1/3 y)) z))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (/.f64 t y)) (*.f64 1/3 y)) z))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (/.f64 t y)) (*.f64 1/3 y)) z))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (/.f64 t y)) (*.f64 1/3 y)) z))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","x","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","x","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(/.f64 (+.f64 (*.f64 -1/3 y) (*.f64 1/3 (/.f64 t y))) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","x","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","x","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (/.f64 t y)) (*.f64 1/3 y)) z)) x)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (/.f64 t y)) (*.f64 1/3 y)) z)) x)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (/.f64 t y)) (*.f64 1/3 y)) z)) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(/.f64 (+.f64 (*.f64 -1/3 y) (*.f64 1/3 (/.f64 t y))) z)","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(/.f64 (+.f64 (*.f64 -1/3 y) (*.f64 1/3 (/.f64 t y))) z)","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(/.f64 (+.f64 (*.f64 -1/3 y) (*.f64 1/3 (/.f64 t y))) z)","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(/.f64 (+.f64 (*.f64 -1/3 y) (*.f64 1/3 (/.f64 t y))) z)","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(/.f64 (+.f64 (*.f64 -1/3 y) (*.f64 1/3 (/.f64 t y))) z)","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(/.f64 (+.f64 (*.f64 -1/3 y) (*.f64 1/3 (/.f64 t y))) z)","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(/.f64 (+.f64 (*.f64 -1/3 y) (*.f64 1/3 (/.f64 t y))) z)","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(/.f64 (+.f64 (*.f64 -1/3 y) (*.f64 1/3 (/.f64 t y))) z)","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (/.f64 t y)) (*.f64 1/3 y)) z))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (/.f64 t y)) (*.f64 1/3 y)) z))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (/.f64 t y)) (*.f64 1/3 y)) z))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (/.f64 t y)) (*.f64 1/3 y)) z))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(/.f64 1/3 y)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z))))","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","x","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","x","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(/.f64 (+.f64 (*.f64 -1/3 y) (*.f64 1/3 (/.f64 t y))) z)","(/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","x","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","x","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (/.f64 t y)) (*.f64 1/3 y)) z)) x)","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (/.f64 t y)) (*.f64 1/3 y)) z)) x)","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/3 (/.f64 t y)) (*.f64 1/3 y)) z)) x)","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(/.f64 (*.f64 1/3 t) (*.f64 y z))","(+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x)","(fma.f64 1/3 (/.f64 t (*.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(*.f64 -1/3 (/.f64 y z))","(/.f64 (*.f64 -1/3 y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (/.f64 (fma.f64 -1/3 y (/.f64 t (*.f64 y 3))) z) x)"]],"time":394.590087890625,"type":"simplify"},{"compiler":[[8477,4794]],"time":82.205078125,"type":"eval"},{"alts":[["(+.f64 x (fma.f64 (/.f64 t z) (/.f64 1/3 y) (/.f64 y (*.f64 -3 z))))","fresh",1.203788769536884],["(fma.f64 (sqrt.f64 1/3) (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) (sqrt.f64 3)) x)","fresh",2.6998825195368843],["(+.f64 x (fma.f64 (/.f64 t z) (/.f64 (*.f64 (/.f64 1 y) (sqrt.f64 1/3)) (sqrt.f64 3)) (/.f64 y (*.f64 -3 z))))","fresh",1.211601269536884],["(+.f64 x (*.f64 (/.f64 (/.f64 1 z) 3) (-.f64 (/.f64 t y) y)))","fresh",2.688163769536884],["(+.f64 x (/.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z))) 3))","fresh",3.216691375147539]],"compiler":[[18,12],[18,13],[24,18],[17,12],[19,13]],"count":[[399,5]],"kept":[{"done":[0,0],"fresh":[5,3],"new":[393,2],"picked":[1,0]}],"min-error":[0],"time":200.98388671875,"type":"prune"},{"accuracy":[0.1328125],"baseline":[1.198261279305326],"branch":[["x",1.198261279305326,1],["y",1.198261279305326,1],["z",0.1328125,3],["t",1.198261279305326,1],["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))",0.158535009768442,3],["(*.f64 z 3)",0.1328125,3],["(*.f64 z 3)",0.1328125,3]],"compiler":[[5,4],[5,4],[5,4],[5,4],[19,13],[7,6],[7,6],[266,134]],"count":[[18,3]],"inputs":[["(+.f64 x (fma.f64 (/.f64 t z) (/.f64 1/3 y) (/.f64 y (*.f64 -3 z))))","(+.f64 x (fma.f64 (/.f64 t z) (/.f64 (*.f64 (/.f64 1 y) (sqrt.f64 1/3)) (sqrt.f64 3)) (/.f64 y (*.f64 -3 z))))","(+.f64 x (fma.f64 (/.f64 t z) (/.f64 1 (*.f64 3 y)) (/.f64 y (*.f64 -3 z))))","(+.f64 x (fma.f64 (*.f64 t 1/3) (/.f64 (/.f64 1 y) z) (/.f64 y (*.f64 -3 z))))","(fma.f64 (sqrt.f64 1/3) (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) (sqrt.f64 3)) x)","(+.f64 x (/.f64 (-.f64 (/.f64 t y) y) (*.f64 3 z)))","(+.f64 x (/.f64 (fma.f64 (cbrt.f64 (/.f64 t y)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 t y) 2)) z) (neg.f64 (/.f64 y z))) 3))","(+.f64 x (/.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z))) 3))","(+.f64 x (+.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 1/3 (/.f64 t (*.f64 y z)))))","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 x (/.f64 (*.f64 (cbrt.f64 (*.f64 1/3 (-.f64 (/.f64 t y) y))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)) 2))) (cbrt.f64 z)))","(+.f64 x (/.f64 (*.f64 1/3 t) (*.f64 y z)))","(+.f64 x (/.f64 (-.f64 (/.f64 t y) y) (*.f64 z 3)))","(+.f64 x (*.f64 (/.f64 (/.f64 1 z) 3) (-.f64 (/.f64 t y) y)))","(+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3))","(+.f64 x (*.f64 (/.f64 1/3 z) (pow.f64 (cbrt.f64 (-.f64 (/.f64 t y) y)) 3)))","(+.f64 x (*.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y)))","(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))"]],"link":["."],"name":["Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, H"],"oracle":[36.282184859935015],"outputs":[["(+.f64 x (fma.f64 (/.f64 t z) (/.f64 (*.f64 (/.f64 1 y) (sqrt.f64 1/3)) (sqrt.f64 3)) (/.f64 y (*.f64 -3 z))))","(+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3))","(+.f64 x (/.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z))) 3))"]],"time":91.3310546875,"times":[["x",6.026123046875],["y",6.075927734375],["z",16.75],["t",6.1650390625],["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))",16.5439453125],["(*.f64 z 3)",18.010986328125],["(*.f64 z 3)",17.0087890625]],"type":"regimes"},{"bstep":[[4.156794919750347e-49,8.295751045789409e-43,0.031005859375],[-4.187235430979069e-134,-1.8029436973499135e-144,0.09619140625]],"compiler":[[17,11],[7,6]],"method":["left-value","left-value"],"time":0.365966796875,"type":"bsearch"},{"compiler":[[62,43]],"inputs":[["(if (<=.f64 (*.f64 z 3) -8183476519740355/204586912993508866875824356051724947013540127877691549342705710506008362275292159680204380770369009821930417757972504438076078534117837065833032974336) (+.f64 x (fma.f64 (/.f64 t z) (/.f64 (*.f64 (/.f64 1 y) (sqrt.f64 1/3)) (sqrt.f64 3)) (/.f64 y (*.f64 -3 z)))) (if (<=.f64 (*.f64 z 3) 822752278660603/1645504557321206042154969182557350504982735865633579863348609024) (+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3)) (+.f64 x (/.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z))) 3))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (*.f64 z 3) -8183476519740355/204586912993508866875824356051724947013540127877691549342705710506008362275292159680204380770369009821930417757972504438076078534117837065833032974336) (+.f64 x (fma.f64 (/.f64 t z) (/.f64 (*.f64 (/.f64 1 y) (sqrt.f64 1/3)) (sqrt.f64 3)) (/.f64 y (*.f64 -3 z)))) (if (<=.f64 (*.f64 z 3) 822752278660603/1645504557321206042154969182557350504982735865633579863348609024) (+.f64 x (/.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 3)) (+.f64 x (/.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 t (*.f64 y z))) 3))))","(if (<=.f64 (*.f64 3 z) -8183476519740355/204586912993508866875824356051724947013540127877691549342705710506008362275292159680204380770369009821930417757972504438076078534117837065833032974336) (+.f64 x (/.f64 (+.f64 (*.f64 t (/.f64 1/3 y)) (*.f64 y -1/3)) z)) (if (<=.f64 (*.f64 3 z) 822752278660603/1645504557321206042154969182557350504982735865633579863348609024) (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x) (fma.f64 (/.f64 (-.f64 (/.f64 t y) y) z) 1/3 x)))"]],"stop":[["fuel",1]],"time":31.39990234375,"type":"simplify"},{"time":0.024169921875,"type":"soundness"},{"compiler":[[62,43]],"remove-preprocessing":[[]],"time":19.4638671875,"type":"end"}]
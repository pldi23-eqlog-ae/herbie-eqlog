[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.16430985774326246,0.18332494513788333,0.6523651971188542],[11,0.15504609721767793,0.2827884792020541,0.562165423580268],[10,0.14822016840935248,0.30424139831393404,0.5475384332767135],[9,0.1404191069141234,0.36664989027576667,0.49293100281010993],[8,0.1404191069141234,0.5616764276564936,0.297904465429383],[7,0.1404191069141234,0.6084827966278681,0.2510980964580085],[6,0.09361273794274894,0.6552891655992426,0.2510980964580085],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":55.197998046875,"type":"analyze"},{"outcomes":[["body",256,"invalid",265.413818359375,5424],["body",256,"valid",442.496337890625,8256]],"time":720.447998046875,"type":"sample"},{"compiler":[[12,8]],"inputs":[["0","1","2"],["(exp.f64 (-.f64 (+.f64 x (*.f64 y (log.f64 y))) z))","(exp.f64 (-.f64 (+.f64 y (*.f64 x (log.f64 x))) z))","(exp.f64 (-.f64 (+.f64 z (*.f64 y (log.f64 y))) x))","(exp.f64 (-.f64 (+.f64 x (*.f64 z (log.f64 z))) y))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(exp.f64 (-.f64 (+.f64 x (*.f64 y (log.f64 y))) z))","(*.f64 (pow.f64 y y) (exp.f64 (-.f64 x z)))","(exp.f64 (-.f64 (+.f64 y (*.f64 x (log.f64 x))) z))","(*.f64 (pow.f64 x x) (exp.f64 (-.f64 y z)))","(exp.f64 (-.f64 (+.f64 z (*.f64 y (log.f64 y))) x))","(*.f64 (pow.f64 y y) (exp.f64 (-.f64 z x)))","(exp.f64 (-.f64 (+.f64 x (*.f64 z (log.f64 z))) y))","(*.f64 (pow.f64 z z) (exp.f64 (-.f64 x y)))"]],"symmetry":[[]],"time":74.43896484375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(exp.f64 (-.f64 (+.f64 x (*.f64 y (log.f64 y))) z))"]],"method":["egg-herbie"],"outputs":[["(exp.f64 (-.f64 (+.f64 x (*.f64 y (log.f64 y))) z))","(*.f64 (pow.f64 y y) (exp.f64 (-.f64 x z)))"]],"time":18.47216796875,"type":"simplify"},{"compiler":[[20,12]],"time":0.351806640625,"type":"eval"},{"alts":[["(exp.f64 (-.f64 (+.f64 x (*.f64 y (log.f64 y))) z))","next",0]],"compiler":[[12,8],[12,8]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[0],"time":0.8251953125,"type":"prune"},{"compiler":[[35,8]],"locations":[["(+.f64 x (*.f64 y (log.f64 y)))",0.00390625,true],["(*.f64 y (log.f64 y))",0.32421875,true]],"time":6.4658203125,"type":"localize"},{"count":[[2,32]],"series":[["(+.f64 x (*.f64 y (log.f64 y)))","y","-inf",0.177978515625],["(+.f64 x (*.f64 y (log.f64 y)))","y","inf",0.19287109375],["(+.f64 x (*.f64 y (log.f64 y)))","y","0",0.158935546875],["(+.f64 x (*.f64 y (log.f64 y)))","x","-inf",0.176025390625],["(+.f64 x (*.f64 y (log.f64 y)))","x","inf",0.23095703125],["(+.f64 x (*.f64 y (log.f64 y)))","x","0",1.787841796875],["(*.f64 y (log.f64 y))","y","-inf",9.551025390625],["(*.f64 y (log.f64 y))","y","inf",4.593017578125],["(*.f64 y (log.f64 y))","y","0",18.192138671875]],"time":35.18603515625,"type":"series"},{"count":[[2,68]],"inputs":[["(*.f64 y (log.f64 y))","(+.f64 x (*.f64 y (log.f64 y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (log.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (*.f64 (pow.f64 (log.f64 y) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) y) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (log.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 y) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (log.f64 y))) (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2/3) (*.f64 y (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (log.f64 y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (log.f64 y))) (pow.f64 (*.f64 y (log.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (log.f64 y)) 2/3) (cbrt.f64 (*.f64 y (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 y) (log.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (log.f64 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (log.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (log.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (log.f64 y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (log.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x 0) (*.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (log.f64 y) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 (neg.f64 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y (log.f64 y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 y (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (*.f64 y (log.f64 y))) (-.f64 (cbrt.f64 (*.f64 y (log.f64 y))) (cbrt.f64 x)))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 y (log.f64 y)) 2/3) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (log.f64 y)))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (+.f64 (pow.f64 (*.f64 y (log.f64 y)) 2/3) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (neg.f64 y) (log.f64 y)))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (log.f64 y) x)) (pow.f64 (fma.f64 y (log.f64 y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y (log.f64 y) x) 2/3) (cbrt.f64 (fma.f64 y (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y (log.f64 y) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (log.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 y (log.f64 y) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (log.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 y (log.f64 y) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (log.f64 y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (log.f64 y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (log.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (log.f64 y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (log.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (pow.f64 (log.f64 y) 2/3) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (log.f64 y))) (pow.f64 (log.f64 y) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (cbrt.f64 y)) (pow.f64 y 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (log.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (log.f64 y))) (pow.f64 (*.f64 y (log.f64 y)) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 y (log.f64 y)) 2/3) (cbrt.f64 (*.f64 y (log.f64 y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (neg.f64 y) (log.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (log.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (log.f64 y)) 1 x)))))"]],"rules":[["egg-rr",41],["egg-rr",27]],"time":43.340087890625,"type":"rewrite"},{"count":[[100,73]],"inputs":[["(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(*.f64 y (log.f64 y))","(+.f64 (*.f64 y (log.f64 y)) x)","(+.f64 (*.f64 y (log.f64 y)) x)","(+.f64 (*.f64 y (log.f64 y)) x)","x","(+.f64 (*.f64 y (log.f64 y)) x)","(+.f64 (*.f64 y (log.f64 y)) x)","(+.f64 (*.f64 y (log.f64 y)) x)","x","(+.f64 (*.f64 y (log.f64 y)) x)","(+.f64 (*.f64 y (log.f64 y)) x)","(+.f64 (*.f64 y (log.f64 y)) x)","x","(+.f64 (*.f64 y (log.f64 y)) x)","(+.f64 (*.f64 y (log.f64 y)) x)","(+.f64 (*.f64 y (log.f64 y)) x)","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))) x)","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))) x)","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(*.f64 (log.f64 y) y)","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(*.f64 (log.f64 y) y)","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(*.f64 (log.f64 y) y)","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(*.f64 (log.f64 y) y)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(*.f64 (log.f64 y) y)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(*.f64 (log.f64 y) y)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(*.f64 (log.f64 y) y)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(*.f64 (log.f64 y) y)","(*.f64 y (log.f64 y))","(*.f64 (log.f64 y) y)","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 (log.f64 y) y x)","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 (log.f64 y) y x)","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 (log.f64 y) y x)","x","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 (log.f64 y) y x)","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 (log.f64 y) y x)","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 (log.f64 y) y x)","x","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 (log.f64 y) y x)","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 (log.f64 y) y x)","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 (log.f64 y) y x)","x","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 (log.f64 y) y x)","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 (log.f64 y) y x)","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 (log.f64 y) y x)","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(*.f64 (log.f64 y) y)","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))) x)","(fma.f64 (log.f64 y) y x)","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))) x)","(fma.f64 (log.f64 y) y x)","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))) x)","(fma.f64 (log.f64 y) y x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(*.f64 (log.f64 y) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y) x)","(fma.f64 (log.f64 y) y x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y) x)","(fma.f64 (log.f64 y) y x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y) x)","(fma.f64 (log.f64 y) y x)"]],"time":105.237060546875,"type":"simplify"},{"compiler":[[931,400]],"time":8.912841796875,"type":"eval"},{"alts":[["(exp.f64 (-.f64 (+.f64 x (*.f64 y (log.f64 y))) z))","done",0]],"compiler":[[12,8],[12,8]],"count":[[74,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[73,0],"picked":[1,1]}],"min-error":[0],"time":14.816162109375,"type":"prune"},{"compiler":[[12,8]],"inputs":[["(exp.f64 (-.f64 (+.f64 x (*.f64 y (log.f64 y))) z))"]],"method":["egg-herbie"],"outputs":[["(exp.f64 (-.f64 (+.f64 x (*.f64 y (log.f64 y))) z))","(*.f64 (pow.f64 y y) (exp.f64 (-.f64 x z)))"]],"stop":[["done",1]],"time":18.5478515625,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[12,8]],"remove-preprocessing":[[]],"time":10.185791015625,"type":"end"}]
[{"compiler":[[14,13]],"method":["search"],"sampling":[[1,0.99951171875,0.0,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":0.241943359375,"type":"analyze"},{"outcomes":[["body",1024,"valid",130.292724609375,1034],["body",512,"valid",42.989990234375,529],["body",2048,"valid",375.5283203125,2153],["body",256,"valid",197.054931640625,4540]],"time":754.2041015625,"type":"sample"},{"compiler":[[13,12]],"inputs":[["0"],["(-.f64 1 (sqrt.f64 (*.f64 1/2 (+.f64 1 (/.f64 1 (hypot.f64 1 x))))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 1 (sqrt.f64 (*.f64 1/2 (+.f64 1 (/.f64 1 (hypot.f64 1 x))))))","(-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))"]],"symmetry":[[]],"time":56.245849609375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 1 (sqrt.f64 (*.f64 1/2 (+.f64 1 (/.f64 1 (hypot.f64 1 x))))))"]],"method":["egg-herbie"],"outputs":[["(-.f64 1 (sqrt.f64 (*.f64 1/2 (+.f64 1 (/.f64 1 (hypot.f64 1 x))))))","(-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))"]],"time":21.54296875,"type":"simplify"},{"compiler":[[23,21]],"time":0.47412109375,"type":"eval"},{"alts":[["(-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))","next",16.0194705902668]],"compiler":[[11,10],[11,10]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[16.0194705902668],"time":0.906982421875,"type":"prune"},{"compiler":[[38,32]],"locations":[["(-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))",2.1435725671325105,true]],"time":9.16796875,"type":"localize"},{"count":[[1,12]],"series":[["(-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))","x","-inf",0.3720703125],["(-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))","x","inf",0.614990234375],["(-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))","x","0",0.72607421875]],"time":1.778076171875,"type":"series"},{"count":[[1,83]],"inputs":[["(-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 1/2) (*.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 0) (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) (*.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (*.f64 1/2 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) (*.f64 0 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (neg.f64 (/.f64 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2) (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 1/2 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (-.f64 1/2 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (/.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (/.f64 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2) (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (-.f64 -1 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (-.f64 1 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (+.f64 -1 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (+.f64 1 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) -1))) (cbrt.f64 (pow.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (-.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) (/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) (cbrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (-.f64 1 (cbrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (cbrt.f64 (pow.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 2)) (cbrt.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2)) (/.f64 1 (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (-.f64 1 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2)) (/.f64 1 (neg.f64 (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) -1)) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) 1) (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) 9)) (/.f64 1 (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (+.f64 1 (+.f64 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3) (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2)) (cbrt.f64 (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (pow.f64 (cbrt.f64 (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) 1) (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) (hypot.f64 -1 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (hypot.f64 -1 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) (cbrt.f64 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (pow.f64 (cbrt.f64 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) 9)) (*.f64 (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (+.f64 1 (+.f64 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3) (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (*.f64 (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2))) (*.f64 (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2))) (neg.f64 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2)) (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2)) (neg.f64 (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2)))) (cbrt.f64 (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2)) 1) (neg.f64 (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2))) (cbrt.f64 (pow.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 2))) (cbrt.f64 (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2)) (sqrt.f64 (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (sqrt.f64 (+.f64 1 (+.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (cbrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) (neg.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 2 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 1/2 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))"]],"rules":[["egg-rr",83]],"time":28.97998046875,"type":"rewrite"},{"count":[[95,104]],"inputs":[["(*.f64 1/8 (pow.f64 x 2))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (*.f64 -11/128 (pow.f64 x 4)))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -11/128 (pow.f64 x 4))))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))))","(-.f64 1 (sqrt.f64 1/2))","(-.f64 1 (+.f64 (sqrt.f64 1/2) (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x)))))","(-.f64 (+.f64 1 (*.f64 1/32 (/.f64 1 (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (pow.f64 x 2))))) (+.f64 (sqrt.f64 1/2) (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x)))))","(-.f64 (+.f64 1 (+.f64 (*.f64 1/32 (/.f64 1 (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (pow.f64 x 2)))) (*.f64 -1/2 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 (sqrt.f64 1/2) 4))) 1/4) (*.f64 (sqrt.f64 1/2) (pow.f64 x 3)))))) (+.f64 (sqrt.f64 1/2) (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x)))))","(-.f64 1 (sqrt.f64 1/2))","(-.f64 (+.f64 1 (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x)))) (sqrt.f64 1/2))","(-.f64 (+.f64 1 (+.f64 (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x))) (*.f64 1/32 (/.f64 1 (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (pow.f64 x 2)))))) (sqrt.f64 1/2))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 (sqrt.f64 1/2) 4))) 1/4) (*.f64 (sqrt.f64 1/2) (pow.f64 x 3)))) (+.f64 1 (+.f64 (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x))) (*.f64 1/32 (/.f64 1 (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (pow.f64 x 2))))))) (sqrt.f64 1/2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/8 (pow.f64 x 2))","(*.f64 1/8 (*.f64 x x))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 -11/128 (pow.f64 x 4) (*.f64 1/8 (*.f64 x x)))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -11/128 (pow.f64 x 4))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 69/1024 (pow.f64 x 6) (*.f64 -11/128 (pow.f64 x 4))))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4)))))","(-.f64 1 (sqrt.f64 1/2))","(-.f64 1 (+.f64 (sqrt.f64 1/2) (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x)))))","(-.f64 (-.f64 1 (sqrt.f64 1/2)) (/.f64 1/4 (*.f64 (sqrt.f64 1/2) x)))","(-.f64 (+.f64 1 (*.f64 1/32 (/.f64 1 (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (pow.f64 x 2))))) (+.f64 (sqrt.f64 1/2) (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x)))))","(-.f64 (+.f64 1 (/.f64 1/32 (*.f64 (sqrt.f64 1/8) (*.f64 x x)))) (+.f64 (sqrt.f64 1/2) (/.f64 1/4 (*.f64 (sqrt.f64 1/2) x))))","(-.f64 (+.f64 1 (+.f64 (*.f64 1/32 (/.f64 1 (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (pow.f64 x 2)))) (*.f64 -1/2 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 (sqrt.f64 1/2) 4))) 1/4) (*.f64 (sqrt.f64 1/2) (pow.f64 x 3)))))) (+.f64 (sqrt.f64 1/2) (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x)))))","(-.f64 (+.f64 1 (fma.f64 (/.f64 (+.f64 1/16 -1/4) (*.f64 (sqrt.f64 1/2) (pow.f64 x 3))) -1/2 (/.f64 1/32 (*.f64 (sqrt.f64 1/8) (*.f64 x x))))) (+.f64 (sqrt.f64 1/2) (/.f64 1/4 (*.f64 (sqrt.f64 1/2) x))))","(-.f64 1 (sqrt.f64 1/2))","(-.f64 (+.f64 1 (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x)))) (sqrt.f64 1/2))","(+.f64 (/.f64 1/4 (*.f64 (sqrt.f64 1/2) x)) (-.f64 1 (sqrt.f64 1/2)))","(-.f64 (+.f64 1 (+.f64 (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x))) (*.f64 1/32 (/.f64 1 (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (pow.f64 x 2)))))) (sqrt.f64 1/2))","(+.f64 (+.f64 (/.f64 1/4 (*.f64 (sqrt.f64 1/2) x)) (/.f64 1/32 (*.f64 (sqrt.f64 1/8) (*.f64 x x)))) (-.f64 1 (sqrt.f64 1/2)))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 (sqrt.f64 1/2) 4))) 1/4) (*.f64 (sqrt.f64 1/2) (pow.f64 x 3)))) (+.f64 1 (+.f64 (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x))) (*.f64 1/32 (/.f64 1 (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (pow.f64 x 2))))))) (sqrt.f64 1/2))","(-.f64 (+.f64 (fma.f64 (/.f64 (+.f64 1/16 -1/4) (*.f64 (sqrt.f64 1/2) (pow.f64 x 3))) 1/2 1) (+.f64 (/.f64 1/4 (*.f64 (sqrt.f64 1/2) x)) (/.f64 1/32 (*.f64 (sqrt.f64 1/8) (*.f64 x x))))) (sqrt.f64 1/2))"]],"time":49.071044921875,"type":"simplify"},{"compiler":[[2262,2038]],"time":32.44287109375,"type":"eval"},{"alts":[["(fma.f64 1/8 (*.f64 x x) (fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4)))))","fresh",31.967105014936905],["(*.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) (/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))","next",15.505685399681331]],"compiler":[[21,16],[23,21],[21,16],[23,21]],"count":[[105,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[104,2],"picked":[1,0]}],"min-error":[0.00390625],"time":15.66796875,"type":"prune"},{"compiler":[[94,82]],"locations":[["(+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))",0.00390625,true],["(/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))",0.0078125,true],["(*.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) (/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))",0.01171875,true],["(+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2))",1.633723478715076,true]],"time":21.759033203125,"type":"localize"},{"count":[[4,48]],"series":[["(+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))","x","-inf",0.2431640625],["(+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))","x","inf",0.27099609375],["(+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))","x","0",0.18701171875],["(/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))","x","-inf",0.52197265625],["(/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))","x","inf",0.9619140625],["(/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))","x","0",0.238037109375],["(*.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) (/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))","x","-inf",0.7529296875],["(*.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) (/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))","x","inf",1.35693359375],["(*.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) (/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))","x","0",0.25390625],["(+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2))","x","-inf",0.260986328125],["(+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2))","x","inf",0.35205078125],["(+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2))","x","0",0.279052734375]],"time":5.97607421875,"type":"series"},{"count":[[4,476]],"inputs":[["(+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2))","(*.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) (/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))","(/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))","(+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/2 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (/.f64 1/2 (hypot.f64 -1 x)) -1/2) 0) (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) (*.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) 1/2) (*.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) 0) (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (/.f64 1/2 (hypot.f64 -1 x)) -1/2)) (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) (*.f64 0 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1/4 (/.f64 -1/4 (hypot.f64 -1 x))) (+.f64 1/4 (/.f64 -1/4 (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2)) (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2))) (cbrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (sqrt.f64 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2))) (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (+.f64 1/3 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (sqrt.f64 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (/.f64 -1/2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 1/2 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (-.f64 1/2 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 0) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 0) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 1/2 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (/.f64 1/2 (hypot.f64 -1 x)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) 1) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 3) (+.f64 1/4 (/.f64 (+.f64 1/4 (/.f64 1/4 (hypot.f64 -1 x))) (hypot.f64 -1 x)))) (/.f64 -1/8 (+.f64 1/4 (/.f64 (+.f64 1/4 (/.f64 1/4 (hypot.f64 -1 x))) (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (neg.f64 (hypot.f64 -1 x)) (*.f64 (hypot.f64 -1 x) -2)) (/.f64 1/2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (hypot.f64 -1 x) (*.f64 2 (hypot.f64 -1 x))) (/.f64 1/2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/8 (+.f64 1/4 (/.f64 (+.f64 1/4 (/.f64 1/4 (hypot.f64 -1 x))) (hypot.f64 -1 x)))) (/.f64 (pow.f64 (/.f64 1/2 (hypot.f64 -1 x)) 3) (+.f64 1/4 (/.f64 (+.f64 1/4 (/.f64 1/4 (hypot.f64 -1 x))) (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 3)) (/.f64 1 (+.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 1/2 (hypot.f64 -1 x)) -1/2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (/.f64 1/2 (hypot.f64 -1 x)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2)) (cbrt.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) 2)) (cbrt.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/2) (+.f64 (/.f64 (cbrt.f64 1/4) (hypot.f64 -1 x)) (neg.f64 (cbrt.f64 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/2) (+.f64 (neg.f64 (cbrt.f64 1/4)) (/.f64 (cbrt.f64 1/4) (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/2) (-.f64 (sqrt.f64 1/2) (/.f64 (sqrt.f64 1/2) (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/2) (-.f64 (cbrt.f64 1/4) (/.f64 (cbrt.f64 1/4) (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/2) (-.f64 (/.f64 (cbrt.f64 1/4) (hypot.f64 -1 x)) (cbrt.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/2 (-.f64 (/.f64 1 (hypot.f64 -1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/2 (+.f64 (/.f64 1 (hypot.f64 -1 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/2 (+.f64 -1 (/.f64 1 (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/8 (pow.f64 (hypot.f64 -1 x) -3) 1/8) (/.f64 1 (+.f64 1/4 (/.f64 (+.f64 1/4 (/.f64 1/4 (hypot.f64 -1 x))) (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) 3) -1/8) (/.f64 1 (+.f64 (pow.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) 2) (*.f64 -1/2 (-.f64 -1/2 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (hypot.f64 -1 x) -1) (/.f64 1/2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3) -1) (/.f64 1 (+.f64 (*.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x)))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (hypot.f64 -1 x)) 1) (/.f64 -1/2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2)) (-.f64 1 (cbrt.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)))) (+.f64 (cbrt.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (/.f64 1/4 (+.f64 1 (*.f64 x x)))) (-.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 (/.f64 -1/2 (hypot.f64 -1 x))) (cbrt.f64 1/2)))) (+.f64 (cbrt.f64 (/.f64 -1/2 (hypot.f64 -1 x))) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 1/4) (-.f64 (cbrt.f64 (/.f64 1/4 (+.f64 1 (*.f64 x x)))) (*.f64 (cbrt.f64 1/2) (cbrt.f64 (/.f64 -1/2 (hypot.f64 -1 x)))))) (+.f64 (cbrt.f64 1/2) (cbrt.f64 (/.f64 -1/2 (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2)) (cbrt.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)))) (+.f64 1 (cbrt.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (/.f64 1/4 (+.f64 1 (*.f64 x x)))) (+.f64 (cbrt.f64 1/4) (cbrt.f64 (/.f64 1/4 (hypot.f64 -1 x))))) (-.f64 (cbrt.f64 (/.f64 -1/2 (hypot.f64 -1 x))) (cbrt.f64 -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 1/4) (+.f64 (cbrt.f64 (/.f64 1/4 (+.f64 1 (*.f64 x x)))) (cbrt.f64 (/.f64 1/4 (hypot.f64 -1 x))))) (-.f64 (cbrt.f64 1/2) (cbrt.f64 (/.f64 1/2 (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2)) (cbrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (-.f64 1 (cbrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (+.f64 (/.f64 -1 (hypot.f64 -1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (+.f64 1 (/.f64 -1 (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (-.f64 1 (/.f64 1 (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) (-.f64 -1 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 3)) (+.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) 3) -1/8) (+.f64 (pow.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) 2) (*.f64 -1/2 (-.f64 -1/2 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (hypot.f64 -1 x)) 1) (*.f64 (hypot.f64 -1 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3) -1) (+.f64 (*.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 1/2 (hypot.f64 -1 x)) -1/2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 3)) (/.f64 (+.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2)) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) 3) -1/8) (+.f64 1/4 (-.f64 (pow.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) 2) (*.f64 -1/2 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/8 (pow.f64 (hypot.f64 -1 x) -3) 1/8) (+.f64 1/4 (/.f64 (+.f64 1/4 (/.f64 1/4 (hypot.f64 -1 x))) (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) 3) -1/8) (+.f64 (pow.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) 2) (+.f64 1/4 (*.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (/.f64 1 (hypot.f64 -1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/2 (*.f64 (neg.f64 (hypot.f64 -1 x)) 1/2)) (neg.f64 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (neg.f64 (hypot.f64 -1 x))) (*.f64 (hypot.f64 -1 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 1/2 (cbrt.f64 4)) (*.f64 (neg.f64 (hypot.f64 -1 x)) (cbrt.f64 1/2))) (*.f64 (neg.f64 (hypot.f64 -1 x)) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (sqrt.f64 1/2) (*.f64 (neg.f64 (hypot.f64 -1 x)) (sqrt.f64 1/2))) (*.f64 (neg.f64 (hypot.f64 -1 x)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (*.f64 (*.f64 (hypot.f64 -1 x) -2) 1/2)) (*.f64 (hypot.f64 -1 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 2 (*.f64 (hypot.f64 -1 x) -2)) (*.f64 (*.f64 (hypot.f64 -1 x) -2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 4) (*.f64 (*.f64 (hypot.f64 -1 x) -2) (cbrt.f64 1/2))) (*.f64 (*.f64 (hypot.f64 -1 x) -2) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -2 (*.f64 (*.f64 (hypot.f64 -1 x) -2) -1)) (*.f64 (*.f64 (hypot.f64 -1 x) -2) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (sqrt.f64 2) (*.f64 (*.f64 (hypot.f64 -1 x) -2) (sqrt.f64 1/2))) (*.f64 (*.f64 (hypot.f64 -1 x) -2) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1/2 (*.f64 (hypot.f64 -1 x) 1/2)) (hypot.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1/2 (cbrt.f64 4)) (*.f64 (hypot.f64 -1 x) (cbrt.f64 1/2))) (*.f64 (hypot.f64 -1 x) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1/2 (sqrt.f64 2)) (*.f64 (hypot.f64 -1 x) (sqrt.f64 1/2))) (*.f64 (hypot.f64 -1 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 -1/8 (hypot.f64 -1 x))) 1) (*.f64 (cbrt.f64 (+.f64 1 (*.f64 x x))) 1/2)) (*.f64 (cbrt.f64 (+.f64 1 (*.f64 x x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 -1/8 (hypot.f64 -1 x))) 2) (*.f64 (cbrt.f64 (+.f64 1 (*.f64 x x))) 1)) (*.f64 (cbrt.f64 (+.f64 1 (*.f64 x x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 -1/8 (hypot.f64 -1 x))) (cbrt.f64 4)) (*.f64 (cbrt.f64 (+.f64 1 (*.f64 x x))) (cbrt.f64 1/2))) (*.f64 (cbrt.f64 (+.f64 1 (*.f64 x x))) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 -1/8 (hypot.f64 -1 x))) -2) (*.f64 (cbrt.f64 (+.f64 1 (*.f64 x x))) -1)) (*.f64 (cbrt.f64 (+.f64 1 (*.f64 x x))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 -1/8 (hypot.f64 -1 x))) (sqrt.f64 2)) (*.f64 (cbrt.f64 (+.f64 1 (*.f64 x x))) (sqrt.f64 1/2))) (*.f64 (cbrt.f64 (+.f64 1 (*.f64 x x))) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1/2 (+.f64 1 (/.f64 (-.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x)))) (+.f64 1 (pow.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 3))) (+.f64 1 (/.f64 (-.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1 (+.f64 1 (/.f64 (-.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x)))) (*.f64 2 (+.f64 1 (pow.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 3)))) (*.f64 2 (+.f64 1 (/.f64 (-.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (pow.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 3) -1/8) 1) (*.f64 (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/4) (hypot.f64 -1 x))) 1)) (*.f64 (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/4) (hypot.f64 -1 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 1/8 (pow.f64 (/.f64 1/2 (hypot.f64 -1 x)) 3)) 1) (*.f64 (+.f64 -1/4 (/.f64 (+.f64 1/4 (/.f64 -1/4 (hypot.f64 -1 x))) (hypot.f64 -1 x))) 1)) (*.f64 (+.f64 -1/4 (/.f64 (+.f64 1/4 (/.f64 -1/4 (hypot.f64 -1 x))) (hypot.f64 -1 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 3)) 1) (*.f64 (+.f64 1 (/.f64 (-.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x))) -1/2)) (*.f64 (+.f64 1 (/.f64 (-.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 3)) 2) (*.f64 (+.f64 1 (/.f64 (-.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x))) -1)) (*.f64 (+.f64 1 (/.f64 (-.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (hypot.f64 -1 x) -2) 2) (*.f64 2 (*.f64 (hypot.f64 -1 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 (+.f64 1 (*.f64 x x))) (*.f64 2 (cbrt.f64 (/.f64 -1/8 (hypot.f64 -1 x))))) (*.f64 2 (cbrt.f64 (+.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 1/2 (*.f64 (hypot.f64 -1 x) -2)) 1) (*.f64 (hypot.f64 -1 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 1/2 (neg.f64 (hypot.f64 -1 x))) 1/2) (neg.f64 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 1/2 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 1/2 (cbrt.f64 (+.f64 1 (*.f64 x x)))) (cbrt.f64 (/.f64 -1/8 (hypot.f64 -1 x)))) (cbrt.f64 (+.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (sqrt.f64 1/2) (*.f64 (hypot.f64 -1 x) -2)) (sqrt.f64 2)) (*.f64 (sqrt.f64 2) (*.f64 (hypot.f64 -1 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (sqrt.f64 1/2) (neg.f64 (hypot.f64 -1 x))) (sqrt.f64 1/2)) (*.f64 (sqrt.f64 2) (neg.f64 (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (sqrt.f64 1/2) (hypot.f64 -1 x)) (*.f64 (sqrt.f64 2) -1/2)) (*.f64 (sqrt.f64 2) (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (sqrt.f64 1/2) (cbrt.f64 (+.f64 1 (*.f64 x x)))) (*.f64 (sqrt.f64 2) (cbrt.f64 (/.f64 -1/8 (hypot.f64 -1 x))))) (*.f64 (sqrt.f64 2) (cbrt.f64 (+.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 1/2) (*.f64 (hypot.f64 -1 x) -2)) (cbrt.f64 4)) (*.f64 (cbrt.f64 4) (*.f64 (hypot.f64 -1 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 1/2) (neg.f64 (hypot.f64 -1 x))) (*.f64 (cbrt.f64 4) 1/2)) (*.f64 (cbrt.f64 4) (neg.f64 (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 1/2) (hypot.f64 -1 x)) (*.f64 (cbrt.f64 4) -1/2)) (*.f64 (cbrt.f64 4) (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 1/2) (cbrt.f64 (+.f64 1 (*.f64 x x)))) (*.f64 (cbrt.f64 4) (cbrt.f64 (/.f64 -1/8 (hypot.f64 -1 x))))) (*.f64 (cbrt.f64 4) (cbrt.f64 (+.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1 (*.f64 (hypot.f64 -1 x) -2)) -2) (*.f64 -2 (*.f64 (hypot.f64 -1 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (hypot.f64 -1 x) -1) (*.f64 -2 (neg.f64 (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (hypot.f64 -1 x)) 1) (*.f64 -2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (cbrt.f64 (+.f64 1 (*.f64 x x)))) (*.f64 -2 (cbrt.f64 (/.f64 -1/8 (hypot.f64 -1 x))))) (*.f64 -2 (cbrt.f64 (+.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/4) (hypot.f64 -1 x))) (+.f64 (pow.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 3) -1/8)) (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/4) (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (+.f64 -1/4 (/.f64 (+.f64 1/4 (/.f64 -1/4 (hypot.f64 -1 x))) (hypot.f64 -1 x))) (+.f64 1/8 (pow.f64 (/.f64 1/2 (hypot.f64 -1 x)) 3))) (+.f64 -1/4 (/.f64 (+.f64 1/4 (/.f64 -1/4 (hypot.f64 -1 x))) (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/2 (*.f64 (neg.f64 (hypot.f64 -1 x)) -1/2)) (neg.f64 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (*.f64 (neg.f64 (hypot.f64 -1 x)) -1)) (*.f64 (hypot.f64 -1 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (*.f64 (*.f64 (hypot.f64 -1 x) -2) -1/2)) (*.f64 (hypot.f64 -1 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 2 (*.f64 (*.f64 (hypot.f64 -1 x) -2) -1)) (*.f64 (*.f64 (hypot.f64 -1 x) -2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1/2 (*.f64 (hypot.f64 -1 x) -1/2)) (hypot.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 -1/8 (hypot.f64 -1 x))) 1) (*.f64 (cbrt.f64 (+.f64 1 (*.f64 x x))) -1/2)) (*.f64 (cbrt.f64 (+.f64 1 (*.f64 x x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 -1/8 (hypot.f64 -1 x))) 2) (*.f64 (cbrt.f64 (+.f64 1 (*.f64 x x))) -1)) (*.f64 (cbrt.f64 (+.f64 1 (*.f64 x x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 3)) 1) (*.f64 (+.f64 1 (/.f64 (-.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x))) 1/2)) (*.f64 (+.f64 1 (/.f64 (-.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 3)) 2) (*.f64 (+.f64 1 (/.f64 (-.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x))) 1)) (*.f64 (+.f64 1 (/.f64 (-.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 3)) (cbrt.f64 4)) (*.f64 (+.f64 1 (/.f64 (-.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x))) (cbrt.f64 1/2))) (*.f64 (+.f64 1 (/.f64 (-.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x))) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 3)) -2) (*.f64 (+.f64 1 (/.f64 (-.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x))) -1)) (*.f64 (+.f64 1 (/.f64 (-.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 3)) (sqrt.f64 2)) (*.f64 (+.f64 1 (/.f64 (-.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x))) (sqrt.f64 1/2))) (*.f64 (+.f64 1 (/.f64 (-.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/2) (hypot.f64 -1 x))) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 2 (hypot.f64 -1 x)) 2) (*.f64 2 (*.f64 2 (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 2 (*.f64 2 (/.f64 1 (hypot.f64 -1 x)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (+.f64 1 (*.f64 x x))) (*.f64 2 (cbrt.f64 (/.f64 1/8 (hypot.f64 -1 x))))) (*.f64 2 (cbrt.f64 (+.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 1/2 (neg.f64 (hypot.f64 -1 x))) -1/2) (neg.f64 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 1/2 (hypot.f64 -1 x)) 1/2) (hypot.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 1/2 (cbrt.f64 (+.f64 1 (*.f64 x x)))) (cbrt.f64 (/.f64 1/8 (hypot.f64 -1 x)))) (cbrt.f64 (+.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sqrt.f64 1/2) (neg.f64 (hypot.f64 -1 x))) (*.f64 (sqrt.f64 2) -1/2)) (*.f64 (sqrt.f64 2) (neg.f64 (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sqrt.f64 1/2) (*.f64 2 (hypot.f64 -1 x))) (sqrt.f64 2)) (*.f64 (sqrt.f64 2) (*.f64 2 (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sqrt.f64 1/2) (hypot.f64 -1 x)) (sqrt.f64 1/2)) (*.f64 (sqrt.f64 2) (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 2) (/.f64 1 (hypot.f64 -1 x)))) (sqrt.f64 8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sqrt.f64 1/2) (cbrt.f64 (+.f64 1 (*.f64 x x)))) (*.f64 (sqrt.f64 2) (cbrt.f64 (/.f64 1/8 (hypot.f64 -1 x))))) (*.f64 (sqrt.f64 2) (cbrt.f64 (+.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 1/2) (neg.f64 (hypot.f64 -1 x))) (*.f64 (cbrt.f64 4) -1/2)) (*.f64 (cbrt.f64 4) (neg.f64 (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 1/2) (*.f64 2 (hypot.f64 -1 x))) (cbrt.f64 4)) (*.f64 (cbrt.f64 4) (*.f64 2 (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 1/2) (hypot.f64 -1 x)) (*.f64 (cbrt.f64 4) 1/2)) (*.f64 (cbrt.f64 4) (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 1/2) 2) (*.f64 (cbrt.f64 4) (/.f64 1 (hypot.f64 -1 x)))) (*.f64 (cbrt.f64 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 1/2) (cbrt.f64 (+.f64 1 (*.f64 x x)))) (*.f64 (cbrt.f64 4) (cbrt.f64 (/.f64 1/8 (hypot.f64 -1 x))))) (*.f64 (cbrt.f64 4) (cbrt.f64 (+.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -1 (*.f64 2 (hypot.f64 -1 x))) -2) (*.f64 -2 (*.f64 2 (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -2 (*.f64 -2 (/.f64 1 (hypot.f64 -1 x)))) (*.f64 -2 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (cbrt.f64 (+.f64 1 (*.f64 x x)))) (*.f64 -2 (cbrt.f64 (/.f64 1/8 (hypot.f64 -1 x))))) (*.f64 -2 (cbrt.f64 (+.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (hypot.f64 -1 x) -2) (neg.f64 (+.f64 (hypot.f64 -1 x) 1))) (*.f64 (hypot.f64 -1 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 -1/4 (/.f64 (+.f64 1/4 (/.f64 -1/4 (hypot.f64 -1 x))) (hypot.f64 -1 x))) (+.f64 (pow.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 3) -1/8)) (+.f64 -1/4 (/.f64 (+.f64 1/4 (/.f64 -1/4 (hypot.f64 -1 x))) (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/4) (hypot.f64 -1 x))) (+.f64 1/8 (pow.f64 (/.f64 1/2 (hypot.f64 -1 x)) 3))) (+.f64 1/4 (/.f64 (+.f64 (/.f64 1/4 (hypot.f64 -1 x)) -1/4) (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 -1/8 (pow.f64 (hypot.f64 -1 x) -3) 1/8)) (neg.f64 (+.f64 1/4 (/.f64 (+.f64 1/4 (/.f64 1/4 (hypot.f64 -1 x))) (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) 3) -1/8)) (neg.f64 (+.f64 (pow.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) 2) (*.f64 -1/2 (-.f64 -1/2 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (hypot.f64 -1 x) -1)) (*.f64 (hypot.f64 -1 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (neg.f64 (hypot.f64 -1 x)) 1)) (*.f64 2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (hypot.f64 -1 x) -1) (*.f64 2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3)) (+.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (*.f64 (neg.f64 (hypot.f64 -1 x)) -1)) (*.f64 2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (hypot.f64 -1 x)) (*.f64 2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (neg.f64 (hypot.f64 -1 x))) (*.f64 2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 1/2 (*.f64 2 (hypot.f64 -1 x))) 1) (*.f64 2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 2 (hypot.f64 -1 x)) (+.f64 (hypot.f64 -1 x) 1)) (*.f64 2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 1/2 (hypot.f64 -1 x)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 (/.f64 1/2 (hypot.f64 -1 x)) -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 1/2 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) (cbrt.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x)))) (pow.f64 (cbrt.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x)))) 2) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1/2 (hypot.f64 -1 x))) (cbrt.f64 (/.f64 1/4 (+.f64 1 (*.f64 x x)))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 (/.f64 1 (hypot.f64 -1 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/2) (sqrt.f64 1/2) (/.f64 -1/2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (/.f64 -1/2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1/2 (/.f64 -1/2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (hypot.f64 -1 x) (neg.f64 1/3)) (cbrt.f64 (/.f64 -1/8 (+.f64 1 (*.f64 x x)))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/2) (/.f64 (cbrt.f64 1/4) (hypot.f64 -1 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/4 (+.f64 1 (*.f64 x x)))) (cbrt.f64 (/.f64 -1/2 (hypot.f64 -1 x))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (hypot.f64 -1 x)) -1/2 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1/2 (hypot.f64 -1 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 -1 (hypot.f64 -1 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/4) (cbrt.f64 1/2) (/.f64 -1/2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/2) (neg.f64 (cbrt.f64 1/4)) (/.f64 -1/2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1/2 (/.f64 -1/2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 1/2)) (neg.f64 (sqrt.f64 1/2)) (/.f64 -1/2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 1 (/.f64 -1/2 (hypot.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 2 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 1/2 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (/.f64 -1/2 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) -1/2) (*.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/2 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (/.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))))) (*.f64 1 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (*.f64 1 (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (/.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (*.f64 1 (/.f64 -1/2 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 1/2) (*.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (/.f64 -1/2 (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (/.f64 -1/2 (hypot.f64 -1 x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) (*.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 1/2) (*.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 0) (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 1) (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x)))) 1) (*.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (*.f64 (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 1) (*.f64 (/.f64 -1/2 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (*.f64 (/.f64 -1/2 (hypot.f64 -1 x)) (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -1/2 (hypot.f64 -1 x)) (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (*.f64 1/2 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) (*.f64 0 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (*.f64 1/2 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (-.f64 1/2 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (/.f64 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2) (+.f64 (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 0) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (neg.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 -1/2 (hypot.f64 -1 x)) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (/.f64 -1/2 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/2 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (/.f64 (/.f64 1/2 (hypot.f64 -1 x)) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (/.f64 1/2 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (/.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (-.f64 1 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (-.f64 -1 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (+.f64 1 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (-.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2)) (/.f64 1 (+.f64 (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) (cbrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (-.f64 1 (cbrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (cbrt.f64 (pow.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 2)) (cbrt.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) -2)) (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (cbrt.f64 (/.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) 2) (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) 2)) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2)) (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (/.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) 2)) (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (cbrt.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2))) (cbrt.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 1 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 3)) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (/.f64 1 (+.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 3)) (/.f64 1 (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (+.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3) -1) (/.f64 1 (*.f64 (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) (+.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 3)) (/.f64 1 (*.f64 (+.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x)))) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3) -1) (/.f64 1 (*.f64 (+.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x)))) (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 1/2 (hypot.f64 -1 x)) -1/2) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2)) (+.f64 (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3) -1) (*.f64 (+.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x)))) (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/8 (pow.f64 (hypot.f64 -1 x) -3) 1/8) (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (+.f64 1/4 (/.f64 (+.f64 1/4 (/.f64 1/4 (hypot.f64 -1 x))) (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) 3) -1/8) (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (+.f64 (pow.f64 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))) 2) (*.f64 -1/2 (-.f64 -1/2 (+.f64 1 (/.f64 -1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (hypot.f64 -1 x) -1) (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (*.f64 2 (hypot.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (hypot.f64 -1 x)) 1) (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (*.f64 (hypot.f64 -1 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2))) (neg.f64 (+.f64 (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 3)) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (+.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 3)) (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (+.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 3)) (*.f64 (+.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x)))) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3) -1) (*.f64 (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) (+.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 3)) (/.f64 (*.f64 (+.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x)))) (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 3)) (/.f64 (*.f64 (+.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x)))) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3) -1) (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (+.f64 (*.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x)))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 3)) (+.f64 1 (-.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 1 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 3)) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (+.f64 (*.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 3)) (neg.f64 (*.f64 (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) (+.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (neg.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 3)) (neg.f64 (*.f64 (+.f64 (pow.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2) 2) (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x)))) (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 1/2 (hypot.f64 -1 x)) -1/2) (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 (/.f64 1/2 (hypot.f64 -1 x)) -1/2) (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (+.f64 (/.f64 1/2 (hypot.f64 -1 x)) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) 1/2) (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 2 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 1/2 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 1/2) (*.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 0) (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (*.f64 0 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (*.f64 1/2 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (*.f64 -1 (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) 1) (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) -1) (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) -1) (*.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) -2)) (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (neg.f64 (pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (/.f64 (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1/2 (/.f64 (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/2 (/.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (neg.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) -2)) (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) -3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 2) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (*.f64 -3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 3)) (neg.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) -3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 0 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 0 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 1/2) (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 0) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (*.f64 0 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (*.f64 1/2 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 1/2 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (neg.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (/.f64 0 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 -1) (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2)) (/.f64 1 (-.f64 (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 2)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) -1) (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (neg.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (*.f64 (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) 1) (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) -1) -1) (*.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) -1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) -1) (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) -1)) (*.f64 -1 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (*.f64 -1 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (neg.f64 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2))) (/.f64 1 (neg.f64 (-.f64 (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) (-.f64 1 (cbrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (+.f64 (cbrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) (cbrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (+.f64 1 (cbrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 2)) (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (neg.f64 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2))) (neg.f64 (-.f64 (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (/.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (neg.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (/.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/2 (/.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))) 3/2)) (-.f64 (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) (/.f64 (-.f64 (+.f64 3/2 (/.f64 1/2 (hypot.f64 -1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) -3)) (neg.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) -1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (pow.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 0 (neg.f64 (log1p.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) (cbrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) (sqrt.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))) 1)))))"]],"rules":[["egg-rr",86],["egg-rr",56],["egg-rr",118],["egg-rr",216]],"time":74.448974609375,"type":"rewrite"},{"count":[[524,559]],"inputs":[["(*.f64 1/4 (pow.f64 x 2))","(+.f64 (*.f64 1/4 (pow.f64 x 2)) (*.f64 -3/16 (pow.f64 x 4)))","(+.f64 (*.f64 5/32 (pow.f64 x 6)) (+.f64 (*.f64 1/4 (pow.f64 x 2)) (*.f64 -3/16 (pow.f64 x 4))))","(+.f64 (*.f64 5/32 (pow.f64 x 6)) (+.f64 (*.f64 1/4 (pow.f64 x 2)) (+.f64 (*.f64 -3/16 (pow.f64 x 4)) (*.f64 -35/256 (pow.f64 x 8)))))","1/2","(-.f64 1/2 (*.f64 1/2 (/.f64 1 x)))","(-.f64 (+.f64 1/2 (*.f64 1/4 (/.f64 1 (pow.f64 x 3)))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (+.f64 1/2 (*.f64 1/4 (/.f64 1 (pow.f64 x 3)))) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 3/16 (/.f64 1 (pow.f64 x 5)))))","1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 1 x)))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) 1/2) (*.f64 1/4 (/.f64 1 (pow.f64 x 3))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 1/2 (*.f64 3/16 (/.f64 1 (pow.f64 x 5))))) (*.f64 1/4 (/.f64 1 (pow.f64 x 3))))","(*.f64 1/8 (pow.f64 x 2))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (*.f64 -11/128 (pow.f64 x 4)))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -11/128 (pow.f64 x 4))))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))))","(/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1))","(+.f64 (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))) (*.f64 -1 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2))))))) x)))","(-.f64 (+.f64 (*.f64 1/64 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))) (*.f64 -1 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2))))))) x)))) (*.f64 -1/4 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 1 (sqrt.f64 1/2)))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2))))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (pow.f64 x 2))))))","(-.f64 (+.f64 (*.f64 1/64 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2))))))) x)) (*.f64 1/4 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (pow.f64 x 3))))))) (+.f64 (*.f64 -1/4 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 1 (sqrt.f64 1/2)))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2))))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (pow.f64 x 2))))) (+.f64 (*.f64 1/32 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 1 (sqrt.f64 1/2)))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2))))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (pow.f64 x 3))))) (+.f64 (*.f64 1/4 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 (sqrt.f64 1/2) 4))) 1/4) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 3)))))) (*.f64 1/4 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 -1/4 (/.f64 (+.f64 (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1)))) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (pow.f64 x 3)))))))))","(/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1))","(+.f64 (/.f64 1/8 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) x)))) (+.f64 (/.f64 1/2 (*.f64 (+.f64 (sqrt.f64 1/2) 1) x)) (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1)))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) x))) (+.f64 (*.f64 1/64 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) x)))))))) (*.f64 -1/4 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 1 (sqrt.f64 1/2)))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2))))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (pow.f64 x 2))))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) x))) (+.f64 (*.f64 1/64 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 1/4 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))) (+.f64 (*.f64 1/4 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 -1/4 (/.f64 (+.f64 (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1)))) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (sqrt.f64 1/2)))) (+.f64 (*.f64 1/4 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 (sqrt.f64 1/2) 4))) 1/4) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 1/32 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 1 (sqrt.f64 1/2)))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2))))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (pow.f64 (sqrt.f64 1/2) 3))))))) (pow.f64 x 3))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) x))))))))) (*.f64 -1/4 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 1 (sqrt.f64 1/2)))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2))))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (pow.f64 x 2))))))","1/2","(+.f64 1/2 (*.f64 1/32 (pow.f64 x 2)))","(+.f64 1/2 (+.f64 (*.f64 -5/256 (pow.f64 x 4)) (*.f64 1/32 (pow.f64 x 2))))","(+.f64 1/2 (+.f64 (*.f64 -5/256 (pow.f64 x 4)) (+.f64 (*.f64 1/32 (pow.f64 x 2)) (*.f64 117/8192 (pow.f64 x 6)))))","(/.f64 1 (+.f64 (sqrt.f64 1/2) 1))","(-.f64 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1)) (*.f64 1/4 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) x))))))","(-.f64 (+.f64 (*.f64 1/16 (/.f64 1 (*.f64 (pow.f64 (+.f64 (sqrt.f64 1/2) 1) 2) (*.f64 (pow.f64 (sqrt.f64 1/2) 2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (+.f64 (*.f64 1/32 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (/.f64 1 (+.f64 (sqrt.f64 1/2) 1)))) (*.f64 1/4 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) x))))))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 1/4 (/.f64 (+.f64 (*.f64 1/32 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 1/16 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 2) (pow.f64 (+.f64 1 (sqrt.f64 1/2)) 2)))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (sqrt.f64 1/2)))) (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 (sqrt.f64 1/2) 4))) 1/4) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 1/128 (/.f64 1 (*.f64 (pow.f64 (+.f64 (sqrt.f64 1/2) 1) 2) (*.f64 (pow.f64 (sqrt.f64 1/2) 4) (+.f64 1 (sqrt.f64 1/2)))))))) (pow.f64 x 3))) (+.f64 (*.f64 1/32 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (+.f64 (*.f64 1/16 (/.f64 1 (*.f64 (pow.f64 (+.f64 (sqrt.f64 1/2) 1) 2) (*.f64 (pow.f64 (sqrt.f64 1/2) 2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))))) (*.f64 1/4 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) x))))))","(/.f64 1 (+.f64 (sqrt.f64 1/2) 1))","(+.f64 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1)) (*.f64 1/4 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) x))))))","(+.f64 (*.f64 1/4 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) x))))) (+.f64 (*.f64 1/16 (/.f64 1 (*.f64 (pow.f64 (+.f64 (sqrt.f64 1/2) 1) 2) (*.f64 (pow.f64 (sqrt.f64 1/2) 2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (+.f64 (*.f64 1/32 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (/.f64 1 (+.f64 (sqrt.f64 1/2) 1)))))","(+.f64 (*.f64 1/4 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) x))))) (+.f64 (*.f64 1/32 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (+.f64 (*.f64 1/16 (/.f64 1 (*.f64 (pow.f64 (+.f64 (sqrt.f64 1/2) 1) 2) (*.f64 (pow.f64 (sqrt.f64 1/2) 2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (+.f64 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1)) (+.f64 (*.f64 1/128 (/.f64 1 (*.f64 (pow.f64 (+.f64 (sqrt.f64 1/2) 1) 2) (*.f64 (pow.f64 (sqrt.f64 1/2) 4) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 3)))))) (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 (sqrt.f64 1/2) 4))) 1/4) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 3)))))) (*.f64 1/4 (/.f64 (+.f64 (*.f64 1/32 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 1/16 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 2) (pow.f64 (+.f64 1 (sqrt.f64 1/2)) 2)))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (pow.f64 x 3)))))))))))","2","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) 2)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 2 (*.f64 11/128 (pow.f64 x 4))))","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 -69/1024 (pow.f64 x 6)) (+.f64 2 (*.f64 11/128 (pow.f64 x 4)))))","(+.f64 1 (sqrt.f64 1/2))","(+.f64 (sqrt.f64 1/2) (+.f64 1 (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x)))))","(-.f64 (+.f64 (sqrt.f64 1/2) (+.f64 1 (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x))))) (*.f64 1/32 (/.f64 1 (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (pow.f64 x 2)))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 (sqrt.f64 1/2) 4))) 1/4) (*.f64 (sqrt.f64 1/2) (pow.f64 x 3)))) (+.f64 (sqrt.f64 1/2) (+.f64 1 (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x)))))) (*.f64 1/32 (/.f64 1 (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (pow.f64 x 2)))))","(+.f64 1 (sqrt.f64 1/2))","(-.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x))))","(-.f64 (+.f64 (sqrt.f64 1/2) 1) (+.f64 (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x))) (*.f64 1/32 (/.f64 1 (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (pow.f64 x 2))))))","(-.f64 (+.f64 (sqrt.f64 1/2) (+.f64 1 (*.f64 -1/2 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 (sqrt.f64 1/2) 4))) 1/4) (*.f64 (sqrt.f64 1/2) (pow.f64 x 3)))))) (+.f64 (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x))) (*.f64 1/32 (/.f64 1 (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (pow.f64 x 2))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/4 (pow.f64 x 2))","(*.f64 1/4 (*.f64 x x))","(+.f64 (*.f64 1/4 (pow.f64 x 2)) (*.f64 -3/16 (pow.f64 x 4)))","(fma.f64 1/4 (*.f64 x x) (*.f64 -3/16 (pow.f64 x 4)))","(+.f64 (*.f64 5/32 (pow.f64 x 6)) (+.f64 (*.f64 1/4 (pow.f64 x 2)) (*.f64 -3/16 (pow.f64 x 4))))","(fma.f64 5/32 (pow.f64 x 6) (fma.f64 1/4 (*.f64 x x) (*.f64 -3/16 (pow.f64 x 4))))","(+.f64 (*.f64 5/32 (pow.f64 x 6)) (+.f64 (*.f64 1/4 (pow.f64 x 2)) (+.f64 (*.f64 -3/16 (pow.f64 x 4)) (*.f64 -35/256 (pow.f64 x 8)))))","(fma.f64 5/32 (pow.f64 x 6) (fma.f64 1/4 (*.f64 x x) (fma.f64 -3/16 (pow.f64 x 4) (*.f64 -35/256 (pow.f64 x 8)))))","1/2","(-.f64 1/2 (*.f64 1/2 (/.f64 1 x)))","(+.f64 1/2 (/.f64 -1/2 x))","(-.f64 (+.f64 1/2 (*.f64 1/4 (/.f64 1 (pow.f64 x 3)))) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/4 (pow.f64 x -3)) (+.f64 1/2 (/.f64 -1/2 x)))","(-.f64 (+.f64 1/2 (*.f64 1/4 (/.f64 1 (pow.f64 x 3)))) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 3/16 (/.f64 1 (pow.f64 x 5)))))","(+.f64 (+.f64 (*.f64 1/4 (pow.f64 x -3)) (+.f64 1/2 (/.f64 -1/2 x))) (*.f64 -3/16 (pow.f64 x -5)))","1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 1 x)))","(+.f64 1/2 (/.f64 1/2 x))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) 1/2) (*.f64 1/4 (/.f64 1 (pow.f64 x 3))))","(+.f64 (+.f64 1/2 (/.f64 1/2 x)) (*.f64 -1/4 (pow.f64 x -3)))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 1/2 (*.f64 3/16 (/.f64 1 (pow.f64 x 5))))) (*.f64 1/4 (/.f64 1 (pow.f64 x 3))))","(+.f64 (+.f64 (+.f64 1/2 (/.f64 1/2 x)) (*.f64 3/16 (pow.f64 x -5))) (*.f64 -1/4 (pow.f64 x -3)))","(*.f64 1/8 (pow.f64 x 2))","(*.f64 1/8 (*.f64 x x))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 1/8 (*.f64 x x) (*.f64 -11/128 (pow.f64 x 4)))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -11/128 (pow.f64 x 4))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 69/1024 (pow.f64 x 6) (*.f64 -11/128 (pow.f64 x 4))))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4)))))","(/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1))","(+.f64 (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))) (*.f64 -1 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2))))))) x)))","(-.f64 (/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1)) (/.f64 (+.f64 (/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1)) (/.f64 1/8 (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (+.f64 (sqrt.f64 1/2) 1)))) x))","(-.f64 (+.f64 (*.f64 1/64 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))) (*.f64 -1 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2))))))) x)))) (*.f64 -1/4 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 1 (sqrt.f64 1/2)))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2))))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (pow.f64 x 2))))))","(+.f64 (-.f64 (+.f64 (/.f64 1/64 (*.f64 (*.f64 (sqrt.f64 1/8) (+.f64 (sqrt.f64 1/2) 1)) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 x x)))) (/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1))) (/.f64 (+.f64 (/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1)) (/.f64 1/8 (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (+.f64 (sqrt.f64 1/2) 1)))) x)) (/.f64 (*.f64 1/4 (+.f64 (/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1)) (/.f64 1/8 (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (+.f64 (sqrt.f64 1/2) 1))))) (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (*.f64 x x))))","(-.f64 (+.f64 (*.f64 1/64 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2))))))) x)) (*.f64 1/4 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (pow.f64 x 3))))))) (+.f64 (*.f64 -1/4 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 1 (sqrt.f64 1/2)))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2))))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (pow.f64 x 2))))) (+.f64 (*.f64 1/32 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 1 (sqrt.f64 1/2)))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2))))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (pow.f64 x 3))))) (+.f64 (*.f64 1/4 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 (sqrt.f64 1/2) 4))) 1/4) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 3)))))) (*.f64 1/4 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 -1/4 (/.f64 (+.f64 (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1)))) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (pow.f64 x 3)))))))))","(-.f64 (+.f64 (/.f64 1/64 (*.f64 (*.f64 (sqrt.f64 1/8) (+.f64 (sqrt.f64 1/2) 1)) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 x x)))) (+.f64 (/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1)) (-.f64 (/.f64 1/4 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (pow.f64 x 3))) (/.f64 (+.f64 (/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1)) (/.f64 1/8 (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (+.f64 (sqrt.f64 1/2) 1)))) x)))) (fma.f64 -1/4 (/.f64 (+.f64 (/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1)) (/.f64 1/8 (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (+.f64 (sqrt.f64 1/2) 1)))) (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (*.f64 x x))) (fma.f64 1/32 (/.f64 (+.f64 (/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1)) (/.f64 1/8 (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (+.f64 (sqrt.f64 1/2) 1)))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/8) (pow.f64 x 3)))) (*.f64 1/4 (/.f64 (+.f64 (/.f64 -3/16 (+.f64 (sqrt.f64 1/2) 1)) (+.f64 (/.f64 1/64 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/8) (+.f64 (sqrt.f64 1/2) 1)))) (/.f64 (*.f64 1/4 (+.f64 (/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1)) (/.f64 1/8 (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (+.f64 (sqrt.f64 1/2) 1))))) (+.f64 1/2 (sqrt.f64 1/2))))) (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (pow.f64 x 3)))))))","(/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1))","(+.f64 (/.f64 1/8 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) x)))) (+.f64 (/.f64 1/2 (*.f64 (+.f64 (sqrt.f64 1/2) 1) x)) (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1)))))","(+.f64 (/.f64 1/8 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) x))) (+.f64 (/.f64 1/2 (*.f64 (+.f64 (sqrt.f64 1/2) 1) x)) (/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) x))) (+.f64 (*.f64 1/64 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) x)))))))) (*.f64 -1/4 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 1 (sqrt.f64 1/2)))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2))))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (pow.f64 x 2))))))","(+.f64 (+.f64 (/.f64 1/2 (*.f64 (+.f64 (sqrt.f64 1/2) 1) x)) (+.f64 (/.f64 1/64 (*.f64 (*.f64 (sqrt.f64 1/8) (+.f64 (sqrt.f64 1/2) 1)) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 x x)))) (+.f64 (/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1)) (/.f64 1/8 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) x)))))) (/.f64 (*.f64 1/4 (+.f64 (/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1)) (/.f64 1/8 (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (+.f64 (sqrt.f64 1/2) 1))))) (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (*.f64 x x))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) x))) (+.f64 (*.f64 1/64 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 1/4 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))) (+.f64 (*.f64 1/4 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 -1/4 (/.f64 (+.f64 (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1)))) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (sqrt.f64 1/2)))) (+.f64 (*.f64 1/4 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 (sqrt.f64 1/2) 4))) 1/4) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 1/32 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 1 (sqrt.f64 1/2)))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2))))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (pow.f64 (sqrt.f64 1/2) 3))))))) (pow.f64 x 3))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) x))))))))) (*.f64 -1/4 (/.f64 (+.f64 (*.f64 1/2 (/.f64 1 (+.f64 1 (sqrt.f64 1/2)))) (*.f64 1/8 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2))))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (pow.f64 x 2))))))","(+.f64 (/.f64 1/2 (*.f64 (+.f64 (sqrt.f64 1/2) 1) x)) (-.f64 (+.f64 (+.f64 (/.f64 1/64 (*.f64 (*.f64 (sqrt.f64 1/8) (+.f64 (sqrt.f64 1/2) 1)) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 x x)))) (+.f64 (/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1)) (/.f64 1/8 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) x))))) (*.f64 (+.f64 (*.f64 1/4 (+.f64 (/.f64 (+.f64 (/.f64 1/64 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/8) (+.f64 (sqrt.f64 1/2) 1)))) (/.f64 (*.f64 1/4 (+.f64 (/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1)) (/.f64 1/8 (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (+.f64 (sqrt.f64 1/2) 1))))) (+.f64 1/2 (sqrt.f64 1/2)))) (+.f64 1/2 (sqrt.f64 1/2))) (/.f64 -3/16 (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (+.f64 (sqrt.f64 1/2) 1))))) (-.f64 (/.f64 (*.f64 1/32 (+.f64 (/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1)) (/.f64 1/8 (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (+.f64 (sqrt.f64 1/2) 1))))) (*.f64 (sqrt.f64 1/8) (+.f64 (sqrt.f64 1/2) 1))) (/.f64 1/4 (+.f64 (sqrt.f64 1/2) 1)))) (pow.f64 x -3))) (/.f64 (*.f64 -1/4 (+.f64 (/.f64 1/2 (+.f64 (sqrt.f64 1/2) 1)) (/.f64 1/8 (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (+.f64 (sqrt.f64 1/2) 1))))) (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (*.f64 x x)))))","1/2","(+.f64 1/2 (*.f64 1/32 (pow.f64 x 2)))","(+.f64 1/2 (*.f64 1/32 (*.f64 x x)))","(+.f64 1/2 (+.f64 (*.f64 -5/256 (pow.f64 x 4)) (*.f64 1/32 (pow.f64 x 2))))","(+.f64 1/2 (fma.f64 -5/256 (pow.f64 x 4) (*.f64 1/32 (*.f64 x x))))","(+.f64 1/2 (+.f64 (*.f64 -5/256 (pow.f64 x 4)) (+.f64 (*.f64 1/32 (pow.f64 x 2)) (*.f64 117/8192 (pow.f64 x 6)))))","(+.f64 1/2 (fma.f64 -5/256 (pow.f64 x 4) (fma.f64 1/32 (*.f64 x x) (*.f64 117/8192 (pow.f64 x 6)))))","(/.f64 1 (+.f64 (sqrt.f64 1/2) 1))","(exp.f64 (*.f64 (log1p.f64 (sqrt.f64 1/2)) -1))","(-.f64 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1)) (*.f64 1/4 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) x))))))","(+.f64 (exp.f64 (*.f64 (log1p.f64 (sqrt.f64 1/2)) -1)) (/.f64 -1/4 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) x))))","(-.f64 (+.f64 (*.f64 1/16 (/.f64 1 (*.f64 (pow.f64 (+.f64 (sqrt.f64 1/2) 1) 2) (*.f64 (pow.f64 (sqrt.f64 1/2) 2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (+.f64 (*.f64 1/32 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (/.f64 1 (+.f64 (sqrt.f64 1/2) 1)))) (*.f64 1/4 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) x))))))","(+.f64 (+.f64 (/.f64 1/32 (*.f64 (*.f64 (sqrt.f64 1/8) (+.f64 (sqrt.f64 1/2) 1)) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 x x)))) (/.f64 1/16 (*.f64 (pow.f64 (+.f64 1/2 (sqrt.f64 1/2)) 2) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 x x))))) (+.f64 (exp.f64 (*.f64 (log1p.f64 (sqrt.f64 1/2)) -1)) (/.f64 -1/4 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) x)))))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 1/4 (/.f64 (+.f64 (*.f64 1/32 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 1/16 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 2) (pow.f64 (+.f64 1 (sqrt.f64 1/2)) 2)))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (sqrt.f64 1/2)))) (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 (sqrt.f64 1/2) 4))) 1/4) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 1/128 (/.f64 1 (*.f64 (pow.f64 (+.f64 (sqrt.f64 1/2) 1) 2) (*.f64 (pow.f64 (sqrt.f64 1/2) 4) (+.f64 1 (sqrt.f64 1/2)))))))) (pow.f64 x 3))) (+.f64 (*.f64 1/32 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (+.f64 (*.f64 1/16 (/.f64 1 (*.f64 (pow.f64 (+.f64 (sqrt.f64 1/2) 1) 2) (*.f64 (pow.f64 (sqrt.f64 1/2) 2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (/.f64 1 (+.f64 (sqrt.f64 1/2) 1))))) (*.f64 1/4 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) x))))))","(+.f64 (-.f64 (+.f64 (/.f64 1/32 (*.f64 (*.f64 (sqrt.f64 1/8) (+.f64 (sqrt.f64 1/2) 1)) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 x x)))) (+.f64 (/.f64 1/16 (*.f64 (pow.f64 (+.f64 1/2 (sqrt.f64 1/2)) 2) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 x x)))) (exp.f64 (*.f64 (log1p.f64 (sqrt.f64 1/2)) -1)))) (*.f64 (fma.f64 1/4 (/.f64 (+.f64 (/.f64 1/32 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/8) (+.f64 (sqrt.f64 1/2) 1)))) (/.f64 1/16 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (pow.f64 (+.f64 1/2 (sqrt.f64 1/2)) 2)))) (+.f64 1/2 (sqrt.f64 1/2))) (fma.f64 1/2 (/.f64 -3/16 (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (+.f64 (sqrt.f64 1/2) 1))) (/.f64 1/128 (*.f64 (exp.f64 (*.f64 (log1p.f64 (sqrt.f64 1/2)) 2)) (*.f64 1/4 (+.f64 (sqrt.f64 1/2) 1)))))) (pow.f64 x -3))) (/.f64 -1/4 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) x))))","(/.f64 1 (+.f64 (sqrt.f64 1/2) 1))","(exp.f64 (*.f64 (log1p.f64 (sqrt.f64 1/2)) -1))","(+.f64 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1)) (*.f64 1/4 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) x))))))","(+.f64 (exp.f64 (*.f64 (log1p.f64 (sqrt.f64 1/2)) -1)) (/.f64 1/4 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) x))))","(+.f64 (*.f64 1/4 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) x))))) (+.f64 (*.f64 1/16 (/.f64 1 (*.f64 (pow.f64 (+.f64 (sqrt.f64 1/2) 1) 2) (*.f64 (pow.f64 (sqrt.f64 1/2) 2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (+.f64 (*.f64 1/32 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (/.f64 1 (+.f64 (sqrt.f64 1/2) 1)))))","(+.f64 (+.f64 (/.f64 1/32 (*.f64 (*.f64 (sqrt.f64 1/8) (+.f64 (sqrt.f64 1/2) 1)) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 x x)))) (exp.f64 (*.f64 (log1p.f64 (sqrt.f64 1/2)) -1))) (+.f64 (/.f64 1/4 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) x))) (/.f64 1/16 (*.f64 (pow.f64 (+.f64 1/2 (sqrt.f64 1/2)) 2) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 x x))))))","(+.f64 (*.f64 1/4 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) x))))) (+.f64 (*.f64 1/32 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (+.f64 (*.f64 1/16 (/.f64 1 (*.f64 (pow.f64 (+.f64 (sqrt.f64 1/2) 1) 2) (*.f64 (pow.f64 (sqrt.f64 1/2) 2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 2)))))) (+.f64 (/.f64 1 (+.f64 (sqrt.f64 1/2) 1)) (+.f64 (*.f64 1/128 (/.f64 1 (*.f64 (pow.f64 (+.f64 (sqrt.f64 1/2) 1) 2) (*.f64 (pow.f64 (sqrt.f64 1/2) 4) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 3)))))) (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 (sqrt.f64 1/2) 4))) 1/4) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (*.f64 (+.f64 1 (sqrt.f64 1/2)) (pow.f64 x 3)))))) (*.f64 1/4 (/.f64 (+.f64 (*.f64 1/32 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (+.f64 1 (sqrt.f64 1/2)))))) (*.f64 1/16 (/.f64 1 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (pow.f64 (sqrt.f64 1/2) 2) (pow.f64 (+.f64 1 (sqrt.f64 1/2)) 2)))))) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/2) (pow.f64 x 3)))))))))))","(+.f64 (+.f64 (+.f64 (/.f64 1/16 (*.f64 (pow.f64 (+.f64 1/2 (sqrt.f64 1/2)) 2) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 x x)))) (exp.f64 (*.f64 (log1p.f64 (sqrt.f64 1/2)) -1))) (+.f64 (/.f64 1/128 (*.f64 (exp.f64 (*.f64 (log1p.f64 (sqrt.f64 1/2)) 2)) (*.f64 1/4 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (pow.f64 x 3))))) (fma.f64 1/2 (/.f64 -3/16 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (pow.f64 x 3)))) (/.f64 (*.f64 1/4 (+.f64 (/.f64 1/32 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (sqrt.f64 1/8) (+.f64 (sqrt.f64 1/2) 1)))) (/.f64 1/16 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (pow.f64 (+.f64 1/2 (sqrt.f64 1/2)) 2))))) (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) (pow.f64 x 3)))))) (+.f64 (/.f64 1/4 (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 (+.f64 1/2 (sqrt.f64 1/2)) x))) (/.f64 1/32 (*.f64 (*.f64 (sqrt.f64 1/8) (+.f64 (sqrt.f64 1/2) 1)) (*.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 x x))))))","2","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) 2)","(fma.f64 -1/8 (*.f64 x x) 2)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 2 (*.f64 11/128 (pow.f64 x 4))))","(+.f64 (fma.f64 -1/8 (*.f64 x x) 2) (*.f64 11/128 (pow.f64 x 4)))","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 -69/1024 (pow.f64 x 6)) (+.f64 2 (*.f64 11/128 (pow.f64 x 4)))))","(fma.f64 -1/8 (*.f64 x x) (fma.f64 -69/1024 (pow.f64 x 6) (+.f64 2 (*.f64 11/128 (pow.f64 x 4)))))","(+.f64 1 (sqrt.f64 1/2))","(+.f64 (sqrt.f64 1/2) 1)","(+.f64 (sqrt.f64 1/2) (+.f64 1 (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x)))))","(+.f64 (+.f64 (sqrt.f64 1/2) 1) (/.f64 1/4 (*.f64 (sqrt.f64 1/2) x)))","(-.f64 (+.f64 (sqrt.f64 1/2) (+.f64 1 (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x))))) (*.f64 1/32 (/.f64 1 (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (pow.f64 x 2)))))","(+.f64 (+.f64 (sqrt.f64 1/2) 1) (+.f64 (/.f64 1/4 (*.f64 (sqrt.f64 1/2) x)) (/.f64 -1/32 (*.f64 (sqrt.f64 1/8) (*.f64 x x)))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 (sqrt.f64 1/2) 4))) 1/4) (*.f64 (sqrt.f64 1/2) (pow.f64 x 3)))) (+.f64 (sqrt.f64 1/2) (+.f64 1 (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x)))))) (*.f64 1/32 (/.f64 1 (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (pow.f64 x 2)))))","(+.f64 (fma.f64 1/2 (/.f64 -3/16 (*.f64 (sqrt.f64 1/2) (pow.f64 x 3))) (+.f64 (+.f64 (sqrt.f64 1/2) 1) (/.f64 1/4 (*.f64 (sqrt.f64 1/2) x)))) (/.f64 -1/32 (*.f64 (sqrt.f64 1/8) (*.f64 x x))))","(+.f64 1 (sqrt.f64 1/2))","(+.f64 (sqrt.f64 1/2) 1)","(-.f64 (+.f64 (sqrt.f64 1/2) 1) (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x))))","(+.f64 (+.f64 (sqrt.f64 1/2) 1) (/.f64 -1/4 (*.f64 (sqrt.f64 1/2) x)))","(-.f64 (+.f64 (sqrt.f64 1/2) 1) (+.f64 (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x))) (*.f64 1/32 (/.f64 1 (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (pow.f64 x 2))))))","(+.f64 (+.f64 (sqrt.f64 1/2) 1) (+.f64 (/.f64 -1/4 (*.f64 (sqrt.f64 1/2) x)) (/.f64 -1/32 (*.f64 (sqrt.f64 1/8) (*.f64 x x)))))","(-.f64 (+.f64 (sqrt.f64 1/2) (+.f64 1 (*.f64 -1/2 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 (sqrt.f64 1/2) 4))) 1/4) (*.f64 (sqrt.f64 1/2) (pow.f64 x 3)))))) (+.f64 (*.f64 1/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) x))) (*.f64 1/32 (/.f64 1 (*.f64 (pow.f64 (sqrt.f64 1/2) 3) (pow.f64 x 2))))))","(-.f64 (+.f64 (+.f64 (sqrt.f64 1/2) 1) (/.f64 (*.f64 -1/2 -3/16) (*.f64 (sqrt.f64 1/2) (pow.f64 x 3)))) (+.f64 (/.f64 1/4 (*.f64 (sqrt.f64 1/2) x)) (/.f64 1/32 (*.f64 (sqrt.f64 1/8) (*.f64 x x)))))"]],"time":242.381103515625,"type":"simplify"},{"compiler":[[17945,16239]],"time":243.269775390625,"type":"eval"},{"alts":[["(fma.f64 1/8 (*.f64 x x) (fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4)))))","next",31.967105014936905],["(*.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) (/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))","done",15.505685399681331]],"compiler":[[21,16],[23,21],[21,16]],"count":[[561,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[559,0],"picked":[1,1]}],"min-error":[0.00390625],"time":368.95703125,"type":"prune"},{"compiler":[[71,53]],"locations":[["(fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4)))",0.01953125,true],["(*.f64 -11/128 (pow.f64 x 4))",0.0859375,true],["(fma.f64 1/8 (*.f64 x x) (fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4)))))",17.00767213645402,true],["(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4))))",27.011495819662215,true]],"time":19.43212890625,"type":"localize"},{"count":[[4,36]],"series":[["(fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4)))","x","-inf",0.382080078125],["(fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4)))","x","inf",0.366943359375],["(fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4)))","x","0",0.240966796875],["(*.f64 -11/128 (pow.f64 x 4))","x","-inf",0.156982421875],["(*.f64 -11/128 (pow.f64 x 4))","x","inf",0.262939453125],["(*.f64 -11/128 (pow.f64 x 4))","x","0",0.346923828125],["(fma.f64 1/8 (*.f64 x x) (fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4)))))","x","-inf",0.201171875],["(fma.f64 1/8 (*.f64 x x) (fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4)))))","x","inf",0.217041015625],["(fma.f64 1/8 (*.f64 x x) (fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4)))))","x","0",0.2080078125],["(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4))))","x","-inf",0.458984375],["(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4))))","x","inf",0.5400390625],["(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4))))","x","0",0.4140625]],"time":4.007080078125,"type":"series"},{"count":[[4,156]],"inputs":[["(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4)))))","(*.f64 -11/128 (pow.f64 x 4))","(fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 6) 69/1024 (*.f64 -1843/32768 (pow.f64 x 8))) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 0) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (*.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (*.f64 0 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 69/1024 (pow.f64 x 6)) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (pow.f64 x 6) 69/1024 (*.f64 -1843/32768 (pow.f64 x 8))) 1) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) (*.f64 69/1024 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -11/128 (pow.f64 x 4)) (fma.f64 (pow.f64 x 6) 69/1024 (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -11/128 (pow.f64 x 4))) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (+.f64 (*.f64 -11/128 (pow.f64 x 4)) (*.f64 69/1024 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) (cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 2)) (cbrt.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 69/1024) (*.f64 x x)) (pow.f64 (*.f64 (cbrt.f64 69/1024) (*.f64 x x)) 2) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 69/1024) (*.f64 (cbrt.f64 4761/1048576) (pow.f64 x 6)) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 69/1024 (*.f64 x x)) (pow.f64 x 4) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 69/1024) (*.f64 (sqrt.f64 69/1024) (pow.f64 x 6)) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 2)) (cbrt.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (*.f64 69/1024 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (*.f64 69/1024 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (cbrt.f64 (pow.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 2)) (*.f64 69/1024 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 69/1024 (pow.f64 x 6)) 1 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 69/1024 (pow.f64 x 6)) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) (*.f64 69/1024 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 1 (*.f64 69/1024 (pow.f64 x 6)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (*.f64 x x) 1/8 (*.f64 69/1024 (pow.f64 x 6))) (*.f64 -1843/32768 (pow.f64 x 8))) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 1/8 (*.f64 x x)) (fma.f64 (pow.f64 x 6) 69/1024 (*.f64 -1843/32768 (pow.f64 x 8)))) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x x) 1/8 (*.f64 69/1024 (pow.f64 x 6))) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) 0) (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) (*.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))) (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) (*.f64 0 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (*.f64 x x) 1/8 (*.f64 69/1024 (pow.f64 x 6))) 1) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/8 (*.f64 x x)) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (*.f64 1/8 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) (fma.f64 (*.f64 x x) 1/8 (*.f64 69/1024 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (*.f64 x x) 1/8 (*.f64 69/1024 (pow.f64 x 6))) (*.f64 -11/128 (pow.f64 x 4))) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 1/8 (*.f64 x x)) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (*.f64 69/1024 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) (*.f64 1/8 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 6) 69/1024 (*.f64 -1843/32768 (pow.f64 x 8))) (+.f64 (*.f64 -11/128 (pow.f64 x 4)) (*.f64 1/8 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))) (cbrt.f64 (pow.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) 2)) (cbrt.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1/8 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/8 x) x (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 1/8) x) (*.f64 (sqrt.f64 1/8) x) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/8) (*.f64 (sqrt.f64 1/8) (*.f64 x x)) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/8 (*.f64 x x))) (cbrt.f64 (*.f64 (pow.f64 x 4) 1/64)) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/512 (*.f64 x x))) (cbrt.f64 (pow.f64 x 4)) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/8) (*.f64 (cbrt.f64 1/64) (*.f64 x x)) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) (*.f64 1/8 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 2)) (cbrt.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) (*.f64 1/8 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) (cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 2)) (*.f64 1/8 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 1/8 (*.f64 x x)) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/8 (*.f64 x x)) 1 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 1 (*.f64 1/8 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (*.f64 1/8 (*.f64 x x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -11/128 (pow.f64 x 4)) 0) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -11/128 (pow.f64 x 4)) (*.f64 (*.f64 -11/128 (pow.f64 x 4)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 -11/128 (pow.f64 x 4))) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -11/128 (pow.f64 x 4)) (*.f64 0 (*.f64 -11/128 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -11/128) (*.f64 (cbrt.f64 121/16384) (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -11/128 (*.f64 x x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 -11/128 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -11/128 (cbrt.f64 (pow.f64 x 4))) (cbrt.f64 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (*.f64 -11/128 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 121/16384) (pow.f64 x 4)) (cbrt.f64 -11/128))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 8)) (*.f64 -11/128 (cbrt.f64 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 -11/128 (pow.f64 x 4))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -11/128 (pow.f64 x 4))) (cbrt.f64 (*.f64 121/16384 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -11/128 (pow.f64 x 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 4) -11/128)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 121/16384 (pow.f64 x 8))) (cbrt.f64 (*.f64 -11/128 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 4) (cbrt.f64 -11/128)) (cbrt.f64 121/16384))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 4)) (*.f64 (cbrt.f64 (pow.f64 x 8)) -11/128))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -11/128 (pow.f64 x 4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 x 8)) -11/128) (cbrt.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 121/16384) (*.f64 (pow.f64 x 4) (cbrt.f64 -11/128)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -11/128 (pow.f64 x 4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -1331/2097152 (pow.f64 x (*.f64 2 6))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -11/128 (pow.f64 x 4))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -11/128 (pow.f64 x 4))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -11/128 (pow.f64 x 4))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -11/128 (pow.f64 x 4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 -11/128 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 -11/128 (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 -1331/2097152 (pow.f64 x (*.f64 2 6))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 0) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) (*.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) (*.f64 0 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -11/128 (pow.f64 x 4)) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (cbrt.f64 (pow.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 2)) (cbrt.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -11/128) (*.f64 (cbrt.f64 121/16384) (pow.f64 x 4)) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -11/128 (cbrt.f64 (pow.f64 x 4))) (cbrt.f64 (pow.f64 x 8)) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -11/128 (*.f64 x x)) (*.f64 x x) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (*.f64 -11/128 (*.f64 x x)) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -11/128 (pow.f64 x 4))) (cbrt.f64 (*.f64 121/16384 (pow.f64 x 8))) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 121/16384 (pow.f64 x 8))) (cbrt.f64 (*.f64 -11/128 (pow.f64 x 4))) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 4)) (*.f64 (cbrt.f64 (pow.f64 x 8)) -11/128) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 4) (cbrt.f64 -11/128)) (cbrt.f64 121/16384) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 -11/128 (pow.f64 x 4))) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1843/32768) (*.f64 (cbrt.f64 3396649/1073741824) (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -1843/32768 (pow.f64 x 8))) (cbrt.f64 (*.f64 3396649/1073741824 (pow.f64 x 16))) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1843/32768 (cbrt.f64 (pow.f64 x 8))) (cbrt.f64 (pow.f64 x 16)) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -11/128 (pow.f64 x 4)) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -11/128 (pow.f64 x 4)) 1 (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 8) -1843/32768 (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1843/32768 (pow.f64 x 8)) 1 (*.f64 -11/128 (pow.f64 x 4)))))))"]],"rules":[["egg-rr",41],["egg-rr",31],["egg-rr",45],["egg-rr",39]],"time":37.9619140625,"type":"rewrite"},{"count":[[192,171]],"inputs":[["(*.f64 -11/128 (pow.f64 x 4))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -11/128 (pow.f64 x 4)))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(*.f64 1/8 (pow.f64 x 2))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (*.f64 -11/128 (pow.f64 x 4)))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -11/128 (pow.f64 x 4))))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))))","(*.f64 -11/128 (pow.f64 x 4))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -11/128 (pow.f64 x 4))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -11/128 (*.f64 69/1024 (pow.f64 x 6)))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8))))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8))))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -1843/32768 (pow.f64 x 8)))","(fma.f64 69/1024 (pow.f64 x 6) (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8))))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8))))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -1843/32768 (pow.f64 x 8)))","(fma.f64 69/1024 (pow.f64 x 6) (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8))))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8))))","(*.f64 1/8 (pow.f64 x 2))","(*.f64 1/8 (*.f64 x x))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -11/128 (*.f64 1/8 (*.f64 x x)))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -11/128 (pow.f64 x 4))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 4) -11/128 (*.f64 69/1024 (pow.f64 x 6))))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 69/1024 (pow.f64 x 6) (fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8)))))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -1843/32768 (pow.f64 x 8)))","(fma.f64 69/1024 (pow.f64 x 6) (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8))))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 69/1024 (pow.f64 x 6) (fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8)))))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -1843/32768 (pow.f64 x 8)))","(fma.f64 69/1024 (pow.f64 x 6) (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8))))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 69/1024 (pow.f64 x 6) (fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8)))))","(*.f64 -11/128 (pow.f64 x 4))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8)))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8)))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8)))"]],"time":131.2509765625,"type":"simplify"},{"compiler":[[4168,3051]],"time":55.528076171875,"type":"eval"},{"alts":[["(fma.f64 (*.f64 1/8 x) x (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))","next",31.963198764936905],["(*.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) (/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))","done",15.505685399681331]],"compiler":[[21,16],[23,21],[21,16]],"count":[[173,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[171,1],"picked":[1,0]}],"min-error":[0],"time":44.46484375,"type":"prune"},{"compiler":[[71,55]],"locations":[["(pow.f64 x 6)",0.00390625,true],["(*.f64 -1843/32768 (pow.f64 x 8))",0.03125,true],["(fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))",0.04296875,true],["(fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))",27.011495819662215,true]],"time":19.780029296875,"type":"localize"},{"count":[[4,24]],"series":[["(pow.f64 x 6)","x","-inf",0.91796875],["(pow.f64 x 6)","x","inf",0.348876953125],["(pow.f64 x 6)","x","0",0.31103515625],["(*.f64 -1843/32768 (pow.f64 x 8))","x","-inf",0.140869140625],["(*.f64 -1843/32768 (pow.f64 x 8))","x","inf",0.1669921875],["(*.f64 -1843/32768 (pow.f64 x 8))","x","0",0.241943359375],["(fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))","x","-inf",0.237060546875],["(fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))","x","inf",0.369873046875],["(fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))","x","0",0.174072265625],["(fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))","x","-inf",0.23291015625],["(fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))","x","inf",0.321044921875],["(fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))","x","0",0.2861328125]],"time":3.89013671875,"type":"series"},{"count":[[4,124]],"inputs":[["(fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))","(fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))","(*.f64 -1843/32768 (pow.f64 x 8))","(pow.f64 x 6)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 6) 69/1024 (*.f64 -11/128 (pow.f64 x 4))) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 0) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (*.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x 6) 69/1024) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (pow.f64 x 6) 69/1024 (*.f64 -11/128 (pow.f64 x 4))) 1) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (*.f64 0 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) (*.f64 (pow.f64 x 6) 69/1024))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (fma.f64 (pow.f64 x 6) 69/1024 (*.f64 -11/128 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (pow.f64 x 6) 69/1024) (*.f64 -1843/32768 (pow.f64 x 8))) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -11/128 (pow.f64 x 4)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 (pow.f64 x 6) 69/1024)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) (cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 2)) (cbrt.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 6)) (*.f64 (cbrt.f64 (pow.f64 x (*.f64 2 6))) 69/1024) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 x 6) 69/1024)) (cbrt.f64 (*.f64 (pow.f64 x (*.f64 2 6)) 4761/1048576)) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 6) (cbrt.f64 69/1024)) (cbrt.f64 4761/1048576) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 6) (sqrt.f64 69/1024)) (sqrt.f64 69/1024) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (cbrt.f64 (pow.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 2)) (*.f64 (pow.f64 x 6) 69/1024))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 2)) (cbrt.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (*.f64 (pow.f64 x 6) 69/1024))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (*.f64 (pow.f64 x 6) 69/1024))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (pow.f64 x 6) 69/1024) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 6) 69/1024) 1 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) (*.f64 (pow.f64 x 6) 69/1024))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 1 (*.f64 (pow.f64 x 6) 69/1024))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 0) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) (*.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -11/128 (pow.f64 x 4)) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) (*.f64 0 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (cbrt.f64 (pow.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 2)) (cbrt.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -11/128) (*.f64 (cbrt.f64 121/16384) (pow.f64 x 4)) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -11/128 (cbrt.f64 (pow.f64 x 4))) (cbrt.f64 (pow.f64 x 8)) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -11/128 (pow.f64 x 4))) (cbrt.f64 (*.f64 121/16384 (pow.f64 x 8))) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) -11/128) (*.f64 x x) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 4) -11/128 (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -1843/32768 (pow.f64 x 8))) (cbrt.f64 (*.f64 3396649/1073741824 (pow.f64 x 16))) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1843/32768) (*.f64 (cbrt.f64 3396649/1073741824) (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 -1843/32768 (pow.f64 x 8))) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 8) (cbrt.f64 -1843/32768)) (cbrt.f64 3396649/1073741824) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 8)) (*.f64 (cbrt.f64 (pow.f64 x 16)) -1843/32768) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 3396649/1073741824 (pow.f64 x 16))) (cbrt.f64 (*.f64 -1843/32768 (pow.f64 x 8))) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 8) -1843/32768 (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -11/128 (pow.f64 x 4)) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1843/32768 (cbrt.f64 (pow.f64 x 8))) (cbrt.f64 (pow.f64 x 16)) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1843/32768 (pow.f64 x 8)) 1 (*.f64 -11/128 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -11/128 (pow.f64 x 4)) 1 (*.f64 -1843/32768 (pow.f64 x 8)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -1843/32768 (pow.f64 x 8)) 0) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 (*.f64 -1843/32768 (pow.f64 x 8)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 -1843/32768 (pow.f64 x 8))) (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 0 (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1843/32768 (pow.f64 x 8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 8) -1843/32768)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1843/32768) (*.f64 (cbrt.f64 3396649/1073741824) (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 3396649/1073741824) (pow.f64 x 8)) (cbrt.f64 -1843/32768))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 -1843/32768 (pow.f64 x 8))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -1843/32768 (pow.f64 x 8))) (cbrt.f64 (*.f64 3396649/1073741824 (pow.f64 x 16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3396649/1073741824 (pow.f64 x 16))) (cbrt.f64 (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 8) (cbrt.f64 -1843/32768)) (cbrt.f64 3396649/1073741824))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 8)) (*.f64 (cbrt.f64 (pow.f64 x 16)) -1843/32768))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 -1843/32768 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1843/32768 (pow.f64 x 8)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3396649/1073741824) (*.f64 (pow.f64 x 8) (cbrt.f64 -1843/32768)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 x 16)) -1843/32768) (cbrt.f64 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1843/32768 (cbrt.f64 (pow.f64 x 8))) (cbrt.f64 (pow.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 16)) (*.f64 -1843/32768 (cbrt.f64 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1843/32768 (pow.f64 x 8)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -1843/32768 (pow.f64 x 8)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -1843/32768 (pow.f64 x 8))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -1843/32768 (pow.f64 x 8))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -1843/32768 (pow.f64 x 8))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -1843/32768 (pow.f64 x 8)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 -1843/32768 (pow.f64 x 8))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 -1843/32768 (pow.f64 x 8)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x 6) 0) (pow.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x 6) (*.f64 (pow.f64 x 6) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 x 6)) (pow.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x 6) (*.f64 0 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x 6)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 6)) (cbrt.f64 (pow.f64 x (*.f64 2 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x (*.f64 2 6))) (cbrt.f64 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 x 6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 x 6) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 x 6)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 x 6)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 x 6)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 x 6) 3))))))"]],"rules":[["egg-rr",19],["egg-rr",28],["egg-rr",39],["egg-rr",38]],"time":32.558837890625,"type":"rewrite"},{"count":[[148,130]],"inputs":[["(*.f64 -11/128 (pow.f64 x 4))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -11/128 (pow.f64 x 4)))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(*.f64 -11/128 (pow.f64 x 4))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -11/128 (pow.f64 x 4))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 -11/128 (pow.f64 x 4) (*.f64 69/1024 (pow.f64 x 6)))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -1843/32768 (pow.f64 x 8)))","(fma.f64 69/1024 (pow.f64 x 6) (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (*.f64 -1843/32768 (pow.f64 x 8)))","(fma.f64 69/1024 (pow.f64 x 6) (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))","(+.f64 (*.f64 69/1024 (pow.f64 x 6)) (+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4))))","(fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))","(*.f64 -11/128 (pow.f64 x 4))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))","(*.f64 -1843/32768 (pow.f64 x 8))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))","(+.f64 (*.f64 -1843/32768 (pow.f64 x 8)) (*.f64 -11/128 (pow.f64 x 4)))","(fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))"]],"time":88.360107421875,"type":"simplify"},{"compiler":[[3180,2476]],"time":45.23486328125,"type":"eval"},{"alts":[["(fma.f64 (*.f64 1/8 x) x (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))","done",31.963198764936905],["(*.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) (/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))","done",15.505685399681331]],"compiler":[[21,16],[23,21]],"count":[[132,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[130,0],"picked":[1,1]}],"min-error":[0],"time":28.669189453125,"type":"prune"},{"accuracy":[0],"baseline":[15.505685399681331],"branch":[["x",0,3],["(-.f64 1 (sqrt.f64 (*.f64 1/2 (+.f64 1 (/.f64 1 (hypot.f64 1 x))))))",0,2],["(sqrt.f64 (*.f64 1/2 (+.f64 1 (/.f64 1 (hypot.f64 1 x)))))",0,2],["(*.f64 1/2 (+.f64 1 (/.f64 1 (hypot.f64 1 x))))",0,2],["(+.f64 1 (/.f64 1 (hypot.f64 1 x)))",0,2],["(/.f64 1 (hypot.f64 1 x))",0,2],["(hypot.f64 1 x)",0,2]],"compiler":[[2,1],[13,12],[11,10],[10,9],[8,7],[6,5],[4,3],[85,71]],"count":[[5,2]],"inputs":[["(fma.f64 (*.f64 1/8 x) x (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 69/1024 (pow.f64 x 6) (fma.f64 -1843/32768 (pow.f64 x 8) (*.f64 -11/128 (pow.f64 x 4)))))","(*.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) (/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))","(-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))","(-.f64 1 (sqrt.f64 (*.f64 1/2 (+.f64 1 (/.f64 1 (hypot.f64 1 x))))))"]],"link":["."],"name":["Given's Rotation SVD example, simplified"],"oracle":[47.49963706014593],"outputs":[["(fma.f64 (*.f64 1/8 x) x (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8)))))","(*.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) (/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x)))))))"]],"time":32.760986328125,"times":[["x",8.751953125],["(-.f64 1 (sqrt.f64 (*.f64 1/2 (+.f64 1 (/.f64 1 (hypot.f64 1 x))))))",3.18408203125],["(sqrt.f64 (*.f64 1/2 (+.f64 1 (/.f64 1 (hypot.f64 1 x)))))",3.243896484375],["(*.f64 1/2 (+.f64 1 (/.f64 1 (hypot.f64 1 x))))",3.10498046875],["(+.f64 1 (/.f64 1 (hypot.f64 1 x)))",3.06201171875],["(/.f64 1 (hypot.f64 1 x))",5.3310546875],["(hypot.f64 1 x)",4.089111328125]],"type":"regimes"},{"bstep":[[1.000066551788155,9.608241794309938,0.066162109375]],"compiler":[[13,12],[4,3]],"method":["left-value"],"time":0.1728515625,"type":"bsearch"},{"compiler":[[49,41]],"inputs":[["(if (<=.f64 (hypot.f64 1 x) 2) (fma.f64 (*.f64 1/8 x) x (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) (*.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) (/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (hypot.f64 1 x) 2) (fma.f64 (*.f64 1/8 x) x (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) (*.f64 (+.f64 1 (+.f64 (/.f64 -1/2 (hypot.f64 -1 x)) -1/2)) (/.f64 1 (+.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))))","(if (<=.f64 (hypot.f64 -1 x) 2) (fma.f64 (*.f64 1/8 x) x (fma.f64 (pow.f64 x 6) 69/1024 (fma.f64 -11/128 (pow.f64 x 4) (*.f64 -1843/32768 (pow.f64 x 8))))) (-.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1/2 (hypot.f64 -1 x))))))"]],"stop":[["done",1]],"time":30.592041015625,"type":"simplify"},{"time":0.02392578125,"type":"soundness"},{"compiler":[[49,41]],"remove-preprocessing":[[]],"time":21.64306640625,"type":"end"}]
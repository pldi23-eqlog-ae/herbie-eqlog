[{"compiler":[[10,8]],"method":["search"],"sampling":[[12,0.5036602020263672,0.0009760856628417969,0.495363712310791],[11,0.5036602020263672,0.0019521713256835938,0.4943876266479492],[10,0.5036602020263672,0.0039043426513671875,0.4924354553222656],[9,0.499755859375,0.007808685302734375,0.4924354553222656],[8,0.499755859375,0.01561737060546875,0.48462677001953125],[7,0.499755859375,0.0312347412109375,0.4690093994140625],[6,0.499755859375,0.062469482421875,0.437774658203125],[5,0.499755859375,0.12493896484375,0.37530517578125],[4,0.499755859375,0.2498779296875,0.2503662109375],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.884765625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.421875,8],["body",512,"valid",206.33154296875,2111],["body",1024,"valid",785.94287109375,4050],["body",2048,"valid",95.141357421875,433],["body",256,"valid",81.65234375,1662]],"time":1178.406005859375,"type":"sample"},{"compiler":[[9,7]],"inputs":[["0"],["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)","(*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) -1/2)"]],"symmetry":[[]],"time":52.066162109375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)","(*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) -1/2)"]],"time":18.618896484375,"type":"simplify"},{"compiler":[[17,10]],"time":0.380126953125,"type":"eval"},{"alts":[["(*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) -1/2)","next",57.32349011589512]],"compiler":[[9,7],[9,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[57.32349011589512],"time":0.87890625,"type":"prune"},{"compiler":[[24,8]],"locations":[["(exp.f64 (neg.f64 x))",0.00390625,true],["(-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))",4.970860903551091,true]],"time":5.862060546875,"type":"localize"},{"count":[[2,16]],"series":[["(exp.f64 (neg.f64 x))","x","-inf",0.14111328125],["(exp.f64 (neg.f64 x))","x","inf",0.1708984375],["(exp.f64 (neg.f64 x))","x","0",0.19189453125],["(-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","x","-inf",0.218017578125],["(-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","x","inf",0.239990234375],["(-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","x","0",0.4580078125]],"time":1.4970703125,"type":"series"},{"count":[[2,108]],"inputs":[["(-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(exp.f64 (neg.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 0) (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (*.f64 0 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (neg.f64 x)) (neg.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (exp.f64 x)) (exp.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (exp.f64 x)) (neg.f64 (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (exp.f64 (neg.f64 x)) 0) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 2/3) (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (exp.f64 x) -2/3) (+.f64 (pow.f64 (exp.f64 x) 2/3) 1)) (-.f64 (cbrt.f64 (exp.f64 (neg.f64 x))) (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (exp.f64 (neg.f64 x))) (neg.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (exp.f64 x)) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 x) (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (exp.f64 (neg.f64 x)))) (neg.f64 (pow.f64 (exp.f64 x) -2/3)) (neg.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) -2/3) (neg.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (exp.f64 x))) (pow.f64 (exp.f64 x) 2/3) (exp.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 x)) (neg.f64 (pow.f64 (exp.f64 x) 2/3)) (exp.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (exp.f64 x) -2/3) (cbrt.f64 (exp.f64 (neg.f64 x))) (neg.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (exp.f64 (neg.f64 x))) (neg.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (exp.f64 (neg.f64 x)) (neg.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (exp.f64 x) (exp.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (exp.f64 x)) (exp.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (neg.f64 x)) 1 (neg.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (neg.f64 x)) (*.f64 (exp.f64 (neg.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (neg.f64 x)) 0) (exp.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (neg.f64 x)) (*.f64 0 (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (exp.f64 (neg.f64 x))) (exp.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (exp.f64 x))) (neg.f64 (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (exp.f64 x)) (neg.f64 (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (neg.f64 x)) (/.f64 0 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) -2/3) (cbrt.f64 (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (exp.f64 (neg.f64 x)))) (neg.f64 (pow.f64 (exp.f64 x) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (exp.f64 x) -2/3)) (cbrt.f64 (neg.f64 (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 x) (exp.f64 (*.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (exp.f64 (neg.f64 x))) -1) (/.f64 (*.f64 (pow.f64 (exp.f64 x) -2/3) (exp.f64 x)) (neg.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (neg.f64 x)) 4/3) (/.f64 (*.f64 (pow.f64 (exp.f64 x) -2/3) (exp.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) -2/3) (/.f64 (*.f64 (pow.f64 (exp.f64 x) -2/3) (exp.f64 x)) (pow.f64 (exp.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 x) (pow.f64 (exp.f64 x) 2/3)) (pow.f64 (exp.f64 (neg.f64 x)) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 x)) (/.f64 (exp.f64 (neg.f64 x)) (neg.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 x) (cbrt.f64 (exp.f64 x))) (pow.f64 (cbrt.f64 (exp.f64 (neg.f64 x))) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) -2/3) (/.f64 (pow.f64 (exp.f64 x) 2/3) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (neg.f64 x)) 4/3) (/.f64 (pow.f64 (exp.f64 x) 2/3) (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (exp.f64 x) -2/3) -1) (/.f64 (pow.f64 (exp.f64 x) 2/3) (neg.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 (neg.f64 x))) 5) (pow.f64 (exp.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (neg.f64 x)) (/.f64 (pow.f64 (exp.f64 x) 2/3) (pow.f64 (exp.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 (neg.f64 x))) 5) (/.f64 (exp.f64 x) (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 x -2)) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (neg.f64 x)) 4/3) (/.f64 (exp.f64 x) (pow.f64 (exp.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (exp.f64 x) 2/3))) (/.f64 (cbrt.f64 (exp.f64 (neg.f64 x))) (cbrt.f64 (pow.f64 (exp.f64 x) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (neg.f64 x)))) 1) (/.f64 (cbrt.f64 (pow.f64 (exp.f64 x) -2/3)) (pow.f64 (exp.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (neg.f64 x)))) (cbrt.f64 (exp.f64 x))) (/.f64 (cbrt.f64 (pow.f64 (exp.f64 x) -2/3)) (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (neg.f64 x))) (/.f64 (cbrt.f64 (pow.f64 (exp.f64 x) -2/3)) (cbrt.f64 (pow.f64 (exp.f64 x) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (neg.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 (neg.f64 x)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 x) (pow.f64 (*.f64 (E.f64) (E.f64)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (exp.f64 x)) (*.f64 (exp.f64 x) (neg.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 x) (cbrt.f64 (exp.f64 (neg.f64 x)))) (pow.f64 (cbrt.f64 (exp.f64 x)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (exp.f64 (neg.f64 x))) (exp.f64 x)) (pow.f64 (cbrt.f64 (exp.f64 x)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (exp.f64 x)) (*.f64 (neg.f64 (exp.f64 x)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (exp.f64 x) -2/3) (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (exp.f64 (neg.f64 x)))) -1) (pow.f64 (exp.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (exp.f64 (neg.f64 x))) (cbrt.f64 (pow.f64 (exp.f64 x) 2/3))) (cbrt.f64 (pow.f64 (exp.f64 x) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (exp.f64 (neg.f64 x)))) (neg.f64 (pow.f64 (exp.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (neg.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 x) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 x 2/3)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 x)) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x 3)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (neg.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 x)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (exp.f64 x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (*.f64 x 3)) 1/3))))))"]],"rules":[["egg-rr",63],["egg-rr",45]],"time":26.380859375,"type":"rewrite"},{"count":[[124,124]],"inputs":[["(*.f64 -2 x)","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(+.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3))))","(+.f64 (*.f64 -1/2520 (pow.f64 x 7)) (+.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))))","(-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x))","(-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x))","(-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x))","(-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x))","1","(+.f64 1 (*.f64 -1 x))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x)))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x))))","(exp.f64 (*.f64 -1 x))","(exp.f64 (*.f64 -1 x))","(exp.f64 (*.f64 -1 x))","(exp.f64 (*.f64 -1 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -2 x)","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))","(+.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3))))","(fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))","(+.f64 (*.f64 -1/2520 (pow.f64 x 7)) (+.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))))","(fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))","(-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x))","(-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x))","(-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x))","(-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x))","(-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","1","(+.f64 1 (*.f64 -1 x))","(-.f64 1 x)","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x)))","(+.f64 (-.f64 1 x) (/.f64 (*.f64 x x) 2))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x))))","(+.f64 (fma.f64 (pow.f64 x 3) -1/6 1) (fma.f64 1/2 (*.f64 x x) (neg.f64 x)))","(exp.f64 (*.f64 -1 x))","(exp.f64 (neg.f64 x))","(exp.f64 (*.f64 -1 x))","(exp.f64 (neg.f64 x))","(exp.f64 (*.f64 -1 x))","(exp.f64 (neg.f64 x))","(exp.f64 (*.f64 -1 x))","(exp.f64 (neg.f64 x))"]],"time":75.4599609375,"type":"simplify"},{"compiler":[[1694,826]],"time":19.234130859375,"type":"eval"},{"alts":[["(*.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 3) -1/2)","fresh",57.319152569353975],["(*.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) -1/2)","next",0.8234452043711029],["(*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) -1/2)","done",57.32349011589512]],"compiler":[[12,10],[21,17],[9,7],[12,10],[21,17]],"count":[[125,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[124,2],"picked":[1,1]}],"min-error":[0],"time":15.9990234375,"type":"prune"},{"compiler":[[81,63]],"locations":[["(fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))",0.00390625,true],["(fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))",0.01171875,true]],"time":20.27587890625,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))","x","-inf",0.512939453125],["(fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))","x","inf",0.324951171875],["(fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))","x","0",0.242919921875],["(fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))","x","-inf",0.781982421875],["(fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))","x","inf",0.549072265625],["(fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))","x","0",0.4990234375]],"time":3.029052734375,"type":"series"},{"count":[[2,82]],"inputs":[["(fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))","(fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)) 0) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)) (*.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)) (*.f64 0 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x 3) -1/3) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -2 x) (*.f64 (pow.f64 x 3) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))) (cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)) 2)) (cbrt.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 -2 (*.f64 (*.f64 x x) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (*.f64 (*.f64 x x) -1/3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/3 (pow.f64 x 3) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 (*.f64 x x) -1/3) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 3) (cbrt.f64 -1/3)) (cbrt.f64 1/9) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (*.f64 x -1/3) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 -1/3)) (pow.f64 (*.f64 x (cbrt.f64 -1/3)) 2) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) 4)) (cbrt.f64 (*.f64 -2 x)) (*.f64 (pow.f64 x 3) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 -2)) (cbrt.f64 4) (*.f64 (pow.f64 x 3) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -2) (*.f64 (cbrt.f64 4) x) (*.f64 (pow.f64 x 3) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x -2 (*.f64 (pow.f64 x 3) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x x) -8)) (*.f64 (pow.f64 x 3) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -8 x)) (cbrt.f64 (*.f64 x x)) (*.f64 (pow.f64 x 3) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -2 x)) (cbrt.f64 (*.f64 (*.f64 x x) 4)) (*.f64 (pow.f64 x 3) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 -2 x)) (*.f64 (pow.f64 x 3) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -2 x (*.f64 (pow.f64 x 3) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (pow.f64 x 3) -1/3) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 3) -1/3) 1 (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -2 x) 1 (*.f64 (pow.f64 x 3) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -2 x) (*.f64 (pow.f64 x 3) -1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 7) -1/2520 (*.f64 -1/60 (pow.f64 x 5))) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (pow.f64 x 7) -1/2520) (fma.f64 (pow.f64 x 5) -1/60 (*.f64 (pow.f64 x 3) -1/3))) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (pow.f64 x 7) -1/2520 (*.f64 -1/60 (pow.f64 x 5))) (*.f64 (pow.f64 x 3) -1/3)) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) 0) (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) (*.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))) (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) (*.f64 0 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x 7) -1/2520) (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (pow.f64 x 7) -1/2520 (*.f64 -1/60 (pow.f64 x 5))) 1) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))) (*.f64 (pow.f64 x 7) -1/2520))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)) (fma.f64 (pow.f64 x 7) -1/2520 (*.f64 -1/60 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (pow.f64 x 7) -1/2520) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))) (*.f64 -1/60 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (pow.f64 x 7) -1/2520 (*.f64 -1/60 (pow.f64 x 5))) (*.f64 -2 x)) (*.f64 (pow.f64 x 3) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)) (*.f64 (pow.f64 x 7) -1/2520)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 5) -1/60 (*.f64 (pow.f64 x 3) -1/3)) (+.f64 (*.f64 -2 x) (*.f64 (pow.f64 x 7) -1/2520)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))) (cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) 2)) (cbrt.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) (cbrt.f64 (pow.f64 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))) 2)) (*.f64 (pow.f64 x 7) -1/2520))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) (*.f64 (pow.f64 x 7) -1/2520))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))) 2)) (cbrt.f64 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) (*.f64 (pow.f64 x 7) -1/2520))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 7) (cbrt.f64 -1/2520)) (cbrt.f64 1/6350400) (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 7)) (*.f64 (cbrt.f64 (pow.f64 x (*.f64 2 7))) -1/2520) (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 x 7) -1/2520)) (cbrt.f64 (*.f64 (pow.f64 x (*.f64 2 7)) 1/6350400)) (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2520 (pow.f64 x 7) (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))) (*.f64 (pow.f64 x 7) -1/2520))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))) 1 (*.f64 (pow.f64 x 7) -1/2520))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (pow.f64 x 7) -1/2520) (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 7) -1/2520) 1 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x))))))))"]],"rules":[["egg-rr",41],["egg-rr",41]],"time":26.22802734375,"type":"rewrite"},{"count":[[106,95]],"inputs":[["(*.f64 -2 x)","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(*.f64 -1/3 (pow.f64 x 3))","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(*.f64 -1/3 (pow.f64 x 3))","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(*.f64 -2 x)","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(+.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3))))","(+.f64 (*.f64 -1/2520 (pow.f64 x 7)) (+.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))))","(*.f64 -1/2520 (pow.f64 x 7))","(+.f64 (*.f64 -1/60 (pow.f64 x 5)) (*.f64 -1/2520 (pow.f64 x 7)))","(+.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (*.f64 -1/2520 (pow.f64 x 7)) (*.f64 -1/3 (pow.f64 x 3))))","(+.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (*.f64 -1/2520 (pow.f64 x 7)) (+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))))","(*.f64 -1/2520 (pow.f64 x 7))","(+.f64 (*.f64 -1/60 (pow.f64 x 5)) (*.f64 -1/2520 (pow.f64 x 7)))","(+.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (*.f64 -1/2520 (pow.f64 x 7)) (*.f64 -1/3 (pow.f64 x 3))))","(+.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (*.f64 -1/2520 (pow.f64 x 7)) (+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -2 x)","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(fma.f64 -1/3 (pow.f64 x 3) (*.f64 -2 x))","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(fma.f64 -1/3 (pow.f64 x 3) (*.f64 -2 x))","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(fma.f64 -1/3 (pow.f64 x 3) (*.f64 -2 x))","(*.f64 -1/3 (pow.f64 x 3))","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(fma.f64 -1/3 (pow.f64 x 3) (*.f64 -2 x))","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(fma.f64 -1/3 (pow.f64 x 3) (*.f64 -2 x))","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(fma.f64 -1/3 (pow.f64 x 3) (*.f64 -2 x))","(*.f64 -1/3 (pow.f64 x 3))","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(fma.f64 -1/3 (pow.f64 x 3) (*.f64 -2 x))","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(fma.f64 -1/3 (pow.f64 x 3) (*.f64 -2 x))","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(fma.f64 -1/3 (pow.f64 x 3) (*.f64 -2 x))","(*.f64 -2 x)","(+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))","(fma.f64 -1/3 (pow.f64 x 3) (*.f64 -2 x))","(+.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3))))","(fma.f64 (pow.f64 x 5) -1/60 (fma.f64 -1/3 (pow.f64 x 3) (*.f64 -2 x)))","(+.f64 (*.f64 -1/2520 (pow.f64 x 7)) (+.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))))","(fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 (pow.f64 x 5) -1/60 (fma.f64 -1/3 (pow.f64 x 3) (*.f64 -2 x))))","(*.f64 -1/2520 (pow.f64 x 7))","(+.f64 (*.f64 -1/60 (pow.f64 x 5)) (*.f64 -1/2520 (pow.f64 x 7)))","(fma.f64 -1/60 (pow.f64 x 5) (*.f64 -1/2520 (pow.f64 x 7)))","(+.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (*.f64 -1/2520 (pow.f64 x 7)) (*.f64 -1/3 (pow.f64 x 3))))","(fma.f64 -1/60 (pow.f64 x 5) (fma.f64 -1/2520 (pow.f64 x 7) (*.f64 -1/3 (pow.f64 x 3))))","(+.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (*.f64 -1/2520 (pow.f64 x 7)) (+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))))","(fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 (pow.f64 x 5) -1/60 (fma.f64 -1/3 (pow.f64 x 3) (*.f64 -2 x))))","(*.f64 -1/2520 (pow.f64 x 7))","(+.f64 (*.f64 -1/60 (pow.f64 x 5)) (*.f64 -1/2520 (pow.f64 x 7)))","(fma.f64 -1/60 (pow.f64 x 5) (*.f64 -1/2520 (pow.f64 x 7)))","(+.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (*.f64 -1/2520 (pow.f64 x 7)) (*.f64 -1/3 (pow.f64 x 3))))","(fma.f64 -1/60 (pow.f64 x 5) (fma.f64 -1/2520 (pow.f64 x 7) (*.f64 -1/3 (pow.f64 x 3))))","(+.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (*.f64 -1/2520 (pow.f64 x 7)) (+.f64 (*.f64 -2 x) (*.f64 -1/3 (pow.f64 x 3)))))","(fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 (pow.f64 x 5) -1/60 (fma.f64 -1/3 (pow.f64 x 3) (*.f64 -2 x))))"]],"time":94.27001953125,"type":"simplify"},{"compiler":[[2285,1852]],"time":35.462890625,"type":"eval"},{"alts":[["(*.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 3) -1/2)","next",57.319152569353975],["(*.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) -1/2)","done",0.8234452043711029],["(*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) -1/2)","done",57.32349011589512]],"compiler":[[12,10],[21,17],[9,7],[12,10]],"count":[[98,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[95,0],"picked":[1,1]}],"min-error":[0],"time":21.611083984375,"type":"prune"},{"compiler":[[44,14]],"locations":[["(exp.f64 (neg.f64 x))",0.00390625,false],["(cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))",0.02734375,true],["(pow.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 3)",0.09507753907376808,true],["(-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))",4.970860903551091,false]],"time":7.739990234375,"type":"localize"},{"count":[[2,16]],"series":[["(cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","x","-inf",0.201904296875],["(cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","x","inf",0.177978515625],["(cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","x","0",0.26806640625],["(pow.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 3)","x","-inf",1.48681640625],["(pow.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 3)","x","inf",1.655029296875],["(pow.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 3)","x","0",0.9140625]],"time":4.81201171875,"type":"series"},{"count":[[2,68]],"inputs":[["(pow.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 3)","(cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (neg.f64 x)) (neg.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (exp.f64 x)) (exp.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 0) (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (*.f64 0 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (exp.f64 x)) (neg.f64 (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (exp.f64 (neg.f64 x)) 0) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))) (pow.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 4/3) 2) (cbrt.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (exp.f64 x) -2/3) (+.f64 (pow.f64 (exp.f64 x) 2/3) 1)) (-.f64 (cbrt.f64 (exp.f64 (neg.f64 x))) (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 2/3) (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 7/3) (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 2/3)) (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (exp.f64 (neg.f64 x))) (neg.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (exp.f64 x)) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 x) (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (neg.f64 x))) (pow.f64 (exp.f64 x) -2/3) (neg.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (exp.f64 x) -2/3) (cbrt.f64 (exp.f64 (neg.f64 x))) (neg.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (exp.f64 (neg.f64 x)))) (neg.f64 (pow.f64 (exp.f64 x) -2/3)) (neg.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (exp.f64 x))) (pow.f64 (exp.f64 x) 2/3) (exp.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 x)) (neg.f64 (pow.f64 (exp.f64 x) 2/3)) (exp.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (exp.f64 (neg.f64 x))) (neg.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (exp.f64 (neg.f64 x)) (neg.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (neg.f64 x)) 1 (neg.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (exp.f64 x)) (exp.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (exp.f64 x) (exp.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 0) (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) (*.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))) (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) (*.f64 0 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 2/3)) (cbrt.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 4/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))) (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) (exp.f64 x)) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 x) (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))))))"]],"rules":[["egg-rr",20],["egg-rr",48]],"time":25.955078125,"type":"rewrite"},{"count":[[84,71]],"inputs":[["(*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 1 1/3))","(*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 1 1/3))","(*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 1 1/3))","(*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 1 1/3))","(*.f64 (-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x)) (pow.f64 1 1/3))","(*.f64 (-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x)) (pow.f64 1 1/3))","(*.f64 (-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x)) (pow.f64 1 1/3))","(*.f64 (-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x)) (pow.f64 1 1/3))","(pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 1/3)","(pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 1/3)","(pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 1/3)","(pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 1/3)","(pow.f64 (-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x)) 1/3)","(pow.f64 (-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x)) 1/3)","(pow.f64 (-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x)) 1/3)","(pow.f64 (-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x)) 1/3)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 1 1/3))","(-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 1 1/3))","(-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 1 1/3))","(-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) (pow.f64 1 1/3))","(-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(*.f64 (-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x)) (pow.f64 1 1/3))","(-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(*.f64 (-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x)) (pow.f64 1 1/3))","(-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(*.f64 (-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x)) (pow.f64 1 1/3))","(-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(*.f64 (-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x)) (pow.f64 1 1/3))","(-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 1/3)","(cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 1/3)","(cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 1/3)","(cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(pow.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) 1/3)","(cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(pow.f64 (-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x)) 1/3)","(cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(pow.f64 (-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x)) 1/3)","(cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(pow.f64 (-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x)) 1/3)","(cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(pow.f64 (-.f64 (exp.f64 (*.f64 -1 x)) (exp.f64 x)) 1/3)","(cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))"]],"time":59.745849609375,"type":"simplify"},{"compiler":[[3072,1581]],"time":38.491943359375,"type":"eval"},{"alts":[["(*.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 3) -1/2)","done",57.319152569353975],["(*.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) -1/2)","done",0.8234452043711029],["(*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) -1/2)","done",57.32349011589512]],"compiler":[[12,10],[21,17],[9,7]],"count":[[198,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[195,0],"picked":[1,1]}],"min-error":[0],"time":23.97314453125,"type":"prune"},{"accuracy":[0.8234452043711029],"baseline":[0.8234452043711029],"branch":[["x",0.8234452043711029,1],["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)",0.8234452043711029,1],["(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))",0.8234452043711029,1]],"compiler":[[2,1],[9,7],[7,5],[48,31]],"count":[[4,1]],"inputs":[["(*.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))) 3) -1/2)","(*.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) -1/2)","(*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) -1/2)","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)"]],"link":["."],"name":["Hyperbolic sine"],"oracle":[58.1391255927839],"outputs":[["(*.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) -1/2)"]],"time":8.02294921875,"times":[["x",3.06298828125],["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)",1.9140625],["(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))",1.85302734375]],"type":"regimes"},{"compiler":[[21,17]],"inputs":[["(*.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) -1/2)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (fma.f64 (pow.f64 x 7) -1/2520 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 (pow.f64 x 3) -1/3 (*.f64 -2 x)))) -1/2)"]],"stop":[["done",1]],"time":19.23291015625,"type":"simplify"},{"time":0.01708984375,"type":"soundness"},{"compiler":[[21,17]],"remove-preprocessing":[[]],"time":13.928955078125,"type":"end"}]
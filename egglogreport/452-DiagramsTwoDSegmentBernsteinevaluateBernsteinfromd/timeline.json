[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.2808382138282468,0.6572394309730498,0.06192235519870337],[11,0.2496339678473305,0.7059960653182316,0.044369966834437946],[10,0.19502653738072695,0.7684045572800642,0.03656890533920887],[9,0.031204245980916312,0.9517295024179475,0.017066251601136173],[8,0.031204245980916312,0.9673316254084057,0.0014641286106780171],[7,0.0,0.998535871389322,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":115.825927734375,"type":"analyze"},{"outcomes":[["body",256,"invalid",65.586669921875,1548],["body",256,"valid",348.6435546875,8256]],"time":423.486083984375,"type":"sample"},{"compiler":[[12,8]],"inputs":[["0","1","2"],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","(/.f64 (*.f64 y (+.f64 (-.f64 x z) 1)) z)","(/.f64 (*.f64 z (+.f64 (-.f64 y x) 1)) x)","(/.f64 (*.f64 x (+.f64 (-.f64 z y) 1)) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","(/.f64 (fma.f64 x (-.f64 y z) x) z)","(/.f64 (*.f64 y (+.f64 (-.f64 x z) 1)) z)","(/.f64 (fma.f64 (-.f64 x z) y y) z)","(/.f64 (*.f64 z (+.f64 (-.f64 y x) 1)) x)","(/.f64 (fma.f64 z (-.f64 y x) z) x)","(/.f64 (*.f64 x (+.f64 (-.f64 z y) 1)) y)","(/.f64 (fma.f64 (-.f64 z y) x x) y)"]],"symmetry":[[]],"time":73.842041015625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","(/.f64 (fma.f64 x (-.f64 y z) x) z)"]],"time":19.2529296875,"type":"simplify"},{"compiler":[[20,10]],"time":0.339111328125,"type":"eval"},{"alts":[["(/.f64 (fma.f64 x (-.f64 y z) x) z)","fresh",9.16015625],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","next",9.16015625]],"compiler":[[11,6],[12,8],[11,6],[12,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[9.15625],"time":2.73583984375,"type":"prune"},{"compiler":[[31,14]],"locations":[["(*.f64 x (+.f64 (-.f64 y z) 1))",0.03125,true],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)",8.60683226286378,true]],"time":6.35205078125,"type":"localize"},{"count":[[2,72]],"series":[["(*.f64 x (+.f64 (-.f64 y z) 1))","z","-inf",0.225830078125],["(*.f64 x (+.f64 (-.f64 y z) 1))","z","inf",0.19091796875],["(*.f64 x (+.f64 (-.f64 y z) 1))","z","0",0.24609375],["(*.f64 x (+.f64 (-.f64 y z) 1))","y","-inf",0.178955078125],["(*.f64 x (+.f64 (-.f64 y z) 1))","y","inf",0.154052734375],["(*.f64 x (+.f64 (-.f64 y z) 1))","y","0",0.2529296875],["(*.f64 x (+.f64 (-.f64 y z) 1))","x","-inf",0.251953125],["(*.f64 x (+.f64 (-.f64 y z) 1))","x","inf",0.325927734375],["(*.f64 x (+.f64 (-.f64 y z) 1))","x","0",0.287841796875],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","z","-inf",0.467041015625],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","z","inf",0.748779296875],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","z","0",0.399169921875],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","y","-inf",0.398193359375],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","y","inf",0.488037109375],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","y","0",0.571044921875],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","x","-inf",0.351806640625],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","x","inf",0.52099609375],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","x","0",0.648193359375]],"time":6.930908203125,"type":"series"},{"count":[[2,143]],"inputs":[["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","(*.f64 x (+.f64 (-.f64 y z) 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x z) (*.f64 (/.f64 1 z) (*.f64 x (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 z) (*.f64 x (-.f64 y z))) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z) 0) (/.f64 (fma.f64 x (-.f64 y z) x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z) (*.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x z) (*.f64 (*.f64 x (-.f64 y z)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (-.f64 y z)) (/.f64 1 z)) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 x (-.f64 y z) x) z)) (/.f64 (fma.f64 x (-.f64 y z) x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z) (*.f64 0 (/.f64 (fma.f64 x (-.f64 y z) x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 (-.f64 (+.f64 z -1) y) x) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 z)) (/.f64 (*.f64 (-.f64 (+.f64 z -1) y) x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (-.f64 (+.f64 z -1) y) x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z) 2)) (cbrt.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (+.f64 z -1) y) x) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (-.f64 y z) x)) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 y z) x) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 z)) (/.f64 (-.f64 y (+.f64 z -1)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y (+.f64 z -1)) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y (+.f64 z -1)) (cbrt.f64 z)) (/.f64 x (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (-.f64 y z) x) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (fma.f64 x (-.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 x (-.f64 y z) x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 (fma.f64 x (-.f64 y z) x) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y (+.f64 z -1)) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) (-.f64 y (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 y z) x) 2)) z) (cbrt.f64 (fma.f64 x (-.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 y (+.f64 z -1)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y (+.f64 z -1)) (cbrt.f64 (*.f64 z z))) (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 (+.f64 z -1) y) x) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) (*.f64 (-.f64 (+.f64 z -1) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x (-.f64 y z) x) (cbrt.f64 (*.f64 z z))) (cbrt.f64 (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x (-.f64 y z) x) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (+.f64 (pow.f64 (-.f64 y z) 3) 1)) -1) (*.f64 (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z))) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (+.f64 (pow.f64 (-.f64 y z) 3) 1)) (cbrt.f64 (/.f64 1 z))) (*.f64 (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z))) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (+.f64 (pow.f64 (-.f64 y z) 3) 1)) 1) (*.f64 (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z))) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (pow.f64 (-.f64 y z) 3) 1)) (*.f64 z (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 x (+.f64 (pow.f64 (-.f64 y z) 3) 1))) (*.f64 (cbrt.f64 (*.f64 z z)) (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 x (+.f64 (pow.f64 (-.f64 y z) 3) 1))) (*.f64 (neg.f64 z) (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (-.f64 y z) x) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (+.f64 z -1) y) x) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (-.f64 y z) x) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 y (+.f64 z -1)) (cbrt.f64 z)) x) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 z) (*.f64 x (+.f64 (pow.f64 (-.f64 y z) 3) 1))) (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z)) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 y z) x) 2))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) (-.f64 y (+.f64 z -1))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (fma.f64 x (-.f64 y z) x)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z) 2)) (cbrt.f64 (*.f64 (-.f64 (+.f64 z -1) y) x))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z) 2)) (cbrt.f64 (fma.f64 x (-.f64 y z) x))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (-.f64 y z) x) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (+.f64 (pow.f64 (-.f64 y z) 3) 1)) (/.f64 1 z)) (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 x (-.f64 y z) x) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (-.f64 z y) 3) -1) (/.f64 x z)) (+.f64 (neg.f64 (pow.f64 (-.f64 y z) 2)) (-.f64 y (+.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (-.f64 y z) 3) 1) (/.f64 x z)) (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y (+.f64 z -1)) (/.f64 x (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (-.f64 (+.f64 z -1) y) x)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z) 2))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 x (-.f64 y z) x)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 x (-.f64 y z) x) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 z 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 x (-.f64 y z) x) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (-.f64 y z) x) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 (+.f64 z -1) y) x) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 x (-.f64 y z) x) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (-.f64 (+.f64 z -1) y) x) z))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (-.f64 (+.f64 z -1) y) x) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 (+.f64 z -1) y) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (-.f64 y z) x) z) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 y z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 x (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (*.f64 x y)) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (+.f64 (neg.f64 (*.f64 z x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 1 y)) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (-.f64 y z) x) 0) (fma.f64 x (-.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (-.f64 y z) x) (*.f64 (fma.f64 x (-.f64 y z) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 1 y) x) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 z y) x) -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (-.f64 y z) x)) (fma.f64 x (-.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (-.f64 y z) x) (*.f64 0 (fma.f64 x (-.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 (+.f64 z -1) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 (-.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (-.f64 y (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y (+.f64 z -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (-.f64 y z) x)) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 y z) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 y z) x) 2)) (cbrt.f64 (fma.f64 x (-.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 y (+.f64 z -1)) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (-.f64 y (+.f64 z -1)))) (cbrt.f64 (pow.f64 (-.f64 y (+.f64 z -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 y (+.f64 z -1))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 y (+.f64 z -1)) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (-.f64 y (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (-.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (-.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 (+.f64 z -1) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (-.f64 y (+.f64 z -1))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 y (+.f64 z -1)) 2)) (*.f64 x (cbrt.f64 (-.f64 y (+.f64 z -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (+.f64 z -1) y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 y (+.f64 z -1)) 2)) x) (cbrt.f64 (-.f64 y (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (-.f64 y (+.f64 z -1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (*.f64 (-.f64 y z) (cbrt.f64 x)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (cbrt.f64 x) (*.f64 (-.f64 y z) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 (+.f64 z -1) y) x)) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 y z) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 z -1) y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (-.f64 (+.f64 z -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 (pow.f64 (-.f64 y z) 3) 1)) (/.f64 1 (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (pow.f64 (-.f64 y z) 3) 1)) (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (-.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (pow.f64 (-.f64 z y) 3) -1)) (+.f64 (neg.f64 (pow.f64 (-.f64 y z) 2)) (-.f64 y (+.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (+.f64 (pow.f64 (-.f64 y z) 3) 1)) 1) (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (-.f64 z y) 3) -1) x) (+.f64 (neg.f64 (pow.f64 (-.f64 y z) 2)) (-.f64 y (+.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 (-.f64 y z) 3) 1)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 y (+.f64 z -1)) 2)) x)) (cbrt.f64 (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (+.f64 z -1) y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (+.f64 (pow.f64 (-.f64 y z) 3) 1)) (cbrt.f64 (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z))))) (pow.f64 (cbrt.f64 (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (+.f64 (pow.f64 (-.f64 y z) 3) 1)) 1) (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (-.f64 y z) x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 (-.f64 y z) 3) 1))) (+.f64 (neg.f64 (pow.f64 (-.f64 y z) 2)) (-.f64 y (+.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (-.f64 y z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (-.f64 y z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (-.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (-.f64 y z) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (-.f64 y z) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 (+.f64 z -1) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (-.f64 y z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (-.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 y z) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (*.f64 x (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 x (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (*.f64 x (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) -1 (*.f64 x (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (-.f64 y z))) (cbrt.f64 (pow.f64 (-.f64 y z) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 y z) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 y z)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 y z) 2)) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (-.f64 y z))) (cbrt.f64 (pow.f64 (*.f64 x (-.f64 y z)) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (-.f64 y z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (-.f64 y z)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 x (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 x (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (-.f64 y z)) x)))))"]],"rules":[["egg-rr",70],["egg-rr",73]],"time":30.416015625,"type":"rewrite"},{"count":[[215,163]],"inputs":[["(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 (-.f64 1 z) x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 (+.f64 1 y) x) z)","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(*.f64 -1 x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(*.f64 -1 x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 z) x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 z) x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 z) x))","(*.f64 (+.f64 1 y) x)","(+.f64 (*.f64 -1 (*.f64 z x)) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 -1 (*.f64 z x)) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 -1 (*.f64 z x)) (*.f64 (+.f64 1 y) x))","(*.f64 -1 (*.f64 z x))","(+.f64 (*.f64 (+.f64 1 y) x) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 (+.f64 1 y) x) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 (+.f64 1 y) x) (*.f64 -1 (*.f64 z x)))","(*.f64 -1 (*.f64 z x))","(+.f64 (*.f64 (+.f64 1 y) x) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 (+.f64 1 y) x) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 (+.f64 1 y) x) (*.f64 -1 (*.f64 z x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 (-.f64 1 z) x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 (+.f64 1 y) x) z)","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 x (-.f64 (+.f64 1 y) z))","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 x (-.f64 (+.f64 1 y) z))","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 x (-.f64 (+.f64 1 y) z))","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 x (-.f64 (+.f64 1 y) z))","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 x (-.f64 (+.f64 1 y) z))","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 x (-.f64 (+.f64 1 y) z))","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 x (-.f64 (+.f64 1 y) z))","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 x (-.f64 (+.f64 1 y) z))","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 x (-.f64 (+.f64 1 y) z))","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 x (-.f64 (+.f64 1 y) z))","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 x (-.f64 (+.f64 1 y) z))","(*.f64 (-.f64 (+.f64 1 y) z) x)","(*.f64 x (-.f64 (+.f64 1 y) z))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 z) x))","(*.f64 x (-.f64 (+.f64 1 y) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 z) x))","(*.f64 x (-.f64 (+.f64 1 y) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 z) x))","(*.f64 x (-.f64 (+.f64 1 y) z))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 z) x))","(*.f64 x (-.f64 (+.f64 1 y) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 z) x))","(*.f64 x (-.f64 (+.f64 1 y) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 z) x))","(*.f64 x (-.f64 (+.f64 1 y) z))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 z) x))","(*.f64 x (-.f64 (+.f64 1 y) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 z) x))","(*.f64 x (-.f64 (+.f64 1 y) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 z) x))","(*.f64 x (-.f64 (+.f64 1 y) z))","(*.f64 (+.f64 1 y) x)","(+.f64 (*.f64 -1 (*.f64 z x)) (*.f64 (+.f64 1 y) x))","(*.f64 x (-.f64 (+.f64 1 y) z))","(+.f64 (*.f64 -1 (*.f64 z x)) (*.f64 (+.f64 1 y) x))","(*.f64 x (-.f64 (+.f64 1 y) z))","(+.f64 (*.f64 -1 (*.f64 z x)) (*.f64 (+.f64 1 y) x))","(*.f64 x (-.f64 (+.f64 1 y) z))","(*.f64 -1 (*.f64 z x))","(neg.f64 (*.f64 z x))","(+.f64 (*.f64 (+.f64 1 y) x) (*.f64 -1 (*.f64 z x)))","(*.f64 x (-.f64 (+.f64 1 y) z))","(+.f64 (*.f64 (+.f64 1 y) x) (*.f64 -1 (*.f64 z x)))","(*.f64 x (-.f64 (+.f64 1 y) z))","(+.f64 (*.f64 (+.f64 1 y) x) (*.f64 -1 (*.f64 z x)))","(*.f64 x (-.f64 (+.f64 1 y) z))","(*.f64 -1 (*.f64 z x))","(neg.f64 (*.f64 z x))","(+.f64 (*.f64 (+.f64 1 y) x) (*.f64 -1 (*.f64 z x)))","(*.f64 x (-.f64 (+.f64 1 y) z))","(+.f64 (*.f64 (+.f64 1 y) x) (*.f64 -1 (*.f64 z x)))","(*.f64 x (-.f64 (+.f64 1 y) z))","(+.f64 (*.f64 (+.f64 1 y) x) (*.f64 -1 (*.f64 z x)))","(*.f64 x (-.f64 (+.f64 1 y) z))"]],"time":240.7890625,"type":"simplify"},{"compiler":[[2366,969]],"time":22.64111328125,"type":"eval"},{"alts":[["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","done",9.16015625],["(/.f64 (fma.f64 (*.f64 (-.f64 y z) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) x) z)","fresh",25.221255976685125],["(*.f64 (/.f64 1 z) (fma.f64 x (-.f64 y z) x))","fresh",9.296875],["(*.f64 (-.f64 y (+.f64 z -1)) (/.f64 x z))","fresh",9.634666035440931],["(*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))","next",2.9140625],["(/.f64 (*.f64 (/.f64 x (cbrt.f64 z)) (-.f64 y (+.f64 z -1))) (cbrt.f64 (*.f64 z z)))","fresh",30.949340626546213]],"compiler":[[12,8],[17,10],[13,8],[12,8],[12,8],[18,12],[17,10],[13,8],[12,8],[12,8],[18,12]],"count":[[165,6]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[163,5],"picked":[1,1]}],"min-error":[0],"time":45.662841796875,"type":"prune"},{"compiler":[[31,18]],"locations":[["(/.f64 (-.f64 y (+.f64 z -1)) z)",0.01171875,true],["(*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))",2.7231072425437906,true]],"time":7.210205078125,"type":"localize"},{"count":[[2,60]],"series":[["(/.f64 (-.f64 y (+.f64 z -1)) z)","z","-inf",0.327880859375],["(/.f64 (-.f64 y (+.f64 z -1)) z)","z","inf",0.27099609375],["(/.f64 (-.f64 y (+.f64 z -1)) z)","z","0",0.93994140625],["(/.f64 (-.f64 y (+.f64 z -1)) z)","y","-inf",0.248779296875],["(/.f64 (-.f64 y (+.f64 z -1)) z)","y","inf",0.281005859375],["(/.f64 (-.f64 y (+.f64 z -1)) z)","y","0",0.279052734375],["(*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))","z","-inf",0.261962890625],["(*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))","z","inf",0.346923828125],["(*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))","z","0",0.2119140625],["(*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))","y","-inf",0.205078125],["(*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))","y","inf",0.177001953125],["(*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))","y","0",0.2451171875],["(*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))","x","-inf",0.1650390625],["(*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))","x","inf",0.179931640625],["(*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))","x","0",0.337158203125]],"time":4.69580078125,"type":"series"},{"count":[[2,161]],"inputs":[["(*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))","(/.f64 (-.f64 y (+.f64 z -1)) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (/.f64 y z)) (*.f64 x (/.f64 (-.f64 1 z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 0) (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) (*.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y z) x) (*.f64 (/.f64 (-.f64 1 z) z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z)) (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) (*.f64 0 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 (-.f64 z y)) z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 z)) (/.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 (*.f64 z z))) (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 2)) x) (cbrt.f64 (/.f64 (-.f64 1 (-.f64 z y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 2)) (cbrt.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 (-.f64 1 (-.f64 z y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (-.f64 1 (-.f64 z y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (/.f64 (-.f64 1 (-.f64 z y)) z))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 (-.f64 z y))) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (-.f64 z y)) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 x (-.f64 (+.f64 z -1) y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) (-.f64 1 (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 x (-.f64 1 (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (-.f64 (+.f64 z -1) y)) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 2)) (*.f64 x (cbrt.f64 (/.f64 (-.f64 1 (-.f64 z y)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 (-.f64 1 (-.f64 z y)) z)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 (+.f64 z -1) y)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 (+.f64 z -1) y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 1 (-.f64 z y))) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (fma.f64 y z (neg.f64 (*.f64 (+.f64 z -1) z)))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) (-.f64 1 (-.f64 z y))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 2)) (cbrt.f64 (*.f64 x (-.f64 1 (-.f64 z y))))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 z)) x) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 y z (neg.f64 (*.f64 (+.f64 z -1) z))) x) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (-.f64 z y))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 2)) x)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (+.f64 z -1) y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 2)) x)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 (+.f64 z -1) y)) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x (-.f64 1 (-.f64 z y)))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 z 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 (+.f64 z -1) y)) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 (+.f64 z -1) y)) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 (+.f64 z -1) y)) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (-.f64 y z) 3) 1) (/.f64 x z)) (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 (+.f64 z -1) y) z) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 x (-.f64 (+.f64 z -1) y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 x (-.f64 (+.f64 z -1) y)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 (+.f64 z -1) y) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 x (/.f64 (-.f64 (+.f64 z -1) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y z) (/.f64 (-.f64 1 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 z) z) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y z) z) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 0) (/.f64 (-.f64 1 (-.f64 z y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) (*.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y z) (*.f64 (/.f64 1 z) (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 z) (-.f64 1 z)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 z) (-.f64 y z)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y z) (*.f64 (/.f64 (-.f64 1 z) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 1 (-.f64 z y)) z)) (/.f64 (-.f64 1 (-.f64 z y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) (*.f64 0 (/.f64 (-.f64 1 (-.f64 z y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y z) (/.f64 (+.f64 z -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (-.f64 y z) z) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 (+.f64 z -1) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 y z) (*.f64 z z)) (/.f64 (+.f64 z -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 z (neg.f64 z)) (/.f64 (+.f64 1 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (-.f64 1 z) z) (/.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 z)) (/.f64 (-.f64 (+.f64 z -1) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 z) (/.f64 (-.f64 (+.f64 z -1) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 1 y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 (-.f64 z y)) z)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 2)) (cbrt.f64 (/.f64 (-.f64 1 (-.f64 z y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (-.f64 z y))) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 (-.f64 z y)) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 z -1) y) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (-.f64 z y)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (-.f64 1 (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 1 (-.f64 z y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 (+.f64 z -1) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 (-.f64 z y)) 2)) z) (cbrt.f64 (-.f64 1 (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) (-.f64 (+.f64 z -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (+.f64 z -1) y) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 (*.f64 z z))) (cbrt.f64 (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y z (neg.f64 (*.f64 (+.f64 z -1) z))) (/.f64 1 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 z z))) (*.f64 (neg.f64 z) (/.f64 (+.f64 z -1) (cbrt.f64 z)))) (*.f64 (neg.f64 z) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 y) z) (*.f64 (neg.f64 z) (+.f64 z -1))) (*.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y (cbrt.f64 (*.f64 z z))) (*.f64 z (/.f64 (+.f64 z -1) (cbrt.f64 z)))) (*.f64 (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y (neg.f64 z)) (*.f64 z (-.f64 1 z))) (*.f64 z (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 y (cbrt.f64 z)) z) (*.f64 (cbrt.f64 (*.f64 z z)) (+.f64 z -1))) (*.f64 (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (neg.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) (-.f64 1 z))) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (+.f64 (pow.f64 (-.f64 y z) 3) 1)) (*.f64 (neg.f64 z) (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (+.f64 (pow.f64 (-.f64 y z) 3) 1)) (*.f64 (cbrt.f64 (*.f64 z z)) (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (-.f64 y z) 3) 1) (cbrt.f64 (/.f64 1 z))) (*.f64 (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z))) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (-.f64 y z) 3) 1) 1) (*.f64 (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z))) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (-.f64 y z) 3) 1) -1) (*.f64 (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z))) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 y z (neg.f64 (*.f64 (+.f64 z -1) z)))) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 z -1) y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (-.f64 z y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y z (neg.f64 (*.f64 (+.f64 z -1) z))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (-.f64 1 (-.f64 z y))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 2)) (cbrt.f64 (-.f64 1 (-.f64 z y)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 2)) (cbrt.f64 (-.f64 (+.f64 z -1) y))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 1 (-.f64 z y)) z)) (cbrt.f64 (pow.f64 (-.f64 1 (-.f64 z y)) 2))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 y z (neg.f64 (*.f64 (+.f64 z -1) z))) 1) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (-.f64 z y))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (+.f64 z -1) y)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 2))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (-.f64 z y)) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 z 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 z -1) y) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 z -1) y) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 y z (neg.f64 (*.f64 (+.f64 z -1) z))) (cbrt.f64 (pow.f64 z 4))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 y z (neg.f64 (*.f64 (+.f64 z -1) z))) (cbrt.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 y z (neg.f64 (*.f64 (+.f64 z -1) z))) z) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 y z (neg.f64 (*.f64 (+.f64 z -1) z))) (cbrt.f64 (*.f64 z z))) (cbrt.f64 (pow.f64 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 y z (neg.f64 (*.f64 (+.f64 z -1) z))) 1) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 y z) z) (neg.f64 z)) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 y) (neg.f64 z)) (*.f64 (+.f64 z -1) z)) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (cbrt.f64 (*.f64 z z))) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 (+.f64 z -1) (cbrt.f64 z)))) (cbrt.f64 (pow.f64 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (-.f64 y z) 3) 1) (*.f64 z (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 z) (+.f64 (pow.f64 (-.f64 y z) 3) 1)) (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (-.f64 y z) 3) 1) (/.f64 1 z)) (+.f64 (pow.f64 (-.f64 y z) 2) (-.f64 1 (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (-.f64 z y)) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (-.f64 z y)) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (-.f64 z y)) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 (+.f64 z -1) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 (+.f64 z -1) y) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 -1 z) (/.f64 (-.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (/.f64 (-.f64 1 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 z) (/.f64 (-.f64 1 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y z) (/.f64 (-.f64 1 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (/.f64 (cbrt.f64 (*.f64 y y)) z) (/.f64 (-.f64 1 z) z))))))"]],"rules":[["egg-rr",93],["egg-rr",68]],"time":32.2099609375,"type":"rewrite"},{"count":[[221,176]],"inputs":[["(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 (-.f64 1 z) x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 (+.f64 1 y) x) z)","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(*.f64 -1 x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(*.f64 -1 x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(/.f64 (-.f64 1 z) z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 y z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 y z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (+.f64 1 y) z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","-1","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","-1","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 (-.f64 1 z) x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 (+.f64 1 y) x) z)","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (-.f64 1 z) z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (-.f64 (+.f64 1 y) z) z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (-.f64 (+.f64 1 y) z) z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (-.f64 (+.f64 1 y) z) z)","(/.f64 y z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (-.f64 (+.f64 1 y) z) z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (-.f64 (+.f64 1 y) z) z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (-.f64 (+.f64 1 y) z) z)","(/.f64 y z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (-.f64 (+.f64 1 y) z) z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (-.f64 (+.f64 1 y) z) z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (-.f64 (+.f64 1 y) z) z)","(/.f64 (+.f64 1 y) z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (-.f64 (+.f64 1 y) z) z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (-.f64 (+.f64 1 y) z) z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (-.f64 (+.f64 1 y) z) z)","-1","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (-.f64 (+.f64 1 y) z) z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (-.f64 (+.f64 1 y) z) z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (-.f64 (+.f64 1 y) z) z)","-1","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (-.f64 (+.f64 1 y) z) z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (-.f64 (+.f64 1 y) z) z)","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","(/.f64 (-.f64 (+.f64 1 y) z) z)"]],"time":211.396240234375,"type":"simplify"},{"compiler":[[2673,1354]],"time":28.595947265625,"type":"eval"},{"alts":[["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","done",9.16015625],["(/.f64 (fma.f64 (*.f64 (-.f64 y z) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) x) z)","fresh",25.221255976685125],["(*.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 2)) x) (cbrt.f64 (/.f64 (-.f64 1 (-.f64 z y)) z)))","fresh",14.683963818379095],["(*.f64 (/.f64 x z) (-.f64 1 (-.f64 z y)))","next",9.634666035440931],["(*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))","done",2.9140625],["(*.f64 x (fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z)))","fresh",12.761939998634498]],"compiler":[[12,8],[17,10],[24,16],[12,8],[12,8],[21,14],[17,10],[24,16],[12,8],[21,14]],"count":[[182,6]],"kept":[{"done":[1,1],"fresh":[4,1],"new":[176,3],"picked":[1,1]}],"min-error":[0],"time":50.093994140625,"type":"prune"},{"compiler":[[27,11]],"locations":[["(*.f64 (/.f64 x z) (-.f64 1 (-.f64 z y)))",9.634666035440926,true]],"time":5.47900390625,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 (/.f64 x z) (-.f64 1 (-.f64 z y)))","y","-inf",0.174072265625],["(*.f64 (/.f64 x z) (-.f64 1 (-.f64 z y)))","y","inf",0.199951171875],["(*.f64 (/.f64 x z) (-.f64 1 (-.f64 z y)))","y","0",0.1630859375],["(*.f64 (/.f64 x z) (-.f64 1 (-.f64 z y)))","z","-inf",0.1728515625],["(*.f64 (/.f64 x z) (-.f64 1 (-.f64 z y)))","z","inf",0.199951171875],["(*.f64 (/.f64 x z) (-.f64 1 (-.f64 z y)))","z","0",0.159912109375],["(*.f64 (/.f64 x z) (-.f64 1 (-.f64 z y)))","x","-inf",0.200927734375],["(*.f64 (/.f64 x z) (-.f64 1 (-.f64 z y)))","x","inf",0.172119140625],["(*.f64 (/.f64 x z) (-.f64 1 (-.f64 z y)))","x","0",0.216064453125]],"time":1.767822265625,"type":"series"},{"count":[[1,111]],"inputs":[["(*.f64 (/.f64 x z) (-.f64 1 (-.f64 z y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x (-.f64 1 z)) z) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x z) (/.f64 (*.f64 x (-.f64 y z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) z) (/.f64 (*.f64 x (-.f64 1 z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x (-.f64 y z)) z) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) (*.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 0) (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x (-.f64 1 z)) z) 1) (*.f64 (/.f64 (*.f64 x y) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x z) (*.f64 (/.f64 (*.f64 x (-.f64 y z)) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) (*.f64 0 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z)) (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 x (-.f64 z (+.f64 y 1))) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) (-.f64 1 (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (-.f64 z y)) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 2)) (cbrt.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 z)) (/.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (-.f64 1 (-.f64 z y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 (-.f64 z y))) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 (/.f64 x z))) (cbrt.f64 (pow.f64 (/.f64 x z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) (cbrt.f64 (-.f64 1 (-.f64 z y)))) (cbrt.f64 (pow.f64 (-.f64 1 (-.f64 z y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (-.f64 1 (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (-.f64 z y))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (-.f64 z y)) 2)) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 x (-.f64 z (+.f64 y 1))) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (-.f64 1 (-.f64 z y))) (cbrt.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 x (-.f64 1 (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (-.f64 z y)) 2)) (/.f64 x z)) (cbrt.f64 (-.f64 1 (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 (*.f64 z z))) (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (*.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 (-.f64 z y)) 2)) (*.f64 (/.f64 x z) (cbrt.f64 (-.f64 1 (-.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (-.f64 z (+.f64 y 1))) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x z)) (-.f64 z (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z (+.f64 y 1)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 1 (pow.f64 (-.f64 y z) 3))) (/.f64 1 (*.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 z (+.f64 y 1))) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 1 (pow.f64 (-.f64 y z) 3)) (neg.f64 x)) (/.f64 1 (*.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) (+.f64 1 (pow.f64 (-.f64 y z) 3))) (/.f64 1 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 1 (pow.f64 (-.f64 y z) 3))) (*.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (-.f64 y z) 3)) (neg.f64 x)) (*.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 1 (pow.f64 (-.f64 y z) 3)) (neg.f64 x)) 1) (*.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (+.f64 1 (pow.f64 (-.f64 y z) 3))) 1) (*.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 z 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 x z) (+.f64 1 (pow.f64 (-.f64 y z) 3))) (cbrt.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1))) (pow.f64 (cbrt.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (+.f64 1 (pow.f64 (-.f64 y z) 3))) (cbrt.f64 (/.f64 1 z))) (*.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (+.f64 1 (pow.f64 (-.f64 y z) 3))) -1) (*.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 1 (pow.f64 (-.f64 y z) 3)) (neg.f64 x)) 1) (*.f64 (*.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (+.f64 1 (pow.f64 (-.f64 y z) 3))) 1) (*.f64 (*.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (+.f64 -1 (pow.f64 (-.f64 z y) 3))) (*.f64 (neg.f64 z) (neg.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) (+.f64 -1 (pow.f64 (-.f64 z y) 3))) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) (+.f64 1 (pow.f64 (-.f64 y z) 3))) (*.f64 (cbrt.f64 (*.f64 z z)) (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 -1 (pow.f64 (-.f64 z y) 3))) (*.f64 z (neg.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (-.f64 y z) 3)) (/.f64 x (cbrt.f64 z))) (*.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (-.f64 z y) 3)) x) (*.f64 (neg.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (-.f64 z y) 3)) (neg.f64 x)) (*.f64 (neg.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (-.f64 z y) 3)) (/.f64 x (cbrt.f64 z))) (*.f64 (neg.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 1 (pow.f64 (-.f64 y z) 3)) (neg.f64 x))) (neg.f64 (*.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 z (+.f64 y 1))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x z) (+.f64 1 (pow.f64 (-.f64 y z) 3))) (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (-.f64 z y)) (/.f64 x (cbrt.f64 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) (-.f64 1 (-.f64 z y))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 1 (-.f64 z y))) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 2)) (cbrt.f64 (*.f64 x (-.f64 1 (-.f64 z y))))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x z) (+.f64 -1 (pow.f64 (-.f64 z y) 3))) (neg.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (+.f64 1 (pow.f64 (-.f64 y z) 3))) (/.f64 1 z)) (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 z (+.f64 y 1))) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 x z) (+.f64 1 (pow.f64 (-.f64 y z) 3))) 1) (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 1 (pow.f64 (-.f64 y z) 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (-.f64 z y)) 2)) (/.f64 x z))) (cbrt.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (-.f64 1 (-.f64 z y)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (-.f64 1 (-.f64 z y)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (-.f64 1 (-.f64 z y)) (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x (-.f64 1 (-.f64 z y)))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (-.f64 z y) 3)) (/.f64 x z)) (neg.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 z (+.f64 y 1))) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 z (+.f64 y 1))) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 x z) (+.f64 1 (pow.f64 (-.f64 y z) 3))) 1) (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 x z) (+.f64 1 (pow.f64 (-.f64 y z) 3)))) (neg.f64 (fma.f64 (-.f64 z y) (-.f64 (+.f64 1 z) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 x (-.f64 z (+.f64 y 1))) z))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 x (-.f64 z (+.f64 y 1))) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 x (-.f64 z (+.f64 y 1))) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 x z)) (-.f64 1 (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 1 (-.f64 z y)) (neg.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 1 (-.f64 z y))) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x z)) (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (/.f64 (*.f64 x (-.f64 y z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (cbrt.f64 (/.f64 x z)) (/.f64 (*.f64 x (-.f64 y z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (/.f64 (cbrt.f64 (*.f64 x x)) z) (/.f64 (*.f64 x (-.f64 y z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) x (/.f64 (*.f64 x (-.f64 y z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 x (cbrt.f64 (*.f64 z z))) (/.f64 (*.f64 x (-.f64 y z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (/.f64 x z)) (/.f64 (*.f64 x (-.f64 y z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 z) (/.f64 (*.f64 x (-.f64 y z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 -1 z) (/.f64 (*.f64 x (-.f64 y z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x z) (-.f64 1 z) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 z) (/.f64 x z) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 x z) (/.f64 (*.f64 x (-.f64 y z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x z) 1 (/.f64 (*.f64 x (-.f64 y z)) z))))))"]],"rules":[["egg-rr",111]],"time":27.34619140625,"type":"rewrite"},{"count":[[147,121]],"inputs":[["(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 (+.f64 1 y) x) z)","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(*.f64 -1 x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(*.f64 -1 x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(/.f64 (*.f64 (-.f64 1 z) x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 (+.f64 1 y) x) z)","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(fma.f64 x (/.f64 (+.f64 1 y) z) (neg.f64 x))","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(fma.f64 x (/.f64 (+.f64 1 y) z) (neg.f64 x))","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(fma.f64 x (/.f64 (+.f64 1 y) z) (neg.f64 x))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(fma.f64 x (/.f64 (+.f64 1 y) z) (neg.f64 x))","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(fma.f64 x (/.f64 (+.f64 1 y) z) (neg.f64 x))","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(fma.f64 x (/.f64 (+.f64 1 y) z) (neg.f64 x))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(fma.f64 x (/.f64 (+.f64 1 y) z) (neg.f64 x))","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(fma.f64 x (/.f64 (+.f64 1 y) z) (neg.f64 x))","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(fma.f64 x (/.f64 (+.f64 1 y) z) (neg.f64 x))","(/.f64 (*.f64 (-.f64 1 z) x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 (-.f64 1 z) x) z))","(/.f64 (*.f64 x (-.f64 (+.f64 1 y) z)) z)"]],"time":133.284912109375,"type":"simplify"},{"compiler":[[2014,977]],"time":19.884033203125,"type":"eval"},{"alts":[["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","done",9.16015625],["(/.f64 (fma.f64 (*.f64 (-.f64 y z) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) x) z)","fresh",25.221255976685125],["(*.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 2)) x) (cbrt.f64 (/.f64 (-.f64 1 (-.f64 z y)) z)))","fresh",14.683963818379095],["(*.f64 (/.f64 x z) (-.f64 1 (-.f64 z y)))","done",9.634666035440931],["(*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))","done",2.9140625],["(*.f64 x (fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z)))","next",12.761939998634498]],"compiler":[[12,8],[17,10],[24,16],[12,8],[12,8],[21,14],[17,10],[24,16],[21,14]],"count":[[127,6]],"kept":[{"done":[2,2],"fresh":[3,3],"new":[121,0],"picked":[1,1]}],"min-error":[0],"time":28.98193359375,"type":"prune"},{"compiler":[[69,32]],"locations":[["(fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z))",0.11947250976844201,true],["(/.f64 y (cbrt.f64 (*.f64 z z)))",0.203125,true],["(*.f64 x (fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z)))",2.7231072425437906,true],["(cbrt.f64 (*.f64 z z))",28.819452590828785,true]],"time":15.20703125,"type":"localize"},{"count":[[4,60]],"series":[["(fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z))","y","-inf",0.170166015625],["(fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z))","y","inf",0.166015625],["(fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z))","y","0",0.199951171875],["(fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z))","z","-inf",0.244140625],["(fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z))","z","inf",0.246826171875],["(fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z))","z","0",0.218017578125],["(/.f64 y (cbrt.f64 (*.f64 z z)))","z","-inf",0.27685546875],["(/.f64 y (cbrt.f64 (*.f64 z z)))","z","inf",0.408935546875],["(/.f64 y (cbrt.f64 (*.f64 z z)))","z","0",0.27197265625],["(/.f64 y (cbrt.f64 (*.f64 z z)))","y","-inf",0.2568359375],["(/.f64 y (cbrt.f64 (*.f64 z z)))","y","inf",0.291015625],["(/.f64 y (cbrt.f64 (*.f64 z z)))","y","0",0.883056640625],["(*.f64 x (fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z)))","y","-inf",0.47412109375],["(*.f64 x (fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z)))","y","inf",2.0068359375],["(*.f64 x (fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z)))","y","0",1.297119140625],["(*.f64 x (fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z)))","z","-inf",0.597900390625],["(*.f64 x (fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z)))","z","inf",0.408203125],["(*.f64 x (fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z)))","z","0",0.4638671875],["(*.f64 x (fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z)))","x","-inf",0.362060546875],["(*.f64 x (fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z)))","x","inf",0.363037109375],["(*.f64 x (fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z)))","x","0",4.202880859375],["(cbrt.f64 (*.f64 z z))","z","-inf",0.337890625],["(cbrt.f64 (*.f64 z z))","z","inf",0.320068359375],["(cbrt.f64 (*.f64 z z))","z","0",0.512939453125]],"time":15.323974609375,"type":"series"},{"count":[[4,260]],"inputs":[["(cbrt.f64 (*.f64 z z))","(*.f64 x (fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z)))","(/.f64 y (cbrt.f64 (*.f64 z z)))","(fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 z 2/3) 0) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 z 2/3) (*.f64 (pow.f64 z 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 z 2/3)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 z 2/3) (*.f64 0 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 z 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 z 2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 z 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 z)) -1) (*.f64 (cbrt.f64 (neg.f64 z)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 z 2/3))) (cbrt.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 z 4)) (pow.f64 z 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (cbrt.f64 (*.f64 (pow.f64 z 2/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 (*.f64 z (pow.f64 z 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z 2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 z 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 z 4))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 z 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 z 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 z 2/3) (pow.f64 z -1/3)) (/.f64 z (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 z -1/3) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 z 2/3) (cbrt.f64 z)) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z z) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 z 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 z) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 z 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 z 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 z 2/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 z 2/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 z z))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (/.f64 y z)) (*.f64 x (/.f64 (-.f64 1 z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (/.f64 (-.f64 1 z) z)) (*.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1)) 0) (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1)) (*.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (/.f64 y z)) 1) (*.f64 (*.f64 x (/.f64 (-.f64 1 z) z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1))) (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1)) (*.f64 0 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1))) (pow.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1)) 2/3) (cbrt.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (+.f64 (/.f64 (+.f64 y 1) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1))) (pow.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1)) (*.f64 (pow.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (+.f64 (/.f64 (+.f64 y 1) z) -1)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) 2/3) (*.f64 x (cbrt.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) 2/3) x) (cbrt.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 (/.f64 (+.f64 y 1) z) -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 y z) (*.f64 x (/.f64 (-.f64 1 z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y z) x (*.f64 x (/.f64 (-.f64 1 z) z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y (pow.f64 z 2/3)) 0) (/.f64 y (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (pow.f64 z 2/3)) (*.f64 (/.f64 y (pow.f64 z 2/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 y (pow.f64 z 2/3))) (/.f64 y (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (pow.f64 z 2/3)) (*.f64 0 (/.f64 y (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 y (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (pow.f64 z 2/3))) (/.f64 y (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (pow.f64 z 2/3))) (pow.f64 (/.f64 y (pow.f64 z 2/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 y (pow.f64 z 2/3)) 2/3) (cbrt.f64 (/.f64 y (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 (pow.f64 (/.f64 y z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (neg.f64 (cbrt.f64 (pow.f64 z -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (pow.f64 z 2/3))) (/.f64 (pow.f64 y 2/3) (cbrt.f64 (cbrt.f64 (pow.f64 z 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 z -2))) (/.f64 y (cbrt.f64 (cbrt.f64 (pow.f64 z 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 y (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (pow.f64 z 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 y (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 z -2))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 y y) z)) (cbrt.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (cbrt.f64 (pow.f64 z 4)))) (cbrt.f64 (cbrt.f64 (pow.f64 z -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 y 2/3) (cbrt.f64 (cbrt.f64 (pow.f64 z 4)))) (cbrt.f64 (/.f64 y (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 z)) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 y (pow.f64 z 2/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 y (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (pow.f64 z 2/3))) (pow.f64 (cbrt.f64 (pow.f64 z 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (cbrt.f64 (pow.f64 z -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z -2)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 y) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (cbrt.f64 (pow.f64 z 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 z 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (cbrt.f64 (cbrt.f64 (pow.f64 z 4)))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 y (cbrt.f64 (pow.f64 z 2/3))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 z 4))))) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 z 2/3)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 y (cbrt.f64 (pow.f64 z 2/3))) 1) (cbrt.f64 (cbrt.f64 (pow.f64 z 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 y (cbrt.f64 z))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 y) 1) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 y) (cbrt.f64 (pow.f64 z 2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 z 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 y) (cbrt.f64 z)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (pow.f64 z 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 y (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y -1) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (cbrt.f64 (neg.f64 z))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 y (cbrt.f64 (pow.f64 z 2/3)))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 z 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 y (cbrt.f64 z)) 1) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 y 3) (pow.f64 z -2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (pow.f64 z 2/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (pow.f64 z 2/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (pow.f64 z 2/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (pow.f64 z 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 y (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 y (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 y (neg.f64 (pow.f64 z 2/3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) (pow.f64 z -2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y z) (/.f64 (-.f64 1 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 z) z) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 y 1) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 z) (+.f64 -1 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 (+.f64 y 1) z) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) 0) (+.f64 (/.f64 (+.f64 y 1) z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) (*.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (/.f64 (+.f64 y 1) z) -1)) (+.f64 (/.f64 (+.f64 y 1) z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) (*.f64 0 (+.f64 (/.f64 (+.f64 y 1) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 y 1) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 z) (-.f64 1 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (/.f64 (+.f64 y 1) z) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y z) (/.f64 (+.f64 -1 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1)) (pow.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) 2/3) (cbrt.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 (+.f64 y 1) z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (+.f64 (/.f64 y (pow.f64 z 2/3)) (/.f64 (-.f64 1 z) (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (+.f64 (/.f64 (-.f64 1 z) (pow.f64 z 2/3)) (/.f64 y (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z -2)) (+.f64 (/.f64 y (cbrt.f64 z)) (/.f64 (-.f64 1 z) (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z -2)) (+.f64 (/.f64 (-.f64 1 z) (cbrt.f64 z)) (/.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (+.f64 y 1) z) 3) 1) (+.f64 (*.f64 (/.f64 (+.f64 y 1) z) (/.f64 (+.f64 y 1) z)) (+.f64 1 (*.f64 (/.f64 (+.f64 y 1) z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (-.f64 1 z) (cbrt.f64 z)) (neg.f64 z)) (*.f64 (pow.f64 z 2/3) (neg.f64 y))) (*.f64 (pow.f64 z 2/3) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (-.f64 1 z) (cbrt.f64 z)) z) (*.f64 (pow.f64 z 2/3) y)) (*.f64 (pow.f64 z 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (-.f64 1 z) (cbrt.f64 z)) (neg.f64 (pow.f64 z 2/3))) (*.f64 (pow.f64 z 2/3) (neg.f64 (/.f64 y (cbrt.f64 z))))) (*.f64 (pow.f64 z 2/3) (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 -1 z) (cbrt.f64 z)) (*.f64 (neg.f64 z) (/.f64 y (pow.f64 z 2/3)))) (*.f64 (neg.f64 z) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 -1 z) (pow.f64 z 2/3)) (*.f64 (neg.f64 z) (/.f64 y (cbrt.f64 z)))) (*.f64 (neg.f64 z) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 -1 z) (neg.f64 (pow.f64 z 2/3))) (*.f64 (neg.f64 z) (neg.f64 (/.f64 y (cbrt.f64 z))))) (*.f64 (neg.f64 z) (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z (+.f64 -1 z)) (neg.f64 z)) (*.f64 (neg.f64 (*.f64 z z)) (neg.f64 y))) (*.f64 (neg.f64 (*.f64 z z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z (+.f64 -1 z)) (cbrt.f64 z)) (*.f64 (neg.f64 (*.f64 z z)) (/.f64 y (pow.f64 z 2/3)))) (*.f64 (neg.f64 (*.f64 z z)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z (+.f64 -1 z)) (pow.f64 z 2/3)) (*.f64 (neg.f64 (*.f64 z z)) (/.f64 y (cbrt.f64 z)))) (*.f64 (neg.f64 (*.f64 z z)) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z (+.f64 -1 z)) (neg.f64 (pow.f64 z 2/3))) (*.f64 (neg.f64 (*.f64 z z)) (neg.f64 (/.f64 y (cbrt.f64 z))))) (*.f64 (neg.f64 (*.f64 z z)) (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 -1 (pow.f64 z 3)) (neg.f64 z)) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z)) (neg.f64 y))) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 -1 (pow.f64 z 3)) (cbrt.f64 z)) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z)) (/.f64 y (pow.f64 z 2/3)))) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 -1 (pow.f64 z 3)) (pow.f64 z 2/3)) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z)) (/.f64 y (cbrt.f64 z)))) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z)) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 -1 (pow.f64 z 3)) z) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z)) y)) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 -1 (pow.f64 z 3)) (neg.f64 (pow.f64 z 2/3))) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z)) (neg.f64 (/.f64 y (cbrt.f64 z))))) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z)) (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 z 3)) z) (neg.f64 z)) (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 y))) (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 z 3)) z) (cbrt.f64 z)) (*.f64 (fma.f64 z z (+.f64 1 z)) (/.f64 y (pow.f64 z 2/3)))) (*.f64 (fma.f64 z z (+.f64 1 z)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 z 3)) z) (pow.f64 z 2/3)) (*.f64 (fma.f64 z z (+.f64 1 z)) (/.f64 y (cbrt.f64 z)))) (*.f64 (fma.f64 z z (+.f64 1 z)) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 z 3)) z) z) (*.f64 (fma.f64 z z (+.f64 1 z)) y)) (*.f64 (fma.f64 z z (+.f64 1 z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 z 3)) z) (neg.f64 (pow.f64 z 2/3))) (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 (/.f64 y (cbrt.f64 z))))) (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) (neg.f64 z)) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) z) (neg.f64 y))) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) z) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) (cbrt.f64 z)) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) z) (/.f64 y (pow.f64 z 2/3)))) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) z) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) (pow.f64 z 2/3)) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) z) (/.f64 y (cbrt.f64 z)))) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) z) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) z) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) z) y)) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) z) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) (neg.f64 (pow.f64 z 2/3))) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) z) (neg.f64 (/.f64 y (cbrt.f64 z))))) (*.f64 (*.f64 (fma.f64 z z (+.f64 1 z)) z) (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z (-.f64 1 z)) (cbrt.f64 z)) (*.f64 (*.f64 z z) (/.f64 y (pow.f64 z 2/3)))) (*.f64 (*.f64 z z) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z (-.f64 1 z)) (pow.f64 z 2/3)) (*.f64 (*.f64 z z) (/.f64 y (cbrt.f64 z)))) (*.f64 (*.f64 z z) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z (-.f64 1 z)) (neg.f64 (pow.f64 z 2/3))) (*.f64 (*.f64 z z) (neg.f64 (/.f64 y (cbrt.f64 z))))) (*.f64 (*.f64 z z) (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 1 z) (pow.f64 z 2/3)) (*.f64 z (/.f64 y (cbrt.f64 z)))) (*.f64 (pow.f64 z 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 1 z) (neg.f64 (pow.f64 z 2/3))) (*.f64 z (neg.f64 (/.f64 y (cbrt.f64 z))))) (*.f64 z (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z))) (*.f64 z (+.f64 -1 (pow.f64 z 3)))) (*.f64 z (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (pow.f64 z 2/3)) (*.f64 z (/.f64 (-.f64 1 z) (cbrt.f64 z)))) (*.f64 (pow.f64 z 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (*.f64 (fma.f64 z z (+.f64 1 z)) z)) (*.f64 z (-.f64 1 (pow.f64 z 3)))) (*.f64 z (*.f64 (fma.f64 z z (+.f64 1 z)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (fma.f64 z z (+.f64 1 z))) (*.f64 z (/.f64 (-.f64 1 (pow.f64 z 3)) z))) (*.f64 (fma.f64 z z (+.f64 1 z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z))) (*.f64 (neg.f64 z) (+.f64 -1 (pow.f64 z 3)))) (*.f64 (neg.f64 z) (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (neg.f64 (*.f64 z z))) (*.f64 (neg.f64 z) (*.f64 z (+.f64 -1 z)))) (*.f64 (neg.f64 z) (neg.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (pow.f64 z 2/3)) (*.f64 (neg.f64 z) (/.f64 (-.f64 1 z) (cbrt.f64 z)))) (*.f64 (neg.f64 z) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (*.f64 (fma.f64 z z (+.f64 1 z)) z)) (*.f64 (neg.f64 z) (-.f64 1 (pow.f64 z 3)))) (*.f64 (neg.f64 z) (*.f64 (fma.f64 z z (+.f64 1 z)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (fma.f64 z z (+.f64 1 z))) (*.f64 (neg.f64 z) (/.f64 (-.f64 1 (pow.f64 z 3)) z))) (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 y (cbrt.f64 z))) (neg.f64 z)) (*.f64 (neg.f64 (pow.f64 z 2/3)) (+.f64 -1 z))) (*.f64 (neg.f64 (pow.f64 z 2/3)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 y (cbrt.f64 z))) (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z))) (*.f64 (neg.f64 (pow.f64 z 2/3)) (+.f64 -1 (pow.f64 z 3)))) (*.f64 (neg.f64 (pow.f64 z 2/3)) (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 y (cbrt.f64 z))) (neg.f64 (*.f64 z z))) (*.f64 (neg.f64 (pow.f64 z 2/3)) (*.f64 z (+.f64 -1 z)))) (*.f64 (neg.f64 (pow.f64 z 2/3)) (neg.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 y (cbrt.f64 z))) (*.f64 z z)) (*.f64 (neg.f64 (pow.f64 z 2/3)) (*.f64 z (-.f64 1 z)))) (*.f64 (neg.f64 (pow.f64 z 2/3)) (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 y (cbrt.f64 z))) (pow.f64 z 2/3)) (*.f64 (neg.f64 (pow.f64 z 2/3)) (/.f64 (-.f64 1 z) (cbrt.f64 z)))) (*.f64 (neg.f64 (pow.f64 z 2/3)) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 y (cbrt.f64 z))) (*.f64 (fma.f64 z z (+.f64 1 z)) z)) (*.f64 (neg.f64 (pow.f64 z 2/3)) (-.f64 1 (pow.f64 z 3)))) (*.f64 (neg.f64 (pow.f64 z 2/3)) (*.f64 (fma.f64 z z (+.f64 1 z)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 y (cbrt.f64 z))) (fma.f64 z z (+.f64 1 z))) (*.f64 (neg.f64 (pow.f64 z 2/3)) (/.f64 (-.f64 1 (pow.f64 z 3)) z))) (*.f64 (neg.f64 (pow.f64 z 2/3)) (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 y (cbrt.f64 z))) z) (*.f64 (neg.f64 (pow.f64 z 2/3)) (-.f64 1 z))) (*.f64 (neg.f64 (pow.f64 z 2/3)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (pow.f64 z 2/3)) (neg.f64 z)) (*.f64 (cbrt.f64 z) (+.f64 -1 z))) (*.f64 (cbrt.f64 z) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (pow.f64 z 2/3)) (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z))) (*.f64 (cbrt.f64 z) (+.f64 -1 (pow.f64 z 3)))) (*.f64 (cbrt.f64 z) (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (pow.f64 z 2/3)) (neg.f64 (*.f64 z z))) (*.f64 (cbrt.f64 z) (*.f64 z (+.f64 -1 z)))) (*.f64 (cbrt.f64 z) (neg.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (pow.f64 z 2/3)) (*.f64 z z)) (*.f64 (cbrt.f64 z) (*.f64 z (-.f64 1 z)))) (*.f64 (cbrt.f64 z) (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (pow.f64 z 2/3)) (*.f64 (fma.f64 z z (+.f64 1 z)) z)) (*.f64 (cbrt.f64 z) (-.f64 1 (pow.f64 z 3)))) (*.f64 (cbrt.f64 z) (*.f64 (fma.f64 z z (+.f64 1 z)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (pow.f64 z 2/3)) (fma.f64 z z (+.f64 1 z))) (*.f64 (cbrt.f64 z) (/.f64 (-.f64 1 (pow.f64 z 3)) z))) (*.f64 (cbrt.f64 z) (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (neg.f64 z)) (*.f64 (pow.f64 z 2/3) (+.f64 -1 z))) (*.f64 (pow.f64 z 2/3) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z))) (*.f64 (pow.f64 z 2/3) (+.f64 -1 (pow.f64 z 3)))) (*.f64 (pow.f64 z 2/3) (*.f64 (fma.f64 z z (+.f64 1 z)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (neg.f64 (*.f64 z z))) (*.f64 (pow.f64 z 2/3) (*.f64 z (+.f64 -1 z)))) (*.f64 (pow.f64 z 2/3) (neg.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (*.f64 z z)) (*.f64 (pow.f64 z 2/3) (*.f64 z (-.f64 1 z)))) (*.f64 (pow.f64 z 2/3) (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (*.f64 (fma.f64 z z (+.f64 1 z)) z)) (*.f64 (pow.f64 z 2/3) (-.f64 1 (pow.f64 z 3)))) (*.f64 (pow.f64 z 2/3) (*.f64 (fma.f64 z z (+.f64 1 z)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (fma.f64 z z (+.f64 1 z))) (*.f64 (pow.f64 z 2/3) (/.f64 (-.f64 1 (pow.f64 z 3)) z))) (*.f64 (pow.f64 z 2/3) (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (cbrt.f64 z)) z) (*.f64 (pow.f64 z 2/3) (-.f64 1 z))) (*.f64 (pow.f64 z 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 y) (+.f64 -1 z)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 y (cbrt.f64 z)) (/.f64 (-.f64 1 z) (cbrt.f64 z))) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 y (-.f64 1 z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (+.f64 -1 z) (neg.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (-.f64 1 z) (cbrt.f64 z)) (/.f64 y (cbrt.f64 z))) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (-.f64 1 z) y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (-.f64 1 z) (cbrt.f64 z)) (cbrt.f64 z)) (*.f64 (pow.f64 z 2/3) (/.f64 y (pow.f64 z 2/3)))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (-.f64 1 z) (cbrt.f64 z)) (pow.f64 z 2/3)) (*.f64 (pow.f64 z 2/3) (/.f64 y (cbrt.f64 z)))) (cbrt.f64 (pow.f64 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 -1 z) (neg.f64 z)) (*.f64 (neg.f64 z) (neg.f64 y))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 -1 z) z) (*.f64 (neg.f64 z) y)) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z (+.f64 -1 z)) z) (*.f64 (neg.f64 (*.f64 z z)) y)) (neg.f64 (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 1 z) (neg.f64 z)) (*.f64 z (neg.f64 y))) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 1 z) (cbrt.f64 z)) (*.f64 z (/.f64 y (pow.f64 z 2/3)))) (cbrt.f64 (pow.f64 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 1 z) z) (*.f64 z y)) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z (-.f64 1 z)) (neg.f64 z)) (*.f64 (*.f64 z z) (neg.f64 y))) (neg.f64 (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 z (-.f64 1 z)) z) (*.f64 (*.f64 z z) y)) (pow.f64 z 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (neg.f64 z)) (*.f64 z (+.f64 -1 z))) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (neg.f64 (*.f64 z z))) (*.f64 z (*.f64 z (+.f64 -1 z)))) (neg.f64 (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (*.f64 z z)) (*.f64 (*.f64 z z) (-.f64 1 z))) (pow.f64 z 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y z) (*.f64 z (-.f64 1 z))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (neg.f64 z)) (*.f64 z (-.f64 1 z))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (*.f64 z z)) (*.f64 (neg.f64 z) (*.f64 z (-.f64 1 z)))) (neg.f64 (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) z) (*.f64 z (+.f64 -1 z))) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (pow.f64 z 2/3)) z) (*.f64 (cbrt.f64 z) (-.f64 1 z))) (cbrt.f64 (pow.f64 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (pow.f64 z 2/3)) (pow.f64 z 2/3)) (*.f64 (cbrt.f64 z) (/.f64 (-.f64 1 z) (cbrt.f64 z)))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (pow.f64 z 2/3)) (*.f64 (pow.f64 z 2/3) (/.f64 (-.f64 1 z) (cbrt.f64 z)))) (cbrt.f64 (pow.f64 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 1 (/.f64 (+.f64 y 1) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 (+.f64 y 1) z) -1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z -1/3) (/.f64 y (pow.f64 z 2/3)) (/.f64 (-.f64 1 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 -1 z) (/.f64 -1 z) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z -1/3) (/.f64 (-.f64 1 z) (pow.f64 z 2/3)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 (-.f64 1 z) z) 2/3) (cbrt.f64 (/.f64 (-.f64 1 z) z)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (+.f64 -1 z) z) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 1 z) z)) (pow.f64 (/.f64 (-.f64 1 z) z) 2/3) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 z)) (/.f64 (pow.f64 (-.f64 1 z) 2/3) z) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (pow.f64 z 2/3)) (pow.f64 z -1/3) (/.f64 (-.f64 1 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (/.f64 (-.f64 1 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 z -1/3)) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 z -2))) (/.f64 y (pow.f64 z 2/3))) (/.f64 (-.f64 1 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 z -1/3) (cbrt.f64 (/.f64 y (pow.f64 z 2/3)))) (pow.f64 (/.f64 y (pow.f64 z 2/3)) 2/3) (/.f64 (-.f64 1 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1 z) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z -2)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 1 z) z) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1 z) z) 1 (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) (-.f64 1 z) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 z) (/.f64 1 z) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (cbrt.f64 z)) (cbrt.f64 (pow.f64 z -2)) (/.f64 (-.f64 1 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y z) (/.f64 (-.f64 1 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y z) 1 (/.f64 (-.f64 1 z) z))))))"]],"rules":[["egg-rr",140],["egg-rr",54],["egg-rr",33],["egg-rr",33]],"time":45.916015625,"type":"rewrite"},{"count":[[320,280]],"inputs":[["(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(/.f64 x z)","(+.f64 (*.f64 -1 x) (/.f64 x z))","(*.f64 -1 x)","(+.f64 (*.f64 -1 x) (/.f64 x z))","(*.f64 -1 x)","(+.f64 (*.f64 -1 x) (/.f64 x z))","(*.f64 (-.f64 (/.f64 1 z) 1) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(/.f64 1 z)","(-.f64 (/.f64 1 z) 1)","-1","(-.f64 (/.f64 1 z) 1)","-1","(-.f64 (/.f64 1 z) 1)","(-.f64 (/.f64 1 z) 1)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1)","(*.f64 (pow.f64 1 1/3) (/.f64 y z))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1)","(*.f64 (pow.f64 1 1/3) (/.f64 y z))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(/.f64 x z)","(+.f64 (*.f64 -1 x) (/.f64 x z))","(-.f64 (/.f64 x z) x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1 x) (/.f64 x z))","(-.f64 (/.f64 x z) x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1 x) (/.f64 x z))","(-.f64 (/.f64 x z) x)","(*.f64 (-.f64 (/.f64 1 z) 1) x)","(-.f64 (/.f64 x z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z))","(/.f64 (*.f64 y x) z)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z))","(/.f64 (*.f64 y x) z)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 (+.f64 (/.f64 (+.f64 1 y) z) -1) x)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(/.f64 y (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(/.f64 y (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(/.f64 y (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(/.f64 y (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(/.f64 y (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(/.f64 y (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(/.f64 y (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(/.f64 y (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(/.f64 y (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(/.f64 y (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(/.f64 y (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) y)","(/.f64 y (pow.f64 z 2/3))","(/.f64 1 z)","(-.f64 (/.f64 1 z) 1)","(+.f64 (/.f64 1 z) -1)","-1","(-.f64 (/.f64 1 z) 1)","(+.f64 (/.f64 1 z) -1)","-1","(-.f64 (/.f64 1 z) 1)","(+.f64 (/.f64 1 z) -1)","(-.f64 (/.f64 1 z) 1)","(+.f64 (/.f64 1 z) -1)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1)","(+.f64 (/.f64 (+.f64 1 y) z) -1)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1)","(+.f64 (/.f64 (+.f64 1 y) z) -1)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1)","(+.f64 (/.f64 (+.f64 1 y) z) -1)","(*.f64 (pow.f64 1 1/3) (/.f64 y z))","(/.f64 y z)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1)","(+.f64 (/.f64 (+.f64 1 y) z) -1)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1)","(+.f64 (/.f64 (+.f64 1 y) z) -1)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1)","(+.f64 (/.f64 (+.f64 1 y) z) -1)","(*.f64 (pow.f64 1 1/3) (/.f64 y z))","(/.f64 y z)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1)","(+.f64 (/.f64 (+.f64 1 y) z) -1)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1)","(+.f64 (/.f64 (+.f64 1 y) z) -1)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1)","(+.f64 (/.f64 (+.f64 1 y) z) -1)"]],"time":209.9130859375,"type":"simplify"},{"compiler":[[5724,3450]],"time":63.58984375,"type":"eval"},{"alts":[["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","done",9.16015625],["(*.f64 (/.f64 x z) (-.f64 1 (-.f64 z y)))","done",9.634666035440931],["(*.f64 x (fma.f64 (/.f64 y (cbrt.f64 z)) (cbrt.f64 (pow.f64 z -2)) (/.f64 (-.f64 1 z) z)))","fresh",13.115703248787153],["(*.f64 x (fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (pow.f64 (cbrt.f64 z) 2)) (/.f64 (-.f64 1 z) z)))","fresh",2.9994125976844206]],"compiler":[[12,8],[12,8],[19,13],[21,15]],"count":[[286,4]],"kept":[{"done":[3,2],"fresh":[2,0],"new":[280,2],"picked":[1,0]}],"min-error":[0],"time":86.107177734375,"type":"prune"},{"accuracy":[0.09765625],"baseline":[2.9140625],"branch":[["x",0.15234375,3],["y",2.9140625,1],["z",0.09765625,3],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)",0.1328125,3]],"compiler":[[4,3],[4,3],[4,3],[12,8],[159,83]],"count":[[12,3]],"inputs":[["(*.f64 x (fma.f64 (/.f64 y (cbrt.f64 z)) (cbrt.f64 (pow.f64 z -2)) (/.f64 (-.f64 1 z) z)))","(*.f64 x (fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (pow.f64 (cbrt.f64 z) 2)) (/.f64 (-.f64 1 z) z)))","(*.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 2)) x) (cbrt.f64 (/.f64 (-.f64 1 (-.f64 z y)) z)))","(*.f64 (/.f64 x z) (-.f64 1 (-.f64 z y)))","(*.f64 x (fma.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 1 z) z)))","(/.f64 (fma.f64 (*.f64 (-.f64 y z) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) x) z)","(*.f64 (/.f64 1 z) (fma.f64 x (-.f64 y z) x))","(*.f64 (-.f64 y (+.f64 z -1)) (/.f64 x z))","(*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))","(/.f64 (*.f64 (/.f64 x (cbrt.f64 z)) (-.f64 y (+.f64 z -1))) (cbrt.f64 (*.f64 z z)))","(/.f64 (fma.f64 x (-.f64 y z) x) z)","(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)"]],"link":["."],"name":["Diagrams.TwoD.Segment.Bernstein:evaluateBernstein from diagrams-lib-1.3.0.3"],"oracle":[43.807180817873736],"outputs":[["(*.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 2)) x) (cbrt.f64 (/.f64 (-.f64 1 (-.f64 z y)) z)))","(/.f64 (fma.f64 x (-.f64 y z) x) z)","(*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))"]],"time":47.912841796875,"times":[["x",13.47314453125],["y",4.86279296875],["z",13.886962890625],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)",12.79296875]],"type":"regimes"},{"bstep":[[5.253583507499386e+41,1.506836983815922e+52,8.958984375],[-1.2322825847954898e+26,-2.1949689368684725e+24,9.258056640625]],"compiler":[[14,10],[4,3]],"method":["binary-search","binary-search"],"time":18.362060546875,"type":"bsearch"},{"compiler":[[49,30]],"inputs":[["(if (<=.f64 z -123228258479548984268423168) (*.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 2)) x) (cbrt.f64 (/.f64 (-.f64 1 (-.f64 z y)) z))) (if (<=.f64 z 525358350749938617771282406793325358088192) (/.f64 (fma.f64 x (-.f64 y z) x) z) (*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 z -123228258479548984268423168) (*.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (-.f64 z y)) z) 2)) x) (cbrt.f64 (/.f64 (-.f64 1 (-.f64 z y)) z))) (if (<=.f64 z 525358350749938617771282406793325358088192) (/.f64 (fma.f64 x (-.f64 y z) x) z) (*.f64 x (/.f64 (-.f64 y (+.f64 z -1)) z))))","(if (<=.f64 z -123228258479548984268423168) (/.f64 (fma.f64 x (-.f64 y z) x) z) (if (<=.f64 z 525358350749938617771282406793325358088192) (/.f64 (fma.f64 x (-.f64 y z) x) z) (/.f64 (fma.f64 x (-.f64 y z) x) z)))"]],"stop":[["fuel",1]],"time":26.12109375,"type":"simplify"},{"time":0.016845703125,"type":"soundness"},{"compiler":[[49,30]],"remove-preprocessing":[[]],"time":16.8349609375,"type":"end"}]
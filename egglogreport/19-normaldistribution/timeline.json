[{"compiler":[[36,30]],"method":["search"],"sampling":[[12,0.06140333320945501,0.0009746560826897621,0.9376220107078552],[11,0.06042867712676525,0.0019493121653795242,0.9376220107078552],[10,0.06042867712676525,0.0019493121653795242,0.9376220107078552],[9,0.05847936496138573,0.0038986243307590485,0.9376220107078552],[8,0.05847936496138573,0.0038986243307590485,0.9376220107078552],[7,0.05458074063062668,0.007797248661518097,0.9376220107078552],[6,0.05458074063062668,0.007797248661518097,0.9376220107078552],[5,0.04678349196910858,0.015594497323036194,0.9376220107078552],[4,0.04678349196910858,0.015594497323036194,0.9376220107078552],[3,0.031188994646072388,0.031188994646072388,0.9376220107078552],[2,0.031188994646072388,0.031188994646072388,0.9376220107078552],[1,0.0,0.062377989292144775,0.9376220107078552],[0,0.0,0.062377989292144775,0.9376220107078552]],"time":18.059814453125,"type":"analyze"},{"outcomes":[["body",256,"valid",852.382080078125,8256]],"time":859.7041015625,"type":"sample"},{"compiler":[[21,19]],"inputs":[["0","1"],["(+.f64 (*.f64 (*.f64 (/.f64 1 6) (pow.f64 (*.f64 -2 (log.f64 u1)) 1/2)) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))) 1/2)","(+.f64 (*.f64 (*.f64 (/.f64 1 6) (pow.f64 (*.f64 -2 (log.f64 u2)) 1/2)) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u1))) 1/2)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 (*.f64 (*.f64 (/.f64 1 6) (pow.f64 (*.f64 -2 (log.f64 u1)) 1/2)) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))) 1/2)","(fma.f64 (sqrt.f64 (*.f64 1/36 (*.f64 -2 (log.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","(+.f64 (*.f64 (*.f64 (/.f64 1 6) (pow.f64 (*.f64 -2 (log.f64 u2)) 1/2)) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u1))) 1/2)","(fma.f64 (sqrt.f64 (*.f64 (*.f64 -2 (log.f64 u2)) 1/36)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u1)) 1/2)"]],"symmetry":[[]],"time":65.9208984375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (*.f64 (*.f64 (/.f64 1 6) (pow.f64 (*.f64 -2 (log.f64 u1)) 1/2)) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))) 1/2)"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (*.f64 (/.f64 1 6) (pow.f64 (*.f64 -2 (log.f64 u1)) 1/2)) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))) 1/2)","(fma.f64 (sqrt.f64 (*.f64 (*.f64 -2 (log.f64 u1)) 1/36)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)"]],"time":22.462158203125,"type":"simplify"},{"compiler":[[36,29]],"time":1.573974609375,"type":"eval"},{"alts":[["(fma.f64 (sqrt.f64 (*.f64 (*.f64 -2 (log.f64 u1)) 1/36)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","next",0.203125],["(+.f64 (*.f64 (*.f64 (/.f64 1 6) (pow.f64 (*.f64 -2 (log.f64 u1)) 1/2)) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))) 1/2)","fresh",0.36328125]],"compiler":[[17,14],[21,19],[17,14],[21,19]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.13671875],"time":1.787841796875,"type":"prune"},{"compiler":[[56,28]],"locations":[["(fma.f64 (sqrt.f64 (*.f64 (*.f64 -2 (log.f64 u1)) 1/36)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)",0.0390625,true],["(sqrt.f64 (*.f64 (*.f64 -2 (log.f64 u1)) 1/36))",0.140625,true],["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)",0.21875,true],["(*.f64 (*.f64 -2 (log.f64 u1)) 1/36)",0.3786125488422101,true]],"time":12.43408203125,"type":"localize"},{"count":[[4,24]],"series":[["(fma.f64 (sqrt.f64 (*.f64 (*.f64 -2 (log.f64 u1)) 1/36)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","u2","-inf",0.39208984375],["(fma.f64 (sqrt.f64 (*.f64 (*.f64 -2 (log.f64 u1)) 1/36)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","u2","inf",6.781005859375],["(fma.f64 (sqrt.f64 (*.f64 (*.f64 -2 (log.f64 u1)) 1/36)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","u2","0",3.0380859375],["(fma.f64 (sqrt.f64 (*.f64 (*.f64 -2 (log.f64 u1)) 1/36)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","u1","-inf",0.376953125],["(fma.f64 (sqrt.f64 (*.f64 (*.f64 -2 (log.f64 u1)) 1/36)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","u1","inf",0.369873046875],["(fma.f64 (sqrt.f64 (*.f64 (*.f64 -2 (log.f64 u1)) 1/36)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","u1","0",0.85986328125],["(sqrt.f64 (*.f64 (*.f64 -2 (log.f64 u1)) 1/36))","u1","-inf",0.3740234375],["(sqrt.f64 (*.f64 (*.f64 -2 (log.f64 u1)) 1/36))","u1","inf",0.40087890625],["(sqrt.f64 (*.f64 (*.f64 -2 (log.f64 u1)) 1/36))","u1","0",0.490966796875],["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","u2","-inf",0.268798828125],["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","u2","inf",0.406005859375],["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","u2","0",0.4599609375],["(*.f64 (*.f64 -2 (log.f64 u1)) 1/36)","u1","-inf",9.501953125],["(*.f64 (*.f64 -2 (log.f64 u1)) 1/36)","u1","inf",4.215087890625],["(*.f64 (*.f64 -2 (log.f64 u1)) 1/36)","u1","0",14.216064453125]],"time":42.423095703125,"type":"series"},{"count":[[4,190]],"inputs":[["(*.f64 (*.f64 -2 (log.f64 u1)) 1/36)","(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","(sqrt.f64 (*.f64 (*.f64 -2 (log.f64 u1)) 1/36))","(fma.f64 (sqrt.f64 (*.f64 (*.f64 -2 (log.f64 u1)) 1/36)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -1/18 (log.f64 u1)) 1/2) (*.f64 (*.f64 -1/18 (log.f64 u1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -1/18 (log.f64 u1)) 0) (*.f64 -1/18 (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/18 (log.f64 u1)) (*.f64 (*.f64 -1/18 (log.f64 u1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 -1/18 (log.f64 u1))) (*.f64 1/2 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 -1/18 (log.f64 u1))) (*.f64 -1/18 (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/18 (log.f64 u1)) (*.f64 0 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36)) (cbrt.f64 1/1296))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/36) (*.f64 (cbrt.f64 1/1296) (*.f64 -2 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (pow.f64 (*.f64 -1/18 (log.f64 u1)) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -2 (log.f64 u1))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 -2 (log.f64 u1)) 2)) 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -2) (*.f64 (cbrt.f64 4) (*.f64 (log.f64 u1) 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (*.f64 (log.f64 u1) 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 u1) 1/36) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/18 (log.f64 u1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 u1) -1/18)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) 1) (*.f64 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) -1) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) -1) (*.f64 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) (*.f64 1 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 0) (*.f64 -1/18 (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/18 (log.f64 u1)) (pow.f64 (*.f64 -1/18 (log.f64 u1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -2 (log.f64 u1)) 1/36)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/36 (*.f64 -2 (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 -2 (log.f64 u1)) (sqrt.f64 1/36)) (sqrt.f64 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/46656 (*.f64 -2 (log.f64 u1)))) (cbrt.f64 (pow.f64 (*.f64 -2 (log.f64 u1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/36) (*.f64 (sqrt.f64 1/36) (*.f64 -2 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2)) (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (sqrt.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 -1/18 (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/18 (log.f64 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -1/18 (log.f64 u1))) (cbrt.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 2)) (cbrt.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (log.f64 u1) 1/36) 2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (*.f64 (log.f64 u1) 1/36)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/18 (log.f64 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -1/18 (log.f64 u1)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -1/18 (log.f64 u1)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -1/18 (log.f64 u1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -1/18 (log.f64 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -1/18 (log.f64 u1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -1/18 (log.f64 u1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 2 (*.f64 (log.f64 u1) 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (log.f64 u1) 1/36) 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 -1/18 (log.f64 u1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (*.f64 -1/18 (log.f64 u1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 u2 (PI.f64)) (*.f64 u2 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (PI.f64) u2) (*.f64 (PI.f64) u2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 1/2) (*.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 0) (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) (*.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 u2 (PI.f64))) (*.f64 1 (*.f64 u2 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (PI.f64) u2)) (*.f64 1 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (*.f64 1/2 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) (*.f64 0 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 u2 (PI.f64)) 1) (*.f64 (*.f64 u2 (PI.f64)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (PI.f64) u2) 1) (*.f64 (*.f64 (PI.f64) u2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (PI.f64) (PI.f64))) (*.f64 (cbrt.f64 (*.f64 (*.f64 (PI.f64) (PI.f64)) 4)) u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 u2) (*.f64 (cbrt.f64 (*.f64 u2 u2)) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 u2 (+.f64 (PI.f64) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) (cbrt.f64 u2)) (cbrt.f64 (*.f64 u2 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 2)) (cbrt.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 u2 (cbrt.f64 (+.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (*.f64 (*.f64 (PI.f64) (PI.f64)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 u2 u2) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (PI.f64) u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 u2 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (PI.f64) (+.f64 u2 u2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 u2 (PI.f64) (*.f64 u2 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (PI.f64) u2 (*.f64 (PI.f64) u2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 0) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (*.f64 1/2 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (*.f64 0 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) -1) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))) (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))) (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) (fabs.f64 (cbrt.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (*.f64 -1/18 (log.f64 u1)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 0) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (pow.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (cbrt.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -1/18 (log.f64 u1))) (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -1/18 (log.f64 u1)) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -1/18 (log.f64 u1)) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -1/18 (log.f64 u1)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2) 1/2) (*.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2) 0) (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2) (*.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)) (*.f64 1/2 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)) (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2) (*.f64 0 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3) 1/8) (/.f64 1 (-.f64 (+.f64 (*.f64 (*.f64 -1/18 (log.f64 u1)) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) 1/4) (*.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2) 2)) (cbrt.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3) 1/8) (-.f64 (+.f64 (*.f64 (*.f64 -1/18 (log.f64 u1)) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) 1/4) (*.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3) 1/8) 1) (-.f64 (+.f64 (*.f64 (*.f64 -1/18 (log.f64 u1)) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) 1/4) (*.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3) 1/8) (+.f64 1/4 (-.f64 (*.f64 (*.f64 -1/18 (log.f64 u1)) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3) 1/8) 1) (*.f64 (-.f64 (+.f64 (*.f64 (*.f64 -1/18 (log.f64 u1)) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) 1/4) (*.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3) 1/8)) (neg.f64 (-.f64 (+.f64 (*.f64 (*.f64 -1/18 (log.f64 u1)) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) 1/4) (*.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/2) (sqrt.f64 1/2) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/4) (cbrt.f64 1/2) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 1/2)) (neg.f64 (sqrt.f64 1/2)) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/2) (neg.f64 (cbrt.f64 1/4)) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (*.f64 (cbrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (cbrt.f64 (*.f64 (*.f64 -1/18 (log.f64 u1)) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1/2 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1/2 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 1 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1 1/2)))))"]],"rules":[["egg-rr",45],["egg-rr",44],["egg-rr",39],["egg-rr",62]],"time":40.885986328125,"type":"rewrite"},{"count":[[214,192]],"inputs":[["(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (log.f64 u1))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (log.f64 u1))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)"]],"time":85.305908203125,"type":"simplify"},{"compiler":[[3880,2062]],"time":43.512939453125,"type":"eval"},{"alts":[["(+.f64 (*.f64 (*.f64 (/.f64 1 6) (pow.f64 (*.f64 -2 (log.f64 u1)) 1/2)) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))) 1/2)","fresh",0.36328125],["(fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","fresh",0.19921875],["(fma.f64 (sqrt.f64 (*.f64 (cbrt.f64 1/36) (*.f64 (cbrt.f64 1/1296) (*.f64 -2 (log.f64 u1))))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","fresh",0.203125],["(fma.f64 (sqrt.f64 (*.f64 (*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36)) (cbrt.f64 1/1296))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","next",0.1953125],["(fma.f64 (pow.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","fresh",0.2109375],["(fma.f64 (sqrt.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 2)) (cbrt.f64 (*.f64 -1/18 (log.f64 u1))))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","fresh",0.24447250976844204],["(fma.f64 (sqrt.f64 (*.f64 (sqrt.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2)) (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","fresh",0.24609375],["(fma.f64 (sqrt.f64 (*.f64 (cbrt.f64 (*.f64 1/46656 (*.f64 -2 (log.f64 u1)))) (cbrt.f64 (pow.f64 (*.f64 -2 (log.f64 u1)) 2)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","fresh",0.234375],["(fma.f64 (cbrt.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","fresh",0.2265625]],"compiler":[[21,19],[19,16],[21,18],[21,18],[18,15],[24,19],[25,20],[26,21],[17,14],[21,19],[19,16],[21,18],[21,18],[18,15],[24,19],[25,20],[26,21],[17,14]],"count":[[194,9]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[192,8],"picked":[1,0]}],"min-error":[0.00390625],"time":66.5751953125,"type":"prune"},{"compiler":[[80,50]],"locations":[["(sqrt.f64 (*.f64 (*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36)) (cbrt.f64 1/1296)))",0.140625,true],["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)",0.21875,false],["(*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36))",0.41015625,true],["(*.f64 (*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36)) (cbrt.f64 1/1296))",0.4287300293053261,true]],"time":19.716796875,"type":"localize"},{"count":[[3,24]],"series":[["(sqrt.f64 (*.f64 (*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36)) (cbrt.f64 1/1296)))","u1","-inf",0.453125],["(sqrt.f64 (*.f64 (*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36)) (cbrt.f64 1/1296)))","u1","inf",0.462890625],["(sqrt.f64 (*.f64 (*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36)) (cbrt.f64 1/1296)))","u1","0",0.52197265625],["(*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36))","u1","-inf",0.44287109375],["(*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36))","u1","inf",0.427001953125],["(*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36))","u1","0",0.405029296875],["(*.f64 (*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36)) (cbrt.f64 1/1296))","u1","-inf",0.489013671875],["(*.f64 (*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36)) (cbrt.f64 1/1296))","u1","inf",0.4951171875],["(*.f64 (*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36)) (cbrt.f64 1/1296))","u1","0",5.469970703125]],"time":9.326171875,"type":"series"},{"count":[[3,142]],"inputs":[["(*.f64 (*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36)) (cbrt.f64 1/1296))","(*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36))","(sqrt.f64 (*.f64 (*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36)) (cbrt.f64 1/1296)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 u1) -1/18) (*.f64 (*.f64 (log.f64 u1) -1/18) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log.f64 u1) -1/18) 0) (*.f64 (log.f64 u1) -1/18))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log.f64 u1) -1/18) 1/2) (*.f64 (*.f64 (log.f64 u1) -1/18) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 u1) -1/18) (*.f64 0 (*.f64 (log.f64 u1) -1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (log.f64 u1) -1/18)) (*.f64 (log.f64 u1) -1/18))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (log.f64 u1) -1/18)) (*.f64 1/2 (*.f64 (log.f64 u1) -1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)) (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -2 (log.f64 u1)) 1/36)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/36 (*.f64 -2 (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)) (cbrt.f64 1/1296))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/1296) (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -2 (log.f64 u1))) (*.f64 (pow.f64 (*.f64 -2 (log.f64 u1)) 2/3) 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1))) (*.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)) 2/3) (cbrt.f64 1/1296)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 u1) -1/18)) (pow.f64 (*.f64 (log.f64 u1) -1/18) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) (neg.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 2/3) (cbrt.f64 (*.f64 (log.f64 u1) -1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)) (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/1296 -8)) (*.f64 (log.f64 u1) (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/1296 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)))) (pow.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/1296)) (*.f64 (cbrt.f64 (cbrt.f64 1/1679616)) (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) (sqrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) (pow.f64 (*.f64 (log.f64 u1) -1/18) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 u1) -1/18)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (log.f64 u1) -1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 u1) -1/18) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (log.f64 u1) -1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/1296) (*.f64 -2 (log.f64 u1))) (cbrt.f64 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/36) (*.f64 (cbrt.f64 1/1296) (*.f64 -2 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)) (cbrt.f64 (cbrt.f64 1/1296))) (cbrt.f64 (cbrt.f64 1/1679616)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (*.f64 (log.f64 u1) 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 u1) (cbrt.f64 1/36)) (cbrt.f64 (*.f64 1/1296 -8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/1679616)) (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1))) (cbrt.f64 (cbrt.f64 1/1296)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)) 2/3) (cbrt.f64 (*.f64 1/1296 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 u1) 1/36) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/18 (log.f64 u1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) (+.f64 1/3 1/2)) (cbrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 -2 (log.f64 u1)) 2/3) 1/36) (cbrt.f64 (*.f64 -2 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/1679616)) (*.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)) (cbrt.f64 (cbrt.f64 1/1296))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)) 2/3) (cbrt.f64 1/1296)) (cbrt.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (log.f64 u1) -1/18)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) 1) (*.f64 (neg.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))))) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))) (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))) (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 u1) -1/18) (pow.f64 (*.f64 (log.f64 u1) -1/18) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 0) (*.f64 (log.f64 u1) -1/18))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 u1) -1/18) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (*.f64 (log.f64 u1) 1/36)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 u1) -1/18) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 u1) -1/18)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 u1) -1/18)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 u1) -1/18)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (log.f64 u1) -1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 2 (*.f64 (log.f64 u1) 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (*.f64 (log.f64 u1) -1/18))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)) (*.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)) 0) (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)) 1/2) (*.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)) (*.f64 0 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1))) (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1))) (*.f64 1/2 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -2 (log.f64 u1))) (*.f64 (pow.f64 (*.f64 -2 (log.f64 u1)) 2/3) (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -2) (*.f64 (cbrt.f64 4) (*.f64 (log.f64 u1) (cbrt.f64 1/36))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 u1) (cbrt.f64 (*.f64 1/36 -8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 -2 (log.f64 u1)) 2/3) (cbrt.f64 1/36)) (cbrt.f64 (*.f64 -2 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 4) (*.f64 (log.f64 u1) (cbrt.f64 1/36))) (cbrt.f64 -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1))) (pow.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/36) (*.f64 -2 (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (*.f64 (log.f64 u1) (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 u1) (cbrt.f64 1/36)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 u1) -1/18)) (pow.f64 (*.f64 -2 (log.f64 u1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/36)) (*.f64 (cbrt.f64 (cbrt.f64 1/1296)) (*.f64 -2 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 (cbrt.f64 1/36))) (cbrt.f64 (cbrt.f64 1/1296)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 -2 (log.f64 u1)) 2/3) (cbrt.f64 (*.f64 (log.f64 u1) -1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/1296)) (*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 (cbrt.f64 1/36))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/1296)) (*.f64 -2 (log.f64 u1))) (cbrt.f64 (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (log.f64 u1) (cbrt.f64 1/36)) 2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (*.f64 (log.f64 u1) (cbrt.f64 1/36))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/36 (pow.f64 (*.f64 -2 (log.f64 u1)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 1/36 -8)) (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 2 (*.f64 (log.f64 u1) (cbrt.f64 1/36))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (log.f64 u1) (cbrt.f64 1/36)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 1/36 (pow.f64 (*.f64 -2 (log.f64 u1)) 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)) (*.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)) 0) (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)) 1/2) (*.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)) (*.f64 0 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) (*.f64 1/2 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) (cbrt.f64 (*.f64 (log.f64 u1) -1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 u1) -1/18)) (cbrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))) (fabs.f64 (cbrt.f64 (*.f64 (log.f64 u1) -1/18))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (*.f64 (log.f64 u1) -1/18))) (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)) (pow.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)) 0) (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 u1) -1/18) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 u1) -1/18) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 u1) -1/18) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 u1) -1/18) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (log.f64 u1) -1/18))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18))))))))"]],"rules":[["egg-rr",39],["egg-rr",40],["egg-rr",63]],"time":31.660888671875,"type":"rewrite"},{"count":[[166,147]],"inputs":[["(*.f64 -2 (*.f64 (log.f64 u1) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -2 (*.f64 (log.f64 u1) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -2 (*.f64 (log.f64 u1) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -2 (*.f64 (log.f64 u1) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 2 (*.f64 (log.f64 (/.f64 1 u1)) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 2 (*.f64 (log.f64 (/.f64 1 u1)) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 2 (*.f64 (log.f64 (/.f64 1 u1)) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 2 (*.f64 (log.f64 (/.f64 1 u1)) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -2 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -2 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -2 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -2 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -2 (*.f64 (log.f64 u1) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (log.f64 u1) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (log.f64 u1) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (log.f64 u1) (cbrt.f64 1/36)))","(*.f64 2 (*.f64 (log.f64 (/.f64 1 u1)) (cbrt.f64 1/36)))","(*.f64 2 (*.f64 (log.f64 (/.f64 1 u1)) (cbrt.f64 1/36)))","(*.f64 2 (*.f64 (log.f64 (/.f64 1 u1)) (cbrt.f64 1/36)))","(*.f64 2 (*.f64 (log.f64 (/.f64 1 u1)) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)) (cbrt.f64 1/36)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -2 (*.f64 (log.f64 u1) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -2 (*.f64 (log.f64 u1) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -2 (*.f64 (log.f64 u1) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -2 (*.f64 (log.f64 u1) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -1/18 (log.f64 u1))","(*.f64 2 (*.f64 (log.f64 (/.f64 1 u1)) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -1/18 (log.f64 u1))","(*.f64 2 (*.f64 (log.f64 (/.f64 1 u1)) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -1/18 (log.f64 u1))","(*.f64 2 (*.f64 (log.f64 (/.f64 1 u1)) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -1/18 (log.f64 u1))","(*.f64 2 (*.f64 (log.f64 (/.f64 1 u1)) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -2 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -2 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -2 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -2 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -2 (*.f64 (log.f64 u1) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (log.f64 u1) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (log.f64 u1) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (log.f64 u1) (cbrt.f64 1/36)))","(*.f64 2 (*.f64 (log.f64 (/.f64 1 u1)) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (log.f64 u1) (cbrt.f64 1/36)))","(*.f64 2 (*.f64 (log.f64 (/.f64 1 u1)) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (log.f64 u1) (cbrt.f64 1/36)))","(*.f64 2 (*.f64 (log.f64 (/.f64 1 u1)) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (log.f64 u1) (cbrt.f64 1/36)))","(*.f64 2 (*.f64 (log.f64 (/.f64 1 u1)) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (log.f64 u1) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (log.f64 u1) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (log.f64 u1) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (log.f64 u1) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)) (cbrt.f64 1/36)))","(*.f64 -2 (*.f64 (log.f64 u1) (cbrt.f64 1/36)))"]],"time":89.257080078125,"type":"simplify"},{"compiler":[[3950,2342]],"time":46.469970703125,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","fresh",0.2265625],["(fma.f64 (sqrt.f64 (*.f64 -2 (*.f64 (log.f64 u1) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","fresh",0.23046875],["(+.f64 (*.f64 (*.f64 (/.f64 1 6) (pow.f64 (*.f64 -2 (log.f64 u1)) 1/2)) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))) 1/2)","fresh",0.36328125],["(fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","next",0.19921875]],"compiler":[[17,14],[21,18],[21,19],[19,16],[17,14],[21,18],[21,19],[19,16]],"count":[[195,4]],"kept":[{"done":[0,0],"fresh":[8,2],"new":[186,2],"picked":[1,0]}],"min-error":[0],"time":61.868896484375,"type":"prune"},{"compiler":[[66,32]],"locations":[["(fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))",0.03515625,true],["(sqrt.f64 (*.f64 -1/18 (log.f64 u1)))",0.140625,true],["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)",0.21875,false],["(*.f64 -1/18 (log.f64 u1))",0.3786125488422101,true]],"time":14.953125,"type":"localize"},{"count":[[3,8]],"series":[["(fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","u2","-inf",0.48486328125],["(fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","u2","inf",1.705078125],["(fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","u2","0",0.552978515625],["(fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","u1","-inf",0.3759765625],["(fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","u1","inf",0.380126953125],["(fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","u1","0",2.2041015625],["(sqrt.f64 (*.f64 -1/18 (log.f64 u1)))","u1","-inf",0.178955078125],["(sqrt.f64 (*.f64 -1/18 (log.f64 u1)))","u1","inf",0.22802734375],["(sqrt.f64 (*.f64 -1/18 (log.f64 u1)))","u1","0",0.151123046875],["(*.f64 -1/18 (log.f64 u1))","u1","-inf",0.18212890625],["(*.f64 -1/18 (log.f64 u1))","u1","inf",0.162109375],["(*.f64 -1/18 (log.f64 u1))","u1","0",0.174072265625]],"time":6.974853515625,"type":"series"},{"count":[[3,141]],"inputs":[["(*.f64 -1/18 (log.f64 u1))","(sqrt.f64 (*.f64 -1/18 (log.f64 u1)))","(fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -1/18 (log.f64 u1)) 1/2) (*.f64 (*.f64 -1/18 (log.f64 u1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -1/18 (log.f64 u1)) 0) (*.f64 -1/18 (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/18 (log.f64 u1)) (*.f64 (*.f64 -1/18 (log.f64 u1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 -1/18 (log.f64 u1))) (*.f64 1/2 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 -1/18 (log.f64 u1))) (*.f64 -1/18 (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/18 (log.f64 u1)) (*.f64 0 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/18 (log.f64 u1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 u1) -1/18)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -1/5832 (log.f64 u1))) (pow.f64 (log.f64 u1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 u1) (cbrt.f64 -1/18)) (cbrt.f64 1/324))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 u1)) (*.f64 (pow.f64 (log.f64 u1) 2/3) -1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/18) (*.f64 (cbrt.f64 1/324) (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (pow.f64 (*.f64 -1/18 (log.f64 u1)) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) -1) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) -1) (*.f64 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) 1) (*.f64 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) (*.f64 1 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 0) (*.f64 -1/18 (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/18 (log.f64 u1)) (pow.f64 (*.f64 -1/18 (log.f64 u1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 2/3) (cbrt.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -1/18 (log.f64 u1))) (pow.f64 (*.f64 -1/18 (log.f64 u1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2)) (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (sqrt.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 -1/18 (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/18 (log.f64 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/18 (log.f64 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -1/18 (log.f64 u1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -1/18 (log.f64 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -1/18 (log.f64 u1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -1/18 (log.f64 u1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 -1/18 (log.f64 u1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (*.f64 -1/18 (log.f64 u1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 0) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (*.f64 1/2 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (*.f64 0 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))) (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) -1) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))) (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (*.f64 -1/18 (log.f64 u1)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) (fabs.f64 (cbrt.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (cbrt.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 0) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (pow.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -1/18 (log.f64 u1))) (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -1/18 (log.f64 u1)) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -1/18 (log.f64 u1)) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -1/18 (log.f64 u1)) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -1/18 (log.f64 u1)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2) 1/2) (*.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2) 0) (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2) (*.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2)) (*.f64 1/2 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2)) (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2) (*.f64 0 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2)) (pow.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2/3) (cbrt.f64 (*.f64 -1/18 (log.f64 u1)))) (-.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (cbrt.f64 1/2)))) (+.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 1/4) (-.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2/3) (cbrt.f64 (*.f64 -1/18 (log.f64 u1)))) (*.f64 (cbrt.f64 1/2) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (+.f64 (cbrt.f64 1/2) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2) 2/3) (cbrt.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/8 (pow.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3)) (+.f64 1/4 (*.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (-.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3) 1/8) (+.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) (*.f64 -1/18 (log.f64 u1))) (-.f64 1/4 (*.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/4) (cbrt.f64 1/2) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/2) (cbrt.f64 -1/4) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 1/2)) (neg.f64 (sqrt.f64 1/2)) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/2) (sqrt.f64 1/2) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1/2 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cbrt.f64 1/4) 1/2)) (cbrt.f64 (cbrt.f64 1/16)) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 1/2)) (pow.f64 (cbrt.f64 (cbrt.f64 1/16)) 2) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 1 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1/2 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2/3) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) (cbrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2/3) (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))))) (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))) (*.f64 (cbrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2/3) (cbrt.f64 (*.f64 -1/18 (log.f64 u1)))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2/3) (cbrt.f64 (*.f64 -1/18 (log.f64 u1)))) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) 1/2)))))"]],"rules":[["egg-rr",50],["egg-rr",43],["egg-rr",48]],"time":36.276123046875,"type":"rewrite"},{"count":[[149,143]],"inputs":[["(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (log.f64 u1))"]],"time":39.85205078125,"type":"simplify"},{"compiler":[[4108,2383]],"time":44.596923828125,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","next",0.2265625],["(fma.f64 (sqrt.f64 (*.f64 -2 (*.f64 (log.f64 u1) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","fresh",0.23046875],["(+.f64 (*.f64 (*.f64 (/.f64 1 6) (pow.f64 (*.f64 -2 (log.f64 u1)) 1/2)) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))) 1/2)","fresh",0.36328125],["(fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","done",0.19921875]],"compiler":[[17,14],[21,18],[21,19],[19,16],[17,14],[21,18],[21,19]],"count":[[186,4]],"kept":[{"done":[0,0],"fresh":[3,3],"new":[182,0],"picked":[1,1]}],"min-error":[0],"time":59.123046875,"type":"prune"},{"compiler":[[56,28]],"locations":[["(cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))",0.1328125,true],["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)",0.21875,false],["(*.f64 (log.f64 u1) -1/18)",0.3786125488422101,true],["(pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)",0.39681625976844204,true]],"time":18.39306640625,"type":"localize"},{"count":[[3,20]],"series":[["(cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))","u1","-inf",0.3818359375],["(cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))","u1","inf",0.363037109375],["(cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))","u1","0",0.382080078125],["(*.f64 (log.f64 u1) -1/18)","u1","-inf",0.1708984375],["(*.f64 (log.f64 u1) -1/18)","u1","inf",0.14794921875],["(*.f64 (log.f64 u1) -1/18)","u1","0",0.14990234375],["(pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)","u1","-inf",8.5498046875],["(pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)","u1","inf",7.5849609375],["(pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)","u1","0",16.879150390625]],"time":36.447998046875,"type":"series"},{"count":[[3,77]],"inputs":[["(pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)","(*.f64 (log.f64 u1) -1/18)","(cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)) (*.f64 (log.f64 u1) -1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 u1) -1/18) (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))) (pow.f64 (*.f64 (log.f64 u1) -1/18) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 4/3) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))) (*.f64 1/18 (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 u1) -1/18) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (log.f64 u1) -1/18))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 1/18 (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))) (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)) (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))) 5) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 u1) -1/18)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/18 (log.f64 u1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 u1)) (*.f64 (pow.f64 (log.f64 u1) 2/3) -1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/18) (*.f64 (cbrt.f64 1/324) (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -1/5832 (log.f64 u1))) (pow.f64 (log.f64 u1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/324) (log.f64 u1)) (cbrt.f64 -1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 u1) 2/3) -1/18) (cbrt.f64 (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 u1) 2/3) (cbrt.f64 (*.f64 -1/5832 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 u1) (cbrt.f64 -1/18)) (cbrt.f64 1/324))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/324) (*.f64 (log.f64 u1) (cbrt.f64 -1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 2/3) (cbrt.f64 (*.f64 (log.f64 u1) -1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 u1) -1/18)) (pow.f64 (*.f64 (log.f64 u1) -1/18) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))) (cbrt.f64 (neg.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 1/18 (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/18 (log.f64 u1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (log.f64 u1) -1/18) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/18 (log.f64 u1))) (neg.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (log.f64 u1) -1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 u1) -1/18) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 u1) (/.f64 1 -1/18))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/18 (log.f64 u1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 u1) -1/18) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 u1) -1/18)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 u1) -1/18) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1/18 (log.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))) (cbrt.f64 (*.f64 (log.f64 u1) -1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 u1) -1/18)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)))) (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)))) (cbrt.f64 (*.f64 1/18 (log.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2))))))"]],"rules":[["egg-rr",19],["egg-rr",37],["egg-rr",21]],"time":49.93701171875,"type":"rewrite"},{"count":[[97,83]],"inputs":[["(*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 1 u1)) 3)) (sqrt.f64 1/5832))","(*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 1 u1)) 3)) (sqrt.f64 1/5832))","(*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 1 u1)) 3)) (sqrt.f64 1/5832))","(*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 1 u1)) 3)) (sqrt.f64 1/5832))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (log.f64 u1))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 (sqrt.f64 (log.f64 (/.f64 1 u1))) (sqrt.f64 1/18))","(*.f64 (sqrt.f64 (log.f64 (/.f64 1 u1))) (sqrt.f64 1/18))","(*.f64 (sqrt.f64 (log.f64 (/.f64 1 u1))) (sqrt.f64 1/18))","(*.f64 (sqrt.f64 (log.f64 (/.f64 1 u1))) (sqrt.f64 1/18))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 1 u1)) 3)) (sqrt.f64 1/5832))","(pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2)","(*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 1 u1)) 3)) (sqrt.f64 1/5832))","(pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2)","(*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 1 u1)) 3)) (sqrt.f64 1/5832))","(pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2)","(*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 1 u1)) 3)) (sqrt.f64 1/5832))","(pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2)","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (log.f64 u1))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 1/18 (log.f64 (/.f64 1 u1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 -1/18 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 u1))) (log.f64 -1)))","(*.f64 -1/18 (log.f64 u1))","(*.f64 (sqrt.f64 (log.f64 (/.f64 1 u1))) (sqrt.f64 1/18))","(sqrt.f64 (*.f64 -1/18 (log.f64 u1)))","(*.f64 (sqrt.f64 (log.f64 (/.f64 1 u1))) (sqrt.f64 1/18))","(sqrt.f64 (*.f64 -1/18 (log.f64 u1)))","(*.f64 (sqrt.f64 (log.f64 (/.f64 1 u1))) (sqrt.f64 1/18))","(sqrt.f64 (*.f64 -1/18 (log.f64 u1)))","(*.f64 (sqrt.f64 (log.f64 (/.f64 1 u1))) (sqrt.f64 1/18))","(sqrt.f64 (*.f64 -1/18 (log.f64 u1)))"]],"time":77.572998046875,"type":"simplify"},{"compiler":[[2334,1313]],"time":30.740966796875,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","done",0.2265625],["(fma.f64 (sqrt.f64 (*.f64 -2 (*.f64 (log.f64 u1) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","fresh",0.23046875],["(+.f64 (*.f64 (*.f64 (/.f64 1 6) (pow.f64 (*.f64 -2 (log.f64 u1)) 1/2)) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))) 1/2)","fresh",0.36328125],["(fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","done",0.19921875]],"compiler":[[17,14],[21,18],[21,19],[19,16]],"count":[[126,4]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[122,0],"picked":[1,1]}],"min-error":[0],"time":30.06103515625,"type":"prune"},{"accuracy":[0.1953125],"baseline":[0.1953125],"branch":[["u1",0.1953125,1],["u2",0.1953125,1],["(+.f64 (*.f64 (*.f64 (/.f64 1 6) (pow.f64 (*.f64 -2 (log.f64 u1)) 1/2)) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))) 1/2)",0.1953125,1],["(*.f64 (*.f64 (/.f64 1 6) (pow.f64 (*.f64 -2 (log.f64 u1)) 1/2)) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))",0.1953125,1],["(*.f64 (/.f64 1 6) (pow.f64 (*.f64 -2 (log.f64 u1)) 1/2))",0.1953125,1],["(pow.f64 (*.f64 -2 (log.f64 u1)) 1/2)",0.1953125,1],["(*.f64 -2 (log.f64 u1))",0.1953125,1],["(log.f64 u1)",0.1953125,1],["(cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))",0.1953125,1],["(*.f64 (*.f64 2 (PI.f64)) u2)",0.1953125,1]],"compiler":[[3,2],[3,2],[21,19],[19,17],[12,11],[8,7],[6,5],[4,3],[8,7],[7,6],[225,132]],"count":[[12,1]],"inputs":[["(fma.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 u1) -1/18) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","(fma.f64 (sqrt.f64 (*.f64 -2 (*.f64 (log.f64 u1) (*.f64 (cbrt.f64 1/1296) (cbrt.f64 1/36))))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","(fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (*.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","(fma.f64 (sqrt.f64 (*.f64 (cbrt.f64 1/36) (*.f64 (cbrt.f64 1/1296) (*.f64 -2 (log.f64 u1))))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","(fma.f64 (sqrt.f64 (*.f64 (*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36)) (cbrt.f64 1/1296))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","(fma.f64 (pow.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","(fma.f64 (sqrt.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 2)) (cbrt.f64 (*.f64 -1/18 (log.f64 u1))))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","(fma.f64 (sqrt.f64 (*.f64 (sqrt.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2)) (sqrt.f64 (sqrt.f64 (*.f64 -1/18 (log.f64 u1)))))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","(fma.f64 (sqrt.f64 (*.f64 (cbrt.f64 (*.f64 1/46656 (*.f64 -2 (log.f64 u1)))) (cbrt.f64 (pow.f64 (*.f64 -2 (log.f64 u1)) 2)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","(fma.f64 (cbrt.f64 (pow.f64 (*.f64 -1/18 (log.f64 u1)) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","(fma.f64 (sqrt.f64 (*.f64 (*.f64 -2 (log.f64 u1)) 1/36)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","(+.f64 (*.f64 (*.f64 (/.f64 1 6) (pow.f64 (*.f64 -2 (log.f64 u1)) 1/2)) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))) 1/2)"]],"link":["."],"name":["normal distribution"],"oracle":[0.693691259768442],"outputs":[["(fma.f64 (sqrt.f64 (*.f64 (*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36)) (cbrt.f64 1/1296))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)"]],"time":51.933837890625,"times":[["u1",4.791015625],["u2",4.926025390625],["(+.f64 (*.f64 (*.f64 (/.f64 1 6) (pow.f64 (*.f64 -2 (log.f64 u1)) 1/2)) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))) 1/2)",5.082763671875],["(*.f64 (*.f64 (/.f64 1 6) (pow.f64 (*.f64 -2 (log.f64 u1)) 1/2)) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))",5.123046875],["(*.f64 (/.f64 1 6) (pow.f64 (*.f64 -2 (log.f64 u1)) 1/2))",4.9912109375],["(pow.f64 (*.f64 -2 (log.f64 u1)) 1/2)",4.796142578125],["(*.f64 -2 (log.f64 u1))",4.89208984375],["(log.f64 u1)",4.76904296875],["(cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))",3.14892578125],["(*.f64 (*.f64 2 (PI.f64)) u2)",4.920166015625]],"type":"regimes"},{"compiler":[[21,18]],"inputs":[["(fma.f64 (sqrt.f64 (*.f64 (*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36)) (cbrt.f64 1/1296))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (sqrt.f64 (*.f64 (*.f64 (*.f64 -2 (log.f64 u1)) (cbrt.f64 1/36)) (cbrt.f64 1/1296))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)","(fma.f64 (sqrt.f64 (*.f64 (log.f64 u1) -1/18)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2)"]],"stop":[["fuel",1]],"time":23.004150390625,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[21,18]],"remove-preprocessing":[[]],"time":12.20703125,"type":"end"}]
[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.9073164244182408,0.09170725150033832,0.0009763240814208984],[11,0.8780481526628137,0.12097552325576544,0.0009763240814208984],[10,0.8195116091519594,0.17951206676661968,0.0009763240814208984],[9,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[8,0.6556092873215675,0.34341438859701157,0.0009763240814208984],[7,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":23.9140625,"type":"analyze"},{"outcomes":[["body",256,"valid",279.985107421875,8256]],"time":287.630126953125,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(+.f64 x (/.f64 (-.f64 y x) 2))","(+.f64 y (/.f64 (-.f64 x y) 2))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 x (/.f64 (-.f64 y x) 2))","(fma.f64 (-.f64 y x) 1/2 x)","(+.f64 y (/.f64 (-.f64 x y) 2))","(fma.f64 (-.f64 x y) 1/2 y)"]],"symmetry":[[]],"time":60.841796875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 x (/.f64 (-.f64 y x) 2))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 (-.f64 y x) 2))","(fma.f64 (-.f64 y x) 1/2 x)"]],"time":18.85107421875,"type":"simplify"},{"compiler":[[15,8]],"time":0.343994140625,"type":"eval"},{"alts":[["(fma.f64 (-.f64 y x) 1/2 x)","next",0.00390625]],"compiler":[[8,5],[8,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.822021484375,"type":"prune"},{"compiler":[[14,6]],"locations":[["(fma.f64 (-.f64 y x) 1/2 x)",0.00390625,true]],"time":3.324951171875,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 (-.f64 y x) 1/2 x)","x","-inf",0.41796875],["(fma.f64 (-.f64 y x) 1/2 x)","x","inf",0.320068359375],["(fma.f64 (-.f64 y x) 1/2 x)","x","0",0.26904296875],["(fma.f64 (-.f64 y x) 1/2 x)","y","-inf",0.302001953125],["(fma.f64 (-.f64 y x) 1/2 x)","y","inf",0.388916015625],["(fma.f64 (-.f64 y x) 1/2 x)","y","0",0.385009765625]],"time":2.191162109375,"type":"series"},{"count":[[1,39]],"inputs":[["(fma.f64 (-.f64 y x) 1/2 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 x y) -1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (-.f64 x y) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (-.f64 y x) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 y x) 1/2 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 (-.f64 x y) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (-.f64 (*.f64 (-.f64 x y) 1/2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (-.f64 x y) -1/2) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 (-.f64 x y) 1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 y x) 1/2 x)) (pow.f64 (fma.f64 (-.f64 y x) 1/2 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (-.f64 y x) 1/2 x) 2/3) (cbrt.f64 (fma.f64 (-.f64 y x) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 (-.f64 x y) 1/2) x)) (neg.f64 (pow.f64 (fma.f64 (-.f64 y x) 1/2 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 x y) -1/2) 2)) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (*.f64 (-.f64 x y) -1/2)) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (*.f64 (-.f64 x y) -1/2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 x y) -1/2) 2)) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (-.f64 x y) -1/2))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (-.f64 x y) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 (-.f64 x y) 1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (-.f64 x y) 1/2) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (-.f64 y x) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 y x) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (-.f64 y x) 1/2 x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (-.f64 y x) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 x y) 1/2) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x 2) (-.f64 x y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 y x) 1/2 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 y x) 1/2 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 y x) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (-.f64 x y) 1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (-.f64 y x) 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 (-.f64 x y) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 (-.f64 x y) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 y x) (sqrt.f64 1/2)) (sqrt.f64 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 x y) -1/2)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 x y) -1/2) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 y x)) (*.f64 (pow.f64 (-.f64 y x) 2/3) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 y x) (cbrt.f64 1/2)) (cbrt.f64 1/4) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 y x) 1/2 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (-.f64 y x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 (-.f64 x y) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (-.f64 x y) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (-.f64 x y) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (-.f64 x y) -1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 x y) -1/2) 1 x)))))"]],"rules":[["egg-rr",39]],"time":38.635009765625,"type":"rewrite"},{"count":[[63,45]],"inputs":[["(+.f64 (*.f64 -1/2 x) x)","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 1/2 y) x))","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 1/2 y) x))","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 1/2 y) x))","(*.f64 1/2 y)","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 1/2 y) x))","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 1/2 y) x))","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 1/2 y) x))","(*.f64 1/2 y)","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 1/2 y) x))","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 1/2 y) x))","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 1/2 y) x))","(*.f64 1/2 y)","(+.f64 (*.f64 1/2 x) (*.f64 1/2 y))","(+.f64 (*.f64 1/2 x) (*.f64 1/2 y))","(+.f64 (*.f64 1/2 x) (*.f64 1/2 y))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/2 y))","(+.f64 (*.f64 1/2 x) (*.f64 1/2 y))","(+.f64 (*.f64 1/2 x) (*.f64 1/2 y))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/2 y))","(+.f64 (*.f64 1/2 x) (*.f64 1/2 y))","(+.f64 (*.f64 1/2 x) (*.f64 1/2 y))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 -1/2 x) x)","(*.f64 1/2 x)","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 1/2 y) x))","(*.f64 1/2 (+.f64 x y))","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 1/2 y) x))","(*.f64 1/2 (+.f64 x y))","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 1/2 y) x))","(*.f64 1/2 (+.f64 x y))","(*.f64 1/2 y)","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 1/2 y) x))","(*.f64 1/2 (+.f64 x y))","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 1/2 y) x))","(*.f64 1/2 (+.f64 x y))","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 1/2 y) x))","(*.f64 1/2 (+.f64 x y))","(*.f64 1/2 y)","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 1/2 y) x))","(*.f64 1/2 (+.f64 x y))","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 1/2 y) x))","(*.f64 1/2 (+.f64 x y))","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 1/2 y) x))","(*.f64 1/2 (+.f64 x y))","(*.f64 1/2 y)","(+.f64 (*.f64 1/2 x) (*.f64 1/2 y))","(*.f64 1/2 (+.f64 x y))","(+.f64 (*.f64 1/2 x) (*.f64 1/2 y))","(*.f64 1/2 (+.f64 x y))","(+.f64 (*.f64 1/2 x) (*.f64 1/2 y))","(*.f64 1/2 (+.f64 x y))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/2 y))","(*.f64 1/2 (+.f64 x y))","(+.f64 (*.f64 1/2 x) (*.f64 1/2 y))","(*.f64 1/2 (+.f64 x y))","(+.f64 (*.f64 1/2 x) (*.f64 1/2 y))","(*.f64 1/2 (+.f64 x y))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/2 y))","(*.f64 1/2 (+.f64 x y))","(+.f64 (*.f64 1/2 x) (*.f64 1/2 y))","(*.f64 1/2 (+.f64 x y))","(+.f64 (*.f64 1/2 x) (*.f64 1/2 y))","(*.f64 1/2 (+.f64 x y))"]],"time":84.372802734375,"type":"simplify"},{"compiler":[[449,242]],"time":6.898193359375,"type":"eval"},{"alts":[["(*.f64 1/2 (+.f64 x y))","next",0]],"compiler":[[7,5],[7,5]],"count":[[46,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[45,1],"picked":[1,0]}],"min-error":[0],"time":6.833984375,"type":"prune"},{"compiler":[[13,6]],"time":2.875,"type":"localize"},{"compiler":[[2,2]],"time":0.0869140625,"type":"eval"},{"alts":[["(*.f64 1/2 (+.f64 x y))","done",0]],"compiler":[[7,5]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.470947265625,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["(+.f64 x (/.f64 (-.f64 y x) 2))",0,1]],"compiler":[[3,2],[3,2],[9,6],[20,11]],"count":[[3,1]],"inputs":[["(*.f64 1/2 (+.f64 x y))","(fma.f64 (-.f64 y x) 1/2 x)","(+.f64 x (/.f64 (-.f64 y x) 2))"]],"link":["."],"name":["Numeric.Interval.Internal:bisect from intervals-0.7.1, A"],"oracle":[0.00390625],"outputs":[["(*.f64 1/2 (+.f64 x y))"]],"time":8.866943359375,"times":[["x",2.56298828125],["y",2.516845703125],["(+.f64 x (/.f64 (-.f64 y x) 2))",3.137939453125]],"type":"regimes"},{"compiler":[[7,5]],"inputs":[["(*.f64 1/2 (+.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (+.f64 x y))"]],"stop":[["done",1]],"time":21.42822265625,"type":"simplify"},{"time":0.014892578125,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":7.719970703125,"type":"end"}]
[{"compiler":[[12,9]],"method":["search"],"sampling":[[12,0.6331702789757401,0.2839022360276431,0.08292748499661684],[11,0.6185361430980265,0.29853637190535665,0.08292748499661684],[10,0.5814629988744855,0.3473168248310685,0.07122017629444599],[9,0.5541459452360868,0.37463387846946716,0.07122017629444599],[8,0.48390209302306175,0.46829234808683395,0.047805558890104294],[7,0.43707285821437836,0.5151215828955173,0.047805558890104294],[6,0.31219489872455597,0.6868287771940231,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":61.989990234375,"type":"analyze"},{"outcomes":[["body",256,"invalid",8.75146484375,149],["body",8192,"exit",1174.885009765625,2574],["body",512,"valid",37.146728515625,270],["body",1024,"valid",59.243408203125,220],["body",256,"valid",434.1455078125,7766]],"time":1724.867919921875,"type":"sample"},{"compiler":[[11,8]],"inputs":[["0","1"],["(-.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 x y))","(-.f64 (log.f64 (+.f64 1 (exp.f64 y))) (*.f64 y x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 x y))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(-.f64 (log.f64 (+.f64 1 (exp.f64 y))) (*.f64 y x))","(-.f64 (log1p.f64 (exp.f64 y)) (*.f64 x y))"]],"symmetry":[[]],"time":58.54296875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 x y))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))"]],"time":18.031005859375,"type":"simplify"},{"compiler":[[18,10]],"time":0.34814453125,"type":"eval"},{"alts":[["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","next",0.2578125]],"compiler":[[9,6],[9,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.2578125],"time":0.7890625,"type":"prune"},{"compiler":[[19,6]],"locations":[["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))",0.0078125,true],["(log1p.f64 (exp.f64 x))",0.2460271365683597,true]],"time":4.73583984375,"type":"localize"},{"count":[[2,36]],"series":[["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","y","-inf",0.240966796875],["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","y","inf",0.283935546875],["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","y","0",1.964111328125],["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","x","-inf",0.27490234375],["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","x","inf",0.31787109375],["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","x","0",0.235107421875],["(log1p.f64 (exp.f64 x))","x","-inf",10.872802734375],["(log1p.f64 (exp.f64 x))","x","inf",15.9150390625],["(log1p.f64 (exp.f64 x))","x","0",0.4970703125]],"time":30.735107421875,"type":"series"},{"count":[[2,65]],"inputs":[["(log1p.f64 (exp.f64 x))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log1p.f64 (exp.f64 x)) 0) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 (exp.f64 x)) (*.f64 (log1p.f64 (exp.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (log1p.f64 (exp.f64 x))) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 (exp.f64 x)) (*.f64 0 (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) (pow.f64 (log1p.f64 (exp.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) (cbrt.f64 (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log1p.f64 (exp.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log1p.f64 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log1p.f64 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (exp.f64 x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 0) (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) (*.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) (*.f64 0 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x y)) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 x y)) (neg.f64 (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (log1p.f64 (exp.f64 x)) 0) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 x y) (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (*.f64 x y) (log1p.f64 (exp.f64 x))))) (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) (+.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 (*.f64 (*.f64 (log1p.f64 (exp.f64 x)) x) y)))) (-.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 2/3) (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 x y) (log1p.f64 (exp.f64 x)))) (neg.f64 (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 x y) (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x y) (log1p.f64 (exp.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (log1p.f64 (exp.f64 x))) (neg.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 x y) (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (*.f64 x y) (log1p.f64 (exp.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (neg.f64 x) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) x (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (neg.f64 (pow.f64 (*.f64 x y) 2/3)) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (pow.f64 (*.f64 x y) 2/3) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 x) (cbrt.f64 y)) (pow.f64 y 2/3) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 y) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) (cbrt.f64 (log1p.f64 (exp.f64 x))) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (log1p.f64 (exp.f64 x))) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 x y)) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 x y) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log1p.f64 (exp.f64 x)) 1 (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))))"]],"rules":[["egg-rr",47],["egg-rr",18]],"time":27.573974609375,"type":"rewrite"},{"count":[[101,82]],"inputs":[["(log.f64 2)","(+.f64 (*.f64 1/2 x) (log.f64 2))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (log.f64 2)))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/192 (pow.f64 x 4)) (log.f64 2))))","(log.f64 (+.f64 1 (exp.f64 x)))","(log.f64 (+.f64 1 (exp.f64 x)))","(log.f64 (+.f64 1 (exp.f64 x)))","(log.f64 (+.f64 1 (exp.f64 x)))","(log.f64 (+.f64 1 (exp.f64 x)))","(log.f64 (+.f64 1 (exp.f64 x)))","(log.f64 (+.f64 1 (exp.f64 x)))","(log.f64 (+.f64 1 (exp.f64 x)))","(log.f64 2)","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (+.f64 (*.f64 1/8 (pow.f64 x 2)) (log.f64 2)))","(+.f64 (*.f64 (-.f64 1/2 y) x) (+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 -1/192 (pow.f64 x 4)) (log.f64 2))))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(log.f64 (+.f64 1 (exp.f64 x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(log.f64 2)","(+.f64 (*.f64 1/2 x) (log.f64 2))","(fma.f64 1/2 x (log.f64 2))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (log.f64 2)))","(+.f64 (*.f64 x (+.f64 1/2 (*.f64 x 1/8))) (log.f64 2))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/192 (pow.f64 x 4)) (log.f64 2))))","(+.f64 (*.f64 x (+.f64 1/2 (*.f64 x 1/8))) (fma.f64 -1/192 (pow.f64 x 4) (log.f64 2)))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(log.f64 2)","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (+.f64 (*.f64 1/8 (pow.f64 x 2)) (log.f64 2)))","(+.f64 (*.f64 x (+.f64 (-.f64 1/2 y) (*.f64 x 1/8))) (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 -1/192 (pow.f64 x 4)) (log.f64 2))))","(+.f64 (*.f64 x (+.f64 (-.f64 1/2 y) (*.f64 x 1/8))) (fma.f64 -1/192 (pow.f64 x 4) (log.f64 2)))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))"]],"time":142.5400390625,"type":"simplify"},{"compiler":[[931,332]],"time":10.02099609375,"type":"eval"},{"alts":[["(fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))","next",0.25390625],["(-.f64 (log.f64 2) (*.f64 x y))","fresh",5.188743885642509],["(fma.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) (neg.f64 (*.f64 x y)))","fresh",0.78515625]],"compiler":[[9,6],[8,6],[16,10],[9,6],[8,6],[16,10]],"count":[[83,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[82,3],"picked":[1,0]}],"min-error":[0],"time":17.677978515625,"type":"prune"},{"compiler":[[18,6]],"locations":[["(fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))",0.00390625,true],["(log1p.f64 (exp.f64 x))",0.2460271365683597,false]],"time":4.948974609375,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))","y","-inf",0.35009765625],["(fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))","y","inf",0.303955078125],["(fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))","y","0",0.26904296875],["(fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))","x","-inf",0.239990234375],["(fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))","x","inf",0.341064453125],["(fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))","x","0",0.266845703125]],"time":1.85400390625,"type":"series"},{"count":[[1,39]],"inputs":[["(fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x y)) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 x y)) (neg.f64 (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log1p.f64 (exp.f64 x)) (-.f64 (*.f64 x y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 x y) (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 2/3) (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) (*.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (cbrt.f64 (log1p.f64 (exp.f64 x)))))) (+.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (cbrt.f64 (log1p.f64 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (*.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) (cbrt.f64 (neg.f64 (*.f64 x y)))))) (+.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) (cbrt.f64 (neg.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) (+.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) (cbrt.f64 (*.f64 x y))))) (-.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 x y) (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x y) (log1p.f64 (exp.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 x y) (log1p.f64 (exp.f64 x)))) (neg.f64 (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x y) (log1p.f64 (exp.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 x y) (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) (*.f64 (pow.f64 x 2/3) y) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 x) (cbrt.f64 y)) (pow.f64 y 2/3) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (neg.f64 x) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) (cbrt.f64 (log1p.f64 (exp.f64 x))) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 x y) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (log1p.f64 (exp.f64 x))) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 x y)) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 x y)) 1 (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log1p.f64 (exp.f64 x)) 1 (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))))))"]],"rules":[["egg-rr",39]],"time":36.99609375,"type":"rewrite"},{"count":[[63,51]],"inputs":[["(log.f64 2)","(+.f64 (log.f64 2) (*.f64 (+.f64 1/2 (*.f64 -1 y)) x))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (log.f64 2) (*.f64 (+.f64 1/2 (*.f64 -1 y)) x)))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 -1/192 (pow.f64 x 4)) (+.f64 (log.f64 2) (*.f64 (+.f64 1/2 (*.f64 -1 y)) x))))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(log.f64 (+.f64 1 (exp.f64 x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(log.f64 2)","(+.f64 (log.f64 2) (*.f64 (+.f64 1/2 (*.f64 -1 y)) x))","(fma.f64 x (-.f64 1/2 y) (log.f64 2))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (log.f64 2) (*.f64 (+.f64 1/2 (*.f64 -1 y)) x)))","(+.f64 (log.f64 2) (*.f64 x (+.f64 (*.f64 x 1/8) (-.f64 1/2 y))))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 -1/192 (pow.f64 x 4)) (+.f64 (log.f64 2) (*.f64 (+.f64 1/2 (*.f64 -1 y)) x))))","(+.f64 (fma.f64 (pow.f64 x 4) -1/192 (log.f64 2)) (*.f64 x (+.f64 (*.f64 x 1/8) (-.f64 1/2 y))))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))"]],"time":93.844970703125,"type":"simplify"},{"compiler":[[875,331]],"time":11.826904296875,"type":"eval"},{"alts":[["(fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))","done",0.25390625],["(fma.f64 (neg.f64 x) y (log.f64 2))","fresh",5.184837635642509],["(fma.f64 (neg.f64 x) y (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3))","next",0.78515625]],"compiler":[[9,6],[8,6],[12,9],[8,6],[12,9]],"count":[[79,3]],"kept":[{"done":[0,0],"fresh":[2,0],"new":[76,2],"picked":[1,1]}],"min-error":[0],"time":15.380126953125,"type":"prune"},{"compiler":[[32,12]],"locations":[["(fma.f64 (neg.f64 x) y (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3))",0.00390625,true],["(log1p.f64 (exp.f64 x))",0.2460271365683597,false],["(pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3)",0.71484375,true]],"time":7.505859375,"type":"localize"},{"count":[[2,36]],"series":[["(fma.f64 (neg.f64 x) y (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3))","y","-inf",0.173828125],["(fma.f64 (neg.f64 x) y (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3))","y","inf",0.196044921875],["(fma.f64 (neg.f64 x) y (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3))","y","0",0.841064453125],["(fma.f64 (neg.f64 x) y (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3))","x","-inf",0.18310546875],["(fma.f64 (neg.f64 x) y (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3))","x","inf",0.197021484375],["(fma.f64 (neg.f64 x) y (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3))","x","0",0.617919921875],["(pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3)","x","-inf",1.364013671875],["(pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3)","x","inf",1.576171875],["(pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3)","x","0",1.950927734375]],"time":7.2861328125,"type":"series"},{"count":[[2,62]],"inputs":[["(pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3)","(fma.f64 (neg.f64 x) y (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 (exp.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log1p.f64 (exp.f64 x)))) (pow.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) 4/3) (cbrt.f64 (cbrt.f64 (log1p.f64 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) (pow.f64 (log1p.f64 (exp.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) (cbrt.f64 (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 7/3) (cbrt.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2/3)) (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log1p.f64 (exp.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log1p.f64 (exp.f64 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log1p.f64 (exp.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log1p.f64 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log1p.f64 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (exp.f64 x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x y)) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 x y)) (neg.f64 (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 x y) (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 2/3) (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 x y) (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x y) (log1p.f64 (exp.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (*.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) (cbrt.f64 (neg.f64 (*.f64 x y)))))) (+.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) (cbrt.f64 (neg.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) (*.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (cbrt.f64 (log1p.f64 (exp.f64 x)))))) (+.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (cbrt.f64 (log1p.f64 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) (+.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) (cbrt.f64 (*.f64 x y))))) (-.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x y) (log1p.f64 (exp.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 x y) (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (log1p.f64 (exp.f64 x)))) (pow.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) 4/3) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) (cbrt.f64 (log1p.f64 (exp.f64 x))) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 7/3) (cbrt.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2/3)) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 x) (cbrt.f64 y)) (pow.f64 y 2/3) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (neg.f64 x) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) (*.f64 (pow.f64 x 2/3) y) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (log1p.f64 (exp.f64 x))) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 x y) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log1p.f64 (exp.f64 x)) 1 (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 x y)) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 x y)) 1 (log1p.f64 (exp.f64 x)))))))"]],"rules":[["egg-rr",39],["egg-rr",23]],"time":46.412841796875,"type":"rewrite"},{"count":[[98,81]],"inputs":[["(*.f64 (pow.f64 1 1/3) (log.f64 2))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 2)) (*.f64 (+.f64 (*.f64 1/3 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)) (*.f64 1/6 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9))) x))","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 2)) 1/3) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 2)) 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/36 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/18 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (pow.f64 x 2)) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 2)) (*.f64 (+.f64 (*.f64 1/3 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)) (*.f64 1/6 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9))) x)))","(+.f64 (*.f64 (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 2)) 1/9) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 2)) 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/36 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 4)) 1/9))))) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 5)) 1/9) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 5)) 1/9) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/216 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 2)) 1/3))))) (*.f64 (pow.f64 (*.f64 1 (log.f64 2)) 1/3) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 8)) 1/9) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 2)) 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 5)) 1/9) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/216 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 2)) 1/3)))))))))) (pow.f64 x 3)) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 2)) 1/3) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 2)) 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/36 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/18 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (pow.f64 x 2)) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 2)) (*.f64 (+.f64 (*.f64 1/3 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)) (*.f64 1/6 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9))) x))))","(*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x))))","(*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x))))","(*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x))))","(*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x))))","(*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x))))","(*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x))))","(*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x))))","(*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x))))","(*.f64 (pow.f64 1 1/3) (log.f64 2))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 2)) (*.f64 (+.f64 (*.f64 1/3 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)) (+.f64 (*.f64 -1 y) (*.f64 1/6 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)))) x))","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 2)) 1/3) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 2)) 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/36 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/18 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (pow.f64 x 2)) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 2)) (*.f64 (+.f64 (*.f64 1/3 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)) (+.f64 (*.f64 -1 y) (*.f64 1/6 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)))) x)))","(+.f64 (*.f64 (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 2)) 1/9) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 2)) 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/36 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 4)) 1/9))))) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 5)) 1/9) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 5)) 1/9) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/216 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 2)) 1/3))))) (*.f64 (pow.f64 (*.f64 1 (log.f64 2)) 1/3) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 8)) 1/9) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 2)) 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 5)) 1/9) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/216 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 2)) 1/3)))))))))) (pow.f64 x 3)) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 2)) 1/3) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 2)) 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/36 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/18 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (pow.f64 x 2)) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 2)) (*.f64 (+.f64 (*.f64 1/3 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)) (+.f64 (*.f64 -1 y) (*.f64 1/6 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)))) x))))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x))))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 1 1/3) (log.f64 2))","(log.f64 2)","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 2)) (*.f64 (+.f64 (*.f64 1/3 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)) (*.f64 1/6 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9))) x))","(fma.f64 x (*.f64 (pow.f64 (pow.f64 (log.f64 2) 4) 1/9) 1/2) (log.f64 2))","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 2)) 1/3) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 2)) 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/36 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/18 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (pow.f64 x 2)) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 2)) (*.f64 (+.f64 (*.f64 1/3 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)) (*.f64 1/6 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9))) x)))","(fma.f64 (fma.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 2))) (+.f64 1/8 (*.f64 -1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (*.f64 1/36 (pow.f64 (pow.f64 (log.f64 2) -4) 1/9))) (cbrt.f64 (log.f64 2)) (fma.f64 1/3 (+.f64 1/8 (*.f64 -1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))) (*.f64 1/18 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (*.f64 x x) (fma.f64 x (*.f64 (pow.f64 (pow.f64 (log.f64 2) 4) 1/9) 1/2) (log.f64 2)))","(+.f64 (*.f64 (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 2)) 1/9) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 2)) 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/36 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 4)) 1/9))))) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 5)) 1/9) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 5)) 1/9) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/216 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 2)) 1/3))))) (*.f64 (pow.f64 (*.f64 1 (log.f64 2)) 1/3) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 8)) 1/9) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 2)) 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 5)) 1/9) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/216 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 2)) 1/3)))))))))) (pow.f64 x 3)) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 2)) 1/3) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 2)) 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/36 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/18 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (pow.f64 x 2)) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 2)) (*.f64 (+.f64 (*.f64 1/3 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)) (*.f64 1/6 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9))) x))))","(fma.f64 (fma.f64 (*.f64 1/6 (pow.f64 (pow.f64 (log.f64 2) -2) 1/9)) (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 2))) (+.f64 1/8 (*.f64 -1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (*.f64 1/36 (pow.f64 (pow.f64 (log.f64 2) -4) 1/9))) (fma.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 2) -5) 1/9) (+.f64 1/8 (*.f64 -1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) 1/9 (fma.f64 -1/3 (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (log.f64 2) -5) 1/9) (+.f64 1/8 (*.f64 -1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (*.f64 1/216 (cbrt.f64 (pow.f64 (log.f64 2) -2)))) (*.f64 (cbrt.f64 (log.f64 2)) (fma.f64 (*.f64 -2/3 (cbrt.f64 (/.f64 1 (log.f64 2)))) (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (log.f64 2) -5) 1/9) (+.f64 1/8 (*.f64 -1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (*.f64 1/216 (cbrt.f64 (pow.f64 (log.f64 2) -2)))) (*.f64 1/9 (*.f64 (pow.f64 (pow.f64 (log.f64 2) -8) 1/9) (+.f64 1/8 (*.f64 -1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))))))))) (pow.f64 x 3) (fma.f64 (fma.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 2))) (+.f64 1/8 (*.f64 -1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (*.f64 1/36 (pow.f64 (pow.f64 (log.f64 2) -4) 1/9))) (cbrt.f64 (log.f64 2)) (fma.f64 1/3 (+.f64 1/8 (*.f64 -1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))) (*.f64 1/18 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (*.f64 x x) (fma.f64 x (*.f64 (pow.f64 (pow.f64 (log.f64 2) 4) 1/9) 1/2) (log.f64 2))))","(*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x))))","(log1p.f64 (exp.f64 x))","(*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x))))","(log1p.f64 (exp.f64 x))","(*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x))))","(log1p.f64 (exp.f64 x))","(*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x))))","(log1p.f64 (exp.f64 x))","(*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x))))","(log1p.f64 (exp.f64 x))","(*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x))))","(log1p.f64 (exp.f64 x))","(*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x))))","(log1p.f64 (exp.f64 x))","(*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x))))","(log1p.f64 (exp.f64 x))","(*.f64 (pow.f64 1 1/3) (log.f64 2))","(log.f64 2)","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 2)) (*.f64 (+.f64 (*.f64 1/3 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)) (+.f64 (*.f64 -1 y) (*.f64 1/6 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)))) x))","(fma.f64 (+.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 2) 4) 1/9) 1/2) (neg.f64 y)) x (log.f64 2))","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 2)) 1/3) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 2)) 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/36 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/18 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (pow.f64 x 2)) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 2)) (*.f64 (+.f64 (*.f64 1/3 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)) (+.f64 (*.f64 -1 y) (*.f64 1/6 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)))) x)))","(fma.f64 (fma.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 2))) (+.f64 1/8 (*.f64 -1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (*.f64 1/36 (pow.f64 (pow.f64 (log.f64 2) -4) 1/9))) (cbrt.f64 (log.f64 2)) (fma.f64 1/3 (+.f64 1/8 (*.f64 -1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))) (*.f64 1/18 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (*.f64 x x) (fma.f64 (+.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 2) 4) 1/9) 1/2) (neg.f64 y)) x (log.f64 2)))","(+.f64 (*.f64 (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 2)) 1/9) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 2)) 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/36 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 4)) 1/9))))) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 5)) 1/9) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 5)) 1/9) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/216 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 2)) 1/3))))) (*.f64 (pow.f64 (*.f64 1 (log.f64 2)) 1/3) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 8)) 1/9) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 2)) 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 5)) 1/9) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/216 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 2)) 1/3)))))))))) (pow.f64 x 3)) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 2)) 1/3) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 2)) 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/36 (pow.f64 (/.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (-.f64 1/8 (*.f64 1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))))) (*.f64 1/18 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (pow.f64 x 2)) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 2)) (*.f64 (+.f64 (*.f64 1/3 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)) (+.f64 (*.f64 -1 y) (*.f64 1/6 (pow.f64 (*.f64 1 (pow.f64 (log.f64 2) 4)) 1/9)))) x))))","(fma.f64 (pow.f64 x 3) (fma.f64 (*.f64 1/6 (pow.f64 (pow.f64 (log.f64 2) -2) 1/9)) (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 2))) (+.f64 1/8 (*.f64 -1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (*.f64 1/36 (pow.f64 (pow.f64 (log.f64 2) -4) 1/9))) (fma.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 2) -5) 1/9) (+.f64 1/8 (*.f64 -1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) 1/9 (fma.f64 -1/3 (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (log.f64 2) -5) 1/9) (+.f64 1/8 (*.f64 -1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (*.f64 1/216 (cbrt.f64 (pow.f64 (log.f64 2) -2)))) (*.f64 (cbrt.f64 (log.f64 2)) (fma.f64 (*.f64 -2/3 (cbrt.f64 (/.f64 1 (log.f64 2)))) (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (log.f64 2) -5) 1/9) (+.f64 1/8 (*.f64 -1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (*.f64 1/216 (cbrt.f64 (pow.f64 (log.f64 2) -2)))) (*.f64 1/9 (*.f64 (pow.f64 (pow.f64 (log.f64 2) -8) 1/9) (+.f64 1/8 (*.f64 -1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))))))))) (fma.f64 (fma.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 2))) (+.f64 1/8 (*.f64 -1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (*.f64 1/36 (pow.f64 (pow.f64 (log.f64 2) -4) 1/9))) (cbrt.f64 (log.f64 2)) (fma.f64 1/3 (+.f64 1/8 (*.f64 -1/12 (pow.f64 (/.f64 1 (log.f64 2)) 1/9))) (*.f64 1/18 (pow.f64 (/.f64 1 (log.f64 2)) 1/9)))) (*.f64 x x) (fma.f64 (+.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 2) 4) 1/9) 1/2) (neg.f64 y)) x (log.f64 2))))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x))))","(log1p.f64 (exp.f64 x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 -1 (*.f64 y x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))"]],"time":124.922119140625,"type":"simplify"},{"compiler":[[2586,1819]],"time":33.56201171875,"type":"eval"},{"alts":[["(fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))","done",0.25390625],["(fma.f64 (neg.f64 x) y (log.f64 2))","next",5.184837635642509],["(fma.f64 (neg.f64 x) y (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3))","done",0.78515625]],"compiler":[[9,6],[8,6],[12,9],[8,6]],"count":[[109,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[106,0],"picked":[1,1]}],"min-error":[0],"time":23.989013671875,"type":"prune"},{"compiler":[[15,9]],"locations":[["(fma.f64 (neg.f64 x) y (log.f64 2))",0.00390625,true]],"time":5.101806640625,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 (neg.f64 x) y (log.f64 2))","y","-inf",0.158935546875],["(fma.f64 (neg.f64 x) y (log.f64 2))","y","inf",0.203857421875],["(fma.f64 (neg.f64 x) y (log.f64 2))","y","0",0.8779296875],["(fma.f64 (neg.f64 x) y (log.f64 2))","x","-inf",0.178955078125],["(fma.f64 (neg.f64 x) y (log.f64 2))","x","inf",0.177978515625],["(fma.f64 (neg.f64 x) y (log.f64 2))","x","0",1.860107421875]],"time":3.5400390625,"type":"series"},{"count":[[1,43]],"inputs":[["(fma.f64 (neg.f64 x) y (log.f64 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x y)) (log.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 2) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (neg.f64 x) y (log.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 x) y (log.f64 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 2) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (-.f64 9 (fma.f64 (neg.f64 x) y (log.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 2) (-.f64 (*.f64 x y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 x y)) (log.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (*.f64 x y) (log.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 3 (fma.f64 (neg.f64 x) y (log.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 1 (fma.f64 (neg.f64 x) y (log.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (neg.f64 x) y (log.f64 2))) (pow.f64 (fma.f64 (neg.f64 x) y (log.f64 2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (neg.f64 x) y (log.f64 2)) 2/3) (cbrt.f64 (fma.f64 (neg.f64 x) y (log.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (log.f64 2) 2/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (*.f64 (cbrt.f64 (log.f64 2)) (cbrt.f64 (neg.f64 (*.f64 x y)))))) (+.f64 (cbrt.f64 (log.f64 2)) (cbrt.f64 (neg.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (-.f64 (pow.f64 (log.f64 2) 2/3) (*.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (cbrt.f64 (log.f64 2))))) (+.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (cbrt.f64 (log.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (fma.f64 (neg.f64 x) y (log.f64 2)) 2/3) (*.f64 0 (cbrt.f64 (fma.f64 (neg.f64 x) y (log.f64 2)))))) (+.f64 0 (cbrt.f64 (fma.f64 (neg.f64 x) y (log.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (log.f64 2) 2/3) (+.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 (cbrt.f64 (log.f64 2)) (cbrt.f64 (*.f64 x y))))) (-.f64 (cbrt.f64 (log.f64 2)) (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 x y) (log.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 x y) (log.f64 1/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (neg.f64 x) y (log.f64 2)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 x y) (log.f64 1/2))) (neg.f64 (pow.f64 (fma.f64 (neg.f64 x) y (log.f64 2)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (neg.f64 x) y (log.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 x) y (log.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x y) (log.f64 1/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 x) y (log.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (neg.f64 x) y (log.f64 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 x) y (log.f64 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 x) y (log.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 x y) (log.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (neg.f64 x) y (log.f64 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) y (log.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) (*.f64 (pow.f64 x 2/3) y) (log.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (neg.f64 x) (log.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 x) (cbrt.f64 y)) (pow.f64 y 2/3) (log.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (log.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 x y) (log.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (log.f64 1/2) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 2)) (pow.f64 (log.f64 2) 2/3) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (log.f64 2) 2/3) (cbrt.f64 (log.f64 2)) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 x y)) (log.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 2) 1 (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log.f64 2) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 x y)) 1 (log.f64 2))))))"]],"rules":[["egg-rr",43]],"time":35.110107421875,"type":"rewrite"},{"count":[[67,48]],"inputs":[["(log.f64 2)","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(log.f64 2)","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(log.f64 2)","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(fma.f64 (neg.f64 y) x (log.f64 2))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(fma.f64 (neg.f64 y) x (log.f64 2))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(fma.f64 (neg.f64 y) x (log.f64 2))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(fma.f64 (neg.f64 y) x (log.f64 2))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(fma.f64 (neg.f64 y) x (log.f64 2))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(fma.f64 (neg.f64 y) x (log.f64 2))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(fma.f64 (neg.f64 y) x (log.f64 2))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(fma.f64 (neg.f64 y) x (log.f64 2))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(fma.f64 (neg.f64 y) x (log.f64 2))","(log.f64 2)","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(fma.f64 (neg.f64 y) x (log.f64 2))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(fma.f64 (neg.f64 y) x (log.f64 2))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(fma.f64 (neg.f64 y) x (log.f64 2))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(fma.f64 (neg.f64 y) x (log.f64 2))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(fma.f64 (neg.f64 y) x (log.f64 2))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(fma.f64 (neg.f64 y) x (log.f64 2))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(fma.f64 (neg.f64 y) x (log.f64 2))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(fma.f64 (neg.f64 y) x (log.f64 2))","(+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x)))","(fma.f64 (neg.f64 y) x (log.f64 2))"]],"time":109.31494140625,"type":"simplify"},{"compiler":[[506,311]],"time":8.06103515625,"type":"eval"},{"alts":[["(fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))","done",0.25390625],["(fma.f64 (neg.f64 x) y (log.f64 2))","done",5.184837635642509],["(fma.f64 (neg.f64 x) y (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3))","done",0.78515625]],"compiler":[[9,6],[8,6],[12,9]],"count":[[51,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[48,0],"picked":[1,1]}],"min-error":[0],"time":7.77099609375,"type":"prune"},{"accuracy":[0.25390625],"baseline":[0.25390625],"branch":[["x",0.25390625,1],["y",0.25390625,1],["(-.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 x y))",0.25390625,1]],"compiler":[[3,2],[3,2],[11,8],[61,26]],"count":[[7,1]],"inputs":[["(fma.f64 (neg.f64 x) y (log.f64 2))","(fma.f64 (neg.f64 x) y (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3))","(fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))","(-.f64 (log.f64 2) (*.f64 x y))","(fma.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) (pow.f64 (log1p.f64 (exp.f64 x)) 2/3) (neg.f64 (*.f64 x y)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(-.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 x y))"]],"link":["."],"name":["Logistic regression 2"],"oracle":[5.969993885642509],"outputs":[["(fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))"]],"time":13.926025390625,"times":[["x",3.550048828125],["y",6.221923828125],["(-.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 x y))",2.81201171875]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (neg.f64 x) y (log1p.f64 (exp.f64 x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))"]],"stop":[["done",1]],"time":35.118896484375,"type":"simplify"},{"time":0.01318359375,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":8.307861328125,"type":"end"}]
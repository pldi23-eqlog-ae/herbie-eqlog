[{"compiler":[[15,12]],"method":["search"],"sampling":[[12,0.34341438859701157,0.5668288629967719,0.0897567484062165],[11,0.32780464366078377,0.6009751800447702,0.07122017629444599],[10,0.31219489872455597,0.6282922336831689,0.05951286759227514],[9,0.2809754088521004,0.6868287771940231,0.032195813953876495],[8,0.24975591897964478,0.7336580120027065,0.016586069017648697],[7,0.18731693923473358,0.8117067366838455,0.0009763240814208984],[6,0.12487795948982239,0.8741457164287567,0.0009763240814208984],[5,0.0,0.9990236759185791,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":154.320068359375,"type":"analyze"},{"outcomes":[["body",256,"invalid",25.91748046875,363],["body",1024,"valid",624.83447265625,2386],["body",512,"valid",183.70166015625,1179],["body",2048,"valid",6.282958984375,12],["body",256,"valid",363.031494140625,4679]],"time":1213.60302734375,"type":"sample"},{"compiler":[[14,11]],"inputs":[["0","1"],["(+.f64 (neg.f64 (*.f64 x (/.f64 1 (tan.f64 B)))) (/.f64 1 (sin.f64 B)))","(+.f64 (neg.f64 (*.f64 B (/.f64 1 (tan.f64 x)))) (/.f64 1 (sin.f64 x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 (neg.f64 (*.f64 x (/.f64 1 (tan.f64 B)))) (/.f64 1 (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))","(+.f64 (neg.f64 (*.f64 B (/.f64 1 (tan.f64 x)))) (/.f64 1 (sin.f64 x)))","(-.f64 (/.f64 1 (sin.f64 x)) (/.f64 B (tan.f64 x)))"]],"symmetry":[[]],"time":63.35498046875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (neg.f64 (*.f64 x (/.f64 1 (tan.f64 B)))) (/.f64 1 (sin.f64 B)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (neg.f64 (*.f64 x (/.f64 1 (tan.f64 B)))) (/.f64 1 (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))"]],"time":20.153076171875,"type":"simplify"},{"compiler":[[23,15]],"time":0.40380859375,"type":"eval"},{"alts":[["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))","next",0.236660009768442],["(+.f64 (neg.f64 (*.f64 x (/.f64 1 (tan.f64 B)))) (/.f64 1 (sin.f64 B)))","fresh",0.24285126953688405]],"compiler":[[11,8],[14,11],[11,8],[14,11]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.18978500976844204],"time":1.3740234375,"type":"prune"},{"compiler":[[26,11]],"locations":[["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))",0.03125,true],["(/.f64 1 (sin.f64 B))",0.140625,true],["(/.f64 x (tan.f64 B))",0.1640625,true],["(tan.f64 B)",0.26400375976844204,true]],"time":7.985107421875,"type":"localize"},{"count":[[4,64]],"series":[["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))","x","-inf",0.18896484375],["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))","x","inf",0.2119140625],["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))","x","0",0.2939453125],["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))","B","-inf",0.224853515625],["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))","B","inf",0.2080078125],["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))","B","0",0.343017578125],["(/.f64 1 (sin.f64 B))","B","-inf",0.347900390625],["(/.f64 1 (sin.f64 B))","B","inf",0.35791015625],["(/.f64 1 (sin.f64 B))","B","0",0.248046875],["(/.f64 x (tan.f64 B))","B","-inf",0.43798828125],["(/.f64 x (tan.f64 B))","B","inf",0.445068359375],["(/.f64 x (tan.f64 B))","B","0",0.4140625],["(/.f64 x (tan.f64 B))","x","-inf",0.83984375],["(/.f64 x (tan.f64 B))","x","inf",0.552978515625],["(/.f64 x (tan.f64 B))","x","0",1.256103515625],["(tan.f64 B)","B","-inf",0.404052734375],["(tan.f64 B)","B","inf",0.4501953125],["(tan.f64 B)","B","0",0.413818359375]],"time":7.869873046875,"type":"series"},{"count":[[4,200]],"inputs":[["(tan.f64 B)","(/.f64 x (tan.f64 B))","(/.f64 1 (sin.f64 B))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 B) (*.f64 (tan.f64 B) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (tan.f64 B) 0) (tan.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (tan.f64 B)) 0) (tan.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 B) (*.f64 0 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (tan.f64 B)) (tan.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (neg.f64 (tan.f64 B))) (tan.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (cos.f64 B))) (neg.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 B) (/.f64 1 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 B) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (tan.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 B)) (sin.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (tan.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 B)) (/.f64 1 (neg.f64 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 B)) (cbrt.f64 (pow.f64 (tan.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (tan.f64 B) 2)) (cbrt.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 B) (cos.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 B)) (neg.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (tan.f64 B) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (tan.f64 B) 2)) (cbrt.f64 (sin.f64 B))) (cbrt.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 B)) (cbrt.f64 (pow.f64 (tan.f64 B) 2))) (cbrt.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 B) (cbrt.f64 (cos.f64 B))) (pow.f64 (cbrt.f64 (cos.f64 B)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (tan.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 B)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 B) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 B) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 B)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 B)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 B) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (neg.f64 (pow.f64 (tan.f64 B) 3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 B)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (tan.f64 B)) (*.f64 (/.f64 x (tan.f64 B)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x (tan.f64 B)) 0) (/.f64 x (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (tan.f64 B)) (*.f64 0 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 x (tan.f64 B))) (/.f64 x (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (tan.f64 B))) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (cbrt.f64 (pow.f64 (/.f64 x (tan.f64 B)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x (tan.f64 B)) 2)) (cbrt.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (/.f64 (cbrt.f64 (*.f64 x x)) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 -1 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (tan.f64 B)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (tan.f64 B) (neg.f64 1/3)) (/.f64 x (cbrt.f64 (pow.f64 (tan.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (tan.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x x)) (tan.f64 B)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 x) (tan.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (tan.f64 B)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (pow.f64 (tan.f64 B) 2))) (pow.f64 (tan.f64 B) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (tan.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (neg.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (cbrt.f64 (pow.f64 (tan.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (cbrt.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 (tan.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (tan.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (tan.f64 B) (neg.f64 1/3)) x) (cbrt.f64 (pow.f64 (tan.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (tan.f64 B)) 2)) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (neg.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (tan.f64 B)) 2)) (cbrt.f64 x)) (cbrt.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (pow.f64 (tan.f64 B) 2))) (cbrt.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (pow.f64 (/.f64 x (tan.f64 B)) 2))) (cbrt.f64 (neg.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (pow.f64 (/.f64 x (tan.f64 B)) 2))) (cbrt.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) 1) (cbrt.f64 (pow.f64 (tan.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (sin.f64 B)) (/.f64 1 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x -1) (neg.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) 1) (cbrt.f64 (pow.f64 (tan.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (pow.f64 (cbrt.f64 (cbrt.f64 (tan.f64 B))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (tan.f64 B))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (cbrt.f64 (tan.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x (cbrt.f64 (tan.f64 B)))) (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (tan.f64 B)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (tan.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (tan.f64 B)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 1 (sin.f64 B)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (sin.f64 B)) 0) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (sin.f64 B)) (*.f64 0 (/.f64 1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 1 (sin.f64 B))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (sin.f64 B)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (sin.f64 B) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (pow.f64 (sin.f64 B) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (cbrt.f64 (/.f64 -1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (sin.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (sin.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (sin.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (sin.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) -1) (cbrt.f64 (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) -1) (cbrt.f64 (pow.f64 (sin.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)))) (cbrt.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (cbrt.f64 (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 B))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 B))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (neg.f64 (sin.f64 B))) (neg.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 B) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 B) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (sin.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 B) 3) (neg.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 B)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 B) -3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (sin.f64 B)) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (*.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 0) (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (*.f64 0 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (tan.f64 B) (*.f64 (sin.f64 B) (tan.f64 B))) (neg.f64 (/.f64 (*.f64 (sin.f64 B) x) (*.f64 (sin.f64 B) (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (tan.f64 B) (*.f64 (sin.f64 B) (tan.f64 B))) (/.f64 (*.f64 (sin.f64 B) x) (*.f64 (sin.f64 B) (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 -1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 0) (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 -1 (sin.f64 B)) (/.f64 (neg.f64 x) (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 1 (sin.f64 B)) 0) (/.f64 x (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 -1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 -1 (sin.f64 B))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (/.f64 -1 (sin.f64 B)) (/.f64 (neg.f64 x) (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 -1 (sin.f64 B))))) (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)) (sin.f64 B)) (/.f64 1 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (+.f64 (cbrt.f64 (pow.f64 (/.f64 x (tan.f64 B)) 2)) (cbrt.f64 (/.f64 (/.f64 x (tan.f64 B)) (sin.f64 B))))) (-.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (cbrt.f64 (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 2)) (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sin.f64 B) x (neg.f64 (tan.f64 B))) (/.f64 1 (neg.f64 (*.f64 (sin.f64 B) (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)) (/.f64 1 (*.f64 (sin.f64 B) (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 (sin.f64 B) (tan.f64 B))) (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 -1 (sin.f64 B)))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)) (sin.f64 B)) (sin.f64 B)) (/.f64 1 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)) (cbrt.f64 (*.f64 (sin.f64 B) (tan.f64 B)))) (pow.f64 (cbrt.f64 (*.f64 (sin.f64 B) (tan.f64 B))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)) (cbrt.f64 (sin.f64 B))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) (cbrt.f64 (pow.f64 (sin.f64 B) 2))) (*.f64 (tan.f64 B) (pow.f64 (sin.f64 B) (neg.f64 1/3)))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) x) (*.f64 (neg.f64 (tan.f64 B)) (pow.f64 (sin.f64 B) (neg.f64 1/3)))) (*.f64 (neg.f64 (tan.f64 B)) (cbrt.f64 (pow.f64 (sin.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (neg.f64 (tan.f64 B))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (neg.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (tan.f64 B)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (neg.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (tan.f64 B) (*.f64 (sin.f64 B) (tan.f64 B))) (*.f64 (*.f64 (sin.f64 B) (tan.f64 B)) (*.f64 (sin.f64 B) x))) (*.f64 (*.f64 (sin.f64 B) (tan.f64 B)) (*.f64 (sin.f64 B) (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 B) 2))) (*.f64 (neg.f64 (sin.f64 B)) (/.f64 x (cbrt.f64 (tan.f64 B))))) (*.f64 (neg.f64 (sin.f64 B)) (cbrt.f64 (pow.f64 (tan.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (tan.f64 B)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (tan.f64 B) 2))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (/.f64 x (cbrt.f64 (tan.f64 B))))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (cbrt.f64 (pow.f64 (tan.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (neg.f64 (tan.f64 B))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (neg.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (neg.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 (tan.f64 B) 2)) (*.f64 (sin.f64 B) (/.f64 x (cbrt.f64 (tan.f64 B))))) (*.f64 (sin.f64 B) (cbrt.f64 (pow.f64 (tan.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)) (sin.f64 B)) (tan.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sin.f64 B) x (neg.f64 (tan.f64 B))) (neg.f64 (*.f64 (sin.f64 B) (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 2)) (cbrt.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)))) (cbrt.f64 (*.f64 (sin.f64 B) (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (sin.f64 B) x (neg.f64 (tan.f64 B))) 1) (neg.f64 (*.f64 (sin.f64 B) (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)) (sin.f64 B)) 1) (tan.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B))) (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 2))) (cbrt.f64 (*.f64 (sin.f64 B) (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)) (sin.f64 B)) (cbrt.f64 (tan.f64 B))) (cbrt.f64 (pow.f64 (tan.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)) (sin.f64 B)) (cbrt.f64 (pow.f64 (tan.f64 B) 2))) (cbrt.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)) (sin.f64 B)) -1) (neg.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)) (*.f64 (sin.f64 B) (cbrt.f64 (tan.f64 B)))) (cbrt.f64 (pow.f64 (tan.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)) (tan.f64 B)) (sin.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)) (neg.f64 (sin.f64 B))) (neg.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (sin.f64 B) x (neg.f64 (tan.f64 B))) (sin.f64 B)) (neg.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)) (sin.f64 B))) (neg.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)) (*.f64 (sin.f64 B) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 -1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 -1 (sin.f64 B))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 -1 (sin.f64 B)) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (pow.f64 (sin.f64 B) (neg.f64 1/3)) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 1 (tan.f64 B)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 -1 (tan.f64 B)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 x (tan.f64 B)) 2))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (neg.f64 x) (tan.f64 B))) (cbrt.f64 (pow.f64 (/.f64 x (tan.f64 B)) 2)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (sin.f64 B)) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sin.f64 B)) 1 (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))))"]],"rules":[["egg-rr",83],["egg-rr",37],["egg-rr",46],["egg-rr",34]],"time":39.301025390625,"type":"rewrite"},{"count":[[264,234]],"inputs":[["B","(+.f64 (*.f64 1/3 (pow.f64 B 3)) B)","(+.f64 (*.f64 1/3 (pow.f64 B 3)) (+.f64 (*.f64 2/15 (pow.f64 B 5)) B))","(+.f64 (*.f64 1/3 (pow.f64 B 3)) (+.f64 (*.f64 2/15 (pow.f64 B 5)) (+.f64 (*.f64 17/315 (pow.f64 B 7)) B)))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 x B)","(+.f64 (/.f64 x B) (*.f64 -1/3 (*.f64 B x)))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x)) (pow.f64 B 3))) (+.f64 (/.f64 x B) (*.f64 -1/3 (*.f64 B x))))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 17/315 x) (+.f64 (*.f64 -2/45 x) (*.f64 -1/3 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x))))) (pow.f64 B 5))) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x)) (pow.f64 B 3))) (+.f64 (/.f64 x B) (*.f64 -1/3 (*.f64 B x)))))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 1 B)","(+.f64 (*.f64 1/6 B) (/.f64 1 B))","(+.f64 (*.f64 7/360 (pow.f64 B 3)) (+.f64 (*.f64 1/6 B) (/.f64 1 B)))","(+.f64 (*.f64 7/360 (pow.f64 B 3)) (+.f64 (*.f64 1/6 B) (+.f64 (*.f64 31/15120 (pow.f64 B 5)) (/.f64 1 B))))","(/.f64 (-.f64 1 x) B)","(-.f64 (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (/.f64 1 B)) (/.f64 x B))","(-.f64 (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (+.f64 (*.f64 (+.f64 7/360 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x))) (pow.f64 B 3)) (/.f64 1 B))) (/.f64 x B))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 17/315 x) (+.f64 31/15120 (+.f64 (*.f64 -2/45 x) (*.f64 -1/3 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x)))))) (pow.f64 B 5)) (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (+.f64 (*.f64 (+.f64 7/360 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x))) (pow.f64 B 3)) (/.f64 1 B)))) (/.f64 x B))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 1 (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))"]],"method":["egg-herbie"],"outputs":[["B","(+.f64 (*.f64 1/3 (pow.f64 B 3)) B)","(fma.f64 1/3 (pow.f64 B 3) B)","(+.f64 (*.f64 1/3 (pow.f64 B 3)) (+.f64 (*.f64 2/15 (pow.f64 B 5)) B))","(fma.f64 1/3 (pow.f64 B 3) (fma.f64 2/15 (pow.f64 B 5) B))","(+.f64 (*.f64 1/3 (pow.f64 B 3)) (+.f64 (*.f64 2/15 (pow.f64 B 5)) (+.f64 (*.f64 17/315 (pow.f64 B 7)) B)))","(fma.f64 (pow.f64 B 3) 1/3 (fma.f64 (pow.f64 B 5) 2/15 (fma.f64 17/315 (pow.f64 B 7) B)))","(/.f64 (sin.f64 B) (cos.f64 B))","(tan.f64 B)","(/.f64 (sin.f64 B) (cos.f64 B))","(tan.f64 B)","(/.f64 (sin.f64 B) (cos.f64 B))","(tan.f64 B)","(/.f64 (sin.f64 B) (cos.f64 B))","(tan.f64 B)","(/.f64 (sin.f64 B) (cos.f64 B))","(tan.f64 B)","(/.f64 (sin.f64 B) (cos.f64 B))","(tan.f64 B)","(/.f64 (sin.f64 B) (cos.f64 B))","(tan.f64 B)","(/.f64 (sin.f64 B) (cos.f64 B))","(tan.f64 B)","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 x B)","(+.f64 (/.f64 x B) (*.f64 -1/3 (*.f64 B x)))","(fma.f64 (*.f64 B x) -1/3 (/.f64 x B))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x)) (pow.f64 B 3))) (+.f64 (/.f64 x B) (*.f64 -1/3 (*.f64 B x))))","(fma.f64 (neg.f64 (*.f64 x 1/45)) (pow.f64 B 3) (fma.f64 (*.f64 B x) -1/3 (/.f64 x B)))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 17/315 x) (+.f64 (*.f64 -2/45 x) (*.f64 -1/3 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x))))) (pow.f64 B 5))) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x)) (pow.f64 B 3))) (+.f64 (/.f64 x B) (*.f64 -1/3 (*.f64 B x)))))","(fma.f64 (neg.f64 (+.f64 (*.f64 x (+.f64 17/315 -2/45)) (*.f64 -1/3 (*.f64 x 1/45)))) (pow.f64 B 5) (fma.f64 (neg.f64 (*.f64 x 1/45)) (pow.f64 B 3) (fma.f64 (*.f64 B x) -1/3 (/.f64 x B))))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 1 B)","(+.f64 (*.f64 1/6 B) (/.f64 1 B))","(fma.f64 1/6 B (/.f64 1 B))","(+.f64 (*.f64 7/360 (pow.f64 B 3)) (+.f64 (*.f64 1/6 B) (/.f64 1 B)))","(fma.f64 (pow.f64 B 3) 7/360 (fma.f64 1/6 B (/.f64 1 B)))","(+.f64 (*.f64 7/360 (pow.f64 B 3)) (+.f64 (*.f64 1/6 B) (+.f64 (*.f64 31/15120 (pow.f64 B 5)) (/.f64 1 B))))","(fma.f64 (pow.f64 B 3) 7/360 (fma.f64 B 1/6 (fma.f64 31/15120 (pow.f64 B 5) (/.f64 1 B))))","(/.f64 (-.f64 1 x) B)","(-.f64 (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (/.f64 1 B)) (/.f64 x B))","(fma.f64 B (fma.f64 1/3 x 1/6) (/.f64 (-.f64 1 x) B))","(-.f64 (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (+.f64 (*.f64 (+.f64 7/360 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x))) (pow.f64 B 3)) (/.f64 1 B))) (/.f64 x B))","(+.f64 (fma.f64 B (fma.f64 1/3 x 1/6) (*.f64 (fma.f64 x 1/45 7/360) (pow.f64 B 3))) (/.f64 (-.f64 1 x) B))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 17/315 x) (+.f64 31/15120 (+.f64 (*.f64 -2/45 x) (*.f64 -1/3 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x)))))) (pow.f64 B 5)) (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (+.f64 (*.f64 (+.f64 7/360 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x))) (pow.f64 B 3)) (/.f64 1 B)))) (/.f64 x B))","(fma.f64 (+.f64 (+.f64 (*.f64 x (+.f64 17/315 -2/45)) (*.f64 -1/3 (*.f64 x 1/45))) 31/15120) (pow.f64 B 5) (+.f64 (fma.f64 B (fma.f64 1/3 x 1/6) (*.f64 (fma.f64 x 1/45 7/360) (pow.f64 B 3))) (/.f64 (-.f64 1 x) B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(/.f64 1 (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))"]],"time":197.941162109375,"type":"simplify"},{"compiler":[[3702,1721]],"time":37.870849609375,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -3)) (/.f64 x (tan.f64 B)))","fresh",16.252285009768443],["(-.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (sin.f64 B))) (/.f64 x (tan.f64 B)))","fresh",11.322597509768443],["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (/.f64 x (sin.f64 B)) (/.f64 1 (cos.f64 B))))","fresh",0.23503876953688402],["(-.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (sin.f64 B))) (neg.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) 2)) (/.f64 x (tan.f64 B)))","fresh",10.905445949794737],["(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2)))","fresh",0.42225142814728406],["(-.f64 (/.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)))) (/.f64 x (tan.f64 B)))","fresh",10.932798087164434],["(/.f64 (-.f64 (*.f64 (tan.f64 B) (*.f64 (sin.f64 B) (tan.f64 B))) (*.f64 (*.f64 (sin.f64 B) (tan.f64 B)) (*.f64 (sin.f64 B) x))) (*.f64 (*.f64 (sin.f64 B) (tan.f64 B)) (*.f64 (sin.f64 B) (tan.f64 B))))","fresh",18.584022558610656],["(/.f64 (/.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)) (sin.f64 B)) (tan.f64 B))","fresh",0.26857377930532605],["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","next",0.18359375],["(fma.f64 x (/.f64 -1 (tan.f64 B)) (/.f64 1 (sin.f64 B)))","fresh",0.23503876953688405]],"compiler":[[12,9],[16,11],[16,11],[21,13],[18,12],[19,14],[33,11],[15,8],[11,8],[12,9],[12,9],[16,11],[16,11],[21,13],[18,12],[19,14],[33,11],[15,8],[11,8],[12,9]],"count":[[236,10]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[234,10],"picked":[1,0]}],"min-error":[0],"time":81.53515625,"type":"prune"},{"compiler":[[28,11]],"locations":[["(cos.f64 B)",0.01171875,true],["(sin.f64 B)",0.015625,true],["(*.f64 (cos.f64 B) x)",0.12890625,true],["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))",0.17578125,true]],"time":7.179931640625,"type":"localize"},{"count":[[4,28]],"series":[["(cos.f64 B)","B","-inf",0.134033203125],["(cos.f64 B)","B","inf",0.15087890625],["(cos.f64 B)","B","0",0.180908203125],["(sin.f64 B)","B","-inf",0.15380859375],["(sin.f64 B)","B","inf",0.135009765625],["(sin.f64 B)","B","0",0.18798828125],["(*.f64 (cos.f64 B) x)","x","-inf",0.212890625],["(*.f64 (cos.f64 B) x)","x","inf",0.198974609375],["(*.f64 (cos.f64 B) x)","x","0",0.264892578125],["(*.f64 (cos.f64 B) x)","B","-inf",0.14990234375],["(*.f64 (cos.f64 B) x)","B","inf",0.15283203125],["(*.f64 (cos.f64 B) x)","B","0",0.291015625],["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","x","-inf",0.38720703125],["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","x","inf",0.401123046875],["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","x","0",0.364013671875],["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","B","-inf",0.536865234375],["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","B","inf",1.528076171875],["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","B","0",0.656982421875]],"time":6.284912109375,"type":"series"},{"count":[[4,178]],"inputs":[["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(*.f64 (cos.f64 B) x)","(sin.f64 B)","(cos.f64 B)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (sin.f64 B)) (*.f64 (neg.f64 x) (cos.f64 B))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 1 (sin.f64 B)) (*.f64 (neg.f64 x) (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B))) 0) (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B))) (*.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B)))) (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B))) (*.f64 0 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 x (cos.f64 B) -1) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (sin.f64 B)) (/.f64 (fma.f64 x (cos.f64 B) -1) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 1 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1)) (sin.f64 B)) (/.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 B) x) 3) (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1)) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B)) (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (sin.f64 B))) (/.f64 (fma.f64 x (cos.f64 B) -1) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (sin.f64 B) (pow.f64 (sin.f64 B) 2)) (/.f64 (*.f64 (sin.f64 B) (*.f64 (cos.f64 B) x)) (pow.f64 (sin.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B)))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (neg.f64 (cos.f64 B)) 1)) (/.f64 (pow.f64 (cbrt.f64 (fma.f64 x (cos.f64 B) -1)) 2) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (*.f64 (fma.f64 x (neg.f64 (cos.f64 B)) 1) (cbrt.f64 (pow.f64 (sin.f64 B) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 x (cos.f64 B) -1) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x (neg.f64 (cos.f64 B)) 1) (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B))) 2)) (cbrt.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (cos.f64 B) -1) (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (neg.f64 (cos.f64 B)) 1) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 B)) (fma.f64 x (neg.f64 (cos.f64 B)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (sin.f64 B)) (fma.f64 x (cos.f64 B) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (sin.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x (neg.f64 (cos.f64 B)) 1) (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (pow.f64 (sin.f64 B) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 x (cos.f64 B) -1)) 2) (sin.f64 B)) (cbrt.f64 (fma.f64 x (neg.f64 (cos.f64 B)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) (/.f64 1 (*.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1) (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 B) (fma.f64 x (neg.f64 (cos.f64 B)) 1)) (pow.f64 (sin.f64 B) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) (sin.f64 B)) (/.f64 1 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) (sin.f64 B)) (cbrt.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1))) (pow.f64 (cbrt.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 x (neg.f64 (cos.f64 B)) 1) (cbrt.f64 (sin.f64 B))) (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 B))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 B))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (*.f64 (sin.f64 B) (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))))) (*.f64 (sin.f64 B) (cbrt.f64 (pow.f64 (sin.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (sin.f64 B)) (*.f64 (sin.f64 B) (*.f64 (neg.f64 x) (cos.f64 B)))) (*.f64 (sin.f64 B) (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (sin.f64 B)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (*.f64 (cos.f64 B) x))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (sin.f64 B) 2))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (cbrt.f64 (pow.f64 (sin.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (neg.f64 (sin.f64 B))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (*.f64 (neg.f64 x) (cos.f64 B)))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (sin.f64 B)) (*.f64 (neg.f64 (sin.f64 B)) (*.f64 (cos.f64 B) x))) (*.f64 (neg.f64 (sin.f64 B)) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2))) (*.f64 (neg.f64 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))))) (*.f64 (neg.f64 (sin.f64 B)) (cbrt.f64 (pow.f64 (sin.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sin.f64 B) (*.f64 (neg.f64 (sin.f64 B)) (*.f64 (neg.f64 x) (cos.f64 B)))) (*.f64 (neg.f64 (sin.f64 B)) (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (-.f64 1 (pow.f64 (*.f64 (cos.f64 B) x) 3))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (+.f64 -1 (pow.f64 (*.f64 (cos.f64 B) x) 3))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (neg.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) (pow.f64 (sin.f64 B) (neg.f64 1/3))) (*.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1) (cbrt.f64 (pow.f64 (sin.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) -1) (*.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1) (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) (pow.f64 (sin.f64 B) (neg.f64 1/3))) (*.f64 (neg.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1)) (cbrt.f64 (pow.f64 (sin.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) -1) (*.f64 (neg.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1)) (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) 1) (*.f64 (neg.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1)) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) (neg.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1) (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 B) (fma.f64 x (neg.f64 (cos.f64 B)) 1))) (neg.f64 (pow.f64 (sin.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) (sin.f64 B)) (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (neg.f64 (cos.f64 B)) 1) (sin.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (neg.f64 (cos.f64 B)) 1) (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 B) (fma.f64 x (neg.f64 (cos.f64 B)) 1)) (pow.f64 (sin.f64 B) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) (*.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B))) 2)) (cbrt.f64 (fma.f64 x (neg.f64 (cos.f64 B)) 1))) (cbrt.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B))) 2)) (cbrt.f64 (fma.f64 x (cos.f64 B) -1))) (cbrt.f64 (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (fma.f64 x (neg.f64 (cos.f64 B)) 1)) (cbrt.f64 (pow.f64 (sin.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B)))) (pow.f64 (cbrt.f64 (fma.f64 x (cos.f64 B) -1)) 2)) (cbrt.f64 (pow.f64 (sin.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) (/.f64 -1 (sin.f64 B))) (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 x (neg.f64 (cos.f64 B)) 1)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B))) 2))) (cbrt.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 x (cos.f64 B) -1)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B))) 2))) (cbrt.f64 (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) (sin.f64 B)) 1) (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 x (neg.f64 (cos.f64 B)) 1) (cbrt.f64 (sin.f64 B))) 1) (cbrt.f64 (pow.f64 (sin.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 B) (fma.f64 x (neg.f64 (cos.f64 B)) 1)) 1) (pow.f64 (sin.f64 B) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x (neg.f64 (cos.f64 B)) 1) (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (cbrt.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (cbrt.f64 (sin.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 B) (fma.f64 x (neg.f64 (cos.f64 B)) 1)) (sin.f64 B)) (sin.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) (sin.f64 B)) 1) (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (neg.f64 (cos.f64 B)) 1) -1) (neg.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 x (neg.f64 (cos.f64 B)) 1) (cbrt.f64 (sin.f64 B))) 1) (cbrt.f64 (pow.f64 (sin.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) (/.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1) (sin.f64 B)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) (*.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1) (sin.f64 B)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) (*.f64 (sin.f64 B) (neg.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) (*.f64 (neg.f64 (sin.f64 B)) (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) (*.f64 (neg.f64 (sin.f64 B)) (neg.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) 1) (*.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1) (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 x (neg.f64 (cos.f64 B)) 1) (cbrt.f64 (sin.f64 B)))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (sin.f64 B)) (+.f64 -1 (pow.f64 (*.f64 (cos.f64 B) x) 3))) (neg.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) (/.f64 1 (sin.f64 B))) (neg.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (*.f64 (cos.f64 B) x) 3))) (/.f64 (pow.f64 (cbrt.f64 (fma.f64 x (cos.f64 B) -1)) 2) (sin.f64 B))) (cbrt.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 (pow.f64 (*.f64 (cos.f64 B) x) 3)) (sin.f64 B))) (neg.f64 (fma.f64 (*.f64 (cos.f64 B) x) (fma.f64 (cos.f64 B) x 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (sin.f64 B)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (cos.f64 B) -1) (neg.f64 (sin.f64 B))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 -1 (sin.f64 B)) (/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 B) x) 0) (*.f64 (cos.f64 B) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 B) x) (*.f64 (*.f64 (cos.f64 B) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cos.f64 B) x)) (*.f64 (cos.f64 B) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 B) x) (*.f64 0 (*.f64 (cos.f64 B) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 B) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (cos.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 B) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 B) x) 2)) (cbrt.f64 (*.f64 (cos.f64 B) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (cos.f64 B))) (cbrt.f64 (pow.f64 (cos.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 B) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 B)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 B) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cos.f64 B) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 B) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cos.f64 B) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 B) 2)) x) (cbrt.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (cos.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 B) 2)) (*.f64 x (cbrt.f64 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (cos.f64 B)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (neg.f64 (*.f64 (cos.f64 B) (cbrt.f64 x)))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (cos.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 B) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 B)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cos.f64 B) (cbrt.f64 x))) (neg.f64 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 B) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (cos.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cos.f64 B) x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 B) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 B) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 B) x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 B) 0) (sin.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 B) (*.f64 (sin.f64 B) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sin.f64 B)) (sin.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 B) (*.f64 0 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 B) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 B)) (cbrt.f64 (pow.f64 (sin.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (cbrt.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 B) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 B)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 B) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 B) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 B)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 B)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 B) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 B)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 B) 0) (cos.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 B) (*.f64 (cos.f64 B) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 B)) (cos.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 B) (*.f64 0 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 B)) (cbrt.f64 (pow.f64 (cos.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 B) 2)) (cbrt.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 B) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cos.f64 B) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 B) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 B)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 B) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 B) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 B)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 B)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 B) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 B)))))"]],"rules":[["egg-rr",21],["egg-rr",22],["egg-rr",36],["egg-rr",99]],"time":38.28515625,"type":"rewrite"},{"count":[[206,211]],"inputs":[["(/.f64 (-.f64 1 x) B)","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x))) B) (/.f64 1 B)) (/.f64 x B))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 -1/24 x) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x)))) (*.f64 1/120 (-.f64 1 x)))) (pow.f64 B 3)) (+.f64 (*.f64 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x))) B) (/.f64 1 B))) (/.f64 x B))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 -1/24 x) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x)))) (*.f64 1/120 (-.f64 1 x)))) (pow.f64 B 3)) (+.f64 (*.f64 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x))) B) (+.f64 (*.f64 (-.f64 (*.f64 1/720 x) (+.f64 (*.f64 1/120 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x)))) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/24 x) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x)))) (*.f64 1/120 (-.f64 1 x))))) (*.f64 -1/5040 (-.f64 1 x))))) (pow.f64 B 5)) (/.f64 1 B)))) (/.f64 x B))","(/.f64 1 (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 B 2) x)) x)","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 B 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 B 2) x)) x))","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 B 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 B 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 B 2) x)) x)))","B","(+.f64 (*.f64 -1/6 (pow.f64 B 3)) B)","(+.f64 (*.f64 1/120 (pow.f64 B 5)) (+.f64 (*.f64 -1/6 (pow.f64 B 3)) B))","(+.f64 (*.f64 -1/5040 (pow.f64 B 7)) (+.f64 (*.f64 1/120 (pow.f64 B 5)) (+.f64 (*.f64 -1/6 (pow.f64 B 3)) B)))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 B 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 B 2)) (*.f64 1/24 (pow.f64 B 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 B 2)) (+.f64 (*.f64 1/24 (pow.f64 B 4)) (*.f64 -1/720 (pow.f64 B 6)))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 1 x) B)","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x))) B) (/.f64 1 B)) (/.f64 x B))","(fma.f64 B (fma.f64 1/2 x (*.f64 -1/6 (+.f64 x -1))) (/.f64 (-.f64 1 x) B))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 -1/24 x) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x)))) (*.f64 1/120 (-.f64 1 x)))) (pow.f64 B 3)) (+.f64 (*.f64 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x))) B) (/.f64 1 B))) (/.f64 x B))","(fma.f64 (-.f64 (*.f64 -1/24 x) (fma.f64 (fma.f64 1/2 x (*.f64 -1/6 (+.f64 x -1))) -1/6 (*.f64 1/120 (-.f64 1 x)))) (pow.f64 B 3) (fma.f64 B (fma.f64 1/2 x (*.f64 -1/6 (+.f64 x -1))) (/.f64 (-.f64 1 x) B)))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 -1/24 x) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x)))) (*.f64 1/120 (-.f64 1 x)))) (pow.f64 B 3)) (+.f64 (*.f64 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x))) B) (+.f64 (*.f64 (-.f64 (*.f64 1/720 x) (+.f64 (*.f64 1/120 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x)))) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/24 x) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x)))) (*.f64 1/120 (-.f64 1 x))))) (*.f64 -1/5040 (-.f64 1 x))))) (pow.f64 B 5)) (/.f64 1 B)))) (/.f64 x B))","(fma.f64 (-.f64 (*.f64 -1/24 x) (fma.f64 (fma.f64 1/2 x (*.f64 -1/6 (+.f64 x -1))) -1/6 (*.f64 1/120 (-.f64 1 x)))) (pow.f64 B 3) (+.f64 (fma.f64 B (fma.f64 1/2 x (*.f64 -1/6 (+.f64 x -1))) (*.f64 (-.f64 (*.f64 1/720 x) (fma.f64 1/120 (fma.f64 1/2 x (*.f64 -1/6 (+.f64 x -1))) (fma.f64 -1/6 (-.f64 (*.f64 -1/24 x) (fma.f64 (fma.f64 1/2 x (*.f64 -1/6 (+.f64 x -1))) -1/6 (*.f64 1/120 (-.f64 1 x)))) (*.f64 -1/5040 (-.f64 1 x))))) (pow.f64 B 5))) (/.f64 (-.f64 1 x) B)))","(/.f64 1 (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 1 (*.f64 (neg.f64 x) (cos.f64 B))) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 1 (*.f64 (neg.f64 x) (cos.f64 B))) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 1 (*.f64 (neg.f64 x) (cos.f64 B))) (sin.f64 B))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 1 (*.f64 (neg.f64 x) (cos.f64 B))) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 1 (*.f64 (neg.f64 x) (cos.f64 B))) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 1 (*.f64 (neg.f64 x) (cos.f64 B))) (sin.f64 B))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 1 (*.f64 (neg.f64 x) (cos.f64 B))) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 1 (*.f64 (neg.f64 x) (cos.f64 B))) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 1 (*.f64 (neg.f64 x) (cos.f64 B))) (sin.f64 B))","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 B 2) x)) x)","(fma.f64 -1/2 (*.f64 (*.f64 B B) x) x)","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 B 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 B 2) x)) x))","(+.f64 (*.f64 x (fma.f64 (pow.f64 B 4) 1/24 (*.f64 -1/2 (*.f64 B B)))) x)","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 B 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 B 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 B 2) x)) x)))","(fma.f64 -1/720 (*.f64 (pow.f64 B 6) x) (+.f64 (*.f64 x (fma.f64 (pow.f64 B 4) 1/24 (*.f64 -1/2 (*.f64 B B)))) x))","B","(+.f64 (*.f64 -1/6 (pow.f64 B 3)) B)","(fma.f64 -1/6 (pow.f64 B 3) B)","(+.f64 (*.f64 1/120 (pow.f64 B 5)) (+.f64 (*.f64 -1/6 (pow.f64 B 3)) B))","(fma.f64 (pow.f64 B 5) 1/120 (fma.f64 -1/6 (pow.f64 B 3) B))","(+.f64 (*.f64 -1/5040 (pow.f64 B 7)) (+.f64 (*.f64 1/120 (pow.f64 B 5)) (+.f64 (*.f64 -1/6 (pow.f64 B 3)) B)))","(fma.f64 -1/5040 (pow.f64 B 7) (fma.f64 (pow.f64 B 5) 1/120 (fma.f64 -1/6 (pow.f64 B 3) B)))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 B 2)))","(fma.f64 (*.f64 B B) -1/2 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 B 2)) (*.f64 1/24 (pow.f64 B 4))))","(+.f64 1 (fma.f64 (pow.f64 B 4) 1/24 (*.f64 -1/2 (*.f64 B B))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 B 2)) (+.f64 (*.f64 1/24 (pow.f64 B 4)) (*.f64 -1/720 (pow.f64 B 6)))))","(+.f64 (fma.f64 (*.f64 B B) -1/2 1) (fma.f64 1/24 (pow.f64 B 4) (*.f64 -1/720 (pow.f64 B 6))))"]],"time":97.364013671875,"type":"simplify"},{"compiler":[[3725,1856]],"time":39.376953125,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B)))","fresh",11.317070019536883],["(/.f64 (-.f64 (*.f64 (tan.f64 B) (*.f64 (sin.f64 B) (tan.f64 B))) (*.f64 (*.f64 (sin.f64 B) (tan.f64 B)) (*.f64 (sin.f64 B) x))) (*.f64 (*.f64 (sin.f64 B) (tan.f64 B)) (*.f64 (sin.f64 B) (tan.f64 B))))","fresh",18.584022558610656],["(-.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -3)) (/.f64 x (tan.f64 B)))","fresh",16.252285009768443],["(/.f64 (-.f64 (neg.f64 (sin.f64 B)) (*.f64 (neg.f64 (sin.f64 B)) (*.f64 (cos.f64 B) x))) (*.f64 (neg.f64 (sin.f64 B)) (sin.f64 B)))","fresh",10.89048471933162],["(/.f64 (-.f64 1 (*.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (cos.f64 B)))) (sin.f64 B))","fresh",10.185878759768443],["(/.f64 (-.f64 1 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 B) 2)) x) (cbrt.f64 (cos.f64 B)))) (sin.f64 B))","fresh",0.23960878907376804],["(fma.f64 x (/.f64 -1 (tan.f64 B)) (/.f64 1 (sin.f64 B)))","next",0.23503876953688405]],"compiler":[[22,15],[33,11],[12,9],[21,10],[17,12],[18,13],[12,9],[22,15],[33,11],[12,9],[21,10],[17,12],[18,13],[12,9]],"count":[[221,7]],"kept":[{"done":[0,0],"fresh":[9,3],"new":[211,4],"picked":[1,0]}],"min-error":[0],"time":75.864013671875,"type":"prune"},{"compiler":[[28,15]],"locations":[["(fma.f64 x (/.f64 -1 (tan.f64 B)) (/.f64 1 (sin.f64 B)))",0.08984375,true],["(/.f64 1 (sin.f64 B))",0.140625,false],["(/.f64 -1 (tan.f64 B))",0.14453125,true],["(tan.f64 B)",0.26400375976844204,false]],"time":8.08203125,"type":"localize"},{"count":[[2,36]],"series":[["(fma.f64 x (/.f64 -1 (tan.f64 B)) (/.f64 1 (sin.f64 B)))","B","-inf",0.383056640625],["(fma.f64 x (/.f64 -1 (tan.f64 B)) (/.f64 1 (sin.f64 B)))","B","inf",0.365966796875],["(fma.f64 x (/.f64 -1 (tan.f64 B)) (/.f64 1 (sin.f64 B)))","B","0",0.32177734375],["(fma.f64 x (/.f64 -1 (tan.f64 B)) (/.f64 1 (sin.f64 B)))","x","-inf",0.319091796875],["(fma.f64 x (/.f64 -1 (tan.f64 B)) (/.f64 1 (sin.f64 B)))","x","inf",0.310791015625],["(fma.f64 x (/.f64 -1 (tan.f64 B)) (/.f64 1 (sin.f64 B)))","x","0",0.3720703125],["(/.f64 -1 (tan.f64 B))","B","-inf",0.444091796875],["(/.f64 -1 (tan.f64 B))","B","inf",0.4638671875],["(/.f64 -1 (tan.f64 B))","B","0",0.294921875]],"time":3.410888671875,"type":"series"},{"count":[[2,98]],"inputs":[["(/.f64 -1 (tan.f64 B))","(fma.f64 x (/.f64 -1 (tan.f64 B)) (/.f64 1 (sin.f64 B)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 -1 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (tan.f64 B)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 1 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (tan.f64 B)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (pow.f64 (tan.f64 B) -1/3))) (cbrt.f64 (tan.f64 B))) (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (tan.f64 B)) -2)) (cbrt.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (pow.f64 (tan.f64 B) -1/3))) 1) (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (tan.f64 B)) -2)) (pow.f64 (tan.f64 B) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 B)) (/.f64 -1 (/.f64 1 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (tan.f64 B) -1/3) (neg.f64 (pow.f64 (cbrt.f64 (tan.f64 B)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (tan.f64 B) -1/3)) (pow.f64 (cbrt.f64 (tan.f64 B)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (tan.f64 B)) -2) (neg.f64 (pow.f64 (tan.f64 B) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (tan.f64 B)) -2)) (pow.f64 (tan.f64 B) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (tan.f64 B) 2/3))) (/.f64 (neg.f64 (pow.f64 (tan.f64 B) -1/3)) (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 B) 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (tan.f64 B) -1/3)) (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (tan.f64 B)) -2)) (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 B) 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (cbrt.f64 (pow.f64 (tan.f64 B) 2/3))) (/.f64 (pow.f64 (tan.f64 B) -1/3) (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 B) 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (/.f64 1 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -1 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (tan.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (tan.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (pow.f64 (tan.f64 B) -1/3)) (cbrt.f64 (pow.f64 (tan.f64 B) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 B) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (neg.f64 (tan.f64 B))) (neg.f64 (tan.f64 B))) (*.f64 (tan.f64 B) (neg.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (pow.f64 (tan.f64 B) 2/3)) (*.f64 (tan.f64 B) (pow.f64 (tan.f64 B) -1/3))) (*.f64 (tan.f64 B) (pow.f64 (tan.f64 B) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (tan.f64 B) -1/3) 1) (*.f64 (pow.f64 (tan.f64 B) 2/3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (tan.f64 B) -1/3)) (pow.f64 (tan.f64 B) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (tan.f64 B)) -2) (cbrt.f64 (neg.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (tan.f64 B)) -2) -1) (cbrt.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cbrt.f64 (tan.f64 B)) -2)) (cbrt.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (tan.f64 B) -1/3) (neg.f64 (pow.f64 (tan.f64 B) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (tan.f64 B)) (tan.f64 B)) (pow.f64 (tan.f64 B) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (tan.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (neg.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (tan.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (tan.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (tan.f64 B) -3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (tan.f64 B) -1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1 (tan.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (tan.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 1 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 (pow.f64 (tan.f64 B) -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (/.f64 -1 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (/.f64 -1 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (/.f64 -1 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (/.f64 -1 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (/.f64 -1 (tan.f64 B)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 0) (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (*.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (*.f64 0 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (sin.f64 B)) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 0) (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 -1 (sin.f64 B)) (/.f64 (neg.f64 x) (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 2/3) (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (tan.f64 B)) (*.f64 (sin.f64 B) x)) (*.f64 (sin.f64 B) (neg.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (tan.f64 B) (*.f64 (sin.f64 B) (neg.f64 x))) (*.f64 (sin.f64 B) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 (sin.f64 B) -1/3) (neg.f64 (tan.f64 B))) (*.f64 (pow.f64 (sin.f64 B) 2/3) x)) (*.f64 (pow.f64 (sin.f64 B) 2/3) (neg.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 (sin.f64 B) -1/3) (tan.f64 B)) (*.f64 (pow.f64 (sin.f64 B) 2/3) (neg.f64 x))) (*.f64 (pow.f64 (sin.f64 B) 2/3) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (tan.f64 B) (*.f64 (neg.f64 (sin.f64 B)) x)) (*.f64 (neg.f64 (sin.f64 B)) (neg.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (tan.f64 B)) (*.f64 (neg.f64 (sin.f64 B)) (neg.f64 x))) (*.f64 (neg.f64 (sin.f64 B)) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) (neg.f64 (sin.f64 B))) (neg.f64 (tan.f64 B))) (*.f64 (tan.f64 B) (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) (pow.f64 (sin.f64 B) 2/3)) (*.f64 (tan.f64 B) (pow.f64 (sin.f64 B) -1/3))) (*.f64 (tan.f64 B) (pow.f64 (sin.f64 B) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) (sin.f64 B)) (tan.f64 B)) (*.f64 (tan.f64 B) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (neg.f64 (sin.f64 B))) (tan.f64 B)) (*.f64 (neg.f64 (tan.f64 B)) (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (pow.f64 (sin.f64 B) 2/3)) (*.f64 (neg.f64 (tan.f64 B)) (pow.f64 (sin.f64 B) -1/3))) (*.f64 (neg.f64 (tan.f64 B)) (pow.f64 (sin.f64 B) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (sin.f64 B)) (neg.f64 (tan.f64 B))) (*.f64 (neg.f64 (tan.f64 B)) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 -1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 -1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 -1 (tan.f64 B)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (sin.f64 B) -1/3)) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (sin.f64 B) -1/3) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (pow.f64 (sin.f64 B) -1/3) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (cbrt.f64 (neg.f64 (tan.f64 B)))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (/.f64 (pow.f64 x 2/3) (neg.f64 (tan.f64 B))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1 (tan.f64 B)) x (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (neg.f64 x) (tan.f64 B))) (cbrt.f64 (pow.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 2)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 1 (tan.f64 B)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 -1 (sin.f64 B)) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1 (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sin.f64 B)) 1 (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (sin.f64 B)) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 1 (sin.f64 B)))))))"]],"rules":[["egg-rr",53],["egg-rr",45]],"time":30.114013671875,"type":"rewrite"},{"count":[[134,120]],"inputs":[["(/.f64 -1 B)","(-.f64 (*.f64 1/3 B) (/.f64 1 B))","(-.f64 (+.f64 (*.f64 1/3 B) (*.f64 1/45 (pow.f64 B 3))) (/.f64 1 B))","(-.f64 (+.f64 (*.f64 1/3 B) (+.f64 (*.f64 2/945 (pow.f64 B 5)) (*.f64 1/45 (pow.f64 B 3)))) (/.f64 1 B))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(/.f64 1 (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 1 (*.f64 -1 x)) B)","(+.f64 (*.f64 -1 (/.f64 x B)) (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (/.f64 1 B)))","(+.f64 (*.f64 -1 (/.f64 x B)) (+.f64 (*.f64 (+.f64 7/360 (*.f64 1/45 x)) (pow.f64 B 3)) (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (/.f64 1 B))))","(+.f64 (*.f64 -1 (/.f64 x B)) (+.f64 (*.f64 (+.f64 31/15120 (*.f64 2/945 x)) (pow.f64 B 5)) (+.f64 (*.f64 (+.f64 7/360 (*.f64 1/45 x)) (pow.f64 B 3)) (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (/.f64 1 B)))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 -1 B)","(-.f64 (*.f64 1/3 B) (/.f64 1 B))","(fma.f64 1/3 B (/.f64 -1 B))","(-.f64 (+.f64 (*.f64 1/3 B) (*.f64 1/45 (pow.f64 B 3))) (/.f64 1 B))","(fma.f64 1/3 B (fma.f64 1/45 (pow.f64 B 3) (/.f64 -1 B)))","(-.f64 (+.f64 (*.f64 1/3 B) (+.f64 (*.f64 2/945 (pow.f64 B 5)) (*.f64 1/45 (pow.f64 B 3)))) (/.f64 1 B))","(+.f64 (fma.f64 B 1/3 (fma.f64 2/945 (pow.f64 B 5) (*.f64 1/45 (pow.f64 B 3)))) (/.f64 -1 B))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))","(/.f64 1 (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(/.f64 (+.f64 1 (*.f64 -1 x)) B)","(/.f64 (-.f64 1 x) B)","(+.f64 (*.f64 -1 (/.f64 x B)) (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (/.f64 1 B)))","(-.f64 (fma.f64 (fma.f64 1/3 x 1/6) B (/.f64 1 B)) (/.f64 x B))","(+.f64 (*.f64 -1 (/.f64 x B)) (+.f64 (*.f64 (+.f64 7/360 (*.f64 1/45 x)) (pow.f64 B 3)) (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (/.f64 1 B))))","(-.f64 (fma.f64 (pow.f64 B 3) (fma.f64 1/45 x 7/360) (fma.f64 (fma.f64 1/3 x 1/6) B (/.f64 1 B))) (/.f64 x B))","(+.f64 (*.f64 -1 (/.f64 x B)) (+.f64 (*.f64 (+.f64 31/15120 (*.f64 2/945 x)) (pow.f64 B 5)) (+.f64 (*.f64 (+.f64 7/360 (*.f64 1/45 x)) (pow.f64 B 3)) (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (/.f64 1 B)))))","(-.f64 (fma.f64 (fma.f64 x 2/945 31/15120) (pow.f64 B 5) (fma.f64 (pow.f64 B 3) (fma.f64 1/45 x 7/360) (fma.f64 (fma.f64 1/3 x 1/6) B (/.f64 1 B)))) (/.f64 x B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))"]],"time":114.778076171875,"type":"simplify"},{"compiler":[[3120,1682]],"time":35.869873046875,"type":"eval"},{"alts":[["(fma.f64 x (/.f64 -1 (tan.f64 B)) (cbrt.f64 (pow.f64 (sin.f64 B) -3)))","fresh",16.238945019536885],["(/.f64 (-.f64 1 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 B) 2)) x) (cbrt.f64 (cos.f64 B)))) (sin.f64 B))","fresh",0.23960878907376804],["(fma.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B)))","fresh",11.317070019536883],["(/.f64 (-.f64 (*.f64 (tan.f64 B) (*.f64 (sin.f64 B) (tan.f64 B))) (*.f64 (*.f64 (sin.f64 B) (tan.f64 B)) (*.f64 (sin.f64 B) x))) (*.f64 (*.f64 (sin.f64 B) (tan.f64 B)) (*.f64 (sin.f64 B) (tan.f64 B))))","fresh",18.584022558610656],["(/.f64 (-.f64 (neg.f64 (sin.f64 B)) (*.f64 (neg.f64 (sin.f64 B)) (*.f64 (cos.f64 B) x))) (*.f64 (neg.f64 (sin.f64 B)) (sin.f64 B)))","fresh",10.89048471933162],["(fma.f64 x (/.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B))) (/.f64 1 (sin.f64 B)))","next",0.23570253907376806]],"compiler":[[13,10],[18,13],[22,15],[33,11],[21,10],[17,12],[13,10],[18,13],[22,15],[33,11],[21,10],[17,12]],"count":[[211,6]],"kept":[{"done":[0,0],"fresh":[6,4],"new":[204,2],"picked":[1,0]}],"min-error":[0],"time":63.346923828125,"type":"prune"},{"compiler":[[46,25]],"locations":[["(fma.f64 x (/.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B))) (/.f64 1 (sin.f64 B)))",0.08984375,true],["(/.f64 1 (sin.f64 B))",0.140625,false],["(/.f64 -1 (sin.f64 B))",0.140625,true],["(/.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B)))",0.23732377930532605,true]],"time":11.68701171875,"type":"localize"},{"count":[[3,40]],"series":[["(fma.f64 x (/.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B))) (/.f64 1 (sin.f64 B)))","B","-inf",0.258056640625],["(fma.f64 x (/.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B))) (/.f64 1 (sin.f64 B)))","B","inf",0.27392578125],["(fma.f64 x (/.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B))) (/.f64 1 (sin.f64 B)))","B","0",0.199951171875],["(fma.f64 x (/.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B))) (/.f64 1 (sin.f64 B)))","x","-inf",0.23291015625],["(fma.f64 x (/.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B))) (/.f64 1 (sin.f64 B)))","x","inf",0.2431640625],["(fma.f64 x (/.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B))) (/.f64 1 (sin.f64 B)))","x","0",2.2509765625],["(/.f64 -1 (sin.f64 B))","B","-inf",0.35791015625],["(/.f64 -1 (sin.f64 B))","B","inf",0.35693359375],["(/.f64 -1 (sin.f64 B))","B","0",0.22900390625],["(/.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B)))","B","-inf",0.552001953125],["(/.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B)))","B","inf",0.5390625],["(/.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B)))","B","0",0.30712890625]],"time":5.97314453125,"type":"series"},{"count":[[3,173]],"inputs":[["(/.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B)))","(/.f64 -1 (sin.f64 B))","(fma.f64 x (/.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B))) (/.f64 1 (sin.f64 B)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (*.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) 0) (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (*.f64 0 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (cos.f64 B) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (/.f64 (sin.f64 B) (cos.f64 B))) (/.f64 (cos.f64 B) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (/.f64 1 (cos.f64 B))) (/.f64 (cos.f64 B) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (/.f64 (sin.f64 B) (cos.f64 B)))) (/.f64 (cos.f64 B) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 0 (neg.f64 (/.f64 (sin.f64 B) (cos.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (/.f64 -1 (cos.f64 B))) (/.f64 (cos.f64 B) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) 2) (cbrt.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) (cbrt.f64 (/.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (cos.f64 B) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 B))) (/.f64 (/.f64 1 (sin.f64 B)) (cbrt.f64 (pow.f64 (cos.f64 B) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (sin.f64 B)) (cos.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 B) (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 B)) (/.f64 (/.f64 -1 (sin.f64 B)) (cbrt.f64 (pow.f64 (cos.f64 B) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 B)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 -1 (sin.f64 B)) (cbrt.f64 (pow.f64 (cos.f64 B) -2))) (cbrt.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 B) (sin.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (cos.f64 B) -2))) (cbrt.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 (sin.f64 B)) (cbrt.f64 (pow.f64 (cos.f64 B) -2))) (cbrt.f64 (neg.f64 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cos.f64 B)) (cbrt.f64 (/.f64 -1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 -1 (sin.f64 B)) (cbrt.f64 (cos.f64 B))) (pow.f64 (pow.f64 (cos.f64 B) (neg.f64 1/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 B)) (sin.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 -1 (sin.f64 B)) (cbrt.f64 (cos.f64 B))) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 B) -2)))) (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 B) -2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 (sin.f64 B)) (cbrt.f64 (cos.f64 B))) (cbrt.f64 (pow.f64 (cos.f64 B) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (sin.f64 B)) (/.f64 -1 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 B) (neg.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (neg.f64 (/.f64 (sin.f64 B) (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (sin.f64 B) (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) 2) (pow.f64 (sin.f64 B) (neg.f64 1/3))) (cbrt.f64 (/.f64 -1 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) 2) (cbrt.f64 (/.f64 -1 (sin.f64 B)))) (pow.f64 (cos.f64 B) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (cos.f64 B))) (/.f64 1 (sin.f64 B))) (cbrt.f64 (pow.f64 (cos.f64 B) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 B) (cbrt.f64 (/.f64 -1 (sin.f64 B)))) (cbrt.f64 (pow.f64 (sin.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cos.f64 B)) (/.f64 -1 (sin.f64 B))) (cbrt.f64 (pow.f64 (cos.f64 B) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (cbrt.f64 (pow.f64 (cos.f64 B) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (cos.f64 B)) (cbrt.f64 (pow.f64 (sin.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (/.f64 1 (sin.f64 B)) (cbrt.f64 (pow.f64 (cos.f64 B) -2)))) (pow.f64 (cos.f64 B) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 -1 (sin.f64 B)) (cbrt.f64 (cos.f64 B))) 1) (cbrt.f64 (pow.f64 (cos.f64 B) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 -1 (sin.f64 B)) (cbrt.f64 (pow.f64 (cos.f64 B) -2))) (pow.f64 (cos.f64 B) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cos.f64 B))) (cbrt.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cos.f64 B)) (cbrt.f64 (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cos.f64 B) (sin.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (cbrt.f64 (/.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (cos.f64 B) -2)))) (cbrt.f64 (/.f64 -1 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) 2)) (cbrt.f64 (/.f64 -1 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (cbrt.f64 (/.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (cos.f64 B) -2)))) (pow.f64 (cos.f64 B) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) 2)) (pow.f64 (cos.f64 B) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (neg.f64 (cos.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cos.f64 B) (cbrt.f64 (neg.f64 (sin.f64 B)))) (cbrt.f64 (pow.f64 (sin.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 -1 (sin.f64 B)) (cbrt.f64 (cos.f64 B))) 1) (cbrt.f64 (pow.f64 (cos.f64 B) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (cos.f64 B)) (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (cos.f64 B)) (cbrt.f64 (pow.f64 (sin.f64 B) 2))) (cbrt.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 1 (sin.f64 B)) (pow.f64 (cos.f64 B) (neg.f64 1/3))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 B) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 -1 (sin.f64 B)) (cbrt.f64 (/.f64 -1 (cos.f64 B)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 B) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (neg.f64 (/.f64 (sin.f64 B) (cos.f64 B))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (/.f64 (sin.f64 B) (cos.f64 B)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 (sin.f64 B) (cos.f64 B)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (neg.f64 (/.f64 (sin.f64 B) (cos.f64 B))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 -1 (sin.f64 B)) (cbrt.f64 (cos.f64 B)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 B) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (/.f64 (cos.f64 B) (sin.f64 B)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 (sin.f64 B) (cos.f64 B))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (cos.f64 B)) (/.f64 -1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 (pow.f64 (/.f64 (cos.f64 B) (sin.f64 B)) 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (sin.f64 B)) 0) (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (sin.f64 B)) (*.f64 (/.f64 -1 (sin.f64 B)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -1 (sin.f64 B)) 0) (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (sin.f64 B)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (sin.f64 B)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 -1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (sin.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (pow.f64 (sin.f64 B) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (*.f64 0 (pow.f64 (sin.f64 B) (neg.f64 1/3))))) (cbrt.f64 (/.f64 -1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (sin.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (neg.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (sin.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) -1) (cbrt.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (sin.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)))) (cbrt.f64 (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (cbrt.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 B))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 B))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (neg.f64 (sin.f64 B))) (neg.f64 (sin.f64 B))) (*.f64 (sin.f64 B) (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (sin.f64 B)) (sin.f64 B)) (pow.f64 (sin.f64 B) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (cbrt.f64 (pow.f64 (sin.f64 B) 2))) (*.f64 (sin.f64 B) (pow.f64 (sin.f64 B) (neg.f64 1/3)))) (*.f64 (sin.f64 B) (cbrt.f64 (pow.f64 (sin.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (sin.f64 B) -3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1 (sin.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sin.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 (pow.f64 (sin.f64 B) -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (/.f64 -1 (sin.f64 B)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B))) (*.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B))) 0) (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B))) (*.f64 0 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B)))) (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (sin.f64 B)) (*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) 0) (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 -1 (sin.f64 B)) (*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) (/.f64 -1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B)))) (cbrt.f64 (pow.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B))) 2)) (cbrt.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 -1 (cos.f64 B)) (*.f64 (neg.f64 (sin.f64 B)) (/.f64 (neg.f64 x) (sin.f64 B)))) (neg.f64 (/.f64 (sin.f64 B) (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 1 (cos.f64 B)) (*.f64 (neg.f64 (sin.f64 B)) (/.f64 x (sin.f64 B)))) (*.f64 (neg.f64 (sin.f64 B)) (/.f64 -1 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (/.f64 1 (cos.f64 B))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (/.f64 (neg.f64 x) (sin.f64 B)))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (/.f64 1 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (/.f64 -1 (cos.f64 B))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (/.f64 x (sin.f64 B)))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)) (/.f64 -1 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 1 (cos.f64 B)) (*.f64 (sin.f64 B) (/.f64 (neg.f64 x) (sin.f64 B)))) (/.f64 (sin.f64 B) (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 -1 (cos.f64 B)) (*.f64 (sin.f64 B) (/.f64 x (sin.f64 B)))) (*.f64 (sin.f64 B) (/.f64 -1 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (neg.f64 x) (sin.f64 B)) (cbrt.f64 (pow.f64 (sin.f64 B) 2))) (*.f64 (/.f64 1 (cos.f64 B)) (pow.f64 (sin.f64 B) (neg.f64 1/3)))) (*.f64 (/.f64 1 (cos.f64 B)) (cbrt.f64 (pow.f64 (sin.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (neg.f64 x) (sin.f64 B)) (sin.f64 B)) (/.f64 1 (cos.f64 B))) (/.f64 (sin.f64 B) (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (neg.f64 x) (sin.f64 B)) (neg.f64 (sin.f64 B))) (/.f64 -1 (cos.f64 B))) (neg.f64 (/.f64 (sin.f64 B) (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (sin.f64 B)) (cbrt.f64 (pow.f64 (sin.f64 B) 2))) (*.f64 (/.f64 -1 (cos.f64 B)) (pow.f64 (sin.f64 B) (neg.f64 1/3)))) (*.f64 (/.f64 -1 (cos.f64 B)) (cbrt.f64 (pow.f64 (sin.f64 B) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (sin.f64 B)) (sin.f64 B)) (/.f64 -1 (cos.f64 B))) (*.f64 (/.f64 -1 (cos.f64 B)) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (sin.f64 B)) (neg.f64 (sin.f64 B))) (/.f64 1 (cos.f64 B))) (*.f64 (/.f64 -1 (cos.f64 B)) (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (sin.f64 B) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 -1 (sin.f64 B)) (*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (pow.f64 (sin.f64 B) (neg.f64 1/3)) (*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) x (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (neg.f64 x) (sin.f64 B)) (cos.f64 B) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) 2) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))))) (cbrt.f64 (pow.f64 (*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) 2)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (sin.f64 B)) (*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sin.f64 B)) 1 (*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))) 1 (/.f64 1 (sin.f64 B)))))))"]],"rules":[["egg-rr",52],["egg-rr",43],["egg-rr",78]],"time":34.9140625,"type":"rewrite"},{"count":[[213,199]],"inputs":[["(/.f64 -1 B)","(-.f64 (*.f64 1/3 B) (/.f64 1 B))","(-.f64 (+.f64 (*.f64 1/3 B) (*.f64 1/45 (pow.f64 B 3))) (/.f64 1 B))","(-.f64 (+.f64 (*.f64 1/3 B) (+.f64 (*.f64 2/945 (pow.f64 B 5)) (*.f64 1/45 (pow.f64 B 3)))) (/.f64 1 B))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(/.f64 -1 B)","(-.f64 (*.f64 -1/6 B) (/.f64 1 B))","(-.f64 (+.f64 (*.f64 -7/360 (pow.f64 B 3)) (*.f64 -1/6 B)) (/.f64 1 B))","(-.f64 (+.f64 (*.f64 -31/15120 (pow.f64 B 5)) (+.f64 (*.f64 -7/360 (pow.f64 B 3)) (*.f64 -1/6 B))) (/.f64 1 B))","(/.f64 1 (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 1 (*.f64 -1 x)) B)","(+.f64 (*.f64 -1 (/.f64 x B)) (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (/.f64 1 B)))","(+.f64 (*.f64 -1 (/.f64 x B)) (+.f64 (*.f64 (+.f64 7/360 (*.f64 1/45 x)) (pow.f64 B 3)) (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (/.f64 1 B))))","(+.f64 (*.f64 -1 (/.f64 x B)) (+.f64 (*.f64 (+.f64 31/15120 (*.f64 2/945 x)) (pow.f64 B 5)) (+.f64 (*.f64 (+.f64 7/360 (*.f64 1/45 x)) (pow.f64 B 3)) (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (/.f64 1 B)))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 -1 B)","(-.f64 (*.f64 1/3 B) (/.f64 1 B))","(fma.f64 1/3 B (/.f64 -1 B))","(-.f64 (+.f64 (*.f64 1/3 B) (*.f64 1/45 (pow.f64 B 3))) (/.f64 1 B))","(fma.f64 B 1/3 (fma.f64 (pow.f64 B 3) 1/45 (/.f64 -1 B)))","(-.f64 (+.f64 (*.f64 1/3 B) (+.f64 (*.f64 2/945 (pow.f64 B 5)) (*.f64 1/45 (pow.f64 B 3)))) (/.f64 1 B))","(+.f64 (fma.f64 B 1/3 (fma.f64 2/945 (pow.f64 B 5) (*.f64 1/45 (pow.f64 B 3)))) (/.f64 -1 B))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 -1 (/.f64 (cos.f64 B) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))","(/.f64 -1 B)","(-.f64 (*.f64 -1/6 B) (/.f64 1 B))","(fma.f64 -1/6 B (/.f64 -1 B))","(-.f64 (+.f64 (*.f64 -7/360 (pow.f64 B 3)) (*.f64 -1/6 B)) (/.f64 1 B))","(fma.f64 -7/360 (pow.f64 B 3) (fma.f64 -1/6 B (/.f64 -1 B)))","(-.f64 (+.f64 (*.f64 -31/15120 (pow.f64 B 5)) (+.f64 (*.f64 -7/360 (pow.f64 B 3)) (*.f64 -1/6 B))) (/.f64 1 B))","(fma.f64 (pow.f64 B 5) -31/15120 (fma.f64 -7/360 (pow.f64 B 3) (fma.f64 -1/6 B (/.f64 -1 B))))","(/.f64 1 (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(/.f64 (+.f64 1 (*.f64 -1 x)) B)","(/.f64 (-.f64 1 x) B)","(+.f64 (*.f64 -1 (/.f64 x B)) (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (/.f64 1 B)))","(-.f64 (fma.f64 B (fma.f64 1/3 x 1/6) (/.f64 1 B)) (/.f64 x B))","(+.f64 (*.f64 -1 (/.f64 x B)) (+.f64 (*.f64 (+.f64 7/360 (*.f64 1/45 x)) (pow.f64 B 3)) (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (/.f64 1 B))))","(-.f64 (fma.f64 (pow.f64 B 3) (fma.f64 1/45 x 7/360) (fma.f64 B (fma.f64 1/3 x 1/6) (/.f64 1 B))) (/.f64 x B))","(+.f64 (*.f64 -1 (/.f64 x B)) (+.f64 (*.f64 (+.f64 31/15120 (*.f64 2/945 x)) (pow.f64 B 5)) (+.f64 (*.f64 (+.f64 7/360 (*.f64 1/45 x)) (pow.f64 B 3)) (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (/.f64 1 B)))))","(-.f64 (fma.f64 (fma.f64 2/945 x 31/15120) (pow.f64 B 5) (fma.f64 (pow.f64 B 3) (fma.f64 1/45 x 7/360) (fma.f64 B (fma.f64 1/3 x 1/6) (/.f64 1 B)))) (/.f64 x B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))"]],"time":127.619873046875,"type":"simplify"},{"compiler":[[4657,2353]],"time":47.26806640625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (neg.f64 (sin.f64 B)) (*.f64 (neg.f64 (sin.f64 B)) (*.f64 (cos.f64 B) x))) (*.f64 (neg.f64 (sin.f64 B)) (sin.f64 B)))","fresh",10.89048471933162],["(/.f64 (+.f64 (/.f64 -1 (cos.f64 B)) (*.f64 (sin.f64 B) (/.f64 x (sin.f64 B)))) (*.f64 (sin.f64 B) (/.f64 -1 (cos.f64 B))))","fresh",0.20769501953688405],["(fma.f64 x (/.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -3)))","fresh",16.239608789073767],["(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","fresh",0.18359375],["(/.f64 (-.f64 (*.f64 (tan.f64 B) (*.f64 (sin.f64 B) (tan.f64 B))) (*.f64 (*.f64 (sin.f64 B) (tan.f64 B)) (*.f64 (sin.f64 B) x))) (*.f64 (*.f64 (sin.f64 B) (tan.f64 B)) (*.f64 (sin.f64 B) (tan.f64 B))))","fresh",18.584022558610656],["(fma.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))))","fresh",11.303730029305324]],"compiler":[[21,10],[22,13],[18,13],[12,9],[33,11],[22,15]],"count":[[248,6]],"kept":[{"done":[0,0],"fresh":[5,2],"new":[242,4],"picked":[1,0]}],"min-error":[0],"time":88.001953125,"type":"prune"},{"accuracy":[0.18359375],"baseline":[0.18359375],"branch":[["B",0.18359375,1],["x",0.18359375,1],["(+.f64 (neg.f64 (*.f64 x (/.f64 1 (tan.f64 B)))) (/.f64 1 (sin.f64 B)))",0.18359375,1]],"compiler":[[3,2],[3,2],[14,11],[338,154]],"count":[[22,1]],"inputs":[["(/.f64 (+.f64 (/.f64 -1 (cos.f64 B)) (*.f64 (sin.f64 B) (/.f64 x (sin.f64 B)))) (*.f64 (sin.f64 B) (/.f64 -1 (cos.f64 B))))","(fma.f64 x (/.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -3)))","(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(fma.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B)))))","(fma.f64 x (/.f64 -1 (tan.f64 B)) (cbrt.f64 (pow.f64 (sin.f64 B) -3)))","(fma.f64 x (/.f64 (/.f64 -1 (sin.f64 B)) (/.f64 1 (cos.f64 B))) (/.f64 1 (sin.f64 B)))","(fma.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B)))","(/.f64 (-.f64 (neg.f64 (sin.f64 B)) (*.f64 (neg.f64 (sin.f64 B)) (*.f64 (cos.f64 B) x))) (*.f64 (neg.f64 (sin.f64 B)) (sin.f64 B)))","(/.f64 (-.f64 1 (*.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (cos.f64 B)))) (sin.f64 B))","(/.f64 (-.f64 1 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 B) 2)) x) (cbrt.f64 (cos.f64 B)))) (sin.f64 B))","(-.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -3)) (/.f64 x (tan.f64 B)))","(-.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (sin.f64 B))) (/.f64 x (tan.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (/.f64 x (sin.f64 B)) (/.f64 1 (cos.f64 B))))","(-.f64 (/.f64 (-.f64 (*.f64 0 (neg.f64 (sin.f64 B))) (neg.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) 2)) (/.f64 x (tan.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2)))","(-.f64 (/.f64 (cbrt.f64 (/.f64 -1 (sin.f64 B))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 B) 2)))) (/.f64 x (tan.f64 B)))","(/.f64 (-.f64 (*.f64 (tan.f64 B) (*.f64 (sin.f64 B) (tan.f64 B))) (*.f64 (*.f64 (sin.f64 B) (tan.f64 B)) (*.f64 (sin.f64 B) x))) (*.f64 (*.f64 (sin.f64 B) (tan.f64 B)) (*.f64 (sin.f64 B) (tan.f64 B))))","(/.f64 (/.f64 (fma.f64 (neg.f64 x) (sin.f64 B) (tan.f64 B)) (sin.f64 B)) (tan.f64 B))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(fma.f64 x (/.f64 -1 (tan.f64 B)) (/.f64 1 (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))","(+.f64 (neg.f64 (*.f64 x (/.f64 1 (tan.f64 B)))) (/.f64 1 (sin.f64 B)))"]],"link":["."],"name":["VandenBroeck and Keller, Equation (24)"],"oracle":[28.315895214905733],"outputs":[["(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))"]],"time":26.718994140625,"times":[["B",6.83203125],["x",6.906005859375],["(+.f64 (neg.f64 (*.f64 x (/.f64 1 (tan.f64 B)))) (/.f64 1 (sin.f64 B)))",7.887939453125]],"type":"regimes"},{"compiler":[[12,9]],"inputs":[["(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (*.f64 (neg.f64 x) (cos.f64 B)) 1) (sin.f64 B))","(/.f64 (fma.f64 (neg.f64 x) (cos.f64 B) 1) (sin.f64 B))"]],"stop":[["fuel",1]],"time":19.862060546875,"type":"simplify"},{"time":0.01904296875,"type":"soundness"},{"compiler":[[12,9]],"remove-preprocessing":[[]],"time":9.1748046875,"type":"end"}]
[{"compiler":[[15,10]],"method":["search"],"sampling":[[12,0.42515785148998475,0.5265716509279628,0.048270497582052485],[11,0.36664989027576667,0.5928806736374099,0.04046943608682341],[10,0.3198435213043922,0.6552891655992426,0.02486731309636525],[9,0.26523609083778865,0.7332997805515333,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":102.596923828125,"type":"analyze"},{"outcomes":[["body",256,"invalid",101.7490234375,2302],["body",256,"valid",367.4609375,8256]],"time":479.469970703125,"type":"sample"},{"compiler":[[14,9]],"inputs":[["0","1","2"],["(/.f64 (*.f64 x y) (*.f64 (*.f64 z z) (+.f64 z 1)))","(/.f64 (*.f64 y x) (*.f64 (*.f64 z z) (+.f64 z 1)))","(/.f64 (*.f64 z y) (*.f64 (*.f64 x x) (+.f64 x 1)))","(/.f64 (*.f64 x z) (*.f64 (*.f64 y y) (+.f64 y 1)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(/.f64 (*.f64 x y) (*.f64 (*.f64 z z) (+.f64 z 1)))","(/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))","(/.f64 (*.f64 y x) (*.f64 (*.f64 z z) (+.f64 z 1)))","(/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))","(/.f64 (*.f64 z y) (*.f64 (*.f64 x x) (+.f64 x 1)))","(/.f64 (/.f64 (*.f64 z y) x) (fma.f64 x x x))","(/.f64 (*.f64 x z) (*.f64 (*.f64 y y) (+.f64 y 1)))","(/.f64 (/.f64 (*.f64 x z) y) (fma.f64 y y y))"]],"symmetry":[[]],"time":72.069091796875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (*.f64 x y) (*.f64 (*.f64 z z) (+.f64 z 1)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 x y) (*.f64 (*.f64 z z) (+.f64 z 1)))","(/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))"]],"time":19.181884765625,"type":"simplify"},{"compiler":[[24,12]],"time":0.35009765625,"type":"eval"},{"alts":[["(/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))","next",9.479581631159263],["(/.f64 (*.f64 x y) (*.f64 (*.f64 z z) (+.f64 z 1)))","fresh",13.902067095363186]],"compiler":[[13,7],[14,9],[13,7],[14,9]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[9.409269131159261],"time":1.280029296875,"type":"prune"},{"compiler":[[28,7]],"locations":[["(/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))",2.79136030213361,true],["(/.f64 (*.f64 x y) z)",7.5643308099155355,true]],"time":6.179931640625,"type":"localize"},{"count":[[2,72]],"series":[["(/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))","z","-inf",0.3310546875],["(/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))","z","inf",0.428955078125],["(/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))","z","0",0.346923828125],["(/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))","y","-inf",0.322021484375],["(/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))","y","inf",0.55908203125],["(/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))","y","0",0.556884765625],["(/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))","x","-inf",0.347900390625],["(/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))","x","inf",0.569091796875],["(/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))","x","0",1.0869140625],["(/.f64 (*.f64 x y) z)","z","-inf",0.327880859375],["(/.f64 (*.f64 x y) z)","z","inf",0.364990234375],["(/.f64 (*.f64 x y) z)","z","0",0.424072265625],["(/.f64 (*.f64 x y) z)","y","-inf",0.2890625],["(/.f64 (*.f64 x y) z)","y","inf",0.450927734375],["(/.f64 (*.f64 x y) z)","y","0",0.68896484375],["(/.f64 (*.f64 x y) z)","x","-inf",0.39599609375],["(/.f64 (*.f64 x y) z)","x","inf",0.371826171875],["(/.f64 (*.f64 x y) z)","x","0",0.56201171875]],"time":8.697998046875,"type":"series"},{"count":[[2,159]],"inputs":[["(/.f64 (*.f64 x y) z)","(/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x y) z) 0) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) z) (*.f64 (/.f64 (*.f64 x y) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 x y) z)) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) z) (*.f64 0 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 z)) (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (/.f64 (cbrt.f64 (pow.f64 (*.f64 x y) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x y)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 z)) (/.f64 y (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 z)) (/.f64 x (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) (cbrt.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 (*.f64 x y) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 x y) 2)) z) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (*.f64 z z))) (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 (*.f64 z z))) (cbrt.f64 (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x y) z))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 x y)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) y) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 z)) x) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (cbrt.f64 (pow.f64 (*.f64 x y) 2))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) (cbrt.f64 (*.f64 x y))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) (cbrt.f64 (neg.f64 (*.f64 x y)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 y (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (/.f64 x (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 z 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) z) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x y) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 0) (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) (*.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))) (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) (*.f64 0 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (fma.f64 z z z))) (/.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 2)) (cbrt.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (/.f64 -1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 (fma.f64 z z z))) (/.f64 (/.f64 1 z) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (/.f64 (/.f64 1 z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) z) (/.f64 1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 z z z)) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z z z) (neg.f64 1/3)) (/.f64 (/.f64 (*.f64 x y) z) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) (fma.f64 z z z)) (cbrt.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 z) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))) (/.f64 (*.f64 x y) (cbrt.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x y) z) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))) (pow.f64 (fma.f64 z z z) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fma.f64 z z z)) (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 z) (fma.f64 z z z)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (fma.f64 z z z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (fma.f64 z z z)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x y) z) (cbrt.f64 (fma.f64 z z z))) (pow.f64 (cbrt.f64 (fma.f64 z z z)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (*.f64 x y)) (fma.f64 z z z)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x y)) (/.f64 1 (*.f64 (neg.f64 z) (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (*.f64 x y) (cbrt.f64 z))) (*.f64 (neg.f64 (fma.f64 z z z)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 z z z) (neg.f64 1/3)) (*.f64 x y)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 z z z) (neg.f64 1/3)) (neg.f64 (*.f64 x y))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 z z z) (neg.f64 1/3)) (/.f64 (*.f64 x y) (cbrt.f64 z))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x y)) (pow.f64 (fma.f64 z z z) (neg.f64 1/3))) (*.f64 (neg.f64 z) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 (fma.f64 z z z))) (*.f64 z (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) -1) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 (fma.f64 z z z) (neg.f64 1/3))) (*.f64 (cbrt.f64 (*.f64 z z)) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 1) (*.f64 (cbrt.f64 (*.f64 z z)) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) (neg.f64 (*.f64 (neg.f64 z) (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (neg.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (fma.f64 z z z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x y)) (fma.f64 z z z)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) z) (cbrt.f64 (fma.f64 z z z))) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) (*.f64 z (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (*.f64 (neg.f64 z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 2)) (cbrt.f64 (neg.f64 (/.f64 (*.f64 x y) z)))) (cbrt.f64 (neg.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 2)) (cbrt.f64 (/.f64 (*.f64 x y) z))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 (fma.f64 z z z))) (/.f64 1 z)) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 z z z)) (/.f64 (*.f64 x y) (cbrt.f64 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 z z z) (neg.f64 1/3)) (/.f64 (*.f64 x y) z)) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x y) z))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 2))) (cbrt.f64 (neg.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 2))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x y)) (/.f64 -1 (fma.f64 z z z))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) (/.f64 -1 (fma.f64 z z z))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 (*.f64 x y)) (fma.f64 z z z)) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 x y) z) (cbrt.f64 (fma.f64 z z z))) 1) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (fma.f64 z z z)) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (/.f64 1 (fma.f64 z z z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) (fma.f64 z z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) (fma.f64 z z z))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) z) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) (/.f64 (/.f64 1 z) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (fma.f64 z z z)) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (fma.f64 z z z)) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (fma.f64 z z z)) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (fma.f64 z z z)) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 x y) z) (cbrt.f64 (fma.f64 z z z))) 1) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 x y) z) (cbrt.f64 (fma.f64 z z z))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z z z))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z z z))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (cbrt.f64 (fma.f64 z z z))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) z) z) (+.f64 z 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) z) (+.f64 z 1)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) z) -1) (neg.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (*.f64 x y)) (fma.f64 z z z)) -1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (*.f64 x y)) (fma.f64 z z z)) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (*.f64 x y)) (fma.f64 z z z)) (cbrt.f64 (neg.f64 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (*.f64 x y)) (fma.f64 z z z)) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) (/.f64 (*.f64 z (fma.f64 z z z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (/.f64 (*.f64 (neg.f64 z) (fma.f64 z z z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) (*.f64 (*.f64 z (fma.f64 z z z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (*.f64 (*.f64 (neg.f64 z) (fma.f64 z z z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (*.f64 (fma.f64 z z z) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (*.f64 (neg.f64 (fma.f64 z z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) (*.f64 (neg.f64 (fma.f64 z z z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) (*.f64 (neg.f64 z) (neg.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (*.f64 z (neg.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 x y) z) (cbrt.f64 (fma.f64 z z z)))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (neg.f64 (*.f64 x y)) (fma.f64 z z z))) z)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (fma.f64 z z z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (/.f64 1 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (fma.f64 z z z)) (neg.f64 (/.f64 (*.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 3))))))"]],"rules":[["egg-rr",99],["egg-rr",60]],"time":29.544921875,"type":"rewrite"},{"count":[[231,178]],"inputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (pow.f64 z 2))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (*.f64 y x) z)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (*.f64 y x)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y (*.f64 z x))))))","(/.f64 (*.f64 y x) (pow.f64 z 3))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4)))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 6))) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))))","(/.f64 (*.f64 y x) (pow.f64 z 3))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4)))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 6))) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (pow.f64 z 2))","(/.f64 (*.f64 y x) (*.f64 z z))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (*.f64 y x) z)))","(fma.f64 (*.f64 y x) (pow.f64 z -2) (neg.f64 (/.f64 (*.f64 y x) z)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (*.f64 y x)))","(fma.f64 (*.f64 y x) (pow.f64 z -2) (fma.f64 x y (neg.f64 (/.f64 (*.f64 y x) z))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y (*.f64 z x))))))","(fma.f64 (*.f64 y x) (pow.f64 z -2) (-.f64 (fma.f64 y x (neg.f64 (*.f64 y (*.f64 z x)))) (/.f64 (*.f64 y x) z)))","(/.f64 (*.f64 y x) (pow.f64 z 3))","(*.f64 (*.f64 y x) (pow.f64 z -3))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))","(fma.f64 (*.f64 y x) (pow.f64 z -3) (*.f64 (neg.f64 (*.f64 y x)) (pow.f64 z -4)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4)))))","(-.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z -5) (pow.f64 z -3))) (*.f64 (*.f64 y x) (pow.f64 z -4)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 6))) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))))","(+.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z -5) (pow.f64 z -3))) (neg.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z -6) (pow.f64 z -4)))))","(/.f64 (*.f64 y x) (pow.f64 z 3))","(*.f64 (*.f64 y x) (pow.f64 z -3))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))","(fma.f64 (*.f64 y x) (pow.f64 z -3) (*.f64 (neg.f64 (*.f64 y x)) (pow.f64 z -4)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4)))))","(-.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z -5) (pow.f64 z -3))) (*.f64 (*.f64 y x) (pow.f64 z -4)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 6))) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))))","(+.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z -5) (pow.f64 z -3))) (neg.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z -6) (pow.f64 z -4)))))"]],"time":198.8759765625,"type":"simplify"},{"compiler":[[2921,787]],"time":23.197021484375,"type":"eval"},{"alts":[["(/.f64 (/.f64 (*.f64 x (/.f64 y (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z)) (fma.f64 z z z))","fresh",9.987704184750573],["(/.f64 (*.f64 (/.f64 x z) y) (fma.f64 z z z))","fresh",4.825657996285811],["(/.f64 (*.f64 (/.f64 x (cbrt.f64 (*.f64 z z))) (/.f64 y (cbrt.f64 z))) (fma.f64 z z z))","fresh",8.895706495229199],["(/.f64 (*.f64 x (/.f64 y z)) (fma.f64 z z z))","next",3.51078196841074],["(/.f64 (*.f64 x y) (*.f64 z (fma.f64 z z z)))","fresh",13.902067095363186],["(/.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) (cbrt.f64 (*.f64 x y))) (cbrt.f64 z)) (fma.f64 z z z))","fresh",15.285092018028957],["(/.f64 (/.f64 (/.f64 (*.f64 x y) z) z) (+.f64 z 1))","fresh",9.263770235423072],["(/.f64 (*.f64 (/.f64 1 (fma.f64 z z z)) (/.f64 (*.f64 x y) (cbrt.f64 z))) (cbrt.f64 (*.f64 z z)))","fresh",12.59079760406559]],"compiler":[[19,11],[13,7],[19,11],[13,7],[13,7],[24,14],[14,9],[21,13],[19,11],[13,7],[19,11],[13,7],[13,7],[24,14],[14,9],[21,13]],"count":[[180,8]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[178,8],"picked":[1,0]}],"min-error":[2.473446821223661],"time":53.636962890625,"type":"prune"},{"compiler":[[28,7]],"locations":[["(/.f64 (*.f64 x (/.f64 y z)) (fma.f64 z z z))",2.79136030213361,true],["(*.f64 x (/.f64 y z))",3.254726005166373,true]],"time":5.426025390625,"type":"localize"},{"count":[[2,72]],"series":[["(/.f64 (*.f64 x (/.f64 y z)) (fma.f64 z z z))","z","-inf",0.19091796875],["(/.f64 (*.f64 x (/.f64 y z)) (fma.f64 z z z))","z","inf",0.2109375],["(/.f64 (*.f64 x (/.f64 y z)) (fma.f64 z z z))","z","0",0.177001953125],["(/.f64 (*.f64 x (/.f64 y z)) (fma.f64 z z z))","y","-inf",0.18603515625],["(/.f64 (*.f64 x (/.f64 y z)) (fma.f64 z z z))","y","inf",0.158935546875],["(/.f64 (*.f64 x (/.f64 y z)) (fma.f64 z z z))","y","0",0.157958984375],["(/.f64 (*.f64 x (/.f64 y z)) (fma.f64 z z z))","x","-inf",0.18798828125],["(/.f64 (*.f64 x (/.f64 y z)) (fma.f64 z z z))","x","inf",0.1611328125],["(/.f64 (*.f64 x (/.f64 y z)) (fma.f64 z z z))","x","0",0.170166015625],["(*.f64 x (/.f64 y z))","z","-inf",0.15185546875],["(*.f64 x (/.f64 y z))","z","inf",0.15087890625],["(*.f64 x (/.f64 y z))","z","0",0.16796875],["(*.f64 x (/.f64 y z))","y","-inf",0.154052734375],["(*.f64 x (/.f64 y z))","y","inf",0.156005859375],["(*.f64 x (/.f64 y z))","y","0",0.1708984375],["(*.f64 x (/.f64 y z))","x","-inf",0.154052734375],["(*.f64 x (/.f64 y z))","x","inf",0.156982421875],["(*.f64 x (/.f64 y z))","x","0",0.212158203125]],"time":3.2890625,"type":"series"},{"count":[[2,165]],"inputs":[["(*.f64 x (/.f64 y z))","(/.f64 (*.f64 x (/.f64 y z)) (fma.f64 z z z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) z) (*.f64 (/.f64 (*.f64 x y) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x y) z) 0) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) z) (*.f64 0 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 x y) z)) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 z)) (/.f64 y (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) (cbrt.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (/.f64 y z))) (cbrt.f64 (pow.f64 (/.f64 y z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y z) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (*.f64 z z))) (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (/.f64 y z) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (*.f64 x (cbrt.f64 (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) x) (cbrt.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 y z)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x y) z))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 y z)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x y)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) y) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (*.f64 x y))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 y (cbrt.f64 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) (cbrt.f64 (*.f64 x y))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x y)) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) x)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) x)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 z)) x) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 y (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x y)) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 z 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) z) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x y) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) (*.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 0) (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) (*.f64 0 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))) (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (fma.f64 z z z))) (/.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 2)) (cbrt.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (/.f64 -1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) (/.f64 x (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 y z) (cbrt.f64 (fma.f64 z z z))) (/.f64 x (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (/.f64 y z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (fma.f64 z z z))) (/.f64 (/.f64 y z) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) z) (/.f64 1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 z z z)) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z z z) (neg.f64 1/3)) (/.f64 (/.f64 (*.f64 x y) z) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 y z) (fma.f64 z z z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 y z) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))) (/.f64 x (cbrt.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))) (/.f64 (/.f64 y z) (cbrt.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x y) z) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))) (pow.f64 (fma.f64 z z z) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) (fma.f64 z z z)) (cbrt.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (fma.f64 z z z)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (fma.f64 z z z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fma.f64 z z z)) (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (fma.f64 z z z)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x y) z) (cbrt.f64 (fma.f64 z z z))) (pow.f64 (cbrt.f64 (fma.f64 z z z)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (/.f64 1 (*.f64 z (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) z) z) (+.f64 z 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 x y) z) (cbrt.f64 (fma.f64 z z z))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z z z))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z z z))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 z z z) (neg.f64 1/3)) (*.f64 x y)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 z z z) (neg.f64 1/3)) (/.f64 (*.f64 x y) (cbrt.f64 z))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 z z z) (neg.f64 1/3)) (neg.f64 (*.f64 x y))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (*.f64 x y) (cbrt.f64 z))) (*.f64 (neg.f64 (fma.f64 z z z)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (*.f64 x y))) (*.f64 (neg.f64 (fma.f64 z z z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x y)) 1) (*.f64 z (neg.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) (pow.f64 (fma.f64 z z z) (neg.f64 1/3))) (*.f64 z (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) -1) (*.f64 z (neg.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x y)) 1) (*.f64 (neg.f64 z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x y)) (pow.f64 (fma.f64 z z z) (neg.f64 1/3))) (*.f64 (neg.f64 z) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x y)) -1) (*.f64 (neg.f64 z) (neg.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 1) (*.f64 (cbrt.f64 (*.f64 z z)) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 (fma.f64 z z z) (neg.f64 1/3))) (*.f64 (cbrt.f64 (*.f64 z z)) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) -1) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (neg.f64 (*.f64 z (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (neg.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (fma.f64 z z z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) z) (cbrt.f64 (fma.f64 z z z))) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) (*.f64 z (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 y z) (cbrt.f64 (fma.f64 z z z))) x) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 z z z)) (neg.f64 (*.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 z z z)) (/.f64 (*.f64 x y) (cbrt.f64 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 z z z) (neg.f64 1/3)) (/.f64 (*.f64 x y) z)) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 2)) (cbrt.f64 (/.f64 (*.f64 x y) z))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 2)) (cbrt.f64 (neg.f64 (/.f64 (*.f64 x y) z)))) (cbrt.f64 (neg.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 (fma.f64 z z z))) (/.f64 y z)) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (/.f64 y z) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y z) (/.f64 x (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 x y) z) (cbrt.f64 (fma.f64 z z z))) 1) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (fma.f64 z z z)) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x y)) (/.f64 -1 (fma.f64 z z z))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x y)) (/.f64 1 (fma.f64 z z z))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (/.f64 1 (fma.f64 z z z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) z) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (/.f64 x (fma.f64 z z z))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (/.f64 x (fma.f64 z z z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (/.f64 x (fma.f64 z z z))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) (fma.f64 z z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 2))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x y) z))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 2))) (cbrt.f64 (neg.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (fma.f64 z z z)) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (fma.f64 z z z)) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (fma.f64 z z z)) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (fma.f64 z z z)) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (cbrt.f64 (fma.f64 z z z))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) z) (+.f64 z 1)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) z) -1) (neg.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 x y) z) (cbrt.f64 (fma.f64 z z z))) 1) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) (/.f64 (*.f64 z (fma.f64 z z z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) (*.f64 (*.f64 z (fma.f64 z z z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (*.f64 (fma.f64 z z z) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (*.f64 (fma.f64 z z z) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (*.f64 (neg.f64 (fma.f64 z z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x y) (fma.f64 z z z))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 x y) z) (cbrt.f64 (fma.f64 z z z)))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (neg.f64 (/.f64 (*.f64 x y) z)) (fma.f64 z z z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 y z)) (/.f64 x (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z)) 3))))))"]],"rules":[["egg-rr",100],["egg-rr",65]],"time":29.4599609375,"type":"rewrite"},{"count":[[237,184]],"inputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (pow.f64 z 2))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (*.f64 y x) z)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (*.f64 y x)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y (*.f64 z x))))))","(/.f64 (*.f64 y x) (pow.f64 z 3))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4)))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 6))) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))))","(/.f64 (*.f64 y x) (pow.f64 z 3))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4)))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 6))) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (pow.f64 z 2))","(/.f64 (*.f64 y x) (*.f64 z z))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (*.f64 y x) z)))","(fma.f64 (*.f64 y x) (pow.f64 z -2) (neg.f64 (/.f64 (*.f64 y x) z)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (*.f64 y x)))","(fma.f64 (*.f64 y x) (pow.f64 z -2) (fma.f64 x y (neg.f64 (/.f64 (*.f64 y x) z))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y (*.f64 z x))))))","(fma.f64 (*.f64 y x) (pow.f64 z -2) (-.f64 (fma.f64 y x (neg.f64 (*.f64 y (*.f64 z x)))) (/.f64 (*.f64 y x) z)))","(/.f64 (*.f64 y x) (pow.f64 z 3))","(*.f64 (*.f64 y x) (pow.f64 z -3))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))","(fma.f64 (*.f64 y x) (pow.f64 z -3) (*.f64 (neg.f64 (*.f64 y x)) (pow.f64 z -4)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4)))))","(-.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z -5) (pow.f64 z -3))) (*.f64 (*.f64 y x) (pow.f64 z -4)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 6))) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))))","(+.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z -5) (pow.f64 z -3))) (neg.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z -6) (pow.f64 z -4)))))","(/.f64 (*.f64 y x) (pow.f64 z 3))","(*.f64 (*.f64 y x) (pow.f64 z -3))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))","(fma.f64 (*.f64 y x) (pow.f64 z -3) (*.f64 (neg.f64 (*.f64 y x)) (pow.f64 z -4)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4)))))","(-.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z -5) (pow.f64 z -3))) (*.f64 (*.f64 y x) (pow.f64 z -4)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 6))) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))))","(+.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z -5) (pow.f64 z -3))) (neg.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z -6) (pow.f64 z -4)))))"]],"time":199.340087890625,"type":"simplify"},{"compiler":[[2975,809]],"time":21.51806640625,"type":"eval"},{"alts":[["(/.f64 (*.f64 (*.f64 x (cbrt.f64 (/.f64 y z))) (cbrt.f64 (pow.f64 (/.f64 y z) 2))) (fma.f64 z z z))","fresh",12.588229732687056],["(/.f64 (*.f64 (/.f64 x (cbrt.f64 (*.f64 z z))) (/.f64 y (cbrt.f64 z))) (fma.f64 z z z))","fresh",8.895706495229199],["(*.f64 x (/.f64 (/.f64 y z) (fma.f64 z z z)))","fresh",7.261906192690504],["(/.f64 (/.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 z)) (fma.f64 z z z))","fresh",15.285092018028957],["(/.f64 (*.f64 y (/.f64 x z)) (fma.f64 z z z))","fresh",4.825657996285811],["(*.f64 (/.f64 (/.f64 y z) (cbrt.f64 (fma.f64 z z z))) (/.f64 x (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))","fresh",12.84059449496551],["(*.f64 (/.f64 y z) (/.f64 x (fma.f64 z z z)))","next",4.185635625123829],["(/.f64 (*.f64 x (/.f64 y z)) (fma.f64 z z z))","done",3.51078196841074],["(*.f64 (/.f64 (/.f64 y z) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))) (/.f64 x (cbrt.f64 (fma.f64 z z z))))","fresh",12.720029510896358],["(*.f64 (/.f64 1 (fma.f64 z z z)) (/.f64 (*.f64 x y) z))","fresh",9.501397890927702],["(/.f64 (/.f64 (/.f64 (*.f64 x y) z) z) (+.f64 z 1))","fresh",9.263770235423072]],"compiler":[[21,12],[19,11],[13,7],[24,14],[13,7],[22,12],[13,7],[13,7],[22,12],[15,9],[14,9],[21,12],[19,11],[13,7],[24,14],[13,7],[22,12],[13,7],[22,12],[15,9],[14,9]],"count":[[192,11]],"kept":[{"done":[0,0],"fresh":[7,1],"new":[184,9],"picked":[1,1]}],"min-error":[1.1642444486107888],"time":62.89697265625,"type":"prune"},{"compiler":[[29,7]],"locations":[["(*.f64 (/.f64 y z) (/.f64 x (fma.f64 z z z)))",2.833527683853573,true],["(/.f64 x (fma.f64 z z z))",3.126856585121744,true]],"time":5.743896484375,"type":"localize"},{"count":[[2,60]],"series":[["(*.f64 (/.f64 y z) (/.f64 x (fma.f64 z z z)))","x","-inf",0.216064453125],["(*.f64 (/.f64 y z) (/.f64 x (fma.f64 z z z)))","x","inf",0.202880859375],["(*.f64 (/.f64 y z) (/.f64 x (fma.f64 z z z)))","x","0",0.169921875],["(*.f64 (/.f64 y z) (/.f64 x (fma.f64 z z z)))","z","-inf",0.257080078125],["(*.f64 (/.f64 y z) (/.f64 x (fma.f64 z z z)))","z","inf",0.221923828125],["(*.f64 (/.f64 y z) (/.f64 x (fma.f64 z z z)))","z","0",0.244873046875],["(*.f64 (/.f64 y z) (/.f64 x (fma.f64 z z z)))","y","-inf",0.197021484375],["(*.f64 (/.f64 y z) (/.f64 x (fma.f64 z z z)))","y","inf",0.18896484375],["(*.f64 (/.f64 y z) (/.f64 x (fma.f64 z z z)))","y","0",0.22607421875],["(/.f64 x (fma.f64 z z z))","z","-inf",0.266845703125],["(/.f64 x (fma.f64 z z z))","z","inf",0.343994140625],["(/.f64 x (fma.f64 z z z))","z","0",0.27392578125],["(/.f64 x (fma.f64 z z z))","x","-inf",0.458984375],["(/.f64 x (fma.f64 z z z))","x","inf",0.427001953125],["(/.f64 x (fma.f64 z z z))","x","0",1.506103515625]],"time":5.47314453125,"type":"series"},{"count":[[2,159]],"inputs":[["(/.f64 x (fma.f64 z z z))","(*.f64 (/.f64 y z) (/.f64 x (fma.f64 z z z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x (fma.f64 z z z)) 0) (/.f64 x (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (fma.f64 z z z)) (*.f64 (/.f64 x (fma.f64 z z z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 x (fma.f64 z z z))) (/.f64 x (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (fma.f64 z z z)) (*.f64 0 (/.f64 x (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (neg.f64 x) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (fma.f64 z z z))) (/.f64 (neg.f64 x) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (neg.f64 x) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (fma.f64 z z z))) (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)) (cbrt.f64 (/.f64 x (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 -1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (/.f64 (cbrt.f64 (*.f64 x x)) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (fma.f64 z z z))) (cbrt.f64 (/.f64 (*.f64 x x) (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 z z z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z z z) (neg.f64 1/3)) (/.f64 x (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (fma.f64 z z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x x)) (fma.f64 z z z)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))) (pow.f64 (fma.f64 z z z) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 x) (fma.f64 z z z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x x) (pow.f64 (fma.f64 z z z) 2))) (cbrt.f64 (/.f64 x (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fma.f64 z z z)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (fma.f64 z z z))) (pow.f64 (cbrt.f64 (fma.f64 z z z)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (cbrt.f64 (fma.f64 z z z))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z z z))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z z z))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x z) (+.f64 z 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (fma.f64 z z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (neg.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (fma.f64 z z z))) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (fma.f64 z z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 z z z) (neg.f64 1/3)) x) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x (fma.f64 z z z))) (cbrt.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)) (cbrt.f64 x)) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (neg.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 (fma.f64 z z z))) 1) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 (*.f64 x x) (pow.f64 (fma.f64 z z z) 2)))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (/.f64 (*.f64 x x) (pow.f64 (fma.f64 z z z) 2)))) (cbrt.f64 (neg.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2))) (cbrt.f64 (neg.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (cbrt.f64 (fma.f64 z z z))) 1) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (+.f64 z 1)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x -1) (neg.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (cbrt.f64 (fma.f64 z z z))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x (cbrt.f64 (fma.f64 z z z)))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (fma.f64 z z z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (fma.f64 z z z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (fma.f64 z z z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (fma.f64 z z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (neg.f64 x) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (neg.f64 x) (fma.f64 z z z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 0) (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) (*.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))) (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) (*.f64 0 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 2)) (cbrt.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 y z) (cbrt.f64 (fma.f64 z z z))) (/.f64 x (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 z)) (/.f64 (/.f64 x (fma.f64 z z z)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 (/.f64 x (fma.f64 z z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) (/.f64 x (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (fma.f64 z z z)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cbrt.f64 (/.f64 y z))) (fma.f64 z z z)) (cbrt.f64 (pow.f64 (/.f64 y z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y x) z) (/.f64 1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y z) (cbrt.f64 (/.f64 x (fma.f64 z z z)))) (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y z)) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) x) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (/.f64 y z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (fma.f64 z z z))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (neg.f64 (/.f64 (*.f64 y x) z)) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))) (/.f64 (/.f64 y z) (cbrt.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (/.f64 (*.f64 y x) z)) (fma.f64 z z z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) x) (fma.f64 z z z)) (cbrt.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 z z z)) (/.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (fma.f64 z z z)) z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (fma.f64 z z z)) (cbrt.f64 (*.f64 z z))) (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)) (/.f64 y z)) (cbrt.f64 (/.f64 x (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (/.f64 (*.f64 x (cbrt.f64 (/.f64 y z))) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 y z) (fma.f64 z z z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)) (*.f64 (/.f64 y z) (cbrt.f64 (/.f64 x (fma.f64 z z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (/.f64 (*.f64 y x) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 y x) z) (cbrt.f64 (fma.f64 z z z))) (pow.f64 (cbrt.f64 (fma.f64 z z z)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 y x) z)) (/.f64 -1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (*.f64 y x)) (fma.f64 z z z)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) (/.f64 1 (*.f64 z (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 z (fma.f64 z z z))) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 y x)) (/.f64 1 (*.f64 (neg.f64 z) (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 z 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) (cbrt.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) (cbrt.f64 (*.f64 z (fma.f64 z z z)))) (pow.f64 (cbrt.f64 (*.f64 z (fma.f64 z z z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 y x) z) (cbrt.f64 (fma.f64 z z z))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z z z))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z z z))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y x) z) z) (+.f64 z 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y x)) (*.f64 (neg.f64 z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y x) (*.f64 z (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 y x)) (fma.f64 z z z)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 y x) z)) (neg.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y x) z) (cbrt.f64 (fma.f64 z z z))) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (/.f64 x (fma.f64 z z z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y z) (/.f64 x (cbrt.f64 (fma.f64 z z z)))) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 y z) (cbrt.f64 (fma.f64 z z z))) x) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 2)) (cbrt.f64 (/.f64 (*.f64 y x) z))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 2)) (cbrt.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 2)) (cbrt.f64 (*.f64 y x))) (cbrt.f64 (*.f64 z (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (fma.f64 z z z)) (/.f64 y (cbrt.f64 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y x) z) -1) (neg.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 (fma.f64 z z z))) (/.f64 y z)) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 y x)) (/.f64 1 z)) (neg.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 y x) z)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 2))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 y x) (fma.f64 z z z))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 y x)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 2))) (cbrt.f64 (*.f64 z (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y z) (/.f64 x (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 y x) z) (cbrt.f64 (fma.f64 z z z))) 1) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 (*.f64 y x)) (fma.f64 z z z)) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 (*.f64 y x) z)) 1) (neg.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)) (/.f64 y z))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)) (/.f64 y z))) (cbrt.f64 (neg.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (/.f64 (/.f64 x (fma.f64 z z z)) (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) x) (fma.f64 z z z))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) x) (fma.f64 z z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) (*.f64 z (cbrt.f64 (fma.f64 z z z)))) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 y x) z) (cbrt.f64 (fma.f64 z z z))) (cbrt.f64 (fma.f64 z z z))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 y x) z) (cbrt.f64 (fma.f64 z z z))) 1) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (*.f64 y x)) (fma.f64 z z z)) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (*.f64 y x)) (fma.f64 z z z)) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y x) z) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y x) z) -1) (neg.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 y x) z)) (cbrt.f64 (fma.f64 z z z))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 y x) z)) 1) (neg.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 y x) z) (cbrt.f64 (fma.f64 z z z)))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 y x)) 1) (*.f64 (neg.f64 z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (neg.f64 (/.f64 (*.f64 y x) z)) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (neg.f64 x) (fma.f64 z z z)) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 y z)) (/.f64 x (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 x (fma.f64 z z z)) (neg.f64 (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 y z) (/.f64 (neg.f64 x) (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 y x) (*.f64 (neg.f64 z) (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (*.f64 y x) z) (neg.f64 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 3))))))"]],"rules":[["egg-rr",107],["egg-rr",52]],"time":33.809814453125,"type":"rewrite"},{"count":[[219,192]],"inputs":[["(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x z)","(+.f64 (*.f64 -1 x) (/.f64 x z))","(+.f64 (*.f64 z x) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 z 2) x)) (+.f64 (*.f64 z x) (+.f64 (*.f64 -1 x) (/.f64 x z))))","(/.f64 x (pow.f64 z 2))","(+.f64 (/.f64 x (pow.f64 z 2)) (*.f64 -1 (/.f64 x (pow.f64 z 3))))","(+.f64 (/.f64 x (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 3))) (/.f64 x (pow.f64 z 4))))","(+.f64 (/.f64 x (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 3))) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 5))) (/.f64 x (pow.f64 z 4)))))","(/.f64 x (pow.f64 z 2))","(+.f64 (/.f64 x (pow.f64 z 2)) (*.f64 -1 (/.f64 x (pow.f64 z 3))))","(+.f64 (/.f64 x (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 3))) (/.f64 x (pow.f64 z 4))))","(+.f64 (/.f64 x (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 3))) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 5))) (/.f64 x (pow.f64 z 4)))))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (pow.f64 z 2))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (*.f64 y x) z)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (*.f64 y x)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y (*.f64 z x))))))","(/.f64 (*.f64 y x) (pow.f64 z 3))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4)))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 6))) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))))","(/.f64 (*.f64 y x) (pow.f64 z 3))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4)))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 6))) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (fma.f64 z z z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (fma.f64 z z z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (fma.f64 z z z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (fma.f64 z z z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (fma.f64 z z z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (fma.f64 z z z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (fma.f64 z z z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (fma.f64 z z z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (fma.f64 z z z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (fma.f64 z z z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (fma.f64 z z z))","(/.f64 x (+.f64 (pow.f64 z 2) z))","(/.f64 x (fma.f64 z z z))","(/.f64 x z)","(+.f64 (*.f64 -1 x) (/.f64 x z))","(-.f64 (/.f64 x z) x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(fma.f64 z x (-.f64 (/.f64 x z) x))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 z 2) x)) (+.f64 (*.f64 z x) (+.f64 (*.f64 -1 x) (/.f64 x z))))","(+.f64 (*.f64 x (+.f64 (neg.f64 (*.f64 z z)) z)) (-.f64 (/.f64 x z) x))","(/.f64 x (pow.f64 z 2))","(/.f64 (/.f64 x z) z)","(+.f64 (/.f64 x (pow.f64 z 2)) (*.f64 -1 (/.f64 x (pow.f64 z 3))))","(-.f64 (/.f64 (/.f64 x z) z) (/.f64 x (pow.f64 z 3)))","(+.f64 (/.f64 x (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 3))) (/.f64 x (pow.f64 z 4))))","(fma.f64 x (pow.f64 z (neg.f64 2)) (-.f64 (/.f64 x (pow.f64 z 4)) (/.f64 x (pow.f64 z 3))))","(+.f64 (/.f64 x (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 3))) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 5))) (/.f64 x (pow.f64 z 4)))))","(fma.f64 x (pow.f64 z (neg.f64 2)) (-.f64 (-.f64 (/.f64 x (pow.f64 z 4)) (/.f64 x (pow.f64 z 5))) (/.f64 x (pow.f64 z 3))))","(/.f64 x (pow.f64 z 2))","(/.f64 (/.f64 x z) z)","(+.f64 (/.f64 x (pow.f64 z 2)) (*.f64 -1 (/.f64 x (pow.f64 z 3))))","(-.f64 (/.f64 (/.f64 x z) z) (/.f64 x (pow.f64 z 3)))","(+.f64 (/.f64 x (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 3))) (/.f64 x (pow.f64 z 4))))","(fma.f64 x (pow.f64 z (neg.f64 2)) (-.f64 (/.f64 x (pow.f64 z 4)) (/.f64 x (pow.f64 z 3))))","(+.f64 (/.f64 x (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 3))) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 5))) (/.f64 x (pow.f64 z 4)))))","(fma.f64 x (pow.f64 z (neg.f64 2)) (-.f64 (-.f64 (/.f64 x (pow.f64 z 4)) (/.f64 x (pow.f64 z 5))) (/.f64 x (pow.f64 z 3))))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (pow.f64 z 2))","(/.f64 (*.f64 y x) (*.f64 z z))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (*.f64 y x) z)))","(-.f64 (/.f64 (*.f64 y x) (*.f64 z z)) (/.f64 (*.f64 y x) z))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (*.f64 y x)))","(+.f64 (/.f64 (*.f64 y x) (*.f64 z z)) (fma.f64 y x (neg.f64 (/.f64 (*.f64 y x) z))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y (*.f64 z x))))))","(fma.f64 (*.f64 y x) (pow.f64 z (neg.f64 2)) (-.f64 (fma.f64 y x (neg.f64 (*.f64 y (*.f64 z x)))) (/.f64 (*.f64 y x) z)))","(/.f64 (*.f64 y x) (pow.f64 z 3))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))","(-.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (/.f64 (*.f64 y x) (pow.f64 z 4)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4)))))","(-.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z (neg.f64 5)) (pow.f64 z (neg.f64 3)))) (/.f64 (*.f64 y x) (pow.f64 z 4)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 6))) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))))","(+.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z (neg.f64 5)) (pow.f64 z (neg.f64 3)))) (neg.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z (neg.f64 6)) (pow.f64 z (neg.f64 4))))))","(/.f64 (*.f64 y x) (pow.f64 z 3))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))","(-.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (/.f64 (*.f64 y x) (pow.f64 z 4)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4)))))","(-.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z (neg.f64 5)) (pow.f64 z (neg.f64 3)))) (/.f64 (*.f64 y x) (pow.f64 z 4)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 6))) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))))","(+.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z (neg.f64 5)) (pow.f64 z (neg.f64 3)))) (neg.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z (neg.f64 6)) (pow.f64 z (neg.f64 4))))))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))","(/.f64 (*.f64 y x) (*.f64 (+.f64 (pow.f64 z 2) z) z))","(/.f64 (*.f64 y x) (*.f64 (fma.f64 z z z) z))"]],"time":200.49609375,"type":"simplify"},{"compiler":[[3234,906]],"time":25.425048828125,"type":"eval"},{"alts":[["(*.f64 (/.f64 y z) (/.f64 (/.f64 x z) (+.f64 z 1)))","next",3.028539906976156],["(*.f64 (/.f64 y z) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)) (cbrt.f64 (/.f64 x (fma.f64 z z z)))))","fresh",11.303929711858373],["(*.f64 (/.f64 y z) (/.f64 x (fma.f64 z z z)))","done",4.185635625123829],["(/.f64 (/.f64 (/.f64 (*.f64 y x) z) z) (+.f64 z 1))","fresh",9.263770235423072],["(/.f64 (*.f64 x (/.f64 y z)) (fma.f64 z z z))","done",3.51078196841074],["(*.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) x) (fma.f64 z z z)) (cbrt.f64 (/.f64 y z)))","fresh",12.392677437346752],["(/.f64 (*.f64 y x) (*.f64 z (fma.f64 z z z)))","fresh",13.902067095363186],["(/.f64 (*.f64 y (/.f64 x z)) (fma.f64 z z z))","fresh",4.825657996285811]],"compiler":[[14,9],[24,12],[13,7],[14,9],[13,7],[21,12],[13,7],[13,7],[14,9],[24,12],[14,9],[21,12],[13,7],[13,7]],"count":[[203,8]],"kept":[{"done":[1,1],"fresh":[9,1],"new":[192,5],"picked":[1,1]}],"min-error":[0.01171875],"time":64.6689453125,"type":"prune"},{"compiler":[[34,15]],"locations":[["(/.f64 (/.f64 x z) (+.f64 z 1))",0.06640625,true],["(*.f64 (/.f64 y z) (/.f64 (/.f64 x z) (+.f64 z 1)))",2.833527683853573,true]],"time":7.408935546875,"type":"localize"},{"count":[[2,60]],"series":[["(/.f64 (/.f64 x z) (+.f64 z 1))","z","-inf",0.256103515625],["(/.f64 (/.f64 x z) (+.f64 z 1))","z","inf",0.176025390625],["(/.f64 (/.f64 x z) (+.f64 z 1))","z","0",0.203125],["(/.f64 (/.f64 x z) (+.f64 z 1))","x","-inf",0.405029296875],["(/.f64 (/.f64 x z) (+.f64 z 1))","x","inf",0.458984375],["(/.f64 (/.f64 x z) (+.f64 z 1))","x","0",0.512939453125],["(*.f64 (/.f64 y z) (/.f64 (/.f64 x z) (+.f64 z 1)))","x","-inf",0.360107421875],["(*.f64 (/.f64 y z) (/.f64 (/.f64 x z) (+.f64 z 1)))","x","inf",0.596923828125],["(*.f64 (/.f64 y z) (/.f64 (/.f64 x z) (+.f64 z 1)))","x","0",0.5869140625],["(*.f64 (/.f64 y z) (/.f64 (/.f64 x z) (+.f64 z 1)))","z","-inf",0.31494140625],["(*.f64 (/.f64 y z) (/.f64 (/.f64 x z) (+.f64 z 1)))","z","inf",0.22802734375],["(*.f64 (/.f64 y z) (/.f64 (/.f64 x z) (+.f64 z 1)))","z","0",0.239013671875],["(*.f64 (/.f64 y z) (/.f64 (/.f64 x z) (+.f64 z 1)))","y","-inf",0.331787109375],["(*.f64 (/.f64 y z) (/.f64 (/.f64 x z) (+.f64 z 1)))","y","inf",0.618896484375],["(*.f64 (/.f64 y z) (/.f64 (/.f64 x z) (+.f64 z 1)))","y","0",0.778076171875]],"time":6.2861328125,"type":"series"},{"count":[[2,158]],"inputs":[["(*.f64 (/.f64 y z) (/.f64 (/.f64 x z) (+.f64 z 1)))","(/.f64 (/.f64 x z) (+.f64 z 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 0) (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) (*.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))) (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) (*.f64 0 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 y x) (*.f64 z z)) (cbrt.f64 (+.f64 z 1))) (pow.f64 (cbrt.f64 (+.f64 z 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 2)) (cbrt.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 y z) (cbrt.f64 (+.f64 z 1))) (/.f64 (/.f64 x z) (cbrt.f64 (pow.f64 (+.f64 z 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 (/.f64 x (fma.f64 z z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 z)) (*.f64 (/.f64 x (fma.f64 z z z)) (pow.f64 (cbrt.f64 z) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) (/.f64 x (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (fma.f64 z z z)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cbrt.f64 (/.f64 y z))) (fma.f64 z z z)) (cbrt.f64 (pow.f64 (/.f64 y z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y x) (*.f64 z z)) (/.f64 1 (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y z) (cbrt.f64 (/.f64 x (fma.f64 z z z)))) (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (/.f64 x (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) (/.f64 (/.f64 y z) (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (fma.f64 z z z))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 y z) (+.f64 z 1)) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (fma.f64 z z z)) z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)) (/.f64 y z)) (cbrt.f64 (/.f64 x (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (/.f64 (*.f64 x (cbrt.f64 (/.f64 y z))) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x (fma.f64 z z z)) (pow.f64 (cbrt.f64 z) -2)) (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (/.f64 (*.f64 y x) (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)) (*.f64 (/.f64 y z) (cbrt.f64 (/.f64 x (fma.f64 z z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x z) (cbrt.f64 (pow.f64 (+.f64 z 1) 2))) (/.f64 (/.f64 y z) (cbrt.f64 (+.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (/.f64 x (fma.f64 z z z))) (cbrt.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 z 1)) (/.f64 (*.f64 y x) (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 y x) z)) (/.f64 1 (*.f64 z (-.f64 -1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 y x) (*.f64 z z))) (/.f64 1 (-.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y x) z) (/.f64 1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 z z z)) (/.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 y x) z) (-.f64 -1 z)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 y x) z)) (*.f64 z (-.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) (*.f64 z z)) (+.f64 z 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 y x) (*.f64 z z))) (-.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y x) (*.f64 z z)) (cbrt.f64 (+.f64 z 1))) (cbrt.f64 (pow.f64 (+.f64 z 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y x) z) (-.f64 -1 z)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (/.f64 x (fma.f64 z z z)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (/.f64 x (fma.f64 z z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y z) (/.f64 (/.f64 x z) (cbrt.f64 (pow.f64 (+.f64 z 1) 2)))) (cbrt.f64 (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) (/.f64 1 (+.f64 z 1))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 y x)) (/.f64 1 (+.f64 z 1))) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (neg.f64 (*.f64 y x))) (/.f64 1 (+.f64 z 1))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)) (/.f64 y z))) (cbrt.f64 (-.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)) (/.f64 y z))) (cbrt.f64 (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (/.f64 x (fma.f64 z z z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) (/.f64 1 (fma.f64 z z z))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 y x)) (/.f64 1 (fma.f64 z z z))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 y x) z) (-.f64 -1 z)) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 (*.f64 y x) z)) 1) (*.f64 z (-.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 (*.f64 y x) (*.f64 z z))) 1) (-.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 y x) (*.f64 z z)) (cbrt.f64 (+.f64 z 1))) 1) (cbrt.f64 (pow.f64 (+.f64 z 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 y x) (fma.f64 z z z))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 y x) (*.f64 z z))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 2))) (cbrt.f64 (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 y x) z)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 2))) (cbrt.f64 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (/.f64 y z) (+.f64 z 1))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) (/.f64 (/.f64 y z) (+.f64 z 1))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (/.f64 (/.f64 y z) (+.f64 z 1))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 x (+.f64 z 1))) (/.f64 y z)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 x z) (cbrt.f64 (+.f64 z 1))) (/.f64 y z)) (cbrt.f64 (pow.f64 (+.f64 z 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (+.f64 z 1)) (/.f64 y z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (*.f64 (/.f64 x (fma.f64 z z z)) (pow.f64 (cbrt.f64 z) -2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 y x) (*.f64 z z)) (cbrt.f64 (+.f64 z 1)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 z 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 y (neg.f64 z)) (/.f64 x (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 x z)) (/.f64 (/.f64 y z) (+.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 x z) (-.f64 -1 z)) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 x (fma.f64 z z z)) (/.f64 y (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 y z) (/.f64 (/.f64 x z) (-.f64 -1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (*.f64 y x) (fma.f64 z z z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (*.f64 y x) z) (*.f64 z (-.f64 -1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (*.f64 y x) (*.f64 z z)) (-.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x (fma.f64 z z z)) 0) (/.f64 x (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (fma.f64 z z z)) (*.f64 (/.f64 x (fma.f64 z z z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 x (fma.f64 z z z))) (/.f64 x (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (fma.f64 z z z)) (*.f64 0 (/.f64 x (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (/.f64 x z) (-.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 z)) (/.f64 (/.f64 x z) (-.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (fma.f64 z z z))) (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)) (cbrt.f64 (/.f64 x (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x z)) (/.f64 1 (-.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x z)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (fma.f64 z z z))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 x z) 2) (pow.f64 (+.f64 z 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (/.f64 1 z) (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (+.f64 z 1))) (/.f64 (/.f64 1 z) (cbrt.f64 (pow.f64 (+.f64 z 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) (/.f64 1 (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 z 1)) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 z 1))) (/.f64 (/.f64 x z) (cbrt.f64 (pow.f64 (+.f64 z 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (fma.f64 z z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (/.f64 x z) (-.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 z) (+.f64 z 1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (+.f64 z 1)) (cbrt.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 z) (cbrt.f64 (pow.f64 (+.f64 z 1) 2))) (/.f64 x (cbrt.f64 (+.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 z)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (/.f64 x z) 2) (pow.f64 (+.f64 z 1) 2))) (cbrt.f64 (/.f64 x (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x z) (cbrt.f64 (pow.f64 (+.f64 z 1) 2))) (cbrt.f64 (/.f64 1 (+.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x z) (-.f64 -1 z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (+.f64 z 1)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x z) (cbrt.f64 (+.f64 z 1))) (pow.f64 (cbrt.f64 (+.f64 z 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (*.f64 z (-.f64 -1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x (+.f64 z 1))) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x z) (+.f64 z 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x z)) (-.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (+.f64 z 1)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x z) (cbrt.f64 (+.f64 z 1))) (cbrt.f64 (pow.f64 (+.f64 z 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 z (-.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x (+.f64 z 1))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (fma.f64 z z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (+.f64 z 1))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (/.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (+.f64 z 1))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (fma.f64 z z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (/.f64 1 (-.f64 -1 z))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 1 (-.f64 -1 z))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 z 1))) (/.f64 x z)) (cbrt.f64 (pow.f64 (+.f64 z 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (/.f64 1 z) (cbrt.f64 (pow.f64 (+.f64 z 1) 2)))) (cbrt.f64 (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 x z) 2) (pow.f64 (+.f64 z 1) 2)))) (cbrt.f64 (-.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2))) (cbrt.f64 (-.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x z)) (cbrt.f64 (/.f64 (pow.f64 (/.f64 x z) 2) (pow.f64 (+.f64 z 1) 2)))) (cbrt.f64 (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x z)) (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2))) (cbrt.f64 (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x z) (cbrt.f64 (pow.f64 (+.f64 z 1) 2))) (cbrt.f64 (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) (/.f64 1 (+.f64 z 1))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 x (+.f64 z 1))) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 x z) (cbrt.f64 (+.f64 z 1))) 1) (cbrt.f64 (pow.f64 (+.f64 z 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (+.f64 z 1)) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (/.f64 (*.f64 z (-.f64 -1 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 x z) (cbrt.f64 (+.f64 z 1)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 z 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (/.f64 x (+.f64 z 1)))) z)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (fma.f64 z z z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (fma.f64 z z z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (fma.f64 z z z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (fma.f64 z z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 x z) (-.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 x z)) (/.f64 1 (+.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 x z) (-.f64 -1 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (+.f64 z 1)) (neg.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 3))))))"]],"rules":[["egg-rr",67],["egg-rr",91]],"time":32.68603515625,"type":"rewrite"},{"count":[[218,191]],"inputs":[["(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (pow.f64 z 2))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (*.f64 y x) z)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (*.f64 y x)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y (*.f64 z x))))))","(/.f64 (*.f64 y x) (pow.f64 z 3))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4)))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 6))) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))))","(/.f64 (*.f64 y x) (pow.f64 z 3))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4)))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 6))) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x z)","(+.f64 (*.f64 -1 x) (/.f64 x z))","(+.f64 (*.f64 z x) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 z 2) x)) (+.f64 (*.f64 z x) (+.f64 (*.f64 -1 x) (/.f64 x z))))","(/.f64 x (pow.f64 z 2))","(+.f64 (/.f64 x (pow.f64 z 2)) (*.f64 -1 (/.f64 x (pow.f64 z 3))))","(+.f64 (/.f64 x (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 3))) (/.f64 x (pow.f64 z 4))))","(+.f64 (/.f64 x (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 3))) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 5))) (/.f64 x (pow.f64 z 4)))))","(/.f64 x (pow.f64 z 2))","(+.f64 (/.f64 x (pow.f64 z 2)) (*.f64 -1 (/.f64 x (pow.f64 z 3))))","(+.f64 (/.f64 x (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 3))) (/.f64 x (pow.f64 z 4))))","(+.f64 (/.f64 x (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 3))) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 5))) (/.f64 x (pow.f64 z 4)))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (pow.f64 z 2))","(/.f64 (*.f64 y x) (*.f64 z z))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (*.f64 y x) z)))","(-.f64 (/.f64 (*.f64 y x) (*.f64 z z)) (/.f64 (*.f64 y x) z))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (*.f64 y x)))","(+.f64 (/.f64 (*.f64 y x) (*.f64 z z)) (fma.f64 x y (neg.f64 (/.f64 (*.f64 y x) z))))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y (*.f64 z x))))))","(fma.f64 (*.f64 y x) (pow.f64 z (neg.f64 2)) (-.f64 (fma.f64 y x (neg.f64 (*.f64 (*.f64 y z) x))) (/.f64 (*.f64 y x) z)))","(/.f64 (*.f64 y x) (pow.f64 z 3))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))","(-.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (/.f64 (*.f64 y x) (pow.f64 z 4)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4)))))","(-.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z (neg.f64 5)) (pow.f64 z (neg.f64 3)))) (/.f64 (*.f64 y x) (pow.f64 z 4)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 6))) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))))","(+.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z (neg.f64 5)) (pow.f64 z (neg.f64 3)))) (neg.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z (neg.f64 6)) (pow.f64 z (neg.f64 4))))))","(/.f64 (*.f64 y x) (pow.f64 z 3))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))","(-.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (/.f64 (*.f64 y x) (pow.f64 z 4)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4)))))","(-.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z (neg.f64 5)) (pow.f64 z (neg.f64 3)))) (/.f64 (*.f64 y x) (pow.f64 z 4)))","(+.f64 (/.f64 (*.f64 y x) (pow.f64 z 5)) (+.f64 (/.f64 (*.f64 y x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 6))) (*.f64 -1 (/.f64 (*.f64 y x) (pow.f64 z 4))))))","(+.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z (neg.f64 5)) (pow.f64 z (neg.f64 3)))) (neg.f64 (*.f64 (*.f64 y x) (+.f64 (pow.f64 z (neg.f64 6)) (pow.f64 z (neg.f64 4))))))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 (*.f64 y x) (*.f64 (pow.f64 z 2) (+.f64 1 z)))","(/.f64 (*.f64 y x) (fma.f64 z z (pow.f64 z 3)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x (*.f64 z (+.f64 1 z)))","(/.f64 x z)","(+.f64 (*.f64 -1 x) (/.f64 x z))","(-.f64 (/.f64 x z) x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(fma.f64 z x (-.f64 (/.f64 x z) x))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 z 2) x)) (+.f64 (*.f64 z x) (+.f64 (*.f64 -1 x) (/.f64 x z))))","(+.f64 (*.f64 x (+.f64 (neg.f64 (*.f64 z z)) z)) (-.f64 (/.f64 x z) x))","(/.f64 x (pow.f64 z 2))","(/.f64 x (*.f64 z z))","(+.f64 (/.f64 x (pow.f64 z 2)) (*.f64 -1 (/.f64 x (pow.f64 z 3))))","(-.f64 (/.f64 x (*.f64 z z)) (/.f64 x (pow.f64 z 3)))","(+.f64 (/.f64 x (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 3))) (/.f64 x (pow.f64 z 4))))","(fma.f64 x (pow.f64 z (neg.f64 2)) (-.f64 (/.f64 x (pow.f64 z 4)) (/.f64 x (pow.f64 z 3))))","(+.f64 (/.f64 x (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 3))) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 5))) (/.f64 x (pow.f64 z 4)))))","(fma.f64 x (pow.f64 z (neg.f64 2)) (-.f64 (-.f64 (/.f64 x (pow.f64 z 4)) (/.f64 x (pow.f64 z 5))) (/.f64 x (pow.f64 z 3))))","(/.f64 x (pow.f64 z 2))","(/.f64 x (*.f64 z z))","(+.f64 (/.f64 x (pow.f64 z 2)) (*.f64 -1 (/.f64 x (pow.f64 z 3))))","(-.f64 (/.f64 x (*.f64 z z)) (/.f64 x (pow.f64 z 3)))","(+.f64 (/.f64 x (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 3))) (/.f64 x (pow.f64 z 4))))","(fma.f64 x (pow.f64 z (neg.f64 2)) (-.f64 (/.f64 x (pow.f64 z 4)) (/.f64 x (pow.f64 z 3))))","(+.f64 (/.f64 x (pow.f64 z 2)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 3))) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 z 5))) (/.f64 x (pow.f64 z 4)))))","(fma.f64 x (pow.f64 z (neg.f64 2)) (-.f64 (-.f64 (/.f64 x (pow.f64 z 4)) (/.f64 x (pow.f64 z 5))) (/.f64 x (pow.f64 z 3))))"]],"time":188.644775390625,"type":"simplify"},{"compiler":[[3088,1198]],"time":27.113037109375,"type":"eval"},{"alts":[["(/.f64 (/.f64 (*.f64 y x) (*.f64 z z)) (+.f64 z 1))","fresh",12.509696572496557],["(*.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) x) (fma.f64 z z z)) (cbrt.f64 (/.f64 y z)))","fresh",12.392677437346752],["(*.f64 (/.f64 y z) (/.f64 (*.f64 x (/.f64 1 (-.f64 -1 z))) (neg.f64 z)))","fresh",3.03310992651304],["(*.f64 (/.f64 y z) (*.f64 (cbrt.f64 (/.f64 x z)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (+.f64 z 1))))","fresh",9.449827409241674],["(/.f64 (*.f64 x (/.f64 (/.f64 y z) (+.f64 z 1))) z)","fresh",1.621311838582797],["(/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))","fresh",9.479581631159263]],"compiler":[[14,9],[21,12],[17,12],[22,14],[14,9],[13,7]],"count":[[199,6]],"kept":[{"done":[2,0],"fresh":[5,1],"new":[191,5],"picked":[1,0]}],"min-error":[0],"time":66.3740234375,"type":"prune"},{"accuracy":[1.6213118385827967],"baseline":[1.621311838582797],"branch":[["x",1.6213118385827967,1],["y",1.6213118385827967,1],["z",1.621311838582797,1],["(/.f64 (*.f64 x y) (*.f64 (*.f64 z z) (+.f64 z 1)))",1.6213118385827967,1],["(*.f64 x y)",1.621311838582797,1],["(*.f64 x y)",1.621311838582797,1],["(*.f64 (*.f64 z z) (+.f64 z 1))",1.6213118385827971,1]],"compiler":[[4,3],[4,3],[4,3],[14,9],[6,4],[6,4],[10,7],[402,134]],"count":[[29,1]],"inputs":[["(/.f64 (/.f64 (*.f64 y x) (*.f64 z z)) (+.f64 z 1))","(*.f64 (/.f64 y z) (/.f64 (*.f64 x (/.f64 1 (-.f64 -1 z))) (neg.f64 z)))","(*.f64 (/.f64 y z) (*.f64 (cbrt.f64 (/.f64 x z)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (+.f64 z 1))))","(/.f64 (*.f64 x (/.f64 (/.f64 y z) (+.f64 z 1))) z)","(/.f64 (/.f64 (*.f64 y x) z) (fma.f64 z z z))","(*.f64 (/.f64 y z) (/.f64 (/.f64 x z) (+.f64 z 1)))","(*.f64 (/.f64 y z) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 z z z)) 2)) (cbrt.f64 (/.f64 x (fma.f64 z z z)))))","(/.f64 (/.f64 (/.f64 (*.f64 y x) z) z) (+.f64 z 1))","(*.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) x) (fma.f64 z z z)) (cbrt.f64 (/.f64 y z)))","(/.f64 (*.f64 y x) (*.f64 z (fma.f64 z z z)))","(/.f64 (*.f64 (*.f64 x (cbrt.f64 (/.f64 y z))) (cbrt.f64 (pow.f64 (/.f64 y z) 2))) (fma.f64 z z z))","(*.f64 x (/.f64 (/.f64 y z) (fma.f64 z z z)))","(/.f64 (/.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 z)) (fma.f64 z z z))","(/.f64 (*.f64 y (/.f64 x z)) (fma.f64 z z z))","(*.f64 (/.f64 (/.f64 y z) (cbrt.f64 (fma.f64 z z z))) (/.f64 x (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))))","(*.f64 (/.f64 y z) (/.f64 x (fma.f64 z z z)))","(*.f64 (/.f64 (/.f64 y z) (cbrt.f64 (pow.f64 (fma.f64 z z z) 2))) (/.f64 x (cbrt.f64 (fma.f64 z z z))))","(*.f64 (/.f64 1 (fma.f64 z z z)) (/.f64 (*.f64 x y) z))","(/.f64 (/.f64 (/.f64 (*.f64 x y) z) z) (+.f64 z 1))","(/.f64 (/.f64 (*.f64 x (/.f64 y (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z)) (fma.f64 z z z))","(/.f64 (*.f64 (/.f64 x z) y) (fma.f64 z z z))","(/.f64 (*.f64 (/.f64 x (cbrt.f64 (*.f64 z z))) (/.f64 y (cbrt.f64 z))) (fma.f64 z z z))","(/.f64 (*.f64 x (/.f64 y z)) (fma.f64 z z z))","(/.f64 (*.f64 x y) (*.f64 z (fma.f64 z z z)))","(/.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2)) (cbrt.f64 (*.f64 x y))) (cbrt.f64 z)) (fma.f64 z z z))","(/.f64 (/.f64 (/.f64 (*.f64 x y) z) z) (+.f64 z 1))","(/.f64 (*.f64 (/.f64 1 (fma.f64 z z z)) (/.f64 (*.f64 x y) (cbrt.f64 z))) (cbrt.f64 (*.f64 z z)))","(/.f64 (/.f64 (*.f64 x y) z) (fma.f64 z z z))","(/.f64 (*.f64 x y) (*.f64 (*.f64 z z) (+.f64 z 1)))"]],"link":["."],"name":["Statistics.Distribution.Beta:$cvariance from math-functions-0.1.5.2"],"oracle":[28.509006924098728],"outputs":[["(/.f64 (*.f64 x (/.f64 (/.f64 y z) (+.f64 z 1))) z)"]],"time":61.239013671875,"times":[["x",9.64013671875],["y",9.051025390625],["z",9.2939453125],["(/.f64 (*.f64 x y) (*.f64 (*.f64 z z) (+.f64 z 1)))",5.092041015625],["(*.f64 x y)",8.398193359375],["(*.f64 x y)",7.731201171875],["(*.f64 (*.f64 z z) (+.f64 z 1))",5.669189453125]],"type":"regimes"},{"compiler":[[14,9]],"inputs":[["(/.f64 (*.f64 x (/.f64 (/.f64 y z) (+.f64 z 1))) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 x (/.f64 (/.f64 y z) (+.f64 z 1))) z)","(/.f64 (*.f64 y (/.f64 x z)) (fma.f64 z z z))"]],"stop":[["fuel",1]],"time":20.5439453125,"type":"simplify"},{"time":0.02099609375,"type":"soundness"},{"compiler":[[14,9]],"remove-preprocessing":[[]],"time":8.629150390625,"type":"end"}]
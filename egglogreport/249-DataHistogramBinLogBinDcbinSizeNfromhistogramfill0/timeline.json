[{"compiler":[[8,5]],"method":["search"],"sampling":[[12,0.7980482098646462,0.09853651490993798,0.10341527522541583],[11,0.7687799381092191,0.13463405007496476,0.09658601181581616],[10,0.7258531395345926,0.19121937546879053,0.08292748499661684],[9,0.6712190322577953,0.2575607914477587,0.07122017629444599],[8,0.5931703075766563,0.35902413353323936,0.047805558890104294],[7,0.49951183795928955,0.46829234808683395,0.032195813953876495],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":23.69482421875,"type":"analyze"},{"outcomes":[["body",256,"invalid",7.13916015625,235],["body",256,"valid",251.621826171875,8256]],"time":266.64697265625,"type":"sample"},{"compiler":[[7,4]],"inputs":[["0","1"],["(-.f64 (*.f64 x y) x)","(-.f64 (*.f64 y x) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (*.f64 x y) x)","(*.f64 x (+.f64 y -1))","(-.f64 (*.f64 y x) y)","(*.f64 y (+.f64 x -1))"]],"symmetry":[[]],"time":55.666015625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (*.f64 x y) x)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 x y) x)","(*.f64 x (+.f64 -1 y))"]],"time":36.093017578125,"type":"simplify"},{"compiler":[[12,7]],"time":0.323974609375,"type":"eval"},{"alts":[["(*.f64 x (+.f64 -1 y))","fresh",0.00390625],["(-.f64 (*.f64 x y) x)","next",0.00390625]],"compiler":[[7,5],[7,4],[7,5],[7,4]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0],"time":2.297119140625,"type":"prune"},{"compiler":[[12,4]],"locations":[["(-.f64 (*.f64 x y) x)",0.00390625,true]],"time":2.760986328125,"type":"localize"},{"count":[[1,24]],"series":[["(-.f64 (*.f64 x y) x)","y","-inf",0.259033203125],["(-.f64 (*.f64 x y) x)","y","inf",0.43115234375],["(-.f64 (*.f64 x y) x)","y","0",0.252197265625],["(-.f64 (*.f64 x y) x)","x","-inf",0.3408203125],["(-.f64 (*.f64 x y) x)","x","inf",0.633056640625],["(-.f64 (*.f64 x y) x)","x","0",0.35595703125]],"time":2.35009765625,"type":"series"},{"count":[[1,64]],"inputs":[["(-.f64 (*.f64 x y) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 -1 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 x) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x y) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (-.f64 9 (*.f64 x (+.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 3 (*.f64 x (+.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 1 (*.f64 x (+.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (+.f64 -1 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (+.f64 -1 y))) (pow.f64 (*.f64 x (+.f64 -1 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x y) 2/3) (*.f64 (+.f64 (cbrt.f64 y) 1) (pow.f64 x 2/3))) (-.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (+.f64 -1 y)) 2/3) (cbrt.f64 (*.f64 x (+.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 x) (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) (neg.f64 (pow.f64 (*.f64 x (+.f64 -1 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 (neg.f64 x)) (neg.f64 (*.f64 y (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x 2/3)) (*.f64 (cbrt.f64 x) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x y) 2/3) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (neg.f64 x))))) (-.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (pow.f64 (*.f64 x y) 2/3) (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (*.f64 x y))))) (+.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (*.f64 x (+.f64 -1 y)) 2/3) (*.f64 0 (cbrt.f64 (*.f64 x (+.f64 -1 y)))))) (+.f64 0 (cbrt.f64 (*.f64 x (+.f64 -1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (+.f64 (pow.f64 (*.f64 x y) 2/3) (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (neg.f64 (*.f64 x y)))))) (-.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (neg.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (*.f64 x (+.f64 -1 y)) 2/3) (*.f64 0 (cbrt.f64 (*.f64 x (-.f64 1 y)))))) (cbrt.f64 (*.f64 x (+.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 -1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (+.f64 -1 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 -1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 3 (*.f64 x (-.f64 1 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 2 (*.f64 x (-.f64 1 y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 -1 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 -1 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 -1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 -1 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (*.f64 x y) 2/3) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 x 2/3) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (neg.f64 (pow.f64 x 2/3)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 x)) (pow.f64 x 2/3) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 (*.f64 x y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 y)) (pow.f64 y 2/3) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 x (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 x (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 x (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 x (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 x) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 x (+.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 x (+.f64 -1 y)))))))"]],"rules":[["egg-rr",64]],"time":38.837890625,"type":"rewrite"},{"count":[[88,71]],"inputs":[["(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 -1 x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 y 1) x)","(*.f64 x (+.f64 y -1))","(*.f64 (-.f64 y 1) x)","(*.f64 x (+.f64 y -1))","(*.f64 (-.f64 y 1) x)","(*.f64 x (+.f64 y -1))","(*.f64 (-.f64 y 1) x)","(*.f64 x (+.f64 y -1))","(*.f64 (-.f64 y 1) x)","(*.f64 x (+.f64 y -1))","(*.f64 (-.f64 y 1) x)","(*.f64 x (+.f64 y -1))","(*.f64 (-.f64 y 1) x)","(*.f64 x (+.f64 y -1))","(*.f64 (-.f64 y 1) x)","(*.f64 x (+.f64 y -1))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 x (+.f64 y -1))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 x (+.f64 y -1))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 x (+.f64 y -1))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 x (+.f64 y -1))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 x (+.f64 y -1))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 x (+.f64 y -1))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 x (+.f64 y -1))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 x (+.f64 y -1))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 x (+.f64 y -1))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 x (+.f64 y -1))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 x (+.f64 y -1))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 x (+.f64 y -1))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 x (+.f64 y -1))"]],"time":79.594970703125,"type":"simplify"},{"compiler":[[681,389]],"time":12.531005859375,"type":"eval"},{"alts":[["(fma.f64 y x (neg.f64 x))","next",0]],"compiler":[[7,4],[7,4]],"count":[[73,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[71,1],"picked":[1,0]}],"min-error":[0],"time":13.509033203125,"type":"prune"},{"compiler":[[11,4]],"time":3.302001953125,"type":"localize"},{"compiler":[[2,2]],"time":0.098876953125,"type":"eval"},{"alts":[["(fma.f64 y x (neg.f64 x))","done",0]],"compiler":[[7,4]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.4921875,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["(-.f64 (*.f64 x y) x)",0,1]],"compiler":[[3,2],[3,2],[7,4],[17,9]],"count":[[3,1]],"inputs":[["(fma.f64 y x (neg.f64 x))","(*.f64 x (+.f64 -1 y))","(-.f64 (*.f64 x y) x)"]],"link":["."],"name":["Data.Histogram.Bin.LogBinD:$cbinSizeN from histogram-fill-0.8.4.1"],"oracle":[0.0078125],"outputs":[["(fma.f64 y x (neg.f64 x))"]],"time":8.578857421875,"times":[["x",2.6669921875],["y",2.574951171875],["(-.f64 (*.f64 x y) x)",2.718994140625]],"type":"regimes"},{"compiler":[[7,4]],"inputs":[["(fma.f64 y x (neg.f64 x))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 y x (neg.f64 x))","(*.f64 x (+.f64 y -1))"]],"stop":[["done",1]],"time":34.920166015625,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[7,4]],"remove-preprocessing":[[]],"time":7.845947265625,"type":"end"}]
[{"compiler":[[11,9]],"method":["search"],"sampling":[[12,0.9980475902557373,0.0014641284942626953,0.00048828125],[11,0.9965834617614746,0.0029282569885253906,0.00048828125],[10,0.9936552047729492,0.005856513977050781,0.00048828125],[9,0.9877986907958984,0.011713027954101563,0.00048828125],[8,0.9760856628417969,0.023426055908203125,0.00048828125],[7,0.9526596069335938,0.04685211181640625,0.00048828125],[6,0.9058074951171875,0.0937042236328125,0.00048828125],[5,0.812103271484375,0.187408447265625,0.00048828125],[4,0.62469482421875,0.37481689453125,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.989990234375,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.033935546875,1],["body",1024,"valid",40.295654296875,449],["body",512,"valid",127.880615234375,2083],["body",256,"valid",189.793701171875,5724]],"time":366.302978515625,"type":"sample"},{"compiler":[[10,8]],"inputs":[["0"],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))","(+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x))"]],"symmetry":[[]],"time":52.762939453125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))","(+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x))"]],"time":19.48193359375,"type":"simplify"},{"compiler":[[19,15]],"time":0.38623046875,"type":"eval"},{"alts":[["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))","next",13.616993713721426]],"compiler":[[10,8],[10,8]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[13.616993713721426],"time":0.8427734375,"type":"prune"},{"compiler":[[23,17]],"locations":[["(/.f64 1 (+.f64 x 1))",0.0078125,true],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))",3.5988454218030497,true]],"time":5.635009765625,"type":"localize"},{"count":[[2,24]],"series":[["(/.f64 1 (+.f64 x 1))","x","-inf",0.18115234375],["(/.f64 1 (+.f64 x 1))","x","inf",0.2021484375],["(/.f64 1 (+.f64 x 1))","x","0",0.18896484375],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))","x","-inf",0.291015625],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))","x","inf",0.380859375],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))","x","0",0.378173828125]],"time":1.708984375,"type":"series"},{"count":[[2,123]],"inputs":[["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))","(/.f64 1 (+.f64 x 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 x) (/.f64 -1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)) 0) (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)) (*.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x))) (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)) (*.f64 0 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (fma.f64 x x x)) (neg.f64 (/.f64 (+.f64 x 1) (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (fma.f64 x x x)) (/.f64 (+.f64 x 1) (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (/.f64 1 x) (/.f64 1 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 x) (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) 0) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 1 (-.f64 -1 x)) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (/.f64 1 x) (/.f64 1 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 1 x) (/.f64 1 (-.f64 -1 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (/.f64 1 (-.f64 -1 x)) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 (/.f64 1 x) (/.f64 1 (-.f64 -1 x))))) (cbrt.f64 (pow.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) -2)) (+.f64 (cbrt.f64 (pow.f64 x -2)) (cbrt.f64 (/.f64 1 (fma.f64 x x x))))) (-.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) (cbrt.f64 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (+.f64 x 1)) (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x))) (cbrt.f64 (pow.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)) 2)) (cbrt.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x x)) (-.f64 x (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 x 1) x) (/.f64 1 (*.f64 (-.f64 -1 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x (+.f64 x 1)) (+.f64 x 1)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 1 x) (/.f64 1 (-.f64 -1 x)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (+.f64 x 1)) (*.f64 (+.f64 x 1) (cbrt.f64 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (+.f64 x 1)) (cbrt.f64 (+.f64 x 1))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (+.f64 x 1)) (cbrt.f64 (fma.f64 x x x))) (pow.f64 (cbrt.f64 (fma.f64 x x x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x (+.f64 x 1)) (+.f64 x 1)) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x (+.f64 x 1)) (+.f64 x 1)) (neg.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) x) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) -1)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) (neg.f64 x)) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) (*.f64 (neg.f64 x) (cbrt.f64 (/.f64 -1 (-.f64 -1 x))))) (*.f64 (neg.f64 x) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))) (*.f64 x (cbrt.f64 (/.f64 -1 (-.f64 -1 x))))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (cbrt.f64 (*.f64 x x))) (*.f64 (-.f64 -1 x) (cbrt.f64 (/.f64 1 x)))) (*.f64 (-.f64 -1 x) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) (neg.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) -1)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) (cbrt.f64 (*.f64 x x))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) (cbrt.f64 (/.f64 1 x)))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) x) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (+.f64 x 1) (cbrt.f64 (/.f64 1 x)))) (*.f64 (+.f64 x 1) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (fma.f64 x x x)) (*.f64 (fma.f64 x x x) (+.f64 x 1))) (*.f64 (fma.f64 x x x) (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (+.f64 x 1)) (fma.f64 x x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (+.f64 x 1)) (+.f64 x 1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 x 1) x) (*.f64 (-.f64 -1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) (/.f64 -1 x)) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) (/.f64 1 x)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) (/.f64 1 (-.f64 -1 x))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (+.f64 x 1)) -1) (*.f64 (-.f64 -1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)) 2)) (cbrt.f64 (-.f64 x (+.f64 x 1)))) (cbrt.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) (cbrt.f64 (pow.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)) 2))) (cbrt.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (+.f64 x 1) x) 1) (*.f64 (-.f64 -1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x (+.f64 x 1)) (+.f64 x 1)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (+.f64 x 1)) x) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (+.f64 x 1)) (-.f64 -1 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x (+.f64 x 1)) (+.f64 x 1)) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x (+.f64 x 1)) (+.f64 x 1)) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x 1) x) (+.f64 x 1)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 x (+.f64 x 1)) (+.f64 x 1))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 1 x) (/.f64 1 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 (/.f64 1 x) (/.f64 1 (-.f64 -1 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) (cbrt.f64 (pow.f64 (+.f64 x 1) -2)) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (-.f64 -1 x)) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 x))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) -2))) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) -2)) (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1 x)) (cbrt.f64 (pow.f64 x -2)) (/.f64 -1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 x) (/.f64 -1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 x)) (neg.f64 (cbrt.f64 (pow.f64 x -2))) (/.f64 -1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1 (-.f64 -1 x)) 1 (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 -1 x) (/.f64 -1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (+.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 -1 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -1 (-.f64 -1 x)) 0) (/.f64 -1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (-.f64 -1 x)) (*.f64 (/.f64 -1 (-.f64 -1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 -1 (-.f64 -1 x))) (/.f64 -1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (-.f64 -1 x)) (*.f64 0 (/.f64 -1 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 -1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (-.f64 -1 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) (cbrt.f64 (pow.f64 (+.f64 x 1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) -2)) (cbrt.f64 (/.f64 -1 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 x))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (-.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) -2))) (cbrt.f64 (/.f64 1 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (-.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 x))) -1) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) -2)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) -2)) -1) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) -2))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) -2)))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 x))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (-.f64 -1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 (pow.f64 x 3) 1)) (/.f64 1 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (-.f64 -1 x)) (-.f64 -1 x)) (pow.f64 (-.f64 -1 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x 1) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1 (-.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x 1)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x 1) 3) (neg.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x 1) -3))))))"]],"rules":[["egg-rr",39],["egg-rr",84]],"time":29.130126953125,"type":"rewrite"},{"count":[[147,152]],"inputs":[["(/.f64 -1 x)","(-.f64 1 (/.f64 1 x))","(-.f64 (+.f64 1 (*.f64 -1 x)) (/.f64 1 x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))) (/.f64 1 x))","(/.f64 -1 (pow.f64 x 2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(/.f64 -1 (pow.f64 x 2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","1","(+.f64 1 (*.f64 -1 x))","(+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2)))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 -1 x)","(-.f64 1 (/.f64 1 x))","(+.f64 1 (/.f64 -1 x))","(-.f64 (+.f64 1 (*.f64 -1 x)) (/.f64 1 x))","(+.f64 (-.f64 1 x) (/.f64 -1 x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))) (/.f64 1 x))","(+.f64 (-.f64 1 x) (+.f64 (*.f64 x x) (/.f64 -1 x)))","(/.f64 -1 (pow.f64 x 2))","(neg.f64 (pow.f64 x -2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (pow.f64 x -3) (pow.f64 x -2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (pow.f64 x -3) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (pow.f64 x -5) (pow.f64 x -3)) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(/.f64 -1 (pow.f64 x 2))","(neg.f64 (pow.f64 x -2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (pow.f64 x -3) (pow.f64 x -2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (pow.f64 x -3) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (pow.f64 x -5) (pow.f64 x -3)) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","1","(+.f64 1 (*.f64 -1 x))","(-.f64 1 x)","(+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2)))","(+.f64 (-.f64 1 x) (*.f64 x x))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))))","(+.f64 (-.f64 1 x) (fma.f64 x x (neg.f64 (pow.f64 x 3))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 x) (pow.f64 x -2))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (pow.f64 x -3) (/.f64 1 x)) (pow.f64 x -2))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (pow.f64 x -3) (/.f64 1 x)) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 x) (pow.f64 x -2))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (pow.f64 x -3) (/.f64 1 x)) (pow.f64 x -2))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (pow.f64 x -3) (/.f64 1 x)) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))"]],"time":76.6279296875,"type":"simplify"},{"compiler":[[2198,1643]],"time":29.546142578125,"type":"eval"},{"alts":[["(-.f64 (pow.f64 x -3) (pow.f64 x -2))","fresh",30.769432619498428],["(/.f64 (/.f64 (/.f64 (-.f64 x (+.f64 x 1)) (+.f64 x 1)) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x))","fresh",26.08748190678366],["(/.f64 (/.f64 (-.f64 x (+.f64 x 1)) x) (+.f64 x 1))","next",13.361702057241146]],"compiler":[[8,6],[18,12],[12,8],[8,6],[18,12],[12,8]],"count":[[153,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[152,3],"picked":[1,0]}],"min-error":[0],"time":34.491943359375,"type":"prune"},{"compiler":[[29,18]],"locations":[["(/.f64 (/.f64 (-.f64 x (+.f64 x 1)) x) (+.f64 x 1))",0.02734375,true],["(-.f64 x (+.f64 x 1))",3.3944541641266985,true]],"time":6.708984375,"type":"localize"},{"count":[[2,24]],"series":[["(/.f64 (/.f64 (-.f64 x (+.f64 x 1)) x) (+.f64 x 1))","x","-inf",0.198974609375],["(/.f64 (/.f64 (-.f64 x (+.f64 x 1)) x) (+.f64 x 1))","x","inf",0.19384765625],["(/.f64 (/.f64 (-.f64 x (+.f64 x 1)) x) (+.f64 x 1))","x","0",0.208984375],["(-.f64 x (+.f64 x 1))","x","-inf",0.135986328125],["(-.f64 x (+.f64 x 1))","x","inf",0.138916015625],["(-.f64 x (+.f64 x 1))","x","0",0.198974609375]],"time":1.14990234375,"type":"series"},{"count":[[2,214]],"inputs":[["(-.f64 x (+.f64 x 1))","(/.f64 (/.f64 (-.f64 x (+.f64 x 1)) x) (+.f64 x 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x . -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 -1 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 x 3) (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))) (neg.f64 (/.f64 (pow.f64 (+.f64 x 1) 3) (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 x 3) (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))) (/.f64 (pow.f64 (+.f64 x 1) 3) (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 0 (+.f64 x -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 0 (/.f64 (pow.f64 x 3) (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)))) (/.f64 (pow.f64 (+.f64 x 1) 3) (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 -1 x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 x -1) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 (pow.f64 x 3) (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))) 1) (/.f64 (/.f64 (pow.f64 (+.f64 x 1) 3) (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3)) (/.f64 1 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))) (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 x)) (/.f64 x (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 x)) (neg.f64 (/.f64 x (cbrt.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3))) (/.f64 1 (cbrt.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3)) 3) (/.f64 1 (pow.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)) (/.f64 1 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3)) 3) (pow.f64 (/.f64 1 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2)) (cbrt.f64 (fma.f64 x x x)))) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3))) (cbrt.f64 (/.f64 1 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3)) (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1 x)) (cbrt.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3)) (cbrt.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)))) (pow.f64 (cbrt.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)) (/.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)) 3) (pow.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (pow.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3)) 3) 3) (pow.f64 (pow.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 x -1) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (-.f64 1 x) 2) (+.f64 (*.f64 x x) (*.f64 (+.f64 x -1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 x 3) (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))) (*.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)) (pow.f64 (+.f64 x 1) 3))) (*.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)) (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3)))) (neg.f64 (cbrt.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3)) 3)) (pow.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))) (cbrt.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3)))) (cbrt.f64 (cbrt.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3)) 3) (pow.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)) (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3))) (cbrt.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 x (cbrt.f64 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (cbrt.f64 (/.f64 1 x))) (/.f64 x (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x (cbrt.f64 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (+.f64 6 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (+.f64 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (+.f64 2 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (+.f64 6 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (+.f64 4 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (+.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (+.f64 6 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (+.f64 4 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (+.f64 3 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (+.f64 1/3 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (+.f64 1 6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (+.f64 3 6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (+.f64 1/3 6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (+.f64 1 4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (+.f64 3 4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (+.f64 1/3 4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (-.f64 3 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (-.f64 1/3 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (-.f64 1 6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (-.f64 3 6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (-.f64 1/3 6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (-.f64 1 4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (-.f64 3 4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1 (-.f64 1/3 4))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 1)))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) 0 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 0 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 -1 x)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 x 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 -1 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) -1 (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x -1)) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) 0 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (-.f64 -1 x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -1 (fma.f64 x x x)) 0) (/.f64 -1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -1 (fma.f64 x x x)) (+.f64 x 1)) (*.f64 (/.f64 -1 (fma.f64 x x x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -1 (fma.f64 x x x)) (neg.f64 x)) (*.f64 (/.f64 -1 (fma.f64 x x x)) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (fma.f64 x x x)) (*.f64 (/.f64 -1 (fma.f64 x x x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -1 (fma.f64 x x x)) x) (*.f64 (/.f64 -1 (fma.f64 x x x)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 x 1)) (*.f64 (/.f64 1 (+.f64 x 1)) (/.f64 (-.f64 -1 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 -1 (fma.f64 x x x))) (/.f64 -1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x 1) (/.f64 -1 (fma.f64 x x x))) (*.f64 (neg.f64 x) (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 x) (/.f64 -1 (fma.f64 x x x))) (*.f64 (+.f64 x 1) (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (fma.f64 x x x)) (*.f64 0 (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (/.f64 -1 (fma.f64 x x x))) (*.f64 (-.f64 1 x) (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 x 1)) (*.f64 (/.f64 (-.f64 -1 x) x) (/.f64 1 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 x 1)) (neg.f64 (/.f64 (/.f64 (+.f64 x 1) x) (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 x 1)) (/.f64 (/.f64 (+.f64 x 1) x) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 x 1) (*.f64 x (-.f64 -1 x))) (/.f64 x (*.f64 x (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 x (-.f64 -1 x))) (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (fma.f64 x x x)) (/.f64 0 (*.f64 x (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (+.f64 x 1)) (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 x -1) (fma.f64 x x x)) (/.f64 x (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (fma.f64 x x x)) (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (fma.f64 x x x)) (/.f64 (+.f64 x 1) (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 (pow.f64 x 3) (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))) (fma.f64 x x x)) (/.f64 (/.f64 (pow.f64 (+.f64 x 1) 3) (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))) (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 x)) (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) (cbrt.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 2)) (cbrt.f64 (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) (cbrt.f64 (/.f64 (/.f64 (/.f64 1 x) x) (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 x)) (/.f64 (cbrt.f64 (/.f64 (/.f64 1 x) x)) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) (/.f64 1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x 1)) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 x 1))) (/.f64 (/.f64 -1 x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 x))) (/.f64 (/.f64 1 x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fma.f64 x x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (/.f64 1 x) x) (pow.f64 (+.f64 x 1) 2))) (cbrt.f64 (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (cbrt.f64 (/.f64 1 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 x)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 (/.f64 1 x) x)) (+.f64 x 1)) (cbrt.f64 (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (cbrt.f64 (/.f64 1 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (-.f64 -1 x) (*.f64 (-.f64 -1 x) (/.f64 (+.f64 x 1) x))) (*.f64 (-.f64 -1 x) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 x 1))) (+.f64 x 1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2)) (/.f64 (+.f64 x 1) x))) (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (-.f64 -1 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 x) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 x 1)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 x) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 x (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 x 1))) (/.f64 -1 x)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (+.f64 x 1)) (/.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3)) x)) (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (+.f64 x 1)) (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 -1 x) 3))) (*.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (+.f64 x 1)) (neg.f64 x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 (fma.f64 x x x)) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (fma.f64 x x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 (fma.f64 x x x)) (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))) (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 (fma.f64 x x x)) (neg.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) (cbrt.f64 (/.f64 (/.f64 1 x) x))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 2)) (cbrt.f64 (/.f64 -1 x))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 2)) (cbrt.f64 (/.f64 1 x))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 x))) (/.f64 1 x)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (*.f64 x (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1 x)) (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) (cbrt.f64 (pow.f64 (fma.f64 x x x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1))) 1) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 1 (+.f64 x 1)) -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 1 (+.f64 x 1)) (cbrt.f64 x)) (neg.f64 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (+.f64 x 1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 1 (-.f64 -1 x)) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 1 (-.f64 -1 x)) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 -1 x) (+.f64 (pow.f64 x 3) 1)) (/.f64 1 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 x (-.f64 -1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 x 1) (*.f64 (+.f64 x 1) (/.f64 (+.f64 x 1) x))) (pow.f64 (+.f64 x 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (fma.f64 x x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (+.f64 x 1)) (cbrt.f64 (/.f64 -1 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 (fma.f64 x x x)) (/.f64 x (cbrt.f64 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 1 (+.f64 x 1)) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 1 (-.f64 -1 x)) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (fma.f64 x x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (*.f64 x (-.f64 -1 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (fma.f64 x x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (*.f64 x (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1 (fma.f64 x x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (-.f64 -1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (fma.f64 x x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (/.f64 (+.f64 x 1) x) (+.f64 x 1)) (/.f64 1 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (neg.f64 (/.f64 (/.f64 (+.f64 x 1) x) (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 x))) (neg.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)) (neg.f64 (/.f64 (/.f64 (+.f64 x 1) x) (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (+.f64 x 1))) (pow.f64 (cbrt.f64 (/.f64 1 (+.f64 x 1))) 2) (neg.f64 (/.f64 (/.f64 (+.f64 x 1) x) (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (+.f64 x 1)) (neg.f64 (/.f64 (/.f64 (+.f64 x 1) x) (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (-.f64 -1 x)) (neg.f64 (/.f64 (/.f64 (+.f64 x 1) x) (+.f64 x 1))))))))"]],"rules":[["egg-rr",103],["egg-rr",111]],"time":32.51611328125,"type":"rewrite"},{"count":[[238,229]],"inputs":[["-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","(/.f64 -1 x)","(-.f64 1 (/.f64 1 x))","(-.f64 (+.f64 1 (*.f64 -1 x)) (/.f64 1 x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))) (/.f64 1 x))","(/.f64 -1 (pow.f64 x 2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(/.f64 -1 (pow.f64 x 2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))"]],"method":["egg-herbie"],"outputs":[["-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","(/.f64 -1 x)","(-.f64 1 (/.f64 1 x))","(+.f64 1 (/.f64 -1 x))","(-.f64 (+.f64 1 (*.f64 -1 x)) (/.f64 1 x))","(+.f64 (-.f64 1 x) (/.f64 -1 x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))) (/.f64 1 x))","(+.f64 (+.f64 (*.f64 x x) (/.f64 -1 x)) (-.f64 1 x))","(/.f64 -1 (pow.f64 x 2))","(neg.f64 (pow.f64 x -2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (pow.f64 x -3) (pow.f64 x -2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (pow.f64 x -3) (+.f64 (pow.f64 x -2) (pow.f64 x -4)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (pow.f64 x -5) (pow.f64 x -3)) (+.f64 (pow.f64 x -2) (pow.f64 x -4)))","(/.f64 -1 (pow.f64 x 2))","(neg.f64 (pow.f64 x -2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (pow.f64 x -3) (pow.f64 x -2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (pow.f64 x -3) (+.f64 (pow.f64 x -2) (pow.f64 x -4)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (pow.f64 x -5) (pow.f64 x -3)) (+.f64 (pow.f64 x -2) (pow.f64 x -4)))"]],"time":106.260986328125,"type":"simplify"},{"compiler":[[3457,2408]],"time":44.5810546875,"type":"eval"},{"alts":[["(/.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (cbrt.f64 (+.f64 x 1)))","fresh",0.42879609067592467],["(/.f64 1 (*.f64 x (-.f64 -1 x)))","fresh",0.3952610809074827],["(/.f64 (cbrt.f64 (/.f64 -1 x)) (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 x 1)))","fresh",13.15268067852035],["(/.f64 (/.f64 -1 x) (+.f64 x 1))","next",0.0625],["(*.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))","fresh",0.19244008791597814]],"compiler":[[16,13],[8,6],[14,10],[8,6],[16,13],[16,13],[8,6],[14,10],[8,6],[16,13]],"count":[[232,5]],"kept":[{"done":[0,0],"fresh":[2,0],"new":[229,5],"picked":[1,0]}],"min-error":[0],"time":78.636962890625,"type":"prune"},{"compiler":[[17,12]],"locations":[["(/.f64 (/.f64 -1 x) (+.f64 x 1))",0.0625,true]],"time":4.130859375,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 (/.f64 -1 x) (+.f64 x 1))","x","-inf",0.171875],["(/.f64 (/.f64 -1 x) (+.f64 x 1))","x","inf",0.176025390625],["(/.f64 (/.f64 -1 x) (+.f64 x 1))","x","0",0.2041015625]],"time":0.59912109375,"type":"series"},{"count":[[1,90]],"inputs":[["(/.f64 (/.f64 -1 x) (+.f64 x 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (fma.f64 x x x)) (*.f64 (/.f64 -1 (fma.f64 x x x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -1 (fma.f64 x x x)) 0) (/.f64 -1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (fma.f64 x x x)) (*.f64 0 (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 -1 (fma.f64 x x x))) (/.f64 -1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (+.f64 x 1)) (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (fma.f64 x x x))) (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (fma.f64 x x x)) (/.f64 0 (neg.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (fma.f64 x x x)) (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 x)) (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) (pow.f64 (/.f64 -1 (fma.f64 x x x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 2/3) (cbrt.f64 (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x -1/3)) (/.f64 (pow.f64 (cbrt.f64 x) -2) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (+.f64 x 1) -1/3)) (/.f64 (/.f64 1 x) (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) (/.f64 1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x 1)) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (/.f64 -1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x 1) -1/3) (/.f64 (/.f64 -1 x) (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) -2) (+.f64 x 1)) (neg.f64 (pow.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 -1 x) (pow.f64 (+.f64 x 1) 2/3)) (pow.f64 (+.f64 x 1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 x) (pow.f64 (+.f64 x 1) 2/3)) (neg.f64 (pow.f64 (+.f64 x 1) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 x 1)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fma.f64 x x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) (pow.f64 (cbrt.f64 x) -2)) (pow.f64 (+.f64 x 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 x 1) -1/3)) (/.f64 1 x)) (pow.f64 (+.f64 x 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 x 1) -1/3) (/.f64 -1 x)) (pow.f64 (+.f64 x 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1))) 1) (pow.f64 (+.f64 x 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1))) 1) (pow.f64 (+.f64 x 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (+.f64 x 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 x -1/3)) -1) (*.f64 (pow.f64 x 2/3) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) (*.f64 (pow.f64 x 2/3) (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 x 1) -1/3) (*.f64 (neg.f64 x) (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) 1) (*.f64 (pow.f64 x 2/3) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 x -1/3) (*.f64 (-.f64 -1 x) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) (*.f64 (pow.f64 (+.f64 x 1) 2/3) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 x 1) -1/3) 1) (*.f64 (pow.f64 (+.f64 x 1) 2/3) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 x 1) -1/3) -1) (*.f64 (pow.f64 (+.f64 x 1) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 x) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 x) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (+.f64 x 1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 x 1)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (+.f64 x 1)) (neg.f64 (pow.f64 x -1/3))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 2/3) (neg.f64 (pow.f64 x -1/3))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 2/3) (pow.f64 x -1/3)) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 x -1/3)) (/.f64 1 (+.f64 x 1))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 (+.f64 x 1)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 -1 x) (pow.f64 (+.f64 x 1) 2/3)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 x -1/3)) (pow.f64 (/.f64 -1 (fma.f64 x x x)) 2/3)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (pow.f64 (/.f64 -1 (fma.f64 x x x)) 2/3)) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (/.f64 -1 (+.f64 x 1))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (pow.f64 (cbrt.f64 x) -2) (+.f64 x 1))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (cbrt.f64 x) -2) (+.f64 x 1)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (/.f64 1 x) (pow.f64 (+.f64 x 1) 2/3))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (+.f64 x 1))) (neg.f64 (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 1 (+.f64 x 1)) (cbrt.f64 (neg.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 1 (+.f64 x 1)) (cbrt.f64 x)) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 -1 x) (+.f64 (pow.f64 x 3) 1)) (/.f64 1 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 -1 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 -1 (+.f64 x 1)) (pow.f64 x 2/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (+.f64 x 1) -1/3)) (*.f64 x (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 x -1/3)) (*.f64 (pow.f64 x 2/3) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 x -1/3)) (*.f64 (+.f64 x 1) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1)))) (neg.f64 (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (fma.f64 x x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (neg.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (fma.f64 x x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (fma.f64 x x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (fma.f64 x x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (neg.f64 (fma.f64 x x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (neg.f64 (fma.f64 x x x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 x (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (neg.f64 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (fma.f64 x x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (neg.f64 (fma.f64 x x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (-.f64 -1 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (-.f64 -1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1 (fma.f64 x x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (fma.f64 x x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (fma.f64 x x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 (+.f64 x 1)) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 3))))))"]],"rules":[["egg-rr",90]],"time":23.9130859375,"type":"rewrite"},{"count":[[102,105]],"inputs":[["(/.f64 -1 x)","(-.f64 1 (/.f64 1 x))","(-.f64 (+.f64 1 (*.f64 -1 x)) (/.f64 1 x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))) (/.f64 1 x))","(/.f64 -1 (pow.f64 x 2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(/.f64 -1 (pow.f64 x 2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 -1 x)","(-.f64 1 (/.f64 1 x))","(+.f64 1 (/.f64 -1 x))","(-.f64 (+.f64 1 (*.f64 -1 x)) (/.f64 1 x))","(+.f64 (-.f64 1 x) (/.f64 -1 x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))) (/.f64 1 x))","(+.f64 (+.f64 (*.f64 x x) (/.f64 -1 x)) (-.f64 1 x))","(/.f64 -1 (pow.f64 x 2))","(neg.f64 (pow.f64 x -2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (pow.f64 x -3) (pow.f64 x -2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (pow.f64 x -3) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (pow.f64 x -5) (pow.f64 x -3)) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(/.f64 -1 (pow.f64 x 2))","(neg.f64 (pow.f64 x -2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (pow.f64 x -3) (pow.f64 x -2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (pow.f64 x -3) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (pow.f64 x -5) (pow.f64 x -3)) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))"]],"time":67.7509765625,"type":"simplify"},{"compiler":[[1239,834]],"time":16.720947265625,"type":"eval"},{"alts":[["(/.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (cbrt.f64 (+.f64 x 1)))","fresh",0.42879609067592467],["(/.f64 (cbrt.f64 (/.f64 -1 x)) (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 x 1)))","fresh",13.15268067852035],["(/.f64 (/.f64 -1 x) (+.f64 x 1))","done",0.0625],["(/.f64 1 (*.f64 x (-.f64 -1 x)))","fresh",0.3952610809074827],["(*.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))","next",0.19244008791597814]],"compiler":[[16,13],[14,10],[8,6],[8,6],[16,13],[16,13],[14,10],[8,6],[16,13]],"count":[[110,5]],"kept":[{"done":[0,0],"fresh":[4,3],"new":[105,1],"picked":[1,1]}],"min-error":[0],"time":22.89208984375,"type":"prune"},{"compiler":[[44,34]],"locations":[["(cbrt.f64 (+.f64 x 1))",0.02734375,true],["(*.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))",0.08203125,true],["(/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1)))",0.15625,true],["(pow.f64 (cbrt.f64 (+.f64 x 1)) -2)",0.2975387695368841,true]],"time":11.407958984375,"type":"localize"},{"count":[[4,24]],"series":[["(cbrt.f64 (+.f64 x 1))","x","-inf",0.242919921875],["(cbrt.f64 (+.f64 x 1))","x","inf",0.23681640625],["(cbrt.f64 (+.f64 x 1))","x","0",0.194091796875],["(*.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))","x","-inf",0.181884765625],["(*.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))","x","inf",0.199951171875],["(*.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))","x","0",0.198974609375],["(/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1)))","x","-inf",0.4580078125],["(/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1)))","x","inf",0.85302734375],["(/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1)))","x","0",0.24609375],["(pow.f64 (cbrt.f64 (+.f64 x 1)) -2)","x","-inf",0.35888671875],["(pow.f64 (cbrt.f64 (+.f64 x 1)) -2)","x","inf",0.72705078125],["(pow.f64 (cbrt.f64 (+.f64 x 1)) -2)","x","0",0.351806640625]],"time":4.427001953125,"type":"series"},{"count":[[4,203]],"inputs":[["(pow.f64 (cbrt.f64 (+.f64 x 1)) -2)","(/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1)))","(*.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))","(cbrt.f64 (+.f64 x 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) 0) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (*.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (*.f64 0 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)) (cbrt.f64 (pow.f64 (pow.f64 (+.f64 x 1) 2/3) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (pow.f64 (+.f64 x 1) 2/3) -2)) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x 1)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) 0) (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) (*.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x))) (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) (*.f64 0 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (pow.f64 (+.f64 x 1) -1/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (cbrt.f64 (neg.f64 (+.f64 x 1)))) (/.f64 (pow.f64 (+.f64 x 1) -1/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 x (cbrt.f64 (+.f64 x 1)))) (/.f64 (pow.f64 (+.f64 x 1) -1/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) (/.f64 0 (*.f64 (neg.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 (neg.f64 x) (cbrt.f64 (+.f64 x 1)))) (/.f64 (pow.f64 (+.f64 x 1) -1/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (cbrt.f64 (+.f64 x 1))) (/.f64 (pow.f64 (+.f64 x 1) -1/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x))) (pow.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) 2/3) (cbrt.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x -1/3)) (/.f64 (pow.f64 (cbrt.f64 x) -2) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x))) (/.f64 (pow.f64 (cbrt.f64 x) -2) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (pow.f64 (+.f64 x 1) -1/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (+.f64 x 1) -1/3))) (/.f64 (/.f64 1 x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) (pow.f64 (+.f64 x 1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x 1) -1/3) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (neg.f64 (pow.f64 (+.f64 x 1) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) -1/3)) (/.f64 (/.f64 -1 x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3))) (cbrt.f64 (pow.f64 (+.f64 x 1) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3))) (cbrt.f64 (neg.f64 (pow.f64 (+.f64 x 1) -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) -2) (cbrt.f64 (+.f64 x 1))) (neg.f64 (pow.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (+.f64 x 1) -1/3)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) -2) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3))) (cbrt.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 (pow.f64 x -1/3))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (neg.f64 (pow.f64 (+.f64 x 1) -1/3))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 x -1/3)) (pow.f64 (+.f64 x 1) -1/3)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (cbrt.f64 (neg.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (pow.f64 (+.f64 x 1) -1/3)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 x) (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (+.f64 x 1) -1/3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (neg.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 x (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x))) (pow.f64 (cbrt.f64 x) -2)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) 2/3) (neg.f64 (pow.f64 x -1/3))) (cbrt.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) 2/3) (pow.f64 x -1/3)) (neg.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) -1/3)) (/.f64 -1 x)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (pow.f64 (+.f64 x 1) -1/3))) (/.f64 1 x)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3))) (cbrt.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (cbrt.f64 x) -2) (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (pow.f64 (cbrt.f64 x) -2) (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 x 1) -1/3)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) 1) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 x -1/3)) (pow.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 x -1/3)) (/.f64 (pow.f64 (cbrt.f64 x) -2) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))) (cbrt.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (pow.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) 2/3)) (neg.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (/.f64 (pow.f64 (cbrt.f64 x) -2) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))) (neg.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (/.f64 1 x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))) (cbrt.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (cbrt.f64 x)) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) 1) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (pow.f64 (+.f64 x 1) -1/3)) (pow.f64 x 2/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 x (cbrt.f64 (+.f64 x 1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (*.f64 (neg.f64 x) (cbrt.f64 (+.f64 x 1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (*.f64 x (cbrt.f64 (+.f64 x 1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 (neg.f64 x) (cbrt.f64 (+.f64 x 1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (cbrt.f64 (+.f64 x 1))))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (neg.f64 (pow.f64 x -3)) (+.f64 x 1)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (neg.f64 x) (cbrt.f64 (+.f64 x 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 x 1) -1/3)) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (neg.f64 (pow.f64 x -3)) (+.f64 x 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x)) 0) (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x)) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x)) (*.f64 0 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x))) (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x)) 2/3) (cbrt.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x))) (*.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) 2/3) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)) (/.f64 (cbrt.f64 (pow.f64 (pow.f64 (+.f64 x 1) 2/3) -2)) (*.f64 (neg.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)) (*.f64 (neg.f64 x) (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 (pow.f64 (pow.f64 (+.f64 x 1) 2/3) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (cbrt.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)))) (pow.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (neg.f64 x)) (pow.f64 (+.f64 x 1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x 1) -1/3) (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) 2/3) (*.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (cbrt.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (pow.f64 (+.f64 x 1) 2/3) -2)) (*.f64 (neg.f64 x) (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (pow.f64 (+.f64 x 1) 2/3) -2)) (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)) (*.f64 (neg.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3))) (/.f64 (/.f64 -1 x) (cbrt.f64 (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) 2/3) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)) (cbrt.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) x) (neg.f64 (pow.f64 (+.f64 x 1) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) x) (neg.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)) (*.f64 x (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 x -1/3)) (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) x) (neg.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))))) (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) x) (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) x) (neg.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (neg.f64 x)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (neg.f64 x)) -1) (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (neg.f64 (pow.f64 (+.f64 x 1) -1/3))) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (*.f64 (neg.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (/.f64 (/.f64 -1 x) (cbrt.f64 (cbrt.f64 (+.f64 x 1))))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x)) 2/3) (cbrt.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (neg.f64 x)))) (cbrt.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)) (pow.f64 (+.f64 x 1) -1/3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 x 1) -1/3)) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 x -1/3)) (*.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) 2/3) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))) (cbrt.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) 2/3) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))) (neg.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2))) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) x) (neg.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))))) 1) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) x) 1) (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (neg.f64 x))) (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x)) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 x) (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))) (cbrt.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) x) (neg.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))))) 1) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) x) (neg.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))))) (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (neg.f64 x)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3))) (cbrt.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (neg.f64 x)) -1) (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) x) (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) x) 1) (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) x) (neg.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1)))))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) x) (pow.f64 (+.f64 x 1) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) x) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 x) (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2)) (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (neg.f64 x)) (neg.f64 (pow.f64 (+.f64 x 1) -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2) (/.f64 (pow.f64 (+.f64 x 1) -1/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (pow.f64 (+.f64 x 1) -1/3) (neg.f64 x)) (neg.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (+.f64 -1 -2)) (neg.f64 x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) 0) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 (+.f64 x 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (+.f64 x 1)) (*.f64 0 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (+.f64 x 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 1)) (/.f64 1 (cbrt.f64 (fma.f64 x x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 1)) (cbrt.f64 (/.f64 1 (fma.f64 x x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 1)) (cbrt.f64 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 1)) 1) (cbrt.f64 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (+.f64 x 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 1))) (neg.f64 (cbrt.f64 (fma.f64 x x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 (neg.f64 (pow.f64 x 3)) -1)) (cbrt.f64 (neg.f64 (fma.f64 x x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x 1) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (+.f64 x 1))))))"]],"rules":[["egg-rr",28],["egg-rr",75],["egg-rr",78],["egg-rr",22]],"time":39.452880859375,"type":"rewrite"},{"count":[[227,237]],"inputs":[["1","(+.f64 1 (*.f64 -2/3 x))","(+.f64 1 (+.f64 (*.f64 -2/3 x) (*.f64 5/9 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 -2/3 x) (+.f64 (*.f64 -40/81 (pow.f64 x 3)) (*.f64 5/9 (pow.f64 x 2)))))","(/.f64 -1 x)","(-.f64 1/3 (/.f64 1 x))","(-.f64 (+.f64 1/3 (*.f64 -2/9 x)) (/.f64 1 x))","(-.f64 (+.f64 1/3 (+.f64 (*.f64 14/81 (pow.f64 x 2)) (*.f64 -2/9 x))) (/.f64 1 x))","(/.f64 -1 x)","(-.f64 1 (/.f64 1 x))","(-.f64 (+.f64 1 (*.f64 -1 x)) (/.f64 1 x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))) (/.f64 1 x))","(/.f64 -1 (pow.f64 x 2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(/.f64 -1 (pow.f64 x 2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","1","(+.f64 1 (*.f64 1/3 x))","(+.f64 (*.f64 -1/9 (pow.f64 x 2)) (+.f64 1 (*.f64 1/3 x)))","(+.f64 (*.f64 -1/9 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 5/81 (pow.f64 x 3)) (*.f64 1/3 x))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -2/3 x))","(fma.f64 -2/3 x 1)","(+.f64 1 (+.f64 (*.f64 -2/3 x) (*.f64 5/9 (pow.f64 x 2))))","(+.f64 (fma.f64 -2/3 x 1) (*.f64 5/9 (*.f64 x x)))","(+.f64 1 (+.f64 (*.f64 -2/3 x) (+.f64 (*.f64 -40/81 (pow.f64 x 3)) (*.f64 5/9 (pow.f64 x 2)))))","(+.f64 (fma.f64 -2/3 x 1) (fma.f64 -40/81 (pow.f64 x 3) (*.f64 5/9 (*.f64 x x))))","(/.f64 -1 x)","(-.f64 1/3 (/.f64 1 x))","(+.f64 1/3 (/.f64 -1 x))","(-.f64 (+.f64 1/3 (*.f64 -2/9 x)) (/.f64 1 x))","(+.f64 (fma.f64 x -2/9 1/3) (/.f64 -1 x))","(-.f64 (+.f64 1/3 (+.f64 (*.f64 14/81 (pow.f64 x 2)) (*.f64 -2/9 x))) (/.f64 1 x))","(+.f64 (+.f64 1/3 (fma.f64 14/81 (*.f64 x x) (*.f64 -2/9 x))) (/.f64 -1 x))","(/.f64 -1 x)","(-.f64 1 (/.f64 1 x))","(+.f64 1 (/.f64 -1 x))","(-.f64 (+.f64 1 (*.f64 -1 x)) (/.f64 1 x))","(+.f64 (-.f64 1 x) (/.f64 -1 x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))) (/.f64 1 x))","(+.f64 (-.f64 1 x) (+.f64 (*.f64 x x) (/.f64 -1 x)))","(/.f64 -1 (pow.f64 x 2))","(neg.f64 (pow.f64 x -2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (pow.f64 x -3) (pow.f64 x -2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (pow.f64 x -3) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (pow.f64 x -5) (pow.f64 x -3)) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(/.f64 -1 (pow.f64 x 2))","(neg.f64 (pow.f64 x -2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (pow.f64 x -3) (pow.f64 x -2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (pow.f64 x -3) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (pow.f64 x -5) (pow.f64 x -3)) (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","1","(+.f64 1 (*.f64 1/3 x))","(fma.f64 1/3 x 1)","(+.f64 (*.f64 -1/9 (pow.f64 x 2)) (+.f64 1 (*.f64 1/3 x)))","(fma.f64 -1/9 (*.f64 x x) (fma.f64 1/3 x 1))","(+.f64 (*.f64 -1/9 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 5/81 (pow.f64 x 3)) (*.f64 1/3 x))))","(+.f64 (fma.f64 -1/9 (*.f64 x x) 1) (fma.f64 5/81 (pow.f64 x 3) (*.f64 1/3 x)))"]],"time":83.239013671875,"type":"simplify"},{"compiler":[[5344,4259]],"time":74.465087890625,"type":"eval"},{"alts":[["(/.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (cbrt.f64 (+.f64 x 1)))","fresh",0.42879609067592467],["(/.f64 (cbrt.f64 (/.f64 -1 x)) (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 x 1)))","fresh",13.15268067852035],["(/.f64 (/.f64 -1 x) (+.f64 x 1))","done",0.0625],["(/.f64 1 (*.f64 x (-.f64 -1 x)))","fresh",0.3952610809074827],["(*.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))","done",0.19244008791597814]],"compiler":[[16,13],[14,10],[8,6],[8,6],[16,13]],"count":[[276,5]],"kept":[{"done":[1,1],"fresh":[3,3],"new":[271,0],"picked":[1,1]}],"min-error":[0],"time":98.868896484375,"type":"prune"},{"accuracy":[0.0625],"baseline":[0.0625],"branch":[["x",0.0625,1],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))",0.0625,1]],"compiler":[[2,1],[10,8],[109,77]],"count":[[10,1]],"inputs":[["(/.f64 1 (*.f64 x (-.f64 -1 x)))","(/.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (cbrt.f64 (+.f64 x 1)))","(/.f64 1 (*.f64 x (-.f64 -1 x)))","(/.f64 (cbrt.f64 (/.f64 -1 x)) (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 x 1)))","(/.f64 (/.f64 -1 x) (+.f64 x 1))","(*.f64 (/.f64 (/.f64 -1 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))","(-.f64 (pow.f64 x -3) (pow.f64 x -2))","(/.f64 (/.f64 (/.f64 (-.f64 x (+.f64 x 1)) (+.f64 x 1)) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x))","(/.f64 (/.f64 (-.f64 x (+.f64 x 1)) x) (+.f64 x 1))","(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))"]],"link":["."],"name":["2frac (problem 3.3.1)"],"oracle":[44.3451230238937],"outputs":[["(/.f64 (/.f64 -1 x) (+.f64 x 1))"]],"time":9.51513671875,"times":[["x",4.117919921875],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))",3.30712890625]],"type":"regimes"},{"compiler":[[8,6]],"inputs":[["(/.f64 (/.f64 -1 x) (+.f64 x 1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (/.f64 -1 x) (+.f64 x 1))","(/.f64 -1 (fma.f64 x x x))"]],"stop":[["fuel",1]],"time":19.8359375,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":7.80615234375,"type":"end"}]
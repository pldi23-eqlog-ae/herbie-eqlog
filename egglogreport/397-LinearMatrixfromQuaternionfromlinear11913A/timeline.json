[{"compiler":[[12,8]],"method":["search"],"sampling":[[12,0.6497556329704821,0.10829260549508035,0.24195176153443754],[11,0.620487361215055,0.1619511037133634,0.2175615350715816],[10,0.5853654351085424,0.20682912040501833,0.20780544448643923],[9,0.5307313278317451,0.30439002625644207,0.16487864591181278],[8,0.46829234808683395,0.37463387846946716,0.15707377344369888],[7,0.37463387846946716,0.49951183795928955,0.1258542835712433],[6,0.24975591897964478,0.6243897974491119,0.1258542835712433],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":30.650146484375,"type":"analyze"},{"outcomes":[["body",256,"invalid",17.456787109375,483],["body",256,"valid",300.8681640625,8256]],"time":327.240966796875,"type":"sample"},{"compiler":[[11,7]],"inputs":[["0","1"],["(*.f64 2 (-.f64 (*.f64 x x) (*.f64 x y)))","(*.f64 2 (-.f64 (*.f64 y y) (*.f64 y x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 2 (-.f64 (*.f64 x x) (*.f64 x y)))","(*.f64 2 (*.f64 x (-.f64 x y)))","(*.f64 2 (-.f64 (*.f64 y y) (*.f64 y x)))","(*.f64 -2 (*.f64 y (-.f64 x y)))"]],"symmetry":[[]],"time":56.990966796875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 2 (-.f64 (*.f64 x x) (*.f64 x y)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (-.f64 (*.f64 x x) (*.f64 x y)))","(*.f64 -2 (*.f64 x (-.f64 y x)))"]],"time":18.887939453125,"type":"simplify"},{"compiler":[[18,11]],"time":0.321044921875,"type":"eval"},{"alts":[["(*.f64 -2 (*.f64 x (-.f64 y x)))","fresh",0.015625],["(*.f64 2 (-.f64 (*.f64 x x) (*.f64 x y)))","next",0.015625]],"compiler":[[9,6],[11,7],[9,6],[11,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.01171875],"time":1.2099609375,"type":"prune"},{"compiler":[[27,8]],"locations":[["(*.f64 2 (-.f64 (*.f64 x x) (*.f64 x y)))",0.0078125,true],["(-.f64 (*.f64 x x) (*.f64 x y))",0.0078125,true]],"time":4.875,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 2 (-.f64 (*.f64 x x) (*.f64 x y)))","y","-inf",0.238037109375],["(*.f64 2 (-.f64 (*.f64 x x) (*.f64 x y)))","y","inf",0.251953125],["(*.f64 2 (-.f64 (*.f64 x x) (*.f64 x y)))","y","0",0.263916015625],["(*.f64 2 (-.f64 (*.f64 x x) (*.f64 x y)))","x","-inf",0.241943359375],["(*.f64 2 (-.f64 (*.f64 x x) (*.f64 x y)))","x","inf",0.261962890625],["(*.f64 2 (-.f64 (*.f64 x x) (*.f64 x y)))","x","0",0.868896484375],["(-.f64 (*.f64 x x) (*.f64 x y))","y","-inf",0.267822265625],["(-.f64 (*.f64 x x) (*.f64 x y))","y","inf",0.39697265625],["(-.f64 (*.f64 x x) (*.f64 x y))","y","0",0.31005859375],["(-.f64 (*.f64 x x) (*.f64 x y))","x","-inf",0.307861328125],["(-.f64 (*.f64 x x) (*.f64 x y))","x","inf",0.4619140625],["(-.f64 (*.f64 x x) (*.f64 x y))","x","0",0.494140625]],"time":4.52099609375,"type":"series"},{"count":[[2,103]],"inputs":[["(-.f64 (*.f64 x x) (*.f64 x y))","(*.f64 2 (-.f64 (*.f64 x x) (*.f64 x y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 x y)) (*.f64 (*.f64 x (-.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (-.f64 x y)) 0) (*.f64 x (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 x y)) (*.f64 0 (*.f64 x (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (-.f64 x y))) (*.f64 x (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 x y)) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x x) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 x x) 0) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 x (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (-.f64 x y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (-.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (+.f64 (neg.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (-.f64 (pow.f64 (cbrt.f64 x) 5) (*.f64 (pow.f64 x 2/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 x (-.f64 y x)))) (pow.f64 (*.f64 x (-.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 4/3) (+.f64 (pow.f64 (*.f64 x y) 2/3) (*.f64 x (cbrt.f64 y)))) (-.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (-.f64 x y))) (pow.f64 (*.f64 x (-.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (-.f64 x y)) 2/3) (cbrt.f64 (*.f64 x (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (-.f64 (pow.f64 x 4/3) (*.f64 y (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (-.f64 y x))) (neg.f64 (pow.f64 (*.f64 x (-.f64 x y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 x (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (*.f64 x x)) (neg.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (-.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (-.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (-.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 x (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 x (-.f64 y x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (-.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (pow.f64 x 4/3) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 5) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 4/3) (pow.f64 x 2/3) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (neg.f64 x) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (neg.f64 x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (pow.f64 (*.f64 x y) 2/3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) x (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 x) (cbrt.f64 y)) (pow.f64 y 2/3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (neg.f64 (pow.f64 (*.f64 x y) 2/3)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) y (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x x)) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 x (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 x (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 x (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1 (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 x y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 x y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 x (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 x (-.f64 x y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 x y)) (*.f64 x (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -2 (*.f64 x (-.f64 y x))) (*.f64 (*.f64 -2 (*.f64 x (-.f64 y x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -2 (*.f64 x (-.f64 y x))) 0) (*.f64 -2 (*.f64 x (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 2 x) x) (*.f64 (*.f64 2 x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (*.f64 x x)) (neg.f64 (*.f64 (*.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -2 (*.f64 x (-.f64 y x))) (*.f64 0 (*.f64 -2 (*.f64 x (-.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 -2 (*.f64 x (-.f64 y x)))) (*.f64 -2 (*.f64 x (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 2 (*.f64 x x)) 1) (*.f64 (neg.f64 (*.f64 (*.f64 x y) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 2 x)) (*.f64 (neg.f64 y) (*.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 x y) 2)) (*.f64 2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (*.f64 x (-.f64 y x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 x) (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (-.f64 x y))) (*.f64 (pow.f64 (*.f64 x (-.f64 x y)) 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (*.f64 x (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 4) (*.f64 x (-.f64 x y))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x y) (*.f64 2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x (-.f64 x y)) 2/3) 2) (cbrt.f64 (*.f64 x (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -2 (*.f64 x (-.f64 y x)))) (pow.f64 (*.f64 -2 (*.f64 x (-.f64 y x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 -2 (*.f64 x (-.f64 y x))) 2/3) (cbrt.f64 (*.f64 -2 (*.f64 x (-.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 8 (*.f64 x (-.f64 x y)))) (pow.f64 (*.f64 x (-.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (-.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (-.f64 x y)) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (-.f64 x y)) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (*.f64 (*.f64 x (-.f64 x y)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 x y) 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 4) (*.f64 (*.f64 x (-.f64 x y)) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (-.f64 x y)) 2/3) (cbrt.f64 (*.f64 8 (*.f64 x (-.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (*.f64 x (-.f64 y x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (-.f64 y x)) 2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (*.f64 x (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 y x)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 x (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 x y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 -2 (*.f64 x (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -2 (*.f64 x (-.f64 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -2 (*.f64 x (-.f64 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -2 (*.f64 x (-.f64 y x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -2 (*.f64 x (-.f64 y x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -2 (*.f64 x (-.f64 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 x (-.f64 y x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (*.f64 x (-.f64 y x)) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 2 x) (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 -2 (*.f64 x (-.f64 y x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 2 (neg.f64 (*.f64 (*.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (*.f64 x x) (neg.f64 (*.f64 (*.f64 x y) 2)))))))"]],"rules":[["egg-rr",45],["egg-rr",58]],"time":25.60498046875,"type":"rewrite"},{"count":[[151,114]],"inputs":[["(*.f64 -1 (*.f64 y x))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(pow.f64 x 2)","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(pow.f64 x 2)","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(pow.f64 x 2)","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 -2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 2 (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 2 (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 2 (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 -2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 -2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 x (-.f64 x y))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 x (-.f64 x y))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 x (-.f64 x y))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 x (-.f64 x y))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 x (-.f64 x y))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 x (-.f64 x y))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 x (-.f64 x y))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 x (-.f64 x y))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 x (-.f64 x y))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 x (-.f64 x y))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 x (-.f64 x y))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 x (-.f64 x y))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 x (-.f64 x y))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 x (-.f64 x y))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 x (-.f64 x y))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 x (-.f64 x y))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 x (-.f64 x y))","(+.f64 (pow.f64 x 2) (*.f64 -1 (*.f64 y x)))","(*.f64 x (-.f64 x y))","(*.f64 -2 (*.f64 y x))","(*.f64 (*.f64 -2 x) y)","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(*.f64 2 (pow.f64 x 2))","(*.f64 x (+.f64 x x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(*.f64 2 (pow.f64 x 2))","(*.f64 x (+.f64 x x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(*.f64 2 (pow.f64 x 2))","(*.f64 x (+.f64 x x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(*.f64 -2 (*.f64 y x))","(*.f64 (*.f64 -2 x) y)","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(*.f64 -2 (*.f64 y x))","(*.f64 (*.f64 -2 x) y)","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))"]],"time":142.9970703125,"type":"simplify"},{"compiler":[[1249,559]],"time":14.55712890625,"type":"eval"},{"alts":[["(*.f64 x (*.f64 (-.f64 x y) 2))","fresh",0.0078125],["(*.f64 2 (fma.f64 x x (neg.f64 (*.f64 x y))))","next",0.0078125]],"compiler":[[9,6],[11,7],[9,6],[11,7]],"count":[[116,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[114,2],"picked":[1,0]}],"min-error":[0],"time":28.575927734375,"type":"prune"},{"compiler":[[28,8]],"locations":[["(*.f64 2 (fma.f64 x x (neg.f64 (*.f64 x y))))",0.0078125,true]],"time":5.722900390625,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 2 (fma.f64 x x (neg.f64 (*.f64 x y))))","y","-inf",0.202880859375],["(*.f64 2 (fma.f64 x x (neg.f64 (*.f64 x y))))","y","inf",0.2451171875],["(*.f64 2 (fma.f64 x x (neg.f64 (*.f64 x y))))","y","0",0.22119140625],["(*.f64 2 (fma.f64 x x (neg.f64 (*.f64 x y))))","x","-inf",0.64697265625],["(*.f64 2 (fma.f64 x x (neg.f64 (*.f64 x y))))","x","inf",0.296875],["(*.f64 2 (fma.f64 x x (neg.f64 (*.f64 x y))))","x","0",0.336181640625]],"time":2.0390625,"type":"series"},{"count":[[1,44]],"inputs":[["(*.f64 2 (fma.f64 x x (neg.f64 (*.f64 x y))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (*.f64 x x)) (neg.f64 (*.f64 (*.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 x y) 2)) (*.f64 2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 (*.f64 2 (*.f64 x x)) -1)) (neg.f64 (*.f64 (neg.f64 (*.f64 (*.f64 x y) 2)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (*.f64 2 (*.f64 x x)))) (neg.f64 (neg.f64 (neg.f64 (*.f64 (*.f64 x y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 x y)) (*.f64 x (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 2 (*.f64 x (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (*.f64 x (-.f64 x y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 2 (*.f64 x x)) (*.f64 (*.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 2 (*.f64 x x)) (*.f64 2 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (-.f64 x y)) (*.f64 x (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 x (-.f64 x y)) (*.f64 x x)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x x) (-.f64 (*.f64 x y) (*.f64 x (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 x (-.f64 y x)) (*.f64 x (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 2 (*.f64 x (-.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (-.f64 x y))) (*.f64 (pow.f64 (*.f64 x (-.f64 x y)) 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x (-.f64 x y)) 2/3) 2) (cbrt.f64 (*.f64 x (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (*.f64 x (-.f64 x y)))) (pow.f64 (*.f64 2 (*.f64 x (-.f64 x y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 2 (*.f64 x (-.f64 x y))) 2/3) (cbrt.f64 (*.f64 2 (*.f64 x (-.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 8 (*.f64 x (-.f64 x y)))) (pow.f64 (*.f64 x (-.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (-.f64 x y)) 2/3) (cbrt.f64 (*.f64 8 (*.f64 x (-.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x (-.f64 x y)) 2/3) (-.f64 (pow.f64 (*.f64 x (-.f64 x y)) 2/3) (pow.f64 (*.f64 x (-.f64 x y)) 2/3))) (+.f64 (cbrt.f64 (*.f64 x (-.f64 x y))) (cbrt.f64 (*.f64 x (-.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (*.f64 x (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 4) (*.f64 x (-.f64 x y))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (-.f64 x y)) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (-.f64 x y)) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (*.f64 (*.f64 x (-.f64 x y)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 4) (*.f64 (*.f64 x (-.f64 x y)) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 2 (*.f64 x (-.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 2 (*.f64 x (-.f64 x y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 x (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 x y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 2 (*.f64 x (-.f64 x y))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 2 (*.f64 x (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (*.f64 x (-.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 2 (*.f64 x (-.f64 x y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 x y)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (*.f64 x (-.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 2 (*.f64 x (-.f64 x y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x (-.f64 x y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (*.f64 x (-.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 2 (*.f64 x (-.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 2 (*.f64 x (-.f64 x y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (*.f64 x x) (neg.f64 (*.f64 (*.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 2 (neg.f64 (*.f64 (*.f64 x y) 2)))))))"]],"rules":[["egg-rr",44]],"time":37.806884765625,"type":"rewrite"},{"count":[[68,49]],"inputs":[["(*.f64 -2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 2 (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 2 (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 2 (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 -2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 -2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(*.f64 -2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(*.f64 -2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))"]],"time":77.108154296875,"type":"simplify"},{"compiler":[[569,253]],"time":6.2080078125,"type":"eval"},{"alts":[["(*.f64 x (*.f64 (-.f64 x y) 2))","next",0.0078125],["(*.f64 2 (fma.f64 x x (neg.f64 (*.f64 x y))))","done",0.0078125]],"compiler":[[9,6],[11,7],[9,6]],"count":[[51,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[49,0],"picked":[1,1]}],"min-error":[0],"time":8.921875,"type":"prune"},{"compiler":[[20,9]],"locations":[["(*.f64 x (*.f64 (-.f64 x y) 2))",0.0078125,true]],"time":4.112060546875,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 x (*.f64 (-.f64 x y) 2))","y","-inf",0.282958984375],["(*.f64 x (*.f64 (-.f64 x y) 2))","y","inf",0.367919921875],["(*.f64 x (*.f64 (-.f64 x y) 2))","y","0",0.35400390625],["(*.f64 x (*.f64 (-.f64 x y) 2))","x","-inf",0.348876953125],["(*.f64 x (*.f64 (-.f64 x y) 2))","x","inf",0.34619140625],["(*.f64 x (*.f64 (-.f64 x y) 2))","x","0",0.380859375]],"time":2.160888671875,"type":"series"},{"count":[[1,48]],"inputs":[["(*.f64 x (*.f64 (-.f64 x y) 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (*.f64 x x)) (*.f64 2 (neg.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 x x)) (*.f64 x (neg.f64 (*.f64 y 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 2) (*.f64 (neg.f64 (*.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x x) x) (*.f64 (+.f64 x x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x x) (neg.f64 y)) (*.f64 (+.f64 x x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (neg.f64 (*.f64 y 2))) (*.f64 x (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (*.f64 x y)) 2) (*.f64 (*.f64 x x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (neg.f64 (*.f64 x y))) (*.f64 2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 x y)) (*.f64 x (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (+.f64 x x) (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x x) (-.f64 x y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (-.f64 x y)) (*.f64 x (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 x (-.f64 y x)) (*.f64 x (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 y x) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -2 (-.f64 y x))) (*.f64 (pow.f64 (*.f64 -2 (-.f64 y x)) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 -2 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 -2 (-.f64 y x)) 2/3) x) (cbrt.f64 (*.f64 -2 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 -2 (-.f64 y x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x x) (-.f64 x y))) (pow.f64 (*.f64 (+.f64 x x) (-.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 x x) (-.f64 x y)) 2/3) (cbrt.f64 (*.f64 (+.f64 x x) (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 -2 (-.f64 y x)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (*.f64 -2 (-.f64 y x)))) (pow.f64 (*.f64 -2 (-.f64 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 -2 (-.f64 y x)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 -2 (-.f64 y x)) 2/3) (*.f64 x (cbrt.f64 (*.f64 -2 (-.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x x) (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x y) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 -2 (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -2 (-.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (-.f64 x y)) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (-.f64 x y)) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 4) (*.f64 (*.f64 x (-.f64 x y)) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (*.f64 (*.f64 x (-.f64 x y)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x (-.f64 x y)) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 x (-.f64 x y)) 2)) (cbrt.f64 (pow.f64 (*.f64 x (-.f64 x y)) 2)))) (+.f64 (cbrt.f64 (*.f64 x (-.f64 x y))) (cbrt.f64 (*.f64 x (-.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 y x) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 y x) (+.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 x y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 x x) (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 x (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x x) (-.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x x) (-.f64 x y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x x) (-.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y x) (+.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 x y)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x x) (-.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x x) (-.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x x) (-.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 y x) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) (-.f64 x y)) 3))))))"]],"rules":[["egg-rr",48]],"time":39.2890625,"type":"rewrite"},{"count":[[72,53]],"inputs":[["(*.f64 -2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 2 (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 2 (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 2 (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 -2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 -2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(*.f64 -2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(*.f64 -2 (*.f64 y x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (*.f64 -2 (*.f64 y x)))","(*.f64 x (+.f64 (*.f64 -2 y) (+.f64 x x)))"]],"time":77.345947265625,"type":"simplify"},{"compiler":[[589,226]],"time":6.1220703125,"type":"eval"},{"alts":[["(*.f64 x (*.f64 (-.f64 x y) 2))","done",0.0078125],["(*.f64 2 (fma.f64 x x (neg.f64 (*.f64 x y))))","done",0.0078125]],"compiler":[[9,6],[11,7]],"count":[[55,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[53,0],"picked":[1,1]}],"min-error":[0],"time":9.22705078125,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["y",0.0078125,1],["(*.f64 2 (-.f64 (*.f64 x x) (*.f64 x y)))",0.0078125,1],["(-.f64 (*.f64 x x) (*.f64 x y))",0.0078125,1]],"compiler":[[3,2],[3,2],[11,7],[9,5],[34,19]],"count":[[4,1]],"inputs":[["(*.f64 x (*.f64 (-.f64 x y) 2))","(*.f64 2 (fma.f64 x x (neg.f64 (*.f64 x y))))","(*.f64 -2 (*.f64 x (-.f64 y x)))","(*.f64 2 (-.f64 (*.f64 x x) (*.f64 x y)))"]],"link":["."],"name":["Linear.Matrix:fromQuaternion from linear-1.19.1.3, A"],"oracle":[0.01953125],"outputs":[["(*.f64 x (*.f64 (-.f64 x y) 2))"]],"time":13.7041015625,"times":[["x",4.198974609375],["y",2.909912109375],["(*.f64 2 (-.f64 (*.f64 x x) (*.f64 x y)))",2.848876953125],["(-.f64 (*.f64 x x) (*.f64 x y))",2.816162109375]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(*.f64 x (*.f64 (-.f64 x y) 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (*.f64 (-.f64 x y) 2))","(*.f64 (+.f64 x x) (-.f64 x y))"]],"stop":[["done",1]],"time":37.46484375,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.94384765625,"type":"end"}]
[{"compiler":[[16,10]],"method":["search"],"sampling":[[12,0.4936581836082041,0.135609659133479,0.3707321572583169],[11,0.4721947843208909,0.17951206676661968,0.3482931489124894],[10,0.42926798574626446,0.2536583552137017,0.3170736590400338],[9,0.39024362340569496,0.32780464366078377,0.28195173293352127],[8,0.31219489872455597,0.43707285821437836,0.2507322430610657],[7,0.24975591897964478,0.5307313278317451,0.21951275318861008],[6,0.24975591897964478,0.6243897974491119,0.1258542835712433],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":39.52197265625,"type":"analyze"},{"outcomes":[["body",256,"invalid",41.895263671875,1022],["body",256,"valid",339.893798828125,8256]],"time":390.233154296875,"type":"sample"},{"compiler":[[15,9]],"inputs":[["0","1"],["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))","(+.f64 (+.f64 (*.f64 y y) (*.f64 (*.f64 y 2) x)) (*.f64 x x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))","(fma.f64 y y (*.f64 x (+.f64 x (+.f64 y y))))","(+.f64 (+.f64 (*.f64 y y) (*.f64 (*.f64 y 2) x)) (*.f64 x x))","(fma.f64 y y (*.f64 x (+.f64 x (+.f64 y y))))"]],"symmetry":[[]],"time":59.0859375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))","(fma.f64 y y (*.f64 x (fma.f64 2 y x)))"]],"time":18.47607421875,"type":"simplify"},{"compiler":[[24,13]],"time":0.40478515625,"type":"eval"},{"alts":[["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","next",0.00390625]],"compiler":[[11,6],[11,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.822021484375,"type":"prune"},{"compiler":[[24,12]],"locations":[["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))",0.00390625,true],["(*.f64 x (fma.f64 2 y x))",0.00390625,true]],"time":6.18017578125,"type":"localize"},{"count":[[2,48]],"series":[["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","x","-inf",0.169921875],["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","x","inf",0.183837890625],["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","x","0",0.194091796875],["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","y","-inf",0.2431640625],["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","y","inf",0.213134765625],["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","y","0",0.21484375],["(*.f64 x (fma.f64 2 y x))","y","-inf",0.363037109375],["(*.f64 x (fma.f64 2 y x))","y","inf",0.36083984375],["(*.f64 x (fma.f64 2 y x))","y","0",0.43701171875],["(*.f64 x (fma.f64 2 y x))","x","-inf",0.471923828125],["(*.f64 x (fma.f64 2 y x))","x","inf",0.47705078125],["(*.f64 x (fma.f64 2 y x))","x","0",0.57080078125]],"time":4.052001953125,"type":"series"},{"count":[[2,79]],"inputs":[["(*.f64 x (fma.f64 2 y x))","(fma.f64 y y (*.f64 x (fma.f64 2 y x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 x (+.f64 y y)) -1)) (neg.f64 (*.f64 (*.f64 x x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x (*.f64 -2 y))) (neg.f64 (neg.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 x (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (fma.f64 2 y x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (fma.f64 2 y x))) (pow.f64 (*.f64 x (fma.f64 2 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2/3) (cbrt.f64 (*.f64 x (fma.f64 2 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 2 y x)) (*.f64 (pow.f64 (fma.f64 2 y x) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 2 y x) 2/3) x) (cbrt.f64 (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (fma.f64 2 y x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (fma.f64 2 y x))) (pow.f64 (fma.f64 2 y x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 2 y x) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 2 y x) 2/3) (*.f64 x (cbrt.f64 (fma.f64 2 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (fma.f64 2 y x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 2 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 2 y x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (fma.f64 2 y x))) (neg.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (fma.f64 2 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (fma.f64 2 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (fma.f64 2 y x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (fma.f64 2 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (fma.f64 2 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (fma.f64 2 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (fma.f64 2 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y y) x (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 y y) (*.f64 x x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (fma.f64 2 y x)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y y) (*.f64 x (+.f64 y y))) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y y)) (+.f64 (*.f64 x x) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 x (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (+.f64 (*.f64 y y) (*.f64 x (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y y (*.f64 x (fma.f64 2 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y y) (*.f64 (neg.f64 x) (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (fma.f64 2 y x)) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x)))) (pow.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x))) 2/3) (cbrt.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x))))) (neg.f64 (pow.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2/3) (-.f64 (pow.f64 y 4/3) (*.f64 (cbrt.f64 (*.f64 x (fma.f64 2 y x))) (pow.f64 y 2/3)))) (+.f64 (cbrt.f64 (*.f64 x (fma.f64 2 y x))) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 y 4/3) (-.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2/3) (*.f64 (pow.f64 y 2/3) (cbrt.f64 (*.f64 x (fma.f64 2 y x)))))) (+.f64 (pow.f64 y 2/3) (cbrt.f64 (*.f64 x (fma.f64 2 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y y (*.f64 x (fma.f64 2 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y y (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (fma.f64 2 y x))) (pow.f64 (fma.f64 2 y x) 2/3) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 2 y x)) (*.f64 (pow.f64 (fma.f64 2 y x) 2/3) x) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (fma.f64 2 y x))) (pow.f64 (*.f64 x (fma.f64 2 y x)) 2/3) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (fma.f64 2 y x) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2/3) (cbrt.f64 (*.f64 x (fma.f64 2 y x))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (fma.f64 2 y x)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 2 y x) x (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 2 y x) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 2/3) (pow.f64 y 4/3) (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 4/3) (pow.f64 y 2/3) (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (neg.f64 x) (fma.f64 2 y x)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (fma.f64 2 y x)) 1 (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (fma.f64 2 y x)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) 1 (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y y) (*.f64 x (fma.f64 2 y x)))))))"]],"rules":[["egg-rr",45],["egg-rr",34]],"time":40.69287109375,"type":"rewrite"},{"count":[[127,91]],"inputs":[["(*.f64 2 (*.f64 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 2 (*.f64 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 2 (*.f64 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (*.f64 y x))","(*.f64 (+.f64 y y) x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(*.f64 2 (*.f64 y x))","(*.f64 (+.f64 y y) x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(*.f64 2 (*.f64 y x))","(*.f64 (+.f64 y y) x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(*.f64 y (+.f64 y (+.f64 x x)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(*.f64 y (+.f64 y (+.f64 x x)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(*.f64 y (+.f64 y (+.f64 x x)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 (+.f64 y y) x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))"]],"time":151.697021484375,"type":"simplify"},{"compiler":[[1184,592]],"time":15.491943359375,"type":"eval"},{"alts":[["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","done",0.00390625]],"compiler":[[11,6]],"count":[[92,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[91,0],"picked":[1,1]}],"min-error":[0.00390625],"time":18.72607421875,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))",0.00390625,1]],"compiler":[[3,2],[3,2],[15,9],[24,13]],"count":[[2,1]],"inputs":[["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))"]],"link":["."],"name":["Examples.Basics.ProofTests:f4 from sbv-4.4"],"oracle":[0.015625],"outputs":[["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))"]],"time":8.047119140625,"times":[["x",2.553955078125],["y",2.405029296875],["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))",2.476806640625]],"type":"regimes"},{"compiler":[[11,6]],"inputs":[["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))"]],"stop":[["done",1]],"time":33.8388671875,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[11,6]],"remove-preprocessing":[[]],"time":8.320068359375,"type":"end"}]
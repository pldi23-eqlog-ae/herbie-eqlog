[{"compiler":[[14,10]],"method":["search"],"sampling":[[12,0.21442444053719867,0.7836238645086715,0.0019516949541298345],[11,0.1403505428970755,0.8576977621487947,0.0019516949541298345],[10,0.09356702859805033,0.9044812764478198,0.0019516949541298345],[9,0.062378019065366885,0.9356702859805033,0.0019516949541298345],[8,0.0,0.9980483050458702,0.0019516949541298345],[7,0.0,0.9980483050458702,0.0019516949541298345],[6,0.0,0.9980483050458702,0.0019516949541298345],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":139.798828125,"type":"analyze"},{"outcomes":[["body",256,"invalid",141.14892578125,3079],["body",256,"valid",373.950927734375,8256]],"time":525.77099609375,"type":"sample"},{"compiler":[[13,9]],"inputs":[["0","1","2","3"],["(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(/.f64 (-.f64 (+.f64 z y) x) (*.f64 t 2))","(/.f64 (-.f64 (+.f64 t y) z) (*.f64 x 2))","(/.f64 (-.f64 (+.f64 x z) y) (*.f64 t 2))","(/.f64 (-.f64 (+.f64 x t) z) (*.f64 y 2))","(/.f64 (-.f64 (+.f64 x y) t) (*.f64 z 2))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(/.f64 (/.f64 (-.f64 (+.f64 x y) z) t) 2)","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(/.f64 (/.f64 (-.f64 (+.f64 x y) z) t) 2)","(/.f64 (-.f64 (+.f64 z y) x) (*.f64 t 2))","(/.f64 (/.f64 (-.f64 (+.f64 z y) x) t) 2)","(/.f64 (-.f64 (+.f64 t y) z) (*.f64 x 2))","(/.f64 (-.f64 z (+.f64 t y)) (*.f64 -2 x))","(/.f64 (-.f64 (+.f64 x z) y) (*.f64 t 2))","(/.f64 (/.f64 (-.f64 (+.f64 x z) y) t) 2)","(/.f64 (-.f64 (+.f64 x t) z) (*.f64 y 2))","(/.f64 (-.f64 z (+.f64 x t)) (*.f64 -2 y))","(/.f64 (-.f64 (+.f64 x y) t) (*.f64 z 2))","(/.f64 (-.f64 t (+.f64 x y)) (*.f64 -2 z))"]],"symmetry":[[]],"time":91.9921875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) t)"]],"time":19.947021484375,"type":"simplify"},{"compiler":[[22,12]],"time":0.3349609375,"type":"eval"},{"alts":[["(/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) t)","next",0.015625]],"compiler":[[13,9],[13,9]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.015625],"time":0.87890625,"type":"prune"},{"compiler":[[33,12]],"locations":[["(/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) t)",0.015625,true]],"time":6.115966796875,"type":"localize"},{"count":[[1,48]],"series":[["(/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) t)","t","-inf",0.2939453125],["(/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) t)","t","inf",0.472900390625],["(/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) t)","t","0",0.51513671875],["(/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) t)","z","-inf",0.372802734375],["(/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) t)","z","inf",0.774169921875],["(/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) t)","z","0",0.416015625],["(/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) t)","y","-inf",0.39599609375],["(/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) t)","y","inf",0.463134765625],["(/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) t)","y","0",0.548095703125],["(/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) t)","x","-inf",0.416015625],["(/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) t)","x","inf",0.56298828125],["(/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) t)","x","0",0.5380859375]],"time":5.941162109375,"type":"series"},{"count":[[1,87]],"inputs":[["(/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) t)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 t) (*.f64 1/2 x)) (*.f64 (/.f64 1 t) (*.f64 1/2 (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 t) (*.f64 1/2 (+.f64 x y))) (*.f64 (/.f64 1 t) (neg.f64 (*.f64 z 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)) (*.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)) 0) (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 x) (/.f64 1 t)) (*.f64 (*.f64 1/2 (-.f64 y z)) (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 (+.f64 x y)) (/.f64 1 t)) (*.f64 (neg.f64 (*.f64 z 1/2)) (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)) (*.f64 0 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2))) (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x y) (+.f64 t t)) (neg.f64 (/.f64 z (+.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 x y) (+.f64 t t)) (/.f64 z (+.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 (+.f64 x y) z) (*.f64 t -2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 t)) (/.f64 (-.f64 (+.f64 x y) z) (*.f64 t -2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (+.f64 t t)) (/.f64 (-.f64 (+.f64 x y) z) (*.f64 t -2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 z (*.f64 t -2)) (/.f64 (+.f64 x y) (*.f64 t -2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (-.f64 z x) (*.f64 t -2)) (/.f64 y (*.f64 t -2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (-.f64 z y) (*.f64 t -2)) (/.f64 x (*.f64 t -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2)) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) 2)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z (+.f64 x y)) (/.f64 1 (*.f64 t -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)) 2)) (cbrt.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/8 t)) (/.f64 (-.f64 (+.f64 x y) z) (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (/.f64 (-.f64 (+.f64 x y) z) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (+.f64 x y) z) (cbrt.f64 t)) (cbrt.f64 (/.f64 1/8 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 x y) z) (/.f64 1/2 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) (/.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (*.f64 (-.f64 (+.f64 x y) z) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/2 (-.f64 (+.f64 x y) z)) (/.f64 -1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 t)) (/.f64 (-.f64 (+.f64 x y) z) (cbrt.f64 (/.f64 (*.f64 t t) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 (+.f64 x y) z) (*.f64 t -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (+.f64 x y) z) t) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (+.f64 x y) z) (*.f64 t -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 t) (-.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) 2)) t) (cbrt.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 t) (*.f64 -1/2 (-.f64 (+.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (+.f64 x y) z) (cbrt.f64 (*.f64 t t))) (cbrt.f64 (/.f64 1/8 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/8 (*.f64 t t))) (/.f64 (-.f64 (+.f64 x y) z) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (+.f64 x y) z) (cbrt.f64 (/.f64 (*.f64 t t) 1/8))) (cbrt.f64 (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (+.f64 x y) z) (neg.f64 t)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)) 2)) (cbrt.f64 (-.f64 (+.f64 x y) z))) (cbrt.f64 (+.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (+.f64 x y) z)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)) 2))) (cbrt.f64 (+.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x y) z) (cbrt.f64 2)) (/.f64 t (cbrt.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x y) z) (sqrt.f64 2)) (*.f64 t (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x y) z) (*.f64 (cbrt.f64 t) (sqrt.f64 2))) (*.f64 (cbrt.f64 (*.f64 t t)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x y) z) (cbrt.f64 (+.f64 t t))) (pow.f64 (cbrt.f64 (+.f64 t t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x y) z) (cbrt.f64 t)) (cbrt.f64 (/.f64 (*.f64 t t) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) (cbrt.f64 t)) (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 x y) (+.f64 t t)) (*.f64 (+.f64 t t) z)) (*.f64 (+.f64 t t) (+.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (+.f64 x y) z)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) 2))) (*.f64 (cbrt.f64 (+.f64 t t)) (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 z (+.f64 x y)) (*.f64 (*.f64 t -2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 x y) z) (+.f64 t t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (-.f64 (+.f64 x y) z)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 t)) (*.f64 (-.f64 (+.f64 x y) z) 1/2)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)) 2)) (cbrt.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)) 2)) (cbrt.f64 (*.f64 -1/2 (-.f64 (+.f64 x y) z)))) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (+.f64 x y) z) t) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2))) (cbrt.f64 (pow.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) 2))) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (+.f64 x y) z) (cbrt.f64 t)) 1/2) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/8 t)) (-.f64 (+.f64 x y) z)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x y) z) (cbrt.f64 (/.f64 (*.f64 t t) 1/8))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x y) z) t) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (/.f64 (-.f64 (+.f64 x y) z) (cbrt.f64 (*.f64 t t)))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (+.f64 x y) z) (cbrt.f64 (/.f64 1/8 (*.f64 t t)))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) (cbrt.f64 t)) 1) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)) 2))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -1/2 (-.f64 (+.f64 x y) z))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)) 2))) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -1/2 (-.f64 (+.f64 x y) z)) (cbrt.f64 t)) (neg.f64 (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x y) z) (cbrt.f64 (+.f64 t t))) (cbrt.f64 (/.f64 (*.f64 t t) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) (cbrt.f64 t)) 1) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) -1) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) (cbrt.f64 t))) (neg.f64 (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 (+.f64 x y) z) (*.f64 t -2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 -1/2 (-.f64 (+.f64 x y) z)) (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 (+.f64 x y) z) (*.f64 t -2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 t) (*.f64 -1/2 (-.f64 (+.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 z (+.f64 x y)) (*.f64 t -2)) 3))))))"]],"rules":[["egg-rr",87]],"time":25.703857421875,"type":"rewrite"},{"count":[[135,107]],"inputs":[["(*.f64 1/2 (/.f64 (-.f64 y z) t))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(*.f64 1/2 (/.f64 x t))","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(*.f64 1/2 (/.f64 x t))","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(*.f64 1/2 (/.f64 (-.f64 x z) t))","(+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 (-.f64 x z) t)))","(+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 (-.f64 x z) t)))","(+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 (-.f64 x z) t)))","(*.f64 1/2 (/.f64 y t))","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(*.f64 1/2 (/.f64 y t))","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(*.f64 1/2 (/.f64 (+.f64 y x) t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 (+.f64 y x) t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 (+.f64 y x) t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 (+.f64 y x) t)))","(*.f64 -1/2 (/.f64 z t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(*.f64 -1/2 (/.f64 z t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (/.f64 (-.f64 y z) t))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 1/2 (/.f64 x t))","(/.f64 (*.f64 1/2 x) t)","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 1/2 (/.f64 x t))","(/.f64 (*.f64 1/2 x) t)","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 1/2 (/.f64 (-.f64 x z) t))","(/.f64 (*.f64 1/2 (-.f64 x z)) t)","(+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 (-.f64 x z) t)))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 (-.f64 x z) t)))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 (-.f64 x z) t)))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 1/2 (/.f64 y t))","(/.f64 (*.f64 1/2 y) t)","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 1/2 (/.f64 y t))","(/.f64 (*.f64 1/2 y) t)","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 1/2 (/.f64 (+.f64 y x) t))","(/.f64 (*.f64 1/2 (+.f64 y x)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 (+.f64 y x) t)))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 (+.f64 y x) t)))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 (+.f64 y x) t)))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 -1/2 (/.f64 z t))","(/.f64 (*.f64 -1/2 z) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 -1/2 (/.f64 z t))","(/.f64 (*.f64 -1/2 z) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 x (-.f64 z y))) t)"]],"time":185.445068359375,"type":"simplify"},{"compiler":[[1505,640]],"time":15.1708984375,"type":"eval"},{"alts":[["(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","next",0.015625],["(*.f64 (-.f64 (+.f64 x y) z) (/.f64 1/2 t))","fresh",0.23046875]],"compiler":[[17,12],[13,9],[17,12],[13,9]],"count":[[108,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[107,2],"picked":[1,0]}],"min-error":[0],"time":25.678955078125,"type":"prune"},{"compiler":[[45,17]],"locations":[["(/.f64 (-.f64 y z) t)",0.00390625,true],["(*.f64 1/2 (/.f64 x t))",0.00390625,true],["(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))",0.015625,true]],"time":8.580078125,"type":"localize"},{"count":[[3,63]],"series":[["(/.f64 (-.f64 y z) t)","t","-inf",0.2880859375],["(/.f64 (-.f64 y z) t)","t","inf",0.14111328125],["(/.f64 (-.f64 y z) t)","t","0",0.214111328125],["(/.f64 (-.f64 y z) t)","z","-inf",0.153076171875],["(/.f64 (-.f64 y z) t)","z","inf",0.154052734375],["(/.f64 (-.f64 y z) t)","z","0",0.18310546875],["(/.f64 (-.f64 y z) t)","y","-inf",0.211181640625],["(/.f64 (-.f64 y z) t)","y","inf",0.18017578125],["(/.f64 (-.f64 y z) t)","y","0",0.162109375],["(*.f64 1/2 (/.f64 x t))","t","-inf",0.14697265625],["(*.f64 1/2 (/.f64 x t))","t","inf",0.161865234375],["(*.f64 1/2 (/.f64 x t))","t","0",0.14794921875],["(*.f64 1/2 (/.f64 x t))","x","-inf",0.337890625],["(*.f64 1/2 (/.f64 x t))","x","inf",0.364990234375],["(*.f64 1/2 (/.f64 x t))","x","0",0.27490234375],["(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","x","-inf",0.217041015625],["(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","x","inf",0.381103515625],["(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","x","0",0.47998046875],["(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","t","-inf",0.43798828125],["(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","t","inf",0.731201171875],["(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","t","0",0.766845703125],["(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","z","-inf",0.382080078125],["(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","z","inf",0.39697265625],["(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","z","0",0.471923828125],["(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","y","-inf",1.107177734375],["(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","y","inf",0.411865234375],["(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","y","0",0.6181640625]],"time":9.8330078125,"type":"series"},{"count":[[3,206]],"inputs":[["(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(*.f64 1/2 (/.f64 x t))","(/.f64 (-.f64 y z) t)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) t) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 1/2 x) t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t) (*.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t) 0) (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t) (*.f64 0 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)) (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (/.f64 (-.f64 y (-.f64 z x)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/8 t)) (+.f64 (/.f64 x (cbrt.f64 (*.f64 t t))) (/.f64 (-.f64 y z) (cbrt.f64 (*.f64 t t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/8 t)) (+.f64 (/.f64 (-.f64 y z) (cbrt.f64 (*.f64 t t))) (/.f64 x (cbrt.f64 (*.f64 t t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 t) 2) (-.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (*.f64 1/2 (-.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) (/.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 x) t) 2)) (-.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) t) 2)) (cbrt.f64 (*.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) t) (/.f64 (*.f64 1/2 x) t))))) (+.f64 (cbrt.f64 (/.f64 (*.f64 1/2 x) t)) (cbrt.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) t) 2)) (-.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 x) t) 2)) (cbrt.f64 (*.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) t) (/.f64 (*.f64 1/2 x) t))))) (+.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) t)) (cbrt.f64 (/.f64 (*.f64 1/2 x) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t) 2)) (cbrt.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/2) (*.f64 (sqrt.f64 1/2) (/.f64 (-.f64 y (-.f64 z x)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (/.f64 (-.f64 y (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y (-.f64 z x)) t) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/4) (+.f64 (*.f64 (/.f64 x t) (cbrt.f64 1/2)) (*.f64 (/.f64 (-.f64 y z) t) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/4) (+.f64 (*.f64 (/.f64 (-.f64 y z) t) (cbrt.f64 1/2)) (*.f64 (/.f64 x t) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 1/2 (-.f64 y z)) t (*.f64 t (*.f64 1/2 x))) (/.f64 1 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 1/2 x) (cbrt.f64 t)) t) (*.f64 (cbrt.f64 (*.f64 t t)) (*.f64 1/2 (-.f64 y z)))) (*.f64 (cbrt.f64 (*.f64 t t)) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 1/2 x) (cbrt.f64 t)) (neg.f64 t)) (*.f64 (cbrt.f64 (*.f64 t t)) (*.f64 1/2 (-.f64 z y)))) (*.f64 (cbrt.f64 (*.f64 t t)) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 -1/2 x) (cbrt.f64 (*.f64 t t))) (*.f64 (neg.f64 t) (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)))) (*.f64 (neg.f64 t) (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 1/2 x) (cbrt.f64 (*.f64 t t))) (*.f64 t (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)))) (*.f64 t (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 1/2 (-.f64 z y)) (cbrt.f64 (*.f64 t t))) (*.f64 (neg.f64 t) (/.f64 (*.f64 1/2 x) (cbrt.f64 t)))) (*.f64 (neg.f64 t) (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 (*.f64 t t))) (*.f64 t (/.f64 (*.f64 1/2 x) (cbrt.f64 t)))) (*.f64 t (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)) t) (*.f64 (cbrt.f64 (*.f64 t t)) (*.f64 1/2 x))) (*.f64 (cbrt.f64 (*.f64 t t)) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)) (neg.f64 t)) (*.f64 (cbrt.f64 (*.f64 t t)) (*.f64 -1/2 x))) (*.f64 (cbrt.f64 (*.f64 t t)) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 1/2 (-.f64 y z)) t (*.f64 t (*.f64 1/2 x))) (*.f64 t t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 1/2 (-.f64 y z)) t (*.f64 t (*.f64 1/2 x))) t) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) (cbrt.f64 (*.f64 t t))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) 1) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) -1) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y (-.f64 z x)) t) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)) (/.f64 (*.f64 1/2 x) (cbrt.f64 t))) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 1/2 (-.f64 z y)) (*.f64 -1/2 x)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (*.f64 1/2 x) (cbrt.f64 t)) (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t))) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1/2 x) (*.f64 1/2 (-.f64 z y))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 1/2 x) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t))) (*.f64 (cbrt.f64 (*.f64 t t)) (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)))) (*.f64 (cbrt.f64 (*.f64 t t)) (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 -1/2 x) t) (*.f64 (neg.f64 t) (*.f64 1/2 (-.f64 y z)))) (neg.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 -1/2 x) (neg.f64 t)) (*.f64 (neg.f64 t) (*.f64 1/2 (-.f64 z y)))) (*.f64 t t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 1/2 x) (neg.f64 t)) (*.f64 t (*.f64 1/2 (-.f64 z y)))) (neg.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 1/2 (-.f64 z y)) t) (*.f64 (neg.f64 t) (*.f64 1/2 x))) (neg.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 1/2 (-.f64 z y)) (neg.f64 t)) (*.f64 (neg.f64 t) (*.f64 -1/2 x))) (*.f64 t t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 1/2 (-.f64 y z)) (neg.f64 t)) (*.f64 t (*.f64 -1/2 x))) (neg.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t))) (*.f64 (cbrt.f64 (*.f64 t t)) (/.f64 (*.f64 1/2 x) (cbrt.f64 t)))) (*.f64 (cbrt.f64 (*.f64 t t)) (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (*.f64 1/2 (-.f64 y z)) t (*.f64 t (*.f64 1/2 x)))) (neg.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 1/2 (-.f64 y (-.f64 z x)))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 1/2 (-.f64 y z)) t) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 1/2 x) t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) t)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) t) 2)) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 1/2 x) t)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 x) t) 2)) (/.f64 (*.f64 1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 (-.f64 y z) t) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 y z) t) 1/2 (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x t) 1/2 (/.f64 (*.f64 1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 x t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) t) 1 (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 y z) t)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) t) 2)) 1/2) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (-.f64 y z) t) (sqrt.f64 1/2)) (sqrt.f64 1/2) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (-.f64 y z) t) (cbrt.f64 1/2)) (cbrt.f64 1/4) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (cbrt.f64 (/.f64 (-.f64 y z) t))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) t) 2)) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/8 t)) (/.f64 (-.f64 y z) (cbrt.f64 (*.f64 t t))) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 1/2 (-.f64 z y)) t) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 y z) (/.f64 (/.f64 1 t) 2) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (/.f64 (-.f64 y z) t)) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/2) (*.f64 (sqrt.f64 1/2) (/.f64 (-.f64 y z) t)) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) t) 2)) (cbrt.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) t)) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (-.f64 y z)) (/.f64 1 t) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 1/2 x) t) 1 (/.f64 (*.f64 1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (cbrt.f64 (/.f64 x t))) (cbrt.f64 (pow.f64 (/.f64 x t) 2)) (/.f64 (*.f64 1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x t)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x t) 2)) 1/2) (/.f64 (*.f64 1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (/.f64 x t)) (/.f64 (*.f64 1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 x t) (sqrt.f64 1/2)) (sqrt.f64 1/2) (/.f64 (*.f64 1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 x t) (cbrt.f64 1/2)) (cbrt.f64 1/4) (/.f64 (*.f64 1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 (/.f64 1 t) 2) (/.f64 (*.f64 1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 -1/2 x) t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/8 t)) (/.f64 x (cbrt.f64 (*.f64 t t))) (/.f64 (*.f64 1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 x) t) 2)) (cbrt.f64 (/.f64 (*.f64 1/2 x) t)) (/.f64 (*.f64 1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/2) (*.f64 (sqrt.f64 1/2) (/.f64 x t)) (/.f64 (*.f64 1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 1/2 x) t) (*.f64 (/.f64 (*.f64 1/2 x) t) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 1/2 x) t) 0) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 1/2 x) t) (*.f64 0 (/.f64 (*.f64 1/2 x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 1/2 x) t)) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x t)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x t) 2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (cbrt.f64 (/.f64 x t))) (cbrt.f64 (pow.f64 (/.f64 x t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/2 x) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/8 t)) (/.f64 x (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 1/2 x) t)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 x) t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 x) t) 2)) (cbrt.f64 (/.f64 (*.f64 1/2 x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x t) (sqrt.f64 1/2)) (sqrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x t) (cbrt.f64 1/2)) (cbrt.f64 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/2) (*.f64 (sqrt.f64 1/2) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (/.f64 x t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x t) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 x) (/.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (/.f64 1 t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 -1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/2 x) (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/2 x) (/.f64 -1 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 x) (cbrt.f64 t)) (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 x) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 x) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 x) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 x) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 x) (cbrt.f64 t)) (cbrt.f64 t)) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 x) (cbrt.f64 t)) 1) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 x) (cbrt.f64 (*.f64 t t))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 x) -1) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -1/2 x) (cbrt.f64 t)) (neg.f64 (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -1/2 x) 1) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (/.f64 (neg.f64 t) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 t 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x t) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 1/2 x) (cbrt.f64 t))) (neg.f64 (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 1/2 x) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 1/2 x) t) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 1/2 x) t)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 1/2 x) t)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 1/2 x) t)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 -1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 x) t) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 t) y) (*.f64 (/.f64 1 t) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 t) (neg.f64 z)) (*.f64 (/.f64 1 t) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y z) t) (*.f64 (/.f64 (-.f64 y z) t) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 y z) t) 0) (/.f64 (-.f64 y z) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y z) t) (*.f64 0 (/.f64 (-.f64 y z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 y z) t)) (/.f64 (-.f64 y z) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y t) 1) (*.f64 (neg.f64 (/.f64 z t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y t) (neg.f64 (/.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 z t)) (/.f64 y t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y t) (/.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 y t) (*.f64 t t)) (/.f64 (*.f64 t z) (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 z y) t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 t) (/.f64 (-.f64 z y) t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (/.f64 z t)) (/.f64 y (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 t)) (/.f64 (-.f64 z y) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 y z) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y z) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 y z)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 y z) 2)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 y z) t)) (cbrt.f64 (/.f64 (pow.f64 (-.f64 y z) 2) (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 t)) (/.f64 (-.f64 y z) (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y z) (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 y z) t)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) t) 2)) (cbrt.f64 (/.f64 (-.f64 y z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z y) (/.f64 -1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y z) (/.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 z y) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y t (neg.f64 (*.f64 t z))) (/.f64 1 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 y z) (cbrt.f64 t)) (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y z) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y (cbrt.f64 (*.f64 t t))) (*.f64 t (/.f64 z (cbrt.f64 t)))) (*.f64 t (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 y (cbrt.f64 t)) t) (*.f64 (cbrt.f64 (*.f64 t t)) z)) (*.f64 (cbrt.f64 (*.f64 t t)) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 y (cbrt.f64 t)) (neg.f64 t)) (*.f64 (cbrt.f64 (*.f64 t t)) (neg.f64 z))) (*.f64 (cbrt.f64 (*.f64 t t)) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 t t))) (*.f64 (neg.f64 t) (/.f64 z (cbrt.f64 t)))) (*.f64 (neg.f64 t) (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 z y) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y z) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y z) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y t (neg.f64 (*.f64 t z))) (*.f64 t t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y z) (cbrt.f64 (*.f64 t t))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 y z) (cbrt.f64 t)) 1) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 y t (neg.f64 (*.f64 t z))) t) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y z) -1) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 z y) (cbrt.f64 t)) (neg.f64 (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 z y) 1) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y (neg.f64 t)) (*.f64 t (neg.f64 z))) (neg.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 y (cbrt.f64 t)) (cbrt.f64 (*.f64 t t))) (*.f64 (cbrt.f64 (*.f64 t t)) (/.f64 z (cbrt.f64 t)))) (*.f64 (cbrt.f64 (*.f64 t t)) (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 y) t) (*.f64 (neg.f64 t) z)) (neg.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 y) (neg.f64 t)) (*.f64 (neg.f64 t) (neg.f64 z))) (*.f64 t t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 y t (neg.f64 (*.f64 t z)))) (neg.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 y z) (cbrt.f64 t))) (neg.f64 (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 y z) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 y z) t) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y z) t)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y z) t)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y z) t)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 z y) t))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 z y) t) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 y z) t) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) t) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (/.f64 (cbrt.f64 (*.f64 y y)) t) (neg.f64 (/.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y t)) (cbrt.f64 (/.f64 (*.f64 y y) (*.f64 t t))) (neg.f64 (/.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y t) (neg.f64 (/.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 t) (neg.f64 (/.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y t)) (pow.f64 (cbrt.f64 (/.f64 y t)) 2) (neg.f64 (/.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 t)) (/.f64 y (cbrt.f64 (*.f64 t t))) (neg.f64 (/.f64 z t)))))))"]],"rules":[["egg-rr",65],["egg-rr",44],["egg-rr",97]],"time":39.162109375,"type":"rewrite"},{"count":[[269,225]],"inputs":[["(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 x t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(*.f64 1/2 (/.f64 y t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(*.f64 1/2 (/.f64 y t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(*.f64 -1/2 (/.f64 z t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(*.f64 -1/2 (/.f64 z t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 x) (*.f64 -1/2 (-.f64 y z))) t))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 x) (*.f64 -1/2 (-.f64 y z))) t))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 x) (*.f64 -1/2 (-.f64 y z))) t))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 x) (*.f64 -1/2 (-.f64 y z))) t))","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(*.f64 1/2 (/.f64 x t))","(*.f64 1/2 (/.f64 x t))","(*.f64 -1 (/.f64 z t))","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 y t)","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 y t)","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 y t)","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(*.f64 -1 (/.f64 z t))","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(*.f64 -1 (/.f64 z t))","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (+.f64 (*.f64 -1/2 z) (*.f64 1/2 x)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(*.f64 1/2 (/.f64 y t))","(/.f64 y (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(*.f64 1/2 (/.f64 y t))","(/.f64 y (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (*.f64 1/2 (+.f64 x y)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(*.f64 -1/2 (/.f64 z t))","(/.f64 (*.f64 -1/2 z) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(*.f64 -1/2 (/.f64 z t))","(/.f64 (*.f64 -1/2 z) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 x) (*.f64 -1/2 (-.f64 y z))) t))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 x) (*.f64 -1/2 (-.f64 y z))) t))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 x) (*.f64 -1/2 (-.f64 y z))) t))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 x) (*.f64 -1/2 (-.f64 y z))) t))","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(*.f64 1/2 (/.f64 x t))","(/.f64 x (*.f64 t 2))","(*.f64 1/2 (/.f64 x t))","(/.f64 x (*.f64 t 2))","(*.f64 -1 (/.f64 z t))","(neg.f64 (/.f64 z t))","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 (-.f64 y z) t)","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 (-.f64 y z) t)","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 (-.f64 y z) t)","(/.f64 y t)","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 (-.f64 y z) t)","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 (-.f64 y z) t)","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 (-.f64 y z) t)","(/.f64 y t)","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 (-.f64 y z) t)","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 (-.f64 y z) t)","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 (-.f64 y z) t)","(/.f64 y t)","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 (-.f64 y z) t)","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 (-.f64 y z) t)","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 (-.f64 y z) t)","(*.f64 -1 (/.f64 z t))","(neg.f64 (/.f64 z t))","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 (-.f64 y z) t)","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 (-.f64 y z) t)","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 (-.f64 y z) t)","(*.f64 -1 (/.f64 z t))","(neg.f64 (/.f64 z t))","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 (-.f64 y z) t)","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 (-.f64 y z) t)","(+.f64 (/.f64 y t) (*.f64 -1 (/.f64 z t)))","(/.f64 (-.f64 y z) t)"]],"time":221.074951171875,"type":"simplify"},{"compiler":[[3934,1817]],"time":36.319091796875,"type":"eval"},{"alts":[["(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","done",0.015625],["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)","next",0.015625],["(fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))","fresh",0.05078125]],"compiler":[[17,12],[13,9],[18,13],[13,9],[18,13]],"count":[[227,3]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[225,2],"picked":[1,1]}],"min-error":[0],"time":87.93994140625,"type":"prune"},{"compiler":[[33,12]],"locations":[["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)",0.015625,true]],"time":5.953857421875,"type":"localize"},{"count":[[1,48]],"series":[["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)","t","-inf",0.171142578125],["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)","t","inf",0.15380859375],["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)","t","0",0.155029296875],["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)","x","-inf",0.175048828125],["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)","x","inf",0.176025390625],["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)","x","0",0.17822265625],["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)","z","-inf",0.177978515625],["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)","z","inf",0.197998046875],["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)","z","0",0.1650390625],["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)","y","-inf",0.18017578125],["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)","y","inf",0.2060546875],["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)","y","0",0.22314453125]],"time":2.326171875,"type":"series"},{"count":[[1,73]],"inputs":[["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 t) (*.f64 1/2 (-.f64 y z))) (*.f64 (/.f64 1 t) (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 t) (*.f64 1/2 y)) (*.f64 (/.f64 1 t) (*.f64 1/2 (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2)) (*.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2)) 0) (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 (-.f64 y z)) (/.f64 1 t)) (*.f64 (*.f64 1/2 x) (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 y) (/.f64 1 t)) (*.f64 (*.f64 1/2 (-.f64 x z)) (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2)) (*.f64 0 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2))) (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 (-.f64 z x) y) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 t)) (/.f64 (-.f64 (-.f64 z x) y) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 t 2)) (/.f64 (-.f64 (-.f64 z x) y) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y (*.f64 t 2)) (/.f64 (-.f64 z x) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) (/.f64 (neg.f64 x) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y (-.f64 z x)) (/.f64 1/2 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2)) 2)) (cbrt.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/2 (-.f64 y (-.f64 z x)))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) 2)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y (-.f64 z x)) (cbrt.f64 t)) (cbrt.f64 (/.f64 1/8 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/8 t)) (/.f64 (-.f64 y (-.f64 z x)) (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) (/.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (*.f64 1/2 (-.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/2 (-.f64 y (-.f64 z x))) (/.f64 -1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 t)) (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (/.f64 (-.f64 y (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 (-.f64 z x) y) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) 2)) t) (cbrt.f64 (*.f64 1/2 (-.f64 y (-.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/8 (*.f64 t t))) (/.f64 (-.f64 y (-.f64 z x)) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y (-.f64 z x)) t) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 t) (-.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 t) (*.f64 -1/2 (-.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y (-.f64 z x)) (cbrt.f64 (*.f64 t t))) (cbrt.f64 (/.f64 1/8 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (-.f64 z x) y) (*.f64 t 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) (cbrt.f64 (*.f64 t t))) (cbrt.f64 (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) (cbrt.f64 t)) (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (-.f64 z x) y) (/.f64 (neg.f64 t) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y (-.f64 z x)) (*.f64 2 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (-.f64 z x) y) (neg.f64 (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (-.f64 y (-.f64 z x))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 y (-.f64 z x)) (cbrt.f64 t)) 1/2) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/8 t)) (-.f64 y (-.f64 z x))) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 t)) (*.f64 1/2 (-.f64 y (-.f64 z x)))) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2))) (cbrt.f64 (pow.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) 2))) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2)) 2)) (cbrt.f64 (*.f64 -1/2 (-.f64 y (-.f64 z x))))) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2)) 2)) (cbrt.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) (cbrt.f64 t)) 1) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) (cbrt.f64 (*.f64 t t))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y (-.f64 z x)) t) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y (-.f64 z x)) (cbrt.f64 (/.f64 1/8 (*.f64 t t)))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -1/2 (-.f64 y (-.f64 z x)))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2)) 2))) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 1/2 (-.f64 y (-.f64 z x)))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2)) 2))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (/.f64 (-.f64 y (-.f64 z x)) (cbrt.f64 (*.f64 t t)))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -1/2 (-.f64 y (-.f64 z x))) (cbrt.f64 t)) (neg.f64 (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) (cbrt.f64 t)) 1) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) -1) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) (cbrt.f64 t))) (neg.f64 (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 (-.f64 z x) y) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 (-.f64 z x) y) (*.f64 t 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 (-.f64 z x) y) (/.f64 1/2 t)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 -1/2 (-.f64 y (-.f64 z x))) (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 t) (*.f64 -1/2 (-.f64 y (-.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2)) 3))))))"]],"rules":[["egg-rr",73]],"time":24.02783203125,"type":"rewrite"},{"count":[[121,93]],"inputs":[["(*.f64 1/2 (/.f64 (-.f64 x z) t))","(+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 (-.f64 x z) t)))","(+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 (-.f64 x z) t)))","(+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 (-.f64 x z) t)))","(*.f64 1/2 (/.f64 y t))","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(*.f64 1/2 (/.f64 y t))","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(*.f64 1/2 (/.f64 (+.f64 y x) t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 (+.f64 y x) t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 (+.f64 y x) t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 (+.f64 y x) t)))","(*.f64 -1/2 (/.f64 z t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(*.f64 -1/2 (/.f64 z t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(*.f64 1/2 (/.f64 x t))","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(*.f64 1/2 (/.f64 x t))","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (/.f64 (-.f64 x z) t))","(/.f64 (*.f64 1/2 (-.f64 x z)) t)","(+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 (-.f64 x z) t)))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 (-.f64 x z) t)))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 (-.f64 x z) t)))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 1/2 (/.f64 y t))","(/.f64 (*.f64 1/2 y) t)","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 1/2 (/.f64 y t))","(/.f64 (*.f64 1/2 y) t)","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(+.f64 (*.f64 1/2 (-.f64 (/.f64 x t) (/.f64 z t))) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 1/2 (/.f64 (+.f64 y x) t))","(/.f64 (*.f64 1/2 (+.f64 x y)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 (+.f64 y x) t)))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 (+.f64 y x) t)))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 (+.f64 y x) t)))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 -1/2 (/.f64 z t))","(/.f64 (*.f64 -1/2 z) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 -1/2 (/.f64 z t))","(/.f64 (*.f64 -1/2 z) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (+.f64 (/.f64 y t) (/.f64 x t))))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 1/2 (/.f64 x t))","(/.f64 (*.f64 1/2 x) t)","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 1/2 (/.f64 x t))","(/.f64 (*.f64 1/2 x) t)","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(+.f64 (*.f64 1/2 (/.f64 x t)) (*.f64 1/2 (-.f64 (/.f64 y t) (/.f64 z t))))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)","(*.f64 1/2 (/.f64 (-.f64 (+.f64 y x) z) t))","(/.f64 (*.f64 1/2 (-.f64 (+.f64 x y) z)) t)"]],"time":185.065185546875,"type":"simplify"},{"compiler":[[1261,555]],"time":12.98291015625,"type":"eval"},{"alts":[["(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","done",0.015625],["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)","done",0.015625],["(fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))","next",0.05078125]],"compiler":[[17,12],[13,9],[18,13],[18,13]],"count":[[96,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[93,0],"picked":[1,1]}],"min-error":[0],"time":21.260986328125,"type":"prune"},{"compiler":[[45,24]],"locations":[["(/.f64 (*.f64 1/2 (-.f64 y z)) t)",0.00390625,true],["(fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))",0.05078125,true]],"time":9.7919921875,"type":"localize"},{"count":[[2,84]],"series":[["(/.f64 (*.f64 1/2 (-.f64 y z)) t)","t","-inf",0.15087890625],["(/.f64 (*.f64 1/2 (-.f64 y z)) t)","t","inf",0.161865234375],["(/.f64 (*.f64 1/2 (-.f64 y z)) t)","t","0",0.152099609375],["(/.f64 (*.f64 1/2 (-.f64 y z)) t)","z","-inf",0.169921875],["(/.f64 (*.f64 1/2 (-.f64 y z)) t)","z","inf",0.152099609375],["(/.f64 (*.f64 1/2 (-.f64 y z)) t)","z","0",0.1611328125],["(/.f64 (*.f64 1/2 (-.f64 y z)) t)","y","-inf",0.445068359375],["(/.f64 (*.f64 1/2 (-.f64 y z)) t)","y","inf",0.157958984375],["(/.f64 (*.f64 1/2 (-.f64 y z)) t)","y","0",0.181884765625],["(fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))","z","-inf",0.18896484375],["(fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))","z","inf",0.19287109375],["(fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))","z","0",0.301025390625],["(fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))","y","-inf",0.208984375],["(fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))","y","inf",0.19189453125],["(fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))","y","0",0.326904296875],["(fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))","t","-inf",0.43603515625],["(fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))","t","inf",1.775146484375],["(fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))","t","0",0.5029296875],["(fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))","x","-inf",0.337890625],["(fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))","x","inf",0.3271484375],["(fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))","x","0",0.447998046875]],"time":7.240966796875,"type":"series"},{"count":[[2,146]],"inputs":[["(fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z))) 0) (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z))) (*.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z)))) (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z))) (*.f64 0 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 1/2 x) t) (/.f64 (-.f64 y z) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 1/2 x) t) (/.f64 (*.f64 -1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (*.f64 1/2 (+.f64 x (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (+.f64 x (-.f64 y z))) (/.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 t) (+.f64 (-.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z)))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z))) 2)) (cbrt.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (+.f64 (/.f64 x t) (/.f64 (-.f64 y z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (+.f64 (/.f64 (-.f64 y z) t) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 t -2)) (+.f64 (/.f64 (*.f64 1/2 x) (cbrt.f64 t)) (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 t -2)) (+.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)) (/.f64 (*.f64 1/2 x) (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 1/2 (-.f64 y z)) (neg.f64 t)) (*.f64 t (neg.f64 (*.f64 1/2 x)))) (*.f64 t (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)) t) (*.f64 (cbrt.f64 (*.f64 t t)) (*.f64 1/2 x))) (*.f64 (cbrt.f64 (*.f64 t t)) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)) (neg.f64 t)) (*.f64 (cbrt.f64 (*.f64 t t)) (neg.f64 (*.f64 1/2 x)))) (*.f64 (cbrt.f64 (*.f64 t t)) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 y z) t) (*.f64 (*.f64 t 2) (*.f64 1/2 x))) (*.f64 (*.f64 t 2) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 y z) (neg.f64 t)) (*.f64 (*.f64 t 2) (neg.f64 (*.f64 1/2 x)))) (*.f64 (*.f64 t 2) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 -1/2 (-.f64 y z)) t) (*.f64 (neg.f64 t) (*.f64 1/2 x))) (*.f64 (neg.f64 t) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 -1/2 (-.f64 y z)) (neg.f64 t)) (*.f64 (neg.f64 t) (neg.f64 (*.f64 1/2 x)))) (*.f64 (neg.f64 t) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 1/2 x) (cbrt.f64 (*.f64 t t))) (*.f64 t (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)))) (*.f64 t (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 1/2 x) (neg.f64 t)) (*.f64 t (*.f64 -1/2 (-.f64 y z)))) (*.f64 t (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 1/2 x) (*.f64 t 2)) (*.f64 t (-.f64 y z))) (*.f64 t (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 1/2 x)) t) (*.f64 (neg.f64 t) (*.f64 1/2 (-.f64 y z)))) (*.f64 (neg.f64 t) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 1/2 x)) (cbrt.f64 (*.f64 t t))) (*.f64 (neg.f64 t) (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)))) (*.f64 (neg.f64 t) (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 1/2 x)) (neg.f64 t)) (*.f64 (neg.f64 t) (*.f64 -1/2 (-.f64 y z)))) (*.f64 (neg.f64 t) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 1/2 x)) (*.f64 t 2)) (*.f64 (neg.f64 t) (-.f64 y z))) (*.f64 (neg.f64 t) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 1/2 (+.f64 x (-.f64 y z)))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 t)) (*.f64 1/2 (+.f64 x (-.f64 y z)))) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (+.f64 x (-.f64 y z))) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (*.f64 1/2 x)) (*.f64 -1/2 (-.f64 y z))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1/2 (-.f64 y z)) (neg.f64 (*.f64 1/2 x))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 1/2 (-.f64 y z)) t) (*.f64 t (*.f64 1/2 x))) (*.f64 t t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 1/2 x) t) (*.f64 t (*.f64 1/2 (-.f64 y z)))) (*.f64 t t))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 t) (*.f64 1/2 (+.f64 x (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 1/2 t) (+.f64 x (-.f64 y z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (-.f64 y z) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/8 t)) (*.f64 (-.f64 y z) (cbrt.f64 (pow.f64 t -2))) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 y z) (*.f64 t 2))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) 2)) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) 2)) (cbrt.f64 (/.f64 (-.f64 y z) (*.f64 t 2))) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 (-.f64 y z) t) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 y z) (/.f64 1/2 t) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (-.f64 y z)) (/.f64 1 t) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)) (cbrt.f64 (pow.f64 t -2)) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/2 (-.f64 y z)) (/.f64 -1 t) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 t) (*.f64 1/2 (-.f64 y z)) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 t)) (*.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 (pow.f64 t -2))) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 y z) (cbrt.f64 t)) (cbrt.f64 (/.f64 1/8 (*.f64 t t))) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/2 (-.f64 y z))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 1/2 (-.f64 y z)) 2)) t) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 -1/2 (-.f64 y z)) t) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 1/2 x) (cbrt.f64 t)) (cbrt.f64 (pow.f64 t -2)) (/.f64 (-.f64 y z) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1/2 t) (/.f64 (-.f64 y z) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 1/2 x) t)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 x) t) 2)) (/.f64 (-.f64 y z) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 t) (*.f64 1/2 x) (/.f64 (-.f64 y z) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 x t) (/.f64 (-.f64 y z) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/2 x)) (/.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/4)) t) (/.f64 (-.f64 y z) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 y z) (*.f64 t 2)) (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) 1 (/.f64 (*.f64 1/2 x) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 1/2 x) t) (/.f64 (-.f64 y z) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 1/2 x) t) 1 (/.f64 (-.f64 y z) (*.f64 t 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) 0) (/.f64 (-.f64 y z) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) (*.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 t) (*.f64 1/2 y)) (*.f64 (/.f64 1 t) (neg.f64 (*.f64 z 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 y z) (*.f64 t 2))) (/.f64 (-.f64 y z) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) (*.f64 0 (/.f64 (-.f64 y z) (*.f64 t 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 y) (/.f64 1 t)) (*.f64 (neg.f64 (*.f64 z 1/2)) (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 -1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y (*.f64 t 2)) (/.f64 z (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 t 2)) (/.f64 (*.f64 -1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 y z) (*.f64 t 2))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y z) (/.f64 1/2 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/2 (-.f64 y z))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 1/2 (-.f64 y z)) 2)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) 2)) (cbrt.f64 (/.f64 (-.f64 y z) (*.f64 t 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/8 t)) (*.f64 (-.f64 y z) (cbrt.f64 (pow.f64 t -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y z) (cbrt.f64 t)) (cbrt.f64 (/.f64 1/8 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (-.f64 y z)) (/.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (*.f64 1/2 (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)) (cbrt.f64 (pow.f64 t -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/2 (-.f64 y z)) (/.f64 -1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 t)) (*.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 (pow.f64 t -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 y z) (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (/.f64 (-.f64 y z) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 -1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 y z) (cbrt.f64 (pow.f64 t -2))) (cbrt.f64 (/.f64 1/8 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y z) t) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 t) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 t -2)) (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 t) (*.f64 -1/2 (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 (pow.f64 t -2))) (cbrt.f64 (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/8 (*.f64 t t))) (/.f64 (-.f64 y z) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 1/2 (-.f64 y z)) 2)) t) (cbrt.f64 (*.f64 1/2 (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -1/2 (-.f64 y z)) t) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)) (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y z) (*.f64 t 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y z) (*.f64 2 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (-.f64 y z)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (-.f64 y z)) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/8 t)) (-.f64 y z)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 y z) (*.f64 t 2))) (cbrt.f64 (pow.f64 (*.f64 1/2 (-.f64 y z)) 2))) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) 2)) (cbrt.f64 (*.f64 1/2 (-.f64 y z)))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) 2)) (cbrt.f64 (*.f64 -1/2 (-.f64 y z)))) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 y z) (cbrt.f64 t)) 1/2) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y z) (cbrt.f64 (/.f64 1/8 (*.f64 t t)))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)) 1) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 1/2 (-.f64 y z))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) 2))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -1/2 (-.f64 y z))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) 2))) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 (pow.f64 t -2)))) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 (pow.f64 t -2))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y z) t) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (*.f64 (-.f64 y z) (cbrt.f64 (pow.f64 t -2)))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -1/2 (-.f64 y z)) (cbrt.f64 t)) (neg.f64 (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) -1) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t)) 1) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 z y) (/.f64 (neg.f64 t) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 1/2 (-.f64 y z)) (cbrt.f64 t))) (neg.f64 (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 z y) (neg.f64 (*.f64 t 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y z) (*.f64 t 2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y z) (*.f64 t 2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y z) (*.f64 t 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 -1/2 (-.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 -1/2 (-.f64 y z)) (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 -1/2 (-.f64 y z)) t) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 z y) (/.f64 1/2 t)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 t) (*.f64 1/2 (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 t) (*.f64 -1/2 (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) (*.f64 t 2)) 3))))))"]],"rules":[["egg-rr",71],["egg-rr",75]],"time":29.949951171875,"type":"rewrite"},{"count":[[230,162]],"inputs":[["(*.f64 1/2 (/.f64 (-.f64 y z) t))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(*.f64 1/2 (/.f64 x t))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(*.f64 1/2 (/.f64 x t))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 x) (*.f64 -1/2 (-.f64 y z))) t))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 x) (*.f64 -1/2 (-.f64 y z))) t))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 x) (*.f64 -1/2 (-.f64 y z))) t))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 x) (*.f64 -1/2 (-.f64 y z))) t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 x t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(*.f64 1/2 (/.f64 y t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(*.f64 1/2 (/.f64 y t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(*.f64 -1/2 (/.f64 z t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(*.f64 -1/2 (/.f64 z t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(*.f64 -1/2 (/.f64 z t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(*.f64 1/2 (/.f64 y t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(*.f64 1/2 (/.f64 y t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(*.f64 1/2 (/.f64 y t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(*.f64 -1/2 (/.f64 z t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(*.f64 -1/2 (/.f64 z t))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(*.f64 1/2 (/.f64 (-.f64 y z) t))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (/.f64 (-.f64 y z) t))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(*.f64 1/2 (/.f64 x t))","(/.f64 x (*.f64 t 2))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(*.f64 1/2 (/.f64 x t))","(/.f64 x (*.f64 t 2))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(/.f64 (+.f64 (*.f64 1/2 (-.f64 y z)) (*.f64 1/2 x)) t)","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 x) (*.f64 -1/2 (-.f64 y z))) t))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 x) (*.f64 -1/2 (-.f64 y z))) t))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 x) (*.f64 -1/2 (-.f64 y z))) t))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 x) (*.f64 -1/2 (-.f64 y z))) t))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (+.f64 (*.f64 -1/2 z) (*.f64 1/2 x)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(*.f64 1/2 (/.f64 y t))","(/.f64 y (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(*.f64 1/2 (/.f64 y t))","(/.f64 y (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t)))","(/.f64 (*.f64 1/2 (+.f64 y x)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(*.f64 -1/2 (/.f64 z t))","(/.f64 (*.f64 -1/2 z) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(*.f64 -1/2 (/.f64 z t))","(/.f64 (*.f64 -1/2 z) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (+.f64 (*.f64 1/2 (/.f64 y t)) (*.f64 1/2 (/.f64 x t))))","(/.f64 (-.f64 (+.f64 y x) z) (*.f64 t 2))","(*.f64 -1/2 (/.f64 z t))","(/.f64 (*.f64 -1/2 z) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(*.f64 1/2 (/.f64 y t))","(/.f64 y (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(*.f64 1/2 (/.f64 y t))","(/.f64 y (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(*.f64 1/2 (/.f64 y t))","(/.f64 y (*.f64 t 2))","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(*.f64 -1/2 (/.f64 z t))","(/.f64 (*.f64 -1/2 z) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(*.f64 -1/2 (/.f64 z t))","(/.f64 (*.f64 -1/2 z) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(+.f64 (*.f64 -1/2 (/.f64 z t)) (*.f64 1/2 (/.f64 y t)))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)","(*.f64 1/2 (/.f64 (-.f64 y z) t))","(/.f64 (*.f64 1/2 (-.f64 y z)) t)"]],"time":283.30615234375,"type":"simplify"},{"compiler":[[2750,1510]],"time":30.410888671875,"type":"eval"},{"alts":[["(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","done",0.015625],["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)","done",0.015625],["(fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))","done",0.05078125]],"compiler":[[17,12],[13,9],[18,13]],"count":[[165,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[162,0],"picked":[1,1]}],"min-error":[0],"time":45.407958984375,"type":"prune"},{"accuracy":[0.015625],"baseline":[0.015625],"branch":[["x",0.015625,1],["y",0.015625,1],["z",0.015625,1],["t",0.015625,1],["(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))",0.015625,1],["(-.f64 (+.f64 x y) z)",0.015625,1],["(-.f64 (+.f64 x y) z)",0.015625,1],["(+.f64 x y)",0.015625,1],["(+.f64 x y)",0.015625,1],["(*.f64 t 2)",0.015625,1]],"compiler":[[5,4],[5,4],[5,4],[5,4],[13,9],[9,6],[9,6],[7,5],[7,5],[7,6],[67,36]],"count":[[6,1]],"inputs":[["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)","(fma.f64 (*.f64 1/2 x) (/.f64 1 t) (/.f64 (*.f64 1/2 (-.f64 y z)) t))","(+.f64 (*.f64 1/2 (/.f64 (-.f64 y z) t)) (*.f64 1/2 (/.f64 x t)))","(*.f64 (-.f64 (+.f64 x y) z) (/.f64 1/2 t))","(/.f64 (*.f64 (-.f64 (+.f64 x y) z) 1/2) t)","(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))"]],"link":["."],"name":["Optimisation.CirclePacking:place from circle-packing-0.1.0.4, B"],"oracle":[0.4840017931922998],"outputs":[["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)"]],"time":37.833984375,"times":[["x",3.321044921875],["y",3.402099609375],["z",3.3798828125],["t",3.360107421875],["(/.f64 (-.f64 (+.f64 x y) z) (*.f64 t 2))",3.574951171875],["(-.f64 (+.f64 x y) z)",3.39990234375],["(-.f64 (+.f64 x y) z)",3.401123046875],["(+.f64 x y)",5.615966796875],["(+.f64 x y)",3.387939453125],["(*.f64 t 2)",3.387939453125]],"type":"regimes"},{"compiler":[[13,9]],"inputs":[["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 1/2 (-.f64 y (-.f64 z x))) t)","(/.f64 (-.f64 y (-.f64 z x)) (*.f64 t 2))"]],"stop":[["done",1]],"time":19.926025390625,"type":"simplify"},{"time":0.01611328125,"type":"soundness"},{"compiler":[[13,9]],"remove-preprocessing":[[]],"time":8.06396484375,"type":"end"}]
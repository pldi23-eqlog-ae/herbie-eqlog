[{"compiler":[[10,5]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.43896484375,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.089111328125,3],["body",256,"valid",255.45703125,8256]],"time":263.109130859375,"type":"sample"},{"compiler":[[9,4]],"inputs":[["0"],["(sqrt.f64 (+.f64 (*.f64 x x) (*.f64 x x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(sqrt.f64 (+.f64 (*.f64 x x) (*.f64 x x)))","(hypot.f64 x x)"]],"symmetry":[[]],"time":55.43896484375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(sqrt.f64 (+.f64 (*.f64 x x) (*.f64 x x)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (+.f64 (*.f64 x x) (*.f64 x x)))","(hypot.f64 x x)"]],"time":21.35302734375,"type":"simplify"},{"compiler":[[12,5]],"time":0.303955078125,"type":"eval"},{"alts":[["(hypot.f64 x x)","next",0.11328125]],"compiler":[[4,2],[4,2]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.11328125],"time":1.828857421875,"type":"prune"},{"compiler":[[5,2]],"locations":[["(hypot.f64 x x)",0.11328125,true]],"time":1.43408203125,"type":"localize"},{"count":[[1,12]],"series":[["(hypot.f64 x x)","x","-inf",0.700927734375],["(hypot.f64 x x)","x","inf",0.632080078125],["(hypot.f64 x x)","x","0",0.5888671875]],"time":1.964111328125,"type":"series"},{"count":[[1,52]],"inputs":[["(hypot.f64 x x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (hypot.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (hypot.f64 x x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (hypot.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (hypot.f64 x x)) (sqrt.f64 (hypot.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (hypot.f64 x x) 2/3) (cbrt.f64 (cbrt.f64 (hypot.f64 x x)))) (cbrt.f64 (pow.f64 (hypot.f64 x x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 x x))) (pow.f64 (pow.f64 (hypot.f64 x x) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (hypot.f64 x x) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (hypot.f64 x x) 4/3)) (cbrt.f64 (hypot.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (hypot.f64 x x)) -1) (*.f64 (sqrt.f64 (hypot.f64 x x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (hypot.f64 x x))) (neg.f64 (sqrt.f64 (hypot.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 x x)) (pow.f64 (hypot.f64 x x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 x x) (pow.f64 (hypot.f64 x x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 x x) 0) (hypot.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 x x) 2/3) (cbrt.f64 (hypot.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (hypot.f64 x x)) (cbrt.f64 (pow.f64 (hypot.f64 x x) 2/3))) (cbrt.f64 (pow.f64 (hypot.f64 x x) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (neg.f64 (sqrt.f64 (hypot.f64 x x)))) (sqrt.f64 (hypot.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (hypot.f64 x x))) (neg.f64 (pow.f64 (hypot.f64 x x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (*.f64 (cbrt.f64 (hypot.f64 x x)) (cbrt.f64 (pow.f64 (hypot.f64 x x) 2/3)))) (fabs.f64 (cbrt.f64 (pow.f64 (hypot.f64 x x) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (*.f64 (pow.f64 (hypot.f64 x x) 2/3) (cbrt.f64 (cbrt.f64 (hypot.f64 x x))))) (fabs.f64 (cbrt.f64 (pow.f64 (hypot.f64 x x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (hypot.f64 x x))) (fabs.f64 (pow.f64 (hypot.f64 x x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (pow.f64 (hypot.f64 x x) 2/3)) (fabs.f64 (cbrt.f64 (hypot.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (pow.f64 (hypot.f64 x x) 2/3))) (fabs.f64 (*.f64 (cbrt.f64 (pow.f64 (hypot.f64 x x) 4/3)) (cbrt.f64 (hypot.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 x x)))) (fabs.f64 (pow.f64 (pow.f64 (hypot.f64 x x) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 x x) (fabs.f64 (pow.f64 (hypot.f64 x x) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (pow.f64 (hypot.f64 x x) 0)) (hypot.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (hypot.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (hypot.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (hypot.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (hypot.f64 x x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (hypot.f64 x x) 2/3)) (cbrt.f64 (neg.f64 (hypot.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (hypot.f64 x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (hypot.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 x x)) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 x x) 4) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 x x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 x x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 x x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (hypot.f64 x x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (hypot.f64 x x)) -1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (hypot.f64 x x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (hypot.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 x (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (hypot.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (hypot.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (hypot.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (*.f64 (neg.f64 (sqrt.f64 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 x x)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 x (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 x) (neg.f64 x))))))"]],"rules":[["egg-rr",52]],"time":34.869873046875,"type":"rewrite"},{"count":[[64,55]],"inputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))"]],"time":74.091064453125,"type":"simplify"},{"compiler":[[479,199]],"time":6.302001953125,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (hypot.f64 x x)) 3)","fresh",0.7241428832845668],["(fabs.f64 (*.f64 (sqrt.f64 2) x))","next",0.42578125],["(hypot.f64 x x)","done",0.11328125],["(pow.f64 (sqrt.f64 (hypot.f64 x x)) 2)","fresh",0.5527725586106522]],"compiler":[[7,5],[6,5],[4,2],[7,5],[7,5],[6,5],[7,5]],"count":[[56,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[55,3],"picked":[1,1]}],"min-error":[0.0234375],"time":8.447998046875,"type":"prune"},{"compiler":[[14,11]],"locations":[["(*.f64 (sqrt.f64 2) x)",0.42578125,true]],"time":3.905029296875,"type":"localize"},{"count":[[1,0]],"series":[["(*.f64 (sqrt.f64 2) x)","x","-inf",0.30712890625],["(*.f64 (sqrt.f64 2) x)","x","inf",0.294921875],["(*.f64 (sqrt.f64 2) x)","x","0",0.387939453125]],"time":1.02490234375,"type":"series"},{"count":[[1,32]],"inputs":[["(*.f64 (sqrt.f64 2) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) x) 1/2) (*.f64 (*.f64 (sqrt.f64 2) x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 2) x)) (*.f64 1/2 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (sqrt.f64 2) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (sqrt.f64 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) (cbrt.f64 (*.f64 (*.f64 x x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) 2)) (cbrt.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 2) x) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (sqrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 x (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 x (cbrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 2) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 1/2 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (*.f64 (sqrt.f64 2) x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sqrt.f64 2) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 8)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 8)))))))"]],"rules":[["egg-rr",32]],"time":41.754150390625,"type":"rewrite"},{"count":[[32,32]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"time":27.139892578125,"type":"simplify"},{"compiler":[[285,239]],"time":5.3291015625,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (hypot.f64 x x)) 3)","fresh",0.7241428832845668],["(fabs.f64 (*.f64 (sqrt.f64 2) x))","done",0.42578125],["(hypot.f64 x x)","done",0.11328125],["(fabs.f64 (*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 x (sqrt.f64 (sqrt.f64 2)))))","next",0.4811325195368841]],"compiler":[[7,5],[6,5],[4,2],[11,10],[7,5],[11,10]],"count":[[36,4]],"kept":[{"done":[1,1],"fresh":[2,1],"new":[32,1],"picked":[1,1]}],"min-error":[0.00390625],"time":5.02685546875,"type":"prune"},{"compiler":[[32,28]],"locations":[["(*.f64 x (sqrt.f64 (sqrt.f64 2)))",0.24609375,true],["(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 x (sqrt.f64 (sqrt.f64 2))))",0.3046875,true]],"time":8.89111328125,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 x (sqrt.f64 (sqrt.f64 2)))","x","-inf",0.30810546875],["(*.f64 x (sqrt.f64 (sqrt.f64 2)))","x","inf",0.41015625],["(*.f64 x (sqrt.f64 (sqrt.f64 2)))","x","0",0.38720703125],["(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 x (sqrt.f64 (sqrt.f64 2))))","x","-inf",0.161865234375],["(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 x (sqrt.f64 (sqrt.f64 2))))","x","inf",0.18701171875],["(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 x (sqrt.f64 (sqrt.f64 2))))","x","0",0.18994140625]],"time":1.723876953125,"type":"series"},{"count":[[2,66]],"inputs":[["(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 x (sqrt.f64 (sqrt.f64 2))))","(*.f64 x (sqrt.f64 (sqrt.f64 2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (sqrt.f64 2) x) 2) (/.f64 (*.f64 (sqrt.f64 2) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 2) x)) (*.f64 1/2 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) (cbrt.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2)))) (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (pow.f64 x 2/3)) (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (pow.f64 x 2/3)) (sqrt.f64 (sqrt.f64 2))) (cbrt.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (sqrt.f64 8)) (*.f64 x (sqrt.f64 (sqrt.f64 2))))) (*.f64 (cbrt.f64 (sqrt.f64 2)) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (pow.f64 x 2/3)) (cbrt.f64 (*.f64 (sqrt.f64 (sqrt.f64 8)) (*.f64 x (sqrt.f64 (sqrt.f64 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 x (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (sqrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/12) (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 x (sqrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 x (sqrt.f64 (sqrt.f64 2)))) (pow.f64 2 1/12))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 1/8)) (pow.f64 2 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 1/12)) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/8) (*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 1/12)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 2) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 1/2 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (/.f64 (*.f64 (sqrt.f64 2) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sqrt.f64 2) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 8)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 8)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) 1/2) (*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 x (sqrt.f64 (sqrt.f64 2)))) (*.f64 1/2 (*.f64 x (sqrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 2)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (sqrt.f64 (sqrt.f64 2))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (sqrt.f64 (sqrt.f64 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2)))) (*.f64 (cbrt.f64 (sqrt.f64 2)) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) (pow.f64 x 2/3)) (cbrt.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (sqrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/12) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 2)) x) (pow.f64 2 1/12))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 2 1/8)) (pow.f64 2 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 2 1/12)) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/8) (*.f64 x (pow.f64 2 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 x (pow.f64 2 1/12)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 1/2 (*.f64 x (sqrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (sqrt.f64 8)) (pow.f64 x 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (sqrt.f64 (sqrt.f64 8)) (pow.f64 x 3)))))))"]],"rules":[["egg-rr",32],["egg-rr",34]],"time":50.52099609375,"type":"rewrite"},{"count":[[90,66]],"inputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) x)"]],"time":113.671142578125,"type":"simplify"},{"compiler":[[815,727]],"time":14.093994140625,"type":"eval"},{"alts":[["(fabs.f64 (*.f64 (sqrt.f64 2) x))","done",0.42578125],["(hypot.f64 x x)","done",0.11328125],["(fabs.f64 (*.f64 (*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 1/8)) (pow.f64 2 1/8)))","next",0.36328125],["(fabs.f64 (*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 x (sqrt.f64 (sqrt.f64 2)))))","done",0.4811325195368841]],"compiler":[[6,5],[4,2],[15,14],[11,10],[15,14]],"count":[[70,4]],"kept":[{"done":[2,2],"fresh":[1,0],"new":[66,1],"picked":[1,1]}],"min-error":[0.00390625],"time":10.69384765625,"type":"prune"},{"compiler":[[53,48]],"locations":[["(*.f64 x (sqrt.f64 (sqrt.f64 2)))",0.24609375,false],["(*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 1/8))",0.29296875,true],["(*.f64 (*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 1/8)) (pow.f64 2 1/8))",0.3046875,true]],"time":16.59619140625,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 1/8))","x","-inf",0.29296875],["(*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 1/8))","x","inf",0.38916015625],["(*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 1/8))","x","0",0.62109375],["(*.f64 (*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 1/8)) (pow.f64 2 1/8))","x","-inf",0.31005859375],["(*.f64 (*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 1/8)) (pow.f64 2 1/8))","x","inf",0.4560546875],["(*.f64 (*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 1/8)) (pow.f64 2 1/8))","x","0",22.73779296875]],"time":24.910888671875,"type":"series"},{"count":[[2,78]],"inputs":[["(*.f64 (*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 1/8)) (pow.f64 2 1/8))","(*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 1/8))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (sqrt.f64 2)) 0) (*.f64 x (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (sqrt.f64 2)) (*.f64 (*.f64 x (sqrt.f64 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (sqrt.f64 2)) 1/2) (*.f64 (*.f64 x (sqrt.f64 2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (sqrt.f64 2))) (*.f64 x (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (sqrt.f64 2)) (*.f64 0 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 x (sqrt.f64 2))) (*.f64 1/2 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) (cbrt.f64 (*.f64 (*.f64 x x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) 2)) (cbrt.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2)))) (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (sqrt.f64 2)) (sqrt.f64 (sqrt.f64 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (sqrt.f64 2)) (sqrt.f64 (sqrt.f64 8)))) (cbrt.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (sqrt.f64 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 2 3/8)) (pow.f64 4 1/16))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 4 1/16) (*.f64 x (pow.f64 2 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 4 1/16) (*.f64 (cbrt.f64 x) (pow.f64 4 1/16))) (*.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 4 1/16)) (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 2))) (*.f64 x (pow.f64 2 3/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (pow.f64 4 1/16)) (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (sqrt.f64 (sqrt.f64 8))) (pow.f64 2 3/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (sqrt.f64 (sqrt.f64 8))) (pow.f64 2 3/8))) (*.f64 (cbrt.f64 x) (pow.f64 4 1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 2))) (*.f64 x (pow.f64 2 3/8))) (cbrt.f64 (pow.f64 4 1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 (sqrt.f64 2))) (*.f64 (pow.f64 4 1/16) (*.f64 (cbrt.f64 x) (pow.f64 4 1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (sqrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 x (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 4 1/16) x) (pow.f64 2 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (pow.f64 2 3/8)) (pow.f64 2 1/16)) (pow.f64 2 1/16))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/16) (*.f64 (*.f64 x (pow.f64 2 3/8)) (pow.f64 2 1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (pow.f64 2 3/8)) (cbrt.f64 (pow.f64 4 1/16))) (cbrt.f64 (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 3/8) (*.f64 (pow.f64 4 1/16) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 2))) (*.f64 (*.f64 x (pow.f64 2 3/8)) (cbrt.f64 (pow.f64 4 1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 8)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 8)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (pow.f64 2 3/8)) 0) (*.f64 x (pow.f64 2 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (pow.f64 2 3/8)) (*.f64 (*.f64 x (pow.f64 2 3/8)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (pow.f64 2 3/8)) 1/2) (*.f64 (*.f64 x (pow.f64 2 3/8)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (pow.f64 2 3/8))) (*.f64 x (pow.f64 2 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (pow.f64 2 3/8)) (*.f64 0 (*.f64 x (pow.f64 2 3/8))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 x (pow.f64 2 3/8))) (*.f64 1/2 (*.f64 x (pow.f64 2 3/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2)))) (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (sqrt.f64 2)) (pow.f64 2 3/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (pow.f64 2 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (pow.f64 2 3/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 x x) (sqrt.f64 2)) (pow.f64 2 3/8))) (cbrt.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (pow.f64 2 3/8))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (pow.f64 2 3/8)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 4 1/16))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 4 1/16) (*.f64 x (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (pow.f64 4 1/16)) (*.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 (sqrt.f64 2))) (*.f64 (cbrt.f64 x) (pow.f64 4 1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 2 3/8) (*.f64 x (sqrt.f64 (sqrt.f64 2))))) (cbrt.f64 (*.f64 (*.f64 x x) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 4 1/16)) (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 2))) (*.f64 x (sqrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (pow.f64 2 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 2 3/8)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 2))) (*.f64 x (sqrt.f64 (sqrt.f64 2)))) (cbrt.f64 (pow.f64 4 1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) (sqrt.f64 2))) (cbrt.f64 (*.f64 (pow.f64 2 3/8) (*.f64 x (sqrt.f64 (sqrt.f64 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (pow.f64 2 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 3/8) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 1/16)) (pow.f64 2 1/16))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/16) (*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (cbrt.f64 (pow.f64 4 1/16))) (cbrt.f64 (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 4 1/16) x) (sqrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 4 1/16) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 2))) (*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (cbrt.f64 (pow.f64 4 1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (pow.f64 2 3/8)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (pow.f64 2 3/8)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 x) (pow.f64 4 1/16)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 x) (pow.f64 4 1/16)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 x) (pow.f64 4 1/16)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (pow.f64 2 3/8)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (pow.f64 2 3/8))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (pow.f64 2 3/8)) 3))))))"]],"rules":[["egg-rr",38],["egg-rr",40]],"time":25.472900390625,"type":"rewrite"},{"count":[[102,80]],"inputs":[["(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/4) x))","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (pow.f64 2 3/8) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (pow.f64 2 3/8) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (pow.f64 2 3/8) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (pow.f64 2 3/8) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (pow.f64 2 3/8) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (pow.f64 2 3/8) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (pow.f64 2 3/8) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (pow.f64 2 3/8) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (pow.f64 2 3/8) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (pow.f64 2 3/8) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (pow.f64 2 3/8) x)","(*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (pow.f64 2 1/8) x))","(*.f64 (pow.f64 2 3/8) x)"]],"time":82.572021484375,"type":"simplify"},{"compiler":[[1701,1503]],"time":28.153076171875,"type":"eval"},{"alts":[["(fabs.f64 (*.f64 (pow.f64 2 3/8) (*.f64 (pow.f64 4 1/16) x)))","fresh",0.265625],["(fabs.f64 (*.f64 (sqrt.f64 2) x))","done",0.42578125],["(hypot.f64 x x)","done",0.11328125],["(fabs.f64 (*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 x (sqrt.f64 (sqrt.f64 2)))))","done",0.4811325195368841]],"compiler":[[11,10],[6,5],[4,2],[11,10]],"count":[[116,4]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[112,1],"picked":[1,0]}],"min-error":[0],"time":22.464111328125,"type":"prune"},{"accuracy":[0.11328125],"baseline":[0.11328125],"branch":[["x",0.11328125,1],["(sqrt.f64 (+.f64 (*.f64 x x) (*.f64 x x)))",0.11328125,1],["(+.f64 (*.f64 x x) (*.f64 x x))",0.11328125,1],["(*.f64 x x)",0.11328125,1]],"compiler":[[2,1],[9,4],[8,3],[4,2],[63,46]],"count":[[8,1]],"inputs":[["(fabs.f64 (*.f64 (pow.f64 2 3/8) (*.f64 (pow.f64 4 1/16) x)))","(fabs.f64 (*.f64 (*.f64 (*.f64 x (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 1/8)) (pow.f64 2 1/8)))","(fabs.f64 (*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 x (sqrt.f64 (sqrt.f64 2)))))","(pow.f64 (cbrt.f64 (hypot.f64 x x)) 3)","(fabs.f64 (*.f64 (sqrt.f64 2) x))","(pow.f64 (sqrt.f64 (hypot.f64 x x)) 2)","(hypot.f64 x x)","(sqrt.f64 (+.f64 (*.f64 x x) (*.f64 x x)))"]],"link":["."],"name":["sqrt A"],"oracle":[30.19795302208937],"outputs":[["(hypot.f64 x x)"]],"time":14.302001953125,"times":[["x",3.885986328125],["(sqrt.f64 (+.f64 (*.f64 x x) (*.f64 x x)))",2.84912109375],["(+.f64 (*.f64 x x) (*.f64 x x))",2.8701171875],["(*.f64 x x)",3.031005859375]],"type":"regimes"},{"compiler":[[4,2]],"inputs":[["(hypot.f64 x x)"]],"method":["egg-herbie"],"outputs":[["(hypot.f64 x x)"]],"stop":[["fuel",1]],"time":33.596923828125,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[4,2]],"remove-preprocessing":[[]],"time":7.199951171875,"type":"end"}]
[{"compiler":[[13,11]],"method":["search"],"sampling":[[12,0.4987797737121582,0.0014641284942626953,0.4997560977935791],[11,0.4978036880493164,0.0029282569885253906,0.4992680549621582],[10,0.4958515167236328,0.005856513977050781,0.4982919692993164],[9,0.4919471740722656,0.011713027954101563,0.4963397979736328],[8,0.48413848876953125,0.023426055908203125,0.4924354553222656],[7,0.4685211181640625,0.04685211181640625,0.48462677001953125],[6,0.437286376953125,0.0937042236328125,0.4690093994140625],[5,0.37481689453125,0.187408447265625,0.437774658203125],[4,0.2498779296875,0.37481689453125,0.37530517578125],[3,0.0,0.7496337890625,0.2503662109375],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":2.60107421875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.48974609375,13],["body",256,"valid",437.709228515625,8256]],"time":445.6611328125,"type":"sample"},{"compiler":[[12,10]],"inputs":[["0"],["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))","(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))"]],"symmetry":[[]],"time":54.391845703125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))","(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))"]],"time":19.76513671875,"type":"simplify"},{"compiler":[[23,19]],"time":0.4609375,"type":"eval"},{"alts":[["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))","next",0.0078125]],"compiler":[[12,10],[12,10]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.905029296875,"type":"prune"},{"compiler":[[45,34]],"locations":[["(atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))",0.00390625,true],["(sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))",0.01171875,true],["(/.f64 (+.f64 -1 x) (-.f64 -1 x))",0.0234375,true]],"time":11.4169921875,"type":"localize"},{"count":[[3,12]],"series":[["(atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))","x","-inf",0.237060546875],["(atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))","x","inf",0.280029296875],["(atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))","x","0",0.222900390625],["(sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))","x","-inf",0.238037109375],["(sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))","x","inf",0.282958984375],["(sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))","x","0",0.489013671875],["(/.f64 (+.f64 -1 x) (-.f64 -1 x))","x","-inf",0.262939453125],["(/.f64 (+.f64 -1 x) (-.f64 -1 x))","x","inf",0.30908203125],["(/.f64 (+.f64 -1 x) (-.f64 -1 x))","x","0",0.366943359375]],"time":2.843017578125,"type":"series"},{"count":[[3,169]],"inputs":[["(/.f64 (+.f64 -1 x) (-.f64 -1 x))","(sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 1/2) (*.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 0) (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (*.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -1 (+.f64 1 x)) -1) (*.f64 (/.f64 -1 (+.f64 1 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -1 (+.f64 1 x)) x) (*.f64 (/.f64 -1 (+.f64 1 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (*.f64 1/2 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (*.f64 0 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 1 x)) (*.f64 x (/.f64 -1 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (/.f64 -1 (+.f64 1 x))) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (+.f64 -1 x) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (+.f64 1 x)) (/.f64 (+.f64 -1 x) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (-.f64 -1 x)) (/.f64 -1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 x)) (/.f64 (+.f64 -1 x) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 x) (/.f64 -1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 1 x)) (+.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2)) (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 3/2)) (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 -1 x)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 -1 x) 2)) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (sqrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (+.f64 1 x))) (/.f64 (+.f64 -1 x) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (+.f64 -1 x) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 -1 x) 2)) (-.f64 -1 x)) (cbrt.f64 (+.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 x) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))) (cbrt.f64 (/.f64 -1 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (+.f64 1/3 1/2)) (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 x) (+.f64 1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 1) (*.f64 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x)) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 x) (cbrt.f64 (-.f64 -1 x))) (pow.f64 (cbrt.f64 (-.f64 -1 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 x 3)) (/.f64 1 (*.f64 (fma.f64 x x (+.f64 1 x)) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 0) (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (+.f64 1 x))) (+.f64 -1 (pow.f64 x 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (+.f64 1 x))) (-.f64 1 (pow.f64 x 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) (+.f64 (*.f64 x (-.f64 -1 x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (-.f64 1 (pow.f64 x 3))) (*.f64 (+.f64 1 x) (+.f64 (*.f64 x (-.f64 -1 x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) 1) (*.f64 (fma.f64 x x (+.f64 1 x)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) -1) (*.f64 (fma.f64 x x (+.f64 1 x)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (cbrt.f64 (/.f64 -1 (+.f64 1 x)))) (*.f64 (fma.f64 x x (+.f64 1 x)) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) 1) (*.f64 (+.f64 (*.f64 x (-.f64 -1 x)) -1) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) -1) (*.f64 (+.f64 (*.f64 x (-.f64 -1 x)) -1) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (cbrt.f64 (/.f64 -1 (+.f64 1 x)))) (*.f64 (+.f64 (*.f64 x (-.f64 -1 x)) -1) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 x 3)) (neg.f64 (*.f64 (fma.f64 x x (+.f64 1 x)) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 x) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 x) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 x) (cbrt.f64 (-.f64 -1 x))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 x 3)) (*.f64 (fma.f64 x x (+.f64 1 x)) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (cbrt.f64 (pow.f64 (+.f64 -1 x) 2))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2)) (cbrt.f64 (+.f64 -1 x))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2)) (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 (+.f64 1 x)) (-.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 x (-.f64 -1 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (+.f64 1 x))) (+.f64 -1 x)) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 x) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -1 x)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 x)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2))) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -1 (pow.f64 x 3))) (/.f64 (cbrt.f64 (pow.f64 (+.f64 -1 x) 2)) (-.f64 -1 x))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 -1 (+.f64 1 x))) (+.f64 (*.f64 x (-.f64 -1 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 -1 x) (cbrt.f64 (-.f64 -1 x))) 1) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (-.f64 -1 x))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 x) -1) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 -1 x) (cbrt.f64 (-.f64 -1 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 -1 x))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 -1 x))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 -1 x) (cbrt.f64 (-.f64 -1 x))) 1) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x)) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 x 3)) (/.f64 (*.f64 (fma.f64 x x (+.f64 1 x)) (-.f64 -1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 x 3)) (*.f64 (*.f64 (fma.f64 x x (+.f64 1 x)) (-.f64 -1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (-.f64 -1 x) (+.f64 (*.f64 x (-.f64 -1 x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (+.f64 1 x) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))) (+.f64 (*.f64 x (-.f64 -1 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 -1 x) (cbrt.f64 (-.f64 -1 x)))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x)) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 1 (+.f64 1 x))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x)) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x)) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 3/2) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 3/2) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 -1 x) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (+.f64 -1 x) (+.f64 1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 1/2) (*.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 0) (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (*.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (*.f64 1/2 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (*.f64 0 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (fabs.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 0) (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (pow.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (cbrt.f64 (+.f64 -1 x))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -1 x)) (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 x)) (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 1/2) (*.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 0) (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (*.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (*.f64 1/2 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (*.f64 0 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (cbrt.f64 (pow.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 2)) (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))))"]],"rules":[["egg-rr",21],["egg-rr",45],["egg-rr",103]],"time":35.010986328125,"type":"rewrite"},{"count":[[181,183]],"inputs":[["1","(+.f64 1 (*.f64 -2 x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 1 (*.f64 -2 x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 -2 x) (*.f64 -2 (pow.f64 x 3)))))","-1","(-.f64 (*.f64 2 (/.f64 1 x)) 1)","(-.f64 (*.f64 2 (/.f64 1 x)) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","-1","(-.f64 (*.f64 2 (/.f64 1 x)) 1)","(-.f64 (*.f64 2 (/.f64 1 x)) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -2 x))","(fma.f64 -2 x 1)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 1 (*.f64 -2 x)))","(+.f64 1 (*.f64 x (+.f64 -2 (*.f64 2 x))))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 -2 x) (*.f64 -2 (pow.f64 x 3)))))","(fma.f64 2 (*.f64 x x) (fma.f64 -2 (+.f64 (pow.f64 x 3) x) 1))","-1","(-.f64 (*.f64 2 (/.f64 1 x)) 1)","(+.f64 (/.f64 2 x) -1)","(-.f64 (*.f64 2 (/.f64 1 x)) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (/.f64 (-.f64 2 (/.f64 2 x)) x) -1)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (*.f64 2 (-.f64 (+.f64 (/.f64 1 x) (pow.f64 x -3)) (pow.f64 x -2))) -1)","-1","(-.f64 (*.f64 2 (/.f64 1 x)) 1)","(+.f64 (/.f64 2 x) -1)","(-.f64 (*.f64 2 (/.f64 1 x)) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (/.f64 (-.f64 2 (/.f64 2 x)) x) -1)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (*.f64 2 (-.f64 (+.f64 (/.f64 1 x) (pow.f64 x -3)) (pow.f64 x -2))) -1)"]],"time":67.45703125,"type":"simplify"},{"compiler":[[3453,2875]],"time":48.870849609375,"type":"eval"},{"alts":[["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))) (+.f64 (*.f64 x (-.f64 -1 x)) -1)))))","next",0]],"compiler":[[23,19],[23,19]],"count":[[184,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[183,1],"picked":[1,0]}],"min-error":[0],"time":64.39404296875,"type":"prune"},{"compiler":[[126,98]],"locations":[["(sqrt.f64 (/.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))) (+.f64 (*.f64 x (-.f64 -1 x)) -1)))",0.01171875,true],["(/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))",0.01171875,true],["(*.f64 x (-.f64 -1 x))",0.01953125,true],["(/.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))) (+.f64 (*.f64 x (-.f64 -1 x)) -1))",0.02734375,true]],"time":29.787109375,"type":"localize"},{"count":[[4,40]],"series":[["(sqrt.f64 (/.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))) (+.f64 (*.f64 x (-.f64 -1 x)) -1)))","x","-inf",0.4501953125],["(sqrt.f64 (/.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))) (+.f64 (*.f64 x (-.f64 -1 x)) -1)))","x","inf",0.3359375],["(sqrt.f64 (/.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))) (+.f64 (*.f64 x (-.f64 -1 x)) -1)))","x","0",0.196044921875],["(/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))","x","-inf",0.22900390625],["(/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))","x","inf",0.18603515625],["(/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))","x","0",0.217041015625],["(*.f64 x (-.f64 -1 x))","x","-inf",0.297119140625],["(*.f64 x (-.f64 -1 x))","x","inf",0.61181640625],["(*.f64 x (-.f64 -1 x))","x","0",0.300048828125],["(/.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))) (+.f64 (*.f64 x (-.f64 -1 x)) -1))","x","-inf",0.2919921875],["(/.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))) (+.f64 (*.f64 x (-.f64 -1 x)) -1))","x","inf",0.25],["(/.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))) (+.f64 (*.f64 x (-.f64 -1 x)) -1))","x","0",0.321044921875]],"time":3.85888671875,"type":"series"},{"count":[[4,340]],"inputs":[["(/.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))) (+.f64 (*.f64 x (-.f64 -1 x)) -1))","(*.f64 x (-.f64 -1 x))","(/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))","(sqrt.f64 (/.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))) (+.f64 (*.f64 x (-.f64 -1 x)) -1)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (*.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 0) (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 1/2) (*.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (fma.f64 x (-.f64 -1 x) -1)) 0) (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (*.f64 0 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (*.f64 1/2 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2)) (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2) (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2)) (fma.f64 x (-.f64 -1 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (fma.f64 x x (+.f64 1 x)))) (/.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) (/.f64 1 (fma.f64 x (-.f64 -1 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x (-.f64 -1 x) -1)) (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 3/2)) (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (sqrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (-.f64 -1 x) -1) (neg.f64 1/3)) (/.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1)))) (/.f64 (/.f64 1 (-.f64 -1 x)) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (-.f64 -1 x)))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2) (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 (/.f64 1 (-.f64 -1 x)) (fma.f64 x (-.f64 -1 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (-.f64 -1 x)))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1))) (neg.f64 (/.f64 (/.f64 1 (-.f64 -1 x)) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (-.f64 -1 x))) (neg.f64 (cbrt.f64 (/.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2) (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))) (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2)) (fma.f64 x (-.f64 -1 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 x 3)) (neg.f64 (/.f64 (/.f64 1 (-.f64 -1 x)) (fma.f64 x (-.f64 -1 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (-.f64 -1 x))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) -1) (*.f64 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) -1) (*.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 1) (*.f64 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (*.f64 1 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 (-.f64 -1 x) (fma.f64 x (-.f64 -1 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1))) (pow.f64 (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 0) (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 x) (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2))) (*.f64 (fma.f64 x (-.f64 -1 x) -1) (/.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1))))) (*.f64 (fma.f64 x (-.f64 -1 x) -1) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (fma.f64 x x (+.f64 1 x))) (*.f64 (fma.f64 x (-.f64 -1 x) -1) (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)))) (*.f64 (fma.f64 x (-.f64 -1 x) -1) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 x 3)) (neg.f64 (*.f64 (-.f64 -1 x) (fma.f64 x (-.f64 -1 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1))) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) (fma.f64 x (-.f64 -1 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (-.f64 -1 x) (fma.f64 x (-.f64 -1 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2)) (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)))) (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2)) (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2))) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 x x (+.f64 1 x)))) (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 x (-.f64 -1 x) -1)) (/.f64 (-.f64 1 (pow.f64 x 3)) (cbrt.f64 (-.f64 -1 x)))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 x (-.f64 -1 x) -1)) (+.f64 -1 (pow.f64 x 3))) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 x (-.f64 -1 x) -1)) (-.f64 1 (pow.f64 x 3))) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1)))) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 x (-.f64 -1 x) -1) (neg.f64 1/3)) (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x))) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 x 3))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2)) (fma.f64 x (-.f64 -1 x) -1))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2))) (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (cbrt.f64 (-.f64 -1 x))) (/.f64 1 (fma.f64 x (-.f64 -1 x) -1))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (/.f64 1 (fma.f64 x (-.f64 -1 x) -1))) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2) (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2)))) (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2))) (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2) (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2)))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2)))) (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (cbrt.f64 (-.f64 -1 x))) (/.f64 1 (fma.f64 x x (+.f64 1 x)))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (pow.f64 x 3) 3)) (/.f64 1 (fma.f64 x x (+.f64 1 x)))) (*.f64 (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3))) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 1 (fma.f64 x x (+.f64 1 x)))) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 x) 1) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1))) 1) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1))) 1) (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x (+.f64 -1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 x) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 x) (cbrt.f64 (-.f64 -1 x))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 x) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 x) -1) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) (+.f64 (pow.f64 (*.f64 x (-.f64 -1 x)) 3) -1)) (/.f64 1 (+.f64 (pow.f64 (fma.f64 x x x) 2) (fma.f64 x (-.f64 -1 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 (*.f64 (-.f64 -1 x) (fma.f64 x (-.f64 -1 x) -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (fma.f64 x (-.f64 -1 x) -1)) (*.f64 (fma.f64 x (-.f64 -1 x) -1) (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)))) (pow.f64 (fma.f64 x (-.f64 -1 x) -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 -1 (pow.f64 (pow.f64 x 3) 3)) (-.f64 -1 x)) (/.f64 1 (fma.f64 x x (+.f64 1 x)))) (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 x) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 3/2) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 3/2) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 1 x) (-.f64 -1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (fma.f64 x (-.f64 -1 x) -1)) (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (-.f64 1 x) (-.f64 -1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 -1 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (+.f64 (neg.f64 (*.f64 x x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (-.f64 (neg.f64 (*.f64 x x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 -1 x)) (*.f64 (*.f64 x (-.f64 -1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (-.f64 -1 x)) 0) (*.f64 x (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (-.f64 -1 x)) 1/2) (*.f64 (*.f64 x (-.f64 -1 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x x x) 0) (*.f64 x (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 -1 x)) (*.f64 0 (*.f64 x (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (-.f64 -1 x))) (*.f64 x (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 x (-.f64 -1 x))) (*.f64 1/2 (*.f64 x (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x x x)) (*.f64 x (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (*.f64 (neg.f64 (*.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (-.f64 -1 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 x (neg.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 x x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -1 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (-.f64 -1 x))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 -1 x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 x x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (fma.f64 x x x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (fma.f64 x x x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 x (-.f64 -1 x)))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (-.f64 -1 x))) (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x x)) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 -1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x (+.f64 -1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2)) (-.f64 0 (*.f64 (cbrt.f64 (*.f64 x (-.f64 -1 x))) 0))) (+.f64 (cbrt.f64 (*.f64 x (-.f64 -1 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2)) (+.f64 0 (*.f64 (cbrt.f64 (*.f64 x (-.f64 -1 x))) 0))) (-.f64 (cbrt.f64 (*.f64 x (-.f64 -1 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (-.f64 -1 x))) (cbrt.f64 (pow.f64 (fma.f64 x x x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2)) (cbrt.f64 (*.f64 x (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 -1 x) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 -1 (pow.f64 x 3))) (fma.f64 x (+.f64 -1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 1 (pow.f64 x 3))) (neg.f64 (fma.f64 x (+.f64 -1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 x (-.f64 -1 (pow.f64 x 3)))) (fma.f64 x (+.f64 -1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) x) (neg.f64 (fma.f64 x (+.f64 -1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 -1 (pow.f64 x 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) x)) (cbrt.f64 (fma.f64 x (+.f64 -1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 -1 (pow.f64 x 3))) 1) (fma.f64 x (+.f64 -1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 -1 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x (+.f64 -1 x) 1))) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 -1 x) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 -1 (pow.f64 x 3))) 1) (fma.f64 x (+.f64 -1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (-.f64 -1 (pow.f64 x 3)))) (neg.f64 (fma.f64 x (+.f64 -1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (-.f64 -1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (-.f64 -1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (-.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (-.f64 -1 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (-.f64 -1 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 x x x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (-.f64 -1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fma.f64 x x x) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x -1 (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 x) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (neg.f64 (cbrt.f64 (*.f64 x x))) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 x (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (-.f64 -1 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (fma.f64 x x x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (-.f64 -1 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (-.f64 -1 x)) 1 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (-.f64 -1 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (-.f64 -1 x))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 -1 x) x 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 -1 x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (*.f64 x x)) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (-.f64 -1 x))) (cbrt.f64 (pow.f64 (fma.f64 x x x) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 -1 x) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2)) (cbrt.f64 (*.f64 x (-.f64 -1 x))) 0)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (-.f64 -1 x)) -1) (*.f64 (/.f64 1 (-.f64 -1 x)) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (-.f64 -1 x)) (pow.f64 x 3)) (*.f64 (/.f64 1 (-.f64 -1 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) (*.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) 0) (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) 1/2) (*.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 1 x)) (*.f64 (pow.f64 x 3) (/.f64 1 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x 3) (/.f64 1 (-.f64 -1 x))) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))) (*.f64 1/2 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 -1) (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 x)) (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 x 3) (-.f64 -1 x)) (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (+.f64 1 x)) (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 -1 (pow.f64 x 3))) (/.f64 (cbrt.f64 (pow.f64 (+.f64 -1 (pow.f64 x 3)) 2)) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 x 3)) (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2)) (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 x)) (+.f64 -1 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))) (cbrt.f64 (/.f64 (pow.f64 (+.f64 -1 (pow.f64 x 3)) 2) (pow.f64 (-.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 x))) (/.f64 (+.f64 -1 (pow.f64 x 3)) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2))) (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (pow.f64 x 3) 3)) (/.f64 1 (*.f64 (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3))) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 (pow.f64 (pow.f64 x 3) 3)) (-.f64 -1 x)) (/.f64 1 (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (cbrt.f64 (-.f64 -1 x))) (pow.f64 (cbrt.f64 (-.f64 -1 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2)) (*.f64 0 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)))))) (+.f64 0 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2)) (*.f64 0 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)))))) (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2)) (+.f64 0 (*.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))) 0))) (-.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (cbrt.f64 (-.f64 -1 x))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (pow.f64 x 3) 3)) (*.f64 (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3))) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2)) (cbrt.f64 (+.f64 -1 (pow.f64 x 3)))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 x 3)))) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (-.f64 -1 x)) (-.f64 1 (pow.f64 (pow.f64 x 3) 3))) (neg.f64 (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 -1 (pow.f64 x 3)) 2))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (-.f64 1 (pow.f64 x 3)) (cbrt.f64 (-.f64 -1 x)))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 x))) (+.f64 -1 (pow.f64 x 3))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 x 3))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2)))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -1 (pow.f64 x 3))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -1 (pow.f64 x 3))) (cbrt.f64 (/.f64 (pow.f64 (+.f64 -1 (pow.f64 x 3)) 2) (pow.f64 (-.f64 -1 x) 2)))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 x 3))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2))) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 x 3))) (cbrt.f64 (/.f64 (pow.f64 (+.f64 -1 (pow.f64 x 3)) 2) (pow.f64 (-.f64 -1 x) 2)))) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 x 3) 3)) (/.f64 1 (-.f64 -1 x))) (neg.f64 (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (cbrt.f64 (-.f64 -1 x))) 1) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -1 (pow.f64 (pow.f64 x 3) 3))) (/.f64 (cbrt.f64 (pow.f64 (+.f64 -1 (pow.f64 x 3)) 2)) (-.f64 -1 x))) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (cbrt.f64 (-.f64 -1 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 -1 x))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 -1 x))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (cbrt.f64 (-.f64 -1 x))) 1) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x (+.f64 -1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (cbrt.f64 (-.f64 -1 x))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 -1 (pow.f64 (pow.f64 x 3) 3)) (-.f64 -1 x)) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3))))) (pow.f64 (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (pow.f64 x 3) 3)) (/.f64 (*.f64 (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3))) (-.f64 -1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (pow.f64 x 3) 3)) (*.f64 1 (*.f64 (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3))) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (cbrt.f64 (-.f64 -1 x)))) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 x 3) 3)) (neg.f64 (*.f64 (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3))) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 (pow.f64 x 3) 3)) (-.f64 -1 x))) (neg.f64 (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 (pow.f64 (pow.f64 x 3) 3)) (-.f64 -1 x)) (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (-.f64 -1 x)) (+.f64 -1 (pow.f64 (pow.f64 x 3) 3))) (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (+.f64 -1 (pow.f64 (pow.f64 x 3) 3)) (-.f64 -1 x))) (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 x 3) 3)) (/.f64 1 (+.f64 1 x))) (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 -1 (pow.f64 (pow.f64 x 3) 3)) (-.f64 -1 x)) 1) (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 -1 (pow.f64 (pow.f64 x 3) 3)) (-.f64 -1 x)) 1) (+.f64 1 (+.f64 (pow.f64 x 6) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 -1 (pow.f64 x 3))) (/.f64 (cbrt.f64 (pow.f64 (+.f64 -1 (pow.f64 x 3)) 2)) (-.f64 -1 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2)) (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))) (cbrt.f64 (/.f64 (pow.f64 (+.f64 -1 (pow.f64 x 3)) 2) (pow.f64 (-.f64 -1 x) 2))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 x))) (/.f64 (+.f64 -1 (pow.f64 x 3)) (cbrt.f64 (pow.f64 (-.f64 -1 x) 2))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 1 (+.f64 1 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)) 1 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 -1 (pow.f64 x 3)) (/.f64 1 (-.f64 -1 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 -1 x)) (+.f64 -1 (pow.f64 x 3)) 0)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (*.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 0) (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 1/2) (*.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (*.f64 0 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (*.f64 1/2 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) -1) (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (fabs.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (pow.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 0) (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x)))) (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x)))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (-.f64 -1 x))) (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (cbrt.f64 (fma.f64 x (-.f64 -1 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (+.f64 1 x))) (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))))))"]],"rules":[["egg-rr",49],["egg-rr",100],["egg-rr",74],["egg-rr",117]],"time":53.916015625,"type":"rewrite"},{"count":[[380,375]],"inputs":[["1","(+.f64 1 (*.f64 -2 x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 1 (*.f64 -2 x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 -2 x) (*.f64 -2 (pow.f64 x 3)))))","-1","(-.f64 (*.f64 2 (/.f64 1 x)) 1)","(-.f64 (*.f64 2 (/.f64 1 x)) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","-1","(-.f64 (*.f64 2 (/.f64 1 x)) 1)","(-.f64 (*.f64 2 (/.f64 1 x)) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(*.f64 -1 x)","(+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))","(+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))","(+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))","(*.f64 -1 (pow.f64 x 2))","(+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))","(+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))","(+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))","(*.f64 -1 (pow.f64 x 2))","(+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))","(+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))","(+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))","1","(+.f64 1 (*.f64 -1 x))","(+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1 x) (+.f64 (*.f64 -2 (pow.f64 x 3)) (pow.f64 x 2))))","(*.f64 -1 (pow.f64 x 2))","(+.f64 (*.f64 -1 (pow.f64 x 2)) x)","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 2)) x) 1)","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 2)) (+.f64 (*.f64 2 (/.f64 1 x)) x)) 1)","(*.f64 -1 (pow.f64 x 2))","(+.f64 (*.f64 -1 (pow.f64 x 2)) x)","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 2)) x) 1)","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 2)) (+.f64 (*.f64 2 (/.f64 1 x)) x)) 1)","1","(+.f64 1 (*.f64 -1 x))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 3)) (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -2 x))","(fma.f64 -2 x 1)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 1 (*.f64 -2 x)))","(fma.f64 2 (*.f64 x x) (fma.f64 -2 x 1))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 -2 x) (*.f64 -2 (pow.f64 x 3)))))","(fma.f64 2 (*.f64 x x) (fma.f64 -2 (+.f64 x (pow.f64 x 3)) 1))","-1","(-.f64 (*.f64 2 (/.f64 1 x)) 1)","(+.f64 (/.f64 2 x) -1)","(-.f64 (*.f64 2 (/.f64 1 x)) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (/.f64 2 x) (fma.f64 (pow.f64 x -2) 2 1))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (fma.f64 2 (pow.f64 x -3) (/.f64 2 x)) (fma.f64 (pow.f64 x -2) 2 1))","-1","(-.f64 (*.f64 2 (/.f64 1 x)) 1)","(+.f64 (/.f64 2 x) -1)","(-.f64 (*.f64 2 (/.f64 1 x)) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (/.f64 2 x) (fma.f64 (pow.f64 x -2) 2 1))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (fma.f64 2 (pow.f64 x -3) (/.f64 2 x)) (fma.f64 (pow.f64 x -2) 2 1))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))","(*.f64 x (-.f64 -1 x))","(+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))","(*.f64 x (-.f64 -1 x))","(+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))","(*.f64 x (-.f64 -1 x))","(*.f64 -1 (pow.f64 x 2))","(neg.f64 (*.f64 x x))","(+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))","(*.f64 x (-.f64 -1 x))","(+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))","(*.f64 x (-.f64 -1 x))","(+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))","(*.f64 x (-.f64 -1 x))","(*.f64 -1 (pow.f64 x 2))","(neg.f64 (*.f64 x x))","(+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))","(*.f64 x (-.f64 -1 x))","(+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))","(*.f64 x (-.f64 -1 x))","(+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 x))","(*.f64 x (-.f64 -1 x))","1","(+.f64 1 (*.f64 -1 x))","(-.f64 1 x)","(+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2)))","(+.f64 1 (*.f64 x (+.f64 x -1)))","(+.f64 1 (+.f64 (*.f64 -1 x) (+.f64 (*.f64 -2 (pow.f64 x 3)) (pow.f64 x 2))))","(+.f64 (-.f64 1 x) (fma.f64 -2 (pow.f64 x 3) (*.f64 x x)))","(*.f64 -1 (pow.f64 x 2))","(neg.f64 (*.f64 x x))","(+.f64 (*.f64 -1 (pow.f64 x 2)) x)","(-.f64 x (*.f64 x x))","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 2)) x) 1)","(+.f64 (-.f64 x (*.f64 x x)) -1)","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 2)) (+.f64 (*.f64 2 (/.f64 1 x)) x)) 1)","(+.f64 (-.f64 (+.f64 (/.f64 2 x) x) (*.f64 x x)) -1)","(*.f64 -1 (pow.f64 x 2))","(neg.f64 (*.f64 x x))","(+.f64 (*.f64 -1 (pow.f64 x 2)) x)","(-.f64 x (*.f64 x x))","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 2)) x) 1)","(+.f64 (-.f64 x (*.f64 x x)) -1)","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 2)) (+.f64 (*.f64 2 (/.f64 1 x)) x)) 1)","(+.f64 (-.f64 (+.f64 (/.f64 2 x) x) (*.f64 x x)) -1)","1","(+.f64 1 (*.f64 -1 x))","(-.f64 1 x)","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x)))","(+.f64 1 (fma.f64 1/2 (*.f64 x x) (neg.f64 x)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 3)) (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x))))","(+.f64 1 (fma.f64 -1/2 (pow.f64 x 3) (fma.f64 1/2 (*.f64 x x) (neg.f64 x))))"]],"time":128.551025390625,"type":"simplify"},{"compiler":[[9660,7890]],"time":126.9619140625,"type":"eval"},{"alts":[["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))) (+.f64 (*.f64 x (-.f64 -1 x)) -1)))))","done",0]],"compiler":[[23,19]],"count":[[376,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[375,0],"picked":[1,1]}],"min-error":[0],"time":234.333984375,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))",0,1],["(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))",0,1],["(sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))",0,1],["(/.f64 (-.f64 1 x) (+.f64 1 x))",0,1]],"compiler":[[2,1],[12,10],[10,8],[9,7],[8,6],[45,37]],"count":[[3,1]],"inputs":[["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))) (+.f64 (*.f64 x (-.f64 -1 x)) -1)))))","(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))","(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))"]],"link":["."],"name":["arccos"],"oracle":[0.0078125],"outputs":[["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))) (+.f64 (*.f64 x (-.f64 -1 x)) -1)))))"]],"time":11.01416015625,"times":[["x",2.572998046875],["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))",1.943115234375],["(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))",1.785888671875],["(sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))",1.778076171875],["(/.f64 (-.f64 1 x) (+.f64 1 x))",1.760009765625]],"type":"regimes"},{"compiler":[[23,19]],"inputs":[["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))) (+.f64 (*.f64 x (-.f64 -1 x)) -1)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (neg.f64 (/.f64 (+.f64 -1 (pow.f64 x 3)) (-.f64 -1 x))) (+.f64 (*.f64 x (-.f64 -1 x)) -1)))))","(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (+.f64 -1 x) (-.f64 -1 x)))))"]],"stop":[["done",1]],"time":24.073974609375,"type":"simplify"},{"time":0.015869140625,"type":"soundness"},{"compiler":[[23,19]],"remove-preprocessing":[[]],"time":12.754150390625,"type":"end"}]
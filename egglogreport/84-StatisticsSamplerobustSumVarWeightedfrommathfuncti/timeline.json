[{"compiler":[[11,7]],"method":["search"],"sampling":[[12,0.46416315896613014,0.4173567899947557,0.11848005103911419],[11,0.3822520132662248,0.499267935694661,0.11848005103911419],[10,0.3276445827996213,0.5616764276564936,0.11067898954388511],[9,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":78.14404296875,"type":"analyze"},{"outcomes":[["body",256,"invalid",53.70166015625,1437],["body",256,"valid",311.19140625,8256]],"time":373.883056640625,"type":"sample"},{"compiler":[[10,6]],"inputs":[["0","1","2"],["(+.f64 x (*.f64 (*.f64 y z) z))","(+.f64 y (*.f64 (*.f64 x z) z))","(+.f64 z (*.f64 (*.f64 y x) x))","(+.f64 x (*.f64 (*.f64 z y) y))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 x (*.f64 (*.f64 y z) z))","(fma.f64 (*.f64 y z) z x)","(+.f64 y (*.f64 (*.f64 x z) z))","(fma.f64 z (*.f64 x z) y)","(+.f64 z (*.f64 (*.f64 y x) x))","(fma.f64 (*.f64 y x) x z)","(+.f64 x (*.f64 (*.f64 z y) y))","(fma.f64 (*.f64 y z) y x)"]],"symmetry":[[]],"time":67.614990234375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 x (*.f64 (*.f64 y z) z))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (*.f64 (*.f64 y z) z))","(fma.f64 (*.f64 y z) z x)"]],"time":37.531005859375,"type":"simplify"},{"compiler":[[16,7]],"time":0.287841796875,"type":"eval"},{"alts":[["(fma.f64 (*.f64 y z) z x)","fresh",0.0859375],["(+.f64 x (*.f64 (*.f64 y z) z))","next",0.08203125]],"compiler":[[9,5],[10,6],[9,5],[10,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.078125],"time":1.197021484375,"type":"prune"},{"compiler":[[21,6]],"locations":[["(+.f64 x (*.f64 (*.f64 y z) z))",0.00390625,true],["(*.f64 (*.f64 y z) z)",0.171875,true]],"time":4.115966796875,"type":"localize"},{"count":[[2,60]],"series":[["(+.f64 x (*.f64 (*.f64 y z) z))","z","-inf",0.170166015625],["(+.f64 x (*.f64 (*.f64 y z) z))","z","inf",0.157958984375],["(+.f64 x (*.f64 (*.f64 y z) z))","z","0",0.18603515625],["(+.f64 x (*.f64 (*.f64 y z) z))","y","-inf",0.158935546875],["(+.f64 x (*.f64 (*.f64 y z) z))","y","inf",0.159912109375],["(+.f64 x (*.f64 (*.f64 y z) z))","y","0",0.18896484375],["(+.f64 x (*.f64 (*.f64 y z) z))","x","-inf",0.1728515625],["(+.f64 x (*.f64 (*.f64 y z) z))","x","inf",0.27294921875],["(+.f64 x (*.f64 (*.f64 y z) z))","x","0",0.255859375],["(*.f64 (*.f64 y z) z)","z","-inf",0.2080078125],["(*.f64 (*.f64 y z) z)","z","inf",0.501220703125],["(*.f64 (*.f64 y z) z)","z","0",0.39306640625],["(*.f64 (*.f64 y z) z)","y","-inf",0.261962890625],["(*.f64 (*.f64 y z) z)","y","inf",0.4228515625],["(*.f64 (*.f64 y z) z)","y","0",0.608154296875]],"time":4.2900390625,"type":"series"},{"count":[[2,75]],"inputs":[["(*.f64 (*.f64 y z) z)","(+.f64 x (*.f64 (*.f64 y z) z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y z) z) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (*.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y z) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y z)) (*.f64 (pow.f64 (*.f64 y z) 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z 2/3) (*.f64 y z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 y z) 2/3) z) (cbrt.f64 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) (pow.f64 (*.f64 (*.f64 y z) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3) (cbrt.f64 (*.f64 (*.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y z) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (*.f64 y z))) (pow.f64 (*.f64 y z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y z) 2/3) (*.f64 z (cbrt.f64 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (*.f64 (*.f64 y z) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 y z) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 y z) z) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 y z) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 y z) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 y z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 y z) z) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (*.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y z) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x 0) (*.f64 (*.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (*.f64 y z) z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y z) z x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (neg.f64 (*.f64 (*.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (*.f64 y z) z) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 (*.f64 y z) z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 y z) z x)) (pow.f64 (fma.f64 (*.f64 y z) z x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 y z) z))))) (+.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (*.f64 (pow.f64 z 2/3) (-.f64 (pow.f64 (*.f64 y z) 2/3) (cbrt.f64 (*.f64 x y))))) (+.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 y z) z x) 2/3) (cbrt.f64 (fma.f64 (*.f64 y z) z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (+.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3) (*.f64 (cbrt.f64 x) (cbrt.f64 (neg.f64 (*.f64 (*.f64 y z) z)))))) (+.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (*.f64 y z) z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (*.f64 y z) z x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (*.f64 y z) z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 y z) z x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 y z) z x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 y z) z x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (*.f64 y z) z x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 y z) z x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 y z) z x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 y z) z x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (*.f64 y z) z x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 y z) z x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) z x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) (pow.f64 (*.f64 (*.f64 y z) z) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 z z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 (*.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 (*.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) (*.f64 y z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 (*.f64 y z))) (pow.f64 (*.f64 y z) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y z) (cbrt.f64 z)) (pow.f64 z 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z z) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y z)) (*.f64 (pow.f64 (*.f64 y z) 2/3) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3) (cbrt.f64 (*.f64 (*.f64 y z) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 (*.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (*.f64 y z) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 y z) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (*.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (*.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y z) z) 1 x)))))"]],"rules":[["egg-rr",44],["egg-rr",31]],"time":43.48095703125,"type":"rewrite"},{"count":[[135,78]],"inputs":[["(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","x","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","x","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","x","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(*.f64 y (pow.f64 z 2))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(*.f64 y (pow.f64 z 2))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","x","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(*.f64 y (pow.f64 z 2))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(*.f64 y (pow.f64 z 2))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","x","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","x","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","x","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","x","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)"]],"time":217.606201171875,"type":"simplify"},{"compiler":[[824,253]],"time":8.8359375,"type":"eval"},{"alts":[["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3))","next",0.2194901367581882],["(+.f64 x (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)))","fresh",2.243885107452862],["(+.f64 x (*.f64 (*.f64 y z) z))","done",0.08203125],["(fma.f64 (*.f64 z z) y x)","fresh",6.779825768864454]],"compiler":[[13,9],[14,9],[10,6],[9,5],[13,9],[14,9],[9,5]],"count":[[80,4]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[78,3],"picked":[1,1]}],"min-error":[0.015625],"time":17.329833984375,"type":"prune"},{"compiler":[[39,12]],"locations":[["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3))",0.00390625,true],["(*.f64 (*.f64 y z) z)",0.171875,false],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3)",0.4431802246741665,true],["(cbrt.f64 (*.f64 (*.f64 y z) z))",21.08672987035355,true]],"time":7.341064453125,"type":"localize"},{"count":[[3,18]],"series":[["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3))","z","-inf",0.251953125],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3))","z","inf",0.2900390625],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3))","z","0",0.23583984375],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3))","y","-inf",0.277099609375],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3))","y","inf",0.26318359375],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3))","y","0",0.278076171875],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3))","x","-inf",0.171142578125],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3))","x","inf",0.200927734375],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3))","x","0",0.9609375],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3)","z","-inf",0.406005859375],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3)","z","inf",0.485107421875],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3)","z","0",0.369873046875],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3)","y","-inf",0.8369140625],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3)","y","inf",0.694091796875],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3)","y","0",0.617919921875],["(cbrt.f64 (*.f64 (*.f64 y z) z))","z","-inf",0.55908203125],["(cbrt.f64 (*.f64 (*.f64 y z) z))","z","inf",0.31103515625],["(cbrt.f64 (*.f64 (*.f64 y z) z))","z","0",0.263916015625],["(cbrt.f64 (*.f64 (*.f64 y z) z))","y","-inf",0.47998046875],["(cbrt.f64 (*.f64 (*.f64 y z) z))","y","inf",0.321044921875],["(cbrt.f64 (*.f64 (*.f64 y z) z))","y","0",0.4501953125]],"time":8.988037109375,"type":"series"},{"count":[[3,119]],"inputs":[["(cbrt.f64 (*.f64 (*.f64 y z) z))","(pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3)","(+.f64 x (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) (*.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 0) (cbrt.f64 (*.f64 (*.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) (*.f64 0 (cbrt.f64 (*.f64 (*.f64 y z) z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (*.f64 (*.f64 y z) z))) (cbrt.f64 (*.f64 (*.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (cbrt.f64 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 y z))) (cbrt.f64 (*.f64 (pow.f64 (*.f64 y z) 2/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 y z))) (cbrt.f64 (*.f64 (cbrt.f64 z) (pow.f64 (*.f64 (*.f64 y z) z) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (cbrt.f64 (*.f64 (pow.f64 z 2/3) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y z) (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 y)) (cbrt.f64 (*.f64 (pow.f64 y 2/3) (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 y z) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3)) (pow.f64 (*.f64 (*.f64 y z) z) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3) (cbrt.f64 (*.f64 y z)))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (cbrt.f64 (*.f64 y z)))) (cbrt.f64 (pow.f64 (*.f64 y z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) (+.f64 2 1/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 y z) z))) (cbrt.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (*.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (*.f64 (*.f64 y z) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 y z) z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 y z) z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 y z) z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 y z) z) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 y z) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 y z) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 y z) z))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y z) z) (*.f64 (*.f64 (*.f64 y z) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 y z) z) 0) (*.f64 (*.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y z) z) (*.f64 0 (*.f64 (*.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 y z) z)) (*.f64 (*.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y z) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (*.f64 y z))) (pow.f64 (*.f64 y z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3) (cbrt.f64 (*.f64 y z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y z)) (*.f64 (pow.f64 (*.f64 y z) 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y z)) (*.f64 (cbrt.f64 z) (pow.f64 (*.f64 (*.f64 y z) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y z) 2/3) (*.f64 z (cbrt.f64 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 y z) 2/3) z) (cbrt.f64 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3) (cbrt.f64 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 z z)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 z) (pow.f64 (*.f64 (*.f64 y z) z) 2/3)) (cbrt.f64 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z 2/3) (*.f64 y z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) (pow.f64 (*.f64 (*.f64 y z) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3) (cbrt.f64 (*.f64 (*.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y z) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 y z) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (*.f64 (*.f64 y z) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3)) (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 y z) z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 y z) z))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3)) (pow.f64 (*.f64 (*.f64 y z) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3)) (pow.f64 (*.f64 (*.f64 y z) z) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 y z) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 y z) z) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 y z) z) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 y z) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 y z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 y z) z) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (*.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y z) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 y z) x) (*.f64 (fma.f64 z (*.f64 y z) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z (*.f64 y z) x) 0) (fma.f64 z (*.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 y z) x) (*.f64 0 (fma.f64 z (*.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 z (*.f64 y z) x)) (fma.f64 z (*.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 z (*.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 z (*.f64 y z) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (*.f64 y z) x)) (pow.f64 (fma.f64 z (*.f64 y z) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3) (cbrt.f64 (*.f64 x (*.f64 (*.f64 y z) z))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 y z) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3) (-.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 x (*.f64 (*.f64 y z) z))))) (+.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z (*.f64 y z) x) 2/3) (cbrt.f64 (fma.f64 z (*.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (*.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (*.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 z (*.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (*.f64 y z) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (*.f64 y z) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (*.f64 y z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (*.f64 y z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (*.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 z (*.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (*.f64 y z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) z x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 (*.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3) (cbrt.f64 (*.f64 (*.f64 y z) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) (pow.f64 (*.f64 (*.f64 y z) z) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 z z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 (*.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 (*.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 (*.f64 y z))) (pow.f64 (*.f64 y z) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (*.f64 y z) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y z)) (*.f64 (pow.f64 (*.f64 y z) 2/3) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3) (cbrt.f64 (*.f64 y z))) (cbrt.f64 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z z) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 z z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y z) (cbrt.f64 z)) (pow.f64 z 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y z)) (*.f64 (cbrt.f64 z) (pow.f64 (*.f64 (*.f64 y z) z) 2/3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) (*.f64 y z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (*.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 y z) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (*.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 y z) z))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 y z) z) 2/3)) (pow.f64 (*.f64 (*.f64 y z) z) 2/3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y z) z) 1 x)))))"]],"rules":[["egg-rr",45],["egg-rr",43],["egg-rr",31]],"time":28.18896484375,"type":"rewrite"},{"count":[[137,122]],"inputs":[["(*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2)))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","x","x","x","x","x","x"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2)))","(*.f64 y (*.f64 z z))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 y (*.f64 z z) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 y (*.f64 z z) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 y (*.f64 z z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 y (*.f64 z z) x)","x","x","x","x","x","x"]],"time":62.48095703125,"type":"simplify"},{"compiler":[[2046,764]],"time":20.97314453125,"type":"eval"},{"alts":[["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3))","done",0.2194901367581882],["(fma.f64 (*.f64 z z) y x)","fresh",6.779825768864454],["(+.f64 x (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)))","next",2.243885107452862],["(+.f64 x (*.f64 (*.f64 y z) z))","done",0.08203125]],"compiler":[[13,9],[9,5],[14,9],[10,6],[9,5],[14,9]],"count":[[158,4]],"kept":[{"done":[1,1],"fresh":[2,1],"new":[154,1],"picked":[1,1]}],"min-error":[0.015625],"time":44.5419921875,"type":"prune"},{"compiler":[[39,15]],"locations":[["(cbrt.f64 y)",0.06640625,true],["(*.f64 z (cbrt.f64 y))",0.2421875,true],["(pow.f64 (*.f64 z (cbrt.f64 y)) 2)",0.292011279305326,true],["(*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2))",4.004390467964839,true]],"time":8.06689453125,"type":"localize"},{"count":[[4,48]],"series":[["(cbrt.f64 y)","y","-inf",0.197998046875],["(cbrt.f64 y)","y","inf",0.18994140625],["(cbrt.f64 y)","y","0",0.18603515625],["(*.f64 z (cbrt.f64 y))","y","-inf",0.33203125],["(*.f64 z (cbrt.f64 y))","y","inf",0.257080078125],["(*.f64 z (cbrt.f64 y))","y","0",0.240966796875],["(*.f64 z (cbrt.f64 y))","z","-inf",0.156005859375],["(*.f64 z (cbrt.f64 y))","z","inf",0.177001953125],["(*.f64 z (cbrt.f64 y))","z","0",0.153076171875],["(pow.f64 (*.f64 z (cbrt.f64 y)) 2)","y","-inf",0.5849609375],["(pow.f64 (*.f64 z (cbrt.f64 y)) 2)","y","inf",0.39599609375],["(pow.f64 (*.f64 z (cbrt.f64 y)) 2)","y","0",0.4619140625],["(pow.f64 (*.f64 z (cbrt.f64 y)) 2)","z","-inf",0.444091796875],["(pow.f64 (*.f64 z (cbrt.f64 y)) 2)","z","inf",0.47802734375],["(pow.f64 (*.f64 z (cbrt.f64 y)) 2)","z","0",1.446044921875],["(*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2))","z","-inf",0.174072265625],["(*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2))","z","inf",0.366943359375],["(*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2))","z","0",0.471923828125],["(*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2))","y","-inf",2.35498046875],["(*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2))","y","inf",0.39208984375],["(*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2))","y","0",0.3740234375]],"time":10.087158203125,"type":"series"},{"count":[[4,113]],"inputs":[["(*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2))","(pow.f64 (*.f64 z (cbrt.f64 y)) 2)","(*.f64 z (cbrt.f64 y))","(cbrt.f64 y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (cbrt.f64 (neg.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3)) (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 4/3) (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 4/3) (cbrt.f64 (pow.f64 y 2/3))) (*.f64 (cbrt.f64 (cbrt.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 y)) (pow.f64 (*.f64 (cbrt.f64 (cbrt.f64 y)) (*.f64 z (cbrt.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3) (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 4/3) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (cbrt.f64 y)) (*.f64 z (cbrt.f64 y))) 2) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 4/3) (cbrt.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3)) (pow.f64 (*.f64 z (cbrt.f64 y)) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) (cbrt.f64 (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 4/3) (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y 2/3)) (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) (cbrt.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cbrt.f64 (cbrt.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3))) (neg.f64 (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 4/3) (cbrt.f64 (pow.f64 y 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y))) (*.f64 z (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 y)) (*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (cbrt.f64 (neg.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (cbrt.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (pow.f64 (*.f64 z (cbrt.f64 y)) 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 y (pow.f64 (*.f64 z (cbrt.f64 y)) 6)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (*.f64 z (cbrt.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 z (cbrt.f64 y)) z) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y))) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (*.f64 z (cbrt.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 z (cbrt.f64 y))) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 z (cbrt.f64 y))) 5) (cbrt.f64 (*.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (pow.f64 (cbrt.f64 (*.f64 (*.f64 z z) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3) (pow.f64 (*.f64 z (cbrt.f64 y)) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 4/3) (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y 2/3)) (pow.f64 (*.f64 (cbrt.f64 (pow.f64 y 2/3)) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 y)) z) (*.f64 (cbrt.f64 (neg.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 y z)) 2) (pow.f64 (pow.f64 z 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (cbrt.f64 (cbrt.f64 y))) 2) (pow.f64 (cbrt.f64 y) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z z) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3)) (neg.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 y)) (*.f64 z (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 z (cbrt.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (pow.f64 z 3)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (cbrt.f64 y))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (cbrt.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (neg.f64 y)) z) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (cbrt.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 z (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (cbrt.f64 (neg.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (cbrt.f64 y))) (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3) (cbrt.f64 (*.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 y)) (*.f64 (cbrt.f64 (pow.f64 y 2/3)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (cbrt.f64 (*.f64 (*.f64 z z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (cbrt.f64 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 z z) y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 y 2/3)) z) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y 2/3)) (*.f64 z (cbrt.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (cbrt.f64 (neg.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 y)) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 z (cbrt.f64 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (neg.f64 y)) z)) (neg.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 z (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 y)) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (cbrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (cbrt.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (pow.f64 z 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (cbrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (neg.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 y (pow.f64 z 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 y))) (cbrt.f64 (pow.f64 (pow.f64 y 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (cbrt.f64 y))) (neg.f64 (cbrt.f64 (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 y) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 y 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 y)))))"]],"rules":[["egg-rr",19],["egg-rr",28],["egg-rr",36],["egg-rr",30]],"time":51.6298828125,"type":"rewrite"},{"count":[[161,118]],"inputs":[["(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 y (pow.f64 z 2))","(*.f64 (*.f64 y z) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(pow.f64 (*.f64 (cbrt.f64 y) z) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(pow.f64 (*.f64 (cbrt.f64 y) z) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(pow.f64 (*.f64 (cbrt.f64 y) z) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(pow.f64 (*.f64 (cbrt.f64 y) z) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(pow.f64 (*.f64 (cbrt.f64 y) z) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(pow.f64 (*.f64 (cbrt.f64 y) z) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(pow.f64 (*.f64 (cbrt.f64 y) z) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(pow.f64 (*.f64 (cbrt.f64 y) z) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(pow.f64 (*.f64 (cbrt.f64 y) z) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(pow.f64 (*.f64 (cbrt.f64 y) z) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(pow.f64 (*.f64 (cbrt.f64 y) z) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 z 2))","(pow.f64 (*.f64 (cbrt.f64 y) z) 2)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (cbrt.f64 y) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (cbrt.f64 y) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (cbrt.f64 y) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (cbrt.f64 y) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (cbrt.f64 y) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (cbrt.f64 y) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (cbrt.f64 y) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (cbrt.f64 y) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (cbrt.f64 y) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (cbrt.f64 y) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (cbrt.f64 y) z)","(*.f64 (pow.f64 (*.f64 1 y) 1/3) z)","(*.f64 (cbrt.f64 y) z)"]],"time":172.376953125,"type":"simplify"},{"compiler":[[1995,902]],"time":21.72314453125,"type":"eval"},{"alts":[["(+.f64 x (*.f64 (cbrt.f64 y) (*.f64 (*.f64 (*.f64 z (cbrt.f64 y)) z) (cbrt.f64 y))))","fresh",5.233278690620198],["(+.f64 x (*.f64 (*.f64 z (cbrt.f64 y)) (*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y)))))","next",0.26312265629507225],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3))","done",0.2194901367581882],["(fma.f64 (*.f64 z z) y x)","fresh",6.779825768864454],["(+.f64 x (*.f64 (*.f64 y z) z))","done",0.08203125]],"compiler":[[17,9],[17,8],[13,9],[9,5],[10,6],[17,9],[17,8],[9,5]],"count":[[141,5]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[137,2],"picked":[1,0]}],"min-error":[0.00390625],"time":36.43701171875,"type":"prune"},{"compiler":[[45,8]],"locations":[["(cbrt.f64 y)",0.06640625,false],["(*.f64 (*.f64 z (cbrt.f64 y)) (*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y))))",0.2265625,true],["(*.f64 z (cbrt.f64 y))",0.2421875,false],["(*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y)))",0.30859375,true]],"time":6.450927734375,"type":"localize"},{"count":[[2,36]],"series":[["(*.f64 (*.f64 z (cbrt.f64 y)) (*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y))))","y","-inf",0.3681640625],["(*.f64 (*.f64 z (cbrt.f64 y)) (*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y))))","y","inf",0.230224609375],["(*.f64 (*.f64 z (cbrt.f64 y)) (*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y))))","y","0",1.07421875],["(*.f64 (*.f64 z (cbrt.f64 y)) (*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y))))","z","-inf",0.156982421875],["(*.f64 (*.f64 z (cbrt.f64 y)) (*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y))))","z","inf",0.2490234375],["(*.f64 (*.f64 z (cbrt.f64 y)) (*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y))))","z","0",0.923095703125],["(*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y)))","z","-inf",0.340087890625],["(*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y)))","z","inf",0.27294921875],["(*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y)))","z","0",1.623046875],["(*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y)))","y","-inf",0.450927734375],["(*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y)))","y","inf",0.265869140625],["(*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y)))","y","0",0.294921875]],"time":6.41796875,"type":"series"},{"count":[[2,66]],"inputs":[["(*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y)))","(*.f64 (*.f64 z (cbrt.f64 y)) (*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 y 2/3) z) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (pow.f64 y 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 z) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 y)) (*.f64 (cbrt.f64 (pow.f64 y 2/3)) (*.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (cbrt.f64 y))) (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 z (cbrt.f64 y)) (cbrt.f64 (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 y 2/3)) (*.f64 z (cbrt.f64 y))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y 2/3)) (*.f64 (*.f64 z (cbrt.f64 y)) (cbrt.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3) (cbrt.f64 y)) (cbrt.f64 (*.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 y 2/3) z)) (pow.f64 (*.f64 (pow.f64 y 2/3) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 y 2/3) z) 2/3) (cbrt.f64 (*.f64 (pow.f64 y 2/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (*.f64 z (cbrt.f64 y)))) (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3) (cbrt.f64 (*.f64 y (*.f64 z (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 z) (pow.f64 y 2/3))) (neg.f64 (pow.f64 (*.f64 (pow.f64 y 2/3) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 z) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 z) (pow.f64 y 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 y 2/3) z) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 y 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (pow.f64 y 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y 2/3) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 y 2/3) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (*.f64 y (pow.f64 z 3))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 y 2/3) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 z) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 y (*.f64 y (pow.f64 z 3))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) (cbrt.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (cbrt.f64 (neg.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 y)) (*.f64 (pow.f64 y 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) z) (*.f64 z (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (*.f64 (pow.f64 y 2/3) (*.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 z (cbrt.f64 y))) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (*.f64 (pow.f64 y 2/3) (*.f64 z (cbrt.f64 y))) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (cbrt.f64 y))) (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3) (*.f64 (pow.f64 y 2/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 y 2/3) z) z) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 y 2/3) z)) (*.f64 (pow.f64 (*.f64 (pow.f64 y 2/3) z) 2/3) (*.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (*.f64 (pow.f64 y 2/3) z) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3) (*.f64 (pow.f64 y 2/3) z)) (cbrt.f64 (*.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 y 2/3) z) 2/3) (*.f64 z (cbrt.f64 y))) (cbrt.f64 (*.f64 (pow.f64 y 2/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 y 2/3) (*.f64 z (cbrt.f64 y))) (pow.f64 z 2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3)) (pow.f64 (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) (cbrt.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) (cbrt.f64 y)) 2/3) (*.f64 (cbrt.f64 (cbrt.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 (pow.f64 y 2/3) z))) (pow.f64 (*.f64 (pow.f64 y 2/3) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 y 2/3) z) (cbrt.f64 (*.f64 z (cbrt.f64 y)))) (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3) (*.f64 (*.f64 (pow.f64 y 2/3) z) (cbrt.f64 (*.f64 z (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 y 2/3) z) 2/3) (*.f64 (*.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 (pow.f64 y 2/3) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cbrt.f64 (cbrt.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3))) (neg.f64 (pow.f64 (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) (cbrt.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (cbrt.f64 (neg.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) (cbrt.f64 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) (cbrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) (cbrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (cbrt.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (pow.f64 (*.f64 y (pow.f64 z 3)) 2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 z (cbrt.f64 y)) 2) (cbrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 y (pow.f64 (*.f64 y (pow.f64 z 3)) 2)))))))"]],"rules":[["egg-rr",36],["egg-rr",30]],"time":44.222900390625,"type":"rewrite"},{"count":[[102,69]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 y 2/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 y 2/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 y 2/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 y 2/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 y 2/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 y 2/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 y 2/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 y 2/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 y 2/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 y 2/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 y 2/3) z)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 y 2/3) z)","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))"]],"time":135.022216796875,"type":"simplify"},{"compiler":[[3120,1125]],"time":26.678955078125,"type":"eval"},{"alts":[["(+.f64 x (*.f64 (cbrt.f64 y) (*.f64 (*.f64 (*.f64 z (cbrt.f64 y)) z) (cbrt.f64 y))))","fresh",5.233278690620198],["(+.f64 x (*.f64 (*.f64 z (cbrt.f64 y)) (*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y)))))","done",0.26312265629507225],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3))","done",0.2194901367581882],["(fma.f64 (*.f64 z z) y x)","fresh",6.779825768864454],["(+.f64 x (*.f64 (*.f64 y z) z))","done",0.08203125]],"compiler":[[17,9],[17,8],[13,9],[9,5],[10,6]],"count":[[189,5]],"kept":[{"done":[2,2],"fresh":[2,2],"new":[184,0],"picked":[1,1]}],"min-error":[0.00390625],"time":53.962890625,"type":"prune"},{"accuracy":[0.08203125],"baseline":[0.08203125],"branch":[["x",0.08203125,1],["y",0.08203125,1],["z",0.08203125,1],["(+.f64 x (*.f64 (*.f64 y z) z))",0.08203125,1],["(*.f64 (*.f64 y z) z)",0.08203125,1]],"compiler":[[4,3],[4,3],[4,3],[10,6],[8,5],[77,26]],"count":[[8,1]],"inputs":[["(+.f64 x (*.f64 (cbrt.f64 y) (*.f64 (*.f64 (*.f64 z (cbrt.f64 y)) z) (cbrt.f64 y))))","(+.f64 x (*.f64 (*.f64 z (cbrt.f64 y)) (*.f64 (cbrt.f64 y) (*.f64 z (cbrt.f64 y)))))","(fma.f64 (*.f64 z z) y x)","(+.f64 x (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) z)) 3))","(+.f64 x (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 z (cbrt.f64 y)) 2)))","(fma.f64 (*.f64 z z) y x)","(fma.f64 (*.f64 y z) z x)","(+.f64 x (*.f64 (*.f64 y z) z))"]],"link":["."],"name":["Statistics.Sample:robustSumVarWeighted from math-functions-0.1.5.2"],"oracle":[6.998064733770177],"outputs":[["(+.f64 x (*.f64 (*.f64 y z) z))"]],"time":22.56201171875,"times":[["x",3.9599609375],["y",4.049072265625],["z",3.9609375],["(+.f64 x (*.f64 (*.f64 y z) z))",5.68408203125],["(*.f64 (*.f64 y z) z)",3.381103515625]],"type":"regimes"},{"compiler":[[10,6]],"inputs":[["(+.f64 x (*.f64 (*.f64 y z) z))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (*.f64 (*.f64 y z) z))","(fma.f64 (*.f64 y z) z x)"]],"stop":[["fuel",1]],"time":37.64306640625,"type":"simplify"},{"time":0.0029296875,"type":"soundness"},{"compiler":[[10,6]],"remove-preprocessing":[[]],"time":7.776123046875,"type":"end"}]
[{"compiler":[[11,8]],"method":["search"],"sampling":[[12,0.4797652819565883,0.41930705536856294,0.10092766267484876],[11,0.40565519775191206,0.499267935694661,0.09507686655342695],[10,0.34324670579007943,0.5694774891517227,0.08727580505819788],[9,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":77.466064453125,"type":"analyze"},{"outcomes":[["body",256,"invalid",43.51025390625,1165],["body",1024,"valid",0.091064453125,1],["body",256,"valid",309.046875,8255]],"time":362.13916015625,"type":"sample"},{"compiler":[[10,7]],"inputs":[["0","1","2"],["(*.f64 (+.f64 x y) (+.f64 z 1))","(*.f64 (+.f64 y x) (+.f64 z 1))","(*.f64 (+.f64 z y) (+.f64 x 1))","(*.f64 (+.f64 x z) (+.f64 y 1))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(*.f64 (+.f64 x y) (+.f64 z 1))","(*.f64 (+.f64 y x) (+.f64 z 1))","(*.f64 (+.f64 x y) (+.f64 z 1))","(*.f64 (+.f64 z y) (+.f64 x 1))","(*.f64 (+.f64 x z) (+.f64 y 1))"]],"symmetry":[[]],"time":68.760986328125,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(*.f64 (+.f64 x y) (+.f64 z 1))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 x y) (+.f64 z 1))"]],"time":17.558837890625,"type":"simplify"},{"compiler":[[10,7]],"time":0.244140625,"type":"eval"},{"alts":[["(*.f64 (+.f64 x y) (+.f64 z 1))","next",0.015625]],"compiler":[[10,7],[10,7]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.015625],"time":0.719970703125,"type":"prune"},{"compiler":[[20,10]],"locations":[["(*.f64 (+.f64 x y) (+.f64 z 1))",0.015625,true]],"time":4.48291015625,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 (+.f64 x y) (+.f64 z 1))","z","-inf",0.306884765625],["(*.f64 (+.f64 x y) (+.f64 z 1))","z","inf",0.284912109375],["(*.f64 (+.f64 x y) (+.f64 z 1))","z","0",0.35986328125],["(*.f64 (+.f64 x y) (+.f64 z 1))","y","-inf",0.29296875],["(*.f64 (+.f64 x y) (+.f64 z 1))","y","inf",0.327880859375],["(*.f64 (+.f64 x y) (+.f64 z 1))","y","0",0.235107421875],["(*.f64 (+.f64 x y) (+.f64 z 1))","x","-inf",0.3271484375],["(*.f64 (+.f64 x y) (+.f64 z 1))","x","inf",0.39794921875],["(*.f64 (+.f64 x y) (+.f64 z 1))","x","0",0.39501953125]],"time":3.0400390625,"type":"series"},{"count":[[1,77]],"inputs":[["(*.f64 (+.f64 x y) (+.f64 z 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 z 1) x) (*.f64 (+.f64 z 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 z 1) y) (*.f64 (+.f64 z 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x y) z x) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x y) z y) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 x y) (*.f64 z y)) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 x y) (*.f64 z x)) (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z x) (+.f64 (*.f64 z y) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z y) (+.f64 (*.f64 z x) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x y) (+.f64 z 1)) (*.f64 (*.f64 (+.f64 x y) (+.f64 z 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 x y) (+.f64 z 1)) 0) (*.f64 (+.f64 x y) (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x y) (+.f64 z 1)) (*.f64 0 (*.f64 (+.f64 x y) (+.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 x y) (+.f64 z 1))) (*.f64 (+.f64 x y) (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x y) z) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 x y) z y) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 x y) z x) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 z 1) x) 1) (*.f64 (*.f64 (+.f64 z 1) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 z 1) y) 1) (*.f64 (*.f64 (+.f64 z 1) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x y) (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (fma.f64 (+.f64 x y) z y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (fma.f64 (+.f64 x y) z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x y) (+.f64 z 1))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) (+.f64 z 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) (+.f64 z 1)) 2)) (cbrt.f64 (*.f64 (+.f64 x y) (+.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (+.f64 z 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 z 1) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 z 1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 z 1) 2)) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 x y) (+.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 z 1) 2)) (+.f64 x y)) (cbrt.f64 (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 x y) (+.f64 z 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (+.f64 z 1)) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 (fma.f64 z z (-.f64 1 z)))) (/.f64 (+.f64 (pow.f64 z 3) 1) (pow.f64 (cbrt.f64 (fma.f64 z z (-.f64 1 z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 z 3) 1) (cbrt.f64 (fma.f64 z z (-.f64 1 z)))) (/.f64 (+.f64 x y) (pow.f64 (cbrt.f64 (fma.f64 z z (-.f64 1 z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 z 3) 1) 1) (/.f64 (+.f64 x y) (fma.f64 z z (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) (cbrt.f64 (+.f64 z 1))) (cbrt.f64 (pow.f64 (+.f64 z 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 z 1) (cbrt.f64 (+.f64 x y))) (cbrt.f64 (pow.f64 (+.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 x y) (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) (+.f64 z 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (*.f64 (+.f64 z 1) (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 z 1) 2)) (*.f64 (+.f64 x y) (cbrt.f64 (+.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (+.f64 (*.f64 z (cbrt.f64 (+.f64 x y))) (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (+.f64 (cbrt.f64 (+.f64 x y)) (*.f64 z (cbrt.f64 (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) (+.f64 (pow.f64 z 3) 1)) (/.f64 1 (fma.f64 z z (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) (+.f64 (pow.f64 z 3) 1)) (cbrt.f64 (fma.f64 z z (-.f64 1 z)))) (pow.f64 (cbrt.f64 (fma.f64 z z (-.f64 1 z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (+.f64 (pow.f64 z 3) 1)) (fma.f64 z z (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (+.f64 -1 (neg.f64 (pow.f64 z 3)))) (neg.f64 (fma.f64 z z (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (+.f64 z 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 z 3) 1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 z 1) 2)) (+.f64 x y))) (cbrt.f64 (fma.f64 z z (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 x y) (+.f64 (pow.f64 z 3) 1)) 1) (fma.f64 z z (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (neg.f64 (pow.f64 z 3))) (+.f64 x y)) (neg.f64 (fma.f64 z z (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) (+.f64 (pow.f64 z 3) 1)) 1) (fma.f64 z z (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x y) (+.f64 (pow.f64 z 3) 1))) (neg.f64 (fma.f64 z z (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x y) (+.f64 z 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) (+.f64 z 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) (+.f64 z 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) (+.f64 z 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x y) (+.f64 z 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 x y) (+.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) (+.f64 z 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (+.f64 x y) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x y) z (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z 1) x (*.f64 (+.f64 z 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (cbrt.f64 (+.f64 x y)) (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (+.f64 x y)) -1 (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (+.f64 x y)) (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (+.f64 z 1) (*.f64 (+.f64 z 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x y)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) z) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) (+.f64 x y)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 (+.f64 x y))) (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 x y) z)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) z) 2)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x y) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 z 1) (*.f64 (+.f64 z 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x y) z) 1 (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x y) 1 (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x y) (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 x y) z) (+.f64 x y))))))"]],"rules":[["egg-rr",77]],"time":22.466064453125,"type":"rewrite"},{"count":[[113,84]],"inputs":[["(*.f64 y (+.f64 1 z))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) x)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) x)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) x)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 y (+.f64 1 z))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 y (+.f64 1 z))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 y x)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 y x) z)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 y x) z)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (+.f64 1 z))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 (+.f64 1 z) x)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 (+.f64 1 z) x)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 (+.f64 1 z) x)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 y (+.f64 1 z))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 y (+.f64 1 z))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y x)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 (+.f64 y x) z)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 (+.f64 y x) z)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 1 z) (+.f64 y x))"]],"time":120.054931640625,"type":"simplify"},{"compiler":[[1086,523]],"time":12.85302734375,"type":"eval"},{"alts":[["(fma.f64 (+.f64 x y) z (+.f64 x y))","fresh",0.01171875],["(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))","next",0.0078125]],"compiler":[[11,5],[13,9],[11,5],[13,9]],"count":[[85,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[84,2],"picked":[1,0]}],"min-error":[0],"time":19.117919921875,"type":"prune"},{"compiler":[[25,15]],"locations":[["(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))",0.0078125,true]],"time":5.942138671875,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))","x","-inf",0.25],["(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))","x","inf",0.2548828125],["(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))","x","0",0.276123046875],["(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))","y","-inf",0.578125],["(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))","y","inf",0.263916015625],["(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))","y","0",0.288818359375],["(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))","z","-inf",0.33203125],["(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))","z","inf",0.2490234375],["(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))","z","0",0.370849609375]],"time":2.9990234375,"type":"series"},{"count":[[1,50]],"inputs":[["(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (+.f64 z 1) y) x) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (+.f64 z 1) y) (*.f64 x z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x z) (+.f64 x (*.f64 (+.f64 z 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (+.f64 (*.f64 x z) (*.f64 (+.f64 z 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 z 1) (+.f64 y x)) 0) (*.f64 (+.f64 z 1) (+.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 z 1) (+.f64 y x)) (*.f64 (*.f64 (+.f64 z 1) (+.f64 y x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 z 1) y) (fma.f64 x z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 z 1) (+.f64 y x))) (*.f64 (+.f64 z 1) (+.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 z 1) (+.f64 y x)) (*.f64 0 (*.f64 (+.f64 z 1) (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x z x) (*.f64 (+.f64 z 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 z 1) (+.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y x) (+.f64 z 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 z 1)) (+.f64 (*.f64 (pow.f64 (+.f64 z 1) 2/3) x) (*.f64 (pow.f64 (+.f64 z 1) 2/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 z 1)) (+.f64 (*.f64 (pow.f64 (+.f64 z 1) 2/3) y) (*.f64 (pow.f64 (+.f64 z 1) 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 z 1) (+.f64 y x))) (pow.f64 (*.f64 (+.f64 z 1) (+.f64 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 z 1) (+.f64 y x)) 2/3) (cbrt.f64 (*.f64 (+.f64 z 1) (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 z 1) (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 z 1) (+.f64 y x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 z 1) (+.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 z 1) (+.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 x (+.f64 (pow.f64 z 3) 1)) (fma.f64 z z (-.f64 1 z))) (*.f64 (fma.f64 z z (-.f64 1 z)) (*.f64 (+.f64 (pow.f64 z 3) 1) y))) (*.f64 (fma.f64 z z (-.f64 1 z)) (fma.f64 z z (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (+.f64 (pow.f64 z 3) 1) y) (fma.f64 z z (-.f64 1 z))) (*.f64 (fma.f64 z z (-.f64 1 z)) (*.f64 x (+.f64 (pow.f64 z 3) 1)))) (*.f64 (fma.f64 z z (-.f64 1 z)) (fma.f64 z z (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 z 3) 1) (+.f64 y x)) (fma.f64 z z (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (neg.f64 (pow.f64 z 3)) -1) (+.f64 y x)) (neg.f64 (fma.f64 z z (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (pow.f64 z 3) 1) y) (*.f64 x (+.f64 (pow.f64 z 3) 1))) (fma.f64 z z (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (+.f64 (pow.f64 z 3) 1)) (*.f64 (+.f64 (pow.f64 z 3) 1) y)) (fma.f64 z z (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 z 1) (+.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 z 1) (+.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 z 1) (+.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 z 1) (+.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 z 1) (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 z 1) (+.f64 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z 1) y (fma.f64 x z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 z 1) y)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 z 1) y) 2)) (fma.f64 x z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 z 1)) (*.f64 (pow.f64 (+.f64 z 1) 2/3) y) (fma.f64 x z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 z 1) (cbrt.f64 y)) (pow.f64 y 2/3) (fma.f64 x z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (+.f64 z 1) (fma.f64 x z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (+.f64 z 1)) (*.f64 (+.f64 z 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x z x)) (pow.f64 (fma.f64 x z x) 2/3) (*.f64 (+.f64 z 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (+.f64 z 1))) (pow.f64 (+.f64 z 1) 2/3) (*.f64 (+.f64 z 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 x z x) 2/3) (cbrt.f64 (fma.f64 x z x)) (*.f64 (+.f64 z 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 z 1)) (*.f64 (pow.f64 (+.f64 z 1) 2/3) x) (*.f64 (+.f64 z 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 z 1) (*.f64 (+.f64 z 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 z 1) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 (+.f64 z 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z 1) x (*.f64 (+.f64 z 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 x z x)) (*.f64 (+.f64 z 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 z 1) y) 1 (fma.f64 x z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 z 1) y) (fma.f64 x z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x z x) 1 (*.f64 (+.f64 z 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x z x) (*.f64 (+.f64 z 1) y))))))"]],"rules":[["egg-rr",50]],"time":22.83984375,"type":"rewrite"},{"count":[[86,59]],"inputs":[["(+.f64 y x)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 y x) z)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)) x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)) x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)) x))","(*.f64 (+.f64 1 z) x)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 y (+.f64 1 z))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 y (+.f64 1 z))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 y (+.f64 1 z))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) x)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) x)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 y x)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 (+.f64 y x) z)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 (+.f64 y x) z)","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)) x))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)) x))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)) x))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 (+.f64 1 z) x)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 y (+.f64 1 z))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 y (+.f64 1 z))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 y (+.f64 1 z))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 (+.f64 1 z) x)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 (+.f64 1 z) x)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))"]],"time":121.656982421875,"type":"simplify"},{"compiler":[[797,450]],"time":9.921142578125,"type":"eval"},{"alts":[["(fma.f64 (+.f64 x y) z (+.f64 x y))","next",0.01171875],["(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))","done",0.0078125]],"compiler":[[11,5],[13,9],[11,5]],"count":[[61,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[59,0],"picked":[1,1]}],"min-error":[0],"time":11.990966796875,"type":"prune"},{"compiler":[[17,5]],"locations":[["(fma.f64 (+.f64 x y) z (+.f64 x y))",0.01171875,true]],"time":3.48486328125,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 (+.f64 x y) z (+.f64 x y))","z","-inf",0.308837890625],["(fma.f64 (+.f64 x y) z (+.f64 x y))","z","inf",0.2470703125],["(fma.f64 (+.f64 x y) z (+.f64 x y))","z","0",0.212158203125],["(fma.f64 (+.f64 x y) z (+.f64 x y))","y","-inf",0.293212890625],["(fma.f64 (+.f64 x y) z (+.f64 x y))","y","inf",0.233154296875],["(fma.f64 (+.f64 x y) z (+.f64 x y))","y","0",0.255126953125],["(fma.f64 (+.f64 x y) z (+.f64 x y))","x","-inf",0.2548828125],["(fma.f64 (+.f64 x y) z (+.f64 x y))","x","inf",0.26904296875],["(fma.f64 (+.f64 x y) z (+.f64 x y))","x","0",0.322021484375]],"time":2.504150390625,"type":"series"},{"count":[[1,49]],"inputs":[["(fma.f64 (+.f64 x y) z (+.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x y) z x) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x y) z y) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x y) z) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x y) (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (fma.f64 (+.f64 x y) z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (fma.f64 (+.f64 x y) z y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (fma.f64 (+.f64 x y) z x) -1)) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (fma.f64 (+.f64 x y) z x))) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (fma.f64 (+.f64 x y) z y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (fma.f64 (+.f64 x y) z y) -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (+.f64 x y) (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x y) (+.f64 1 z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (+.f64 x y) z) (neg.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (+.f64 x y) z x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x y) (neg.f64 (*.f64 (+.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (+.f64 x y) z y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (+.f64 x y) (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (+.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (*.f64 (+.f64 1 z) (pow.f64 (+.f64 x y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 z) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x y) (+.f64 1 z))) (pow.f64 (*.f64 (+.f64 x y) (+.f64 1 z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 x y) (+.f64 1 z)) 2/3) (cbrt.f64 (*.f64 (+.f64 x y) (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (+.f64 x y) (+.f64 1 z)))) (neg.f64 (pow.f64 (*.f64 (+.f64 x y) (+.f64 1 z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) z) 2)) (-.f64 (pow.f64 (+.f64 x y) 2/3) (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) z)) (cbrt.f64 (+.f64 x y))))) (+.f64 (cbrt.f64 (*.f64 (+.f64 x y) z)) (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 x y) 2/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) z) 2)) (*.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 (*.f64 (+.f64 x y) z))))) (+.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 (*.f64 (+.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 x y) (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 x y) (+.f64 1 z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 x y) (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) (+.f64 1 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x y) (+.f64 1 z)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (+.f64 1 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x y) (+.f64 1 z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x y) (+.f64 1 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) (+.f64 1 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x y) (+.f64 1 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 x y) (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) (+.f64 1 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x y) z (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x y) (cbrt.f64 z)) (pow.f64 z 2/3) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 x y) z)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) z) 2)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x y)) (*.f64 (pow.f64 (+.f64 x y) 2/3) z) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (+.f64 x y) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x y)) (pow.f64 (+.f64 x y) 2/3) (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x y) 2/3) (cbrt.f64 (+.f64 x y)) (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (+.f64 x y)) (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x y) z) 1 (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 x y) z) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x y) 1 (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x y) (*.f64 (+.f64 x y) z))))))"]],"rules":[["egg-rr",49]],"time":37.803955078125,"type":"rewrite"},{"count":[[85,65]],"inputs":[["(+.f64 (*.f64 y z) y)","(+.f64 (*.f64 y z) (+.f64 (*.f64 (+.f64 1 z) x) y))","(+.f64 (*.f64 y z) (+.f64 (*.f64 (+.f64 1 z) x) y))","(+.f64 (*.f64 y z) (+.f64 (*.f64 (+.f64 1 z) x) y))","(*.f64 (+.f64 1 z) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 (+.f64 1 z) x) y))","(+.f64 (*.f64 y z) (+.f64 (*.f64 (+.f64 1 z) x) y))","(+.f64 (*.f64 y z) (+.f64 (*.f64 (+.f64 1 z) x) y))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 z) 1) x))","(+.f64 (*.f64 y z) (+.f64 y (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 z) 1) x))))","(+.f64 (*.f64 y z) (+.f64 y (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 z) 1) x))))","(+.f64 (*.f64 y z) (+.f64 y (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 z) 1) x))))","(+.f64 (*.f64 z x) x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 y (+.f64 1 z)) x))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y (+.f64 1 z)) x))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y (+.f64 1 z)) x))","(*.f64 y (+.f64 1 z))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y (+.f64 1 z)) x))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y (+.f64 1 z)) x))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y (+.f64 1 z)) x))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 z) 1)))","(+.f64 (*.f64 z x) (+.f64 x (*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 z) 1)))))","(+.f64 (*.f64 z x) (+.f64 x (*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 z) 1)))))","(+.f64 (*.f64 z x) (+.f64 x (*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 z) 1)))))","(+.f64 y x)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 y x) z)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 y x) z)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 y z) y)","(fma.f64 y z y)","(+.f64 (*.f64 y z) (+.f64 (*.f64 (+.f64 1 z) x) y))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 (*.f64 y z) (+.f64 (*.f64 (+.f64 1 z) x) y))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 (*.f64 y z) (+.f64 (*.f64 (+.f64 1 z) x) y))","(*.f64 (+.f64 y x) (+.f64 1 z))","(*.f64 (+.f64 1 z) x)","(fma.f64 z x x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 (+.f64 1 z) x) y))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 (*.f64 y z) (+.f64 (*.f64 (+.f64 1 z) x) y))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 (*.f64 y z) (+.f64 (*.f64 (+.f64 1 z) x) y))","(*.f64 (+.f64 y x) (+.f64 1 z))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 z) 1) x))","(fma.f64 z x x)","(+.f64 (*.f64 y z) (+.f64 y (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 z) 1) x))))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 (*.f64 y z) (+.f64 y (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 z) 1) x))))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 (*.f64 y z) (+.f64 y (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 z) 1) x))))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 (*.f64 z x) x)","(fma.f64 z x x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 y (+.f64 1 z)) x))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y (+.f64 1 z)) x))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y (+.f64 1 z)) x))","(*.f64 (+.f64 y x) (+.f64 1 z))","(*.f64 y (+.f64 1 z))","(fma.f64 y z y)","(+.f64 (*.f64 z x) (+.f64 (*.f64 y (+.f64 1 z)) x))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y (+.f64 1 z)) x))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 (*.f64 z x) (+.f64 (*.f64 y (+.f64 1 z)) x))","(*.f64 (+.f64 y x) (+.f64 1 z))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 z) 1)))","(fma.f64 y z y)","(+.f64 (*.f64 z x) (+.f64 x (*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 z) 1)))))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 (*.f64 z x) (+.f64 x (*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 z) 1)))))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 (*.f64 z x) (+.f64 x (*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 z) 1)))))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 y x)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 y x) (+.f64 1 z))","(*.f64 (+.f64 y x) z)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 y x) (+.f64 1 z))","(*.f64 (+.f64 y x) z)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 y x) (+.f64 1 z))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 y x) (+.f64 1 z))"]],"time":130.240966796875,"type":"simplify"},{"compiler":[[703,278]],"time":8.1201171875,"type":"eval"},{"alts":[["(fma.f64 (+.f64 x y) z (+.f64 x y))","done",0.01171875],["(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))","done",0.0078125]],"compiler":[[11,5],[13,9]],"count":[[67,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[65,0],"picked":[1,1]}],"min-error":[0],"time":11.97802734375,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["y",0.0078125,1],["z",0.0078125,1],["(*.f64 (+.f64 x y) (+.f64 z 1))",0.0078125,1],["(+.f64 x y)",0.0078125,1],["(+.f64 x y)",0.0078125,1],["(+.f64 z 1)",0.0078125,1]],"compiler":[[4,3],[4,3],[4,3],[10,7],[6,4],[6,4],[6,5],[28,14]],"count":[[3,1]],"inputs":[["(fma.f64 (+.f64 x y) z (+.f64 x y))","(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))","(*.f64 (+.f64 x y) (+.f64 z 1))"]],"link":["."],"name":["Optimisation.CirclePacking:place from circle-packing-0.1.0.4, G"],"oracle":[0.01953125],"outputs":[["(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))"]],"time":19.89697265625,"times":[["x",2.782958984375],["y",2.7958984375],["z",2.72412109375],["(*.f64 (+.f64 x y) (+.f64 z 1))",2.991943359375],["(+.f64 x y)",2.818115234375],["(+.f64 x y)",2.77490234375],["(+.f64 z 1)",2.175048828125]],"type":"regimes"},{"compiler":[[13,9]],"inputs":[["(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))","(*.f64 (+.f64 z 1) (+.f64 y x))"]],"stop":[["done",1]],"time":20.27294921875,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[13,9]],"remove-preprocessing":[[]],"time":9.26416015625,"type":"end"}]